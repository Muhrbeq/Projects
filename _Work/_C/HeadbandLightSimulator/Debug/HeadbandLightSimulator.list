
HeadbandLightSimulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008304  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080084a8  080084a8  000184a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008870  08008870  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008870  08008870  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008870  08008870  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008874  08008874  00018874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200001e4  08008a5c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08008a5c  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a1c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c7e  00000000  00000000  00033c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  000368b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  000377e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026989  00000000  00000000  000385a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e747  00000000  00000000  0005ef31  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db0f6  00000000  00000000  0006d678  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014876e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c10  00000000  00000000  001487ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800848c 	.word	0x0800848c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800848c 	.word	0x0800848c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c62:	2003      	movs	r0, #3
 8000c64:	f000 f940 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f000 f80d 	bl	8000c88 <HAL_InitTick>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	e001      	b.n	8000c7e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7a:	f003 fe81 	bl	8004980 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <HAL_InitTick+0x6c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d023      	beq.n	8000ce4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_InitTick+0x70>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_InitTick+0x6c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f93f 	bl	8000f36 <HAL_SYSTICK_Config>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10f      	bne.n	8000cde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d809      	bhi.n	8000cd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f000 f917 	bl	8000efe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_InitTick+0x74>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e007      	b.n	8000ce8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e004      	b.n	8000ce8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e001      	b.n	8000ce8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000004 	.word	0x20000004
 8000cf8:	2000000c 	.word	0x2000000c
 8000cfc:	20000000 	.word	0x20000000

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000004 	.word	0x20000004
 8000d24:	2000020c 	.word	0x2000020c

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000020c 	.word	0x2000020c

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_Delay+0x40>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffde 	bl	8000d28 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000004 	.word	0x20000004

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff47 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff5c 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff8e 	bl	8000e3c <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffb0 	bl	8000ea4 <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5e:	e154      	b.n	800120a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	2101      	movs	r1, #1
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8146 	beq.w	8001204 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d00b      	beq.n	8000f98 <HAL_GPIO_Init+0x48>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d007      	beq.n	8000f98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f8c:	2b11      	cmp	r3, #17
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b12      	cmp	r3, #18
 8000f96:	d130      	bne.n	8000ffa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	f003 0201 	and.w	r2, r3, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0xea>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b12      	cmp	r3, #18
 8001038:	d123      	bne.n	8001082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	691a      	ldr	r2, [r3, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	6939      	ldr	r1, [r7, #16]
 800107e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0203 	and.w	r2, r3, #3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 80a0 	beq.w	8001204 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <HAL_GPIO_Init+0x2d8>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c8:	4a57      	ldr	r2, [pc, #348]	; (8001228 <HAL_GPIO_Init+0x2d8>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6613      	str	r3, [r2, #96]	; 0x60
 80010d0:	4b55      	ldr	r3, [pc, #340]	; (8001228 <HAL_GPIO_Init+0x2d8>)
 80010d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010dc:	4a53      	ldr	r2, [pc, #332]	; (800122c <HAL_GPIO_Init+0x2dc>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001106:	d019      	beq.n	800113c <HAL_GPIO_Init+0x1ec>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a49      	ldr	r2, [pc, #292]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d013      	beq.n	8001138 <HAL_GPIO_Init+0x1e8>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a48      	ldr	r2, [pc, #288]	; (8001234 <HAL_GPIO_Init+0x2e4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d00d      	beq.n	8001134 <HAL_GPIO_Init+0x1e4>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a47      	ldr	r2, [pc, #284]	; (8001238 <HAL_GPIO_Init+0x2e8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0x1e0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a46      	ldr	r2, [pc, #280]	; (800123c <HAL_GPIO_Init+0x2ec>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <HAL_GPIO_Init+0x1dc>
 8001128:	2304      	movs	r3, #4
 800112a:	e008      	b.n	800113e <HAL_GPIO_Init+0x1ee>
 800112c:	2307      	movs	r3, #7
 800112e:	e006      	b.n	800113e <HAL_GPIO_Init+0x1ee>
 8001130:	2303      	movs	r3, #3
 8001132:	e004      	b.n	800113e <HAL_GPIO_Init+0x1ee>
 8001134:	2302      	movs	r3, #2
 8001136:	e002      	b.n	800113e <HAL_GPIO_Init+0x1ee>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <HAL_GPIO_Init+0x1ee>
 800113c:	2300      	movs	r3, #0
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	f002 0203 	and.w	r2, r2, #3
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4093      	lsls	r3, r2
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800114e:	4937      	ldr	r1, [pc, #220]	; (800122c <HAL_GPIO_Init+0x2dc>)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800115c:	4b38      	ldr	r3, [pc, #224]	; (8001240 <HAL_GPIO_Init+0x2f0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001180:	4a2f      	ldr	r2, [pc, #188]	; (8001240 <HAL_GPIO_Init+0x2f0>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <HAL_GPIO_Init+0x2f0>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011aa:	4a25      	ldr	r2, [pc, #148]	; (8001240 <HAL_GPIO_Init+0x2f0>)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <HAL_GPIO_Init+0x2f0>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011d4:	4a1a      	ldr	r2, [pc, #104]	; (8001240 <HAL_GPIO_Init+0x2f0>)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_GPIO_Init+0x2f0>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <HAL_GPIO_Init+0x2f0>)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	f47f aea3 	bne.w	8000f60 <HAL_GPIO_Init+0x10>
  }
}
 800121a:	bf00      	nop
 800121c:	371c      	adds	r7, #28
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	40010000 	.word	0x40010000
 8001230:	48000400 	.word	0x48000400
 8001234:	48000800 	.word	0x48000800
 8001238:	48000c00 	.word	0x48000c00
 800123c:	48001000 	.word	0x48001000
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001260:	e002      	b.n	8001268 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4013      	ands	r3, r2
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43d9      	mvns	r1, r3
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	400b      	ands	r3, r1
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e081      	b.n	80013be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d106      	bne.n	80012d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f003 f8c2 	bl	8004458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2224      	movs	r2, #36	; 0x24
 80012d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001308:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d107      	bne.n	8001322 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	e006      	b.n	8001330 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800132e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d104      	bne.n	8001342 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001340:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001354:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001364:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	ea42 0103 	orr.w	r1, r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	021a      	lsls	r2, r3, #8
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69d9      	ldr	r1, [r3, #28]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1a      	ldr	r2, [r3, #32]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2220      	movs	r2, #32
 80013aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	461a      	mov	r2, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	817b      	strh	r3, [r7, #10]
 80013d8:	4613      	mov	r3, r2
 80013da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	f040 80da 	bne.w	800159e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_I2C_Master_Transmit+0x30>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e0d3      	b.n	80015a0 <HAL_I2C_Master_Transmit+0x1d8>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001400:	f7ff fc92 	bl	8000d28 <HAL_GetTick>
 8001404:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2319      	movs	r3, #25
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 f9e6 	bl	80017e4 <I2C_WaitOnFlagUntilTimeout>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0be      	b.n	80015a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2221      	movs	r2, #33	; 0x21
 8001426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2210      	movs	r2, #16
 800142e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	893a      	ldrh	r2, [r7, #8]
 8001442:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800144e:	b29b      	uxth	r3, r3
 8001450:	2bff      	cmp	r3, #255	; 0xff
 8001452:	d90e      	bls.n	8001472 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	22ff      	movs	r2, #255	; 0xff
 8001458:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145e:	b2da      	uxtb	r2, r3
 8001460:	8979      	ldrh	r1, [r7, #10]
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 fb48 	bl	8001b00 <I2C_TransferConfig>
 8001470:	e06c      	b.n	800154c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001476:	b29a      	uxth	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001480:	b2da      	uxtb	r2, r3
 8001482:	8979      	ldrh	r1, [r7, #10]
 8001484:	4b48      	ldr	r3, [pc, #288]	; (80015a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 fb37 	bl	8001b00 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001492:	e05b      	b.n	800154c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	6a39      	ldr	r1, [r7, #32]
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 f9e3 	bl	8001864 <I2C_WaitOnTXISFlagUntilTimeout>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e07b      	b.n	80015a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3b01      	subs	r3, #1
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014dc:	b29b      	uxth	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d034      	beq.n	800154c <HAL_I2C_Master_Transmit+0x184>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d130      	bne.n	800154c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	2200      	movs	r2, #0
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 f975 	bl	80017e4 <I2C_WaitOnFlagUntilTimeout>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e04d      	b.n	80015a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001508:	b29b      	uxth	r3, r3
 800150a:	2bff      	cmp	r3, #255	; 0xff
 800150c:	d90e      	bls.n	800152c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	22ff      	movs	r2, #255	; 0xff
 8001512:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001518:	b2da      	uxtb	r2, r3
 800151a:	8979      	ldrh	r1, [r7, #10]
 800151c:	2300      	movs	r3, #0
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 faeb 	bl	8001b00 <I2C_TransferConfig>
 800152a:	e00f      	b.n	800154c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001530:	b29a      	uxth	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153a:	b2da      	uxtb	r2, r3
 800153c:	8979      	ldrh	r1, [r7, #10]
 800153e:	2300      	movs	r3, #0
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 fada 	bl	8001b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001550:	b29b      	uxth	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d19e      	bne.n	8001494 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	6a39      	ldr	r1, [r7, #32]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 f9c2 	bl	80018e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e01a      	b.n	80015a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2220      	movs	r2, #32
 8001570:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_I2C_Master_Transmit+0x1e4>)
 800157e:	400b      	ands	r3, r1
 8001580:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2220      	movs	r2, #32
 8001586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800159e:	2302      	movs	r3, #2
  }
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	80002000 	.word	0x80002000
 80015ac:	fe00e800 	.word	0xfe00e800

080015b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	461a      	mov	r2, r3
 80015bc:	460b      	mov	r3, r1
 80015be:	817b      	strh	r3, [r7, #10]
 80015c0:	4613      	mov	r3, r2
 80015c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	f040 80db 	bne.w	8001788 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_I2C_Master_Receive+0x30>
 80015dc:	2302      	movs	r3, #2
 80015de:	e0d4      	b.n	800178a <HAL_I2C_Master_Receive+0x1da>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015e8:	f7ff fb9e 	bl	8000d28 <HAL_GetTick>
 80015ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2319      	movs	r3, #25
 80015f4:	2201      	movs	r2, #1
 80015f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f8f2 	bl	80017e4 <I2C_WaitOnFlagUntilTimeout>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0bf      	b.n	800178a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2222      	movs	r2, #34	; 0x22
 800160e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2210      	movs	r2, #16
 8001616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	893a      	ldrh	r2, [r7, #8]
 800162a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	2bff      	cmp	r3, #255	; 0xff
 800163a:	d90e      	bls.n	800165a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	22ff      	movs	r2, #255	; 0xff
 8001640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001646:	b2da      	uxtb	r2, r3
 8001648:	8979      	ldrh	r1, [r7, #10]
 800164a:	4b52      	ldr	r3, [pc, #328]	; (8001794 <HAL_I2C_Master_Receive+0x1e4>)
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 fa54 	bl	8001b00 <I2C_TransferConfig>
 8001658:	e06d      	b.n	8001736 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165e:	b29a      	uxth	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001668:	b2da      	uxtb	r2, r3
 800166a:	8979      	ldrh	r1, [r7, #10]
 800166c:	4b49      	ldr	r3, [pc, #292]	; (8001794 <HAL_I2C_Master_Receive+0x1e4>)
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 fa43 	bl	8001b00 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800167a:	e05c      	b.n	8001736 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	6a39      	ldr	r1, [r7, #32]
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 f96b 	bl	800195c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e07c      	b.n	800178a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d034      	beq.n	8001736 <HAL_I2C_Master_Receive+0x186>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d130      	bne.n	8001736 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	2200      	movs	r2, #0
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f880 	bl	80017e4 <I2C_WaitOnFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e04d      	b.n	800178a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2bff      	cmp	r3, #255	; 0xff
 80016f6:	d90e      	bls.n	8001716 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	22ff      	movs	r2, #255	; 0xff
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001702:	b2da      	uxtb	r2, r3
 8001704:	8979      	ldrh	r1, [r7, #10]
 8001706:	2300      	movs	r3, #0
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f9f6 	bl	8001b00 <I2C_TransferConfig>
 8001714:	e00f      	b.n	8001736 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001724:	b2da      	uxtb	r2, r3
 8001726:	8979      	ldrh	r1, [r7, #10]
 8001728:	2300      	movs	r3, #0
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f9e5 	bl	8001b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29b      	uxth	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d19d      	bne.n	800167c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	6a39      	ldr	r1, [r7, #32]
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 f8cd 	bl	80018e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e01a      	b.n	800178a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2220      	movs	r2, #32
 800175a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6859      	ldr	r1, [r3, #4]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_I2C_Master_Receive+0x1e8>)
 8001768:	400b      	ands	r3, r1
 800176a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2220      	movs	r2, #32
 8001770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	e000      	b.n	800178a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001788:	2302      	movs	r3, #2
  }
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	80002400 	.word	0x80002400
 8001798:	fe00e800 	.word	0xfe00e800

0800179c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d103      	bne.n	80017ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d007      	beq.n	80017d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699a      	ldr	r2, [r3, #24]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	619a      	str	r2, [r3, #24]
  }
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	4613      	mov	r3, r2
 80017f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017f4:	e022      	b.n	800183c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d01e      	beq.n	800183c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017fe:	f7ff fa93 	bl	8000d28 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d302      	bcc.n	8001814 <I2C_WaitOnFlagUntilTimeout+0x30>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d113      	bne.n	800183c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2220      	movs	r2, #32
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e00f      	b.n	800185c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699a      	ldr	r2, [r3, #24]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	4013      	ands	r3, r2
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	429a      	cmp	r2, r3
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	429a      	cmp	r2, r3
 8001858:	d0cd      	beq.n	80017f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001870:	e02c      	b.n	80018cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f8dc 	bl	8001a34 <I2C_IsAcknowledgeFailed>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e02a      	b.n	80018dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d01e      	beq.n	80018cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188e:	f7ff fa4b 	bl	8000d28 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	429a      	cmp	r2, r3
 800189c:	d302      	bcc.n	80018a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d113      	bne.n	80018cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f043 0220 	orr.w	r2, r3, #32
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e007      	b.n	80018dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d1cb      	bne.n	8001872 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018f0:	e028      	b.n	8001944 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f89c 	bl	8001a34 <I2C_IsAcknowledgeFailed>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e026      	b.n	8001954 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001906:	f7ff fa0f 	bl	8000d28 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	429a      	cmp	r2, r3
 8001914:	d302      	bcc.n	800191c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d113      	bne.n	8001944 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001920:	f043 0220 	orr.w	r2, r3, #32
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e007      	b.n	8001954 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f003 0320 	and.w	r3, r3, #32
 800194e:	2b20      	cmp	r3, #32
 8001950:	d1cf      	bne.n	80018f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001968:	e055      	b.n	8001a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f860 	bl	8001a34 <I2C_IsAcknowledgeFailed>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e053      	b.n	8001a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b20      	cmp	r3, #32
 800198a:	d129      	bne.n	80019e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b04      	cmp	r3, #4
 8001998:	d105      	bne.n	80019a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e03f      	b.n	8001a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2220      	movs	r2, #32
 80019ac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80019ba:	400b      	ands	r3, r1
 80019bc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e022      	b.n	8001a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e0:	f7ff f9a2 	bl	8000d28 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d302      	bcc.n	80019f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10f      	bne.n	8001a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f043 0220 	orr.w	r2, r3, #32
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e007      	b.n	8001a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d1a2      	bne.n	800196a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	fe00e800 	.word	0xfe00e800

08001a34 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d151      	bne.n	8001af2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a4e:	e022      	b.n	8001a96 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a56:	d01e      	beq.n	8001a96 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a58:	f7ff f966 	bl	8000d28 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d302      	bcc.n	8001a6e <I2C_IsAcknowledgeFailed+0x3a>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d113      	bne.n	8001a96 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f043 0220 	orr.w	r2, r3, #32
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e02e      	b.n	8001af4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d1d5      	bne.n	8001a50 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fe71 	bl	800179c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <I2C_IsAcknowledgeFailed+0xc8>)
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f043 0204 	orr.w	r2, r3, #4
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	fe00e800 	.word	0xfe00e800

08001b00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	817b      	strh	r3, [r7, #10]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	0d5b      	lsrs	r3, r3, #21
 8001b1c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <I2C_TransferConfig+0x58>)
 8001b22:	430b      	orrs	r3, r1
 8001b24:	43db      	mvns	r3, r3
 8001b26:	ea02 0103 	and.w	r1, r2, r3
 8001b2a:	897b      	ldrh	r3, [r7, #10]
 8001b2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b30:	7a7b      	ldrb	r3, [r7, #9]
 8001b32:	041b      	lsls	r3, r3, #16
 8001b34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	03ff63ff 	.word	0x03ff63ff

08001b5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	d138      	bne.n	8001be4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e032      	b.n	8001be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2224      	movs	r2, #36	; 0x24
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001be4:	2302      	movs	r3, #2
  }
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d139      	bne.n	8001c7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e033      	b.n	8001c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2224      	movs	r2, #36	; 0x24
 8001c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0201 	bic.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e000      	b.n	8001c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c7c:	2302      	movs	r3, #2
  }
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40007000 	.word	0x40007000

08001ca8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb6:	d130      	bne.n	8001d1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc4:	d038      	beq.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cce:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2232      	movs	r2, #50	; 0x32
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	0c9b      	lsrs	r3, r3, #18
 8001ce8:	3301      	adds	r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cec:	e002      	b.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d00:	d102      	bne.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f2      	bne.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d14:	d110      	bne.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e00f      	b.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d26:	d007      	beq.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d30:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	2000000c 	.word	0x2000000c
 8001d50:	431bde83 	.word	0x431bde83

08001d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f000 bc11 	b.w	800258a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d68:	4ba0      	ldr	r3, [pc, #640]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d72:	4b9e      	ldr	r3, [pc, #632]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80e4 	beq.w	8001f52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_RCC_OscConfig+0x4c>
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	f040 808b 	bne.w	8001eae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	f040 8087 	bne.w	8001eae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001da0:	4b92      	ldr	r3, [pc, #584]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_OscConfig+0x64>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e3e8      	b.n	800258a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1a      	ldr	r2, [r3, #32]
 8001dbc:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x7e>
 8001dc8:	4b88      	ldr	r3, [pc, #544]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd0:	e005      	b.n	8001dde <HAL_RCC_OscConfig+0x8a>
 8001dd2:	4b86      	ldr	r3, [pc, #536]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d223      	bcs.n	8001e2a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fd40 	bl	800286c <RCC_SetFlashLatencyFromMSIRange>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e3c9      	b.n	800258a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df6:	4b7d      	ldr	r3, [pc, #500]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a7c      	ldr	r2, [pc, #496]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b7a      	ldr	r3, [pc, #488]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4977      	ldr	r1, [pc, #476]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e14:	4b75      	ldr	r3, [pc, #468]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	4972      	ldr	r1, [pc, #456]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
 8001e28:	e025      	b.n	8001e76 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e2a:	4b70      	ldr	r3, [pc, #448]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6f      	ldr	r2, [pc, #444]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b6d      	ldr	r3, [pc, #436]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	496a      	ldr	r1, [pc, #424]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e48:	4b68      	ldr	r3, [pc, #416]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	4965      	ldr	r1, [pc, #404]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fd00 	bl	800286c <RCC_SetFlashLatencyFromMSIRange>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e389      	b.n	800258a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e76:	f000 fc6f 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4b5b      	ldr	r3, [pc, #364]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	4a5a      	ldr	r2, [pc, #360]	; (8001ff0 <HAL_RCC_OscConfig+0x29c>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e92:	4a58      	ldr	r2, [pc, #352]	; (8001ff4 <HAL_RCC_OscConfig+0x2a0>)
 8001e94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e96:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <HAL_RCC_OscConfig+0x2a4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fef4 	bl	8000c88 <HAL_InitTick>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d052      	beq.n	8001f50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	e36d      	b.n	800258a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d032      	beq.n	8001f1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eb6:	4b4d      	ldr	r3, [pc, #308]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a4c      	ldr	r2, [pc, #304]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ec2:	f7fe ff31 	bl	8000d28 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eca:	f7fe ff2d 	bl	8000d28 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e356      	b.n	800258a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001edc:	4b43      	ldr	r3, [pc, #268]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee8:	4b40      	ldr	r3, [pc, #256]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a3f      	ldr	r2, [pc, #252]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	493a      	ldr	r1, [pc, #232]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f06:	4b39      	ldr	r3, [pc, #228]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	4935      	ldr	r1, [pc, #212]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
 8001f1a:	e01a      	b.n	8001f52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f1c:	4b33      	ldr	r3, [pc, #204]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a32      	ldr	r2, [pc, #200]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f28:	f7fe fefe 	bl	8000d28 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f30:	f7fe fefa 	bl	8000d28 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e323      	b.n	800258a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x1dc>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d073      	beq.n	8002046 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x21c>
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d10e      	bne.n	8001f88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d10b      	bne.n	8001f88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d063      	beq.n	8002044 <HAL_RCC_OscConfig+0x2f0>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d15f      	bne.n	8002044 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e300      	b.n	800258a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x24c>
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e01d      	b.n	8001fdc <HAL_RCC_OscConfig+0x288>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x270>
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCC_OscConfig+0x288>
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a05      	ldr	r2, [pc, #20]	; (8001fec <HAL_RCC_OscConfig+0x298>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01b      	beq.n	800201c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fea0 	bl	8000d28 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fea:	e010      	b.n	800200e <HAL_RCC_OscConfig+0x2ba>
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	08008520 	.word	0x08008520
 8001ff4:	2000000c 	.word	0x2000000c
 8001ff8:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7fe fe94 	bl	8000d28 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e2bd      	b.n	800258a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200e:	4baf      	ldr	r3, [pc, #700]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x2a8>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe fe84 	bl	8000d28 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe fe80 	bl	8000d28 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e2a9      	b.n	800258a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002036:	4ba5      	ldr	r3, [pc, #660]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x2d0>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d060      	beq.n	8002114 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d005      	beq.n	8002064 <HAL_RCC_OscConfig+0x310>
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d119      	bne.n	8002092 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d116      	bne.n	8002092 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002064:	4b99      	ldr	r3, [pc, #612]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_OscConfig+0x328>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e286      	b.n	800258a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4b93      	ldr	r3, [pc, #588]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	4990      	ldr	r1, [pc, #576]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002090:	e040      	b.n	8002114 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d023      	beq.n	80020e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209a:	4b8c      	ldr	r3, [pc, #560]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a8b      	ldr	r2, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fe3f 	bl	8000d28 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ae:	f7fe fe3b 	bl	8000d28 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e264      	b.n	800258a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c0:	4b82      	ldr	r3, [pc, #520]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	4b7f      	ldr	r3, [pc, #508]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	497c      	ldr	r1, [pc, #496]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
 80020e0:	e018      	b.n	8002114 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e2:	4b7a      	ldr	r3, [pc, #488]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a79      	ldr	r2, [pc, #484]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80020e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe fe1b 	bl	8000d28 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f6:	f7fe fe17 	bl	8000d28 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e240      	b.n	800258a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002108:	4b70      	ldr	r3, [pc, #448]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d03c      	beq.n	800219a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01c      	beq.n	8002162 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002128:	4b68      	ldr	r3, [pc, #416]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800212a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212e:	4a67      	ldr	r2, [pc, #412]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7fe fdf6 	bl	8000d28 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002140:	f7fe fdf2 	bl	8000d28 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e21b      	b.n	800258a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002152:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ef      	beq.n	8002140 <HAL_RCC_OscConfig+0x3ec>
 8002160:	e01b      	b.n	800219a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002162:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7fe fdd9 	bl	8000d28 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217a:	f7fe fdd5 	bl	8000d28 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e1fe      	b.n	800258a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800218c:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1ef      	bne.n	800217a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80a6 	beq.w	80022f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021ac:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10d      	bne.n	80021d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	4b44      	ldr	r3, [pc, #272]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	4a43      	ldr	r2, [pc, #268]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80021be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c2:	6593      	str	r3, [r2, #88]	; 0x58
 80021c4:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d0:	2301      	movs	r3, #1
 80021d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d4:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_RCC_OscConfig+0x57c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d118      	bne.n	8002212 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_RCC_OscConfig+0x57c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a3a      	ldr	r2, [pc, #232]	; (80022d0 <HAL_RCC_OscConfig+0x57c>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ec:	f7fe fd9c 	bl	8000d28 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f4:	f7fe fd98 	bl	8000d28 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e1c1      	b.n	800258a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002206:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <HAL_RCC_OscConfig+0x57c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d108      	bne.n	800222c <HAL_RCC_OscConfig+0x4d8>
 800221a:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	4a2a      	ldr	r2, [pc, #168]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800222a:	e024      	b.n	8002276 <HAL_RCC_OscConfig+0x522>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d110      	bne.n	8002256 <HAL_RCC_OscConfig+0x502>
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	4a24      	ldr	r2, [pc, #144]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002244:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224a:	4a20      	ldr	r2, [pc, #128]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002254:	e00f      	b.n	8002276 <HAL_RCC_OscConfig+0x522>
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226c:	4a17      	ldr	r2, [pc, #92]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800226e:	f023 0304 	bic.w	r3, r3, #4
 8002272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d016      	beq.n	80022ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7fe fd53 	bl	8000d28 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7fe fd4f 	bl	8000d28 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e176      	b.n	800258a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_OscConfig+0x578>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0ed      	beq.n	8002286 <HAL_RCC_OscConfig+0x532>
 80022aa:	e01a      	b.n	80022e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7fe fd3c 	bl	8000d28 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b2:	e00f      	b.n	80022d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7fe fd38 	bl	8000d28 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d906      	bls.n	80022d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e15f      	b.n	800258a <HAL_RCC_OscConfig+0x836>
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d4:	4baa      	ldr	r3, [pc, #680]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e8      	bne.n	80022b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e8:	4ba5      	ldr	r3, [pc, #660]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	4aa4      	ldr	r2, [pc, #656]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 80022ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03c      	beq.n	800237a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01c      	beq.n	8002342 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002308:	4b9d      	ldr	r3, [pc, #628]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 800230a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800230e:	4a9c      	ldr	r2, [pc, #624]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7fe fd06 	bl	8000d28 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002320:	f7fe fd02 	bl	8000d28 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e12b      	b.n	800258a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002332:	4b93      	ldr	r3, [pc, #588]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ef      	beq.n	8002320 <HAL_RCC_OscConfig+0x5cc>
 8002340:	e01b      	b.n	800237a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002342:	4b8f      	ldr	r3, [pc, #572]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002348:	4a8d      	ldr	r2, [pc, #564]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7fe fce9 	bl	8000d28 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800235a:	f7fe fce5 	bl	8000d28 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e10e      	b.n	800258a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800236c:	4b84      	ldr	r3, [pc, #528]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 800236e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ef      	bne.n	800235a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8102 	beq.w	8002588 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	2b02      	cmp	r3, #2
 800238a:	f040 80c5 	bne.w	8002518 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800238e:	4b7c      	ldr	r3, [pc, #496]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 0203 	and.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	429a      	cmp	r2, r3
 80023a0:	d12c      	bne.n	80023fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	3b01      	subs	r3, #1
 80023ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d123      	bne.n	80023fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d11b      	bne.n	80023fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d113      	bne.n	80023fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	3b01      	subs	r3, #1
 80023e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d109      	bne.n	80023fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	3b01      	subs	r3, #1
 80023f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d067      	beq.n	80024cc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d062      	beq.n	80024c8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002402:	4b5f      	ldr	r3, [pc, #380]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0bb      	b.n	800258a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002412:	4b5b      	ldr	r3, [pc, #364]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5a      	ldr	r2, [pc, #360]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800241c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800241e:	f7fe fc83 	bl	8000d28 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002426:	f7fe fc7f 	bl	8000d28 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0a8      	b.n	800258a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002438:	4b51      	ldr	r3, [pc, #324]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f0      	bne.n	8002426 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002444:	4b4e      	ldr	r3, [pc, #312]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	4b4e      	ldr	r3, [pc, #312]	; (8002584 <HAL_RCC_OscConfig+0x830>)
 800244a:	4013      	ands	r3, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002454:	3a01      	subs	r2, #1
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800245e:	0212      	lsls	r2, r2, #8
 8002460:	4311      	orrs	r1, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002466:	0852      	lsrs	r2, r2, #1
 8002468:	3a01      	subs	r2, #1
 800246a:	0552      	lsls	r2, r2, #21
 800246c:	4311      	orrs	r1, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002472:	0852      	lsrs	r2, r2, #1
 8002474:	3a01      	subs	r2, #1
 8002476:	0652      	lsls	r2, r2, #25
 8002478:	4311      	orrs	r1, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800247e:	06d2      	lsls	r2, r2, #27
 8002480:	430a      	orrs	r2, r1
 8002482:	493f      	ldr	r1, [pc, #252]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002488:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a3c      	ldr	r2, [pc, #240]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 800248e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002492:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002494:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a39      	ldr	r2, [pc, #228]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 800249a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024a0:	f7fe fc42 	bl	8000d28 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fc3e 	bl	8000d28 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e067      	b.n	800258a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ba:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024c6:	e05f      	b.n	8002588 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e05e      	b.n	800258a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024cc:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d157      	bne.n	8002588 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a28      	ldr	r2, [pc, #160]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 80024de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a25      	ldr	r2, [pc, #148]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 80024ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024f0:	f7fe fc1a 	bl	8000d28 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe fc16 	bl	8000d28 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e03f      	b.n	800258a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x7a4>
 8002516:	e037      	b.n	8002588 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d02d      	beq.n	800257a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002528:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4a11      	ldr	r2, [pc, #68]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 800253c:	f023 0303 	bic.w	r3, r3, #3
 8002540:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 8002548:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800254c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002550:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe fbe9 	bl	8000d28 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe fbe5 	bl	8000d28 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e00e      	b.n	800258a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <HAL_RCC_OscConfig+0x82c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x806>
 8002578:	e006      	b.n	8002588 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e005      	b.n	800258a <HAL_RCC_OscConfig+0x836>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop

08002594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0c8      	b.n	800273a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b66      	ldr	r3, [pc, #408]	; (8002744 <HAL_RCC_ClockConfig+0x1b0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d910      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b63      	ldr	r3, [pc, #396]	; (8002744 <HAL_RCC_ClockConfig+0x1b0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	4961      	ldr	r1, [pc, #388]	; (8002744 <HAL_RCC_ClockConfig+0x1b0>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b5f      	ldr	r3, [pc, #380]	; (8002744 <HAL_RCC_ClockConfig+0x1b0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b0      	b.n	800273a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d04c      	beq.n	800267e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ec:	4b56      	ldr	r3, [pc, #344]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d121      	bne.n	800263c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e09e      	b.n	800273a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d107      	bne.n	8002614 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d115      	bne.n	800263c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e092      	b.n	800273a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800261c:	4b4a      	ldr	r3, [pc, #296]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e086      	b.n	800273a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800262c:	4b46      	ldr	r3, [pc, #280]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e07e      	b.n	800273a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800263c:	4b42      	ldr	r3, [pc, #264]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 0203 	bic.w	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	493f      	ldr	r1, [pc, #252]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264e:	f7fe fb6b 	bl	8000d28 <HAL_GetTick>
 8002652:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002654:	e00a      	b.n	800266c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002656:	f7fe fb67 	bl	8000d28 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e066      	b.n	800273a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266c:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 020c 	and.w	r2, r3, #12
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	429a      	cmp	r2, r3
 800267c:	d1eb      	bne.n	8002656 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268a:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	492c      	ldr	r1, [pc, #176]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <HAL_RCC_ClockConfig+0x1b0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d210      	bcs.n	80026cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b26      	ldr	r3, [pc, #152]	; (8002744 <HAL_RCC_ClockConfig+0x1b0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0207 	bic.w	r2, r3, #7
 80026b2:	4924      	ldr	r1, [pc, #144]	; (8002744 <HAL_RCC_ClockConfig+0x1b0>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <HAL_RCC_ClockConfig+0x1b0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e036      	b.n	800273a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4918      	ldr	r1, [pc, #96]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4910      	ldr	r1, [pc, #64]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800270a:	f000 f825 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 800270e:	4601      	mov	r1, r0
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_RCC_ClockConfig+0x1b4>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	4a0c      	ldr	r2, [pc, #48]	; (800274c <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	5cd3      	ldrb	r3, [r2, r3]
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	fa21 f303 	lsr.w	r3, r1, r3
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe faaa 	bl	8000c88 <HAL_InitTick>
 8002734:	4603      	mov	r3, r0
 8002736:	72fb      	strb	r3, [r7, #11]

  return status;
 8002738:	7afb      	ldrb	r3, [r7, #11]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40022000 	.word	0x40022000
 8002748:	40021000 	.word	0x40021000
 800274c:	08008520 	.word	0x08008520
 8002750:	2000000c 	.word	0x2000000c
 8002754:	20000000 	.word	0x20000000

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_RCC_GetSysClockFreq+0x104>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002770:	4b3a      	ldr	r3, [pc, #232]	; (800285c <HAL_RCC_GetSysClockFreq+0x104>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x34>
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d121      	bne.n	80027ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d11e      	bne.n	80027ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <HAL_RCC_GetSysClockFreq+0x104>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002798:	4b30      	ldr	r3, [pc, #192]	; (800285c <HAL_RCC_GetSysClockFreq+0x104>)
 800279a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e005      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <HAL_RCC_GetSysClockFreq+0x104>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027b4:	4a2a      	ldr	r2, [pc, #168]	; (8002860 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10d      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d102      	bne.n	80027d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027d0:	4b24      	ldr	r3, [pc, #144]	; (8002864 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	e004      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_RCC_GetSysClockFreq+0x110>)
 80027de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d133      	bne.n	800284e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_GetSysClockFreq+0x104>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0xa4>
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0xaa>
 80027fa:	e005      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027fe:	617b      	str	r3, [r7, #20]
      break;
 8002800:	e005      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002802:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_RCC_GetSysClockFreq+0x110>)
 8002804:	617b      	str	r3, [r7, #20]
      break;
 8002806:	e002      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	617b      	str	r3, [r7, #20]
      break;
 800280c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <HAL_RCC_GetSysClockFreq+0x104>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	3301      	adds	r3, #1
 800281a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <HAL_RCC_GetSysClockFreq+0x104>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	fb02 f203 	mul.w	r2, r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_RCC_GetSysClockFreq+0x104>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0e5b      	lsrs	r3, r3, #25
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	3301      	adds	r3, #1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800284e:	69bb      	ldr	r3, [r7, #24]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3724      	adds	r7, #36	; 0x24
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40021000 	.word	0x40021000
 8002860:	08008538 	.word	0x08008538
 8002864:	00f42400 	.word	0x00f42400
 8002868:	007a1200 	.word	0x007a1200

0800286c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002878:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002884:	f7ff fa02 	bl	8001c8c <HAL_PWREx_GetVoltageRange>
 8002888:	6178      	str	r0, [r7, #20]
 800288a:	e014      	b.n	80028b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	4a24      	ldr	r2, [pc, #144]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6593      	str	r3, [r2, #88]	; 0x58
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028a4:	f7ff f9f2 	bl	8001c8c <HAL_PWREx_GetVoltageRange>
 80028a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	4a1d      	ldr	r2, [pc, #116]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028bc:	d10b      	bne.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d919      	bls.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2ba0      	cmp	r3, #160	; 0xa0
 80028c8:	d902      	bls.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ca:	2302      	movs	r3, #2
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e013      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028d0:	2301      	movs	r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	e010      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b80      	cmp	r3, #128	; 0x80
 80028da:	d902      	bls.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028dc:	2303      	movs	r3, #3
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e00a      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b80      	cmp	r3, #128	; 0x80
 80028e6:	d102      	bne.n	80028ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028e8:	2302      	movs	r3, #2
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e004      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b70      	cmp	r3, #112	; 0x70
 80028f2:	d101      	bne.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f4:	2301      	movs	r3, #1
 80028f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 0207 	bic.w	r2, r3, #7
 8002900:	4909      	ldr	r1, [pc, #36]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	429a      	cmp	r2, r3
 8002914:	d001      	beq.n	800291a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	40022000 	.word	0x40022000

0800292c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002934:	2300      	movs	r3, #0
 8002936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002938:	2300      	movs	r3, #0
 800293a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002944:	2b00      	cmp	r3, #0
 8002946:	d02f      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002950:	d005      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002952:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002956:	d015      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800295c:	e00f      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800295e:	4b5d      	ldr	r3, [pc, #372]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	4a5c      	ldr	r2, [pc, #368]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800296a:	e00c      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3304      	adds	r3, #4
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fa44 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002978:	4603      	mov	r3, r0
 800297a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800297c:	e003      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	74fb      	strb	r3, [r7, #19]
      break;
 8002982:	e000      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10b      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800298c:	4b51      	ldr	r3, [pc, #324]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	494e      	ldr	r1, [pc, #312]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029a2:	e001      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 809e 	beq.w	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ba:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d0:	4b40      	ldr	r3, [pc, #256]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	4a3f      	ldr	r2, [pc, #252]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029da:	6593      	str	r3, [r2, #88]	; 0x58
 80029dc:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e8:	2301      	movs	r3, #1
 80029ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ec:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a39      	ldr	r2, [pc, #228]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f8:	f7fe f996 	bl	8000d28 <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029fe:	e009      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a00:	f7fe f992 	bl	8000d28 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d902      	bls.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	74fb      	strb	r3, [r7, #19]
        break;
 8002a12:	e005      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ef      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d15a      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01e      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d019      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a4e:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a6e:	4a19      	ldr	r2, [pc, #100]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d016      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe f952 	bl	8000d28 <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a88:	f7fe f94e 	bl	8000d28 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d902      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	74fb      	strb	r3, [r7, #19]
            break;
 8002a9e:	e006      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ec      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac2:	4904      	ldr	r1, [pc, #16]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002aca:	e009      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	74bb      	strb	r3, [r7, #18]
 8002ad0:	e006      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae0:	7c7b      	ldrb	r3, [r7, #17]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d105      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae6:	4b9e      	ldr	r3, [pc, #632]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	4a9d      	ldr	r2, [pc, #628]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002afe:	4b98      	ldr	r3, [pc, #608]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b04:	f023 0203 	bic.w	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4994      	ldr	r1, [pc, #592]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b20:	4b8f      	ldr	r3, [pc, #572]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 020c 	bic.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	498c      	ldr	r1, [pc, #560]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b42:	4b87      	ldr	r3, [pc, #540]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	4983      	ldr	r1, [pc, #524]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b64:	4b7e      	ldr	r3, [pc, #504]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	497b      	ldr	r1, [pc, #492]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b86:	4b76      	ldr	r3, [pc, #472]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4972      	ldr	r1, [pc, #456]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ba8:	4b6d      	ldr	r3, [pc, #436]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	496a      	ldr	r1, [pc, #424]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bca:	4b65      	ldr	r3, [pc, #404]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd8:	4961      	ldr	r1, [pc, #388]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bec:	4b5c      	ldr	r3, [pc, #368]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfa:	4959      	ldr	r1, [pc, #356]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c0e:	4b54      	ldr	r3, [pc, #336]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	4950      	ldr	r1, [pc, #320]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	4948      	ldr	r1, [pc, #288]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c52:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c58:	f023 0203 	bic.w	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	493f      	ldr	r1, [pc, #252]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d028      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c74:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c82:	4937      	ldr	r1, [pc, #220]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c94:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a31      	ldr	r2, [pc, #196]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9e:	60d3      	str	r3, [r2, #12]
 8002ca0:	e011      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002caa:	d10c      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f8a4 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8002cc2:	7cfb      	ldrb	r3, [r7, #19]
 8002cc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d028      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cd2:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	491f      	ldr	r1, [pc, #124]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002cf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfc:	60d3      	str	r3, [r2, #12]
 8002cfe:	e011      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2101      	movs	r1, #1
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f875 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02b      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	4908      	ldr	r1, [pc, #32]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d4e:	d109      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a02      	ldr	r2, [pc, #8]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d5a:	60d3      	str	r3, [r2, #12]
 8002d5c:	e014      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2101      	movs	r1, #1
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 f843 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d7e:	7cfb      	ldrb	r3, [r7, #19]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01c      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	4916      	ldr	r1, [pc, #88]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db2:	d10c      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	2102      	movs	r1, #2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f820 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de8:	4904      	ldr	r1, [pc, #16]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002df0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000

08002e00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e0e:	4b73      	ldr	r3, [pc, #460]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d018      	beq.n	8002e4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e1a:	4b70      	ldr	r3, [pc, #448]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0203 	and.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d10d      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e32:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
       ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d044      	beq.n	8002ed0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
 8002e4a:	e041      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d00c      	beq.n	8002e6e <RCCEx_PLLSAI1_Config+0x6e>
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d013      	beq.n	8002e80 <RCCEx_PLLSAI1_Config+0x80>
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d120      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e5c:	4b5f      	ldr	r3, [pc, #380]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d11d      	bne.n	8002ea4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6c:	e01a      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e6e:	4b5b      	ldr	r3, [pc, #364]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d116      	bne.n	8002ea8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7e:	e013      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e80:	4b56      	ldr	r3, [pc, #344]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10f      	bne.n	8002eac <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e8c:	4b53      	ldr	r3, [pc, #332]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e9c:	e006      	b.n	8002eac <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea2:	e004      	b.n	8002eae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ea4:	bf00      	nop
 8002ea6:	e002      	b.n	8002eae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ea8:	bf00      	nop
 8002eaa:	e000      	b.n	8002eae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002eac:	bf00      	nop
    }

    if(status == HAL_OK)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10d      	bne.n	8002ed0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eb4:	4b49      	ldr	r3, [pc, #292]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	4944      	ldr	r1, [pc, #272]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d17c      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ed6:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a40      	ldr	r2, [pc, #256]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002edc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee2:	f7fd ff21 	bl	8000d28 <HAL_GetTick>
 8002ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ee8:	e009      	b.n	8002efe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eea:	f7fd ff1d 	bl	8000d28 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d902      	bls.n	8002efe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	73fb      	strb	r3, [r7, #15]
        break;
 8002efc:	e005      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002efe:	4b37      	ldr	r3, [pc, #220]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1ef      	bne.n	8002eea <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d15f      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d110      	bne.n	8002f38 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002f1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6892      	ldr	r2, [r2, #8]
 8002f26:	0211      	lsls	r1, r2, #8
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68d2      	ldr	r2, [r2, #12]
 8002f2c:	06d2      	lsls	r2, r2, #27
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	492a      	ldr	r1, [pc, #168]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	610b      	str	r3, [r1, #16]
 8002f36:	e027      	b.n	8002f88 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d112      	bne.n	8002f64 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f3e:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6892      	ldr	r2, [r2, #8]
 8002f4e:	0211      	lsls	r1, r2, #8
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6912      	ldr	r2, [r2, #16]
 8002f54:	0852      	lsrs	r2, r2, #1
 8002f56:	3a01      	subs	r2, #1
 8002f58:	0552      	lsls	r2, r2, #21
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	491f      	ldr	r1, [pc, #124]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	610b      	str	r3, [r1, #16]
 8002f62:	e011      	b.n	8002f88 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f64:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6892      	ldr	r2, [r2, #8]
 8002f74:	0211      	lsls	r1, r2, #8
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6952      	ldr	r2, [r2, #20]
 8002f7a:	0852      	lsrs	r2, r2, #1
 8002f7c:	3a01      	subs	r2, #1
 8002f7e:	0652      	lsls	r2, r2, #25
 8002f80:	430a      	orrs	r2, r1
 8002f82:	4916      	ldr	r1, [pc, #88]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f88:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a13      	ldr	r2, [pc, #76]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fd fec8 	bl	8000d28 <HAL_GetTick>
 8002f98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f9a:	e009      	b.n	8002fb0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f9c:	f7fd fec4 	bl	8000d28 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d902      	bls.n	8002fb0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	73fb      	strb	r3, [r7, #15]
          break;
 8002fae:	e005      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ef      	beq.n	8002f9c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	4904      	ldr	r1, [pc, #16]	; (8002fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b08b      	sub	sp, #44	; 0x2c
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8003006:	2320      	movs	r3, #32
 8003008:	e003      	b.n	8003012 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2103      	movs	r1, #3
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	401a      	ands	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	61fb      	str	r3, [r7, #28]
  return result;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003034:	2320      	movs	r3, #32
 8003036:	e003      	b.n	8003040 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	431a      	orrs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	601a      	str	r2, [r3, #0]
}
 800304e:	bf00      	nop
 8003050:	372c      	adds	r7, #44	; 0x2c
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	43db      	mvns	r3, r3
 800306e:	401a      	ands	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	431a      	orrs	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	605a      	str	r2, [r3, #4]
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800308a:	b480      	push	{r7}
 800308c:	b08b      	sub	sp, #44	; 0x2c
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	613b      	str	r3, [r7, #16]
  return result;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e003      	b.n	80030bc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2103      	movs	r1, #3
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	401a      	ands	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	61fb      	str	r3, [r7, #28]
  return result;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e003      	b.n	80030ea <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	431a      	orrs	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80030f8:	bf00      	nop
 80030fa:	372c      	adds	r7, #44	; 0x2c
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003104:	b480      	push	{r7}
 8003106:	b08b      	sub	sp, #44	; 0x2c
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	613b      	str	r3, [r7, #16]
  return result;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800312a:	2320      	movs	r3, #32
 800312c:	e003      	b.n	8003136 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	2103      	movs	r1, #3
 800313a:	fa01 f303 	lsl.w	r3, r1, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	401a      	ands	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	61fb      	str	r3, [r7, #28]
  return result;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e003      	b.n	8003164 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	60da      	str	r2, [r3, #12]
}
 8003172:	bf00      	nop
 8003174:	372c      	adds	r7, #44	; 0x2c
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800317e:	b480      	push	{r7}
 8003180:	b08b      	sub	sp, #44	; 0x2c
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a1a      	ldr	r2, [r3, #32]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	613b      	str	r3, [r7, #16]
  return result;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	210f      	movs	r1, #15
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	401a      	ands	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	61fb      	str	r3, [r7, #28]
  return result;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80031d2:	2320      	movs	r3, #32
 80031d4:	e003      	b.n	80031de <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	431a      	orrs	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80031ec:	bf00      	nop
 80031ee:	372c      	adds	r7, #44	; 0x2c
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b08b      	sub	sp, #44	; 0x2c
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	613b      	str	r3, [r7, #16]
  return result;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003220:	2320      	movs	r3, #32
 8003222:	e003      	b.n	800322c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	210f      	movs	r1, #15
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	401a      	ands	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	61fb      	str	r3, [r7, #28]
  return result;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003250:	2320      	movs	r3, #32
 8003252:	e003      	b.n	800325c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800326a:	bf00      	nop
 800326c:	372c      	adds	r7, #44	; 0x2c
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b088      	sub	sp, #32
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	60fb      	str	r3, [r7, #12]
  return result;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <LL_GPIO_Init+0x26>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80032a6:	e040      	b.n	800332a <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d032      	beq.n	8003324 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	461a      	mov	r2, r3
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff fe8a 	bl	8002fe0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d003      	beq.n	80032dc <LL_GPIO_Init+0x66>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d106      	bne.n	80032ea <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	461a      	mov	r2, r3
 80032e2:	69b9      	ldr	r1, [r7, #24]
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff fed0 	bl	800308a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	461a      	mov	r2, r3
 80032f0:	69b9      	ldr	r1, [r7, #24]
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ff06 	bl	8003104 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d111      	bne.n	8003324 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2bff      	cmp	r3, #255	; 0xff
 8003304:	d807      	bhi.n	8003316 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	461a      	mov	r2, r3
 800330c:	69b9      	ldr	r1, [r7, #24]
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ff35 	bl	800317e <LL_GPIO_SetAFPin_0_7>
 8003314:	e006      	b.n	8003324 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	461a      	mov	r2, r3
 800331c:	69b9      	ldr	r1, [r7, #24]
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ff6a 	bl	80031f8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	3301      	adds	r3, #1
 8003328:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1b7      	bne.n	80032a8 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d003      	beq.n	8003348 <LL_GPIO_Init+0xd2>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d107      	bne.n	8003358 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	461a      	mov	r2, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff fe81 	bl	800305a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003368:	4b07      	ldr	r3, [pc, #28]	; (8003388 <LL_RCC_HSI_IsReady+0x24>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003374:	d101      	bne.n	800337a <LL_RCC_HSI_IsReady+0x16>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <LL_RCC_HSI_IsReady+0x18>
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000

0800338c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <LL_RCC_LSE_IsReady+0x24>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b02      	cmp	r3, #2
 800339c:	d101      	bne.n	80033a2 <LL_RCC_LSE_IsReady+0x16>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <LL_RCC_LSE_IsReady+0x18>
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000

080033b4 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d101      	bne.n	80033c8 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40021000 	.word	0x40021000

080033d8 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <LL_RCC_MSI_GetRange+0x18>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000

080033f4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80033fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40021000 	.word	0x40021000

08003410 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <LL_RCC_GetSysClkSource+0x18>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 030c 	and.w	r3, r3, #12
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000

0800342c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <LL_RCC_GetAHBPrescaler+0x18>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000

08003448 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <LL_RCC_GetAPB1Prescaler+0x18>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000

08003464 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <LL_RCC_GetAPB2Prescaler+0x18>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000

08003480 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <LL_RCC_GetUSARTClockSource+0x24>)
 800348a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	401a      	ands	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	4313      	orrs	r3, r2
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40021000 	.word	0x40021000

080034a8 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <LL_RCC_GetUARTClockSource+0x24>)
 80034b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	401a      	ands	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	4313      	orrs	r3, r2
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40021000 	.word	0x40021000

080034d0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <LL_RCC_PLL_GetMainSource+0x18>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0303 	and.w	r3, r3, #3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000

080034ec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80034f0:	4b04      	ldr	r3, [pc, #16]	; (8003504 <LL_RCC_PLL_GetN+0x18>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	40021000 	.word	0x40021000

08003508 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <LL_RCC_PLL_GetR+0x18>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000

08003524 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <LL_RCC_PLL_GetDivider+0x18>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000

08003540 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d137      	bne.n	80035c2 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ff94 	bl	8003480 <LL_RCC_GetUSARTClockSource>
 8003558:	4603      	mov	r3, r0
 800355a:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800355e:	2b03      	cmp	r3, #3
 8003560:	f200 80b2 	bhi.w	80036c8 <LL_RCC_GetUSARTClockFreq+0x188>
 8003564:	a201      	add	r2, pc, #4	; (adr r2, 800356c <LL_RCC_GetUSARTClockFreq+0x2c>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	080035ab 	.word	0x080035ab
 8003570:	0800357d 	.word	0x0800357d
 8003574:	08003585 	.word	0x08003585
 8003578:	08003597 	.word	0x08003597
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800357c:	f000 f910 	bl	80037a0 <RCC_GetSystemClockFreq>
 8003580:	60f8      	str	r0, [r7, #12]
        break;
 8003582:	e0b2      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003584:	f7ff feee 	bl	8003364 <LL_RCC_HSI_IsReady>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 809e 	beq.w	80036cc <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8003590:	4b58      	ldr	r3, [pc, #352]	; (80036f4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8003592:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003594:	e09a      	b.n	80036cc <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003596:	f7ff fef9 	bl	800338c <LL_RCC_LSE_IsReady>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8097 	beq.w	80036d0 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 80035a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80035a8:	e092      	b.n	80036d0 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80035aa:	f000 f8f9 	bl	80037a0 <RCC_GetSystemClockFreq>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f985 	bl	80038c0 <RCC_GetHCLKClockFreq>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f9ab 	bl	8003914 <RCC_GetPCLK2ClockFreq>
 80035be:	60f8      	str	r0, [r7, #12]
        break;
 80035c0:	e093      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d146      	bne.n	8003656 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff59 	bl	8003480 <LL_RCC_GetUSARTClockSource>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d87d      	bhi.n	80036d4 <LL_RCC_GetUSARTClockFreq+0x194>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	0800363f 	.word	0x0800363f
 80035e4:	080036d5 	.word	0x080036d5
 80035e8:	080036d5 	.word	0x080036d5
 80035ec:	080036d5 	.word	0x080036d5
 80035f0:	08003615 	.word	0x08003615
 80035f4:	080036d5 	.word	0x080036d5
 80035f8:	080036d5 	.word	0x080036d5
 80035fc:	080036d5 	.word	0x080036d5
 8003600:	0800361d 	.word	0x0800361d
 8003604:	080036d5 	.word	0x080036d5
 8003608:	080036d5 	.word	0x080036d5
 800360c:	080036d5 	.word	0x080036d5
 8003610:	0800362d 	.word	0x0800362d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003614:	f000 f8c4 	bl	80037a0 <RCC_GetSystemClockFreq>
 8003618:	60f8      	str	r0, [r7, #12]
        break;
 800361a:	e066      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800361c:	f7ff fea2 	bl	8003364 <LL_RCC_HSI_IsReady>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d058      	beq.n	80036d8 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 8003626:	4b33      	ldr	r3, [pc, #204]	; (80036f4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8003628:	60fb      	str	r3, [r7, #12]
        }
        break;
 800362a:	e055      	b.n	80036d8 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800362c:	f7ff feae 	bl	800338c <LL_RCC_LSE_IsReady>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d052      	beq.n	80036dc <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 8003636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800363a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800363c:	e04e      	b.n	80036dc <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800363e:	f000 f8af 	bl	80037a0 <RCC_GetSystemClockFreq>
 8003642:	4603      	mov	r3, r0
 8003644:	4618      	mov	r0, r3
 8003646:	f000 f93b 	bl	80038c0 <RCC_GetHCLKClockFreq>
 800364a:	4603      	mov	r3, r0
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f94d 	bl	80038ec <RCC_GetPCLK1ClockFreq>
 8003652:	60f8      	str	r0, [r7, #12]
        break;
 8003654:	e049      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b30      	cmp	r3, #48	; 0x30
 800365a:	d141      	bne.n	80036e0 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ff0f 	bl	8003480 <LL_RCC_GetUSARTClockSource>
 8003662:	4603      	mov	r3, r0
 8003664:	4a24      	ldr	r2, [pc, #144]	; (80036f8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00d      	beq.n	8003686 <LL_RCC_GetUSARTClockFreq+0x146>
 800366a:	4a23      	ldr	r2, [pc, #140]	; (80036f8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d803      	bhi.n	8003678 <LL_RCC_GetUSARTClockFreq+0x138>
 8003670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003674:	d01c      	beq.n	80036b0 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 8003676:	e038      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003678:	4a20      	ldr	r2, [pc, #128]	; (80036fc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <LL_RCC_GetUSARTClockFreq+0x14e>
 800367e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8003682:	d00c      	beq.n	800369e <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8003684:	e031      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 8003686:	f000 f88b 	bl	80037a0 <RCC_GetSystemClockFreq>
 800368a:	60f8      	str	r0, [r7, #12]
          break;
 800368c:	e02d      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 800368e:	f7ff fe69 	bl	8003364 <LL_RCC_HSI_IsReady>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d025      	beq.n	80036e4 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 8003698:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800369a:	60fb      	str	r3, [r7, #12]
          break;
 800369c:	e022      	b.n	80036e4 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 800369e:	f7ff fe75 	bl	800338c <LL_RCC_LSE_IsReady>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01f      	beq.n	80036e8 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 80036a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ac:	60fb      	str	r3, [r7, #12]
          break;
 80036ae:	e01b      	b.n	80036e8 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80036b0:	f000 f876 	bl	80037a0 <RCC_GetSystemClockFreq>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f902 	bl	80038c0 <RCC_GetHCLKClockFreq>
 80036bc:	4603      	mov	r3, r0
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f914 	bl	80038ec <RCC_GetPCLK1ClockFreq>
 80036c4:	60f8      	str	r0, [r7, #12]
          break;
 80036c6:	e010      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80036c8:	bf00      	nop
 80036ca:	e00e      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80036cc:	bf00      	nop
 80036ce:	e00c      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80036d0:	bf00      	nop
 80036d2:	e00a      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80036d4:	bf00      	nop
 80036d6:	e008      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80036d8:	bf00      	nop
 80036da:	e006      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80036dc:	bf00      	nop
 80036de:	e004      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 80036e0:	bf00      	nop
 80036e2:	e002      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 80036e4:	bf00      	nop
 80036e6:	e000      	b.n	80036ea <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 80036e8:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80036ea:	68fb      	ldr	r3, [r7, #12]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	00300010 	.word	0x00300010
 80036fc:	00300020 	.word	0x00300020

08003700 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2bc0      	cmp	r3, #192	; 0xc0
 8003710:	d135      	bne.n	800377e <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff fec8 	bl	80034a8 <LL_RCC_GetUARTClockSource>
 8003718:	4603      	mov	r3, r0
 800371a:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <LL_RCC_GetUARTClockFreq+0x94>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00d      	beq.n	800373c <LL_RCC_GetUARTClockFreq+0x3c>
 8003720:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <LL_RCC_GetUARTClockFreq+0x94>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d803      	bhi.n	800372e <LL_RCC_GetUARTClockFreq+0x2e>
 8003726:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800372a:	d01c      	beq.n	8003766 <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 800372c:	e02c      	b.n	8003788 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800372e:	4a1a      	ldr	r2, [pc, #104]	; (8003798 <LL_RCC_GetUARTClockFreq+0x98>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d007      	beq.n	8003744 <LL_RCC_GetUARTClockFreq+0x44>
 8003734:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8003738:	d00c      	beq.n	8003754 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 800373a:	e025      	b.n	8003788 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 800373c:	f000 f830 	bl	80037a0 <RCC_GetSystemClockFreq>
 8003740:	60f8      	str	r0, [r7, #12]
        break;
 8003742:	e021      	b.n	8003788 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 8003744:	f7ff fe0e 	bl	8003364 <LL_RCC_HSI_IsReady>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d019      	beq.n	8003782 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <LL_RCC_GetUARTClockFreq+0x9c>)
 8003750:	60fb      	str	r3, [r7, #12]
        break;
 8003752:	e016      	b.n	8003782 <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 8003754:	f7ff fe1a 	bl	800338c <LL_RCC_LSE_IsReady>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d013      	beq.n	8003786 <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 800375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003762:	60fb      	str	r3, [r7, #12]
        break;
 8003764:	e00f      	b.n	8003786 <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003766:	f000 f81b 	bl	80037a0 <RCC_GetSystemClockFreq>
 800376a:	4603      	mov	r3, r0
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f8a7 	bl	80038c0 <RCC_GetHCLKClockFreq>
 8003772:	4603      	mov	r3, r0
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f8b9 	bl	80038ec <RCC_GetPCLK1ClockFreq>
 800377a:	60f8      	str	r0, [r7, #12]
        break;
 800377c:	e004      	b.n	8003788 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 800377e:	bf00      	nop
 8003780:	e002      	b.n	8003788 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8003786:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8003788:	68fb      	ldr	r3, [r7, #12]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	00c00040 	.word	0x00c00040
 8003798:	00c00080 	.word	0x00c00080
 800379c:	00f42400 	.word	0x00f42400

080037a0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80037a6:	f7ff fe33 	bl	8003410 <LL_RCC_GetSysClkSource>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b0c      	cmp	r3, #12
 80037ae:	d851      	bhi.n	8003854 <RCC_GetSystemClockFreq+0xb4>
 80037b0:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <RCC_GetSystemClockFreq+0x18>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	080037ed 	.word	0x080037ed
 80037bc:	08003855 	.word	0x08003855
 80037c0:	08003855 	.word	0x08003855
 80037c4:	08003855 	.word	0x08003855
 80037c8:	08003841 	.word	0x08003841
 80037cc:	08003855 	.word	0x08003855
 80037d0:	08003855 	.word	0x08003855
 80037d4:	08003855 	.word	0x08003855
 80037d8:	08003847 	.word	0x08003847
 80037dc:	08003855 	.word	0x08003855
 80037e0:	08003855 	.word	0x08003855
 80037e4:	08003855 	.word	0x08003855
 80037e8:	0800384d 	.word	0x0800384d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80037ec:	f7ff fde2 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d111      	bne.n	800381a <RCC_GetSystemClockFreq+0x7a>
 80037f6:	f7ff fddd 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d004      	beq.n	800380a <RCC_GetSystemClockFreq+0x6a>
 8003800:	f7ff fdea 	bl	80033d8 <LL_RCC_MSI_GetRange>
 8003804:	4603      	mov	r3, r0
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	e003      	b.n	8003812 <RCC_GetSystemClockFreq+0x72>
 800380a:	f7ff fdf3 	bl	80033f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800380e:	4603      	mov	r3, r0
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <RCC_GetSystemClockFreq+0x114>)
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	e010      	b.n	800383c <RCC_GetSystemClockFreq+0x9c>
 800381a:	f7ff fdcb 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <RCC_GetSystemClockFreq+0x8e>
 8003824:	f7ff fdd8 	bl	80033d8 <LL_RCC_MSI_GetRange>
 8003828:	4603      	mov	r3, r0
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	e003      	b.n	8003836 <RCC_GetSystemClockFreq+0x96>
 800382e:	f7ff fde1 	bl	80033f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003832:	4603      	mov	r3, r0
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	4a1f      	ldr	r2, [pc, #124]	; (80038b4 <RCC_GetSystemClockFreq+0x114>)
 8003838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800383e:	e033      	b.n	80038a8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <RCC_GetSystemClockFreq+0x118>)
 8003842:	607b      	str	r3, [r7, #4]
      break;
 8003844:	e030      	b.n	80038a8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003846:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <RCC_GetSystemClockFreq+0x11c>)
 8003848:	607b      	str	r3, [r7, #4]
      break;
 800384a:	e02d      	b.n	80038a8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800384c:	f000 f876 	bl	800393c <RCC_PLL_GetFreqDomain_SYS>
 8003850:	6078      	str	r0, [r7, #4]
      break;
 8003852:	e029      	b.n	80038a8 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003854:	f7ff fdae 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d111      	bne.n	8003882 <RCC_GetSystemClockFreq+0xe2>
 800385e:	f7ff fda9 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <RCC_GetSystemClockFreq+0xd2>
 8003868:	f7ff fdb6 	bl	80033d8 <LL_RCC_MSI_GetRange>
 800386c:	4603      	mov	r3, r0
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	e003      	b.n	800387a <RCC_GetSystemClockFreq+0xda>
 8003872:	f7ff fdbf 	bl	80033f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003876:	4603      	mov	r3, r0
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	4a0e      	ldr	r2, [pc, #56]	; (80038b4 <RCC_GetSystemClockFreq+0x114>)
 800387c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003880:	e010      	b.n	80038a4 <RCC_GetSystemClockFreq+0x104>
 8003882:	f7ff fd97 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d004      	beq.n	8003896 <RCC_GetSystemClockFreq+0xf6>
 800388c:	f7ff fda4 	bl	80033d8 <LL_RCC_MSI_GetRange>
 8003890:	4603      	mov	r3, r0
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	e003      	b.n	800389e <RCC_GetSystemClockFreq+0xfe>
 8003896:	f7ff fdad 	bl	80033f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800389a:	4603      	mov	r3, r0
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <RCC_GetSystemClockFreq+0x114>)
 80038a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80038a6:	bf00      	nop
  }

  return frequency;
 80038a8:	687b      	ldr	r3, [r7, #4]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	08008538 	.word	0x08008538
 80038b8:	00f42400 	.word	0x00f42400
 80038bc:	007a1200 	.word	0x007a1200

080038c0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80038c8:	f7ff fdb0 	bl	800342c <LL_RCC_GetAHBPrescaler>
 80038cc:	4603      	mov	r3, r0
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <RCC_GetHCLKClockFreq+0x28>)
 80038d6:	5cd3      	ldrb	r3, [r2, r3]
 80038d8:	461a      	mov	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	40d3      	lsrs	r3, r2
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	08008520 	.word	0x08008520

080038ec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80038f4:	f7ff fda8 	bl	8003448 <LL_RCC_GetAPB1Prescaler>
 80038f8:	4603      	mov	r3, r0
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <RCC_GetPCLK1ClockFreq+0x24>)
 80038fe:	5cd3      	ldrb	r3, [r2, r3]
 8003900:	461a      	mov	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	40d3      	lsrs	r3, r2
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	08008530 	.word	0x08008530

08003914 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800391c:	f7ff fda2 	bl	8003464 <LL_RCC_GetAPB2Prescaler>
 8003920:	4603      	mov	r3, r0
 8003922:	0adb      	lsrs	r3, r3, #11
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <RCC_GetPCLK2ClockFreq+0x24>)
 8003926:	5cd3      	ldrb	r3, [r2, r3]
 8003928:	461a      	mov	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	40d3      	lsrs	r3, r2
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	08008530 	.word	0x08008530

0800393c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003942:	f7ff fdc5 	bl	80034d0 <LL_RCC_PLL_GetMainSource>
 8003946:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d02d      	beq.n	80039aa <RCC_PLL_GetFreqDomain_SYS+0x6e>
 800394e:	2b03      	cmp	r3, #3
 8003950:	d02e      	beq.n	80039b0 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8003952:	2b01      	cmp	r3, #1
 8003954:	d12f      	bne.n	80039b6 <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003956:	f7ff fd2d 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d111      	bne.n	8003984 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8003960:	f7ff fd28 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <RCC_PLL_GetFreqDomain_SYS+0x38>
 800396a:	f7ff fd35 	bl	80033d8 <LL_RCC_MSI_GetRange>
 800396e:	4603      	mov	r3, r0
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	e003      	b.n	800397c <RCC_PLL_GetFreqDomain_SYS+0x40>
 8003974:	f7ff fd3e 	bl	80033f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003978:	4603      	mov	r3, r0
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	4a2f      	ldr	r2, [pc, #188]	; (8003a3c <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800397e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003982:	e010      	b.n	80039a6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8003984:	f7ff fd16 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 800398e:	f7ff fd23 	bl	80033d8 <LL_RCC_MSI_GetRange>
 8003992:	4603      	mov	r3, r0
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	e003      	b.n	80039a0 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8003998:	f7ff fd2c 	bl	80033f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800399c:	4603      	mov	r3, r0
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80039a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a6:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80039a8:	e02f      	b.n	8003a0a <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 80039ac:	607b      	str	r3, [r7, #4]
      break;
 80039ae:	e02c      	b.n	8003a0a <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80039b0:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 80039b2:	607b      	str	r3, [r7, #4]
      break;
 80039b4:	e029      	b.n	8003a0a <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80039b6:	f7ff fcfd 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 80039c0:	f7ff fcf8 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <RCC_PLL_GetFreqDomain_SYS+0x98>
 80039ca:	f7ff fd05 	bl	80033d8 <LL_RCC_MSI_GetRange>
 80039ce:	4603      	mov	r3, r0
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	e003      	b.n	80039dc <RCC_PLL_GetFreqDomain_SYS+0xa0>
 80039d4:	f7ff fd0e 	bl	80033f4 <LL_RCC_MSI_GetRangeAfterStandby>
 80039d8:	4603      	mov	r3, r0
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80039de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e2:	e010      	b.n	8003a06 <RCC_PLL_GetFreqDomain_SYS+0xca>
 80039e4:	f7ff fce6 	bl	80033b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d004      	beq.n	80039f8 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 80039ee:	f7ff fcf3 	bl	80033d8 <LL_RCC_MSI_GetRange>
 80039f2:	4603      	mov	r3, r0
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	e003      	b.n	8003a00 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 80039f8:	f7ff fcfc 	bl	80033f4 <LL_RCC_MSI_GetRangeAfterStandby>
 80039fc:	4603      	mov	r3, r0
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a06:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003a08:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003a0a:	f7ff fd8b 	bl	8003524 <LL_RCC_PLL_GetDivider>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	3301      	adds	r3, #1
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	fbb2 f4f3 	udiv	r4, r2, r3
 8003a1a:	f7ff fd67 	bl	80034ec <LL_RCC_PLL_GetN>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	fb03 f404 	mul.w	r4, r3, r4
 8003a24:	f7ff fd70 	bl	8003508 <LL_RCC_PLL_GetR>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	0e5b      	lsrs	r3, r3, #25
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd90      	pop	{r4, r7, pc}
 8003a3c:	08008538 	.word	0x08008538
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	007a1200 	.word	0x007a1200

08003a48 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <LL_USART_IsEnabled+0x18>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <LL_USART_IsEnabled+0x1a>
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	605a      	str	r2, [r3, #4]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	609a      	str	r2, [r3, #8]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8003aba:	b480      	push	{r7}
 8003abc:	b087      	sub	sp, #28
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	603b      	str	r3, [r7, #0]
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ace:	d11a      	bne.n	8003b06 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	005a      	lsls	r2, r3, #1
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	441a      	add	r2, r3
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8003b04:	e00a      	b.n	8003b1c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	085a      	lsrs	r2, r3, #1
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	441a      	add	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	60da      	str	r2, [r3, #12]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ff84 	bl	8003a48 <LL_USART_IsEnabled>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d151      	bne.n	8003bea <LL_USART_Init+0xc2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b2a      	ldr	r3, [pc, #168]	; (8003bf4 <LL_USART_Init+0xcc>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	6851      	ldr	r1, [r2, #4]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	68d2      	ldr	r2, [r2, #12]
 8003b56:	4311      	orrs	r1, r2
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	6912      	ldr	r2, [r2, #16]
 8003b5c:	4311      	orrs	r1, r2
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	6992      	ldr	r2, [r2, #24]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff7c 	bl	8003a6e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff89 	bl	8003a94 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <LL_USART_Init+0xd0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d104      	bne.n	8003b94 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003b8a:	2003      	movs	r0, #3
 8003b8c:	f7ff fcd8 	bl	8003540 <LL_RCC_GetUSARTClockFreq>
 8003b90:	60b8      	str	r0, [r7, #8]
 8003b92:	e019      	b.n	8003bc8 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <LL_USART_Init+0xd4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d104      	bne.n	8003ba6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003b9c:	200c      	movs	r0, #12
 8003b9e:	f7ff fccf 	bl	8003540 <LL_RCC_GetUSARTClockFreq>
 8003ba2:	60b8      	str	r0, [r7, #8]
 8003ba4:	e010      	b.n	8003bc8 <LL_USART_Init+0xa0>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <LL_USART_Init+0xd8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d104      	bne.n	8003bb8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8003bae:	2030      	movs	r0, #48	; 0x30
 8003bb0:	f7ff fcc6 	bl	8003540 <LL_RCC_GetUSARTClockFreq>
 8003bb4:	60b8      	str	r0, [r7, #8]
 8003bb6:	e007      	b.n	8003bc8 <LL_USART_Init+0xa0>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <LL_USART_Init+0xdc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d103      	bne.n	8003bc8 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003bc0:	20c0      	movs	r0, #192	; 0xc0
 8003bc2:	f7ff fd9d 	bl	8003700 <LL_RCC_GetUARTClockFreq>
 8003bc6:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00d      	beq.n	8003bea <LL_USART_Init+0xc2>
        && (USART_InitStruct->BaudRate != 0U))
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <LL_USART_Init+0xc2>
    {
      status = SUCCESS;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ff68 	bl	8003aba <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	efff69f3 	.word	0xefff69f3
 8003bf8:	40013800 	.word	0x40013800
 8003bfc:	40004400 	.word	0x40004400
 8003c00:	40004800 	.word	0x40004800
 8003c04:	40004c00 	.word	0x40004c00

08003c08 <I2C_Write>:
	}
	return HAL_OK;
}

uint8_t I2C_Write(I2C_HandleTypeDef *hi2c, uint16_t addr, uint8_t* data, uint8_t len)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	461a      	mov	r2, r3
 8003c14:	460b      	mov	r3, r1
 8003c16:	817b      	strh	r3, [r7, #10]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	727b      	strb	r3, [r7, #9]
	if(HAL_I2C_Master_Transmit(hi2c, addr, data,
 8003c1c:	7a7b      	ldrb	r3, [r7, #9]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	8979      	ldrh	r1, [r7, #10]
 8003c22:	2364      	movs	r3, #100	; 0x64
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7fd fbcc 	bl	80013c8 <HAL_I2C_Master_Transmit>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <I2C_Write+0x32>
			len, 100) == HAL_OK)
	{
		return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e000      	b.n	8003c3c <I2C_Write+0x34>
	}
	return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2C_ReadWrite>:

uint8_t I2C_ReadWrite(I2C_HandleTypeDef *hi2c, uint16_t writeAddr, uint8_t* data, uint8_t len)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	460b      	mov	r3, r1
 8003c52:	817b      	strh	r3, [r7, #10]
 8003c54:	4613      	mov	r3, r2
 8003c56:	727b      	strb	r3, [r7, #9]
	if(HAL_I2C_Master_Transmit(hi2c, writeAddr, data,
 8003c58:	7a7b      	ldrb	r3, [r7, #9]
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	8979      	ldrh	r1, [r7, #10]
 8003c5e:	2364      	movs	r3, #100	; 0x64
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7fd fbae 	bl	80013c8 <HAL_I2C_Master_Transmit>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <I2C_ReadWrite+0x32>
				len, 100) == HAL_OK)
	{
		return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <I2C_ReadWrite+0x34>
	}
	return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <I2C_ReadRead>:

uint16_t I2C_ReadRead(I2C_HandleTypeDef *hi2c, uint16_t readAddr, uint8_t* data, uint8_t len)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	817b      	strh	r3, [r7, #10]
 8003c90:	4613      	mov	r3, r2
 8003c92:	727b      	strb	r3, [r7, #9]
	if(HAL_I2C_Master_Receive(hi2c, readAddr, data,
 8003c94:	7a7b      	ldrb	r3, [r7, #9]
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	8979      	ldrh	r1, [r7, #10]
 8003c9a:	2364      	movs	r3, #100	; 0x64
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f7fd fc84 	bl	80015b0 <HAL_I2C_Master_Receive>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <I2C_ReadRead+0x32>
			len, 100) == HAL_OK)
	{
		return HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e000      	b.n	8003cb4 <I2C_ReadRead+0x34>
	}
	return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <OPT3001_SetState>:

#include "_OPT3001.h"
#include "_I2C.h"

void OPT3001_SetState(OPT3001 *device, OPT3001_State oState)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
	device->tState = oState;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	701a      	strb	r2, [r3, #0]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <OPT3001_InitDevice>:

/* Init device with read/write addr and i2c channel */
void OPT3001_InitDevice(OPT3001 *device, I2C_HandleTypeDef *hi2c, uint8_t devWriteAddr, uint8_t devReadAddr)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	460b      	mov	r3, r1
 8003cea:	71fb      	strb	r3, [r7, #7]
 8003cec:	4613      	mov	r3, r2
 8003cee:	71bb      	strb	r3, [r7, #6]
	device->hi2c = hi2c;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	605a      	str	r2, [r3, #4]
	device->i2cWrite = devWriteAddr;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	79fa      	ldrb	r2, [r7, #7]
 8003cfa:	721a      	strb	r2, [r3, #8]
	device->i2cRead = devReadAddr;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	79ba      	ldrb	r2, [r7, #6]
 8003d00:	725a      	strb	r2, [r3, #9]
	device->errorCounter = 0;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	72da      	strb	r2, [r3, #11]
	device->sStatus = SENSORSTATUS_FAIL;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	729a      	strb	r2, [r3, #10]
	device->tState = OPT3001_IDWRITE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2202      	movs	r2, #2
 8003d12:	701a      	strb	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <OPT3001_Init>:

/* Send the initial commands */
static uint8_t OPT3001_Init(OPT3001 *device)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	unsigned char buffer[3];
	buffer[0]=0x01; //buffer
 8003d28:	2301      	movs	r3, #1
 8003d2a:	733b      	strb	r3, [r7, #12]
	buffer[1]=0xC2; //MSB byte
 8003d2c:	23c2      	movs	r3, #194	; 0xc2
 8003d2e:	737b      	strb	r3, [r7, #13]
	buffer[2]=0x10; //LSB byte
 8003d30:	2310      	movs	r3, #16
 8003d32:	73bb      	strb	r3, [r7, #14]

	if(I2C_Write(device->hi2c, device->i2cWrite, buffer, 3) == HAL_OK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6858      	ldr	r0, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	7a1b      	ldrb	r3, [r3, #8]
 8003d3c:	b299      	uxth	r1, r3
 8003d3e:	f107 020c 	add.w	r2, r7, #12
 8003d42:	2303      	movs	r3, #3
 8003d44:	f7ff ff60 	bl	8003c08 <I2C_Write>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <OPT3001_Init+0x32>
	{
		return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <OPT3001_Init+0x34>
	}
	return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <OPT3001_GetDeviceIDWrite>:

uint8_t OPT3001_GetDeviceIDWrite(OPT3001 *device)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	uint8_t id_reg = 0x7F;
 8003d64:	237f      	movs	r3, #127	; 0x7f
 8003d66:	73fb      	strb	r3, [r7, #15]

	if(I2C_ReadWrite(device->hi2c, device->i2cWrite, &id_reg, 3) == HAL_OK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6858      	ldr	r0, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	7a1b      	ldrb	r3, [r3, #8]
 8003d70:	b299      	uxth	r1, r3
 8003d72:	f107 020f 	add.w	r2, r7, #15
 8003d76:	2303      	movs	r3, #3
 8003d78:	f7ff ff64 	bl	8003c44 <I2C_ReadWrite>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <OPT3001_GetDeviceIDWrite+0x2a>
	{
		return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <OPT3001_GetDeviceIDWrite+0x2c>
	}
	return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <OPT3001_GetDeviceIDRead>:

uint8_t OPT3001_GetDeviceIDRead(OPT3001 *device)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	unsigned char buffer[3] = {0};
 8003d98:	f107 0308 	add.w	r3, r7, #8
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	460a      	mov	r2, r1
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	460a      	mov	r2, r1
 8003da4:	709a      	strb	r2, [r3, #2]

	if(I2C_ReadRead(device->hi2c, device->i2cRead, buffer, 3) == HAL_OK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6858      	ldr	r0, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7a5b      	ldrb	r3, [r3, #9]
 8003dae:	b299      	uxth	r1, r3
 8003db0:	f107 0208 	add.w	r2, r7, #8
 8003db4:	2303      	movs	r3, #3
 8003db6:	f7ff ff63 	bl	8003c80 <I2C_ReadRead>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10e      	bne.n	8003dde <OPT3001_GetDeviceIDRead+0x4e>
	{
		uint16_t idResult = (((uint16_t)buffer[0]) << 8) | buffer[1];
 8003dc0:	7a3b      	ldrb	r3, [r7, #8]
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	b21a      	sxth	r2, r3
 8003dc6:	7a7b      	ldrb	r3, [r7, #9]
 8003dc8:	b21b      	sxth	r3, r3
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	b21b      	sxth	r3, r3
 8003dce:	81fb      	strh	r3, [r7, #14]
		if(idResult == 0x3001)
 8003dd0:	89fb      	ldrh	r3, [r7, #14]
 8003dd2:	f243 0201 	movw	r2, #12289	; 0x3001
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <OPT3001_GetDeviceIDRead+0x4e>
		{
			return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <OPT3001_GetDeviceIDRead+0x50>
		}
	}
	return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <OPT3001_Shutdown>:

/* Shut the sensor down to low power mode */
static uint8_t OPT3001_Shutdown(OPT3001 *device)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	unsigned char buffer[3];
	buffer[0]=0x01; //buffer
 8003df0:	2301      	movs	r3, #1
 8003df2:	733b      	strb	r3, [r7, #12]
	buffer[1]=0xCA; //MSB byte
 8003df4:	23ca      	movs	r3, #202	; 0xca
 8003df6:	737b      	strb	r3, [r7, #13]
	buffer[2]=0x10; //LSB byte
 8003df8:	2310      	movs	r3, #16
 8003dfa:	73bb      	strb	r3, [r7, #14]

	if(I2C_Write(device->hi2c, device->i2cWrite, buffer, 3) == HAL_OK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6858      	ldr	r0, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	7a1b      	ldrb	r3, [r3, #8]
 8003e04:	b299      	uxth	r1, r3
 8003e06:	f107 020c 	add.w	r2, r7, #12
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	f7ff fefc 	bl	8003c08 <I2C_Write>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <OPT3001_Shutdown+0x32>
	{
		return HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e000      	b.n	8003e1c <OPT3001_Shutdown+0x34>
	}
	return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <OPT3001_RequestReading>:

static uint8_t OPT3001_RequestReading(OPT3001 *device)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	uint8_t id_reg = 0x00;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]

	if(I2C_Write(device->hi2c, device->i2cWrite, &id_reg, 1) == HAL_OK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6858      	ldr	r0, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7a1b      	ldrb	r3, [r3, #8]
 8003e38:	b299      	uxth	r1, r3
 8003e3a:	f107 020f 	add.w	r2, r7, #15
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f7ff fee2 	bl	8003c08 <I2C_Write>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <OPT3001_RequestReading+0x2a>
	{
		return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e000      	b.n	8003e50 <OPT3001_RequestReading+0x2c>
	}
	return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <OPT3001_ReadingReadyWrite>:

/* Check if reading is ready at device */
static uint8_t OPT3001_ReadingReadyWrite(OPT3001 *device)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	uint8_t id_reg = 0x01;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
	if(I2C_ReadWrite(device->hi2c, device->i2cWrite, &id_reg, 1) == HAL_OK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6858      	ldr	r0, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7a1b      	ldrb	r3, [r3, #8]
 8003e6c:	b299      	uxth	r1, r3
 8003e6e:	f107 020f 	add.w	r2, r7, #15
 8003e72:	2301      	movs	r3, #1
 8003e74:	f7ff fee6 	bl	8003c44 <I2C_ReadWrite>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <OPT3001_ReadingReadyWrite+0x2a>
	{
		return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <OPT3001_ReadingReadyWrite+0x2c>
	}
	return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <OPT3001_ReadingReadyRead>:

static uint8_t OPT3001_ReadingReadyRead(OPT3001 *device)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	uint16_t rawL;
	uint8_t buffer[2] = {0,0};
 8003e94:	2300      	movs	r3, #0
 8003e96:	733b      	strb	r3, [r7, #12]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	737b      	strb	r3, [r7, #13]

	if(I2C_ReadRead(device->hi2c, device->i2cRead, buffer, 2) == HAL_OK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6858      	ldr	r0, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7a5b      	ldrb	r3, [r3, #9]
 8003ea4:	b299      	uxth	r1, r3
 8003ea6:	f107 020c 	add.w	r2, r7, #12
 8003eaa:	2302      	movs	r3, #2
 8003eac:	f7ff fee8 	bl	8003c80 <I2C_ReadRead>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10e      	bne.n	8003ed4 <OPT3001_ReadingReadyRead+0x48>
	{
		rawL = (((uint16_t)buffer[0]) << 8) | buffer[1];
 8003eb6:	7b3b      	ldrb	r3, [r7, #12]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	b21a      	sxth	r2, r3
 8003ebc:	7b7b      	ldrb	r3, [r7, #13]
 8003ebe:	b21b      	sxth	r3, r3
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	b21b      	sxth	r3, r3
 8003ec4:	81fb      	strh	r3, [r7, #14]
		if ((rawL & 0x80) == 128)
 8003ec6:	89fb      	ldrh	r3, [r7, #14]
 8003ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <OPT3001_ReadingReadyRead+0x48>
		{
			return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e000      	b.n	8003ed6 <OPT3001_ReadingReadyRead+0x4a>
		}
	}
	return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <OPT3001_GetLuxWrite>:

/* Get the current lux from the sensor */
static uint8_t OPT3001_GetLuxWrite(OPT3001 *device)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
	uint8_t id_reg = 0x00;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
	if(I2C_Write(device->hi2c, device->i2cWrite, &id_reg, 1) == HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6858      	ldr	r0, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7a1b      	ldrb	r3, [r3, #8]
 8003ef2:	b299      	uxth	r1, r3
 8003ef4:	f107 020f 	add.w	r2, r7, #15
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f7ff fe85 	bl	8003c08 <I2C_Write>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <OPT3001_GetLuxWrite+0x2a>
	{
		return HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e000      	b.n	8003f0a <OPT3001_GetLuxWrite+0x2c>
	}
	return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	0000      	movs	r0, r0
 8003f14:	0000      	movs	r0, r0
	...

08003f18 <OPT3001_GetLuxRead>:

/* Get the current lux from the sensor */
static uint8_t OPT3001_GetLuxRead(OPT3001 *device)
{
 8003f18:	b5b0      	push	{r4, r5, r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	uint16_t response;
	uint8_t buffer[2] = {0,0};
 8003f20:	2300      	movs	r3, #0
 8003f22:	723b      	strb	r3, [r7, #8]
 8003f24:	2300      	movs	r3, #0
 8003f26:	727b      	strb	r3, [r7, #9]

	if(I2C_ReadRead(device->hi2c, device->i2cRead, buffer, 2) == HAL_OK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6858      	ldr	r0, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	7a5b      	ldrb	r3, [r3, #9]
 8003f30:	b299      	uxth	r1, r3
 8003f32:	f107 0208 	add.w	r2, r7, #8
 8003f36:	2302      	movs	r3, #2
 8003f38:	f7ff fea2 	bl	8003c80 <I2C_ReadRead>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d138      	bne.n	8003fb4 <OPT3001_GetLuxRead+0x9c>
	{
		response = (((uint16_t)buffer[0]) << 8) | buffer[1];
 8003f42:	7a3b      	ldrb	r3, [r7, #8]
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	b21a      	sxth	r2, r3
 8003f48:	7a7b      	ldrb	r3, [r7, #9]
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	b21b      	sxth	r3, r3
 8003f50:	81fb      	strh	r3, [r7, #14]
		uint16_t iExponent, iMantissa;
		iMantissa = response & 0x0FFF;                 // Extract Mantissa
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f58:	81bb      	strh	r3, [r7, #12]
		iExponent = (response & 0xF000) >> 12;         // Extract Exponent
 8003f5a:	89fb      	ldrh	r3, [r7, #14]
 8003f5c:	0b1b      	lsrs	r3, r3, #12
 8003f5e:	817b      	strh	r3, [r7, #10]
		device->currentLux = iMantissa * (0.01 * pow(2, iExponent));
 8003f60:	89bb      	ldrh	r3, [r7, #12]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc fae6 	bl	8000534 <__aeabi_i2d>
 8003f68:	4604      	mov	r4, r0
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	897b      	ldrh	r3, [r7, #10]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fc fad0 	bl	8000514 <__aeabi_ui2d>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	ec43 2b11 	vmov	d1, r2, r3
 8003f7c:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8003fc0 <OPT3001_GetLuxRead+0xa8>
 8003f80:	f003 fa2c 	bl	80073dc <pow>
 8003f84:	ec51 0b10 	vmov	r0, r1, d0
 8003f88:	a30f      	add	r3, pc, #60	; (adr r3, 8003fc8 <OPT3001_GetLuxRead+0xb0>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc fb3b 	bl	8000608 <__aeabi_dmul>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4620      	mov	r0, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	f7fc fb35 	bl	8000608 <__aeabi_dmul>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	f7fc fe07 	bl	8000bb8 <__aeabi_d2f>
 8003faa:	4602      	mov	r2, r0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]
		return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <OPT3001_GetLuxRead+0x9e>

	}
	return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	00000000 	.word	0x00000000
 8003fc4:	40000000 	.word	0x40000000
 8003fc8:	47ae147b 	.word	0x47ae147b
 8003fcc:	3f847ae1 	.word	0x3f847ae1

08003fd0 <OPT3001_StateMachine>:

void OPT3001_StateMachine(OPT3001 *device)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	if(device->errorCounter > 100)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7adb      	ldrb	r3, [r3, #11]
 8003fdc:	2b64      	cmp	r3, #100	; 0x64
 8003fde:	d909      	bls.n	8003ff4 <OPT3001_StateMachine+0x24>
	{
		/* Error occur */
		TRACE("[OPT3001] - FAILED\r\n");
		device->errorCounter = 0;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	72da      	strb	r2, [r3, #11]
		device->sStatus = SENSORSTATUS_FAIL;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	729a      	strb	r2, [r3, #10]
		OPT3001_SetState(device, OPT3001_ERROR);
 8003fec:	210b      	movs	r1, #11
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fe64 	bl	8003cbc <OPT3001_SetState>
	}

	switch(device->tState)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	2b09      	cmp	r3, #9
 8003ffc:	f200 80c5 	bhi.w	800418a <OPT3001_StateMachine+0x1ba>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <OPT3001_StateMachine+0x38>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	08004031 	.word	0x08004031
 800400c:	08004055 	.word	0x08004055
 8004010:	08004079 	.word	0x08004079
 8004014:	0800409d 	.word	0x0800409d
 8004018:	080040c1 	.word	0x080040c1
 800401c:	080040e5 	.word	0x080040e5
 8004020:	08004109 	.word	0x08004109
 8004024:	0800412d 	.word	0x0800412d
 8004028:	08004151 	.word	0x08004151
 800402c:	08004175 	.word	0x08004175
	{
	case OPT3001_INITIATE:
	{
		if(OPT3001_Init(device) == HAL_OK)
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fe75 	bl	8003d20 <OPT3001_Init>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d104      	bne.n	8004046 <OPT3001_StateMachine+0x76>
		{
			TRACE_DEBUG("[OPT3001] - Init Success\r\n");
			OPT3001_SetState(device, OPT3001_REQUESTREADING);
 800403c:	2104      	movs	r1, #4
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fe3c 	bl	8003cbc <OPT3001_SetState>
		else
		{
			device->errorCounter++;
			TRACE_DEBUG("[OPT3001] -  OPT3001_INITIATE ERROR\r\n");
		}
		break;
 8004044:	e0a2      	b.n	800418c <OPT3001_StateMachine+0x1bc>
			device->errorCounter++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7adb      	ldrb	r3, [r3, #11]
 800404a:	3301      	adds	r3, #1
 800404c:	b2da      	uxtb	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	72da      	strb	r2, [r3, #11]
		break;
 8004052:	e09b      	b.n	800418c <OPT3001_StateMachine+0x1bc>
	}
	case OPT3001_IDWRITE:
	{
		if(OPT3001_GetDeviceIDWrite(device) == HAL_OK)
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fe81 	bl	8003d5c <OPT3001_GetDeviceIDWrite>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <OPT3001_StateMachine+0x9a>
		{
			TRACE_DEBUG("[OPT3001] - ID Write Success\r\n");
			OPT3001_SetState(device, OPT3001_IDREAD);
 8004060:	2103      	movs	r1, #3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fe2a 	bl	8003cbc <OPT3001_SetState>
		else
		{
			TRACE_DEBUG("[OPT3001] -  OPT3001_IDWRITE ERROR\r\n");
			device->errorCounter++;
		}
		break;
 8004068:	e090      	b.n	800418c <OPT3001_StateMachine+0x1bc>
			device->errorCounter++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7adb      	ldrb	r3, [r3, #11]
 800406e:	3301      	adds	r3, #1
 8004070:	b2da      	uxtb	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	72da      	strb	r2, [r3, #11]
		break;
 8004076:	e089      	b.n	800418c <OPT3001_StateMachine+0x1bc>
	}
	case OPT3001_IDREAD:
	{
		if(OPT3001_GetDeviceIDRead(device) == HAL_OK)
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fe89 	bl	8003d90 <OPT3001_GetDeviceIDRead>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <OPT3001_StateMachine+0xbe>
		{
			TRACE_DEBUG("[OPT3001] - ID Read Success\r\n");
			OPT3001_SetState(device, OPT3001_DONE);
 8004084:	210a      	movs	r1, #10
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fe18 	bl	8003cbc <OPT3001_SetState>
		else
		{
			TRACE_DEBUG("[OPT3001] -  OPT3001_IDREAD ERROR\r\n");
			device->errorCounter++;
		}
		break;
 800408c:	e07e      	b.n	800418c <OPT3001_StateMachine+0x1bc>
			device->errorCounter++;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	7adb      	ldrb	r3, [r3, #11]
 8004092:	3301      	adds	r3, #1
 8004094:	b2da      	uxtb	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	72da      	strb	r2, [r3, #11]
		break;
 800409a:	e077      	b.n	800418c <OPT3001_StateMachine+0x1bc>
	}
	case OPT3001_REQUESTREADING:
	{
		if(OPT3001_RequestReading(device) == HAL_OK)
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff fec1 	bl	8003e24 <OPT3001_RequestReading>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d104      	bne.n	80040b2 <OPT3001_StateMachine+0xe2>
		{
			TRACE_DEBUG("[OPT3001] - Request Reading Success\r\n");
			OPT3001_SetState(device, OPT3001_READINGREADYWRITE);
 80040a8:	2105      	movs	r1, #5
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fe06 	bl	8003cbc <OPT3001_SetState>
		else
		{
			TRACE_DEBUG("[OPT3001] -  OPT3001_REQUESTREADING ERROR\r\n");
			device->errorCounter++;
		}
		break;
 80040b0:	e06c      	b.n	800418c <OPT3001_StateMachine+0x1bc>
			device->errorCounter++;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	7adb      	ldrb	r3, [r3, #11]
 80040b6:	3301      	adds	r3, #1
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	72da      	strb	r2, [r3, #11]
		break;
 80040be:	e065      	b.n	800418c <OPT3001_StateMachine+0x1bc>
	}
	case OPT3001_READINGREADYWRITE:
	{
		if(OPT3001_ReadingReadyWrite(device) == HAL_OK)
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff fec9 	bl	8003e58 <OPT3001_ReadingReadyWrite>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d104      	bne.n	80040d6 <OPT3001_StateMachine+0x106>
		{
			TRACE_DEBUG("[OPT3001] - Reading Ready Write Success\r\n");
			OPT3001_SetState(device, OPT3001_READINGREADYREAD);
 80040cc:	2106      	movs	r1, #6
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fdf4 	bl	8003cbc <OPT3001_SetState>
		else
		{
			TRACE_DEBUG("[OPT3001] -  OPT3001_READINGREADYWRITE ERROR\r\n");
			device->errorCounter++;
		}
		break;
 80040d4:	e05a      	b.n	800418c <OPT3001_StateMachine+0x1bc>
			device->errorCounter++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	7adb      	ldrb	r3, [r3, #11]
 80040da:	3301      	adds	r3, #1
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	72da      	strb	r2, [r3, #11]
		break;
 80040e2:	e053      	b.n	800418c <OPT3001_StateMachine+0x1bc>
	}
	case OPT3001_READINGREADYREAD:
	{
		if(OPT3001_ReadingReadyRead(device) == HAL_OK)
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fed1 	bl	8003e8c <OPT3001_ReadingReadyRead>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <OPT3001_StateMachine+0x12a>
		{
			TRACE_DEBUG("[OPT3001] - Reading Ready Read Success\r\n");
			OPT3001_SetState(device, OPT3001_GETLUXWRITE);
 80040f0:	2107      	movs	r1, #7
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fde2 	bl	8003cbc <OPT3001_SetState>
		else
		{
			TRACE_DEBUG("[OPT3001] -  OPT3001_READINGREADYREAD ERROR\r\n");
			device->errorCounter++;
		}
		break;
 80040f8:	e048      	b.n	800418c <OPT3001_StateMachine+0x1bc>
			device->errorCounter++;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7adb      	ldrb	r3, [r3, #11]
 80040fe:	3301      	adds	r3, #1
 8004100:	b2da      	uxtb	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	72da      	strb	r2, [r3, #11]
		break;
 8004106:	e041      	b.n	800418c <OPT3001_StateMachine+0x1bc>
	}
	case OPT3001_GETLUXWRITE:
	{
		if(OPT3001_GetLuxWrite(device) == HAL_OK)
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fee8 	bl	8003ede <OPT3001_GetLuxWrite>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <OPT3001_StateMachine+0x14e>
		{
			TRACE_DEBUG("[OPT3001] - Get Lux Write Success\r\n");
			OPT3001_SetState(device, OPT3001_GETLUXREAD);
 8004114:	2108      	movs	r1, #8
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff fdd0 	bl	8003cbc <OPT3001_SetState>
		else
		{
			TRACE_DEBUG("[OPT3001] -  OPT3001_GETLUXWRITE ERROR\r\n");
			device->errorCounter++;
		}
		break;
 800411c:	e036      	b.n	800418c <OPT3001_StateMachine+0x1bc>
			device->errorCounter++;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7adb      	ldrb	r3, [r3, #11]
 8004122:	3301      	adds	r3, #1
 8004124:	b2da      	uxtb	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	72da      	strb	r2, [r3, #11]
		break;
 800412a:	e02f      	b.n	800418c <OPT3001_StateMachine+0x1bc>
	}
	case OPT3001_GETLUXREAD:
	{
		if(OPT3001_GetLuxRead(device) == HAL_OK)
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff fef3 	bl	8003f18 <OPT3001_GetLuxRead>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <OPT3001_StateMachine+0x172>
		{
			TRACE_DEBUG("[OPT3001] - Get Lux Read Success\r\n");
			OPT3001_SetState(device, OPT3001_SHUTDOWN);
 8004138:	2109      	movs	r1, #9
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fdbe 	bl	8003cbc <OPT3001_SetState>
		else
		{
			TRACE_DEBUG("[OPT3001] -  OPT3001_GETLUXREAD ERROR\r\n");
			device->errorCounter++;
		}
		break;
 8004140:	e024      	b.n	800418c <OPT3001_StateMachine+0x1bc>
			device->errorCounter++;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	7adb      	ldrb	r3, [r3, #11]
 8004146:	3301      	adds	r3, #1
 8004148:	b2da      	uxtb	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	72da      	strb	r2, [r3, #11]
		break;
 800414e:	e01d      	b.n	800418c <OPT3001_StateMachine+0x1bc>
	}
	case OPT3001_SHUTDOWN:
	{
		if(OPT3001_Shutdown(device) == HAL_OK)
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff fe49 	bl	8003de8 <OPT3001_Shutdown>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <OPT3001_StateMachine+0x196>
		{
			TRACE_DEBUG("[OPT3001] - Shutdown Success\r\n");
			OPT3001_SetState(device, OPT3001_DONE);
 800415c:	210a      	movs	r1, #10
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fdac 	bl	8003cbc <OPT3001_SetState>
		}
		else
		{
			device->errorCounter++;
		}
		break;
 8004164:	e012      	b.n	800418c <OPT3001_StateMachine+0x1bc>
			device->errorCounter++;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	7adb      	ldrb	r3, [r3, #11]
 800416a:	3301      	adds	r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	72da      	strb	r2, [r3, #11]
		break;
 8004172:	e00b      	b.n	800418c <OPT3001_StateMachine+0x1bc>
	}
	case OPT3001_DONE:
	{
		TRACE("[OPT3001] - Passed\r\n");
		device->errorCounter = 0;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	72da      	strb	r2, [r3, #11]
		device->sStatus = SENSORSTATUS_PASS;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	729a      	strb	r2, [r3, #10]
		OPT3001_SetState(device, OPT3001_INITIATE);
 8004180:	2101      	movs	r1, #1
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff fd9a 	bl	8003cbc <OPT3001_SetState>
		break;
 8004188:	e000      	b.n	800418c <OPT3001_StateMachine+0x1bc>
	}
	default:
		break;
 800418a:	bf00      	nop
	}
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a4:	2b80      	cmp	r3, #128	; 0x80
 80041a6:	d101      	bne.n	80041ac <LL_USART_IsActiveFlag_TXE+0x18>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <LL_USART_IsActiveFlag_TXE+0x1a>
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <_write>:
				 printf("string\r\n");
				 or
				 printf("Variable 1: %d\r\n, var1); to get the variable printed
--------------------------------------------------------------------------------------------------*/
int _write(int file, char *data, int len)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d00a      	beq.n	8004204 <_write+0x28>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d007      	beq.n	8004204 <_write+0x28>
	{
		errno = EBADF;
 80041f4:	f000 fd9a 	bl	8004d2c <__errno>
 80041f8:	4602      	mov	r2, r0
 80041fa:	2309      	movs	r3, #9
 80041fc:	6013      	str	r3, [r2, #0]
		return -1;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e01c      	b.n	800423e <_write+0x62>
	}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e014      	b.n	8004234 <_write+0x58>
	{
		while (!LL_USART_IsActiveFlag_TXE(USART_Generic))
 800420a:	bf00      	nop
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <_write+0x6c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff ffbf 	bl	8004194 <LL_USART_IsActiveFlag_TXE>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f7      	beq.n	800420c <_write+0x30>
		{
		}

		LL_USART_TransmitData8(USART_Generic, *data++);
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <_write+0x6c>)
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	60ba      	str	r2, [r7, #8]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	4619      	mov	r1, r3
 800422a:	f7ff ffc6 	bl	80041ba <LL_USART_TransmitData8>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	3301      	adds	r3, #1
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	dbe6      	blt.n	800420a <_write+0x2e>
	/* Wait for TC flag to be raised for last char */
//	while (!LL_USART_IsActiveFlag_TC(LPUART1))
//	{
//	}

	return 0;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000008 	.word	0x20000008

0800424c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004252:	f107 030c 	add.w	r3, r7, #12
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004262:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <MX_GPIO_Init+0x90>)
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	4a1d      	ldr	r2, [pc, #116]	; (80042dc <MX_GPIO_Init+0x90>)
 8004268:	f043 0304 	orr.w	r3, r3, #4
 800426c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800426e:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <MX_GPIO_Init+0x90>)
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800427a:	4b18      	ldr	r3, [pc, #96]	; (80042dc <MX_GPIO_Init+0x90>)
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <MX_GPIO_Init+0x90>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <MX_GPIO_Init+0x90>)
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	607b      	str	r3, [r7, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <MX_GPIO_Init+0x90>)
 8004294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <MX_GPIO_Init+0x90>)
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <MX_GPIO_Init+0x90>)
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80042aa:	2200      	movs	r2, #0
 80042ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042b0:	480b      	ldr	r0, [pc, #44]	; (80042e0 <MX_GPIO_Init+0x94>)
 80042b2:	f7fc ffc7 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80042b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042bc:	2301      	movs	r3, #1
 80042be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042c8:	f107 030c 	add.w	r3, r7, #12
 80042cc:	4619      	mov	r1, r3
 80042ce:	4804      	ldr	r0, [pc, #16]	; (80042e0 <MX_GPIO_Init+0x94>)
 80042d0:	f7fc fe3e 	bl	8000f50 <HAL_GPIO_Init>

}
 80042d4:	bf00      	nop
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40021000 	.word	0x40021000
 80042e0:	48000800 	.word	0x48000800

080042e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <MX_I2C1_Init+0x74>)
 80042ea:	4a1c      	ldr	r2, [pc, #112]	; (800435c <MX_I2C1_Init+0x78>)
 80042ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80042ee:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <MX_I2C1_Init+0x74>)
 80042f0:	f640 6214 	movw	r2, #3604	; 0xe14
 80042f4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <MX_I2C1_Init+0x74>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <MX_I2C1_Init+0x74>)
 80042fe:	2201      	movs	r2, #1
 8004300:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <MX_I2C1_Init+0x74>)
 8004304:	2200      	movs	r2, #0
 8004306:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <MX_I2C1_Init+0x74>)
 800430a:	2200      	movs	r2, #0
 800430c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <MX_I2C1_Init+0x74>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004314:	4b10      	ldr	r3, [pc, #64]	; (8004358 <MX_I2C1_Init+0x74>)
 8004316:	2200      	movs	r2, #0
 8004318:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800431a:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <MX_I2C1_Init+0x74>)
 800431c:	2200      	movs	r2, #0
 800431e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004320:	480d      	ldr	r0, [pc, #52]	; (8004358 <MX_I2C1_Init+0x74>)
 8004322:	f7fc ffc1 	bl	80012a8 <HAL_I2C_Init>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800432c:	f000 fb20 	bl	8004970 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004330:	2100      	movs	r1, #0
 8004332:	4809      	ldr	r0, [pc, #36]	; (8004358 <MX_I2C1_Init+0x74>)
 8004334:	f7fd fc12 	bl	8001b5c <HAL_I2CEx_ConfigAnalogFilter>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800433e:	f000 fb17 	bl	8004970 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004342:	2100      	movs	r1, #0
 8004344:	4804      	ldr	r0, [pc, #16]	; (8004358 <MX_I2C1_Init+0x74>)
 8004346:	f7fd fc54 	bl	8001bf2 <HAL_I2CEx_ConfigDigitalFilter>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8004350:	f000 fb0e 	bl	8004970 <Error_Handler>
  }

}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	200002a8 	.word	0x200002a8
 800435c:	40005400 	.word	0x40005400

08004360 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8004364:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <MX_I2C3_Init+0x74>)
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <MX_I2C3_Init+0x78>)
 8004368:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <MX_I2C3_Init+0x74>)
 800436c:	f640 6214 	movw	r2, #3604	; 0xe14
 8004370:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8004372:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <MX_I2C3_Init+0x74>)
 8004374:	2200      	movs	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004378:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <MX_I2C3_Init+0x74>)
 800437a:	2201      	movs	r2, #1
 800437c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800437e:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <MX_I2C3_Init+0x74>)
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8004384:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <MX_I2C3_Init+0x74>)
 8004386:	2200      	movs	r2, #0
 8004388:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <MX_I2C3_Init+0x74>)
 800438c:	2200      	movs	r2, #0
 800438e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004390:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <MX_I2C3_Init+0x74>)
 8004392:	2200      	movs	r2, #0
 8004394:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004396:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <MX_I2C3_Init+0x74>)
 8004398:	2200      	movs	r2, #0
 800439a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800439c:	480d      	ldr	r0, [pc, #52]	; (80043d4 <MX_I2C3_Init+0x74>)
 800439e:	f7fc ff83 	bl	80012a8 <HAL_I2C_Init>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80043a8:	f000 fae2 	bl	8004970 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80043ac:	2100      	movs	r1, #0
 80043ae:	4809      	ldr	r0, [pc, #36]	; (80043d4 <MX_I2C3_Init+0x74>)
 80043b0:	f7fd fbd4 	bl	8001b5c <HAL_I2CEx_ConfigAnalogFilter>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80043ba:	f000 fad9 	bl	8004970 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80043be:	2100      	movs	r1, #0
 80043c0:	4804      	ldr	r0, [pc, #16]	; (80043d4 <MX_I2C3_Init+0x74>)
 80043c2:	f7fd fc16 	bl	8001bf2 <HAL_I2CEx_ConfigDigitalFilter>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80043cc:	f000 fad0 	bl	8004970 <Error_Handler>
  }

}
 80043d0:	bf00      	nop
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000210 	.word	0x20000210
 80043d8:	40005c00 	.word	0x40005c00

080043dc <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0

  hi2c4.Instance = I2C4;
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <MX_I2C4_Init+0x74>)
 80043e2:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <MX_I2C4_Init+0x78>)
 80043e4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00000E14;
 80043e6:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <MX_I2C4_Init+0x74>)
 80043e8:	f640 6214 	movw	r2, #3604	; 0xe14
 80043ec:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80043ee:	4b18      	ldr	r3, [pc, #96]	; (8004450 <MX_I2C4_Init+0x74>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043f4:	4b16      	ldr	r3, [pc, #88]	; (8004450 <MX_I2C4_Init+0x74>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <MX_I2C4_Init+0x74>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <MX_I2C4_Init+0x74>)
 8004402:	2200      	movs	r2, #0
 8004404:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004406:	4b12      	ldr	r3, [pc, #72]	; (8004450 <MX_I2C4_Init+0x74>)
 8004408:	2200      	movs	r2, #0
 800440a:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <MX_I2C4_Init+0x74>)
 800440e:	2200      	movs	r2, #0
 8004410:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <MX_I2C4_Init+0x74>)
 8004414:	2200      	movs	r2, #0
 8004416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8004418:	480d      	ldr	r0, [pc, #52]	; (8004450 <MX_I2C4_Init+0x74>)
 800441a:	f7fc ff45 	bl	80012a8 <HAL_I2C_Init>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <MX_I2C4_Init+0x4c>
  {
    Error_Handler();
 8004424:	f000 faa4 	bl	8004970 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004428:	2100      	movs	r1, #0
 800442a:	4809      	ldr	r0, [pc, #36]	; (8004450 <MX_I2C4_Init+0x74>)
 800442c:	f7fd fb96 	bl	8001b5c <HAL_I2CEx_ConfigAnalogFilter>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8004436:	f000 fa9b 	bl	8004970 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800443a:	2100      	movs	r1, #0
 800443c:	4804      	ldr	r0, [pc, #16]	; (8004450 <MX_I2C4_Init+0x74>)
 800443e:	f7fd fbd8 	bl	8001bf2 <HAL_I2CEx_ConfigDigitalFilter>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8004448:	f000 fa92 	bl	8004970 <Error_Handler>
  }

}
 800444c:	bf00      	nop
 800444e:	bd80      	pop	{r7, pc}
 8004450:	2000025c 	.word	0x2000025c
 8004454:	40008400 	.word	0x40008400

08004458 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08e      	sub	sp, #56	; 0x38
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a45      	ldr	r2, [pc, #276]	; (800458c <HAL_I2C_MspInit+0x134>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d129      	bne.n	80044ce <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800447a:	4b45      	ldr	r3, [pc, #276]	; (8004590 <HAL_I2C_MspInit+0x138>)
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	4a44      	ldr	r2, [pc, #272]	; (8004590 <HAL_I2C_MspInit+0x138>)
 8004480:	f043 0302 	orr.w	r3, r3, #2
 8004484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004486:	4b42      	ldr	r3, [pc, #264]	; (8004590 <HAL_I2C_MspInit+0x138>)
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	623b      	str	r3, [r7, #32]
 8004490:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004492:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004498:	2312      	movs	r3, #18
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800449c:	2301      	movs	r3, #1
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a0:	2303      	movs	r3, #3
 80044a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044a4:	2304      	movs	r3, #4
 80044a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ac:	4619      	mov	r1, r3
 80044ae:	4839      	ldr	r0, [pc, #228]	; (8004594 <HAL_I2C_MspInit+0x13c>)
 80044b0:	f7fc fd4e 	bl	8000f50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044b4:	4b36      	ldr	r3, [pc, #216]	; (8004590 <HAL_I2C_MspInit+0x138>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	4a35      	ldr	r2, [pc, #212]	; (8004590 <HAL_I2C_MspInit+0x138>)
 80044ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044be:	6593      	str	r3, [r2, #88]	; 0x58
 80044c0:	4b33      	ldr	r3, [pc, #204]	; (8004590 <HAL_I2C_MspInit+0x138>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80044cc:	e05a      	b.n	8004584 <HAL_I2C_MspInit+0x12c>
  else if(i2cHandle->Instance==I2C3)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a31      	ldr	r2, [pc, #196]	; (8004598 <HAL_I2C_MspInit+0x140>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d128      	bne.n	800452a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d8:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <HAL_I2C_MspInit+0x138>)
 80044da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044dc:	4a2c      	ldr	r2, [pc, #176]	; (8004590 <HAL_I2C_MspInit+0x138>)
 80044de:	f043 0304 	orr.w	r3, r3, #4
 80044e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044e4:	4b2a      	ldr	r3, [pc, #168]	; (8004590 <HAL_I2C_MspInit+0x138>)
 80044e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044f0:	2303      	movs	r3, #3
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044f4:	2312      	movs	r3, #18
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044f8:	2301      	movs	r3, #1
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fc:	2303      	movs	r3, #3
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004500:	2304      	movs	r3, #4
 8004502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004508:	4619      	mov	r1, r3
 800450a:	4824      	ldr	r0, [pc, #144]	; (800459c <HAL_I2C_MspInit+0x144>)
 800450c:	f7fc fd20 	bl	8000f50 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004510:	4b1f      	ldr	r3, [pc, #124]	; (8004590 <HAL_I2C_MspInit+0x138>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <HAL_I2C_MspInit+0x138>)
 8004516:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800451a:	6593      	str	r3, [r2, #88]	; 0x58
 800451c:	4b1c      	ldr	r3, [pc, #112]	; (8004590 <HAL_I2C_MspInit+0x138>)
 800451e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	697b      	ldr	r3, [r7, #20]
}
 8004528:	e02c      	b.n	8004584 <HAL_I2C_MspInit+0x12c>
  else if(i2cHandle->Instance==I2C4)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1c      	ldr	r2, [pc, #112]	; (80045a0 <HAL_I2C_MspInit+0x148>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d127      	bne.n	8004584 <HAL_I2C_MspInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004534:	4b16      	ldr	r3, [pc, #88]	; (8004590 <HAL_I2C_MspInit+0x138>)
 8004536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <HAL_I2C_MspInit+0x138>)
 800453a:	f043 0302 	orr.w	r3, r3, #2
 800453e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_I2C_MspInit+0x138>)
 8004542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800454c:	23c0      	movs	r3, #192	; 0xc0
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004550:	2312      	movs	r3, #18
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004554:	2301      	movs	r3, #1
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004558:	2303      	movs	r3, #3
 800455a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C4;
 800455c:	2305      	movs	r3, #5
 800455e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004564:	4619      	mov	r1, r3
 8004566:	480b      	ldr	r0, [pc, #44]	; (8004594 <HAL_I2C_MspInit+0x13c>)
 8004568:	f7fc fcf2 	bl	8000f50 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <HAL_I2C_MspInit+0x138>)
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	4a07      	ldr	r2, [pc, #28]	; (8004590 <HAL_I2C_MspInit+0x138>)
 8004572:	f043 0302 	orr.w	r3, r3, #2
 8004576:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_I2C_MspInit+0x138>)
 800457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	bf00      	nop
 8004586:	3738      	adds	r7, #56	; 0x38
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40005400 	.word	0x40005400
 8004590:	40021000 	.word	0x40021000
 8004594:	48000400 	.word	0x48000400
 8004598:	40005c00 	.word	0x40005c00
 800459c:	48000800 	.word	0x48000800
 80045a0:	40008400 	.word	0x40008400

080045a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045a4:	b598      	push	{r3, r4, r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045a8:	f7fc fb56 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045ac:	f000 f978 	bl	80048a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045b0:	f7ff fe4c 	bl	800424c <MX_GPIO_Init>
  MX_I2C1_Init();
 80045b4:	f7ff fe96 	bl	80042e4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80045b8:	f7ff fed2 	bl	8004360 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80045bc:	f000 fb3c 	bl	8004c38 <MX_USART1_UART_Init>
  MX_I2C4_Init();
 80045c0:	f7ff ff0c 	bl	80043dc <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  TRACE("[Starting...]\r\n");


OPT3001_InitDevice(&opt1, &hi2c1, 0b1000111<<1, 0b1000111<<1);
 80045c4:	238e      	movs	r3, #142	; 0x8e
 80045c6:	228e      	movs	r2, #142	; 0x8e
 80045c8:	499d      	ldr	r1, [pc, #628]	; (8004840 <main+0x29c>)
 80045ca:	489e      	ldr	r0, [pc, #632]	; (8004844 <main+0x2a0>)
 80045cc:	f7ff fb85 	bl	8003cda <OPT3001_InitDevice>
OPT3001_InitDevice(&opt2, &hi2c1, 0b1000110<<1, 0b1000110<<1);
 80045d0:	238c      	movs	r3, #140	; 0x8c
 80045d2:	228c      	movs	r2, #140	; 0x8c
 80045d4:	499a      	ldr	r1, [pc, #616]	; (8004840 <main+0x29c>)
 80045d6:	489c      	ldr	r0, [pc, #624]	; (8004848 <main+0x2a4>)
 80045d8:	f7ff fb7f 	bl	8003cda <OPT3001_InitDevice>
OPT3001_InitDevice(&opt3, &hi2c1, 0b1000100<<1, 0b1000100<<1);
 80045dc:	2388      	movs	r3, #136	; 0x88
 80045de:	2288      	movs	r2, #136	; 0x88
 80045e0:	4997      	ldr	r1, [pc, #604]	; (8004840 <main+0x29c>)
 80045e2:	489a      	ldr	r0, [pc, #616]	; (800484c <main+0x2a8>)
 80045e4:	f7ff fb79 	bl	8003cda <OPT3001_InitDevice>
OPT3001_InitDevice(&opt4, &hi2c1, 0b1000101<<1, 0b1000101<<1);
 80045e8:	238a      	movs	r3, #138	; 0x8a
 80045ea:	228a      	movs	r2, #138	; 0x8a
 80045ec:	4994      	ldr	r1, [pc, #592]	; (8004840 <main+0x29c>)
 80045ee:	4898      	ldr	r0, [pc, #608]	; (8004850 <main+0x2ac>)
 80045f0:	f7ff fb73 	bl	8003cda <OPT3001_InitDevice>
OPT3001_InitDevice(&opt5, &hi2c4, 0b1000100<<1, 0b1000100<<1);
 80045f4:	2388      	movs	r3, #136	; 0x88
 80045f6:	2288      	movs	r2, #136	; 0x88
 80045f8:	4996      	ldr	r1, [pc, #600]	; (8004854 <main+0x2b0>)
 80045fa:	4897      	ldr	r0, [pc, #604]	; (8004858 <main+0x2b4>)
 80045fc:	f7ff fb6d 	bl	8003cda <OPT3001_InitDevice>
OPT3001_InitDevice(&opt6, &hi2c4, 0b1000111<<1 , 0b1000111<<1);
 8004600:	238e      	movs	r3, #142	; 0x8e
 8004602:	228e      	movs	r2, #142	; 0x8e
 8004604:	4993      	ldr	r1, [pc, #588]	; (8004854 <main+0x2b0>)
 8004606:	4895      	ldr	r0, [pc, #596]	; (800485c <main+0x2b8>)
 8004608:	f7ff fb67 	bl	8003cda <OPT3001_InitDevice>
OPT3001_InitDevice(&opt7, &hi2c3, 0b1000111<<1, 0b1000111<<1);
 800460c:	238e      	movs	r3, #142	; 0x8e
 800460e:	228e      	movs	r2, #142	; 0x8e
 8004610:	4993      	ldr	r1, [pc, #588]	; (8004860 <main+0x2bc>)
 8004612:	4894      	ldr	r0, [pc, #592]	; (8004864 <main+0x2c0>)
 8004614:	f7ff fb61 	bl	8003cda <OPT3001_InitDevice>
OPT3001_InitDevice(&opt8, &hi2c3, 0b1000110<<1, 0b1000110<<1);
 8004618:	238c      	movs	r3, #140	; 0x8c
 800461a:	228c      	movs	r2, #140	; 0x8c
 800461c:	4990      	ldr	r1, [pc, #576]	; (8004860 <main+0x2bc>)
 800461e:	4892      	ldr	r0, [pc, #584]	; (8004868 <main+0x2c4>)
 8004620:	f7ff fb5b 	bl	8003cda <OPT3001_InitDevice>
OPT3001_InitDevice(&opt9, &hi2c3, 0b1000100<<1, 0b1000100<<1);
 8004624:	2388      	movs	r3, #136	; 0x88
 8004626:	2288      	movs	r2, #136	; 0x88
 8004628:	498d      	ldr	r1, [pc, #564]	; (8004860 <main+0x2bc>)
 800462a:	4890      	ldr	r0, [pc, #576]	; (800486c <main+0x2c8>)
 800462c:	f7ff fb55 	bl	8003cda <OPT3001_InitDevice>
OPT3001_InitDevice(&opt10, &hi2c3, 0b1000101<<1, 0b1000101<<1);
 8004630:	238a      	movs	r3, #138	; 0x8a
 8004632:	228a      	movs	r2, #138	; 0x8a
 8004634:	498a      	ldr	r1, [pc, #552]	; (8004860 <main+0x2bc>)
 8004636:	488e      	ldr	r0, [pc, #568]	; (8004870 <main+0x2cc>)
 8004638:	f7ff fb4f 	bl	8003cda <OPT3001_InitDevice>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	 OPT3001_StateMachine(&opt1);
 800463c:	4881      	ldr	r0, [pc, #516]	; (8004844 <main+0x2a0>)
 800463e:	f7ff fcc7 	bl	8003fd0 <OPT3001_StateMachine>
	 OPT3001_StateMachine(&opt2);
 8004642:	4881      	ldr	r0, [pc, #516]	; (8004848 <main+0x2a4>)
 8004644:	f7ff fcc4 	bl	8003fd0 <OPT3001_StateMachine>
	 OPT3001_StateMachine(&opt3);
 8004648:	4880      	ldr	r0, [pc, #512]	; (800484c <main+0x2a8>)
 800464a:	f7ff fcc1 	bl	8003fd0 <OPT3001_StateMachine>
	 OPT3001_StateMachine(&opt4);
 800464e:	4880      	ldr	r0, [pc, #512]	; (8004850 <main+0x2ac>)
 8004650:	f7ff fcbe 	bl	8003fd0 <OPT3001_StateMachine>
	 OPT3001_StateMachine(&opt5);
 8004654:	4880      	ldr	r0, [pc, #512]	; (8004858 <main+0x2b4>)
 8004656:	f7ff fcbb 	bl	8003fd0 <OPT3001_StateMachine>
	 OPT3001_StateMachine(&opt6);
 800465a:	4880      	ldr	r0, [pc, #512]	; (800485c <main+0x2b8>)
 800465c:	f7ff fcb8 	bl	8003fd0 <OPT3001_StateMachine>
	 OPT3001_StateMachine(&opt7);
 8004660:	4880      	ldr	r0, [pc, #512]	; (8004864 <main+0x2c0>)
 8004662:	f7ff fcb5 	bl	8003fd0 <OPT3001_StateMachine>
	 OPT3001_StateMachine(&opt8);
 8004666:	4880      	ldr	r0, [pc, #512]	; (8004868 <main+0x2c4>)
 8004668:	f7ff fcb2 	bl	8003fd0 <OPT3001_StateMachine>
	 OPT3001_StateMachine(&opt9);
 800466c:	487f      	ldr	r0, [pc, #508]	; (800486c <main+0x2c8>)
 800466e:	f7ff fcaf 	bl	8003fd0 <OPT3001_StateMachine>
	 OPT3001_StateMachine(&opt10);
 8004672:	487f      	ldr	r0, [pc, #508]	; (8004870 <main+0x2cc>)
 8004674:	f7ff fcac 	bl	8003fd0 <OPT3001_StateMachine>


	 //
	 if(opt1.tState == OPT3001_DONE)
 8004678:	4b72      	ldr	r3, [pc, #456]	; (8004844 <main+0x2a0>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b0a      	cmp	r3, #10
 800467e:	d116      	bne.n	80046ae <main+0x10a>
	 {
	 	printf("OPT1:%lf\n", opt1.currentLux);
 8004680:	4b70      	ldr	r3, [pc, #448]	; (8004844 <main+0x2a0>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4618      	mov	r0, r3
 8004686:	f7fb ff67 	bl	8000558 <__aeabi_f2d>
 800468a:	4603      	mov	r3, r0
 800468c:	460c      	mov	r4, r1
 800468e:	461a      	mov	r2, r3
 8004690:	4623      	mov	r3, r4
 8004692:	4878      	ldr	r0, [pc, #480]	; (8004874 <main+0x2d0>)
 8004694:	f000 ffd8 	bl	8005648 <iprintf>
	 	opt1.sStatus = OPT3001_INITIATE;
 8004698:	4b6a      	ldr	r3, [pc, #424]	; (8004844 <main+0x2a0>)
 800469a:	2201      	movs	r2, #1
 800469c:	729a      	strb	r2, [r3, #10]
	 	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800469e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046a2:	4875      	ldr	r0, [pc, #468]	; (8004878 <main+0x2d4>)
 80046a4:	f7fc fde6 	bl	8001274 <HAL_GPIO_TogglePin>
	 	HAL_Delay(20);
 80046a8:	2014      	movs	r0, #20
 80046aa:	f7fc fb49 	bl	8000d40 <HAL_Delay>
	 }

	 if(opt2.tState == OPT3001_DONE)
 80046ae:	4b66      	ldr	r3, [pc, #408]	; (8004848 <main+0x2a4>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b0a      	cmp	r3, #10
 80046b4:	d111      	bne.n	80046da <main+0x136>
	 {
	 	printf("OPT2:%lf\n", opt2.currentLux);
 80046b6:	4b64      	ldr	r3, [pc, #400]	; (8004848 <main+0x2a4>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fb ff4c 	bl	8000558 <__aeabi_f2d>
 80046c0:	4603      	mov	r3, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	461a      	mov	r2, r3
 80046c6:	4623      	mov	r3, r4
 80046c8:	486c      	ldr	r0, [pc, #432]	; (800487c <main+0x2d8>)
 80046ca:	f000 ffbd 	bl	8005648 <iprintf>
	 	opt2.sStatus = OPT3001_INITIATE;
 80046ce:	4b5e      	ldr	r3, [pc, #376]	; (8004848 <main+0x2a4>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	729a      	strb	r2, [r3, #10]
	 	HAL_Delay(20);
 80046d4:	2014      	movs	r0, #20
 80046d6:	f7fc fb33 	bl	8000d40 <HAL_Delay>
	 }
	 if(opt3.tState == OPT3001_DONE)
 80046da:	4b5c      	ldr	r3, [pc, #368]	; (800484c <main+0x2a8>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b0a      	cmp	r3, #10
 80046e0:	d111      	bne.n	8004706 <main+0x162>
	 {
	 	printf("OPT3:%lf\n", opt3.currentLux);
 80046e2:	4b5a      	ldr	r3, [pc, #360]	; (800484c <main+0x2a8>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fb ff36 	bl	8000558 <__aeabi_f2d>
 80046ec:	4603      	mov	r3, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	461a      	mov	r2, r3
 80046f2:	4623      	mov	r3, r4
 80046f4:	4862      	ldr	r0, [pc, #392]	; (8004880 <main+0x2dc>)
 80046f6:	f000 ffa7 	bl	8005648 <iprintf>
	 	opt3.sStatus = OPT3001_INITIATE;
 80046fa:	4b54      	ldr	r3, [pc, #336]	; (800484c <main+0x2a8>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	729a      	strb	r2, [r3, #10]
	 	HAL_Delay(20);
 8004700:	2014      	movs	r0, #20
 8004702:	f7fc fb1d 	bl	8000d40 <HAL_Delay>
	 }
	 if(opt4.tState == OPT3001_DONE)
 8004706:	4b52      	ldr	r3, [pc, #328]	; (8004850 <main+0x2ac>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b0a      	cmp	r3, #10
 800470c:	d111      	bne.n	8004732 <main+0x18e>
	 {
	 	printf("OPT4:%lf\n", opt4.currentLux);
 800470e:	4b50      	ldr	r3, [pc, #320]	; (8004850 <main+0x2ac>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fb ff20 	bl	8000558 <__aeabi_f2d>
 8004718:	4603      	mov	r3, r0
 800471a:	460c      	mov	r4, r1
 800471c:	461a      	mov	r2, r3
 800471e:	4623      	mov	r3, r4
 8004720:	4858      	ldr	r0, [pc, #352]	; (8004884 <main+0x2e0>)
 8004722:	f000 ff91 	bl	8005648 <iprintf>
	 	opt4.sStatus = OPT3001_INITIATE;
 8004726:	4b4a      	ldr	r3, [pc, #296]	; (8004850 <main+0x2ac>)
 8004728:	2201      	movs	r2, #1
 800472a:	729a      	strb	r2, [r3, #10]
	 	HAL_Delay(20);
 800472c:	2014      	movs	r0, #20
 800472e:	f7fc fb07 	bl	8000d40 <HAL_Delay>
	 }
	 if(opt5.tState == OPT3001_DONE)
 8004732:	4b49      	ldr	r3, [pc, #292]	; (8004858 <main+0x2b4>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b0a      	cmp	r3, #10
 8004738:	d111      	bne.n	800475e <main+0x1ba>
	 {
	 	printf("OPT5:%lf\n", opt5.currentLux);
 800473a:	4b47      	ldr	r3, [pc, #284]	; (8004858 <main+0x2b4>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fb ff0a 	bl	8000558 <__aeabi_f2d>
 8004744:	4603      	mov	r3, r0
 8004746:	460c      	mov	r4, r1
 8004748:	461a      	mov	r2, r3
 800474a:	4623      	mov	r3, r4
 800474c:	484e      	ldr	r0, [pc, #312]	; (8004888 <main+0x2e4>)
 800474e:	f000 ff7b 	bl	8005648 <iprintf>
	 	opt5.sStatus = OPT3001_INITIATE;
 8004752:	4b41      	ldr	r3, [pc, #260]	; (8004858 <main+0x2b4>)
 8004754:	2201      	movs	r2, #1
 8004756:	729a      	strb	r2, [r3, #10]
	 	HAL_Delay(20);
 8004758:	2014      	movs	r0, #20
 800475a:	f7fc faf1 	bl	8000d40 <HAL_Delay>
	 }
	 if(opt6.tState == OPT3001_DONE)
 800475e:	4b3f      	ldr	r3, [pc, #252]	; (800485c <main+0x2b8>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b0a      	cmp	r3, #10
 8004764:	d111      	bne.n	800478a <main+0x1e6>
	 {
	 	printf("OPT6:%lf\n", opt6.currentLux);
 8004766:	4b3d      	ldr	r3, [pc, #244]	; (800485c <main+0x2b8>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	4618      	mov	r0, r3
 800476c:	f7fb fef4 	bl	8000558 <__aeabi_f2d>
 8004770:	4603      	mov	r3, r0
 8004772:	460c      	mov	r4, r1
 8004774:	461a      	mov	r2, r3
 8004776:	4623      	mov	r3, r4
 8004778:	4844      	ldr	r0, [pc, #272]	; (800488c <main+0x2e8>)
 800477a:	f000 ff65 	bl	8005648 <iprintf>
	 	opt6.sStatus = OPT3001_INITIATE;
 800477e:	4b37      	ldr	r3, [pc, #220]	; (800485c <main+0x2b8>)
 8004780:	2201      	movs	r2, #1
 8004782:	729a      	strb	r2, [r3, #10]
	 	HAL_Delay(20);
 8004784:	2014      	movs	r0, #20
 8004786:	f7fc fadb 	bl	8000d40 <HAL_Delay>
	 }
	 if(opt7.tState == OPT3001_DONE)
 800478a:	4b36      	ldr	r3, [pc, #216]	; (8004864 <main+0x2c0>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b0a      	cmp	r3, #10
 8004790:	d111      	bne.n	80047b6 <main+0x212>
	 {
	 	printf("OPT7:%lf\n", opt7.currentLux);
 8004792:	4b34      	ldr	r3, [pc, #208]	; (8004864 <main+0x2c0>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fb fede 	bl	8000558 <__aeabi_f2d>
 800479c:	4603      	mov	r3, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	461a      	mov	r2, r3
 80047a2:	4623      	mov	r3, r4
 80047a4:	483a      	ldr	r0, [pc, #232]	; (8004890 <main+0x2ec>)
 80047a6:	f000 ff4f 	bl	8005648 <iprintf>
	 	opt7.sStatus = OPT3001_INITIATE;
 80047aa:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <main+0x2c0>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	729a      	strb	r2, [r3, #10]
	 	HAL_Delay(20);
 80047b0:	2014      	movs	r0, #20
 80047b2:	f7fc fac5 	bl	8000d40 <HAL_Delay>
	 }
	 if(opt8.tState == OPT3001_DONE)
 80047b6:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <main+0x2c4>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b0a      	cmp	r3, #10
 80047bc:	d111      	bne.n	80047e2 <main+0x23e>
	 {
	 	printf("OPT8:%lf\n", opt8.currentLux);
 80047be:	4b2a      	ldr	r3, [pc, #168]	; (8004868 <main+0x2c4>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fb fec8 	bl	8000558 <__aeabi_f2d>
 80047c8:	4603      	mov	r3, r0
 80047ca:	460c      	mov	r4, r1
 80047cc:	461a      	mov	r2, r3
 80047ce:	4623      	mov	r3, r4
 80047d0:	4830      	ldr	r0, [pc, #192]	; (8004894 <main+0x2f0>)
 80047d2:	f000 ff39 	bl	8005648 <iprintf>
	 	opt8.sStatus = OPT3001_INITIATE;
 80047d6:	4b24      	ldr	r3, [pc, #144]	; (8004868 <main+0x2c4>)
 80047d8:	2201      	movs	r2, #1
 80047da:	729a      	strb	r2, [r3, #10]
	 	HAL_Delay(20);
 80047dc:	2014      	movs	r0, #20
 80047de:	f7fc faaf 	bl	8000d40 <HAL_Delay>
	 }
	 if(opt9.tState == OPT3001_DONE)
 80047e2:	4b22      	ldr	r3, [pc, #136]	; (800486c <main+0x2c8>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b0a      	cmp	r3, #10
 80047e8:	d111      	bne.n	800480e <main+0x26a>
	 {
	 	printf("OPT9:%lf\n", opt9.currentLux);
 80047ea:	4b20      	ldr	r3, [pc, #128]	; (800486c <main+0x2c8>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fb feb2 	bl	8000558 <__aeabi_f2d>
 80047f4:	4603      	mov	r3, r0
 80047f6:	460c      	mov	r4, r1
 80047f8:	461a      	mov	r2, r3
 80047fa:	4623      	mov	r3, r4
 80047fc:	4826      	ldr	r0, [pc, #152]	; (8004898 <main+0x2f4>)
 80047fe:	f000 ff23 	bl	8005648 <iprintf>
	 	opt9.sStatus = OPT3001_INITIATE;
 8004802:	4b1a      	ldr	r3, [pc, #104]	; (800486c <main+0x2c8>)
 8004804:	2201      	movs	r2, #1
 8004806:	729a      	strb	r2, [r3, #10]
	 	HAL_Delay(20);
 8004808:	2014      	movs	r0, #20
 800480a:	f7fc fa99 	bl	8000d40 <HAL_Delay>
	 }
	 if(opt10.tState == OPT3001_DONE)
 800480e:	4b18      	ldr	r3, [pc, #96]	; (8004870 <main+0x2cc>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b0a      	cmp	r3, #10
 8004814:	f47f af12 	bne.w	800463c <main+0x98>
	 {
	 	printf("OPT10:%lf\n", opt10.currentLux);
 8004818:	4b15      	ldr	r3, [pc, #84]	; (8004870 <main+0x2cc>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4618      	mov	r0, r3
 800481e:	f7fb fe9b 	bl	8000558 <__aeabi_f2d>
 8004822:	4603      	mov	r3, r0
 8004824:	460c      	mov	r4, r1
 8004826:	461a      	mov	r2, r3
 8004828:	4623      	mov	r3, r4
 800482a:	481c      	ldr	r0, [pc, #112]	; (800489c <main+0x2f8>)
 800482c:	f000 ff0c 	bl	8005648 <iprintf>
	 	opt10.sStatus = OPT3001_INITIATE;
 8004830:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <main+0x2cc>)
 8004832:	2201      	movs	r2, #1
 8004834:	729a      	strb	r2, [r3, #10]
	 	HAL_Delay(20);
 8004836:	2014      	movs	r0, #20
 8004838:	f7fc fa82 	bl	8000d40 <HAL_Delay>
	 OPT3001_StateMachine(&opt1);
 800483c:	e6fe      	b.n	800463c <main+0x98>
 800483e:	bf00      	nop
 8004840:	200002a8 	.word	0x200002a8
 8004844:	20000304 	.word	0x20000304
 8004848:	20000344 	.word	0x20000344
 800484c:	20000314 	.word	0x20000314
 8004850:	20000354 	.word	0x20000354
 8004854:	2000025c 	.word	0x2000025c
 8004858:	200002f4 	.word	0x200002f4
 800485c:	20000324 	.word	0x20000324
 8004860:	20000210 	.word	0x20000210
 8004864:	20000334 	.word	0x20000334
 8004868:	20000384 	.word	0x20000384
 800486c:	20000374 	.word	0x20000374
 8004870:	20000364 	.word	0x20000364
 8004874:	080084a8 	.word	0x080084a8
 8004878:	48000800 	.word	0x48000800
 800487c:	080084b4 	.word	0x080084b4
 8004880:	080084c0 	.word	0x080084c0
 8004884:	080084cc 	.word	0x080084cc
 8004888:	080084d8 	.word	0x080084d8
 800488c:	080084e4 	.word	0x080084e4
 8004890:	080084f0 	.word	0x080084f0
 8004894:	080084fc 	.word	0x080084fc
 8004898:	08008508 	.word	0x08008508
 800489c:	08008514 	.word	0x08008514

080048a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b0b0      	sub	sp, #192	; 0xc0
 80048a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80048aa:	2244      	movs	r2, #68	; 0x44
 80048ac:	2100      	movs	r1, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fa66 	bl	8004d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048c4:	463b      	mov	r3, r7
 80048c6:	2268      	movs	r2, #104	; 0x68
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fa58 	bl	8004d80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80048d0:	2310      	movs	r3, #16
 80048d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80048e0:	2360      	movs	r3, #96	; 0x60
 80048e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fd fa2f 	bl	8001d54 <HAL_RCC_OscConfig>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80048fc:	f000 f838 	bl	8004970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004900:	230f      	movs	r3, #15
 8004902:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004904:	2300      	movs	r3, #0
 8004906:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004908:	2300      	movs	r3, #0
 800490a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800490c:	2300      	movs	r3, #0
 800490e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004910:	2300      	movs	r3, #0
 8004912:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004914:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd fe3a 	bl	8002594 <HAL_RCC_ClockConfig>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004926:	f000 f823 	bl	8004970 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800492a:	4b10      	ldr	r3, [pc, #64]	; (800496c <SystemClock_Config+0xcc>)
 800492c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800492e:	2300      	movs	r3, #0
 8004930:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004932:	2300      	movs	r3, #0
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004936:	2300      	movs	r3, #0
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800493a:	2300      	movs	r3, #0
 800493c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800493e:	463b      	mov	r3, r7
 8004940:	4618      	mov	r0, r3
 8004942:	f7fd fff3 	bl	800292c <HAL_RCCEx_PeriphCLKConfig>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800494c:	f000 f810 	bl	8004970 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004950:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004954:	f7fd f9a8 	bl	8001ca8 <HAL_PWREx_ControlVoltageScaling>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800495e:	f000 f807 	bl	8004970 <Error_Handler>
  }
}
 8004962:	bf00      	nop
 8004964:	37c0      	adds	r7, #192	; 0xc0
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	00100141 	.word	0x00100141

08004970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004986:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <HAL_MspInit+0x44>)
 8004988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498a:	4a0e      	ldr	r2, [pc, #56]	; (80049c4 <HAL_MspInit+0x44>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6613      	str	r3, [r2, #96]	; 0x60
 8004992:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <HAL_MspInit+0x44>)
 8004994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	607b      	str	r3, [r7, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_MspInit+0x44>)
 80049a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a2:	4a08      	ldr	r2, [pc, #32]	; (80049c4 <HAL_MspInit+0x44>)
 80049a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a8:	6593      	str	r3, [r2, #88]	; 0x58
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_MspInit+0x44>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000

080049c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049d6:	b480      	push	{r7}
 80049d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049da:	e7fe      	b.n	80049da <HardFault_Handler+0x4>

080049dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049e0:	e7fe      	b.n	80049e0 <MemManage_Handler+0x4>

080049e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049e2:	b480      	push	{r7}
 80049e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049e6:	e7fe      	b.n	80049e6 <BusFault_Handler+0x4>

080049e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049ec:	e7fe      	b.n	80049ec <UsageFault_Handler+0x4>

080049ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049ee:	b480      	push	{r7}
 80049f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049f2:	bf00      	nop
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a1c:	f7fc f970 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a20:	bf00      	nop
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e00a      	b.n	8004a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a36:	f3af 8000 	nop.w
 8004a3a:	4601      	mov	r1, r0
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	60ba      	str	r2, [r7, #8]
 8004a42:	b2ca      	uxtb	r2, r1
 8004a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	dbf0      	blt.n	8004a36 <_read+0x12>
	}

return len;
 8004a54:	687b      	ldr	r3, [r7, #4]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <_close>:
	}
	return len;
}

int _close(int file)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
	return -1;
 8004a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a86:	605a      	str	r2, [r3, #4]
	return 0;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <_isatty>:

int _isatty(int file)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
	return 1;
 8004a9e:	2301      	movs	r3, #1
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
	return 0;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <_sbrk+0x50>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <_sbrk+0x16>
		heap_end = &end;
 8004ad8:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <_sbrk+0x50>)
 8004ada:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <_sbrk+0x54>)
 8004adc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004ade:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <_sbrk+0x50>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <_sbrk+0x50>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4413      	add	r3, r2
 8004aec:	466a      	mov	r2, sp
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d907      	bls.n	8004b02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004af2:	f000 f91b 	bl	8004d2c <__errno>
 8004af6:	4602      	mov	r2, r0
 8004af8:	230c      	movs	r3, #12
 8004afa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004afc:	f04f 33ff 	mov.w	r3, #4294967295
 8004b00:	e006      	b.n	8004b10 <_sbrk+0x48>
	}

	heap_end += incr;
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <_sbrk+0x50>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	4a03      	ldr	r2, [pc, #12]	; (8004b18 <_sbrk+0x50>)
 8004b0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000200 	.word	0x20000200
 8004b1c:	20000398 	.word	0x20000398

08004b20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <SystemInit+0x64>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2a:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <SystemInit+0x64>)
 8004b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004b34:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <SystemInit+0x68>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <SystemInit+0x68>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004b40:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <SystemInit+0x68>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004b46:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <SystemInit+0x68>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a0f      	ldr	r2, [pc, #60]	; (8004b88 <SystemInit+0x68>)
 8004b4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004b50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004b54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004b56:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <SystemInit+0x68>)
 8004b58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004b5e:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <SystemInit+0x68>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <SystemInit+0x68>)
 8004b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <SystemInit+0x68>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b70:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <SystemInit+0x64>)
 8004b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b76:	609a      	str	r2, [r3, #8]
#endif
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	e000ed00 	.word	0xe000ed00
 8004b88:	40021000 	.word	0x40021000

08004b8c <LL_USART_Enable>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f043 0201 	orr.w	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	601a      	str	r2, [r3, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_USART_ConfigAsyncMode>:
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004be4:	4907      	ldr	r1, [pc, #28]	; (8004c04 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40021000 	.word	0x40021000

08004c08 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004c12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c14:	4907      	ldr	r1, [pc, #28]	; (8004c34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004c1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4013      	ands	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c26:	68fb      	ldr	r3, [r7, #12]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40021000 	.word	0x40021000

08004c38 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08e      	sub	sp, #56	; 0x38
 8004c3c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004c3e:	f107 031c 	add.w	r3, r7, #28
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	605a      	str	r2, [r3, #4]
 8004c48:	609a      	str	r2, [r3, #8]
 8004c4a:	60da      	str	r2, [r3, #12]
 8004c4c:	611a      	str	r2, [r3, #16]
 8004c4e:	615a      	str	r2, [r3, #20]
 8004c50:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c52:	1d3b      	adds	r3, r7, #4
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	611a      	str	r2, [r3, #16]
 8004c60:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004c62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004c66:	f7ff ffcf 	bl	8004c08 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	f7ff ffb4 	bl	8004bd8 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8004c70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004c74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c76:	2302      	movs	r3, #2
 8004c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004c86:	2307      	movs	r3, #7
 8004c88:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8a:	1d3b      	adds	r3, r7, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c92:	f7fe faf0 	bl	8003276 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8004c96:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c9a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004ca8:	230c      	movs	r3, #12
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004cac:	2300      	movs	r3, #0
 8004cae:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8004cb4:	f107 031c 	add.w	r3, r7, #28
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4806      	ldr	r0, [pc, #24]	; (8004cd4 <MX_USART1_UART_Init+0x9c>)
 8004cbc:	f7fe ff34 	bl	8003b28 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8004cc0:	4804      	ldr	r0, [pc, #16]	; (8004cd4 <MX_USART1_UART_Init+0x9c>)
 8004cc2:	f7ff ff73 	bl	8004bac <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8004cc6:	4803      	ldr	r0, [pc, #12]	; (8004cd4 <MX_USART1_UART_Init+0x9c>)
 8004cc8:	f7ff ff60 	bl	8004b8c <LL_USART_Enable>

}
 8004ccc:	bf00      	nop
 8004cce:	3738      	adds	r7, #56	; 0x38
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40013800 	.word	0x40013800

08004cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004cdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004cde:	e003      	b.n	8004ce8 <LoopCopyDataInit>

08004ce0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004ce2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ce4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004ce6:	3104      	adds	r1, #4

08004ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004ce8:	480b      	ldr	r0, [pc, #44]	; (8004d18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004cec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004cee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004cf0:	d3f6      	bcc.n	8004ce0 <CopyDataInit>
	ldr	r2, =_sbss
 8004cf2:	4a0b      	ldr	r2, [pc, #44]	; (8004d20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004cf4:	e002      	b.n	8004cfc <LoopFillZerobss>

08004cf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004cf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004cf8:	f842 3b04 	str.w	r3, [r2], #4

08004cfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <LoopForever+0x16>)
	cmp	r2, r3
 8004cfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004d00:	d3f9      	bcc.n	8004cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d02:	f7ff ff0d 	bl	8004b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d06:	f000 f817 	bl	8004d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004d0a:	f7ff fc4b 	bl	80045a4 <main>

08004d0e <LoopForever>:

LoopForever:
    b LoopForever
 8004d0e:	e7fe      	b.n	8004d0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004d10:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8004d14:	08008878 	.word	0x08008878
	ldr	r0, =_sdata
 8004d18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004d1c:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8004d20:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8004d24:	20000398 	.word	0x20000398

08004d28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d28:	e7fe      	b.n	8004d28 <ADC1_IRQHandler>
	...

08004d2c <__errno>:
 8004d2c:	4b01      	ldr	r3, [pc, #4]	; (8004d34 <__errno+0x8>)
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000010 	.word	0x20000010

08004d38 <__libc_init_array>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	4e0d      	ldr	r6, [pc, #52]	; (8004d70 <__libc_init_array+0x38>)
 8004d3c:	4c0d      	ldr	r4, [pc, #52]	; (8004d74 <__libc_init_array+0x3c>)
 8004d3e:	1ba4      	subs	r4, r4, r6
 8004d40:	10a4      	asrs	r4, r4, #2
 8004d42:	2500      	movs	r5, #0
 8004d44:	42a5      	cmp	r5, r4
 8004d46:	d109      	bne.n	8004d5c <__libc_init_array+0x24>
 8004d48:	4e0b      	ldr	r6, [pc, #44]	; (8004d78 <__libc_init_array+0x40>)
 8004d4a:	4c0c      	ldr	r4, [pc, #48]	; (8004d7c <__libc_init_array+0x44>)
 8004d4c:	f003 fb9e 	bl	800848c <_init>
 8004d50:	1ba4      	subs	r4, r4, r6
 8004d52:	10a4      	asrs	r4, r4, #2
 8004d54:	2500      	movs	r5, #0
 8004d56:	42a5      	cmp	r5, r4
 8004d58:	d105      	bne.n	8004d66 <__libc_init_array+0x2e>
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}
 8004d5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d60:	4798      	blx	r3
 8004d62:	3501      	adds	r5, #1
 8004d64:	e7ee      	b.n	8004d44 <__libc_init_array+0xc>
 8004d66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d6a:	4798      	blx	r3
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	e7f2      	b.n	8004d56 <__libc_init_array+0x1e>
 8004d70:	08008870 	.word	0x08008870
 8004d74:	08008870 	.word	0x08008870
 8004d78:	08008870 	.word	0x08008870
 8004d7c:	08008874 	.word	0x08008874

08004d80 <memset>:
 8004d80:	4402      	add	r2, r0
 8004d82:	4603      	mov	r3, r0
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d100      	bne.n	8004d8a <memset+0xa>
 8004d88:	4770      	bx	lr
 8004d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d8e:	e7f9      	b.n	8004d84 <memset+0x4>

08004d90 <__cvt>:
 8004d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	ec55 4b10 	vmov	r4, r5, d0
 8004d98:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004d9a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d9e:	2d00      	cmp	r5, #0
 8004da0:	460e      	mov	r6, r1
 8004da2:	4691      	mov	r9, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	bfb8      	it	lt
 8004da8:	4622      	movlt	r2, r4
 8004daa:	462b      	mov	r3, r5
 8004dac:	f027 0720 	bic.w	r7, r7, #32
 8004db0:	bfbb      	ittet	lt
 8004db2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004db6:	461d      	movlt	r5, r3
 8004db8:	2300      	movge	r3, #0
 8004dba:	232d      	movlt	r3, #45	; 0x2d
 8004dbc:	bfb8      	it	lt
 8004dbe:	4614      	movlt	r4, r2
 8004dc0:	2f46      	cmp	r7, #70	; 0x46
 8004dc2:	700b      	strb	r3, [r1, #0]
 8004dc4:	d004      	beq.n	8004dd0 <__cvt+0x40>
 8004dc6:	2f45      	cmp	r7, #69	; 0x45
 8004dc8:	d100      	bne.n	8004dcc <__cvt+0x3c>
 8004dca:	3601      	adds	r6, #1
 8004dcc:	2102      	movs	r1, #2
 8004dce:	e000      	b.n	8004dd2 <__cvt+0x42>
 8004dd0:	2103      	movs	r1, #3
 8004dd2:	ab03      	add	r3, sp, #12
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	ab02      	add	r3, sp, #8
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	4632      	mov	r2, r6
 8004ddc:	4653      	mov	r3, sl
 8004dde:	ec45 4b10 	vmov	d0, r4, r5
 8004de2:	f000 fd95 	bl	8005910 <_dtoa_r>
 8004de6:	2f47      	cmp	r7, #71	; 0x47
 8004de8:	4680      	mov	r8, r0
 8004dea:	d102      	bne.n	8004df2 <__cvt+0x62>
 8004dec:	f019 0f01 	tst.w	r9, #1
 8004df0:	d026      	beq.n	8004e40 <__cvt+0xb0>
 8004df2:	2f46      	cmp	r7, #70	; 0x46
 8004df4:	eb08 0906 	add.w	r9, r8, r6
 8004df8:	d111      	bne.n	8004e1e <__cvt+0x8e>
 8004dfa:	f898 3000 	ldrb.w	r3, [r8]
 8004dfe:	2b30      	cmp	r3, #48	; 0x30
 8004e00:	d10a      	bne.n	8004e18 <__cvt+0x88>
 8004e02:	2200      	movs	r2, #0
 8004e04:	2300      	movs	r3, #0
 8004e06:	4620      	mov	r0, r4
 8004e08:	4629      	mov	r1, r5
 8004e0a:	f7fb fe65 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e0e:	b918      	cbnz	r0, 8004e18 <__cvt+0x88>
 8004e10:	f1c6 0601 	rsb	r6, r6, #1
 8004e14:	f8ca 6000 	str.w	r6, [sl]
 8004e18:	f8da 3000 	ldr.w	r3, [sl]
 8004e1c:	4499      	add	r9, r3
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2300      	movs	r3, #0
 8004e22:	4620      	mov	r0, r4
 8004e24:	4629      	mov	r1, r5
 8004e26:	f7fb fe57 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e2a:	b938      	cbnz	r0, 8004e3c <__cvt+0xac>
 8004e2c:	2230      	movs	r2, #48	; 0x30
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	454b      	cmp	r3, r9
 8004e32:	d205      	bcs.n	8004e40 <__cvt+0xb0>
 8004e34:	1c59      	adds	r1, r3, #1
 8004e36:	9103      	str	r1, [sp, #12]
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e7f8      	b.n	8004e2e <__cvt+0x9e>
 8004e3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e40:	9b03      	ldr	r3, [sp, #12]
 8004e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e44:	eba3 0308 	sub.w	r3, r3, r8
 8004e48:	4640      	mov	r0, r8
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	b004      	add	sp, #16
 8004e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004e52 <__exponent>:
 8004e52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e54:	2900      	cmp	r1, #0
 8004e56:	4604      	mov	r4, r0
 8004e58:	bfba      	itte	lt
 8004e5a:	4249      	neglt	r1, r1
 8004e5c:	232d      	movlt	r3, #45	; 0x2d
 8004e5e:	232b      	movge	r3, #43	; 0x2b
 8004e60:	2909      	cmp	r1, #9
 8004e62:	f804 2b02 	strb.w	r2, [r4], #2
 8004e66:	7043      	strb	r3, [r0, #1]
 8004e68:	dd20      	ble.n	8004eac <__exponent+0x5a>
 8004e6a:	f10d 0307 	add.w	r3, sp, #7
 8004e6e:	461f      	mov	r7, r3
 8004e70:	260a      	movs	r6, #10
 8004e72:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e76:	fb06 1115 	mls	r1, r6, r5, r1
 8004e7a:	3130      	adds	r1, #48	; 0x30
 8004e7c:	2d09      	cmp	r5, #9
 8004e7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e82:	f103 32ff 	add.w	r2, r3, #4294967295
 8004e86:	4629      	mov	r1, r5
 8004e88:	dc09      	bgt.n	8004e9e <__exponent+0x4c>
 8004e8a:	3130      	adds	r1, #48	; 0x30
 8004e8c:	3b02      	subs	r3, #2
 8004e8e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e92:	42bb      	cmp	r3, r7
 8004e94:	4622      	mov	r2, r4
 8004e96:	d304      	bcc.n	8004ea2 <__exponent+0x50>
 8004e98:	1a10      	subs	r0, r2, r0
 8004e9a:	b003      	add	sp, #12
 8004e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	e7e7      	b.n	8004e72 <__exponent+0x20>
 8004ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ea6:	f804 2b01 	strb.w	r2, [r4], #1
 8004eaa:	e7f2      	b.n	8004e92 <__exponent+0x40>
 8004eac:	2330      	movs	r3, #48	; 0x30
 8004eae:	4419      	add	r1, r3
 8004eb0:	7083      	strb	r3, [r0, #2]
 8004eb2:	1d02      	adds	r2, r0, #4
 8004eb4:	70c1      	strb	r1, [r0, #3]
 8004eb6:	e7ef      	b.n	8004e98 <__exponent+0x46>

08004eb8 <_printf_float>:
 8004eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebc:	b08d      	sub	sp, #52	; 0x34
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004ec4:	4616      	mov	r6, r2
 8004ec6:	461f      	mov	r7, r3
 8004ec8:	4605      	mov	r5, r0
 8004eca:	f001 fc53 	bl	8006774 <_localeconv_r>
 8004ece:	6803      	ldr	r3, [r0, #0]
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fb f984 	bl	80001e0 <strlen>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	930a      	str	r3, [sp, #40]	; 0x28
 8004edc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee0:	9005      	str	r0, [sp, #20]
 8004ee2:	3307      	adds	r3, #7
 8004ee4:	f023 0307 	bic.w	r3, r3, #7
 8004ee8:	f103 0208 	add.w	r2, r3, #8
 8004eec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ef0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ef4:	f8c8 2000 	str.w	r2, [r8]
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f00:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004f04:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f08:	9307      	str	r3, [sp, #28]
 8004f0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f12:	4ba7      	ldr	r3, [pc, #668]	; (80051b0 <_printf_float+0x2f8>)
 8004f14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f18:	f7fb fe10 	bl	8000b3c <__aeabi_dcmpun>
 8004f1c:	bb70      	cbnz	r0, 8004f7c <_printf_float+0xc4>
 8004f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f22:	4ba3      	ldr	r3, [pc, #652]	; (80051b0 <_printf_float+0x2f8>)
 8004f24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f28:	f7fb fdea 	bl	8000b00 <__aeabi_dcmple>
 8004f2c:	bb30      	cbnz	r0, 8004f7c <_printf_float+0xc4>
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2300      	movs	r3, #0
 8004f32:	4640      	mov	r0, r8
 8004f34:	4649      	mov	r1, r9
 8004f36:	f7fb fdd9 	bl	8000aec <__aeabi_dcmplt>
 8004f3a:	b110      	cbz	r0, 8004f42 <_printf_float+0x8a>
 8004f3c:	232d      	movs	r3, #45	; 0x2d
 8004f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f42:	4a9c      	ldr	r2, [pc, #624]	; (80051b4 <_printf_float+0x2fc>)
 8004f44:	4b9c      	ldr	r3, [pc, #624]	; (80051b8 <_printf_float+0x300>)
 8004f46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004f4a:	bf8c      	ite	hi
 8004f4c:	4690      	movhi	r8, r2
 8004f4e:	4698      	movls	r8, r3
 8004f50:	2303      	movs	r3, #3
 8004f52:	f02b 0204 	bic.w	r2, fp, #4
 8004f56:	6123      	str	r3, [r4, #16]
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	f04f 0900 	mov.w	r9, #0
 8004f5e:	9700      	str	r7, [sp, #0]
 8004f60:	4633      	mov	r3, r6
 8004f62:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f64:	4621      	mov	r1, r4
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 f9e6 	bl	8005338 <_printf_common>
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	f040 808d 	bne.w	800508c <_printf_float+0x1d4>
 8004f72:	f04f 30ff 	mov.w	r0, #4294967295
 8004f76:	b00d      	add	sp, #52	; 0x34
 8004f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	464b      	mov	r3, r9
 8004f80:	4640      	mov	r0, r8
 8004f82:	4649      	mov	r1, r9
 8004f84:	f7fb fdda 	bl	8000b3c <__aeabi_dcmpun>
 8004f88:	b110      	cbz	r0, 8004f90 <_printf_float+0xd8>
 8004f8a:	4a8c      	ldr	r2, [pc, #560]	; (80051bc <_printf_float+0x304>)
 8004f8c:	4b8c      	ldr	r3, [pc, #560]	; (80051c0 <_printf_float+0x308>)
 8004f8e:	e7da      	b.n	8004f46 <_printf_float+0x8e>
 8004f90:	6861      	ldr	r1, [r4, #4]
 8004f92:	1c4b      	adds	r3, r1, #1
 8004f94:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004f98:	a80a      	add	r0, sp, #40	; 0x28
 8004f9a:	d13e      	bne.n	800501a <_printf_float+0x162>
 8004f9c:	2306      	movs	r3, #6
 8004f9e:	6063      	str	r3, [r4, #4]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004fa6:	ab09      	add	r3, sp, #36	; 0x24
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	ec49 8b10 	vmov	d0, r8, r9
 8004fae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fb2:	6022      	str	r2, [r4, #0]
 8004fb4:	f8cd a004 	str.w	sl, [sp, #4]
 8004fb8:	6861      	ldr	r1, [r4, #4]
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f7ff fee8 	bl	8004d90 <__cvt>
 8004fc0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004fc4:	2b47      	cmp	r3, #71	; 0x47
 8004fc6:	4680      	mov	r8, r0
 8004fc8:	d109      	bne.n	8004fde <_printf_float+0x126>
 8004fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fcc:	1cd8      	adds	r0, r3, #3
 8004fce:	db02      	blt.n	8004fd6 <_printf_float+0x11e>
 8004fd0:	6862      	ldr	r2, [r4, #4]
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	dd47      	ble.n	8005066 <_printf_float+0x1ae>
 8004fd6:	f1aa 0a02 	sub.w	sl, sl, #2
 8004fda:	fa5f fa8a 	uxtb.w	sl, sl
 8004fde:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004fe2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fe4:	d824      	bhi.n	8005030 <_printf_float+0x178>
 8004fe6:	3901      	subs	r1, #1
 8004fe8:	4652      	mov	r2, sl
 8004fea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fee:	9109      	str	r1, [sp, #36]	; 0x24
 8004ff0:	f7ff ff2f 	bl	8004e52 <__exponent>
 8004ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ff6:	1813      	adds	r3, r2, r0
 8004ff8:	2a01      	cmp	r2, #1
 8004ffa:	4681      	mov	r9, r0
 8004ffc:	6123      	str	r3, [r4, #16]
 8004ffe:	dc02      	bgt.n	8005006 <_printf_float+0x14e>
 8005000:	6822      	ldr	r2, [r4, #0]
 8005002:	07d1      	lsls	r1, r2, #31
 8005004:	d501      	bpl.n	800500a <_printf_float+0x152>
 8005006:	3301      	adds	r3, #1
 8005008:	6123      	str	r3, [r4, #16]
 800500a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0a5      	beq.n	8004f5e <_printf_float+0xa6>
 8005012:	232d      	movs	r3, #45	; 0x2d
 8005014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005018:	e7a1      	b.n	8004f5e <_printf_float+0xa6>
 800501a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800501e:	f000 8177 	beq.w	8005310 <_printf_float+0x458>
 8005022:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005026:	d1bb      	bne.n	8004fa0 <_printf_float+0xe8>
 8005028:	2900      	cmp	r1, #0
 800502a:	d1b9      	bne.n	8004fa0 <_printf_float+0xe8>
 800502c:	2301      	movs	r3, #1
 800502e:	e7b6      	b.n	8004f9e <_printf_float+0xe6>
 8005030:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005034:	d119      	bne.n	800506a <_printf_float+0x1b2>
 8005036:	2900      	cmp	r1, #0
 8005038:	6863      	ldr	r3, [r4, #4]
 800503a:	dd0c      	ble.n	8005056 <_printf_float+0x19e>
 800503c:	6121      	str	r1, [r4, #16]
 800503e:	b913      	cbnz	r3, 8005046 <_printf_float+0x18e>
 8005040:	6822      	ldr	r2, [r4, #0]
 8005042:	07d2      	lsls	r2, r2, #31
 8005044:	d502      	bpl.n	800504c <_printf_float+0x194>
 8005046:	3301      	adds	r3, #1
 8005048:	440b      	add	r3, r1
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005050:	f04f 0900 	mov.w	r9, #0
 8005054:	e7d9      	b.n	800500a <_printf_float+0x152>
 8005056:	b913      	cbnz	r3, 800505e <_printf_float+0x1a6>
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	07d0      	lsls	r0, r2, #31
 800505c:	d501      	bpl.n	8005062 <_printf_float+0x1aa>
 800505e:	3302      	adds	r3, #2
 8005060:	e7f3      	b.n	800504a <_printf_float+0x192>
 8005062:	2301      	movs	r3, #1
 8005064:	e7f1      	b.n	800504a <_printf_float+0x192>
 8005066:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800506a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800506e:	4293      	cmp	r3, r2
 8005070:	db05      	blt.n	800507e <_printf_float+0x1c6>
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	6123      	str	r3, [r4, #16]
 8005076:	07d1      	lsls	r1, r2, #31
 8005078:	d5e8      	bpl.n	800504c <_printf_float+0x194>
 800507a:	3301      	adds	r3, #1
 800507c:	e7e5      	b.n	800504a <_printf_float+0x192>
 800507e:	2b00      	cmp	r3, #0
 8005080:	bfd4      	ite	le
 8005082:	f1c3 0302 	rsble	r3, r3, #2
 8005086:	2301      	movgt	r3, #1
 8005088:	4413      	add	r3, r2
 800508a:	e7de      	b.n	800504a <_printf_float+0x192>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	055a      	lsls	r2, r3, #21
 8005090:	d407      	bmi.n	80050a2 <_printf_float+0x1ea>
 8005092:	6923      	ldr	r3, [r4, #16]
 8005094:	4642      	mov	r2, r8
 8005096:	4631      	mov	r1, r6
 8005098:	4628      	mov	r0, r5
 800509a:	47b8      	blx	r7
 800509c:	3001      	adds	r0, #1
 800509e:	d12b      	bne.n	80050f8 <_printf_float+0x240>
 80050a0:	e767      	b.n	8004f72 <_printf_float+0xba>
 80050a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80050a6:	f240 80dc 	bls.w	8005262 <_printf_float+0x3aa>
 80050aa:	2200      	movs	r2, #0
 80050ac:	2300      	movs	r3, #0
 80050ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050b2:	f7fb fd11 	bl	8000ad8 <__aeabi_dcmpeq>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d033      	beq.n	8005122 <_printf_float+0x26a>
 80050ba:	2301      	movs	r3, #1
 80050bc:	4a41      	ldr	r2, [pc, #260]	; (80051c4 <_printf_float+0x30c>)
 80050be:	4631      	mov	r1, r6
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	f43f af54 	beq.w	8004f72 <_printf_float+0xba>
 80050ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050ce:	429a      	cmp	r2, r3
 80050d0:	db02      	blt.n	80050d8 <_printf_float+0x220>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	07d8      	lsls	r0, r3, #31
 80050d6:	d50f      	bpl.n	80050f8 <_printf_float+0x240>
 80050d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	f43f af45 	beq.w	8004f72 <_printf_float+0xba>
 80050e8:	f04f 0800 	mov.w	r8, #0
 80050ec:	f104 091a 	add.w	r9, r4, #26
 80050f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050f2:	3b01      	subs	r3, #1
 80050f4:	4543      	cmp	r3, r8
 80050f6:	dc09      	bgt.n	800510c <_printf_float+0x254>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	079b      	lsls	r3, r3, #30
 80050fc:	f100 8103 	bmi.w	8005306 <_printf_float+0x44e>
 8005100:	68e0      	ldr	r0, [r4, #12]
 8005102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005104:	4298      	cmp	r0, r3
 8005106:	bfb8      	it	lt
 8005108:	4618      	movlt	r0, r3
 800510a:	e734      	b.n	8004f76 <_printf_float+0xbe>
 800510c:	2301      	movs	r3, #1
 800510e:	464a      	mov	r2, r9
 8005110:	4631      	mov	r1, r6
 8005112:	4628      	mov	r0, r5
 8005114:	47b8      	blx	r7
 8005116:	3001      	adds	r0, #1
 8005118:	f43f af2b 	beq.w	8004f72 <_printf_float+0xba>
 800511c:	f108 0801 	add.w	r8, r8, #1
 8005120:	e7e6      	b.n	80050f0 <_printf_float+0x238>
 8005122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	dc2b      	bgt.n	8005180 <_printf_float+0x2c8>
 8005128:	2301      	movs	r3, #1
 800512a:	4a26      	ldr	r2, [pc, #152]	; (80051c4 <_printf_float+0x30c>)
 800512c:	4631      	mov	r1, r6
 800512e:	4628      	mov	r0, r5
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	f43f af1d 	beq.w	8004f72 <_printf_float+0xba>
 8005138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800513a:	b923      	cbnz	r3, 8005146 <_printf_float+0x28e>
 800513c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800513e:	b913      	cbnz	r3, 8005146 <_printf_float+0x28e>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	07d9      	lsls	r1, r3, #31
 8005144:	d5d8      	bpl.n	80050f8 <_printf_float+0x240>
 8005146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800514a:	4631      	mov	r1, r6
 800514c:	4628      	mov	r0, r5
 800514e:	47b8      	blx	r7
 8005150:	3001      	adds	r0, #1
 8005152:	f43f af0e 	beq.w	8004f72 <_printf_float+0xba>
 8005156:	f04f 0900 	mov.w	r9, #0
 800515a:	f104 0a1a 	add.w	sl, r4, #26
 800515e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005160:	425b      	negs	r3, r3
 8005162:	454b      	cmp	r3, r9
 8005164:	dc01      	bgt.n	800516a <_printf_float+0x2b2>
 8005166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005168:	e794      	b.n	8005094 <_printf_float+0x1dc>
 800516a:	2301      	movs	r3, #1
 800516c:	4652      	mov	r2, sl
 800516e:	4631      	mov	r1, r6
 8005170:	4628      	mov	r0, r5
 8005172:	47b8      	blx	r7
 8005174:	3001      	adds	r0, #1
 8005176:	f43f aefc 	beq.w	8004f72 <_printf_float+0xba>
 800517a:	f109 0901 	add.w	r9, r9, #1
 800517e:	e7ee      	b.n	800515e <_printf_float+0x2a6>
 8005180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005184:	429a      	cmp	r2, r3
 8005186:	bfa8      	it	ge
 8005188:	461a      	movge	r2, r3
 800518a:	2a00      	cmp	r2, #0
 800518c:	4691      	mov	r9, r2
 800518e:	dd07      	ble.n	80051a0 <_printf_float+0x2e8>
 8005190:	4613      	mov	r3, r2
 8005192:	4631      	mov	r1, r6
 8005194:	4642      	mov	r2, r8
 8005196:	4628      	mov	r0, r5
 8005198:	47b8      	blx	r7
 800519a:	3001      	adds	r0, #1
 800519c:	f43f aee9 	beq.w	8004f72 <_printf_float+0xba>
 80051a0:	f104 031a 	add.w	r3, r4, #26
 80051a4:	f04f 0b00 	mov.w	fp, #0
 80051a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ac:	9306      	str	r3, [sp, #24]
 80051ae:	e015      	b.n	80051dc <_printf_float+0x324>
 80051b0:	7fefffff 	.word	0x7fefffff
 80051b4:	08008570 	.word	0x08008570
 80051b8:	0800856c 	.word	0x0800856c
 80051bc:	08008578 	.word	0x08008578
 80051c0:	08008574 	.word	0x08008574
 80051c4:	0800857c 	.word	0x0800857c
 80051c8:	2301      	movs	r3, #1
 80051ca:	9a06      	ldr	r2, [sp, #24]
 80051cc:	4631      	mov	r1, r6
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	f43f aecd 	beq.w	8004f72 <_printf_float+0xba>
 80051d8:	f10b 0b01 	add.w	fp, fp, #1
 80051dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80051e0:	ebaa 0309 	sub.w	r3, sl, r9
 80051e4:	455b      	cmp	r3, fp
 80051e6:	dcef      	bgt.n	80051c8 <_printf_float+0x310>
 80051e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ec:	429a      	cmp	r2, r3
 80051ee:	44d0      	add	r8, sl
 80051f0:	db15      	blt.n	800521e <_printf_float+0x366>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	07da      	lsls	r2, r3, #31
 80051f6:	d412      	bmi.n	800521e <_printf_float+0x366>
 80051f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051fc:	eba3 020a 	sub.w	r2, r3, sl
 8005200:	eba3 0a01 	sub.w	sl, r3, r1
 8005204:	4592      	cmp	sl, r2
 8005206:	bfa8      	it	ge
 8005208:	4692      	movge	sl, r2
 800520a:	f1ba 0f00 	cmp.w	sl, #0
 800520e:	dc0e      	bgt.n	800522e <_printf_float+0x376>
 8005210:	f04f 0800 	mov.w	r8, #0
 8005214:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005218:	f104 091a 	add.w	r9, r4, #26
 800521c:	e019      	b.n	8005252 <_printf_float+0x39a>
 800521e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005222:	4631      	mov	r1, r6
 8005224:	4628      	mov	r0, r5
 8005226:	47b8      	blx	r7
 8005228:	3001      	adds	r0, #1
 800522a:	d1e5      	bne.n	80051f8 <_printf_float+0x340>
 800522c:	e6a1      	b.n	8004f72 <_printf_float+0xba>
 800522e:	4653      	mov	r3, sl
 8005230:	4642      	mov	r2, r8
 8005232:	4631      	mov	r1, r6
 8005234:	4628      	mov	r0, r5
 8005236:	47b8      	blx	r7
 8005238:	3001      	adds	r0, #1
 800523a:	d1e9      	bne.n	8005210 <_printf_float+0x358>
 800523c:	e699      	b.n	8004f72 <_printf_float+0xba>
 800523e:	2301      	movs	r3, #1
 8005240:	464a      	mov	r2, r9
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	f43f ae92 	beq.w	8004f72 <_printf_float+0xba>
 800524e:	f108 0801 	add.w	r8, r8, #1
 8005252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	eba3 030a 	sub.w	r3, r3, sl
 800525c:	4543      	cmp	r3, r8
 800525e:	dcee      	bgt.n	800523e <_printf_float+0x386>
 8005260:	e74a      	b.n	80050f8 <_printf_float+0x240>
 8005262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005264:	2a01      	cmp	r2, #1
 8005266:	dc01      	bgt.n	800526c <_printf_float+0x3b4>
 8005268:	07db      	lsls	r3, r3, #31
 800526a:	d53a      	bpl.n	80052e2 <_printf_float+0x42a>
 800526c:	2301      	movs	r3, #1
 800526e:	4642      	mov	r2, r8
 8005270:	4631      	mov	r1, r6
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	f43f ae7b 	beq.w	8004f72 <_printf_float+0xba>
 800527c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f108 0801 	add.w	r8, r8, #1
 800528c:	f43f ae71 	beq.w	8004f72 <_printf_float+0xba>
 8005290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005292:	2200      	movs	r2, #0
 8005294:	f103 3aff 	add.w	sl, r3, #4294967295
 8005298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800529c:	2300      	movs	r3, #0
 800529e:	f7fb fc1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80052a2:	b9c8      	cbnz	r0, 80052d8 <_printf_float+0x420>
 80052a4:	4653      	mov	r3, sl
 80052a6:	4642      	mov	r2, r8
 80052a8:	4631      	mov	r1, r6
 80052aa:	4628      	mov	r0, r5
 80052ac:	47b8      	blx	r7
 80052ae:	3001      	adds	r0, #1
 80052b0:	d10e      	bne.n	80052d0 <_printf_float+0x418>
 80052b2:	e65e      	b.n	8004f72 <_printf_float+0xba>
 80052b4:	2301      	movs	r3, #1
 80052b6:	4652      	mov	r2, sl
 80052b8:	4631      	mov	r1, r6
 80052ba:	4628      	mov	r0, r5
 80052bc:	47b8      	blx	r7
 80052be:	3001      	adds	r0, #1
 80052c0:	f43f ae57 	beq.w	8004f72 <_printf_float+0xba>
 80052c4:	f108 0801 	add.w	r8, r8, #1
 80052c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ca:	3b01      	subs	r3, #1
 80052cc:	4543      	cmp	r3, r8
 80052ce:	dcf1      	bgt.n	80052b4 <_printf_float+0x3fc>
 80052d0:	464b      	mov	r3, r9
 80052d2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052d6:	e6de      	b.n	8005096 <_printf_float+0x1de>
 80052d8:	f04f 0800 	mov.w	r8, #0
 80052dc:	f104 0a1a 	add.w	sl, r4, #26
 80052e0:	e7f2      	b.n	80052c8 <_printf_float+0x410>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e7df      	b.n	80052a6 <_printf_float+0x3ee>
 80052e6:	2301      	movs	r3, #1
 80052e8:	464a      	mov	r2, r9
 80052ea:	4631      	mov	r1, r6
 80052ec:	4628      	mov	r0, r5
 80052ee:	47b8      	blx	r7
 80052f0:	3001      	adds	r0, #1
 80052f2:	f43f ae3e 	beq.w	8004f72 <_printf_float+0xba>
 80052f6:	f108 0801 	add.w	r8, r8, #1
 80052fa:	68e3      	ldr	r3, [r4, #12]
 80052fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	4543      	cmp	r3, r8
 8005302:	dcf0      	bgt.n	80052e6 <_printf_float+0x42e>
 8005304:	e6fc      	b.n	8005100 <_printf_float+0x248>
 8005306:	f04f 0800 	mov.w	r8, #0
 800530a:	f104 0919 	add.w	r9, r4, #25
 800530e:	e7f4      	b.n	80052fa <_printf_float+0x442>
 8005310:	2900      	cmp	r1, #0
 8005312:	f43f ae8b 	beq.w	800502c <_printf_float+0x174>
 8005316:	2300      	movs	r3, #0
 8005318:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800531c:	ab09      	add	r3, sp, #36	; 0x24
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	ec49 8b10 	vmov	d0, r8, r9
 8005324:	6022      	str	r2, [r4, #0]
 8005326:	f8cd a004 	str.w	sl, [sp, #4]
 800532a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800532e:	4628      	mov	r0, r5
 8005330:	f7ff fd2e 	bl	8004d90 <__cvt>
 8005334:	4680      	mov	r8, r0
 8005336:	e648      	b.n	8004fca <_printf_float+0x112>

08005338 <_printf_common>:
 8005338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800533c:	4691      	mov	r9, r2
 800533e:	461f      	mov	r7, r3
 8005340:	688a      	ldr	r2, [r1, #8]
 8005342:	690b      	ldr	r3, [r1, #16]
 8005344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005348:	4293      	cmp	r3, r2
 800534a:	bfb8      	it	lt
 800534c:	4613      	movlt	r3, r2
 800534e:	f8c9 3000 	str.w	r3, [r9]
 8005352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005356:	4606      	mov	r6, r0
 8005358:	460c      	mov	r4, r1
 800535a:	b112      	cbz	r2, 8005362 <_printf_common+0x2a>
 800535c:	3301      	adds	r3, #1
 800535e:	f8c9 3000 	str.w	r3, [r9]
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	0699      	lsls	r1, r3, #26
 8005366:	bf42      	ittt	mi
 8005368:	f8d9 3000 	ldrmi.w	r3, [r9]
 800536c:	3302      	addmi	r3, #2
 800536e:	f8c9 3000 	strmi.w	r3, [r9]
 8005372:	6825      	ldr	r5, [r4, #0]
 8005374:	f015 0506 	ands.w	r5, r5, #6
 8005378:	d107      	bne.n	800538a <_printf_common+0x52>
 800537a:	f104 0a19 	add.w	sl, r4, #25
 800537e:	68e3      	ldr	r3, [r4, #12]
 8005380:	f8d9 2000 	ldr.w	r2, [r9]
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	42ab      	cmp	r3, r5
 8005388:	dc28      	bgt.n	80053dc <_printf_common+0xa4>
 800538a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	3300      	adds	r3, #0
 8005392:	bf18      	it	ne
 8005394:	2301      	movne	r3, #1
 8005396:	0692      	lsls	r2, r2, #26
 8005398:	d42d      	bmi.n	80053f6 <_printf_common+0xbe>
 800539a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800539e:	4639      	mov	r1, r7
 80053a0:	4630      	mov	r0, r6
 80053a2:	47c0      	blx	r8
 80053a4:	3001      	adds	r0, #1
 80053a6:	d020      	beq.n	80053ea <_printf_common+0xb2>
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	68e5      	ldr	r5, [r4, #12]
 80053ac:	f8d9 2000 	ldr.w	r2, [r9]
 80053b0:	f003 0306 	and.w	r3, r3, #6
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	bf08      	it	eq
 80053b8:	1aad      	subeq	r5, r5, r2
 80053ba:	68a3      	ldr	r3, [r4, #8]
 80053bc:	6922      	ldr	r2, [r4, #16]
 80053be:	bf0c      	ite	eq
 80053c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053c4:	2500      	movne	r5, #0
 80053c6:	4293      	cmp	r3, r2
 80053c8:	bfc4      	itt	gt
 80053ca:	1a9b      	subgt	r3, r3, r2
 80053cc:	18ed      	addgt	r5, r5, r3
 80053ce:	f04f 0900 	mov.w	r9, #0
 80053d2:	341a      	adds	r4, #26
 80053d4:	454d      	cmp	r5, r9
 80053d6:	d11a      	bne.n	800540e <_printf_common+0xd6>
 80053d8:	2000      	movs	r0, #0
 80053da:	e008      	b.n	80053ee <_printf_common+0xb6>
 80053dc:	2301      	movs	r3, #1
 80053de:	4652      	mov	r2, sl
 80053e0:	4639      	mov	r1, r7
 80053e2:	4630      	mov	r0, r6
 80053e4:	47c0      	blx	r8
 80053e6:	3001      	adds	r0, #1
 80053e8:	d103      	bne.n	80053f2 <_printf_common+0xba>
 80053ea:	f04f 30ff 	mov.w	r0, #4294967295
 80053ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f2:	3501      	adds	r5, #1
 80053f4:	e7c3      	b.n	800537e <_printf_common+0x46>
 80053f6:	18e1      	adds	r1, r4, r3
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	2030      	movs	r0, #48	; 0x30
 80053fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005400:	4422      	add	r2, r4
 8005402:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005406:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800540a:	3302      	adds	r3, #2
 800540c:	e7c5      	b.n	800539a <_printf_common+0x62>
 800540e:	2301      	movs	r3, #1
 8005410:	4622      	mov	r2, r4
 8005412:	4639      	mov	r1, r7
 8005414:	4630      	mov	r0, r6
 8005416:	47c0      	blx	r8
 8005418:	3001      	adds	r0, #1
 800541a:	d0e6      	beq.n	80053ea <_printf_common+0xb2>
 800541c:	f109 0901 	add.w	r9, r9, #1
 8005420:	e7d8      	b.n	80053d4 <_printf_common+0x9c>
	...

08005424 <_printf_i>:
 8005424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005428:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800542c:	460c      	mov	r4, r1
 800542e:	7e09      	ldrb	r1, [r1, #24]
 8005430:	b085      	sub	sp, #20
 8005432:	296e      	cmp	r1, #110	; 0x6e
 8005434:	4617      	mov	r7, r2
 8005436:	4606      	mov	r6, r0
 8005438:	4698      	mov	r8, r3
 800543a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800543c:	f000 80b3 	beq.w	80055a6 <_printf_i+0x182>
 8005440:	d822      	bhi.n	8005488 <_printf_i+0x64>
 8005442:	2963      	cmp	r1, #99	; 0x63
 8005444:	d036      	beq.n	80054b4 <_printf_i+0x90>
 8005446:	d80a      	bhi.n	800545e <_printf_i+0x3a>
 8005448:	2900      	cmp	r1, #0
 800544a:	f000 80b9 	beq.w	80055c0 <_printf_i+0x19c>
 800544e:	2958      	cmp	r1, #88	; 0x58
 8005450:	f000 8083 	beq.w	800555a <_printf_i+0x136>
 8005454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005458:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800545c:	e032      	b.n	80054c4 <_printf_i+0xa0>
 800545e:	2964      	cmp	r1, #100	; 0x64
 8005460:	d001      	beq.n	8005466 <_printf_i+0x42>
 8005462:	2969      	cmp	r1, #105	; 0x69
 8005464:	d1f6      	bne.n	8005454 <_printf_i+0x30>
 8005466:	6820      	ldr	r0, [r4, #0]
 8005468:	6813      	ldr	r3, [r2, #0]
 800546a:	0605      	lsls	r5, r0, #24
 800546c:	f103 0104 	add.w	r1, r3, #4
 8005470:	d52a      	bpl.n	80054c8 <_printf_i+0xa4>
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6011      	str	r1, [r2, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	da03      	bge.n	8005482 <_printf_i+0x5e>
 800547a:	222d      	movs	r2, #45	; 0x2d
 800547c:	425b      	negs	r3, r3
 800547e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005482:	486f      	ldr	r0, [pc, #444]	; (8005640 <_printf_i+0x21c>)
 8005484:	220a      	movs	r2, #10
 8005486:	e039      	b.n	80054fc <_printf_i+0xd8>
 8005488:	2973      	cmp	r1, #115	; 0x73
 800548a:	f000 809d 	beq.w	80055c8 <_printf_i+0x1a4>
 800548e:	d808      	bhi.n	80054a2 <_printf_i+0x7e>
 8005490:	296f      	cmp	r1, #111	; 0x6f
 8005492:	d020      	beq.n	80054d6 <_printf_i+0xb2>
 8005494:	2970      	cmp	r1, #112	; 0x70
 8005496:	d1dd      	bne.n	8005454 <_printf_i+0x30>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	f043 0320 	orr.w	r3, r3, #32
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	e003      	b.n	80054aa <_printf_i+0x86>
 80054a2:	2975      	cmp	r1, #117	; 0x75
 80054a4:	d017      	beq.n	80054d6 <_printf_i+0xb2>
 80054a6:	2978      	cmp	r1, #120	; 0x78
 80054a8:	d1d4      	bne.n	8005454 <_printf_i+0x30>
 80054aa:	2378      	movs	r3, #120	; 0x78
 80054ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054b0:	4864      	ldr	r0, [pc, #400]	; (8005644 <_printf_i+0x220>)
 80054b2:	e055      	b.n	8005560 <_printf_i+0x13c>
 80054b4:	6813      	ldr	r3, [r2, #0]
 80054b6:	1d19      	adds	r1, r3, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6011      	str	r1, [r2, #0]
 80054bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054c4:	2301      	movs	r3, #1
 80054c6:	e08c      	b.n	80055e2 <_printf_i+0x1be>
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6011      	str	r1, [r2, #0]
 80054cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054d0:	bf18      	it	ne
 80054d2:	b21b      	sxthne	r3, r3
 80054d4:	e7cf      	b.n	8005476 <_printf_i+0x52>
 80054d6:	6813      	ldr	r3, [r2, #0]
 80054d8:	6825      	ldr	r5, [r4, #0]
 80054da:	1d18      	adds	r0, r3, #4
 80054dc:	6010      	str	r0, [r2, #0]
 80054de:	0628      	lsls	r0, r5, #24
 80054e0:	d501      	bpl.n	80054e6 <_printf_i+0xc2>
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	e002      	b.n	80054ec <_printf_i+0xc8>
 80054e6:	0668      	lsls	r0, r5, #25
 80054e8:	d5fb      	bpl.n	80054e2 <_printf_i+0xbe>
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	4854      	ldr	r0, [pc, #336]	; (8005640 <_printf_i+0x21c>)
 80054ee:	296f      	cmp	r1, #111	; 0x6f
 80054f0:	bf14      	ite	ne
 80054f2:	220a      	movne	r2, #10
 80054f4:	2208      	moveq	r2, #8
 80054f6:	2100      	movs	r1, #0
 80054f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054fc:	6865      	ldr	r5, [r4, #4]
 80054fe:	60a5      	str	r5, [r4, #8]
 8005500:	2d00      	cmp	r5, #0
 8005502:	f2c0 8095 	blt.w	8005630 <_printf_i+0x20c>
 8005506:	6821      	ldr	r1, [r4, #0]
 8005508:	f021 0104 	bic.w	r1, r1, #4
 800550c:	6021      	str	r1, [r4, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d13d      	bne.n	800558e <_printf_i+0x16a>
 8005512:	2d00      	cmp	r5, #0
 8005514:	f040 808e 	bne.w	8005634 <_printf_i+0x210>
 8005518:	4665      	mov	r5, ip
 800551a:	2a08      	cmp	r2, #8
 800551c:	d10b      	bne.n	8005536 <_printf_i+0x112>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	07db      	lsls	r3, r3, #31
 8005522:	d508      	bpl.n	8005536 <_printf_i+0x112>
 8005524:	6923      	ldr	r3, [r4, #16]
 8005526:	6862      	ldr	r2, [r4, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	bfde      	ittt	le
 800552c:	2330      	movle	r3, #48	; 0x30
 800552e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005532:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005536:	ebac 0305 	sub.w	r3, ip, r5
 800553a:	6123      	str	r3, [r4, #16]
 800553c:	f8cd 8000 	str.w	r8, [sp]
 8005540:	463b      	mov	r3, r7
 8005542:	aa03      	add	r2, sp, #12
 8005544:	4621      	mov	r1, r4
 8005546:	4630      	mov	r0, r6
 8005548:	f7ff fef6 	bl	8005338 <_printf_common>
 800554c:	3001      	adds	r0, #1
 800554e:	d14d      	bne.n	80055ec <_printf_i+0x1c8>
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	b005      	add	sp, #20
 8005556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800555a:	4839      	ldr	r0, [pc, #228]	; (8005640 <_printf_i+0x21c>)
 800555c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005560:	6813      	ldr	r3, [r2, #0]
 8005562:	6821      	ldr	r1, [r4, #0]
 8005564:	1d1d      	adds	r5, r3, #4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6015      	str	r5, [r2, #0]
 800556a:	060a      	lsls	r2, r1, #24
 800556c:	d50b      	bpl.n	8005586 <_printf_i+0x162>
 800556e:	07ca      	lsls	r2, r1, #31
 8005570:	bf44      	itt	mi
 8005572:	f041 0120 	orrmi.w	r1, r1, #32
 8005576:	6021      	strmi	r1, [r4, #0]
 8005578:	b91b      	cbnz	r3, 8005582 <_printf_i+0x15e>
 800557a:	6822      	ldr	r2, [r4, #0]
 800557c:	f022 0220 	bic.w	r2, r2, #32
 8005580:	6022      	str	r2, [r4, #0]
 8005582:	2210      	movs	r2, #16
 8005584:	e7b7      	b.n	80054f6 <_printf_i+0xd2>
 8005586:	064d      	lsls	r5, r1, #25
 8005588:	bf48      	it	mi
 800558a:	b29b      	uxthmi	r3, r3
 800558c:	e7ef      	b.n	800556e <_printf_i+0x14a>
 800558e:	4665      	mov	r5, ip
 8005590:	fbb3 f1f2 	udiv	r1, r3, r2
 8005594:	fb02 3311 	mls	r3, r2, r1, r3
 8005598:	5cc3      	ldrb	r3, [r0, r3]
 800559a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800559e:	460b      	mov	r3, r1
 80055a0:	2900      	cmp	r1, #0
 80055a2:	d1f5      	bne.n	8005590 <_printf_i+0x16c>
 80055a4:	e7b9      	b.n	800551a <_printf_i+0xf6>
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	6825      	ldr	r5, [r4, #0]
 80055aa:	6961      	ldr	r1, [r4, #20]
 80055ac:	1d18      	adds	r0, r3, #4
 80055ae:	6010      	str	r0, [r2, #0]
 80055b0:	0628      	lsls	r0, r5, #24
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	d501      	bpl.n	80055ba <_printf_i+0x196>
 80055b6:	6019      	str	r1, [r3, #0]
 80055b8:	e002      	b.n	80055c0 <_printf_i+0x19c>
 80055ba:	066a      	lsls	r2, r5, #25
 80055bc:	d5fb      	bpl.n	80055b6 <_printf_i+0x192>
 80055be:	8019      	strh	r1, [r3, #0]
 80055c0:	2300      	movs	r3, #0
 80055c2:	6123      	str	r3, [r4, #16]
 80055c4:	4665      	mov	r5, ip
 80055c6:	e7b9      	b.n	800553c <_printf_i+0x118>
 80055c8:	6813      	ldr	r3, [r2, #0]
 80055ca:	1d19      	adds	r1, r3, #4
 80055cc:	6011      	str	r1, [r2, #0]
 80055ce:	681d      	ldr	r5, [r3, #0]
 80055d0:	6862      	ldr	r2, [r4, #4]
 80055d2:	2100      	movs	r1, #0
 80055d4:	4628      	mov	r0, r5
 80055d6:	f7fa fe0b 	bl	80001f0 <memchr>
 80055da:	b108      	cbz	r0, 80055e0 <_printf_i+0x1bc>
 80055dc:	1b40      	subs	r0, r0, r5
 80055de:	6060      	str	r0, [r4, #4]
 80055e0:	6863      	ldr	r3, [r4, #4]
 80055e2:	6123      	str	r3, [r4, #16]
 80055e4:	2300      	movs	r3, #0
 80055e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ea:	e7a7      	b.n	800553c <_printf_i+0x118>
 80055ec:	6923      	ldr	r3, [r4, #16]
 80055ee:	462a      	mov	r2, r5
 80055f0:	4639      	mov	r1, r7
 80055f2:	4630      	mov	r0, r6
 80055f4:	47c0      	blx	r8
 80055f6:	3001      	adds	r0, #1
 80055f8:	d0aa      	beq.n	8005550 <_printf_i+0x12c>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	079b      	lsls	r3, r3, #30
 80055fe:	d413      	bmi.n	8005628 <_printf_i+0x204>
 8005600:	68e0      	ldr	r0, [r4, #12]
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	4298      	cmp	r0, r3
 8005606:	bfb8      	it	lt
 8005608:	4618      	movlt	r0, r3
 800560a:	e7a3      	b.n	8005554 <_printf_i+0x130>
 800560c:	2301      	movs	r3, #1
 800560e:	464a      	mov	r2, r9
 8005610:	4639      	mov	r1, r7
 8005612:	4630      	mov	r0, r6
 8005614:	47c0      	blx	r8
 8005616:	3001      	adds	r0, #1
 8005618:	d09a      	beq.n	8005550 <_printf_i+0x12c>
 800561a:	3501      	adds	r5, #1
 800561c:	68e3      	ldr	r3, [r4, #12]
 800561e:	9a03      	ldr	r2, [sp, #12]
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	42ab      	cmp	r3, r5
 8005624:	dcf2      	bgt.n	800560c <_printf_i+0x1e8>
 8005626:	e7eb      	b.n	8005600 <_printf_i+0x1dc>
 8005628:	2500      	movs	r5, #0
 800562a:	f104 0919 	add.w	r9, r4, #25
 800562e:	e7f5      	b.n	800561c <_printf_i+0x1f8>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1ac      	bne.n	800558e <_printf_i+0x16a>
 8005634:	7803      	ldrb	r3, [r0, #0]
 8005636:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800563a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563e:	e76c      	b.n	800551a <_printf_i+0xf6>
 8005640:	0800857e 	.word	0x0800857e
 8005644:	0800858f 	.word	0x0800858f

08005648 <iprintf>:
 8005648:	b40f      	push	{r0, r1, r2, r3}
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <iprintf+0x2c>)
 800564c:	b513      	push	{r0, r1, r4, lr}
 800564e:	681c      	ldr	r4, [r3, #0]
 8005650:	b124      	cbz	r4, 800565c <iprintf+0x14>
 8005652:	69a3      	ldr	r3, [r4, #24]
 8005654:	b913      	cbnz	r3, 800565c <iprintf+0x14>
 8005656:	4620      	mov	r0, r4
 8005658:	f001 f802 	bl	8006660 <__sinit>
 800565c:	ab05      	add	r3, sp, #20
 800565e:	9a04      	ldr	r2, [sp, #16]
 8005660:	68a1      	ldr	r1, [r4, #8]
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	4620      	mov	r0, r4
 8005666:	f001 fcc5 	bl	8006ff4 <_vfiprintf_r>
 800566a:	b002      	add	sp, #8
 800566c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005670:	b004      	add	sp, #16
 8005672:	4770      	bx	lr
 8005674:	20000010 	.word	0x20000010

08005678 <__swbuf_r>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	460e      	mov	r6, r1
 800567c:	4614      	mov	r4, r2
 800567e:	4605      	mov	r5, r0
 8005680:	b118      	cbz	r0, 800568a <__swbuf_r+0x12>
 8005682:	6983      	ldr	r3, [r0, #24]
 8005684:	b90b      	cbnz	r3, 800568a <__swbuf_r+0x12>
 8005686:	f000 ffeb 	bl	8006660 <__sinit>
 800568a:	4b21      	ldr	r3, [pc, #132]	; (8005710 <__swbuf_r+0x98>)
 800568c:	429c      	cmp	r4, r3
 800568e:	d12a      	bne.n	80056e6 <__swbuf_r+0x6e>
 8005690:	686c      	ldr	r4, [r5, #4]
 8005692:	69a3      	ldr	r3, [r4, #24]
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	071a      	lsls	r2, r3, #28
 800569a:	d52e      	bpl.n	80056fa <__swbuf_r+0x82>
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	b363      	cbz	r3, 80056fa <__swbuf_r+0x82>
 80056a0:	6923      	ldr	r3, [r4, #16]
 80056a2:	6820      	ldr	r0, [r4, #0]
 80056a4:	1ac0      	subs	r0, r0, r3
 80056a6:	6963      	ldr	r3, [r4, #20]
 80056a8:	b2f6      	uxtb	r6, r6
 80056aa:	4283      	cmp	r3, r0
 80056ac:	4637      	mov	r7, r6
 80056ae:	dc04      	bgt.n	80056ba <__swbuf_r+0x42>
 80056b0:	4621      	mov	r1, r4
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 ff6a 	bl	800658c <_fflush_r>
 80056b8:	bb28      	cbnz	r0, 8005706 <__swbuf_r+0x8e>
 80056ba:	68a3      	ldr	r3, [r4, #8]
 80056bc:	3b01      	subs	r3, #1
 80056be:	60a3      	str	r3, [r4, #8]
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	6022      	str	r2, [r4, #0]
 80056c6:	701e      	strb	r6, [r3, #0]
 80056c8:	6963      	ldr	r3, [r4, #20]
 80056ca:	3001      	adds	r0, #1
 80056cc:	4283      	cmp	r3, r0
 80056ce:	d004      	beq.n	80056da <__swbuf_r+0x62>
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	07db      	lsls	r3, r3, #31
 80056d4:	d519      	bpl.n	800570a <__swbuf_r+0x92>
 80056d6:	2e0a      	cmp	r6, #10
 80056d8:	d117      	bne.n	800570a <__swbuf_r+0x92>
 80056da:	4621      	mov	r1, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 ff55 	bl	800658c <_fflush_r>
 80056e2:	b190      	cbz	r0, 800570a <__swbuf_r+0x92>
 80056e4:	e00f      	b.n	8005706 <__swbuf_r+0x8e>
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <__swbuf_r+0x9c>)
 80056e8:	429c      	cmp	r4, r3
 80056ea:	d101      	bne.n	80056f0 <__swbuf_r+0x78>
 80056ec:	68ac      	ldr	r4, [r5, #8]
 80056ee:	e7d0      	b.n	8005692 <__swbuf_r+0x1a>
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <__swbuf_r+0xa0>)
 80056f2:	429c      	cmp	r4, r3
 80056f4:	bf08      	it	eq
 80056f6:	68ec      	ldreq	r4, [r5, #12]
 80056f8:	e7cb      	b.n	8005692 <__swbuf_r+0x1a>
 80056fa:	4621      	mov	r1, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 f80d 	bl	800571c <__swsetup_r>
 8005702:	2800      	cmp	r0, #0
 8005704:	d0cc      	beq.n	80056a0 <__swbuf_r+0x28>
 8005706:	f04f 37ff 	mov.w	r7, #4294967295
 800570a:	4638      	mov	r0, r7
 800570c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800570e:	bf00      	nop
 8005710:	080085d0 	.word	0x080085d0
 8005714:	080085f0 	.word	0x080085f0
 8005718:	080085b0 	.word	0x080085b0

0800571c <__swsetup_r>:
 800571c:	4b32      	ldr	r3, [pc, #200]	; (80057e8 <__swsetup_r+0xcc>)
 800571e:	b570      	push	{r4, r5, r6, lr}
 8005720:	681d      	ldr	r5, [r3, #0]
 8005722:	4606      	mov	r6, r0
 8005724:	460c      	mov	r4, r1
 8005726:	b125      	cbz	r5, 8005732 <__swsetup_r+0x16>
 8005728:	69ab      	ldr	r3, [r5, #24]
 800572a:	b913      	cbnz	r3, 8005732 <__swsetup_r+0x16>
 800572c:	4628      	mov	r0, r5
 800572e:	f000 ff97 	bl	8006660 <__sinit>
 8005732:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <__swsetup_r+0xd0>)
 8005734:	429c      	cmp	r4, r3
 8005736:	d10f      	bne.n	8005758 <__swsetup_r+0x3c>
 8005738:	686c      	ldr	r4, [r5, #4]
 800573a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800573e:	b29a      	uxth	r2, r3
 8005740:	0715      	lsls	r5, r2, #28
 8005742:	d42c      	bmi.n	800579e <__swsetup_r+0x82>
 8005744:	06d0      	lsls	r0, r2, #27
 8005746:	d411      	bmi.n	800576c <__swsetup_r+0x50>
 8005748:	2209      	movs	r2, #9
 800574a:	6032      	str	r2, [r6, #0]
 800574c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005750:	81a3      	strh	r3, [r4, #12]
 8005752:	f04f 30ff 	mov.w	r0, #4294967295
 8005756:	e03e      	b.n	80057d6 <__swsetup_r+0xba>
 8005758:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <__swsetup_r+0xd4>)
 800575a:	429c      	cmp	r4, r3
 800575c:	d101      	bne.n	8005762 <__swsetup_r+0x46>
 800575e:	68ac      	ldr	r4, [r5, #8]
 8005760:	e7eb      	b.n	800573a <__swsetup_r+0x1e>
 8005762:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <__swsetup_r+0xd8>)
 8005764:	429c      	cmp	r4, r3
 8005766:	bf08      	it	eq
 8005768:	68ec      	ldreq	r4, [r5, #12]
 800576a:	e7e6      	b.n	800573a <__swsetup_r+0x1e>
 800576c:	0751      	lsls	r1, r2, #29
 800576e:	d512      	bpl.n	8005796 <__swsetup_r+0x7a>
 8005770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005772:	b141      	cbz	r1, 8005786 <__swsetup_r+0x6a>
 8005774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005778:	4299      	cmp	r1, r3
 800577a:	d002      	beq.n	8005782 <__swsetup_r+0x66>
 800577c:	4630      	mov	r0, r6
 800577e:	f001 fb67 	bl	8006e50 <_free_r>
 8005782:	2300      	movs	r3, #0
 8005784:	6363      	str	r3, [r4, #52]	; 0x34
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	2300      	movs	r3, #0
 8005790:	6063      	str	r3, [r4, #4]
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	f043 0308 	orr.w	r3, r3, #8
 800579c:	81a3      	strh	r3, [r4, #12]
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	b94b      	cbnz	r3, 80057b6 <__swsetup_r+0x9a>
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ac:	d003      	beq.n	80057b6 <__swsetup_r+0x9a>
 80057ae:	4621      	mov	r1, r4
 80057b0:	4630      	mov	r0, r6
 80057b2:	f001 f811 	bl	80067d8 <__smakebuf_r>
 80057b6:	89a2      	ldrh	r2, [r4, #12]
 80057b8:	f012 0301 	ands.w	r3, r2, #1
 80057bc:	d00c      	beq.n	80057d8 <__swsetup_r+0xbc>
 80057be:	2300      	movs	r3, #0
 80057c0:	60a3      	str	r3, [r4, #8]
 80057c2:	6963      	ldr	r3, [r4, #20]
 80057c4:	425b      	negs	r3, r3
 80057c6:	61a3      	str	r3, [r4, #24]
 80057c8:	6923      	ldr	r3, [r4, #16]
 80057ca:	b953      	cbnz	r3, 80057e2 <__swsetup_r+0xc6>
 80057cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80057d4:	d1ba      	bne.n	800574c <__swsetup_r+0x30>
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	0792      	lsls	r2, r2, #30
 80057da:	bf58      	it	pl
 80057dc:	6963      	ldrpl	r3, [r4, #20]
 80057de:	60a3      	str	r3, [r4, #8]
 80057e0:	e7f2      	b.n	80057c8 <__swsetup_r+0xac>
 80057e2:	2000      	movs	r0, #0
 80057e4:	e7f7      	b.n	80057d6 <__swsetup_r+0xba>
 80057e6:	bf00      	nop
 80057e8:	20000010 	.word	0x20000010
 80057ec:	080085d0 	.word	0x080085d0
 80057f0:	080085f0 	.word	0x080085f0
 80057f4:	080085b0 	.word	0x080085b0

080057f8 <quorem>:
 80057f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	6903      	ldr	r3, [r0, #16]
 80057fe:	690c      	ldr	r4, [r1, #16]
 8005800:	42a3      	cmp	r3, r4
 8005802:	4680      	mov	r8, r0
 8005804:	f2c0 8082 	blt.w	800590c <quorem+0x114>
 8005808:	3c01      	subs	r4, #1
 800580a:	f101 0714 	add.w	r7, r1, #20
 800580e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005812:	f100 0614 	add.w	r6, r0, #20
 8005816:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800581a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800581e:	eb06 030c 	add.w	r3, r6, ip
 8005822:	3501      	adds	r5, #1
 8005824:	eb07 090c 	add.w	r9, r7, ip
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	fbb0 f5f5 	udiv	r5, r0, r5
 800582e:	b395      	cbz	r5, 8005896 <quorem+0x9e>
 8005830:	f04f 0a00 	mov.w	sl, #0
 8005834:	4638      	mov	r0, r7
 8005836:	46b6      	mov	lr, r6
 8005838:	46d3      	mov	fp, sl
 800583a:	f850 2b04 	ldr.w	r2, [r0], #4
 800583e:	b293      	uxth	r3, r2
 8005840:	fb05 a303 	mla	r3, r5, r3, sl
 8005844:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005848:	b29b      	uxth	r3, r3
 800584a:	ebab 0303 	sub.w	r3, fp, r3
 800584e:	0c12      	lsrs	r2, r2, #16
 8005850:	f8de b000 	ldr.w	fp, [lr]
 8005854:	fb05 a202 	mla	r2, r5, r2, sl
 8005858:	fa13 f38b 	uxtah	r3, r3, fp
 800585c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005860:	fa1f fb82 	uxth.w	fp, r2
 8005864:	f8de 2000 	ldr.w	r2, [lr]
 8005868:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800586c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005870:	b29b      	uxth	r3, r3
 8005872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005876:	4581      	cmp	r9, r0
 8005878:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800587c:	f84e 3b04 	str.w	r3, [lr], #4
 8005880:	d2db      	bcs.n	800583a <quorem+0x42>
 8005882:	f856 300c 	ldr.w	r3, [r6, ip]
 8005886:	b933      	cbnz	r3, 8005896 <quorem+0x9e>
 8005888:	9b01      	ldr	r3, [sp, #4]
 800588a:	3b04      	subs	r3, #4
 800588c:	429e      	cmp	r6, r3
 800588e:	461a      	mov	r2, r3
 8005890:	d330      	bcc.n	80058f4 <quorem+0xfc>
 8005892:	f8c8 4010 	str.w	r4, [r8, #16]
 8005896:	4640      	mov	r0, r8
 8005898:	f001 fa06 	bl	8006ca8 <__mcmp>
 800589c:	2800      	cmp	r0, #0
 800589e:	db25      	blt.n	80058ec <quorem+0xf4>
 80058a0:	3501      	adds	r5, #1
 80058a2:	4630      	mov	r0, r6
 80058a4:	f04f 0c00 	mov.w	ip, #0
 80058a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80058ac:	f8d0 e000 	ldr.w	lr, [r0]
 80058b0:	b293      	uxth	r3, r2
 80058b2:	ebac 0303 	sub.w	r3, ip, r3
 80058b6:	0c12      	lsrs	r2, r2, #16
 80058b8:	fa13 f38e 	uxtah	r3, r3, lr
 80058bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058ca:	45b9      	cmp	r9, r7
 80058cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058d0:	f840 3b04 	str.w	r3, [r0], #4
 80058d4:	d2e8      	bcs.n	80058a8 <quorem+0xb0>
 80058d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80058da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80058de:	b92a      	cbnz	r2, 80058ec <quorem+0xf4>
 80058e0:	3b04      	subs	r3, #4
 80058e2:	429e      	cmp	r6, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	d30b      	bcc.n	8005900 <quorem+0x108>
 80058e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80058ec:	4628      	mov	r0, r5
 80058ee:	b003      	add	sp, #12
 80058f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	3b04      	subs	r3, #4
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	d1ca      	bne.n	8005892 <quorem+0x9a>
 80058fc:	3c01      	subs	r4, #1
 80058fe:	e7c5      	b.n	800588c <quorem+0x94>
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	3b04      	subs	r3, #4
 8005904:	2a00      	cmp	r2, #0
 8005906:	d1ef      	bne.n	80058e8 <quorem+0xf0>
 8005908:	3c01      	subs	r4, #1
 800590a:	e7ea      	b.n	80058e2 <quorem+0xea>
 800590c:	2000      	movs	r0, #0
 800590e:	e7ee      	b.n	80058ee <quorem+0xf6>

08005910 <_dtoa_r>:
 8005910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005914:	ec57 6b10 	vmov	r6, r7, d0
 8005918:	b097      	sub	sp, #92	; 0x5c
 800591a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800591c:	9106      	str	r1, [sp, #24]
 800591e:	4604      	mov	r4, r0
 8005920:	920b      	str	r2, [sp, #44]	; 0x2c
 8005922:	9312      	str	r3, [sp, #72]	; 0x48
 8005924:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005928:	e9cd 6700 	strd	r6, r7, [sp]
 800592c:	b93d      	cbnz	r5, 800593e <_dtoa_r+0x2e>
 800592e:	2010      	movs	r0, #16
 8005930:	f000 ff92 	bl	8006858 <malloc>
 8005934:	6260      	str	r0, [r4, #36]	; 0x24
 8005936:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800593a:	6005      	str	r5, [r0, #0]
 800593c:	60c5      	str	r5, [r0, #12]
 800593e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005940:	6819      	ldr	r1, [r3, #0]
 8005942:	b151      	cbz	r1, 800595a <_dtoa_r+0x4a>
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	604a      	str	r2, [r1, #4]
 8005948:	2301      	movs	r3, #1
 800594a:	4093      	lsls	r3, r2
 800594c:	608b      	str	r3, [r1, #8]
 800594e:	4620      	mov	r0, r4
 8005950:	f000 ffc9 	bl	80068e6 <_Bfree>
 8005954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	1e3b      	subs	r3, r7, #0
 800595c:	bfbb      	ittet	lt
 800595e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005962:	9301      	strlt	r3, [sp, #4]
 8005964:	2300      	movge	r3, #0
 8005966:	2201      	movlt	r2, #1
 8005968:	bfac      	ite	ge
 800596a:	f8c8 3000 	strge.w	r3, [r8]
 800596e:	f8c8 2000 	strlt.w	r2, [r8]
 8005972:	4baf      	ldr	r3, [pc, #700]	; (8005c30 <_dtoa_r+0x320>)
 8005974:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005978:	ea33 0308 	bics.w	r3, r3, r8
 800597c:	d114      	bne.n	80059a8 <_dtoa_r+0x98>
 800597e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005980:	f242 730f 	movw	r3, #9999	; 0x270f
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	9b00      	ldr	r3, [sp, #0]
 8005988:	b923      	cbnz	r3, 8005994 <_dtoa_r+0x84>
 800598a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800598e:	2800      	cmp	r0, #0
 8005990:	f000 8542 	beq.w	8006418 <_dtoa_r+0xb08>
 8005994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005996:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005c44 <_dtoa_r+0x334>
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8544 	beq.w	8006428 <_dtoa_r+0xb18>
 80059a0:	f10b 0303 	add.w	r3, fp, #3
 80059a4:	f000 bd3e 	b.w	8006424 <_dtoa_r+0xb14>
 80059a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80059ac:	2200      	movs	r2, #0
 80059ae:	2300      	movs	r3, #0
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fb f890 	bl	8000ad8 <__aeabi_dcmpeq>
 80059b8:	4681      	mov	r9, r0
 80059ba:	b168      	cbz	r0, 80059d8 <_dtoa_r+0xc8>
 80059bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059be:	2301      	movs	r3, #1
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8524 	beq.w	8006412 <_dtoa_r+0xb02>
 80059ca:	4b9a      	ldr	r3, [pc, #616]	; (8005c34 <_dtoa_r+0x324>)
 80059cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	f000 bd28 	b.w	8006428 <_dtoa_r+0xb18>
 80059d8:	aa14      	add	r2, sp, #80	; 0x50
 80059da:	a915      	add	r1, sp, #84	; 0x54
 80059dc:	ec47 6b10 	vmov	d0, r6, r7
 80059e0:	4620      	mov	r0, r4
 80059e2:	f001 f9d8 	bl	8006d96 <__d2b>
 80059e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80059ea:	9004      	str	r0, [sp, #16]
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	d07c      	beq.n	8005aea <_dtoa_r+0x1da>
 80059f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80059f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80059f8:	46b2      	mov	sl, r6
 80059fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80059fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a02:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005a06:	2200      	movs	r2, #0
 8005a08:	4b8b      	ldr	r3, [pc, #556]	; (8005c38 <_dtoa_r+0x328>)
 8005a0a:	4650      	mov	r0, sl
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	f7fa fc43 	bl	8000298 <__aeabi_dsub>
 8005a12:	a381      	add	r3, pc, #516	; (adr r3, 8005c18 <_dtoa_r+0x308>)
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	f7fa fdf6 	bl	8000608 <__aeabi_dmul>
 8005a1c:	a380      	add	r3, pc, #512	; (adr r3, 8005c20 <_dtoa_r+0x310>)
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f7fa fc3b 	bl	800029c <__adddf3>
 8005a26:	4606      	mov	r6, r0
 8005a28:	4628      	mov	r0, r5
 8005a2a:	460f      	mov	r7, r1
 8005a2c:	f7fa fd82 	bl	8000534 <__aeabi_i2d>
 8005a30:	a37d      	add	r3, pc, #500	; (adr r3, 8005c28 <_dtoa_r+0x318>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f7fa fde7 	bl	8000608 <__aeabi_dmul>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fa fc2b 	bl	800029c <__adddf3>
 8005a46:	4606      	mov	r6, r0
 8005a48:	460f      	mov	r7, r1
 8005a4a:	f7fb f88d 	bl	8000b68 <__aeabi_d2iz>
 8005a4e:	2200      	movs	r2, #0
 8005a50:	4682      	mov	sl, r0
 8005a52:	2300      	movs	r3, #0
 8005a54:	4630      	mov	r0, r6
 8005a56:	4639      	mov	r1, r7
 8005a58:	f7fb f848 	bl	8000aec <__aeabi_dcmplt>
 8005a5c:	b148      	cbz	r0, 8005a72 <_dtoa_r+0x162>
 8005a5e:	4650      	mov	r0, sl
 8005a60:	f7fa fd68 	bl	8000534 <__aeabi_i2d>
 8005a64:	4632      	mov	r2, r6
 8005a66:	463b      	mov	r3, r7
 8005a68:	f7fb f836 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a6c:	b908      	cbnz	r0, 8005a72 <_dtoa_r+0x162>
 8005a6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a72:	f1ba 0f16 	cmp.w	sl, #22
 8005a76:	d859      	bhi.n	8005b2c <_dtoa_r+0x21c>
 8005a78:	4970      	ldr	r1, [pc, #448]	; (8005c3c <_dtoa_r+0x32c>)
 8005a7a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005a7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a86:	f7fb f84f 	bl	8000b28 <__aeabi_dcmpgt>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d050      	beq.n	8005b30 <_dtoa_r+0x220>
 8005a8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a92:	2300      	movs	r3, #0
 8005a94:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a98:	1b5d      	subs	r5, r3, r5
 8005a9a:	f1b5 0801 	subs.w	r8, r5, #1
 8005a9e:	bf49      	itett	mi
 8005aa0:	f1c5 0301 	rsbmi	r3, r5, #1
 8005aa4:	2300      	movpl	r3, #0
 8005aa6:	9305      	strmi	r3, [sp, #20]
 8005aa8:	f04f 0800 	movmi.w	r8, #0
 8005aac:	bf58      	it	pl
 8005aae:	9305      	strpl	r3, [sp, #20]
 8005ab0:	f1ba 0f00 	cmp.w	sl, #0
 8005ab4:	db3e      	blt.n	8005b34 <_dtoa_r+0x224>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	44d0      	add	r8, sl
 8005aba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005abe:	9307      	str	r3, [sp, #28]
 8005ac0:	9b06      	ldr	r3, [sp, #24]
 8005ac2:	2b09      	cmp	r3, #9
 8005ac4:	f200 8090 	bhi.w	8005be8 <_dtoa_r+0x2d8>
 8005ac8:	2b05      	cmp	r3, #5
 8005aca:	bfc4      	itt	gt
 8005acc:	3b04      	subgt	r3, #4
 8005ace:	9306      	strgt	r3, [sp, #24]
 8005ad0:	9b06      	ldr	r3, [sp, #24]
 8005ad2:	f1a3 0302 	sub.w	r3, r3, #2
 8005ad6:	bfcc      	ite	gt
 8005ad8:	2500      	movgt	r5, #0
 8005ada:	2501      	movle	r5, #1
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	f200 808f 	bhi.w	8005c00 <_dtoa_r+0x2f0>
 8005ae2:	e8df f003 	tbb	[pc, r3]
 8005ae6:	7f7d      	.short	0x7f7d
 8005ae8:	7131      	.short	0x7131
 8005aea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005aee:	441d      	add	r5, r3
 8005af0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005af4:	2820      	cmp	r0, #32
 8005af6:	dd13      	ble.n	8005b20 <_dtoa_r+0x210>
 8005af8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005afc:	9b00      	ldr	r3, [sp, #0]
 8005afe:	fa08 f800 	lsl.w	r8, r8, r0
 8005b02:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005b06:	fa23 f000 	lsr.w	r0, r3, r0
 8005b0a:	ea48 0000 	orr.w	r0, r8, r0
 8005b0e:	f7fa fd01 	bl	8000514 <__aeabi_ui2d>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4682      	mov	sl, r0
 8005b16:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005b1a:	3d01      	subs	r5, #1
 8005b1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b1e:	e772      	b.n	8005a06 <_dtoa_r+0xf6>
 8005b20:	9b00      	ldr	r3, [sp, #0]
 8005b22:	f1c0 0020 	rsb	r0, r0, #32
 8005b26:	fa03 f000 	lsl.w	r0, r3, r0
 8005b2a:	e7f0      	b.n	8005b0e <_dtoa_r+0x1fe>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e7b1      	b.n	8005a94 <_dtoa_r+0x184>
 8005b30:	900f      	str	r0, [sp, #60]	; 0x3c
 8005b32:	e7b0      	b.n	8005a96 <_dtoa_r+0x186>
 8005b34:	9b05      	ldr	r3, [sp, #20]
 8005b36:	eba3 030a 	sub.w	r3, r3, sl
 8005b3a:	9305      	str	r3, [sp, #20]
 8005b3c:	f1ca 0300 	rsb	r3, sl, #0
 8005b40:	9307      	str	r3, [sp, #28]
 8005b42:	2300      	movs	r3, #0
 8005b44:	930e      	str	r3, [sp, #56]	; 0x38
 8005b46:	e7bb      	b.n	8005ac0 <_dtoa_r+0x1b0>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8005b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dd59      	ble.n	8005c06 <_dtoa_r+0x2f6>
 8005b52:	9302      	str	r3, [sp, #8]
 8005b54:	4699      	mov	r9, r3
 8005b56:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b58:	2200      	movs	r2, #0
 8005b5a:	6072      	str	r2, [r6, #4]
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	f102 0014 	add.w	r0, r2, #20
 8005b62:	4298      	cmp	r0, r3
 8005b64:	6871      	ldr	r1, [r6, #4]
 8005b66:	d953      	bls.n	8005c10 <_dtoa_r+0x300>
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f000 fe88 	bl	800687e <_Balloc>
 8005b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b70:	6030      	str	r0, [r6, #0]
 8005b72:	f1b9 0f0e 	cmp.w	r9, #14
 8005b76:	f8d3 b000 	ldr.w	fp, [r3]
 8005b7a:	f200 80e6 	bhi.w	8005d4a <_dtoa_r+0x43a>
 8005b7e:	2d00      	cmp	r5, #0
 8005b80:	f000 80e3 	beq.w	8005d4a <_dtoa_r+0x43a>
 8005b84:	ed9d 7b00 	vldr	d7, [sp]
 8005b88:	f1ba 0f00 	cmp.w	sl, #0
 8005b8c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005b90:	dd74      	ble.n	8005c7c <_dtoa_r+0x36c>
 8005b92:	4a2a      	ldr	r2, [pc, #168]	; (8005c3c <_dtoa_r+0x32c>)
 8005b94:	f00a 030f 	and.w	r3, sl, #15
 8005b98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b9c:	ed93 7b00 	vldr	d7, [r3]
 8005ba0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005ba4:	06f0      	lsls	r0, r6, #27
 8005ba6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005baa:	d565      	bpl.n	8005c78 <_dtoa_r+0x368>
 8005bac:	4b24      	ldr	r3, [pc, #144]	; (8005c40 <_dtoa_r+0x330>)
 8005bae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005bb6:	f7fa fe51 	bl	800085c <__aeabi_ddiv>
 8005bba:	e9cd 0100 	strd	r0, r1, [sp]
 8005bbe:	f006 060f 	and.w	r6, r6, #15
 8005bc2:	2503      	movs	r5, #3
 8005bc4:	4f1e      	ldr	r7, [pc, #120]	; (8005c40 <_dtoa_r+0x330>)
 8005bc6:	e04c      	b.n	8005c62 <_dtoa_r+0x352>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	930a      	str	r3, [sp, #40]	; 0x28
 8005bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bce:	4453      	add	r3, sl
 8005bd0:	f103 0901 	add.w	r9, r3, #1
 8005bd4:	9302      	str	r3, [sp, #8]
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bfb8      	it	lt
 8005bdc:	2301      	movlt	r3, #1
 8005bde:	e7ba      	b.n	8005b56 <_dtoa_r+0x246>
 8005be0:	2300      	movs	r3, #0
 8005be2:	e7b2      	b.n	8005b4a <_dtoa_r+0x23a>
 8005be4:	2300      	movs	r3, #0
 8005be6:	e7f0      	b.n	8005bca <_dtoa_r+0x2ba>
 8005be8:	2501      	movs	r5, #1
 8005bea:	2300      	movs	r3, #0
 8005bec:	9306      	str	r3, [sp, #24]
 8005bee:	950a      	str	r5, [sp, #40]	; 0x28
 8005bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf4:	9302      	str	r3, [sp, #8]
 8005bf6:	4699      	mov	r9, r3
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2312      	movs	r3, #18
 8005bfc:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bfe:	e7aa      	b.n	8005b56 <_dtoa_r+0x246>
 8005c00:	2301      	movs	r3, #1
 8005c02:	930a      	str	r3, [sp, #40]	; 0x28
 8005c04:	e7f4      	b.n	8005bf0 <_dtoa_r+0x2e0>
 8005c06:	2301      	movs	r3, #1
 8005c08:	9302      	str	r3, [sp, #8]
 8005c0a:	4699      	mov	r9, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	e7f5      	b.n	8005bfc <_dtoa_r+0x2ec>
 8005c10:	3101      	adds	r1, #1
 8005c12:	6071      	str	r1, [r6, #4]
 8005c14:	0052      	lsls	r2, r2, #1
 8005c16:	e7a2      	b.n	8005b5e <_dtoa_r+0x24e>
 8005c18:	636f4361 	.word	0x636f4361
 8005c1c:	3fd287a7 	.word	0x3fd287a7
 8005c20:	8b60c8b3 	.word	0x8b60c8b3
 8005c24:	3fc68a28 	.word	0x3fc68a28
 8005c28:	509f79fb 	.word	0x509f79fb
 8005c2c:	3fd34413 	.word	0x3fd34413
 8005c30:	7ff00000 	.word	0x7ff00000
 8005c34:	0800857d 	.word	0x0800857d
 8005c38:	3ff80000 	.word	0x3ff80000
 8005c3c:	08008638 	.word	0x08008638
 8005c40:	08008610 	.word	0x08008610
 8005c44:	080085a9 	.word	0x080085a9
 8005c48:	07f1      	lsls	r1, r6, #31
 8005c4a:	d508      	bpl.n	8005c5e <_dtoa_r+0x34e>
 8005c4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c54:	f7fa fcd8 	bl	8000608 <__aeabi_dmul>
 8005c58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c5c:	3501      	adds	r5, #1
 8005c5e:	1076      	asrs	r6, r6, #1
 8005c60:	3708      	adds	r7, #8
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	d1f0      	bne.n	8005c48 <_dtoa_r+0x338>
 8005c66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c6e:	f7fa fdf5 	bl	800085c <__aeabi_ddiv>
 8005c72:	e9cd 0100 	strd	r0, r1, [sp]
 8005c76:	e01a      	b.n	8005cae <_dtoa_r+0x39e>
 8005c78:	2502      	movs	r5, #2
 8005c7a:	e7a3      	b.n	8005bc4 <_dtoa_r+0x2b4>
 8005c7c:	f000 80a0 	beq.w	8005dc0 <_dtoa_r+0x4b0>
 8005c80:	f1ca 0600 	rsb	r6, sl, #0
 8005c84:	4b9f      	ldr	r3, [pc, #636]	; (8005f04 <_dtoa_r+0x5f4>)
 8005c86:	4fa0      	ldr	r7, [pc, #640]	; (8005f08 <_dtoa_r+0x5f8>)
 8005c88:	f006 020f 	and.w	r2, r6, #15
 8005c8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c98:	f7fa fcb6 	bl	8000608 <__aeabi_dmul>
 8005c9c:	e9cd 0100 	strd	r0, r1, [sp]
 8005ca0:	1136      	asrs	r6, r6, #4
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2502      	movs	r5, #2
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	d17f      	bne.n	8005daa <_dtoa_r+0x49a>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e1      	bne.n	8005c72 <_dtoa_r+0x362>
 8005cae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8087 	beq.w	8005dc4 <_dtoa_r+0x4b4>
 8005cb6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	4b93      	ldr	r3, [pc, #588]	; (8005f0c <_dtoa_r+0x5fc>)
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	f7fa ff13 	bl	8000aec <__aeabi_dcmplt>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d07c      	beq.n	8005dc4 <_dtoa_r+0x4b4>
 8005cca:	f1b9 0f00 	cmp.w	r9, #0
 8005cce:	d079      	beq.n	8005dc4 <_dtoa_r+0x4b4>
 8005cd0:	9b02      	ldr	r3, [sp, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dd35      	ble.n	8005d42 <_dtoa_r+0x432>
 8005cd6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005cda:	9308      	str	r3, [sp, #32]
 8005cdc:	4639      	mov	r1, r7
 8005cde:	2200      	movs	r2, #0
 8005ce0:	4b8b      	ldr	r3, [pc, #556]	; (8005f10 <_dtoa_r+0x600>)
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f7fa fc90 	bl	8000608 <__aeabi_dmul>
 8005ce8:	e9cd 0100 	strd	r0, r1, [sp]
 8005cec:	9f02      	ldr	r7, [sp, #8]
 8005cee:	3501      	adds	r5, #1
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f7fa fc1f 	bl	8000534 <__aeabi_i2d>
 8005cf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cfa:	f7fa fc85 	bl	8000608 <__aeabi_dmul>
 8005cfe:	2200      	movs	r2, #0
 8005d00:	4b84      	ldr	r3, [pc, #528]	; (8005f14 <_dtoa_r+0x604>)
 8005d02:	f7fa facb 	bl	800029c <__adddf3>
 8005d06:	4605      	mov	r5, r0
 8005d08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005d0c:	2f00      	cmp	r7, #0
 8005d0e:	d15d      	bne.n	8005dcc <_dtoa_r+0x4bc>
 8005d10:	2200      	movs	r2, #0
 8005d12:	4b81      	ldr	r3, [pc, #516]	; (8005f18 <_dtoa_r+0x608>)
 8005d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d18:	f7fa fabe 	bl	8000298 <__aeabi_dsub>
 8005d1c:	462a      	mov	r2, r5
 8005d1e:	4633      	mov	r3, r6
 8005d20:	e9cd 0100 	strd	r0, r1, [sp]
 8005d24:	f7fa ff00 	bl	8000b28 <__aeabi_dcmpgt>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	f040 8288 	bne.w	800623e <_dtoa_r+0x92e>
 8005d2e:	462a      	mov	r2, r5
 8005d30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d38:	f7fa fed8 	bl	8000aec <__aeabi_dcmplt>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	f040 827c 	bne.w	800623a <_dtoa_r+0x92a>
 8005d42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d46:	e9cd 2300 	strd	r2, r3, [sp]
 8005d4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f2c0 8150 	blt.w	8005ff2 <_dtoa_r+0x6e2>
 8005d52:	f1ba 0f0e 	cmp.w	sl, #14
 8005d56:	f300 814c 	bgt.w	8005ff2 <_dtoa_r+0x6e2>
 8005d5a:	4b6a      	ldr	r3, [pc, #424]	; (8005f04 <_dtoa_r+0x5f4>)
 8005d5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d60:	ed93 7b00 	vldr	d7, [r3]
 8005d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d6c:	f280 80d8 	bge.w	8005f20 <_dtoa_r+0x610>
 8005d70:	f1b9 0f00 	cmp.w	r9, #0
 8005d74:	f300 80d4 	bgt.w	8005f20 <_dtoa_r+0x610>
 8005d78:	f040 825e 	bne.w	8006238 <_dtoa_r+0x928>
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4b66      	ldr	r3, [pc, #408]	; (8005f18 <_dtoa_r+0x608>)
 8005d80:	ec51 0b17 	vmov	r0, r1, d7
 8005d84:	f7fa fc40 	bl	8000608 <__aeabi_dmul>
 8005d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d8c:	f7fa fec2 	bl	8000b14 <__aeabi_dcmpge>
 8005d90:	464f      	mov	r7, r9
 8005d92:	464e      	mov	r6, r9
 8005d94:	2800      	cmp	r0, #0
 8005d96:	f040 8234 	bne.w	8006202 <_dtoa_r+0x8f2>
 8005d9a:	2331      	movs	r3, #49	; 0x31
 8005d9c:	f10b 0501 	add.w	r5, fp, #1
 8005da0:	f88b 3000 	strb.w	r3, [fp]
 8005da4:	f10a 0a01 	add.w	sl, sl, #1
 8005da8:	e22f      	b.n	800620a <_dtoa_r+0x8fa>
 8005daa:	07f2      	lsls	r2, r6, #31
 8005dac:	d505      	bpl.n	8005dba <_dtoa_r+0x4aa>
 8005dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005db2:	f7fa fc29 	bl	8000608 <__aeabi_dmul>
 8005db6:	3501      	adds	r5, #1
 8005db8:	2301      	movs	r3, #1
 8005dba:	1076      	asrs	r6, r6, #1
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	e772      	b.n	8005ca6 <_dtoa_r+0x396>
 8005dc0:	2502      	movs	r5, #2
 8005dc2:	e774      	b.n	8005cae <_dtoa_r+0x39e>
 8005dc4:	f8cd a020 	str.w	sl, [sp, #32]
 8005dc8:	464f      	mov	r7, r9
 8005dca:	e791      	b.n	8005cf0 <_dtoa_r+0x3e0>
 8005dcc:	4b4d      	ldr	r3, [pc, #308]	; (8005f04 <_dtoa_r+0x5f4>)
 8005dce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dd2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d047      	beq.n	8005e6c <_dtoa_r+0x55c>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	2000      	movs	r0, #0
 8005de2:	494e      	ldr	r1, [pc, #312]	; (8005f1c <_dtoa_r+0x60c>)
 8005de4:	f7fa fd3a 	bl	800085c <__aeabi_ddiv>
 8005de8:	462a      	mov	r2, r5
 8005dea:	4633      	mov	r3, r6
 8005dec:	f7fa fa54 	bl	8000298 <__aeabi_dsub>
 8005df0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005df4:	465d      	mov	r5, fp
 8005df6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dfa:	f7fa feb5 	bl	8000b68 <__aeabi_d2iz>
 8005dfe:	4606      	mov	r6, r0
 8005e00:	f7fa fb98 	bl	8000534 <__aeabi_i2d>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e0c:	f7fa fa44 	bl	8000298 <__aeabi_dsub>
 8005e10:	3630      	adds	r6, #48	; 0x30
 8005e12:	f805 6b01 	strb.w	r6, [r5], #1
 8005e16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e1a:	e9cd 0100 	strd	r0, r1, [sp]
 8005e1e:	f7fa fe65 	bl	8000aec <__aeabi_dcmplt>
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d163      	bne.n	8005eee <_dtoa_r+0x5de>
 8005e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	4937      	ldr	r1, [pc, #220]	; (8005f0c <_dtoa_r+0x5fc>)
 8005e2e:	f7fa fa33 	bl	8000298 <__aeabi_dsub>
 8005e32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e36:	f7fa fe59 	bl	8000aec <__aeabi_dcmplt>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f040 80b7 	bne.w	8005fae <_dtoa_r+0x69e>
 8005e40:	eba5 030b 	sub.w	r3, r5, fp
 8005e44:	429f      	cmp	r7, r3
 8005e46:	f77f af7c 	ble.w	8005d42 <_dtoa_r+0x432>
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	4b30      	ldr	r3, [pc, #192]	; (8005f10 <_dtoa_r+0x600>)
 8005e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e52:	f7fa fbd9 	bl	8000608 <__aeabi_dmul>
 8005e56:	2200      	movs	r2, #0
 8005e58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005e5c:	4b2c      	ldr	r3, [pc, #176]	; (8005f10 <_dtoa_r+0x600>)
 8005e5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e62:	f7fa fbd1 	bl	8000608 <__aeabi_dmul>
 8005e66:	e9cd 0100 	strd	r0, r1, [sp]
 8005e6a:	e7c4      	b.n	8005df6 <_dtoa_r+0x4e6>
 8005e6c:	462a      	mov	r2, r5
 8005e6e:	4633      	mov	r3, r6
 8005e70:	f7fa fbca 	bl	8000608 <__aeabi_dmul>
 8005e74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005e78:	eb0b 0507 	add.w	r5, fp, r7
 8005e7c:	465e      	mov	r6, fp
 8005e7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e82:	f7fa fe71 	bl	8000b68 <__aeabi_d2iz>
 8005e86:	4607      	mov	r7, r0
 8005e88:	f7fa fb54 	bl	8000534 <__aeabi_i2d>
 8005e8c:	3730      	adds	r7, #48	; 0x30
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e96:	f7fa f9ff 	bl	8000298 <__aeabi_dsub>
 8005e9a:	f806 7b01 	strb.w	r7, [r6], #1
 8005e9e:	42ae      	cmp	r6, r5
 8005ea0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	d126      	bne.n	8005ef8 <_dtoa_r+0x5e8>
 8005eaa:	4b1c      	ldr	r3, [pc, #112]	; (8005f1c <_dtoa_r+0x60c>)
 8005eac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005eb0:	f7fa f9f4 	bl	800029c <__adddf3>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ebc:	f7fa fe34 	bl	8000b28 <__aeabi_dcmpgt>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d174      	bne.n	8005fae <_dtoa_r+0x69e>
 8005ec4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ec8:	2000      	movs	r0, #0
 8005eca:	4914      	ldr	r1, [pc, #80]	; (8005f1c <_dtoa_r+0x60c>)
 8005ecc:	f7fa f9e4 	bl	8000298 <__aeabi_dsub>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ed8:	f7fa fe08 	bl	8000aec <__aeabi_dcmplt>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	f43f af30 	beq.w	8005d42 <_dtoa_r+0x432>
 8005ee2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ee6:	2b30      	cmp	r3, #48	; 0x30
 8005ee8:	f105 32ff 	add.w	r2, r5, #4294967295
 8005eec:	d002      	beq.n	8005ef4 <_dtoa_r+0x5e4>
 8005eee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005ef2:	e04a      	b.n	8005f8a <_dtoa_r+0x67a>
 8005ef4:	4615      	mov	r5, r2
 8005ef6:	e7f4      	b.n	8005ee2 <_dtoa_r+0x5d2>
 8005ef8:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <_dtoa_r+0x600>)
 8005efa:	f7fa fb85 	bl	8000608 <__aeabi_dmul>
 8005efe:	e9cd 0100 	strd	r0, r1, [sp]
 8005f02:	e7bc      	b.n	8005e7e <_dtoa_r+0x56e>
 8005f04:	08008638 	.word	0x08008638
 8005f08:	08008610 	.word	0x08008610
 8005f0c:	3ff00000 	.word	0x3ff00000
 8005f10:	40240000 	.word	0x40240000
 8005f14:	401c0000 	.word	0x401c0000
 8005f18:	40140000 	.word	0x40140000
 8005f1c:	3fe00000 	.word	0x3fe00000
 8005f20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005f24:	465d      	mov	r5, fp
 8005f26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	4639      	mov	r1, r7
 8005f2e:	f7fa fc95 	bl	800085c <__aeabi_ddiv>
 8005f32:	f7fa fe19 	bl	8000b68 <__aeabi_d2iz>
 8005f36:	4680      	mov	r8, r0
 8005f38:	f7fa fafc 	bl	8000534 <__aeabi_i2d>
 8005f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f40:	f7fa fb62 	bl	8000608 <__aeabi_dmul>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4630      	mov	r0, r6
 8005f4a:	4639      	mov	r1, r7
 8005f4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005f50:	f7fa f9a2 	bl	8000298 <__aeabi_dsub>
 8005f54:	f805 6b01 	strb.w	r6, [r5], #1
 8005f58:	eba5 060b 	sub.w	r6, r5, fp
 8005f5c:	45b1      	cmp	r9, r6
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	d139      	bne.n	8005fd8 <_dtoa_r+0x6c8>
 8005f64:	f7fa f99a 	bl	800029c <__adddf3>
 8005f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	460f      	mov	r7, r1
 8005f70:	f7fa fdda 	bl	8000b28 <__aeabi_dcmpgt>
 8005f74:	b9c8      	cbnz	r0, 8005faa <_dtoa_r+0x69a>
 8005f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	f7fa fdab 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f82:	b110      	cbz	r0, 8005f8a <_dtoa_r+0x67a>
 8005f84:	f018 0f01 	tst.w	r8, #1
 8005f88:	d10f      	bne.n	8005faa <_dtoa_r+0x69a>
 8005f8a:	9904      	ldr	r1, [sp, #16]
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f000 fcaa 	bl	80068e6 <_Bfree>
 8005f92:	2300      	movs	r3, #0
 8005f94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f96:	702b      	strb	r3, [r5, #0]
 8005f98:	f10a 0301 	add.w	r3, sl, #1
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8241 	beq.w	8006428 <_dtoa_r+0xb18>
 8005fa6:	601d      	str	r5, [r3, #0]
 8005fa8:	e23e      	b.n	8006428 <_dtoa_r+0xb18>
 8005faa:	f8cd a020 	str.w	sl, [sp, #32]
 8005fae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005fb2:	2a39      	cmp	r2, #57	; 0x39
 8005fb4:	f105 33ff 	add.w	r3, r5, #4294967295
 8005fb8:	d108      	bne.n	8005fcc <_dtoa_r+0x6bc>
 8005fba:	459b      	cmp	fp, r3
 8005fbc:	d10a      	bne.n	8005fd4 <_dtoa_r+0x6c4>
 8005fbe:	9b08      	ldr	r3, [sp, #32]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	9308      	str	r3, [sp, #32]
 8005fc4:	2330      	movs	r3, #48	; 0x30
 8005fc6:	f88b 3000 	strb.w	r3, [fp]
 8005fca:	465b      	mov	r3, fp
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	3201      	adds	r2, #1
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e78c      	b.n	8005eee <_dtoa_r+0x5de>
 8005fd4:	461d      	mov	r5, r3
 8005fd6:	e7ea      	b.n	8005fae <_dtoa_r+0x69e>
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4b9b      	ldr	r3, [pc, #620]	; (8006248 <_dtoa_r+0x938>)
 8005fdc:	f7fa fb14 	bl	8000608 <__aeabi_dmul>
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	460f      	mov	r7, r1
 8005fe8:	f7fa fd76 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d09a      	beq.n	8005f26 <_dtoa_r+0x616>
 8005ff0:	e7cb      	b.n	8005f8a <_dtoa_r+0x67a>
 8005ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff4:	2a00      	cmp	r2, #0
 8005ff6:	f000 808b 	beq.w	8006110 <_dtoa_r+0x800>
 8005ffa:	9a06      	ldr	r2, [sp, #24]
 8005ffc:	2a01      	cmp	r2, #1
 8005ffe:	dc6e      	bgt.n	80060de <_dtoa_r+0x7ce>
 8006000:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006002:	2a00      	cmp	r2, #0
 8006004:	d067      	beq.n	80060d6 <_dtoa_r+0x7c6>
 8006006:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800600a:	9f07      	ldr	r7, [sp, #28]
 800600c:	9d05      	ldr	r5, [sp, #20]
 800600e:	9a05      	ldr	r2, [sp, #20]
 8006010:	2101      	movs	r1, #1
 8006012:	441a      	add	r2, r3
 8006014:	4620      	mov	r0, r4
 8006016:	9205      	str	r2, [sp, #20]
 8006018:	4498      	add	r8, r3
 800601a:	f000 fd04 	bl	8006a26 <__i2b>
 800601e:	4606      	mov	r6, r0
 8006020:	2d00      	cmp	r5, #0
 8006022:	dd0c      	ble.n	800603e <_dtoa_r+0x72e>
 8006024:	f1b8 0f00 	cmp.w	r8, #0
 8006028:	dd09      	ble.n	800603e <_dtoa_r+0x72e>
 800602a:	4545      	cmp	r5, r8
 800602c:	9a05      	ldr	r2, [sp, #20]
 800602e:	462b      	mov	r3, r5
 8006030:	bfa8      	it	ge
 8006032:	4643      	movge	r3, r8
 8006034:	1ad2      	subs	r2, r2, r3
 8006036:	9205      	str	r2, [sp, #20]
 8006038:	1aed      	subs	r5, r5, r3
 800603a:	eba8 0803 	sub.w	r8, r8, r3
 800603e:	9b07      	ldr	r3, [sp, #28]
 8006040:	b1eb      	cbz	r3, 800607e <_dtoa_r+0x76e>
 8006042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006044:	2b00      	cmp	r3, #0
 8006046:	d067      	beq.n	8006118 <_dtoa_r+0x808>
 8006048:	b18f      	cbz	r7, 800606e <_dtoa_r+0x75e>
 800604a:	4631      	mov	r1, r6
 800604c:	463a      	mov	r2, r7
 800604e:	4620      	mov	r0, r4
 8006050:	f000 fd88 	bl	8006b64 <__pow5mult>
 8006054:	9a04      	ldr	r2, [sp, #16]
 8006056:	4601      	mov	r1, r0
 8006058:	4606      	mov	r6, r0
 800605a:	4620      	mov	r0, r4
 800605c:	f000 fcec 	bl	8006a38 <__multiply>
 8006060:	9904      	ldr	r1, [sp, #16]
 8006062:	9008      	str	r0, [sp, #32]
 8006064:	4620      	mov	r0, r4
 8006066:	f000 fc3e 	bl	80068e6 <_Bfree>
 800606a:	9b08      	ldr	r3, [sp, #32]
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	9b07      	ldr	r3, [sp, #28]
 8006070:	1bda      	subs	r2, r3, r7
 8006072:	d004      	beq.n	800607e <_dtoa_r+0x76e>
 8006074:	9904      	ldr	r1, [sp, #16]
 8006076:	4620      	mov	r0, r4
 8006078:	f000 fd74 	bl	8006b64 <__pow5mult>
 800607c:	9004      	str	r0, [sp, #16]
 800607e:	2101      	movs	r1, #1
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fcd0 	bl	8006a26 <__i2b>
 8006086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006088:	4607      	mov	r7, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 81d0 	beq.w	8006430 <_dtoa_r+0xb20>
 8006090:	461a      	mov	r2, r3
 8006092:	4601      	mov	r1, r0
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fd65 	bl	8006b64 <__pow5mult>
 800609a:	9b06      	ldr	r3, [sp, #24]
 800609c:	2b01      	cmp	r3, #1
 800609e:	4607      	mov	r7, r0
 80060a0:	dc40      	bgt.n	8006124 <_dtoa_r+0x814>
 80060a2:	9b00      	ldr	r3, [sp, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d139      	bne.n	800611c <_dtoa_r+0x80c>
 80060a8:	9b01      	ldr	r3, [sp, #4]
 80060aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d136      	bne.n	8006120 <_dtoa_r+0x810>
 80060b2:	9b01      	ldr	r3, [sp, #4]
 80060b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060b8:	0d1b      	lsrs	r3, r3, #20
 80060ba:	051b      	lsls	r3, r3, #20
 80060bc:	b12b      	cbz	r3, 80060ca <_dtoa_r+0x7ba>
 80060be:	9b05      	ldr	r3, [sp, #20]
 80060c0:	3301      	adds	r3, #1
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	f108 0801 	add.w	r8, r8, #1
 80060c8:	2301      	movs	r3, #1
 80060ca:	9307      	str	r3, [sp, #28]
 80060cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d12a      	bne.n	8006128 <_dtoa_r+0x818>
 80060d2:	2001      	movs	r0, #1
 80060d4:	e030      	b.n	8006138 <_dtoa_r+0x828>
 80060d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060dc:	e795      	b.n	800600a <_dtoa_r+0x6fa>
 80060de:	9b07      	ldr	r3, [sp, #28]
 80060e0:	f109 37ff 	add.w	r7, r9, #4294967295
 80060e4:	42bb      	cmp	r3, r7
 80060e6:	bfbf      	itttt	lt
 80060e8:	9b07      	ldrlt	r3, [sp, #28]
 80060ea:	9707      	strlt	r7, [sp, #28]
 80060ec:	1afa      	sublt	r2, r7, r3
 80060ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80060f0:	bfbb      	ittet	lt
 80060f2:	189b      	addlt	r3, r3, r2
 80060f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80060f6:	1bdf      	subge	r7, r3, r7
 80060f8:	2700      	movlt	r7, #0
 80060fa:	f1b9 0f00 	cmp.w	r9, #0
 80060fe:	bfb5      	itete	lt
 8006100:	9b05      	ldrlt	r3, [sp, #20]
 8006102:	9d05      	ldrge	r5, [sp, #20]
 8006104:	eba3 0509 	sublt.w	r5, r3, r9
 8006108:	464b      	movge	r3, r9
 800610a:	bfb8      	it	lt
 800610c:	2300      	movlt	r3, #0
 800610e:	e77e      	b.n	800600e <_dtoa_r+0x6fe>
 8006110:	9f07      	ldr	r7, [sp, #28]
 8006112:	9d05      	ldr	r5, [sp, #20]
 8006114:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006116:	e783      	b.n	8006020 <_dtoa_r+0x710>
 8006118:	9a07      	ldr	r2, [sp, #28]
 800611a:	e7ab      	b.n	8006074 <_dtoa_r+0x764>
 800611c:	2300      	movs	r3, #0
 800611e:	e7d4      	b.n	80060ca <_dtoa_r+0x7ba>
 8006120:	9b00      	ldr	r3, [sp, #0]
 8006122:	e7d2      	b.n	80060ca <_dtoa_r+0x7ba>
 8006124:	2300      	movs	r3, #0
 8006126:	9307      	str	r3, [sp, #28]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800612e:	6918      	ldr	r0, [r3, #16]
 8006130:	f000 fc2b 	bl	800698a <__hi0bits>
 8006134:	f1c0 0020 	rsb	r0, r0, #32
 8006138:	4440      	add	r0, r8
 800613a:	f010 001f 	ands.w	r0, r0, #31
 800613e:	d047      	beq.n	80061d0 <_dtoa_r+0x8c0>
 8006140:	f1c0 0320 	rsb	r3, r0, #32
 8006144:	2b04      	cmp	r3, #4
 8006146:	dd3b      	ble.n	80061c0 <_dtoa_r+0x8b0>
 8006148:	9b05      	ldr	r3, [sp, #20]
 800614a:	f1c0 001c 	rsb	r0, r0, #28
 800614e:	4403      	add	r3, r0
 8006150:	9305      	str	r3, [sp, #20]
 8006152:	4405      	add	r5, r0
 8006154:	4480      	add	r8, r0
 8006156:	9b05      	ldr	r3, [sp, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	dd05      	ble.n	8006168 <_dtoa_r+0x858>
 800615c:	461a      	mov	r2, r3
 800615e:	9904      	ldr	r1, [sp, #16]
 8006160:	4620      	mov	r0, r4
 8006162:	f000 fd4d 	bl	8006c00 <__lshift>
 8006166:	9004      	str	r0, [sp, #16]
 8006168:	f1b8 0f00 	cmp.w	r8, #0
 800616c:	dd05      	ble.n	800617a <_dtoa_r+0x86a>
 800616e:	4639      	mov	r1, r7
 8006170:	4642      	mov	r2, r8
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fd44 	bl	8006c00 <__lshift>
 8006178:	4607      	mov	r7, r0
 800617a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800617c:	b353      	cbz	r3, 80061d4 <_dtoa_r+0x8c4>
 800617e:	4639      	mov	r1, r7
 8006180:	9804      	ldr	r0, [sp, #16]
 8006182:	f000 fd91 	bl	8006ca8 <__mcmp>
 8006186:	2800      	cmp	r0, #0
 8006188:	da24      	bge.n	80061d4 <_dtoa_r+0x8c4>
 800618a:	2300      	movs	r3, #0
 800618c:	220a      	movs	r2, #10
 800618e:	9904      	ldr	r1, [sp, #16]
 8006190:	4620      	mov	r0, r4
 8006192:	f000 fbbf 	bl	8006914 <__multadd>
 8006196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006198:	9004      	str	r0, [sp, #16]
 800619a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 814d 	beq.w	800643e <_dtoa_r+0xb2e>
 80061a4:	2300      	movs	r3, #0
 80061a6:	4631      	mov	r1, r6
 80061a8:	220a      	movs	r2, #10
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 fbb2 	bl	8006914 <__multadd>
 80061b0:	9b02      	ldr	r3, [sp, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	4606      	mov	r6, r0
 80061b6:	dc4f      	bgt.n	8006258 <_dtoa_r+0x948>
 80061b8:	9b06      	ldr	r3, [sp, #24]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	dd4c      	ble.n	8006258 <_dtoa_r+0x948>
 80061be:	e011      	b.n	80061e4 <_dtoa_r+0x8d4>
 80061c0:	d0c9      	beq.n	8006156 <_dtoa_r+0x846>
 80061c2:	9a05      	ldr	r2, [sp, #20]
 80061c4:	331c      	adds	r3, #28
 80061c6:	441a      	add	r2, r3
 80061c8:	9205      	str	r2, [sp, #20]
 80061ca:	441d      	add	r5, r3
 80061cc:	4498      	add	r8, r3
 80061ce:	e7c2      	b.n	8006156 <_dtoa_r+0x846>
 80061d0:	4603      	mov	r3, r0
 80061d2:	e7f6      	b.n	80061c2 <_dtoa_r+0x8b2>
 80061d4:	f1b9 0f00 	cmp.w	r9, #0
 80061d8:	dc38      	bgt.n	800624c <_dtoa_r+0x93c>
 80061da:	9b06      	ldr	r3, [sp, #24]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	dd35      	ble.n	800624c <_dtoa_r+0x93c>
 80061e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80061e4:	9b02      	ldr	r3, [sp, #8]
 80061e6:	b963      	cbnz	r3, 8006202 <_dtoa_r+0x8f2>
 80061e8:	4639      	mov	r1, r7
 80061ea:	2205      	movs	r2, #5
 80061ec:	4620      	mov	r0, r4
 80061ee:	f000 fb91 	bl	8006914 <__multadd>
 80061f2:	4601      	mov	r1, r0
 80061f4:	4607      	mov	r7, r0
 80061f6:	9804      	ldr	r0, [sp, #16]
 80061f8:	f000 fd56 	bl	8006ca8 <__mcmp>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	f73f adcc 	bgt.w	8005d9a <_dtoa_r+0x48a>
 8006202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006204:	465d      	mov	r5, fp
 8006206:	ea6f 0a03 	mvn.w	sl, r3
 800620a:	f04f 0900 	mov.w	r9, #0
 800620e:	4639      	mov	r1, r7
 8006210:	4620      	mov	r0, r4
 8006212:	f000 fb68 	bl	80068e6 <_Bfree>
 8006216:	2e00      	cmp	r6, #0
 8006218:	f43f aeb7 	beq.w	8005f8a <_dtoa_r+0x67a>
 800621c:	f1b9 0f00 	cmp.w	r9, #0
 8006220:	d005      	beq.n	800622e <_dtoa_r+0x91e>
 8006222:	45b1      	cmp	r9, r6
 8006224:	d003      	beq.n	800622e <_dtoa_r+0x91e>
 8006226:	4649      	mov	r1, r9
 8006228:	4620      	mov	r0, r4
 800622a:	f000 fb5c 	bl	80068e6 <_Bfree>
 800622e:	4631      	mov	r1, r6
 8006230:	4620      	mov	r0, r4
 8006232:	f000 fb58 	bl	80068e6 <_Bfree>
 8006236:	e6a8      	b.n	8005f8a <_dtoa_r+0x67a>
 8006238:	2700      	movs	r7, #0
 800623a:	463e      	mov	r6, r7
 800623c:	e7e1      	b.n	8006202 <_dtoa_r+0x8f2>
 800623e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006242:	463e      	mov	r6, r7
 8006244:	e5a9      	b.n	8005d9a <_dtoa_r+0x48a>
 8006246:	bf00      	nop
 8006248:	40240000 	.word	0x40240000
 800624c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800624e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 80fa 	beq.w	800644c <_dtoa_r+0xb3c>
 8006258:	2d00      	cmp	r5, #0
 800625a:	dd05      	ble.n	8006268 <_dtoa_r+0x958>
 800625c:	4631      	mov	r1, r6
 800625e:	462a      	mov	r2, r5
 8006260:	4620      	mov	r0, r4
 8006262:	f000 fccd 	bl	8006c00 <__lshift>
 8006266:	4606      	mov	r6, r0
 8006268:	9b07      	ldr	r3, [sp, #28]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d04c      	beq.n	8006308 <_dtoa_r+0x9f8>
 800626e:	6871      	ldr	r1, [r6, #4]
 8006270:	4620      	mov	r0, r4
 8006272:	f000 fb04 	bl	800687e <_Balloc>
 8006276:	6932      	ldr	r2, [r6, #16]
 8006278:	3202      	adds	r2, #2
 800627a:	4605      	mov	r5, r0
 800627c:	0092      	lsls	r2, r2, #2
 800627e:	f106 010c 	add.w	r1, r6, #12
 8006282:	300c      	adds	r0, #12
 8006284:	f000 faf0 	bl	8006868 <memcpy>
 8006288:	2201      	movs	r2, #1
 800628a:	4629      	mov	r1, r5
 800628c:	4620      	mov	r0, r4
 800628e:	f000 fcb7 	bl	8006c00 <__lshift>
 8006292:	9b00      	ldr	r3, [sp, #0]
 8006294:	f8cd b014 	str.w	fp, [sp, #20]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	46b1      	mov	r9, r6
 800629e:	9307      	str	r3, [sp, #28]
 80062a0:	4606      	mov	r6, r0
 80062a2:	4639      	mov	r1, r7
 80062a4:	9804      	ldr	r0, [sp, #16]
 80062a6:	f7ff faa7 	bl	80057f8 <quorem>
 80062aa:	4649      	mov	r1, r9
 80062ac:	4605      	mov	r5, r0
 80062ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80062b2:	9804      	ldr	r0, [sp, #16]
 80062b4:	f000 fcf8 	bl	8006ca8 <__mcmp>
 80062b8:	4632      	mov	r2, r6
 80062ba:	9000      	str	r0, [sp, #0]
 80062bc:	4639      	mov	r1, r7
 80062be:	4620      	mov	r0, r4
 80062c0:	f000 fd0c 	bl	8006cdc <__mdiff>
 80062c4:	68c3      	ldr	r3, [r0, #12]
 80062c6:	4602      	mov	r2, r0
 80062c8:	bb03      	cbnz	r3, 800630c <_dtoa_r+0x9fc>
 80062ca:	4601      	mov	r1, r0
 80062cc:	9008      	str	r0, [sp, #32]
 80062ce:	9804      	ldr	r0, [sp, #16]
 80062d0:	f000 fcea 	bl	8006ca8 <__mcmp>
 80062d4:	9a08      	ldr	r2, [sp, #32]
 80062d6:	4603      	mov	r3, r0
 80062d8:	4611      	mov	r1, r2
 80062da:	4620      	mov	r0, r4
 80062dc:	9308      	str	r3, [sp, #32]
 80062de:	f000 fb02 	bl	80068e6 <_Bfree>
 80062e2:	9b08      	ldr	r3, [sp, #32]
 80062e4:	b9a3      	cbnz	r3, 8006310 <_dtoa_r+0xa00>
 80062e6:	9a06      	ldr	r2, [sp, #24]
 80062e8:	b992      	cbnz	r2, 8006310 <_dtoa_r+0xa00>
 80062ea:	9a07      	ldr	r2, [sp, #28]
 80062ec:	b982      	cbnz	r2, 8006310 <_dtoa_r+0xa00>
 80062ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80062f2:	d029      	beq.n	8006348 <_dtoa_r+0xa38>
 80062f4:	9b00      	ldr	r3, [sp, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dd01      	ble.n	80062fe <_dtoa_r+0x9ee>
 80062fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80062fe:	9b05      	ldr	r3, [sp, #20]
 8006300:	1c5d      	adds	r5, r3, #1
 8006302:	f883 8000 	strb.w	r8, [r3]
 8006306:	e782      	b.n	800620e <_dtoa_r+0x8fe>
 8006308:	4630      	mov	r0, r6
 800630a:	e7c2      	b.n	8006292 <_dtoa_r+0x982>
 800630c:	2301      	movs	r3, #1
 800630e:	e7e3      	b.n	80062d8 <_dtoa_r+0x9c8>
 8006310:	9a00      	ldr	r2, [sp, #0]
 8006312:	2a00      	cmp	r2, #0
 8006314:	db04      	blt.n	8006320 <_dtoa_r+0xa10>
 8006316:	d125      	bne.n	8006364 <_dtoa_r+0xa54>
 8006318:	9a06      	ldr	r2, [sp, #24]
 800631a:	bb1a      	cbnz	r2, 8006364 <_dtoa_r+0xa54>
 800631c:	9a07      	ldr	r2, [sp, #28]
 800631e:	bb0a      	cbnz	r2, 8006364 <_dtoa_r+0xa54>
 8006320:	2b00      	cmp	r3, #0
 8006322:	ddec      	ble.n	80062fe <_dtoa_r+0x9ee>
 8006324:	2201      	movs	r2, #1
 8006326:	9904      	ldr	r1, [sp, #16]
 8006328:	4620      	mov	r0, r4
 800632a:	f000 fc69 	bl	8006c00 <__lshift>
 800632e:	4639      	mov	r1, r7
 8006330:	9004      	str	r0, [sp, #16]
 8006332:	f000 fcb9 	bl	8006ca8 <__mcmp>
 8006336:	2800      	cmp	r0, #0
 8006338:	dc03      	bgt.n	8006342 <_dtoa_r+0xa32>
 800633a:	d1e0      	bne.n	80062fe <_dtoa_r+0x9ee>
 800633c:	f018 0f01 	tst.w	r8, #1
 8006340:	d0dd      	beq.n	80062fe <_dtoa_r+0x9ee>
 8006342:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006346:	d1d8      	bne.n	80062fa <_dtoa_r+0x9ea>
 8006348:	9b05      	ldr	r3, [sp, #20]
 800634a:	9a05      	ldr	r2, [sp, #20]
 800634c:	1c5d      	adds	r5, r3, #1
 800634e:	2339      	movs	r3, #57	; 0x39
 8006350:	7013      	strb	r3, [r2, #0]
 8006352:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006356:	2b39      	cmp	r3, #57	; 0x39
 8006358:	f105 32ff 	add.w	r2, r5, #4294967295
 800635c:	d04f      	beq.n	80063fe <_dtoa_r+0xaee>
 800635e:	3301      	adds	r3, #1
 8006360:	7013      	strb	r3, [r2, #0]
 8006362:	e754      	b.n	800620e <_dtoa_r+0x8fe>
 8006364:	9a05      	ldr	r2, [sp, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f102 0501 	add.w	r5, r2, #1
 800636c:	dd06      	ble.n	800637c <_dtoa_r+0xa6c>
 800636e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006372:	d0e9      	beq.n	8006348 <_dtoa_r+0xa38>
 8006374:	f108 0801 	add.w	r8, r8, #1
 8006378:	9b05      	ldr	r3, [sp, #20]
 800637a:	e7c2      	b.n	8006302 <_dtoa_r+0x9f2>
 800637c:	9a02      	ldr	r2, [sp, #8]
 800637e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006382:	eba5 030b 	sub.w	r3, r5, fp
 8006386:	4293      	cmp	r3, r2
 8006388:	d021      	beq.n	80063ce <_dtoa_r+0xabe>
 800638a:	2300      	movs	r3, #0
 800638c:	220a      	movs	r2, #10
 800638e:	9904      	ldr	r1, [sp, #16]
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fabf 	bl	8006914 <__multadd>
 8006396:	45b1      	cmp	r9, r6
 8006398:	9004      	str	r0, [sp, #16]
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	f04f 020a 	mov.w	r2, #10
 80063a2:	4649      	mov	r1, r9
 80063a4:	4620      	mov	r0, r4
 80063a6:	d105      	bne.n	80063b4 <_dtoa_r+0xaa4>
 80063a8:	f000 fab4 	bl	8006914 <__multadd>
 80063ac:	4681      	mov	r9, r0
 80063ae:	4606      	mov	r6, r0
 80063b0:	9505      	str	r5, [sp, #20]
 80063b2:	e776      	b.n	80062a2 <_dtoa_r+0x992>
 80063b4:	f000 faae 	bl	8006914 <__multadd>
 80063b8:	4631      	mov	r1, r6
 80063ba:	4681      	mov	r9, r0
 80063bc:	2300      	movs	r3, #0
 80063be:	220a      	movs	r2, #10
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 faa7 	bl	8006914 <__multadd>
 80063c6:	4606      	mov	r6, r0
 80063c8:	e7f2      	b.n	80063b0 <_dtoa_r+0xaa0>
 80063ca:	f04f 0900 	mov.w	r9, #0
 80063ce:	2201      	movs	r2, #1
 80063d0:	9904      	ldr	r1, [sp, #16]
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 fc14 	bl	8006c00 <__lshift>
 80063d8:	4639      	mov	r1, r7
 80063da:	9004      	str	r0, [sp, #16]
 80063dc:	f000 fc64 	bl	8006ca8 <__mcmp>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dcb6      	bgt.n	8006352 <_dtoa_r+0xa42>
 80063e4:	d102      	bne.n	80063ec <_dtoa_r+0xadc>
 80063e6:	f018 0f01 	tst.w	r8, #1
 80063ea:	d1b2      	bne.n	8006352 <_dtoa_r+0xa42>
 80063ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063f0:	2b30      	cmp	r3, #48	; 0x30
 80063f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80063f6:	f47f af0a 	bne.w	800620e <_dtoa_r+0x8fe>
 80063fa:	4615      	mov	r5, r2
 80063fc:	e7f6      	b.n	80063ec <_dtoa_r+0xadc>
 80063fe:	4593      	cmp	fp, r2
 8006400:	d105      	bne.n	800640e <_dtoa_r+0xafe>
 8006402:	2331      	movs	r3, #49	; 0x31
 8006404:	f10a 0a01 	add.w	sl, sl, #1
 8006408:	f88b 3000 	strb.w	r3, [fp]
 800640c:	e6ff      	b.n	800620e <_dtoa_r+0x8fe>
 800640e:	4615      	mov	r5, r2
 8006410:	e79f      	b.n	8006352 <_dtoa_r+0xa42>
 8006412:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006478 <_dtoa_r+0xb68>
 8006416:	e007      	b.n	8006428 <_dtoa_r+0xb18>
 8006418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800641a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800647c <_dtoa_r+0xb6c>
 800641e:	b11b      	cbz	r3, 8006428 <_dtoa_r+0xb18>
 8006420:	f10b 0308 	add.w	r3, fp, #8
 8006424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	4658      	mov	r0, fp
 800642a:	b017      	add	sp, #92	; 0x5c
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006430:	9b06      	ldr	r3, [sp, #24]
 8006432:	2b01      	cmp	r3, #1
 8006434:	f77f ae35 	ble.w	80060a2 <_dtoa_r+0x792>
 8006438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800643a:	9307      	str	r3, [sp, #28]
 800643c:	e649      	b.n	80060d2 <_dtoa_r+0x7c2>
 800643e:	9b02      	ldr	r3, [sp, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	dc03      	bgt.n	800644c <_dtoa_r+0xb3c>
 8006444:	9b06      	ldr	r3, [sp, #24]
 8006446:	2b02      	cmp	r3, #2
 8006448:	f73f aecc 	bgt.w	80061e4 <_dtoa_r+0x8d4>
 800644c:	465d      	mov	r5, fp
 800644e:	4639      	mov	r1, r7
 8006450:	9804      	ldr	r0, [sp, #16]
 8006452:	f7ff f9d1 	bl	80057f8 <quorem>
 8006456:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800645a:	f805 8b01 	strb.w	r8, [r5], #1
 800645e:	9a02      	ldr	r2, [sp, #8]
 8006460:	eba5 030b 	sub.w	r3, r5, fp
 8006464:	429a      	cmp	r2, r3
 8006466:	ddb0      	ble.n	80063ca <_dtoa_r+0xaba>
 8006468:	2300      	movs	r3, #0
 800646a:	220a      	movs	r2, #10
 800646c:	9904      	ldr	r1, [sp, #16]
 800646e:	4620      	mov	r0, r4
 8006470:	f000 fa50 	bl	8006914 <__multadd>
 8006474:	9004      	str	r0, [sp, #16]
 8006476:	e7ea      	b.n	800644e <_dtoa_r+0xb3e>
 8006478:	0800857c 	.word	0x0800857c
 800647c:	080085a0 	.word	0x080085a0

08006480 <__sflush_r>:
 8006480:	898a      	ldrh	r2, [r1, #12]
 8006482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006486:	4605      	mov	r5, r0
 8006488:	0710      	lsls	r0, r2, #28
 800648a:	460c      	mov	r4, r1
 800648c:	d458      	bmi.n	8006540 <__sflush_r+0xc0>
 800648e:	684b      	ldr	r3, [r1, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	dc05      	bgt.n	80064a0 <__sflush_r+0x20>
 8006494:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	dc02      	bgt.n	80064a0 <__sflush_r+0x20>
 800649a:	2000      	movs	r0, #0
 800649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064a2:	2e00      	cmp	r6, #0
 80064a4:	d0f9      	beq.n	800649a <__sflush_r+0x1a>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064ac:	682f      	ldr	r7, [r5, #0]
 80064ae:	6a21      	ldr	r1, [r4, #32]
 80064b0:	602b      	str	r3, [r5, #0]
 80064b2:	d032      	beq.n	800651a <__sflush_r+0x9a>
 80064b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	075a      	lsls	r2, r3, #29
 80064ba:	d505      	bpl.n	80064c8 <__sflush_r+0x48>
 80064bc:	6863      	ldr	r3, [r4, #4]
 80064be:	1ac0      	subs	r0, r0, r3
 80064c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064c2:	b10b      	cbz	r3, 80064c8 <__sflush_r+0x48>
 80064c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064c6:	1ac0      	subs	r0, r0, r3
 80064c8:	2300      	movs	r3, #0
 80064ca:	4602      	mov	r2, r0
 80064cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064ce:	6a21      	ldr	r1, [r4, #32]
 80064d0:	4628      	mov	r0, r5
 80064d2:	47b0      	blx	r6
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	d106      	bne.n	80064e8 <__sflush_r+0x68>
 80064da:	6829      	ldr	r1, [r5, #0]
 80064dc:	291d      	cmp	r1, #29
 80064de:	d848      	bhi.n	8006572 <__sflush_r+0xf2>
 80064e0:	4a29      	ldr	r2, [pc, #164]	; (8006588 <__sflush_r+0x108>)
 80064e2:	40ca      	lsrs	r2, r1
 80064e4:	07d6      	lsls	r6, r2, #31
 80064e6:	d544      	bpl.n	8006572 <__sflush_r+0xf2>
 80064e8:	2200      	movs	r2, #0
 80064ea:	6062      	str	r2, [r4, #4]
 80064ec:	04d9      	lsls	r1, r3, #19
 80064ee:	6922      	ldr	r2, [r4, #16]
 80064f0:	6022      	str	r2, [r4, #0]
 80064f2:	d504      	bpl.n	80064fe <__sflush_r+0x7e>
 80064f4:	1c42      	adds	r2, r0, #1
 80064f6:	d101      	bne.n	80064fc <__sflush_r+0x7c>
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	b903      	cbnz	r3, 80064fe <__sflush_r+0x7e>
 80064fc:	6560      	str	r0, [r4, #84]	; 0x54
 80064fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006500:	602f      	str	r7, [r5, #0]
 8006502:	2900      	cmp	r1, #0
 8006504:	d0c9      	beq.n	800649a <__sflush_r+0x1a>
 8006506:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800650a:	4299      	cmp	r1, r3
 800650c:	d002      	beq.n	8006514 <__sflush_r+0x94>
 800650e:	4628      	mov	r0, r5
 8006510:	f000 fc9e 	bl	8006e50 <_free_r>
 8006514:	2000      	movs	r0, #0
 8006516:	6360      	str	r0, [r4, #52]	; 0x34
 8006518:	e7c0      	b.n	800649c <__sflush_r+0x1c>
 800651a:	2301      	movs	r3, #1
 800651c:	4628      	mov	r0, r5
 800651e:	47b0      	blx	r6
 8006520:	1c41      	adds	r1, r0, #1
 8006522:	d1c8      	bne.n	80064b6 <__sflush_r+0x36>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0c5      	beq.n	80064b6 <__sflush_r+0x36>
 800652a:	2b1d      	cmp	r3, #29
 800652c:	d001      	beq.n	8006532 <__sflush_r+0xb2>
 800652e:	2b16      	cmp	r3, #22
 8006530:	d101      	bne.n	8006536 <__sflush_r+0xb6>
 8006532:	602f      	str	r7, [r5, #0]
 8006534:	e7b1      	b.n	800649a <__sflush_r+0x1a>
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800653c:	81a3      	strh	r3, [r4, #12]
 800653e:	e7ad      	b.n	800649c <__sflush_r+0x1c>
 8006540:	690f      	ldr	r7, [r1, #16]
 8006542:	2f00      	cmp	r7, #0
 8006544:	d0a9      	beq.n	800649a <__sflush_r+0x1a>
 8006546:	0793      	lsls	r3, r2, #30
 8006548:	680e      	ldr	r6, [r1, #0]
 800654a:	bf08      	it	eq
 800654c:	694b      	ldreq	r3, [r1, #20]
 800654e:	600f      	str	r7, [r1, #0]
 8006550:	bf18      	it	ne
 8006552:	2300      	movne	r3, #0
 8006554:	eba6 0807 	sub.w	r8, r6, r7
 8006558:	608b      	str	r3, [r1, #8]
 800655a:	f1b8 0f00 	cmp.w	r8, #0
 800655e:	dd9c      	ble.n	800649a <__sflush_r+0x1a>
 8006560:	4643      	mov	r3, r8
 8006562:	463a      	mov	r2, r7
 8006564:	6a21      	ldr	r1, [r4, #32]
 8006566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006568:	4628      	mov	r0, r5
 800656a:	47b0      	blx	r6
 800656c:	2800      	cmp	r0, #0
 800656e:	dc06      	bgt.n	800657e <__sflush_r+0xfe>
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006576:	81a3      	strh	r3, [r4, #12]
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	e78e      	b.n	800649c <__sflush_r+0x1c>
 800657e:	4407      	add	r7, r0
 8006580:	eba8 0800 	sub.w	r8, r8, r0
 8006584:	e7e9      	b.n	800655a <__sflush_r+0xda>
 8006586:	bf00      	nop
 8006588:	20400001 	.word	0x20400001

0800658c <_fflush_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	690b      	ldr	r3, [r1, #16]
 8006590:	4605      	mov	r5, r0
 8006592:	460c      	mov	r4, r1
 8006594:	b1db      	cbz	r3, 80065ce <_fflush_r+0x42>
 8006596:	b118      	cbz	r0, 80065a0 <_fflush_r+0x14>
 8006598:	6983      	ldr	r3, [r0, #24]
 800659a:	b90b      	cbnz	r3, 80065a0 <_fflush_r+0x14>
 800659c:	f000 f860 	bl	8006660 <__sinit>
 80065a0:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <_fflush_r+0x48>)
 80065a2:	429c      	cmp	r4, r3
 80065a4:	d109      	bne.n	80065ba <_fflush_r+0x2e>
 80065a6:	686c      	ldr	r4, [r5, #4]
 80065a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ac:	b17b      	cbz	r3, 80065ce <_fflush_r+0x42>
 80065ae:	4621      	mov	r1, r4
 80065b0:	4628      	mov	r0, r5
 80065b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b6:	f7ff bf63 	b.w	8006480 <__sflush_r>
 80065ba:	4b07      	ldr	r3, [pc, #28]	; (80065d8 <_fflush_r+0x4c>)
 80065bc:	429c      	cmp	r4, r3
 80065be:	d101      	bne.n	80065c4 <_fflush_r+0x38>
 80065c0:	68ac      	ldr	r4, [r5, #8]
 80065c2:	e7f1      	b.n	80065a8 <_fflush_r+0x1c>
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <_fflush_r+0x50>)
 80065c6:	429c      	cmp	r4, r3
 80065c8:	bf08      	it	eq
 80065ca:	68ec      	ldreq	r4, [r5, #12]
 80065cc:	e7ec      	b.n	80065a8 <_fflush_r+0x1c>
 80065ce:	2000      	movs	r0, #0
 80065d0:	bd38      	pop	{r3, r4, r5, pc}
 80065d2:	bf00      	nop
 80065d4:	080085d0 	.word	0x080085d0
 80065d8:	080085f0 	.word	0x080085f0
 80065dc:	080085b0 	.word	0x080085b0

080065e0 <std>:
 80065e0:	2300      	movs	r3, #0
 80065e2:	b510      	push	{r4, lr}
 80065e4:	4604      	mov	r4, r0
 80065e6:	e9c0 3300 	strd	r3, r3, [r0]
 80065ea:	6083      	str	r3, [r0, #8]
 80065ec:	8181      	strh	r1, [r0, #12]
 80065ee:	6643      	str	r3, [r0, #100]	; 0x64
 80065f0:	81c2      	strh	r2, [r0, #14]
 80065f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065f6:	6183      	str	r3, [r0, #24]
 80065f8:	4619      	mov	r1, r3
 80065fa:	2208      	movs	r2, #8
 80065fc:	305c      	adds	r0, #92	; 0x5c
 80065fe:	f7fe fbbf 	bl	8004d80 <memset>
 8006602:	4b05      	ldr	r3, [pc, #20]	; (8006618 <std+0x38>)
 8006604:	6263      	str	r3, [r4, #36]	; 0x24
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <std+0x3c>)
 8006608:	62a3      	str	r3, [r4, #40]	; 0x28
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <std+0x40>)
 800660c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800660e:	4b05      	ldr	r3, [pc, #20]	; (8006624 <std+0x44>)
 8006610:	6224      	str	r4, [r4, #32]
 8006612:	6323      	str	r3, [r4, #48]	; 0x30
 8006614:	bd10      	pop	{r4, pc}
 8006616:	bf00      	nop
 8006618:	08007241 	.word	0x08007241
 800661c:	08007263 	.word	0x08007263
 8006620:	0800729b 	.word	0x0800729b
 8006624:	080072bf 	.word	0x080072bf

08006628 <_cleanup_r>:
 8006628:	4901      	ldr	r1, [pc, #4]	; (8006630 <_cleanup_r+0x8>)
 800662a:	f000 b885 	b.w	8006738 <_fwalk_reent>
 800662e:	bf00      	nop
 8006630:	0800658d 	.word	0x0800658d

08006634 <__sfmoreglue>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	1e4a      	subs	r2, r1, #1
 8006638:	2568      	movs	r5, #104	; 0x68
 800663a:	4355      	muls	r5, r2
 800663c:	460e      	mov	r6, r1
 800663e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006642:	f000 fc53 	bl	8006eec <_malloc_r>
 8006646:	4604      	mov	r4, r0
 8006648:	b140      	cbz	r0, 800665c <__sfmoreglue+0x28>
 800664a:	2100      	movs	r1, #0
 800664c:	e9c0 1600 	strd	r1, r6, [r0]
 8006650:	300c      	adds	r0, #12
 8006652:	60a0      	str	r0, [r4, #8]
 8006654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006658:	f7fe fb92 	bl	8004d80 <memset>
 800665c:	4620      	mov	r0, r4
 800665e:	bd70      	pop	{r4, r5, r6, pc}

08006660 <__sinit>:
 8006660:	6983      	ldr	r3, [r0, #24]
 8006662:	b510      	push	{r4, lr}
 8006664:	4604      	mov	r4, r0
 8006666:	bb33      	cbnz	r3, 80066b6 <__sinit+0x56>
 8006668:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800666c:	6503      	str	r3, [r0, #80]	; 0x50
 800666e:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <__sinit+0x58>)
 8006670:	4a12      	ldr	r2, [pc, #72]	; (80066bc <__sinit+0x5c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6282      	str	r2, [r0, #40]	; 0x28
 8006676:	4298      	cmp	r0, r3
 8006678:	bf04      	itt	eq
 800667a:	2301      	moveq	r3, #1
 800667c:	6183      	streq	r3, [r0, #24]
 800667e:	f000 f81f 	bl	80066c0 <__sfp>
 8006682:	6060      	str	r0, [r4, #4]
 8006684:	4620      	mov	r0, r4
 8006686:	f000 f81b 	bl	80066c0 <__sfp>
 800668a:	60a0      	str	r0, [r4, #8]
 800668c:	4620      	mov	r0, r4
 800668e:	f000 f817 	bl	80066c0 <__sfp>
 8006692:	2200      	movs	r2, #0
 8006694:	60e0      	str	r0, [r4, #12]
 8006696:	2104      	movs	r1, #4
 8006698:	6860      	ldr	r0, [r4, #4]
 800669a:	f7ff ffa1 	bl	80065e0 <std>
 800669e:	2201      	movs	r2, #1
 80066a0:	2109      	movs	r1, #9
 80066a2:	68a0      	ldr	r0, [r4, #8]
 80066a4:	f7ff ff9c 	bl	80065e0 <std>
 80066a8:	2202      	movs	r2, #2
 80066aa:	2112      	movs	r1, #18
 80066ac:	68e0      	ldr	r0, [r4, #12]
 80066ae:	f7ff ff97 	bl	80065e0 <std>
 80066b2:	2301      	movs	r3, #1
 80066b4:	61a3      	str	r3, [r4, #24]
 80066b6:	bd10      	pop	{r4, pc}
 80066b8:	08008568 	.word	0x08008568
 80066bc:	08006629 	.word	0x08006629

080066c0 <__sfp>:
 80066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c2:	4b1b      	ldr	r3, [pc, #108]	; (8006730 <__sfp+0x70>)
 80066c4:	681e      	ldr	r6, [r3, #0]
 80066c6:	69b3      	ldr	r3, [r6, #24]
 80066c8:	4607      	mov	r7, r0
 80066ca:	b913      	cbnz	r3, 80066d2 <__sfp+0x12>
 80066cc:	4630      	mov	r0, r6
 80066ce:	f7ff ffc7 	bl	8006660 <__sinit>
 80066d2:	3648      	adds	r6, #72	; 0x48
 80066d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066d8:	3b01      	subs	r3, #1
 80066da:	d503      	bpl.n	80066e4 <__sfp+0x24>
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	b133      	cbz	r3, 80066ee <__sfp+0x2e>
 80066e0:	6836      	ldr	r6, [r6, #0]
 80066e2:	e7f7      	b.n	80066d4 <__sfp+0x14>
 80066e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066e8:	b16d      	cbz	r5, 8006706 <__sfp+0x46>
 80066ea:	3468      	adds	r4, #104	; 0x68
 80066ec:	e7f4      	b.n	80066d8 <__sfp+0x18>
 80066ee:	2104      	movs	r1, #4
 80066f0:	4638      	mov	r0, r7
 80066f2:	f7ff ff9f 	bl	8006634 <__sfmoreglue>
 80066f6:	6030      	str	r0, [r6, #0]
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d1f1      	bne.n	80066e0 <__sfp+0x20>
 80066fc:	230c      	movs	r3, #12
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4604      	mov	r4, r0
 8006702:	4620      	mov	r0, r4
 8006704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006706:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <__sfp+0x74>)
 8006708:	6665      	str	r5, [r4, #100]	; 0x64
 800670a:	e9c4 5500 	strd	r5, r5, [r4]
 800670e:	60a5      	str	r5, [r4, #8]
 8006710:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006714:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006718:	2208      	movs	r2, #8
 800671a:	4629      	mov	r1, r5
 800671c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006720:	f7fe fb2e 	bl	8004d80 <memset>
 8006724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800672c:	e7e9      	b.n	8006702 <__sfp+0x42>
 800672e:	bf00      	nop
 8006730:	08008568 	.word	0x08008568
 8006734:	ffff0001 	.word	0xffff0001

08006738 <_fwalk_reent>:
 8006738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800673c:	4680      	mov	r8, r0
 800673e:	4689      	mov	r9, r1
 8006740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006744:	2600      	movs	r6, #0
 8006746:	b914      	cbnz	r4, 800674e <_fwalk_reent+0x16>
 8006748:	4630      	mov	r0, r6
 800674a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800674e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006752:	3f01      	subs	r7, #1
 8006754:	d501      	bpl.n	800675a <_fwalk_reent+0x22>
 8006756:	6824      	ldr	r4, [r4, #0]
 8006758:	e7f5      	b.n	8006746 <_fwalk_reent+0xe>
 800675a:	89ab      	ldrh	r3, [r5, #12]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d907      	bls.n	8006770 <_fwalk_reent+0x38>
 8006760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006764:	3301      	adds	r3, #1
 8006766:	d003      	beq.n	8006770 <_fwalk_reent+0x38>
 8006768:	4629      	mov	r1, r5
 800676a:	4640      	mov	r0, r8
 800676c:	47c8      	blx	r9
 800676e:	4306      	orrs	r6, r0
 8006770:	3568      	adds	r5, #104	; 0x68
 8006772:	e7ee      	b.n	8006752 <_fwalk_reent+0x1a>

08006774 <_localeconv_r>:
 8006774:	4b04      	ldr	r3, [pc, #16]	; (8006788 <_localeconv_r+0x14>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6a18      	ldr	r0, [r3, #32]
 800677a:	4b04      	ldr	r3, [pc, #16]	; (800678c <_localeconv_r+0x18>)
 800677c:	2800      	cmp	r0, #0
 800677e:	bf08      	it	eq
 8006780:	4618      	moveq	r0, r3
 8006782:	30f0      	adds	r0, #240	; 0xf0
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20000010 	.word	0x20000010
 800678c:	20000074 	.word	0x20000074

08006790 <__swhatbuf_r>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	460e      	mov	r6, r1
 8006794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006798:	2900      	cmp	r1, #0
 800679a:	b096      	sub	sp, #88	; 0x58
 800679c:	4614      	mov	r4, r2
 800679e:	461d      	mov	r5, r3
 80067a0:	da07      	bge.n	80067b2 <__swhatbuf_r+0x22>
 80067a2:	2300      	movs	r3, #0
 80067a4:	602b      	str	r3, [r5, #0]
 80067a6:	89b3      	ldrh	r3, [r6, #12]
 80067a8:	061a      	lsls	r2, r3, #24
 80067aa:	d410      	bmi.n	80067ce <__swhatbuf_r+0x3e>
 80067ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067b0:	e00e      	b.n	80067d0 <__swhatbuf_r+0x40>
 80067b2:	466a      	mov	r2, sp
 80067b4:	f000 fdaa 	bl	800730c <_fstat_r>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	dbf2      	blt.n	80067a2 <__swhatbuf_r+0x12>
 80067bc:	9a01      	ldr	r2, [sp, #4]
 80067be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067c6:	425a      	negs	r2, r3
 80067c8:	415a      	adcs	r2, r3
 80067ca:	602a      	str	r2, [r5, #0]
 80067cc:	e7ee      	b.n	80067ac <__swhatbuf_r+0x1c>
 80067ce:	2340      	movs	r3, #64	; 0x40
 80067d0:	2000      	movs	r0, #0
 80067d2:	6023      	str	r3, [r4, #0]
 80067d4:	b016      	add	sp, #88	; 0x58
 80067d6:	bd70      	pop	{r4, r5, r6, pc}

080067d8 <__smakebuf_r>:
 80067d8:	898b      	ldrh	r3, [r1, #12]
 80067da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067dc:	079d      	lsls	r5, r3, #30
 80067de:	4606      	mov	r6, r0
 80067e0:	460c      	mov	r4, r1
 80067e2:	d507      	bpl.n	80067f4 <__smakebuf_r+0x1c>
 80067e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	6123      	str	r3, [r4, #16]
 80067ec:	2301      	movs	r3, #1
 80067ee:	6163      	str	r3, [r4, #20]
 80067f0:	b002      	add	sp, #8
 80067f2:	bd70      	pop	{r4, r5, r6, pc}
 80067f4:	ab01      	add	r3, sp, #4
 80067f6:	466a      	mov	r2, sp
 80067f8:	f7ff ffca 	bl	8006790 <__swhatbuf_r>
 80067fc:	9900      	ldr	r1, [sp, #0]
 80067fe:	4605      	mov	r5, r0
 8006800:	4630      	mov	r0, r6
 8006802:	f000 fb73 	bl	8006eec <_malloc_r>
 8006806:	b948      	cbnz	r0, 800681c <__smakebuf_r+0x44>
 8006808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680c:	059a      	lsls	r2, r3, #22
 800680e:	d4ef      	bmi.n	80067f0 <__smakebuf_r+0x18>
 8006810:	f023 0303 	bic.w	r3, r3, #3
 8006814:	f043 0302 	orr.w	r3, r3, #2
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	e7e3      	b.n	80067e4 <__smakebuf_r+0xc>
 800681c:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <__smakebuf_r+0x7c>)
 800681e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	6020      	str	r0, [r4, #0]
 8006824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006828:	81a3      	strh	r3, [r4, #12]
 800682a:	9b00      	ldr	r3, [sp, #0]
 800682c:	6163      	str	r3, [r4, #20]
 800682e:	9b01      	ldr	r3, [sp, #4]
 8006830:	6120      	str	r0, [r4, #16]
 8006832:	b15b      	cbz	r3, 800684c <__smakebuf_r+0x74>
 8006834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006838:	4630      	mov	r0, r6
 800683a:	f000 fd79 	bl	8007330 <_isatty_r>
 800683e:	b128      	cbz	r0, 800684c <__smakebuf_r+0x74>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	f043 0301 	orr.w	r3, r3, #1
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	431d      	orrs	r5, r3
 8006850:	81a5      	strh	r5, [r4, #12]
 8006852:	e7cd      	b.n	80067f0 <__smakebuf_r+0x18>
 8006854:	08006629 	.word	0x08006629

08006858 <malloc>:
 8006858:	4b02      	ldr	r3, [pc, #8]	; (8006864 <malloc+0xc>)
 800685a:	4601      	mov	r1, r0
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	f000 bb45 	b.w	8006eec <_malloc_r>
 8006862:	bf00      	nop
 8006864:	20000010 	.word	0x20000010

08006868 <memcpy>:
 8006868:	b510      	push	{r4, lr}
 800686a:	1e43      	subs	r3, r0, #1
 800686c:	440a      	add	r2, r1
 800686e:	4291      	cmp	r1, r2
 8006870:	d100      	bne.n	8006874 <memcpy+0xc>
 8006872:	bd10      	pop	{r4, pc}
 8006874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800687c:	e7f7      	b.n	800686e <memcpy+0x6>

0800687e <_Balloc>:
 800687e:	b570      	push	{r4, r5, r6, lr}
 8006880:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006882:	4604      	mov	r4, r0
 8006884:	460e      	mov	r6, r1
 8006886:	b93d      	cbnz	r5, 8006898 <_Balloc+0x1a>
 8006888:	2010      	movs	r0, #16
 800688a:	f7ff ffe5 	bl	8006858 <malloc>
 800688e:	6260      	str	r0, [r4, #36]	; 0x24
 8006890:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006894:	6005      	str	r5, [r0, #0]
 8006896:	60c5      	str	r5, [r0, #12]
 8006898:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800689a:	68eb      	ldr	r3, [r5, #12]
 800689c:	b183      	cbz	r3, 80068c0 <_Balloc+0x42>
 800689e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80068a6:	b9b8      	cbnz	r0, 80068d8 <_Balloc+0x5a>
 80068a8:	2101      	movs	r1, #1
 80068aa:	fa01 f506 	lsl.w	r5, r1, r6
 80068ae:	1d6a      	adds	r2, r5, #5
 80068b0:	0092      	lsls	r2, r2, #2
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fabe 	bl	8006e34 <_calloc_r>
 80068b8:	b160      	cbz	r0, 80068d4 <_Balloc+0x56>
 80068ba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80068be:	e00e      	b.n	80068de <_Balloc+0x60>
 80068c0:	2221      	movs	r2, #33	; 0x21
 80068c2:	2104      	movs	r1, #4
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 fab5 	bl	8006e34 <_calloc_r>
 80068ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068cc:	60e8      	str	r0, [r5, #12]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e4      	bne.n	800689e <_Balloc+0x20>
 80068d4:	2000      	movs	r0, #0
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	6802      	ldr	r2, [r0, #0]
 80068da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80068de:	2300      	movs	r3, #0
 80068e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068e4:	e7f7      	b.n	80068d6 <_Balloc+0x58>

080068e6 <_Bfree>:
 80068e6:	b570      	push	{r4, r5, r6, lr}
 80068e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80068ea:	4606      	mov	r6, r0
 80068ec:	460d      	mov	r5, r1
 80068ee:	b93c      	cbnz	r4, 8006900 <_Bfree+0x1a>
 80068f0:	2010      	movs	r0, #16
 80068f2:	f7ff ffb1 	bl	8006858 <malloc>
 80068f6:	6270      	str	r0, [r6, #36]	; 0x24
 80068f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068fc:	6004      	str	r4, [r0, #0]
 80068fe:	60c4      	str	r4, [r0, #12]
 8006900:	b13d      	cbz	r5, 8006912 <_Bfree+0x2c>
 8006902:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006904:	686a      	ldr	r2, [r5, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800690c:	6029      	str	r1, [r5, #0]
 800690e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006912:	bd70      	pop	{r4, r5, r6, pc}

08006914 <__multadd>:
 8006914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006918:	690d      	ldr	r5, [r1, #16]
 800691a:	461f      	mov	r7, r3
 800691c:	4606      	mov	r6, r0
 800691e:	460c      	mov	r4, r1
 8006920:	f101 0c14 	add.w	ip, r1, #20
 8006924:	2300      	movs	r3, #0
 8006926:	f8dc 0000 	ldr.w	r0, [ip]
 800692a:	b281      	uxth	r1, r0
 800692c:	fb02 7101 	mla	r1, r2, r1, r7
 8006930:	0c0f      	lsrs	r7, r1, #16
 8006932:	0c00      	lsrs	r0, r0, #16
 8006934:	fb02 7000 	mla	r0, r2, r0, r7
 8006938:	b289      	uxth	r1, r1
 800693a:	3301      	adds	r3, #1
 800693c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006940:	429d      	cmp	r5, r3
 8006942:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006946:	f84c 1b04 	str.w	r1, [ip], #4
 800694a:	dcec      	bgt.n	8006926 <__multadd+0x12>
 800694c:	b1d7      	cbz	r7, 8006984 <__multadd+0x70>
 800694e:	68a3      	ldr	r3, [r4, #8]
 8006950:	42ab      	cmp	r3, r5
 8006952:	dc12      	bgt.n	800697a <__multadd+0x66>
 8006954:	6861      	ldr	r1, [r4, #4]
 8006956:	4630      	mov	r0, r6
 8006958:	3101      	adds	r1, #1
 800695a:	f7ff ff90 	bl	800687e <_Balloc>
 800695e:	6922      	ldr	r2, [r4, #16]
 8006960:	3202      	adds	r2, #2
 8006962:	f104 010c 	add.w	r1, r4, #12
 8006966:	4680      	mov	r8, r0
 8006968:	0092      	lsls	r2, r2, #2
 800696a:	300c      	adds	r0, #12
 800696c:	f7ff ff7c 	bl	8006868 <memcpy>
 8006970:	4621      	mov	r1, r4
 8006972:	4630      	mov	r0, r6
 8006974:	f7ff ffb7 	bl	80068e6 <_Bfree>
 8006978:	4644      	mov	r4, r8
 800697a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800697e:	3501      	adds	r5, #1
 8006980:	615f      	str	r7, [r3, #20]
 8006982:	6125      	str	r5, [r4, #16]
 8006984:	4620      	mov	r0, r4
 8006986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800698a <__hi0bits>:
 800698a:	0c02      	lsrs	r2, r0, #16
 800698c:	0412      	lsls	r2, r2, #16
 800698e:	4603      	mov	r3, r0
 8006990:	b9b2      	cbnz	r2, 80069c0 <__hi0bits+0x36>
 8006992:	0403      	lsls	r3, r0, #16
 8006994:	2010      	movs	r0, #16
 8006996:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800699a:	bf04      	itt	eq
 800699c:	021b      	lsleq	r3, r3, #8
 800699e:	3008      	addeq	r0, #8
 80069a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80069a4:	bf04      	itt	eq
 80069a6:	011b      	lsleq	r3, r3, #4
 80069a8:	3004      	addeq	r0, #4
 80069aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80069ae:	bf04      	itt	eq
 80069b0:	009b      	lsleq	r3, r3, #2
 80069b2:	3002      	addeq	r0, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	db06      	blt.n	80069c6 <__hi0bits+0x3c>
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	d503      	bpl.n	80069c4 <__hi0bits+0x3a>
 80069bc:	3001      	adds	r0, #1
 80069be:	4770      	bx	lr
 80069c0:	2000      	movs	r0, #0
 80069c2:	e7e8      	b.n	8006996 <__hi0bits+0xc>
 80069c4:	2020      	movs	r0, #32
 80069c6:	4770      	bx	lr

080069c8 <__lo0bits>:
 80069c8:	6803      	ldr	r3, [r0, #0]
 80069ca:	f013 0207 	ands.w	r2, r3, #7
 80069ce:	4601      	mov	r1, r0
 80069d0:	d00b      	beq.n	80069ea <__lo0bits+0x22>
 80069d2:	07da      	lsls	r2, r3, #31
 80069d4:	d423      	bmi.n	8006a1e <__lo0bits+0x56>
 80069d6:	0798      	lsls	r0, r3, #30
 80069d8:	bf49      	itett	mi
 80069da:	085b      	lsrmi	r3, r3, #1
 80069dc:	089b      	lsrpl	r3, r3, #2
 80069de:	2001      	movmi	r0, #1
 80069e0:	600b      	strmi	r3, [r1, #0]
 80069e2:	bf5c      	itt	pl
 80069e4:	600b      	strpl	r3, [r1, #0]
 80069e6:	2002      	movpl	r0, #2
 80069e8:	4770      	bx	lr
 80069ea:	b298      	uxth	r0, r3
 80069ec:	b9a8      	cbnz	r0, 8006a1a <__lo0bits+0x52>
 80069ee:	0c1b      	lsrs	r3, r3, #16
 80069f0:	2010      	movs	r0, #16
 80069f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80069f6:	bf04      	itt	eq
 80069f8:	0a1b      	lsreq	r3, r3, #8
 80069fa:	3008      	addeq	r0, #8
 80069fc:	071a      	lsls	r2, r3, #28
 80069fe:	bf04      	itt	eq
 8006a00:	091b      	lsreq	r3, r3, #4
 8006a02:	3004      	addeq	r0, #4
 8006a04:	079a      	lsls	r2, r3, #30
 8006a06:	bf04      	itt	eq
 8006a08:	089b      	lsreq	r3, r3, #2
 8006a0a:	3002      	addeq	r0, #2
 8006a0c:	07da      	lsls	r2, r3, #31
 8006a0e:	d402      	bmi.n	8006a16 <__lo0bits+0x4e>
 8006a10:	085b      	lsrs	r3, r3, #1
 8006a12:	d006      	beq.n	8006a22 <__lo0bits+0x5a>
 8006a14:	3001      	adds	r0, #1
 8006a16:	600b      	str	r3, [r1, #0]
 8006a18:	4770      	bx	lr
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	e7e9      	b.n	80069f2 <__lo0bits+0x2a>
 8006a1e:	2000      	movs	r0, #0
 8006a20:	4770      	bx	lr
 8006a22:	2020      	movs	r0, #32
 8006a24:	4770      	bx	lr

08006a26 <__i2b>:
 8006a26:	b510      	push	{r4, lr}
 8006a28:	460c      	mov	r4, r1
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	f7ff ff27 	bl	800687e <_Balloc>
 8006a30:	2201      	movs	r2, #1
 8006a32:	6144      	str	r4, [r0, #20]
 8006a34:	6102      	str	r2, [r0, #16]
 8006a36:	bd10      	pop	{r4, pc}

08006a38 <__multiply>:
 8006a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	690a      	ldr	r2, [r1, #16]
 8006a40:	6923      	ldr	r3, [r4, #16]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	bfb8      	it	lt
 8006a46:	460b      	movlt	r3, r1
 8006a48:	4688      	mov	r8, r1
 8006a4a:	bfbc      	itt	lt
 8006a4c:	46a0      	movlt	r8, r4
 8006a4e:	461c      	movlt	r4, r3
 8006a50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006a58:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a60:	eb07 0609 	add.w	r6, r7, r9
 8006a64:	42b3      	cmp	r3, r6
 8006a66:	bfb8      	it	lt
 8006a68:	3101      	addlt	r1, #1
 8006a6a:	f7ff ff08 	bl	800687e <_Balloc>
 8006a6e:	f100 0514 	add.w	r5, r0, #20
 8006a72:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006a76:	462b      	mov	r3, r5
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4573      	cmp	r3, lr
 8006a7c:	d316      	bcc.n	8006aac <__multiply+0x74>
 8006a7e:	f104 0214 	add.w	r2, r4, #20
 8006a82:	f108 0114 	add.w	r1, r8, #20
 8006a86:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006a8a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	9b00      	ldr	r3, [sp, #0]
 8006a92:	9201      	str	r2, [sp, #4]
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d80c      	bhi.n	8006ab2 <__multiply+0x7a>
 8006a98:	2e00      	cmp	r6, #0
 8006a9a:	dd03      	ble.n	8006aa4 <__multiply+0x6c>
 8006a9c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d05d      	beq.n	8006b60 <__multiply+0x128>
 8006aa4:	6106      	str	r6, [r0, #16]
 8006aa6:	b003      	add	sp, #12
 8006aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aac:	f843 2b04 	str.w	r2, [r3], #4
 8006ab0:	e7e3      	b.n	8006a7a <__multiply+0x42>
 8006ab2:	f8b2 b000 	ldrh.w	fp, [r2]
 8006ab6:	f1bb 0f00 	cmp.w	fp, #0
 8006aba:	d023      	beq.n	8006b04 <__multiply+0xcc>
 8006abc:	4689      	mov	r9, r1
 8006abe:	46ac      	mov	ip, r5
 8006ac0:	f04f 0800 	mov.w	r8, #0
 8006ac4:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ac8:	f8dc a000 	ldr.w	sl, [ip]
 8006acc:	b2a3      	uxth	r3, r4
 8006ace:	fa1f fa8a 	uxth.w	sl, sl
 8006ad2:	fb0b a303 	mla	r3, fp, r3, sl
 8006ad6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ada:	f8dc 4000 	ldr.w	r4, [ip]
 8006ade:	4443      	add	r3, r8
 8006ae0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ae4:	fb0b 840a 	mla	r4, fp, sl, r8
 8006ae8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006aec:	46e2      	mov	sl, ip
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006af4:	454f      	cmp	r7, r9
 8006af6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006afa:	f84a 3b04 	str.w	r3, [sl], #4
 8006afe:	d82b      	bhi.n	8006b58 <__multiply+0x120>
 8006b00:	f8cc 8004 	str.w	r8, [ip, #4]
 8006b04:	9b01      	ldr	r3, [sp, #4]
 8006b06:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006b0a:	3204      	adds	r2, #4
 8006b0c:	f1ba 0f00 	cmp.w	sl, #0
 8006b10:	d020      	beq.n	8006b54 <__multiply+0x11c>
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	4689      	mov	r9, r1
 8006b16:	46a8      	mov	r8, r5
 8006b18:	f04f 0b00 	mov.w	fp, #0
 8006b1c:	f8b9 c000 	ldrh.w	ip, [r9]
 8006b20:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006b24:	fb0a 440c 	mla	r4, sl, ip, r4
 8006b28:	445c      	add	r4, fp
 8006b2a:	46c4      	mov	ip, r8
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006b32:	f84c 3b04 	str.w	r3, [ip], #4
 8006b36:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b3a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006b3e:	0c1b      	lsrs	r3, r3, #16
 8006b40:	fb0a b303 	mla	r3, sl, r3, fp
 8006b44:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006b48:	454f      	cmp	r7, r9
 8006b4a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006b4e:	d805      	bhi.n	8006b5c <__multiply+0x124>
 8006b50:	f8c8 3004 	str.w	r3, [r8, #4]
 8006b54:	3504      	adds	r5, #4
 8006b56:	e79b      	b.n	8006a90 <__multiply+0x58>
 8006b58:	46d4      	mov	ip, sl
 8006b5a:	e7b3      	b.n	8006ac4 <__multiply+0x8c>
 8006b5c:	46e0      	mov	r8, ip
 8006b5e:	e7dd      	b.n	8006b1c <__multiply+0xe4>
 8006b60:	3e01      	subs	r6, #1
 8006b62:	e799      	b.n	8006a98 <__multiply+0x60>

08006b64 <__pow5mult>:
 8006b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b68:	4615      	mov	r5, r2
 8006b6a:	f012 0203 	ands.w	r2, r2, #3
 8006b6e:	4606      	mov	r6, r0
 8006b70:	460f      	mov	r7, r1
 8006b72:	d007      	beq.n	8006b84 <__pow5mult+0x20>
 8006b74:	3a01      	subs	r2, #1
 8006b76:	4c21      	ldr	r4, [pc, #132]	; (8006bfc <__pow5mult+0x98>)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b7e:	f7ff fec9 	bl	8006914 <__multadd>
 8006b82:	4607      	mov	r7, r0
 8006b84:	10ad      	asrs	r5, r5, #2
 8006b86:	d035      	beq.n	8006bf4 <__pow5mult+0x90>
 8006b88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b8a:	b93c      	cbnz	r4, 8006b9c <__pow5mult+0x38>
 8006b8c:	2010      	movs	r0, #16
 8006b8e:	f7ff fe63 	bl	8006858 <malloc>
 8006b92:	6270      	str	r0, [r6, #36]	; 0x24
 8006b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b98:	6004      	str	r4, [r0, #0]
 8006b9a:	60c4      	str	r4, [r0, #12]
 8006b9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ba4:	b94c      	cbnz	r4, 8006bba <__pow5mult+0x56>
 8006ba6:	f240 2171 	movw	r1, #625	; 0x271
 8006baa:	4630      	mov	r0, r6
 8006bac:	f7ff ff3b 	bl	8006a26 <__i2b>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	6003      	str	r3, [r0, #0]
 8006bba:	f04f 0800 	mov.w	r8, #0
 8006bbe:	07eb      	lsls	r3, r5, #31
 8006bc0:	d50a      	bpl.n	8006bd8 <__pow5mult+0x74>
 8006bc2:	4639      	mov	r1, r7
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f7ff ff36 	bl	8006a38 <__multiply>
 8006bcc:	4639      	mov	r1, r7
 8006bce:	4681      	mov	r9, r0
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f7ff fe88 	bl	80068e6 <_Bfree>
 8006bd6:	464f      	mov	r7, r9
 8006bd8:	106d      	asrs	r5, r5, #1
 8006bda:	d00b      	beq.n	8006bf4 <__pow5mult+0x90>
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	b938      	cbnz	r0, 8006bf0 <__pow5mult+0x8c>
 8006be0:	4622      	mov	r2, r4
 8006be2:	4621      	mov	r1, r4
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7ff ff27 	bl	8006a38 <__multiply>
 8006bea:	6020      	str	r0, [r4, #0]
 8006bec:	f8c0 8000 	str.w	r8, [r0]
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	e7e4      	b.n	8006bbe <__pow5mult+0x5a>
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bfa:	bf00      	nop
 8006bfc:	08008700 	.word	0x08008700

08006c00 <__lshift>:
 8006c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c04:	460c      	mov	r4, r1
 8006c06:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c0a:	6923      	ldr	r3, [r4, #16]
 8006c0c:	6849      	ldr	r1, [r1, #4]
 8006c0e:	eb0a 0903 	add.w	r9, sl, r3
 8006c12:	68a3      	ldr	r3, [r4, #8]
 8006c14:	4607      	mov	r7, r0
 8006c16:	4616      	mov	r6, r2
 8006c18:	f109 0501 	add.w	r5, r9, #1
 8006c1c:	42ab      	cmp	r3, r5
 8006c1e:	db32      	blt.n	8006c86 <__lshift+0x86>
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff fe2c 	bl	800687e <_Balloc>
 8006c26:	2300      	movs	r3, #0
 8006c28:	4680      	mov	r8, r0
 8006c2a:	f100 0114 	add.w	r1, r0, #20
 8006c2e:	461a      	mov	r2, r3
 8006c30:	4553      	cmp	r3, sl
 8006c32:	db2b      	blt.n	8006c8c <__lshift+0x8c>
 8006c34:	6920      	ldr	r0, [r4, #16]
 8006c36:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c3a:	f104 0314 	add.w	r3, r4, #20
 8006c3e:	f016 021f 	ands.w	r2, r6, #31
 8006c42:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c46:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c4a:	d025      	beq.n	8006c98 <__lshift+0x98>
 8006c4c:	f1c2 0e20 	rsb	lr, r2, #32
 8006c50:	2000      	movs	r0, #0
 8006c52:	681e      	ldr	r6, [r3, #0]
 8006c54:	468a      	mov	sl, r1
 8006c56:	4096      	lsls	r6, r2
 8006c58:	4330      	orrs	r0, r6
 8006c5a:	f84a 0b04 	str.w	r0, [sl], #4
 8006c5e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006c62:	459c      	cmp	ip, r3
 8006c64:	fa20 f00e 	lsr.w	r0, r0, lr
 8006c68:	d814      	bhi.n	8006c94 <__lshift+0x94>
 8006c6a:	6048      	str	r0, [r1, #4]
 8006c6c:	b108      	cbz	r0, 8006c72 <__lshift+0x72>
 8006c6e:	f109 0502 	add.w	r5, r9, #2
 8006c72:	3d01      	subs	r5, #1
 8006c74:	4638      	mov	r0, r7
 8006c76:	f8c8 5010 	str.w	r5, [r8, #16]
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	f7ff fe33 	bl	80068e6 <_Bfree>
 8006c80:	4640      	mov	r0, r8
 8006c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c86:	3101      	adds	r1, #1
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	e7c7      	b.n	8006c1c <__lshift+0x1c>
 8006c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006c90:	3301      	adds	r3, #1
 8006c92:	e7cd      	b.n	8006c30 <__lshift+0x30>
 8006c94:	4651      	mov	r1, sl
 8006c96:	e7dc      	b.n	8006c52 <__lshift+0x52>
 8006c98:	3904      	subs	r1, #4
 8006c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ca2:	459c      	cmp	ip, r3
 8006ca4:	d8f9      	bhi.n	8006c9a <__lshift+0x9a>
 8006ca6:	e7e4      	b.n	8006c72 <__lshift+0x72>

08006ca8 <__mcmp>:
 8006ca8:	6903      	ldr	r3, [r0, #16]
 8006caa:	690a      	ldr	r2, [r1, #16]
 8006cac:	1a9b      	subs	r3, r3, r2
 8006cae:	b530      	push	{r4, r5, lr}
 8006cb0:	d10c      	bne.n	8006ccc <__mcmp+0x24>
 8006cb2:	0092      	lsls	r2, r2, #2
 8006cb4:	3014      	adds	r0, #20
 8006cb6:	3114      	adds	r1, #20
 8006cb8:	1884      	adds	r4, r0, r2
 8006cba:	4411      	add	r1, r2
 8006cbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006cc4:	4295      	cmp	r5, r2
 8006cc6:	d003      	beq.n	8006cd0 <__mcmp+0x28>
 8006cc8:	d305      	bcc.n	8006cd6 <__mcmp+0x2e>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4618      	mov	r0, r3
 8006cce:	bd30      	pop	{r4, r5, pc}
 8006cd0:	42a0      	cmp	r0, r4
 8006cd2:	d3f3      	bcc.n	8006cbc <__mcmp+0x14>
 8006cd4:	e7fa      	b.n	8006ccc <__mcmp+0x24>
 8006cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cda:	e7f7      	b.n	8006ccc <__mcmp+0x24>

08006cdc <__mdiff>:
 8006cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	4607      	mov	r7, r0
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	4614      	mov	r4, r2
 8006cea:	f7ff ffdd 	bl	8006ca8 <__mcmp>
 8006cee:	1e06      	subs	r6, r0, #0
 8006cf0:	d108      	bne.n	8006d04 <__mdiff+0x28>
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	f7ff fdc2 	bl	800687e <_Balloc>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d04:	bfa4      	itt	ge
 8006d06:	4623      	movge	r3, r4
 8006d08:	462c      	movge	r4, r5
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	6861      	ldr	r1, [r4, #4]
 8006d0e:	bfa6      	itte	ge
 8006d10:	461d      	movge	r5, r3
 8006d12:	2600      	movge	r6, #0
 8006d14:	2601      	movlt	r6, #1
 8006d16:	f7ff fdb2 	bl	800687e <_Balloc>
 8006d1a:	692b      	ldr	r3, [r5, #16]
 8006d1c:	60c6      	str	r6, [r0, #12]
 8006d1e:	6926      	ldr	r6, [r4, #16]
 8006d20:	f105 0914 	add.w	r9, r5, #20
 8006d24:	f104 0214 	add.w	r2, r4, #20
 8006d28:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006d2c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006d30:	f100 0514 	add.w	r5, r0, #20
 8006d34:	f04f 0e00 	mov.w	lr, #0
 8006d38:	f852 ab04 	ldr.w	sl, [r2], #4
 8006d3c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006d40:	fa1e f18a 	uxtah	r1, lr, sl
 8006d44:	b2a3      	uxth	r3, r4
 8006d46:	1ac9      	subs	r1, r1, r3
 8006d48:	0c23      	lsrs	r3, r4, #16
 8006d4a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006d4e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006d52:	b289      	uxth	r1, r1
 8006d54:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006d58:	45c8      	cmp	r8, r9
 8006d5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d5e:	4694      	mov	ip, r2
 8006d60:	f845 3b04 	str.w	r3, [r5], #4
 8006d64:	d8e8      	bhi.n	8006d38 <__mdiff+0x5c>
 8006d66:	45bc      	cmp	ip, r7
 8006d68:	d304      	bcc.n	8006d74 <__mdiff+0x98>
 8006d6a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006d6e:	b183      	cbz	r3, 8006d92 <__mdiff+0xb6>
 8006d70:	6106      	str	r6, [r0, #16]
 8006d72:	e7c5      	b.n	8006d00 <__mdiff+0x24>
 8006d74:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d78:	fa1e f381 	uxtah	r3, lr, r1
 8006d7c:	141a      	asrs	r2, r3, #16
 8006d7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d88:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006d8c:	f845 3b04 	str.w	r3, [r5], #4
 8006d90:	e7e9      	b.n	8006d66 <__mdiff+0x8a>
 8006d92:	3e01      	subs	r6, #1
 8006d94:	e7e9      	b.n	8006d6a <__mdiff+0x8e>

08006d96 <__d2b>:
 8006d96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d9a:	460e      	mov	r6, r1
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	ec59 8b10 	vmov	r8, r9, d0
 8006da2:	4615      	mov	r5, r2
 8006da4:	f7ff fd6b 	bl	800687e <_Balloc>
 8006da8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006dac:	4607      	mov	r7, r0
 8006dae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006db2:	bb34      	cbnz	r4, 8006e02 <__d2b+0x6c>
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	f1b8 0300 	subs.w	r3, r8, #0
 8006dba:	d027      	beq.n	8006e0c <__d2b+0x76>
 8006dbc:	a802      	add	r0, sp, #8
 8006dbe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006dc2:	f7ff fe01 	bl	80069c8 <__lo0bits>
 8006dc6:	9900      	ldr	r1, [sp, #0]
 8006dc8:	b1f0      	cbz	r0, 8006e08 <__d2b+0x72>
 8006dca:	9a01      	ldr	r2, [sp, #4]
 8006dcc:	f1c0 0320 	rsb	r3, r0, #32
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	430b      	orrs	r3, r1
 8006dd6:	40c2      	lsrs	r2, r0
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	9201      	str	r2, [sp, #4]
 8006ddc:	9b01      	ldr	r3, [sp, #4]
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bf14      	ite	ne
 8006de4:	2102      	movne	r1, #2
 8006de6:	2101      	moveq	r1, #1
 8006de8:	6139      	str	r1, [r7, #16]
 8006dea:	b1c4      	cbz	r4, 8006e1e <__d2b+0x88>
 8006dec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006df0:	4404      	add	r4, r0
 8006df2:	6034      	str	r4, [r6, #0]
 8006df4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006df8:	6028      	str	r0, [r5, #0]
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	b003      	add	sp, #12
 8006dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e06:	e7d5      	b.n	8006db4 <__d2b+0x1e>
 8006e08:	6179      	str	r1, [r7, #20]
 8006e0a:	e7e7      	b.n	8006ddc <__d2b+0x46>
 8006e0c:	a801      	add	r0, sp, #4
 8006e0e:	f7ff fddb 	bl	80069c8 <__lo0bits>
 8006e12:	9b01      	ldr	r3, [sp, #4]
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	2101      	movs	r1, #1
 8006e18:	6139      	str	r1, [r7, #16]
 8006e1a:	3020      	adds	r0, #32
 8006e1c:	e7e5      	b.n	8006dea <__d2b+0x54>
 8006e1e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006e22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e26:	6030      	str	r0, [r6, #0]
 8006e28:	6918      	ldr	r0, [r3, #16]
 8006e2a:	f7ff fdae 	bl	800698a <__hi0bits>
 8006e2e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006e32:	e7e1      	b.n	8006df8 <__d2b+0x62>

08006e34 <_calloc_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	fb02 f401 	mul.w	r4, r2, r1
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	f000 f856 	bl	8006eec <_malloc_r>
 8006e40:	4605      	mov	r5, r0
 8006e42:	b118      	cbz	r0, 8006e4c <_calloc_r+0x18>
 8006e44:	4622      	mov	r2, r4
 8006e46:	2100      	movs	r1, #0
 8006e48:	f7fd ff9a 	bl	8004d80 <memset>
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}

08006e50 <_free_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4605      	mov	r5, r0
 8006e54:	2900      	cmp	r1, #0
 8006e56:	d045      	beq.n	8006ee4 <_free_r+0x94>
 8006e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5c:	1f0c      	subs	r4, r1, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bfb8      	it	lt
 8006e62:	18e4      	addlt	r4, r4, r3
 8006e64:	f000 fa98 	bl	8007398 <__malloc_lock>
 8006e68:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <_free_r+0x98>)
 8006e6a:	6813      	ldr	r3, [r2, #0]
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	b933      	cbnz	r3, 8006e7e <_free_r+0x2e>
 8006e70:	6063      	str	r3, [r4, #4]
 8006e72:	6014      	str	r4, [r2, #0]
 8006e74:	4628      	mov	r0, r5
 8006e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e7a:	f000 ba8e 	b.w	800739a <__malloc_unlock>
 8006e7e:	42a3      	cmp	r3, r4
 8006e80:	d90c      	bls.n	8006e9c <_free_r+0x4c>
 8006e82:	6821      	ldr	r1, [r4, #0]
 8006e84:	1862      	adds	r2, r4, r1
 8006e86:	4293      	cmp	r3, r2
 8006e88:	bf04      	itt	eq
 8006e8a:	681a      	ldreq	r2, [r3, #0]
 8006e8c:	685b      	ldreq	r3, [r3, #4]
 8006e8e:	6063      	str	r3, [r4, #4]
 8006e90:	bf04      	itt	eq
 8006e92:	1852      	addeq	r2, r2, r1
 8006e94:	6022      	streq	r2, [r4, #0]
 8006e96:	6004      	str	r4, [r0, #0]
 8006e98:	e7ec      	b.n	8006e74 <_free_r+0x24>
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	b10a      	cbz	r2, 8006ea4 <_free_r+0x54>
 8006ea0:	42a2      	cmp	r2, r4
 8006ea2:	d9fa      	bls.n	8006e9a <_free_r+0x4a>
 8006ea4:	6819      	ldr	r1, [r3, #0]
 8006ea6:	1858      	adds	r0, r3, r1
 8006ea8:	42a0      	cmp	r0, r4
 8006eaa:	d10b      	bne.n	8006ec4 <_free_r+0x74>
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	4401      	add	r1, r0
 8006eb0:	1858      	adds	r0, r3, r1
 8006eb2:	4282      	cmp	r2, r0
 8006eb4:	6019      	str	r1, [r3, #0]
 8006eb6:	d1dd      	bne.n	8006e74 <_free_r+0x24>
 8006eb8:	6810      	ldr	r0, [r2, #0]
 8006eba:	6852      	ldr	r2, [r2, #4]
 8006ebc:	605a      	str	r2, [r3, #4]
 8006ebe:	4401      	add	r1, r0
 8006ec0:	6019      	str	r1, [r3, #0]
 8006ec2:	e7d7      	b.n	8006e74 <_free_r+0x24>
 8006ec4:	d902      	bls.n	8006ecc <_free_r+0x7c>
 8006ec6:	230c      	movs	r3, #12
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	e7d3      	b.n	8006e74 <_free_r+0x24>
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	1821      	adds	r1, r4, r0
 8006ed0:	428a      	cmp	r2, r1
 8006ed2:	bf04      	itt	eq
 8006ed4:	6811      	ldreq	r1, [r2, #0]
 8006ed6:	6852      	ldreq	r2, [r2, #4]
 8006ed8:	6062      	str	r2, [r4, #4]
 8006eda:	bf04      	itt	eq
 8006edc:	1809      	addeq	r1, r1, r0
 8006ede:	6021      	streq	r1, [r4, #0]
 8006ee0:	605c      	str	r4, [r3, #4]
 8006ee2:	e7c7      	b.n	8006e74 <_free_r+0x24>
 8006ee4:	bd38      	pop	{r3, r4, r5, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000204 	.word	0x20000204

08006eec <_malloc_r>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	1ccd      	adds	r5, r1, #3
 8006ef0:	f025 0503 	bic.w	r5, r5, #3
 8006ef4:	3508      	adds	r5, #8
 8006ef6:	2d0c      	cmp	r5, #12
 8006ef8:	bf38      	it	cc
 8006efa:	250c      	movcc	r5, #12
 8006efc:	2d00      	cmp	r5, #0
 8006efe:	4606      	mov	r6, r0
 8006f00:	db01      	blt.n	8006f06 <_malloc_r+0x1a>
 8006f02:	42a9      	cmp	r1, r5
 8006f04:	d903      	bls.n	8006f0e <_malloc_r+0x22>
 8006f06:	230c      	movs	r3, #12
 8006f08:	6033      	str	r3, [r6, #0]
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	bd70      	pop	{r4, r5, r6, pc}
 8006f0e:	f000 fa43 	bl	8007398 <__malloc_lock>
 8006f12:	4a21      	ldr	r2, [pc, #132]	; (8006f98 <_malloc_r+0xac>)
 8006f14:	6814      	ldr	r4, [r2, #0]
 8006f16:	4621      	mov	r1, r4
 8006f18:	b991      	cbnz	r1, 8006f40 <_malloc_r+0x54>
 8006f1a:	4c20      	ldr	r4, [pc, #128]	; (8006f9c <_malloc_r+0xb0>)
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	b91b      	cbnz	r3, 8006f28 <_malloc_r+0x3c>
 8006f20:	4630      	mov	r0, r6
 8006f22:	f000 f97d 	bl	8007220 <_sbrk_r>
 8006f26:	6020      	str	r0, [r4, #0]
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f000 f978 	bl	8007220 <_sbrk_r>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d124      	bne.n	8006f7e <_malloc_r+0x92>
 8006f34:	230c      	movs	r3, #12
 8006f36:	6033      	str	r3, [r6, #0]
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f000 fa2e 	bl	800739a <__malloc_unlock>
 8006f3e:	e7e4      	b.n	8006f0a <_malloc_r+0x1e>
 8006f40:	680b      	ldr	r3, [r1, #0]
 8006f42:	1b5b      	subs	r3, r3, r5
 8006f44:	d418      	bmi.n	8006f78 <_malloc_r+0x8c>
 8006f46:	2b0b      	cmp	r3, #11
 8006f48:	d90f      	bls.n	8006f6a <_malloc_r+0x7e>
 8006f4a:	600b      	str	r3, [r1, #0]
 8006f4c:	50cd      	str	r5, [r1, r3]
 8006f4e:	18cc      	adds	r4, r1, r3
 8006f50:	4630      	mov	r0, r6
 8006f52:	f000 fa22 	bl	800739a <__malloc_unlock>
 8006f56:	f104 000b 	add.w	r0, r4, #11
 8006f5a:	1d23      	adds	r3, r4, #4
 8006f5c:	f020 0007 	bic.w	r0, r0, #7
 8006f60:	1ac3      	subs	r3, r0, r3
 8006f62:	d0d3      	beq.n	8006f0c <_malloc_r+0x20>
 8006f64:	425a      	negs	r2, r3
 8006f66:	50e2      	str	r2, [r4, r3]
 8006f68:	e7d0      	b.n	8006f0c <_malloc_r+0x20>
 8006f6a:	428c      	cmp	r4, r1
 8006f6c:	684b      	ldr	r3, [r1, #4]
 8006f6e:	bf16      	itet	ne
 8006f70:	6063      	strne	r3, [r4, #4]
 8006f72:	6013      	streq	r3, [r2, #0]
 8006f74:	460c      	movne	r4, r1
 8006f76:	e7eb      	b.n	8006f50 <_malloc_r+0x64>
 8006f78:	460c      	mov	r4, r1
 8006f7a:	6849      	ldr	r1, [r1, #4]
 8006f7c:	e7cc      	b.n	8006f18 <_malloc_r+0x2c>
 8006f7e:	1cc4      	adds	r4, r0, #3
 8006f80:	f024 0403 	bic.w	r4, r4, #3
 8006f84:	42a0      	cmp	r0, r4
 8006f86:	d005      	beq.n	8006f94 <_malloc_r+0xa8>
 8006f88:	1a21      	subs	r1, r4, r0
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f000 f948 	bl	8007220 <_sbrk_r>
 8006f90:	3001      	adds	r0, #1
 8006f92:	d0cf      	beq.n	8006f34 <_malloc_r+0x48>
 8006f94:	6025      	str	r5, [r4, #0]
 8006f96:	e7db      	b.n	8006f50 <_malloc_r+0x64>
 8006f98:	20000204 	.word	0x20000204
 8006f9c:	20000208 	.word	0x20000208

08006fa0 <__sfputc_r>:
 8006fa0:	6893      	ldr	r3, [r2, #8]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	b410      	push	{r4}
 8006fa8:	6093      	str	r3, [r2, #8]
 8006faa:	da08      	bge.n	8006fbe <__sfputc_r+0x1e>
 8006fac:	6994      	ldr	r4, [r2, #24]
 8006fae:	42a3      	cmp	r3, r4
 8006fb0:	db01      	blt.n	8006fb6 <__sfputc_r+0x16>
 8006fb2:	290a      	cmp	r1, #10
 8006fb4:	d103      	bne.n	8006fbe <__sfputc_r+0x1e>
 8006fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fba:	f7fe bb5d 	b.w	8005678 <__swbuf_r>
 8006fbe:	6813      	ldr	r3, [r2, #0]
 8006fc0:	1c58      	adds	r0, r3, #1
 8006fc2:	6010      	str	r0, [r2, #0]
 8006fc4:	7019      	strb	r1, [r3, #0]
 8006fc6:	4608      	mov	r0, r1
 8006fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <__sfputs_r>:
 8006fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	460f      	mov	r7, r1
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	18d5      	adds	r5, r2, r3
 8006fd8:	42ac      	cmp	r4, r5
 8006fda:	d101      	bne.n	8006fe0 <__sfputs_r+0x12>
 8006fdc:	2000      	movs	r0, #0
 8006fde:	e007      	b.n	8006ff0 <__sfputs_r+0x22>
 8006fe0:	463a      	mov	r2, r7
 8006fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f7ff ffda 	bl	8006fa0 <__sfputc_r>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d1f3      	bne.n	8006fd8 <__sfputs_r+0xa>
 8006ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ff4 <_vfiprintf_r>:
 8006ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	b09d      	sub	sp, #116	; 0x74
 8006ffc:	4617      	mov	r7, r2
 8006ffe:	461d      	mov	r5, r3
 8007000:	4606      	mov	r6, r0
 8007002:	b118      	cbz	r0, 800700c <_vfiprintf_r+0x18>
 8007004:	6983      	ldr	r3, [r0, #24]
 8007006:	b90b      	cbnz	r3, 800700c <_vfiprintf_r+0x18>
 8007008:	f7ff fb2a 	bl	8006660 <__sinit>
 800700c:	4b7c      	ldr	r3, [pc, #496]	; (8007200 <_vfiprintf_r+0x20c>)
 800700e:	429c      	cmp	r4, r3
 8007010:	d158      	bne.n	80070c4 <_vfiprintf_r+0xd0>
 8007012:	6874      	ldr	r4, [r6, #4]
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	0718      	lsls	r0, r3, #28
 8007018:	d55e      	bpl.n	80070d8 <_vfiprintf_r+0xe4>
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d05b      	beq.n	80070d8 <_vfiprintf_r+0xe4>
 8007020:	2300      	movs	r3, #0
 8007022:	9309      	str	r3, [sp, #36]	; 0x24
 8007024:	2320      	movs	r3, #32
 8007026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800702a:	2330      	movs	r3, #48	; 0x30
 800702c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007030:	9503      	str	r5, [sp, #12]
 8007032:	f04f 0b01 	mov.w	fp, #1
 8007036:	46b8      	mov	r8, r7
 8007038:	4645      	mov	r5, r8
 800703a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800703e:	b10b      	cbz	r3, 8007044 <_vfiprintf_r+0x50>
 8007040:	2b25      	cmp	r3, #37	; 0x25
 8007042:	d154      	bne.n	80070ee <_vfiprintf_r+0xfa>
 8007044:	ebb8 0a07 	subs.w	sl, r8, r7
 8007048:	d00b      	beq.n	8007062 <_vfiprintf_r+0x6e>
 800704a:	4653      	mov	r3, sl
 800704c:	463a      	mov	r2, r7
 800704e:	4621      	mov	r1, r4
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff ffbc 	bl	8006fce <__sfputs_r>
 8007056:	3001      	adds	r0, #1
 8007058:	f000 80c2 	beq.w	80071e0 <_vfiprintf_r+0x1ec>
 800705c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705e:	4453      	add	r3, sl
 8007060:	9309      	str	r3, [sp, #36]	; 0x24
 8007062:	f898 3000 	ldrb.w	r3, [r8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 80ba 	beq.w	80071e0 <_vfiprintf_r+0x1ec>
 800706c:	2300      	movs	r3, #0
 800706e:	f04f 32ff 	mov.w	r2, #4294967295
 8007072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007076:	9304      	str	r3, [sp, #16]
 8007078:	9307      	str	r3, [sp, #28]
 800707a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800707e:	931a      	str	r3, [sp, #104]	; 0x68
 8007080:	46a8      	mov	r8, r5
 8007082:	2205      	movs	r2, #5
 8007084:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007088:	485e      	ldr	r0, [pc, #376]	; (8007204 <_vfiprintf_r+0x210>)
 800708a:	f7f9 f8b1 	bl	80001f0 <memchr>
 800708e:	9b04      	ldr	r3, [sp, #16]
 8007090:	bb78      	cbnz	r0, 80070f2 <_vfiprintf_r+0xfe>
 8007092:	06d9      	lsls	r1, r3, #27
 8007094:	bf44      	itt	mi
 8007096:	2220      	movmi	r2, #32
 8007098:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800709c:	071a      	lsls	r2, r3, #28
 800709e:	bf44      	itt	mi
 80070a0:	222b      	movmi	r2, #43	; 0x2b
 80070a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070a6:	782a      	ldrb	r2, [r5, #0]
 80070a8:	2a2a      	cmp	r2, #42	; 0x2a
 80070aa:	d02a      	beq.n	8007102 <_vfiprintf_r+0x10e>
 80070ac:	9a07      	ldr	r2, [sp, #28]
 80070ae:	46a8      	mov	r8, r5
 80070b0:	2000      	movs	r0, #0
 80070b2:	250a      	movs	r5, #10
 80070b4:	4641      	mov	r1, r8
 80070b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ba:	3b30      	subs	r3, #48	; 0x30
 80070bc:	2b09      	cmp	r3, #9
 80070be:	d969      	bls.n	8007194 <_vfiprintf_r+0x1a0>
 80070c0:	b360      	cbz	r0, 800711c <_vfiprintf_r+0x128>
 80070c2:	e024      	b.n	800710e <_vfiprintf_r+0x11a>
 80070c4:	4b50      	ldr	r3, [pc, #320]	; (8007208 <_vfiprintf_r+0x214>)
 80070c6:	429c      	cmp	r4, r3
 80070c8:	d101      	bne.n	80070ce <_vfiprintf_r+0xda>
 80070ca:	68b4      	ldr	r4, [r6, #8]
 80070cc:	e7a2      	b.n	8007014 <_vfiprintf_r+0x20>
 80070ce:	4b4f      	ldr	r3, [pc, #316]	; (800720c <_vfiprintf_r+0x218>)
 80070d0:	429c      	cmp	r4, r3
 80070d2:	bf08      	it	eq
 80070d4:	68f4      	ldreq	r4, [r6, #12]
 80070d6:	e79d      	b.n	8007014 <_vfiprintf_r+0x20>
 80070d8:	4621      	mov	r1, r4
 80070da:	4630      	mov	r0, r6
 80070dc:	f7fe fb1e 	bl	800571c <__swsetup_r>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d09d      	beq.n	8007020 <_vfiprintf_r+0x2c>
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	b01d      	add	sp, #116	; 0x74
 80070ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ee:	46a8      	mov	r8, r5
 80070f0:	e7a2      	b.n	8007038 <_vfiprintf_r+0x44>
 80070f2:	4a44      	ldr	r2, [pc, #272]	; (8007204 <_vfiprintf_r+0x210>)
 80070f4:	1a80      	subs	r0, r0, r2
 80070f6:	fa0b f000 	lsl.w	r0, fp, r0
 80070fa:	4318      	orrs	r0, r3
 80070fc:	9004      	str	r0, [sp, #16]
 80070fe:	4645      	mov	r5, r8
 8007100:	e7be      	b.n	8007080 <_vfiprintf_r+0x8c>
 8007102:	9a03      	ldr	r2, [sp, #12]
 8007104:	1d11      	adds	r1, r2, #4
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	9103      	str	r1, [sp, #12]
 800710a:	2a00      	cmp	r2, #0
 800710c:	db01      	blt.n	8007112 <_vfiprintf_r+0x11e>
 800710e:	9207      	str	r2, [sp, #28]
 8007110:	e004      	b.n	800711c <_vfiprintf_r+0x128>
 8007112:	4252      	negs	r2, r2
 8007114:	f043 0302 	orr.w	r3, r3, #2
 8007118:	9207      	str	r2, [sp, #28]
 800711a:	9304      	str	r3, [sp, #16]
 800711c:	f898 3000 	ldrb.w	r3, [r8]
 8007120:	2b2e      	cmp	r3, #46	; 0x2e
 8007122:	d10e      	bne.n	8007142 <_vfiprintf_r+0x14e>
 8007124:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007128:	2b2a      	cmp	r3, #42	; 0x2a
 800712a:	d138      	bne.n	800719e <_vfiprintf_r+0x1aa>
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	1d1a      	adds	r2, r3, #4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	9203      	str	r2, [sp, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	bfb8      	it	lt
 8007138:	f04f 33ff 	movlt.w	r3, #4294967295
 800713c:	f108 0802 	add.w	r8, r8, #2
 8007140:	9305      	str	r3, [sp, #20]
 8007142:	4d33      	ldr	r5, [pc, #204]	; (8007210 <_vfiprintf_r+0x21c>)
 8007144:	f898 1000 	ldrb.w	r1, [r8]
 8007148:	2203      	movs	r2, #3
 800714a:	4628      	mov	r0, r5
 800714c:	f7f9 f850 	bl	80001f0 <memchr>
 8007150:	b140      	cbz	r0, 8007164 <_vfiprintf_r+0x170>
 8007152:	2340      	movs	r3, #64	; 0x40
 8007154:	1b40      	subs	r0, r0, r5
 8007156:	fa03 f000 	lsl.w	r0, r3, r0
 800715a:	9b04      	ldr	r3, [sp, #16]
 800715c:	4303      	orrs	r3, r0
 800715e:	f108 0801 	add.w	r8, r8, #1
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	f898 1000 	ldrb.w	r1, [r8]
 8007168:	482a      	ldr	r0, [pc, #168]	; (8007214 <_vfiprintf_r+0x220>)
 800716a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800716e:	2206      	movs	r2, #6
 8007170:	f108 0701 	add.w	r7, r8, #1
 8007174:	f7f9 f83c 	bl	80001f0 <memchr>
 8007178:	2800      	cmp	r0, #0
 800717a:	d037      	beq.n	80071ec <_vfiprintf_r+0x1f8>
 800717c:	4b26      	ldr	r3, [pc, #152]	; (8007218 <_vfiprintf_r+0x224>)
 800717e:	bb1b      	cbnz	r3, 80071c8 <_vfiprintf_r+0x1d4>
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	3307      	adds	r3, #7
 8007184:	f023 0307 	bic.w	r3, r3, #7
 8007188:	3308      	adds	r3, #8
 800718a:	9303      	str	r3, [sp, #12]
 800718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718e:	444b      	add	r3, r9
 8007190:	9309      	str	r3, [sp, #36]	; 0x24
 8007192:	e750      	b.n	8007036 <_vfiprintf_r+0x42>
 8007194:	fb05 3202 	mla	r2, r5, r2, r3
 8007198:	2001      	movs	r0, #1
 800719a:	4688      	mov	r8, r1
 800719c:	e78a      	b.n	80070b4 <_vfiprintf_r+0xc0>
 800719e:	2300      	movs	r3, #0
 80071a0:	f108 0801 	add.w	r8, r8, #1
 80071a4:	9305      	str	r3, [sp, #20]
 80071a6:	4619      	mov	r1, r3
 80071a8:	250a      	movs	r5, #10
 80071aa:	4640      	mov	r0, r8
 80071ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071b0:	3a30      	subs	r2, #48	; 0x30
 80071b2:	2a09      	cmp	r2, #9
 80071b4:	d903      	bls.n	80071be <_vfiprintf_r+0x1ca>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0c3      	beq.n	8007142 <_vfiprintf_r+0x14e>
 80071ba:	9105      	str	r1, [sp, #20]
 80071bc:	e7c1      	b.n	8007142 <_vfiprintf_r+0x14e>
 80071be:	fb05 2101 	mla	r1, r5, r1, r2
 80071c2:	2301      	movs	r3, #1
 80071c4:	4680      	mov	r8, r0
 80071c6:	e7f0      	b.n	80071aa <_vfiprintf_r+0x1b6>
 80071c8:	ab03      	add	r3, sp, #12
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	4622      	mov	r2, r4
 80071ce:	4b13      	ldr	r3, [pc, #76]	; (800721c <_vfiprintf_r+0x228>)
 80071d0:	a904      	add	r1, sp, #16
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7fd fe70 	bl	8004eb8 <_printf_float>
 80071d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071dc:	4681      	mov	r9, r0
 80071de:	d1d5      	bne.n	800718c <_vfiprintf_r+0x198>
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	065b      	lsls	r3, r3, #25
 80071e4:	f53f af7e 	bmi.w	80070e4 <_vfiprintf_r+0xf0>
 80071e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ea:	e77d      	b.n	80070e8 <_vfiprintf_r+0xf4>
 80071ec:	ab03      	add	r3, sp, #12
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	4622      	mov	r2, r4
 80071f2:	4b0a      	ldr	r3, [pc, #40]	; (800721c <_vfiprintf_r+0x228>)
 80071f4:	a904      	add	r1, sp, #16
 80071f6:	4630      	mov	r0, r6
 80071f8:	f7fe f914 	bl	8005424 <_printf_i>
 80071fc:	e7ec      	b.n	80071d8 <_vfiprintf_r+0x1e4>
 80071fe:	bf00      	nop
 8007200:	080085d0 	.word	0x080085d0
 8007204:	0800870c 	.word	0x0800870c
 8007208:	080085f0 	.word	0x080085f0
 800720c:	080085b0 	.word	0x080085b0
 8007210:	08008712 	.word	0x08008712
 8007214:	08008716 	.word	0x08008716
 8007218:	08004eb9 	.word	0x08004eb9
 800721c:	08006fcf 	.word	0x08006fcf

08007220 <_sbrk_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4c06      	ldr	r4, [pc, #24]	; (800723c <_sbrk_r+0x1c>)
 8007224:	2300      	movs	r3, #0
 8007226:	4605      	mov	r5, r0
 8007228:	4608      	mov	r0, r1
 800722a:	6023      	str	r3, [r4, #0]
 800722c:	f7fd fc4c 	bl	8004ac8 <_sbrk>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_sbrk_r+0x1a>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	b103      	cbz	r3, 800723a <_sbrk_r+0x1a>
 8007238:	602b      	str	r3, [r5, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	20000394 	.word	0x20000394

08007240 <__sread>:
 8007240:	b510      	push	{r4, lr}
 8007242:	460c      	mov	r4, r1
 8007244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007248:	f000 f8a8 	bl	800739c <_read_r>
 800724c:	2800      	cmp	r0, #0
 800724e:	bfab      	itete	ge
 8007250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007252:	89a3      	ldrhlt	r3, [r4, #12]
 8007254:	181b      	addge	r3, r3, r0
 8007256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800725a:	bfac      	ite	ge
 800725c:	6563      	strge	r3, [r4, #84]	; 0x54
 800725e:	81a3      	strhlt	r3, [r4, #12]
 8007260:	bd10      	pop	{r4, pc}

08007262 <__swrite>:
 8007262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007266:	461f      	mov	r7, r3
 8007268:	898b      	ldrh	r3, [r1, #12]
 800726a:	05db      	lsls	r3, r3, #23
 800726c:	4605      	mov	r5, r0
 800726e:	460c      	mov	r4, r1
 8007270:	4616      	mov	r6, r2
 8007272:	d505      	bpl.n	8007280 <__swrite+0x1e>
 8007274:	2302      	movs	r3, #2
 8007276:	2200      	movs	r2, #0
 8007278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727c:	f000 f868 	bl	8007350 <_lseek_r>
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800728a:	81a3      	strh	r3, [r4, #12]
 800728c:	4632      	mov	r2, r6
 800728e:	463b      	mov	r3, r7
 8007290:	4628      	mov	r0, r5
 8007292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007296:	f000 b817 	b.w	80072c8 <_write_r>

0800729a <__sseek>:
 800729a:	b510      	push	{r4, lr}
 800729c:	460c      	mov	r4, r1
 800729e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a2:	f000 f855 	bl	8007350 <_lseek_r>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	bf15      	itete	ne
 80072ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80072ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072b6:	81a3      	strheq	r3, [r4, #12]
 80072b8:	bf18      	it	ne
 80072ba:	81a3      	strhne	r3, [r4, #12]
 80072bc:	bd10      	pop	{r4, pc}

080072be <__sclose>:
 80072be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c2:	f000 b813 	b.w	80072ec <_close_r>
	...

080072c8 <_write_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4c07      	ldr	r4, [pc, #28]	; (80072e8 <_write_r+0x20>)
 80072cc:	4605      	mov	r5, r0
 80072ce:	4608      	mov	r0, r1
 80072d0:	4611      	mov	r1, r2
 80072d2:	2200      	movs	r2, #0
 80072d4:	6022      	str	r2, [r4, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f7fc ff80 	bl	80041dc <_write>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_write_r+0x1e>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_write_r+0x1e>
 80072e4:	602b      	str	r3, [r5, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	20000394 	.word	0x20000394

080072ec <_close_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4c06      	ldr	r4, [pc, #24]	; (8007308 <_close_r+0x1c>)
 80072f0:	2300      	movs	r3, #0
 80072f2:	4605      	mov	r5, r0
 80072f4:	4608      	mov	r0, r1
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	f7fd fbb1 	bl	8004a5e <_close>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d102      	bne.n	8007306 <_close_r+0x1a>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	b103      	cbz	r3, 8007306 <_close_r+0x1a>
 8007304:	602b      	str	r3, [r5, #0]
 8007306:	bd38      	pop	{r3, r4, r5, pc}
 8007308:	20000394 	.word	0x20000394

0800730c <_fstat_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4c07      	ldr	r4, [pc, #28]	; (800732c <_fstat_r+0x20>)
 8007310:	2300      	movs	r3, #0
 8007312:	4605      	mov	r5, r0
 8007314:	4608      	mov	r0, r1
 8007316:	4611      	mov	r1, r2
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	f7fd fbac 	bl	8004a76 <_fstat>
 800731e:	1c43      	adds	r3, r0, #1
 8007320:	d102      	bne.n	8007328 <_fstat_r+0x1c>
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	b103      	cbz	r3, 8007328 <_fstat_r+0x1c>
 8007326:	602b      	str	r3, [r5, #0]
 8007328:	bd38      	pop	{r3, r4, r5, pc}
 800732a:	bf00      	nop
 800732c:	20000394 	.word	0x20000394

08007330 <_isatty_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4c06      	ldr	r4, [pc, #24]	; (800734c <_isatty_r+0x1c>)
 8007334:	2300      	movs	r3, #0
 8007336:	4605      	mov	r5, r0
 8007338:	4608      	mov	r0, r1
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	f7fd fbab 	bl	8004a96 <_isatty>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d102      	bne.n	800734a <_isatty_r+0x1a>
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	b103      	cbz	r3, 800734a <_isatty_r+0x1a>
 8007348:	602b      	str	r3, [r5, #0]
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	20000394 	.word	0x20000394

08007350 <_lseek_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4c07      	ldr	r4, [pc, #28]	; (8007370 <_lseek_r+0x20>)
 8007354:	4605      	mov	r5, r0
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	2200      	movs	r2, #0
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f7fd fba4 	bl	8004aac <_lseek>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_lseek_r+0x1e>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	b103      	cbz	r3, 800736e <_lseek_r+0x1e>
 800736c:	602b      	str	r3, [r5, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	20000394 	.word	0x20000394

08007374 <__ascii_mbtowc>:
 8007374:	b082      	sub	sp, #8
 8007376:	b901      	cbnz	r1, 800737a <__ascii_mbtowc+0x6>
 8007378:	a901      	add	r1, sp, #4
 800737a:	b142      	cbz	r2, 800738e <__ascii_mbtowc+0x1a>
 800737c:	b14b      	cbz	r3, 8007392 <__ascii_mbtowc+0x1e>
 800737e:	7813      	ldrb	r3, [r2, #0]
 8007380:	600b      	str	r3, [r1, #0]
 8007382:	7812      	ldrb	r2, [r2, #0]
 8007384:	1c10      	adds	r0, r2, #0
 8007386:	bf18      	it	ne
 8007388:	2001      	movne	r0, #1
 800738a:	b002      	add	sp, #8
 800738c:	4770      	bx	lr
 800738e:	4610      	mov	r0, r2
 8007390:	e7fb      	b.n	800738a <__ascii_mbtowc+0x16>
 8007392:	f06f 0001 	mvn.w	r0, #1
 8007396:	e7f8      	b.n	800738a <__ascii_mbtowc+0x16>

08007398 <__malloc_lock>:
 8007398:	4770      	bx	lr

0800739a <__malloc_unlock>:
 800739a:	4770      	bx	lr

0800739c <_read_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4c07      	ldr	r4, [pc, #28]	; (80073bc <_read_r+0x20>)
 80073a0:	4605      	mov	r5, r0
 80073a2:	4608      	mov	r0, r1
 80073a4:	4611      	mov	r1, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	6022      	str	r2, [r4, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	f7fd fb3a 	bl	8004a24 <_read>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_read_r+0x1e>
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_read_r+0x1e>
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20000394 	.word	0x20000394

080073c0 <__ascii_wctomb>:
 80073c0:	b149      	cbz	r1, 80073d6 <__ascii_wctomb+0x16>
 80073c2:	2aff      	cmp	r2, #255	; 0xff
 80073c4:	bf85      	ittet	hi
 80073c6:	238a      	movhi	r3, #138	; 0x8a
 80073c8:	6003      	strhi	r3, [r0, #0]
 80073ca:	700a      	strbls	r2, [r1, #0]
 80073cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80073d0:	bf98      	it	ls
 80073d2:	2001      	movls	r0, #1
 80073d4:	4770      	bx	lr
 80073d6:	4608      	mov	r0, r1
 80073d8:	4770      	bx	lr
	...

080073dc <pow>:
 80073dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	ed2d 8b04 	vpush	{d8-d9}
 80073e4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80076b8 <pow+0x2dc>
 80073e8:	b08d      	sub	sp, #52	; 0x34
 80073ea:	ec57 6b10 	vmov	r6, r7, d0
 80073ee:	ec55 4b11 	vmov	r4, r5, d1
 80073f2:	f000 f965 	bl	80076c0 <__ieee754_pow>
 80073f6:	f999 3000 	ldrsb.w	r3, [r9]
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	3301      	adds	r3, #1
 80073fe:	eeb0 8a40 	vmov.f32	s16, s0
 8007402:	eef0 8a60 	vmov.f32	s17, s1
 8007406:	46c8      	mov	r8, r9
 8007408:	d05f      	beq.n	80074ca <pow+0xee>
 800740a:	4622      	mov	r2, r4
 800740c:	462b      	mov	r3, r5
 800740e:	4620      	mov	r0, r4
 8007410:	4629      	mov	r1, r5
 8007412:	f7f9 fb93 	bl	8000b3c <__aeabi_dcmpun>
 8007416:	4683      	mov	fp, r0
 8007418:	2800      	cmp	r0, #0
 800741a:	d156      	bne.n	80074ca <pow+0xee>
 800741c:	4632      	mov	r2, r6
 800741e:	463b      	mov	r3, r7
 8007420:	4630      	mov	r0, r6
 8007422:	4639      	mov	r1, r7
 8007424:	f7f9 fb8a 	bl	8000b3c <__aeabi_dcmpun>
 8007428:	9001      	str	r0, [sp, #4]
 800742a:	b1e8      	cbz	r0, 8007468 <pow+0x8c>
 800742c:	2200      	movs	r2, #0
 800742e:	2300      	movs	r3, #0
 8007430:	4620      	mov	r0, r4
 8007432:	4629      	mov	r1, r5
 8007434:	f7f9 fb50 	bl	8000ad8 <__aeabi_dcmpeq>
 8007438:	2800      	cmp	r0, #0
 800743a:	d046      	beq.n	80074ca <pow+0xee>
 800743c:	2301      	movs	r3, #1
 800743e:	9302      	str	r3, [sp, #8]
 8007440:	4b96      	ldr	r3, [pc, #600]	; (800769c <pow+0x2c0>)
 8007442:	9303      	str	r3, [sp, #12]
 8007444:	4b96      	ldr	r3, [pc, #600]	; (80076a0 <pow+0x2c4>)
 8007446:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800744a:	2200      	movs	r2, #0
 800744c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007450:	9b00      	ldr	r3, [sp, #0]
 8007452:	2b02      	cmp	r3, #2
 8007454:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007458:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800745c:	d033      	beq.n	80074c6 <pow+0xea>
 800745e:	a802      	add	r0, sp, #8
 8007460:	f000 fefd 	bl	800825e <matherr>
 8007464:	bb48      	cbnz	r0, 80074ba <pow+0xde>
 8007466:	e05d      	b.n	8007524 <pow+0x148>
 8007468:	f04f 0a00 	mov.w	sl, #0
 800746c:	f04f 0b00 	mov.w	fp, #0
 8007470:	4652      	mov	r2, sl
 8007472:	465b      	mov	r3, fp
 8007474:	4630      	mov	r0, r6
 8007476:	4639      	mov	r1, r7
 8007478:	f7f9 fb2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800747c:	ec4b ab19 	vmov	d9, sl, fp
 8007480:	2800      	cmp	r0, #0
 8007482:	d054      	beq.n	800752e <pow+0x152>
 8007484:	4652      	mov	r2, sl
 8007486:	465b      	mov	r3, fp
 8007488:	4620      	mov	r0, r4
 800748a:	4629      	mov	r1, r5
 800748c:	f7f9 fb24 	bl	8000ad8 <__aeabi_dcmpeq>
 8007490:	4680      	mov	r8, r0
 8007492:	b318      	cbz	r0, 80074dc <pow+0x100>
 8007494:	2301      	movs	r3, #1
 8007496:	9302      	str	r3, [sp, #8]
 8007498:	4b80      	ldr	r3, [pc, #512]	; (800769c <pow+0x2c0>)
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	9b01      	ldr	r3, [sp, #4]
 800749e:	930a      	str	r3, [sp, #40]	; 0x28
 80074a0:	9b00      	ldr	r3, [sp, #0]
 80074a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80074a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80074aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0d5      	beq.n	800745e <pow+0x82>
 80074b2:	4b7b      	ldr	r3, [pc, #492]	; (80076a0 <pow+0x2c4>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80074ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074bc:	b11b      	cbz	r3, 80074c6 <pow+0xea>
 80074be:	f7fd fc35 	bl	8004d2c <__errno>
 80074c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c4:	6003      	str	r3, [r0, #0]
 80074c6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80074ca:	eeb0 0a48 	vmov.f32	s0, s16
 80074ce:	eef0 0a68 	vmov.f32	s1, s17
 80074d2:	b00d      	add	sp, #52	; 0x34
 80074d4:	ecbd 8b04 	vpop	{d8-d9}
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074dc:	ec45 4b10 	vmov	d0, r4, r5
 80074e0:	f000 feb5 	bl	800824e <finite>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d0f0      	beq.n	80074ca <pow+0xee>
 80074e8:	4652      	mov	r2, sl
 80074ea:	465b      	mov	r3, fp
 80074ec:	4620      	mov	r0, r4
 80074ee:	4629      	mov	r1, r5
 80074f0:	f7f9 fafc 	bl	8000aec <__aeabi_dcmplt>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d0e8      	beq.n	80074ca <pow+0xee>
 80074f8:	2301      	movs	r3, #1
 80074fa:	9302      	str	r3, [sp, #8]
 80074fc:	4b67      	ldr	r3, [pc, #412]	; (800769c <pow+0x2c0>)
 80074fe:	9303      	str	r3, [sp, #12]
 8007500:	f999 3000 	ldrsb.w	r3, [r9]
 8007504:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007508:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800750c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007510:	b913      	cbnz	r3, 8007518 <pow+0x13c>
 8007512:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007516:	e7a2      	b.n	800745e <pow+0x82>
 8007518:	4962      	ldr	r1, [pc, #392]	; (80076a4 <pow+0x2c8>)
 800751a:	2000      	movs	r0, #0
 800751c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d19c      	bne.n	800745e <pow+0x82>
 8007524:	f7fd fc02 	bl	8004d2c <__errno>
 8007528:	2321      	movs	r3, #33	; 0x21
 800752a:	6003      	str	r3, [r0, #0]
 800752c:	e7c5      	b.n	80074ba <pow+0xde>
 800752e:	eeb0 0a48 	vmov.f32	s0, s16
 8007532:	eef0 0a68 	vmov.f32	s1, s17
 8007536:	f000 fe8a 	bl	800824e <finite>
 800753a:	9000      	str	r0, [sp, #0]
 800753c:	2800      	cmp	r0, #0
 800753e:	f040 8081 	bne.w	8007644 <pow+0x268>
 8007542:	ec47 6b10 	vmov	d0, r6, r7
 8007546:	f000 fe82 	bl	800824e <finite>
 800754a:	2800      	cmp	r0, #0
 800754c:	d07a      	beq.n	8007644 <pow+0x268>
 800754e:	ec45 4b10 	vmov	d0, r4, r5
 8007552:	f000 fe7c 	bl	800824e <finite>
 8007556:	2800      	cmp	r0, #0
 8007558:	d074      	beq.n	8007644 <pow+0x268>
 800755a:	ec53 2b18 	vmov	r2, r3, d8
 800755e:	ee18 0a10 	vmov	r0, s16
 8007562:	4619      	mov	r1, r3
 8007564:	f7f9 faea 	bl	8000b3c <__aeabi_dcmpun>
 8007568:	f999 9000 	ldrsb.w	r9, [r9]
 800756c:	4b4b      	ldr	r3, [pc, #300]	; (800769c <pow+0x2c0>)
 800756e:	b1b0      	cbz	r0, 800759e <pow+0x1c2>
 8007570:	2201      	movs	r2, #1
 8007572:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	930a      	str	r3, [sp, #40]	; 0x28
 800757a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800757e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007582:	f1b9 0f00 	cmp.w	r9, #0
 8007586:	d0c4      	beq.n	8007512 <pow+0x136>
 8007588:	4652      	mov	r2, sl
 800758a:	465b      	mov	r3, fp
 800758c:	4650      	mov	r0, sl
 800758e:	4659      	mov	r1, fp
 8007590:	f7f9 f964 	bl	800085c <__aeabi_ddiv>
 8007594:	f1b9 0f02 	cmp.w	r9, #2
 8007598:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800759c:	e7c1      	b.n	8007522 <pow+0x146>
 800759e:	2203      	movs	r2, #3
 80075a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075a4:	900a      	str	r0, [sp, #40]	; 0x28
 80075a6:	4629      	mov	r1, r5
 80075a8:	4620      	mov	r0, r4
 80075aa:	2200      	movs	r2, #0
 80075ac:	4b3e      	ldr	r3, [pc, #248]	; (80076a8 <pow+0x2cc>)
 80075ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80075b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80075b6:	f7f9 f827 	bl	8000608 <__aeabi_dmul>
 80075ba:	4604      	mov	r4, r0
 80075bc:	460d      	mov	r5, r1
 80075be:	f1b9 0f00 	cmp.w	r9, #0
 80075c2:	d124      	bne.n	800760e <pow+0x232>
 80075c4:	4b39      	ldr	r3, [pc, #228]	; (80076ac <pow+0x2d0>)
 80075c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80075ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80075ce:	4630      	mov	r0, r6
 80075d0:	4652      	mov	r2, sl
 80075d2:	465b      	mov	r3, fp
 80075d4:	4639      	mov	r1, r7
 80075d6:	f7f9 fa89 	bl	8000aec <__aeabi_dcmplt>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d056      	beq.n	800768c <pow+0x2b0>
 80075de:	ec45 4b10 	vmov	d0, r4, r5
 80075e2:	f000 fe49 	bl	8008278 <rint>
 80075e6:	4622      	mov	r2, r4
 80075e8:	462b      	mov	r3, r5
 80075ea:	ec51 0b10 	vmov	r0, r1, d0
 80075ee:	f7f9 fa73 	bl	8000ad8 <__aeabi_dcmpeq>
 80075f2:	b920      	cbnz	r0, 80075fe <pow+0x222>
 80075f4:	4b2e      	ldr	r3, [pc, #184]	; (80076b0 <pow+0x2d4>)
 80075f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80075fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80075fe:	f998 3000 	ldrsb.w	r3, [r8]
 8007602:	2b02      	cmp	r3, #2
 8007604:	d142      	bne.n	800768c <pow+0x2b0>
 8007606:	f7fd fb91 	bl	8004d2c <__errno>
 800760a:	2322      	movs	r3, #34	; 0x22
 800760c:	e78d      	b.n	800752a <pow+0x14e>
 800760e:	4b29      	ldr	r3, [pc, #164]	; (80076b4 <pow+0x2d8>)
 8007610:	2200      	movs	r2, #0
 8007612:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007616:	4630      	mov	r0, r6
 8007618:	4652      	mov	r2, sl
 800761a:	465b      	mov	r3, fp
 800761c:	4639      	mov	r1, r7
 800761e:	f7f9 fa65 	bl	8000aec <__aeabi_dcmplt>
 8007622:	2800      	cmp	r0, #0
 8007624:	d0eb      	beq.n	80075fe <pow+0x222>
 8007626:	ec45 4b10 	vmov	d0, r4, r5
 800762a:	f000 fe25 	bl	8008278 <rint>
 800762e:	4622      	mov	r2, r4
 8007630:	462b      	mov	r3, r5
 8007632:	ec51 0b10 	vmov	r0, r1, d0
 8007636:	f7f9 fa4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800763a:	2800      	cmp	r0, #0
 800763c:	d1df      	bne.n	80075fe <pow+0x222>
 800763e:	2200      	movs	r2, #0
 8007640:	4b18      	ldr	r3, [pc, #96]	; (80076a4 <pow+0x2c8>)
 8007642:	e7da      	b.n	80075fa <pow+0x21e>
 8007644:	2200      	movs	r2, #0
 8007646:	2300      	movs	r3, #0
 8007648:	ec51 0b18 	vmov	r0, r1, d8
 800764c:	f7f9 fa44 	bl	8000ad8 <__aeabi_dcmpeq>
 8007650:	2800      	cmp	r0, #0
 8007652:	f43f af3a 	beq.w	80074ca <pow+0xee>
 8007656:	ec47 6b10 	vmov	d0, r6, r7
 800765a:	f000 fdf8 	bl	800824e <finite>
 800765e:	2800      	cmp	r0, #0
 8007660:	f43f af33 	beq.w	80074ca <pow+0xee>
 8007664:	ec45 4b10 	vmov	d0, r4, r5
 8007668:	f000 fdf1 	bl	800824e <finite>
 800766c:	2800      	cmp	r0, #0
 800766e:	f43f af2c 	beq.w	80074ca <pow+0xee>
 8007672:	2304      	movs	r3, #4
 8007674:	9302      	str	r3, [sp, #8]
 8007676:	4b09      	ldr	r3, [pc, #36]	; (800769c <pow+0x2c0>)
 8007678:	9303      	str	r3, [sp, #12]
 800767a:	2300      	movs	r3, #0
 800767c:	930a      	str	r3, [sp, #40]	; 0x28
 800767e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007682:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007686:	ed8d 9b08 	vstr	d9, [sp, #32]
 800768a:	e7b8      	b.n	80075fe <pow+0x222>
 800768c:	a802      	add	r0, sp, #8
 800768e:	f000 fde6 	bl	800825e <matherr>
 8007692:	2800      	cmp	r0, #0
 8007694:	f47f af11 	bne.w	80074ba <pow+0xde>
 8007698:	e7b5      	b.n	8007606 <pow+0x22a>
 800769a:	bf00      	nop
 800769c:	08008828 	.word	0x08008828
 80076a0:	3ff00000 	.word	0x3ff00000
 80076a4:	fff00000 	.word	0xfff00000
 80076a8:	3fe00000 	.word	0x3fe00000
 80076ac:	47efffff 	.word	0x47efffff
 80076b0:	c7efffff 	.word	0xc7efffff
 80076b4:	7ff00000 	.word	0x7ff00000
 80076b8:	200001e0 	.word	0x200001e0
 80076bc:	00000000 	.word	0x00000000

080076c0 <__ieee754_pow>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	b091      	sub	sp, #68	; 0x44
 80076c6:	ed8d 1b00 	vstr	d1, [sp]
 80076ca:	e9dd 2900 	ldrd	r2, r9, [sp]
 80076ce:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80076d2:	ea58 0302 	orrs.w	r3, r8, r2
 80076d6:	ec57 6b10 	vmov	r6, r7, d0
 80076da:	f000 84be 	beq.w	800805a <__ieee754_pow+0x99a>
 80076de:	4b7a      	ldr	r3, [pc, #488]	; (80078c8 <__ieee754_pow+0x208>)
 80076e0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80076e4:	429c      	cmp	r4, r3
 80076e6:	463d      	mov	r5, r7
 80076e8:	ee10 aa10 	vmov	sl, s0
 80076ec:	dc09      	bgt.n	8007702 <__ieee754_pow+0x42>
 80076ee:	d103      	bne.n	80076f8 <__ieee754_pow+0x38>
 80076f0:	b93e      	cbnz	r6, 8007702 <__ieee754_pow+0x42>
 80076f2:	45a0      	cmp	r8, r4
 80076f4:	dc0d      	bgt.n	8007712 <__ieee754_pow+0x52>
 80076f6:	e001      	b.n	80076fc <__ieee754_pow+0x3c>
 80076f8:	4598      	cmp	r8, r3
 80076fa:	dc02      	bgt.n	8007702 <__ieee754_pow+0x42>
 80076fc:	4598      	cmp	r8, r3
 80076fe:	d10e      	bne.n	800771e <__ieee754_pow+0x5e>
 8007700:	b16a      	cbz	r2, 800771e <__ieee754_pow+0x5e>
 8007702:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007706:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800770a:	ea54 030a 	orrs.w	r3, r4, sl
 800770e:	f000 84a4 	beq.w	800805a <__ieee754_pow+0x99a>
 8007712:	486e      	ldr	r0, [pc, #440]	; (80078cc <__ieee754_pow+0x20c>)
 8007714:	b011      	add	sp, #68	; 0x44
 8007716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	f000 bda5 	b.w	8008268 <nan>
 800771e:	2d00      	cmp	r5, #0
 8007720:	da53      	bge.n	80077ca <__ieee754_pow+0x10a>
 8007722:	4b6b      	ldr	r3, [pc, #428]	; (80078d0 <__ieee754_pow+0x210>)
 8007724:	4598      	cmp	r8, r3
 8007726:	dc4d      	bgt.n	80077c4 <__ieee754_pow+0x104>
 8007728:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800772c:	4598      	cmp	r8, r3
 800772e:	dd4c      	ble.n	80077ca <__ieee754_pow+0x10a>
 8007730:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007734:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007738:	2b14      	cmp	r3, #20
 800773a:	dd26      	ble.n	800778a <__ieee754_pow+0xca>
 800773c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007740:	fa22 f103 	lsr.w	r1, r2, r3
 8007744:	fa01 f303 	lsl.w	r3, r1, r3
 8007748:	4293      	cmp	r3, r2
 800774a:	d13e      	bne.n	80077ca <__ieee754_pow+0x10a>
 800774c:	f001 0101 	and.w	r1, r1, #1
 8007750:	f1c1 0b02 	rsb	fp, r1, #2
 8007754:	2a00      	cmp	r2, #0
 8007756:	d15b      	bne.n	8007810 <__ieee754_pow+0x150>
 8007758:	4b5b      	ldr	r3, [pc, #364]	; (80078c8 <__ieee754_pow+0x208>)
 800775a:	4598      	cmp	r8, r3
 800775c:	d124      	bne.n	80077a8 <__ieee754_pow+0xe8>
 800775e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007762:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007766:	ea53 030a 	orrs.w	r3, r3, sl
 800776a:	f000 8476 	beq.w	800805a <__ieee754_pow+0x99a>
 800776e:	4b59      	ldr	r3, [pc, #356]	; (80078d4 <__ieee754_pow+0x214>)
 8007770:	429c      	cmp	r4, r3
 8007772:	dd2d      	ble.n	80077d0 <__ieee754_pow+0x110>
 8007774:	f1b9 0f00 	cmp.w	r9, #0
 8007778:	f280 8473 	bge.w	8008062 <__ieee754_pow+0x9a2>
 800777c:	2000      	movs	r0, #0
 800777e:	2100      	movs	r1, #0
 8007780:	ec41 0b10 	vmov	d0, r0, r1
 8007784:	b011      	add	sp, #68	; 0x44
 8007786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778a:	2a00      	cmp	r2, #0
 800778c:	d13e      	bne.n	800780c <__ieee754_pow+0x14c>
 800778e:	f1c3 0314 	rsb	r3, r3, #20
 8007792:	fa48 f103 	asr.w	r1, r8, r3
 8007796:	fa01 f303 	lsl.w	r3, r1, r3
 800779a:	4543      	cmp	r3, r8
 800779c:	f040 8469 	bne.w	8008072 <__ieee754_pow+0x9b2>
 80077a0:	f001 0101 	and.w	r1, r1, #1
 80077a4:	f1c1 0b02 	rsb	fp, r1, #2
 80077a8:	4b4b      	ldr	r3, [pc, #300]	; (80078d8 <__ieee754_pow+0x218>)
 80077aa:	4598      	cmp	r8, r3
 80077ac:	d118      	bne.n	80077e0 <__ieee754_pow+0x120>
 80077ae:	f1b9 0f00 	cmp.w	r9, #0
 80077b2:	f280 845a 	bge.w	800806a <__ieee754_pow+0x9aa>
 80077b6:	4948      	ldr	r1, [pc, #288]	; (80078d8 <__ieee754_pow+0x218>)
 80077b8:	4632      	mov	r2, r6
 80077ba:	463b      	mov	r3, r7
 80077bc:	2000      	movs	r0, #0
 80077be:	f7f9 f84d 	bl	800085c <__aeabi_ddiv>
 80077c2:	e7dd      	b.n	8007780 <__ieee754_pow+0xc0>
 80077c4:	f04f 0b02 	mov.w	fp, #2
 80077c8:	e7c4      	b.n	8007754 <__ieee754_pow+0x94>
 80077ca:	f04f 0b00 	mov.w	fp, #0
 80077ce:	e7c1      	b.n	8007754 <__ieee754_pow+0x94>
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	dad2      	bge.n	800777c <__ieee754_pow+0xbc>
 80077d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80077da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80077de:	e7cf      	b.n	8007780 <__ieee754_pow+0xc0>
 80077e0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80077e4:	d106      	bne.n	80077f4 <__ieee754_pow+0x134>
 80077e6:	4632      	mov	r2, r6
 80077e8:	463b      	mov	r3, r7
 80077ea:	4610      	mov	r0, r2
 80077ec:	4619      	mov	r1, r3
 80077ee:	f7f8 ff0b 	bl	8000608 <__aeabi_dmul>
 80077f2:	e7c5      	b.n	8007780 <__ieee754_pow+0xc0>
 80077f4:	4b39      	ldr	r3, [pc, #228]	; (80078dc <__ieee754_pow+0x21c>)
 80077f6:	4599      	cmp	r9, r3
 80077f8:	d10a      	bne.n	8007810 <__ieee754_pow+0x150>
 80077fa:	2d00      	cmp	r5, #0
 80077fc:	db08      	blt.n	8007810 <__ieee754_pow+0x150>
 80077fe:	ec47 6b10 	vmov	d0, r6, r7
 8007802:	b011      	add	sp, #68	; 0x44
 8007804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	f000 bc68 	b.w	80080dc <__ieee754_sqrt>
 800780c:	f04f 0b00 	mov.w	fp, #0
 8007810:	ec47 6b10 	vmov	d0, r6, r7
 8007814:	f000 fd12 	bl	800823c <fabs>
 8007818:	ec51 0b10 	vmov	r0, r1, d0
 800781c:	f1ba 0f00 	cmp.w	sl, #0
 8007820:	d127      	bne.n	8007872 <__ieee754_pow+0x1b2>
 8007822:	b124      	cbz	r4, 800782e <__ieee754_pow+0x16e>
 8007824:	4b2c      	ldr	r3, [pc, #176]	; (80078d8 <__ieee754_pow+0x218>)
 8007826:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800782a:	429a      	cmp	r2, r3
 800782c:	d121      	bne.n	8007872 <__ieee754_pow+0x1b2>
 800782e:	f1b9 0f00 	cmp.w	r9, #0
 8007832:	da05      	bge.n	8007840 <__ieee754_pow+0x180>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	2000      	movs	r0, #0
 800783a:	4927      	ldr	r1, [pc, #156]	; (80078d8 <__ieee754_pow+0x218>)
 800783c:	f7f9 f80e 	bl	800085c <__aeabi_ddiv>
 8007840:	2d00      	cmp	r5, #0
 8007842:	da9d      	bge.n	8007780 <__ieee754_pow+0xc0>
 8007844:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007848:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800784c:	ea54 030b 	orrs.w	r3, r4, fp
 8007850:	d108      	bne.n	8007864 <__ieee754_pow+0x1a4>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4610      	mov	r0, r2
 8007858:	4619      	mov	r1, r3
 800785a:	f7f8 fd1d 	bl	8000298 <__aeabi_dsub>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	e7ac      	b.n	80077be <__ieee754_pow+0xfe>
 8007864:	f1bb 0f01 	cmp.w	fp, #1
 8007868:	d18a      	bne.n	8007780 <__ieee754_pow+0xc0>
 800786a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800786e:	4619      	mov	r1, r3
 8007870:	e786      	b.n	8007780 <__ieee754_pow+0xc0>
 8007872:	0fed      	lsrs	r5, r5, #31
 8007874:	1e6b      	subs	r3, r5, #1
 8007876:	930d      	str	r3, [sp, #52]	; 0x34
 8007878:	ea5b 0303 	orrs.w	r3, fp, r3
 800787c:	d102      	bne.n	8007884 <__ieee754_pow+0x1c4>
 800787e:	4632      	mov	r2, r6
 8007880:	463b      	mov	r3, r7
 8007882:	e7e8      	b.n	8007856 <__ieee754_pow+0x196>
 8007884:	4b16      	ldr	r3, [pc, #88]	; (80078e0 <__ieee754_pow+0x220>)
 8007886:	4598      	cmp	r8, r3
 8007888:	f340 80fe 	ble.w	8007a88 <__ieee754_pow+0x3c8>
 800788c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007890:	4598      	cmp	r8, r3
 8007892:	dd0a      	ble.n	80078aa <__ieee754_pow+0x1ea>
 8007894:	4b0f      	ldr	r3, [pc, #60]	; (80078d4 <__ieee754_pow+0x214>)
 8007896:	429c      	cmp	r4, r3
 8007898:	dc0d      	bgt.n	80078b6 <__ieee754_pow+0x1f6>
 800789a:	f1b9 0f00 	cmp.w	r9, #0
 800789e:	f6bf af6d 	bge.w	800777c <__ieee754_pow+0xbc>
 80078a2:	a307      	add	r3, pc, #28	; (adr r3, 80078c0 <__ieee754_pow+0x200>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	e79f      	b.n	80077ea <__ieee754_pow+0x12a>
 80078aa:	4b0e      	ldr	r3, [pc, #56]	; (80078e4 <__ieee754_pow+0x224>)
 80078ac:	429c      	cmp	r4, r3
 80078ae:	ddf4      	ble.n	800789a <__ieee754_pow+0x1da>
 80078b0:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <__ieee754_pow+0x218>)
 80078b2:	429c      	cmp	r4, r3
 80078b4:	dd18      	ble.n	80078e8 <__ieee754_pow+0x228>
 80078b6:	f1b9 0f00 	cmp.w	r9, #0
 80078ba:	dcf2      	bgt.n	80078a2 <__ieee754_pow+0x1e2>
 80078bc:	e75e      	b.n	800777c <__ieee754_pow+0xbc>
 80078be:	bf00      	nop
 80078c0:	8800759c 	.word	0x8800759c
 80078c4:	7e37e43c 	.word	0x7e37e43c
 80078c8:	7ff00000 	.word	0x7ff00000
 80078cc:	08008711 	.word	0x08008711
 80078d0:	433fffff 	.word	0x433fffff
 80078d4:	3fefffff 	.word	0x3fefffff
 80078d8:	3ff00000 	.word	0x3ff00000
 80078dc:	3fe00000 	.word	0x3fe00000
 80078e0:	41e00000 	.word	0x41e00000
 80078e4:	3feffffe 	.word	0x3feffffe
 80078e8:	2200      	movs	r2, #0
 80078ea:	4b63      	ldr	r3, [pc, #396]	; (8007a78 <__ieee754_pow+0x3b8>)
 80078ec:	f7f8 fcd4 	bl	8000298 <__aeabi_dsub>
 80078f0:	a355      	add	r3, pc, #340	; (adr r3, 8007a48 <__ieee754_pow+0x388>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	4604      	mov	r4, r0
 80078f8:	460d      	mov	r5, r1
 80078fa:	f7f8 fe85 	bl	8000608 <__aeabi_dmul>
 80078fe:	a354      	add	r3, pc, #336	; (adr r3, 8007a50 <__ieee754_pow+0x390>)
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	4606      	mov	r6, r0
 8007906:	460f      	mov	r7, r1
 8007908:	4620      	mov	r0, r4
 800790a:	4629      	mov	r1, r5
 800790c:	f7f8 fe7c 	bl	8000608 <__aeabi_dmul>
 8007910:	2200      	movs	r2, #0
 8007912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007916:	4b59      	ldr	r3, [pc, #356]	; (8007a7c <__ieee754_pow+0x3bc>)
 8007918:	4620      	mov	r0, r4
 800791a:	4629      	mov	r1, r5
 800791c:	f7f8 fe74 	bl	8000608 <__aeabi_dmul>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	a14c      	add	r1, pc, #304	; (adr r1, 8007a58 <__ieee754_pow+0x398>)
 8007926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800792a:	f7f8 fcb5 	bl	8000298 <__aeabi_dsub>
 800792e:	4622      	mov	r2, r4
 8007930:	462b      	mov	r3, r5
 8007932:	f7f8 fe69 	bl	8000608 <__aeabi_dmul>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	2000      	movs	r0, #0
 800793c:	4950      	ldr	r1, [pc, #320]	; (8007a80 <__ieee754_pow+0x3c0>)
 800793e:	f7f8 fcab 	bl	8000298 <__aeabi_dsub>
 8007942:	4622      	mov	r2, r4
 8007944:	462b      	mov	r3, r5
 8007946:	4680      	mov	r8, r0
 8007948:	4689      	mov	r9, r1
 800794a:	4620      	mov	r0, r4
 800794c:	4629      	mov	r1, r5
 800794e:	f7f8 fe5b 	bl	8000608 <__aeabi_dmul>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4640      	mov	r0, r8
 8007958:	4649      	mov	r1, r9
 800795a:	f7f8 fe55 	bl	8000608 <__aeabi_dmul>
 800795e:	a340      	add	r3, pc, #256	; (adr r3, 8007a60 <__ieee754_pow+0x3a0>)
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	f7f8 fe50 	bl	8000608 <__aeabi_dmul>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007970:	f7f8 fc92 	bl	8000298 <__aeabi_dsub>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4604      	mov	r4, r0
 800797a:	460d      	mov	r5, r1
 800797c:	4630      	mov	r0, r6
 800797e:	4639      	mov	r1, r7
 8007980:	f7f8 fc8c 	bl	800029c <__adddf3>
 8007984:	2000      	movs	r0, #0
 8007986:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800798a:	4632      	mov	r2, r6
 800798c:	463b      	mov	r3, r7
 800798e:	f7f8 fc83 	bl	8000298 <__aeabi_dsub>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4620      	mov	r0, r4
 8007998:	4629      	mov	r1, r5
 800799a:	f7f8 fc7d 	bl	8000298 <__aeabi_dsub>
 800799e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079a0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80079a4:	4313      	orrs	r3, r2
 80079a6:	4606      	mov	r6, r0
 80079a8:	460f      	mov	r7, r1
 80079aa:	f040 81eb 	bne.w	8007d84 <__ieee754_pow+0x6c4>
 80079ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007a68 <__ieee754_pow+0x3a8>
 80079b2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80079b6:	2400      	movs	r4, #0
 80079b8:	4622      	mov	r2, r4
 80079ba:	462b      	mov	r3, r5
 80079bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079c4:	f7f8 fc68 	bl	8000298 <__aeabi_dsub>
 80079c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079cc:	f7f8 fe1c 	bl	8000608 <__aeabi_dmul>
 80079d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079d4:	4680      	mov	r8, r0
 80079d6:	4689      	mov	r9, r1
 80079d8:	4630      	mov	r0, r6
 80079da:	4639      	mov	r1, r7
 80079dc:	f7f8 fe14 	bl	8000608 <__aeabi_dmul>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4640      	mov	r0, r8
 80079e6:	4649      	mov	r1, r9
 80079e8:	f7f8 fc58 	bl	800029c <__adddf3>
 80079ec:	4622      	mov	r2, r4
 80079ee:	462b      	mov	r3, r5
 80079f0:	4680      	mov	r8, r0
 80079f2:	4689      	mov	r9, r1
 80079f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079f8:	f7f8 fe06 	bl	8000608 <__aeabi_dmul>
 80079fc:	460b      	mov	r3, r1
 80079fe:	4604      	mov	r4, r0
 8007a00:	460d      	mov	r5, r1
 8007a02:	4602      	mov	r2, r0
 8007a04:	4649      	mov	r1, r9
 8007a06:	4640      	mov	r0, r8
 8007a08:	e9cd 4500 	strd	r4, r5, [sp]
 8007a0c:	f7f8 fc46 	bl	800029c <__adddf3>
 8007a10:	4b1c      	ldr	r3, [pc, #112]	; (8007a84 <__ieee754_pow+0x3c4>)
 8007a12:	4299      	cmp	r1, r3
 8007a14:	4606      	mov	r6, r0
 8007a16:	460f      	mov	r7, r1
 8007a18:	468b      	mov	fp, r1
 8007a1a:	f340 82f7 	ble.w	800800c <__ieee754_pow+0x94c>
 8007a1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007a22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007a26:	4303      	orrs	r3, r0
 8007a28:	f000 81ea 	beq.w	8007e00 <__ieee754_pow+0x740>
 8007a2c:	a310      	add	r3, pc, #64	; (adr r3, 8007a70 <__ieee754_pow+0x3b0>)
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a36:	f7f8 fde7 	bl	8000608 <__aeabi_dmul>
 8007a3a:	a30d      	add	r3, pc, #52	; (adr r3, 8007a70 <__ieee754_pow+0x3b0>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	e6d5      	b.n	80077ee <__ieee754_pow+0x12e>
 8007a42:	bf00      	nop
 8007a44:	f3af 8000 	nop.w
 8007a48:	60000000 	.word	0x60000000
 8007a4c:	3ff71547 	.word	0x3ff71547
 8007a50:	f85ddf44 	.word	0xf85ddf44
 8007a54:	3e54ae0b 	.word	0x3e54ae0b
 8007a58:	55555555 	.word	0x55555555
 8007a5c:	3fd55555 	.word	0x3fd55555
 8007a60:	652b82fe 	.word	0x652b82fe
 8007a64:	3ff71547 	.word	0x3ff71547
 8007a68:	00000000 	.word	0x00000000
 8007a6c:	bff00000 	.word	0xbff00000
 8007a70:	8800759c 	.word	0x8800759c
 8007a74:	7e37e43c 	.word	0x7e37e43c
 8007a78:	3ff00000 	.word	0x3ff00000
 8007a7c:	3fd00000 	.word	0x3fd00000
 8007a80:	3fe00000 	.word	0x3fe00000
 8007a84:	408fffff 	.word	0x408fffff
 8007a88:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	da05      	bge.n	8007a9e <__ieee754_pow+0x3de>
 8007a92:	4bd3      	ldr	r3, [pc, #844]	; (8007de0 <__ieee754_pow+0x720>)
 8007a94:	f7f8 fdb8 	bl	8000608 <__aeabi_dmul>
 8007a98:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	1523      	asrs	r3, r4, #20
 8007aa0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007aa4:	4413      	add	r3, r2
 8007aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa8:	4bce      	ldr	r3, [pc, #824]	; (8007de4 <__ieee754_pow+0x724>)
 8007aaa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007aae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007ab2:	429c      	cmp	r4, r3
 8007ab4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ab8:	dd08      	ble.n	8007acc <__ieee754_pow+0x40c>
 8007aba:	4bcb      	ldr	r3, [pc, #812]	; (8007de8 <__ieee754_pow+0x728>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	f340 815e 	ble.w	8007d7e <__ieee754_pow+0x6be>
 8007ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007acc:	f04f 0a00 	mov.w	sl, #0
 8007ad0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007ad4:	930c      	str	r3, [sp, #48]	; 0x30
 8007ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad8:	4bc4      	ldr	r3, [pc, #784]	; (8007dec <__ieee754_pow+0x72c>)
 8007ada:	4413      	add	r3, r2
 8007adc:	ed93 7b00 	vldr	d7, [r3]
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	ec53 2b17 	vmov	r2, r3, d7
 8007ae6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007aea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007aee:	f7f8 fbd3 	bl	8000298 <__aeabi_dsub>
 8007af2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007af6:	4606      	mov	r6, r0
 8007af8:	460f      	mov	r7, r1
 8007afa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007afe:	f7f8 fbcd 	bl	800029c <__adddf3>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	2000      	movs	r0, #0
 8007b08:	49b9      	ldr	r1, [pc, #740]	; (8007df0 <__ieee754_pow+0x730>)
 8007b0a:	f7f8 fea7 	bl	800085c <__aeabi_ddiv>
 8007b0e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4630      	mov	r0, r6
 8007b18:	4639      	mov	r1, r7
 8007b1a:	f7f8 fd75 	bl	8000608 <__aeabi_dmul>
 8007b1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b22:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	9302      	str	r3, [sp, #8]
 8007b2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b32:	106d      	asrs	r5, r5, #1
 8007b34:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007b38:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007b42:	4640      	mov	r0, r8
 8007b44:	4649      	mov	r1, r9
 8007b46:	4614      	mov	r4, r2
 8007b48:	461d      	mov	r5, r3
 8007b4a:	f7f8 fd5d 	bl	8000608 <__aeabi_dmul>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4630      	mov	r0, r6
 8007b54:	4639      	mov	r1, r7
 8007b56:	f7f8 fb9f 	bl	8000298 <__aeabi_dsub>
 8007b5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b5e:	4606      	mov	r6, r0
 8007b60:	460f      	mov	r7, r1
 8007b62:	4620      	mov	r0, r4
 8007b64:	4629      	mov	r1, r5
 8007b66:	f7f8 fb97 	bl	8000298 <__aeabi_dsub>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b72:	f7f8 fb91 	bl	8000298 <__aeabi_dsub>
 8007b76:	4642      	mov	r2, r8
 8007b78:	464b      	mov	r3, r9
 8007b7a:	f7f8 fd45 	bl	8000608 <__aeabi_dmul>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4630      	mov	r0, r6
 8007b84:	4639      	mov	r1, r7
 8007b86:	f7f8 fb87 	bl	8000298 <__aeabi_dsub>
 8007b8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007b8e:	f7f8 fd3b 	bl	8000608 <__aeabi_dmul>
 8007b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	f7f8 fd33 	bl	8000608 <__aeabi_dmul>
 8007ba2:	a37b      	add	r3, pc, #492	; (adr r3, 8007d90 <__ieee754_pow+0x6d0>)
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	4604      	mov	r4, r0
 8007baa:	460d      	mov	r5, r1
 8007bac:	f7f8 fd2c 	bl	8000608 <__aeabi_dmul>
 8007bb0:	a379      	add	r3, pc, #484	; (adr r3, 8007d98 <__ieee754_pow+0x6d8>)
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	f7f8 fb71 	bl	800029c <__adddf3>
 8007bba:	4622      	mov	r2, r4
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	f7f8 fd23 	bl	8000608 <__aeabi_dmul>
 8007bc2:	a377      	add	r3, pc, #476	; (adr r3, 8007da0 <__ieee754_pow+0x6e0>)
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f7f8 fb68 	bl	800029c <__adddf3>
 8007bcc:	4622      	mov	r2, r4
 8007bce:	462b      	mov	r3, r5
 8007bd0:	f7f8 fd1a 	bl	8000608 <__aeabi_dmul>
 8007bd4:	a374      	add	r3, pc, #464	; (adr r3, 8007da8 <__ieee754_pow+0x6e8>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	f7f8 fb5f 	bl	800029c <__adddf3>
 8007bde:	4622      	mov	r2, r4
 8007be0:	462b      	mov	r3, r5
 8007be2:	f7f8 fd11 	bl	8000608 <__aeabi_dmul>
 8007be6:	a372      	add	r3, pc, #456	; (adr r3, 8007db0 <__ieee754_pow+0x6f0>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f7f8 fb56 	bl	800029c <__adddf3>
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	462b      	mov	r3, r5
 8007bf4:	f7f8 fd08 	bl	8000608 <__aeabi_dmul>
 8007bf8:	a36f      	add	r3, pc, #444	; (adr r3, 8007db8 <__ieee754_pow+0x6f8>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f7f8 fb4d 	bl	800029c <__adddf3>
 8007c02:	4622      	mov	r2, r4
 8007c04:	4606      	mov	r6, r0
 8007c06:	460f      	mov	r7, r1
 8007c08:	462b      	mov	r3, r5
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	f7f8 fcfb 	bl	8000608 <__aeabi_dmul>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4630      	mov	r0, r6
 8007c18:	4639      	mov	r1, r7
 8007c1a:	f7f8 fcf5 	bl	8000608 <__aeabi_dmul>
 8007c1e:	4642      	mov	r2, r8
 8007c20:	4604      	mov	r4, r0
 8007c22:	460d      	mov	r5, r1
 8007c24:	464b      	mov	r3, r9
 8007c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c2a:	f7f8 fb37 	bl	800029c <__adddf3>
 8007c2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c32:	f7f8 fce9 	bl	8000608 <__aeabi_dmul>
 8007c36:	4622      	mov	r2, r4
 8007c38:	462b      	mov	r3, r5
 8007c3a:	f7f8 fb2f 	bl	800029c <__adddf3>
 8007c3e:	4642      	mov	r2, r8
 8007c40:	4606      	mov	r6, r0
 8007c42:	460f      	mov	r7, r1
 8007c44:	464b      	mov	r3, r9
 8007c46:	4640      	mov	r0, r8
 8007c48:	4649      	mov	r1, r9
 8007c4a:	f7f8 fcdd 	bl	8000608 <__aeabi_dmul>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	4b68      	ldr	r3, [pc, #416]	; (8007df4 <__ieee754_pow+0x734>)
 8007c52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007c56:	f7f8 fb21 	bl	800029c <__adddf3>
 8007c5a:	4632      	mov	r2, r6
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	f7f8 fb1d 	bl	800029c <__adddf3>
 8007c62:	9802      	ldr	r0, [sp, #8]
 8007c64:	460d      	mov	r5, r1
 8007c66:	4604      	mov	r4, r0
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	4649      	mov	r1, r9
 8007c70:	f7f8 fcca 	bl	8000608 <__aeabi_dmul>
 8007c74:	2200      	movs	r2, #0
 8007c76:	4680      	mov	r8, r0
 8007c78:	4689      	mov	r9, r1
 8007c7a:	4b5e      	ldr	r3, [pc, #376]	; (8007df4 <__ieee754_pow+0x734>)
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f7f8 fb0a 	bl	8000298 <__aeabi_dsub>
 8007c84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c88:	f7f8 fb06 	bl	8000298 <__aeabi_dsub>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4630      	mov	r0, r6
 8007c92:	4639      	mov	r1, r7
 8007c94:	f7f8 fb00 	bl	8000298 <__aeabi_dsub>
 8007c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c9c:	f7f8 fcb4 	bl	8000608 <__aeabi_dmul>
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460f      	mov	r7, r1
 8007ca6:	462b      	mov	r3, r5
 8007ca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cac:	f7f8 fcac 	bl	8000608 <__aeabi_dmul>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 faf0 	bl	800029c <__adddf3>
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	460f      	mov	r7, r1
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	f7f8 fae8 	bl	800029c <__adddf3>
 8007ccc:	9802      	ldr	r0, [sp, #8]
 8007cce:	a33c      	add	r3, pc, #240	; (adr r3, 8007dc0 <__ieee754_pow+0x700>)
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	f7f8 fc96 	bl	8000608 <__aeabi_dmul>
 8007cdc:	4642      	mov	r2, r8
 8007cde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f7f8 fad6 	bl	8000298 <__aeabi_dsub>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	f7f8 fad0 	bl	8000298 <__aeabi_dsub>
 8007cf8:	a333      	add	r3, pc, #204	; (adr r3, 8007dc8 <__ieee754_pow+0x708>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 fc83 	bl	8000608 <__aeabi_dmul>
 8007d02:	a333      	add	r3, pc, #204	; (adr r3, 8007dd0 <__ieee754_pow+0x710>)
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	4606      	mov	r6, r0
 8007d0a:	460f      	mov	r7, r1
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	4629      	mov	r1, r5
 8007d10:	f7f8 fc7a 	bl	8000608 <__aeabi_dmul>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4630      	mov	r0, r6
 8007d1a:	4639      	mov	r1, r7
 8007d1c:	f7f8 fabe 	bl	800029c <__adddf3>
 8007d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d22:	4b35      	ldr	r3, [pc, #212]	; (8007df8 <__ieee754_pow+0x738>)
 8007d24:	4413      	add	r3, r2
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	f7f8 fab7 	bl	800029c <__adddf3>
 8007d2e:	4604      	mov	r4, r0
 8007d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d32:	460d      	mov	r5, r1
 8007d34:	f7f8 fbfe 	bl	8000534 <__aeabi_i2d>
 8007d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d3a:	4b30      	ldr	r3, [pc, #192]	; (8007dfc <__ieee754_pow+0x73c>)
 8007d3c:	4413      	add	r3, r2
 8007d3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d42:	4606      	mov	r6, r0
 8007d44:	460f      	mov	r7, r1
 8007d46:	4622      	mov	r2, r4
 8007d48:	462b      	mov	r3, r5
 8007d4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d4e:	f7f8 faa5 	bl	800029c <__adddf3>
 8007d52:	4642      	mov	r2, r8
 8007d54:	464b      	mov	r3, r9
 8007d56:	f7f8 faa1 	bl	800029c <__adddf3>
 8007d5a:	4632      	mov	r2, r6
 8007d5c:	463b      	mov	r3, r7
 8007d5e:	f7f8 fa9d 	bl	800029c <__adddf3>
 8007d62:	9802      	ldr	r0, [sp, #8]
 8007d64:	4632      	mov	r2, r6
 8007d66:	463b      	mov	r3, r7
 8007d68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d6c:	f7f8 fa94 	bl	8000298 <__aeabi_dsub>
 8007d70:	4642      	mov	r2, r8
 8007d72:	464b      	mov	r3, r9
 8007d74:	f7f8 fa90 	bl	8000298 <__aeabi_dsub>
 8007d78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d7c:	e607      	b.n	800798e <__ieee754_pow+0x2ce>
 8007d7e:	f04f 0a01 	mov.w	sl, #1
 8007d82:	e6a5      	b.n	8007ad0 <__ieee754_pow+0x410>
 8007d84:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007dd8 <__ieee754_pow+0x718>
 8007d88:	e613      	b.n	80079b2 <__ieee754_pow+0x2f2>
 8007d8a:	bf00      	nop
 8007d8c:	f3af 8000 	nop.w
 8007d90:	4a454eef 	.word	0x4a454eef
 8007d94:	3fca7e28 	.word	0x3fca7e28
 8007d98:	93c9db65 	.word	0x93c9db65
 8007d9c:	3fcd864a 	.word	0x3fcd864a
 8007da0:	a91d4101 	.word	0xa91d4101
 8007da4:	3fd17460 	.word	0x3fd17460
 8007da8:	518f264d 	.word	0x518f264d
 8007dac:	3fd55555 	.word	0x3fd55555
 8007db0:	db6fabff 	.word	0xdb6fabff
 8007db4:	3fdb6db6 	.word	0x3fdb6db6
 8007db8:	33333303 	.word	0x33333303
 8007dbc:	3fe33333 	.word	0x3fe33333
 8007dc0:	e0000000 	.word	0xe0000000
 8007dc4:	3feec709 	.word	0x3feec709
 8007dc8:	dc3a03fd 	.word	0xdc3a03fd
 8007dcc:	3feec709 	.word	0x3feec709
 8007dd0:	145b01f5 	.word	0x145b01f5
 8007dd4:	be3e2fe0 	.word	0xbe3e2fe0
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	3ff00000 	.word	0x3ff00000
 8007de0:	43400000 	.word	0x43400000
 8007de4:	0003988e 	.word	0x0003988e
 8007de8:	000bb679 	.word	0x000bb679
 8007dec:	08008830 	.word	0x08008830
 8007df0:	3ff00000 	.word	0x3ff00000
 8007df4:	40080000 	.word	0x40080000
 8007df8:	08008850 	.word	0x08008850
 8007dfc:	08008840 	.word	0x08008840
 8007e00:	a3b4      	add	r3, pc, #720	; (adr r3, 80080d4 <__ieee754_pow+0xa14>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	4640      	mov	r0, r8
 8007e08:	4649      	mov	r1, r9
 8007e0a:	f7f8 fa47 	bl	800029c <__adddf3>
 8007e0e:	4622      	mov	r2, r4
 8007e10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e14:	462b      	mov	r3, r5
 8007e16:	4630      	mov	r0, r6
 8007e18:	4639      	mov	r1, r7
 8007e1a:	f7f8 fa3d 	bl	8000298 <__aeabi_dsub>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e26:	f7f8 fe7f 	bl	8000b28 <__aeabi_dcmpgt>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	f47f adfe 	bne.w	8007a2c <__ieee754_pow+0x36c>
 8007e30:	4aa3      	ldr	r2, [pc, #652]	; (80080c0 <__ieee754_pow+0xa00>)
 8007e32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e36:	4293      	cmp	r3, r2
 8007e38:	f340 810a 	ble.w	8008050 <__ieee754_pow+0x990>
 8007e3c:	151b      	asrs	r3, r3, #20
 8007e3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007e42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007e46:	fa4a f303 	asr.w	r3, sl, r3
 8007e4a:	445b      	add	r3, fp
 8007e4c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007e50:	4e9c      	ldr	r6, [pc, #624]	; (80080c4 <__ieee754_pow+0xa04>)
 8007e52:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007e56:	4116      	asrs	r6, r2
 8007e58:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	ea23 0106 	bic.w	r1, r3, r6
 8007e62:	f1c2 0214 	rsb	r2, r2, #20
 8007e66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007e6a:	fa4a fa02 	asr.w	sl, sl, r2
 8007e6e:	f1bb 0f00 	cmp.w	fp, #0
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4620      	mov	r0, r4
 8007e78:	4629      	mov	r1, r5
 8007e7a:	bfb8      	it	lt
 8007e7c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007e80:	f7f8 fa0a 	bl	8000298 <__aeabi_dsub>
 8007e84:	e9cd 0100 	strd	r0, r1, [sp]
 8007e88:	4642      	mov	r2, r8
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e90:	f7f8 fa04 	bl	800029c <__adddf3>
 8007e94:	2000      	movs	r0, #0
 8007e96:	a378      	add	r3, pc, #480	; (adr r3, 8008078 <__ieee754_pow+0x9b8>)
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	460d      	mov	r5, r1
 8007ea0:	f7f8 fbb2 	bl	8000608 <__aeabi_dmul>
 8007ea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	460f      	mov	r7, r1
 8007eac:	4620      	mov	r0, r4
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 f9f2 	bl	8000298 <__aeabi_dsub>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4640      	mov	r0, r8
 8007eba:	4649      	mov	r1, r9
 8007ebc:	f7f8 f9ec 	bl	8000298 <__aeabi_dsub>
 8007ec0:	a36f      	add	r3, pc, #444	; (adr r3, 8008080 <__ieee754_pow+0x9c0>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 fb9f 	bl	8000608 <__aeabi_dmul>
 8007eca:	a36f      	add	r3, pc, #444	; (adr r3, 8008088 <__ieee754_pow+0x9c8>)
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	4680      	mov	r8, r0
 8007ed2:	4689      	mov	r9, r1
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	f7f8 fb96 	bl	8000608 <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 f9da 	bl	800029c <__adddf3>
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f7f8 f9d2 	bl	800029c <__adddf3>
 8007ef8:	4632      	mov	r2, r6
 8007efa:	463b      	mov	r3, r7
 8007efc:	4680      	mov	r8, r0
 8007efe:	4689      	mov	r9, r1
 8007f00:	f7f8 f9ca 	bl	8000298 <__aeabi_dsub>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4620      	mov	r0, r4
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	f7f8 f9c4 	bl	8000298 <__aeabi_dsub>
 8007f10:	4642      	mov	r2, r8
 8007f12:	4606      	mov	r6, r0
 8007f14:	460f      	mov	r7, r1
 8007f16:	464b      	mov	r3, r9
 8007f18:	4640      	mov	r0, r8
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	f7f8 fb74 	bl	8000608 <__aeabi_dmul>
 8007f20:	a35b      	add	r3, pc, #364	; (adr r3, 8008090 <__ieee754_pow+0x9d0>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	4604      	mov	r4, r0
 8007f28:	460d      	mov	r5, r1
 8007f2a:	f7f8 fb6d 	bl	8000608 <__aeabi_dmul>
 8007f2e:	a35a      	add	r3, pc, #360	; (adr r3, 8008098 <__ieee754_pow+0x9d8>)
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f7f8 f9b0 	bl	8000298 <__aeabi_dsub>
 8007f38:	4622      	mov	r2, r4
 8007f3a:	462b      	mov	r3, r5
 8007f3c:	f7f8 fb64 	bl	8000608 <__aeabi_dmul>
 8007f40:	a357      	add	r3, pc, #348	; (adr r3, 80080a0 <__ieee754_pow+0x9e0>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	f7f8 f9a9 	bl	800029c <__adddf3>
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	f7f8 fb5b 	bl	8000608 <__aeabi_dmul>
 8007f52:	a355      	add	r3, pc, #340	; (adr r3, 80080a8 <__ieee754_pow+0x9e8>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f7f8 f99e 	bl	8000298 <__aeabi_dsub>
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	462b      	mov	r3, r5
 8007f60:	f7f8 fb52 	bl	8000608 <__aeabi_dmul>
 8007f64:	a352      	add	r3, pc, #328	; (adr r3, 80080b0 <__ieee754_pow+0x9f0>)
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f7f8 f997 	bl	800029c <__adddf3>
 8007f6e:	4622      	mov	r2, r4
 8007f70:	462b      	mov	r3, r5
 8007f72:	f7f8 fb49 	bl	8000608 <__aeabi_dmul>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	f7f8 f98b 	bl	8000298 <__aeabi_dsub>
 8007f82:	4604      	mov	r4, r0
 8007f84:	460d      	mov	r5, r1
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	f7f8 fb3b 	bl	8000608 <__aeabi_dmul>
 8007f92:	2200      	movs	r2, #0
 8007f94:	e9cd 0100 	strd	r0, r1, [sp]
 8007f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f7f8 f97a 	bl	8000298 <__aeabi_dsub>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fac:	f7f8 fc56 	bl	800085c <__aeabi_ddiv>
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	460d      	mov	r5, r1
 8007fb6:	463b      	mov	r3, r7
 8007fb8:	4640      	mov	r0, r8
 8007fba:	4649      	mov	r1, r9
 8007fbc:	f7f8 fb24 	bl	8000608 <__aeabi_dmul>
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	463b      	mov	r3, r7
 8007fc4:	f7f8 f96a 	bl	800029c <__adddf3>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4620      	mov	r0, r4
 8007fce:	4629      	mov	r1, r5
 8007fd0:	f7f8 f962 	bl	8000298 <__aeabi_dsub>
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	f7f8 f95e 	bl	8000298 <__aeabi_dsub>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	4939      	ldr	r1, [pc, #228]	; (80080c8 <__ieee754_pow+0xa08>)
 8007fe4:	f7f8 f958 	bl	8000298 <__aeabi_dsub>
 8007fe8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007fec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	da2f      	bge.n	8008056 <__ieee754_pow+0x996>
 8007ff6:	4650      	mov	r0, sl
 8007ff8:	ec43 2b10 	vmov	d0, r2, r3
 8007ffc:	f000 f9c0 	bl	8008380 <scalbn>
 8008000:	ec51 0b10 	vmov	r0, r1, d0
 8008004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008008:	f7ff bbf1 	b.w	80077ee <__ieee754_pow+0x12e>
 800800c:	4b2f      	ldr	r3, [pc, #188]	; (80080cc <__ieee754_pow+0xa0c>)
 800800e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008012:	429e      	cmp	r6, r3
 8008014:	f77f af0c 	ble.w	8007e30 <__ieee754_pow+0x770>
 8008018:	4b2d      	ldr	r3, [pc, #180]	; (80080d0 <__ieee754_pow+0xa10>)
 800801a:	440b      	add	r3, r1
 800801c:	4303      	orrs	r3, r0
 800801e:	d00b      	beq.n	8008038 <__ieee754_pow+0x978>
 8008020:	a325      	add	r3, pc, #148	; (adr r3, 80080b8 <__ieee754_pow+0x9f8>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800802a:	f7f8 faed 	bl	8000608 <__aeabi_dmul>
 800802e:	a322      	add	r3, pc, #136	; (adr r3, 80080b8 <__ieee754_pow+0x9f8>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7ff bbdb 	b.w	80077ee <__ieee754_pow+0x12e>
 8008038:	4622      	mov	r2, r4
 800803a:	462b      	mov	r3, r5
 800803c:	f7f8 f92c 	bl	8000298 <__aeabi_dsub>
 8008040:	4642      	mov	r2, r8
 8008042:	464b      	mov	r3, r9
 8008044:	f7f8 fd66 	bl	8000b14 <__aeabi_dcmpge>
 8008048:	2800      	cmp	r0, #0
 800804a:	f43f aef1 	beq.w	8007e30 <__ieee754_pow+0x770>
 800804e:	e7e7      	b.n	8008020 <__ieee754_pow+0x960>
 8008050:	f04f 0a00 	mov.w	sl, #0
 8008054:	e718      	b.n	8007e88 <__ieee754_pow+0x7c8>
 8008056:	4621      	mov	r1, r4
 8008058:	e7d4      	b.n	8008004 <__ieee754_pow+0x944>
 800805a:	2000      	movs	r0, #0
 800805c:	491a      	ldr	r1, [pc, #104]	; (80080c8 <__ieee754_pow+0xa08>)
 800805e:	f7ff bb8f 	b.w	8007780 <__ieee754_pow+0xc0>
 8008062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008066:	f7ff bb8b 	b.w	8007780 <__ieee754_pow+0xc0>
 800806a:	4630      	mov	r0, r6
 800806c:	4639      	mov	r1, r7
 800806e:	f7ff bb87 	b.w	8007780 <__ieee754_pow+0xc0>
 8008072:	4693      	mov	fp, r2
 8008074:	f7ff bb98 	b.w	80077a8 <__ieee754_pow+0xe8>
 8008078:	00000000 	.word	0x00000000
 800807c:	3fe62e43 	.word	0x3fe62e43
 8008080:	fefa39ef 	.word	0xfefa39ef
 8008084:	3fe62e42 	.word	0x3fe62e42
 8008088:	0ca86c39 	.word	0x0ca86c39
 800808c:	be205c61 	.word	0xbe205c61
 8008090:	72bea4d0 	.word	0x72bea4d0
 8008094:	3e663769 	.word	0x3e663769
 8008098:	c5d26bf1 	.word	0xc5d26bf1
 800809c:	3ebbbd41 	.word	0x3ebbbd41
 80080a0:	af25de2c 	.word	0xaf25de2c
 80080a4:	3f11566a 	.word	0x3f11566a
 80080a8:	16bebd93 	.word	0x16bebd93
 80080ac:	3f66c16c 	.word	0x3f66c16c
 80080b0:	5555553e 	.word	0x5555553e
 80080b4:	3fc55555 	.word	0x3fc55555
 80080b8:	c2f8f359 	.word	0xc2f8f359
 80080bc:	01a56e1f 	.word	0x01a56e1f
 80080c0:	3fe00000 	.word	0x3fe00000
 80080c4:	000fffff 	.word	0x000fffff
 80080c8:	3ff00000 	.word	0x3ff00000
 80080cc:	4090cbff 	.word	0x4090cbff
 80080d0:	3f6f3400 	.word	0x3f6f3400
 80080d4:	652b82fe 	.word	0x652b82fe
 80080d8:	3c971547 	.word	0x3c971547

080080dc <__ieee754_sqrt>:
 80080dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e0:	4955      	ldr	r1, [pc, #340]	; (8008238 <__ieee754_sqrt+0x15c>)
 80080e2:	ec55 4b10 	vmov	r4, r5, d0
 80080e6:	43a9      	bics	r1, r5
 80080e8:	462b      	mov	r3, r5
 80080ea:	462a      	mov	r2, r5
 80080ec:	d112      	bne.n	8008114 <__ieee754_sqrt+0x38>
 80080ee:	ee10 2a10 	vmov	r2, s0
 80080f2:	ee10 0a10 	vmov	r0, s0
 80080f6:	4629      	mov	r1, r5
 80080f8:	f7f8 fa86 	bl	8000608 <__aeabi_dmul>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4620      	mov	r0, r4
 8008102:	4629      	mov	r1, r5
 8008104:	f7f8 f8ca 	bl	800029c <__adddf3>
 8008108:	4604      	mov	r4, r0
 800810a:	460d      	mov	r5, r1
 800810c:	ec45 4b10 	vmov	d0, r4, r5
 8008110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008114:	2d00      	cmp	r5, #0
 8008116:	ee10 0a10 	vmov	r0, s0
 800811a:	4621      	mov	r1, r4
 800811c:	dc0f      	bgt.n	800813e <__ieee754_sqrt+0x62>
 800811e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008122:	4330      	orrs	r0, r6
 8008124:	d0f2      	beq.n	800810c <__ieee754_sqrt+0x30>
 8008126:	b155      	cbz	r5, 800813e <__ieee754_sqrt+0x62>
 8008128:	ee10 2a10 	vmov	r2, s0
 800812c:	4620      	mov	r0, r4
 800812e:	4629      	mov	r1, r5
 8008130:	f7f8 f8b2 	bl	8000298 <__aeabi_dsub>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	f7f8 fb90 	bl	800085c <__aeabi_ddiv>
 800813c:	e7e4      	b.n	8008108 <__ieee754_sqrt+0x2c>
 800813e:	151b      	asrs	r3, r3, #20
 8008140:	d073      	beq.n	800822a <__ieee754_sqrt+0x14e>
 8008142:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008146:	07dd      	lsls	r5, r3, #31
 8008148:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800814c:	bf48      	it	mi
 800814e:	0fc8      	lsrmi	r0, r1, #31
 8008150:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008154:	bf44      	itt	mi
 8008156:	0049      	lslmi	r1, r1, #1
 8008158:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800815c:	2500      	movs	r5, #0
 800815e:	1058      	asrs	r0, r3, #1
 8008160:	0fcb      	lsrs	r3, r1, #31
 8008162:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008166:	0049      	lsls	r1, r1, #1
 8008168:	2316      	movs	r3, #22
 800816a:	462c      	mov	r4, r5
 800816c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008170:	19a7      	adds	r7, r4, r6
 8008172:	4297      	cmp	r7, r2
 8008174:	bfde      	ittt	le
 8008176:	19bc      	addle	r4, r7, r6
 8008178:	1bd2      	suble	r2, r2, r7
 800817a:	19ad      	addle	r5, r5, r6
 800817c:	0fcf      	lsrs	r7, r1, #31
 800817e:	3b01      	subs	r3, #1
 8008180:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008184:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008188:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800818c:	d1f0      	bne.n	8008170 <__ieee754_sqrt+0x94>
 800818e:	f04f 0c20 	mov.w	ip, #32
 8008192:	469e      	mov	lr, r3
 8008194:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008198:	42a2      	cmp	r2, r4
 800819a:	eb06 070e 	add.w	r7, r6, lr
 800819e:	dc02      	bgt.n	80081a6 <__ieee754_sqrt+0xca>
 80081a0:	d112      	bne.n	80081c8 <__ieee754_sqrt+0xec>
 80081a2:	428f      	cmp	r7, r1
 80081a4:	d810      	bhi.n	80081c8 <__ieee754_sqrt+0xec>
 80081a6:	2f00      	cmp	r7, #0
 80081a8:	eb07 0e06 	add.w	lr, r7, r6
 80081ac:	da42      	bge.n	8008234 <__ieee754_sqrt+0x158>
 80081ae:	f1be 0f00 	cmp.w	lr, #0
 80081b2:	db3f      	blt.n	8008234 <__ieee754_sqrt+0x158>
 80081b4:	f104 0801 	add.w	r8, r4, #1
 80081b8:	1b12      	subs	r2, r2, r4
 80081ba:	428f      	cmp	r7, r1
 80081bc:	bf88      	it	hi
 80081be:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80081c2:	1bc9      	subs	r1, r1, r7
 80081c4:	4433      	add	r3, r6
 80081c6:	4644      	mov	r4, r8
 80081c8:	0052      	lsls	r2, r2, #1
 80081ca:	f1bc 0c01 	subs.w	ip, ip, #1
 80081ce:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80081d2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80081d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80081da:	d1dd      	bne.n	8008198 <__ieee754_sqrt+0xbc>
 80081dc:	430a      	orrs	r2, r1
 80081de:	d006      	beq.n	80081ee <__ieee754_sqrt+0x112>
 80081e0:	1c5c      	adds	r4, r3, #1
 80081e2:	bf13      	iteet	ne
 80081e4:	3301      	addne	r3, #1
 80081e6:	3501      	addeq	r5, #1
 80081e8:	4663      	moveq	r3, ip
 80081ea:	f023 0301 	bicne.w	r3, r3, #1
 80081ee:	106a      	asrs	r2, r5, #1
 80081f0:	085b      	lsrs	r3, r3, #1
 80081f2:	07e9      	lsls	r1, r5, #31
 80081f4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80081f8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80081fc:	bf48      	it	mi
 80081fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008202:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008206:	461c      	mov	r4, r3
 8008208:	e780      	b.n	800810c <__ieee754_sqrt+0x30>
 800820a:	0aca      	lsrs	r2, r1, #11
 800820c:	3815      	subs	r0, #21
 800820e:	0549      	lsls	r1, r1, #21
 8008210:	2a00      	cmp	r2, #0
 8008212:	d0fa      	beq.n	800820a <__ieee754_sqrt+0x12e>
 8008214:	02d6      	lsls	r6, r2, #11
 8008216:	d50a      	bpl.n	800822e <__ieee754_sqrt+0x152>
 8008218:	f1c3 0420 	rsb	r4, r3, #32
 800821c:	fa21 f404 	lsr.w	r4, r1, r4
 8008220:	1e5d      	subs	r5, r3, #1
 8008222:	4099      	lsls	r1, r3
 8008224:	4322      	orrs	r2, r4
 8008226:	1b43      	subs	r3, r0, r5
 8008228:	e78b      	b.n	8008142 <__ieee754_sqrt+0x66>
 800822a:	4618      	mov	r0, r3
 800822c:	e7f0      	b.n	8008210 <__ieee754_sqrt+0x134>
 800822e:	0052      	lsls	r2, r2, #1
 8008230:	3301      	adds	r3, #1
 8008232:	e7ef      	b.n	8008214 <__ieee754_sqrt+0x138>
 8008234:	46a0      	mov	r8, r4
 8008236:	e7bf      	b.n	80081b8 <__ieee754_sqrt+0xdc>
 8008238:	7ff00000 	.word	0x7ff00000

0800823c <fabs>:
 800823c:	ec51 0b10 	vmov	r0, r1, d0
 8008240:	ee10 2a10 	vmov	r2, s0
 8008244:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008248:	ec43 2b10 	vmov	d0, r2, r3
 800824c:	4770      	bx	lr

0800824e <finite>:
 800824e:	ee10 3a90 	vmov	r3, s1
 8008252:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008256:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800825a:	0fc0      	lsrs	r0, r0, #31
 800825c:	4770      	bx	lr

0800825e <matherr>:
 800825e:	2000      	movs	r0, #0
 8008260:	4770      	bx	lr
 8008262:	0000      	movs	r0, r0
 8008264:	0000      	movs	r0, r0
	...

08008268 <nan>:
 8008268:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008270 <nan+0x8>
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	00000000 	.word	0x00000000
 8008274:	7ff80000 	.word	0x7ff80000

08008278 <rint>:
 8008278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800827a:	ec51 0b10 	vmov	r0, r1, d0
 800827e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008282:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008286:	2e13      	cmp	r6, #19
 8008288:	460b      	mov	r3, r1
 800828a:	ee10 4a10 	vmov	r4, s0
 800828e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008292:	dc56      	bgt.n	8008342 <rint+0xca>
 8008294:	2e00      	cmp	r6, #0
 8008296:	da2b      	bge.n	80082f0 <rint+0x78>
 8008298:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800829c:	4302      	orrs	r2, r0
 800829e:	d023      	beq.n	80082e8 <rint+0x70>
 80082a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80082a4:	4302      	orrs	r2, r0
 80082a6:	4254      	negs	r4, r2
 80082a8:	4314      	orrs	r4, r2
 80082aa:	0c4b      	lsrs	r3, r1, #17
 80082ac:	0b24      	lsrs	r4, r4, #12
 80082ae:	045b      	lsls	r3, r3, #17
 80082b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80082b4:	ea44 0103 	orr.w	r1, r4, r3
 80082b8:	460b      	mov	r3, r1
 80082ba:	492f      	ldr	r1, [pc, #188]	; (8008378 <rint+0x100>)
 80082bc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80082c0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80082c4:	4602      	mov	r2, r0
 80082c6:	4639      	mov	r1, r7
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7f7 ffe7 	bl	800029c <__adddf3>
 80082ce:	e9cd 0100 	strd	r0, r1, [sp]
 80082d2:	463b      	mov	r3, r7
 80082d4:	4632      	mov	r2, r6
 80082d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082da:	f7f7 ffdd 	bl	8000298 <__aeabi_dsub>
 80082de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80082e6:	4639      	mov	r1, r7
 80082e8:	ec41 0b10 	vmov	d0, r0, r1
 80082ec:	b003      	add	sp, #12
 80082ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f0:	4a22      	ldr	r2, [pc, #136]	; (800837c <rint+0x104>)
 80082f2:	4132      	asrs	r2, r6
 80082f4:	ea01 0702 	and.w	r7, r1, r2
 80082f8:	4307      	orrs	r7, r0
 80082fa:	d0f5      	beq.n	80082e8 <rint+0x70>
 80082fc:	0852      	lsrs	r2, r2, #1
 80082fe:	4011      	ands	r1, r2
 8008300:	430c      	orrs	r4, r1
 8008302:	d00b      	beq.n	800831c <rint+0xa4>
 8008304:	ea23 0202 	bic.w	r2, r3, r2
 8008308:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800830c:	2e13      	cmp	r6, #19
 800830e:	fa43 f306 	asr.w	r3, r3, r6
 8008312:	bf0c      	ite	eq
 8008314:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008318:	2400      	movne	r4, #0
 800831a:	4313      	orrs	r3, r2
 800831c:	4916      	ldr	r1, [pc, #88]	; (8008378 <rint+0x100>)
 800831e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008322:	4622      	mov	r2, r4
 8008324:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008328:	4620      	mov	r0, r4
 800832a:	4629      	mov	r1, r5
 800832c:	f7f7 ffb6 	bl	800029c <__adddf3>
 8008330:	e9cd 0100 	strd	r0, r1, [sp]
 8008334:	4622      	mov	r2, r4
 8008336:	462b      	mov	r3, r5
 8008338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800833c:	f7f7 ffac 	bl	8000298 <__aeabi_dsub>
 8008340:	e7d2      	b.n	80082e8 <rint+0x70>
 8008342:	2e33      	cmp	r6, #51	; 0x33
 8008344:	dd07      	ble.n	8008356 <rint+0xde>
 8008346:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800834a:	d1cd      	bne.n	80082e8 <rint+0x70>
 800834c:	ee10 2a10 	vmov	r2, s0
 8008350:	f7f7 ffa4 	bl	800029c <__adddf3>
 8008354:	e7c8      	b.n	80082e8 <rint+0x70>
 8008356:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800835a:	f04f 32ff 	mov.w	r2, #4294967295
 800835e:	40f2      	lsrs	r2, r6
 8008360:	4210      	tst	r0, r2
 8008362:	d0c1      	beq.n	80082e8 <rint+0x70>
 8008364:	0852      	lsrs	r2, r2, #1
 8008366:	4210      	tst	r0, r2
 8008368:	bf1f      	itttt	ne
 800836a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800836e:	ea20 0202 	bicne.w	r2, r0, r2
 8008372:	4134      	asrne	r4, r6
 8008374:	4314      	orrne	r4, r2
 8008376:	e7d1      	b.n	800831c <rint+0xa4>
 8008378:	08008860 	.word	0x08008860
 800837c:	000fffff 	.word	0x000fffff

08008380 <scalbn>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	ec55 4b10 	vmov	r4, r5, d0
 8008386:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800838a:	4606      	mov	r6, r0
 800838c:	462b      	mov	r3, r5
 800838e:	b9aa      	cbnz	r2, 80083bc <scalbn+0x3c>
 8008390:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008394:	4323      	orrs	r3, r4
 8008396:	d03b      	beq.n	8008410 <scalbn+0x90>
 8008398:	4b31      	ldr	r3, [pc, #196]	; (8008460 <scalbn+0xe0>)
 800839a:	4629      	mov	r1, r5
 800839c:	2200      	movs	r2, #0
 800839e:	ee10 0a10 	vmov	r0, s0
 80083a2:	f7f8 f931 	bl	8000608 <__aeabi_dmul>
 80083a6:	4b2f      	ldr	r3, [pc, #188]	; (8008464 <scalbn+0xe4>)
 80083a8:	429e      	cmp	r6, r3
 80083aa:	4604      	mov	r4, r0
 80083ac:	460d      	mov	r5, r1
 80083ae:	da12      	bge.n	80083d6 <scalbn+0x56>
 80083b0:	a327      	add	r3, pc, #156	; (adr r3, 8008450 <scalbn+0xd0>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	f7f8 f927 	bl	8000608 <__aeabi_dmul>
 80083ba:	e009      	b.n	80083d0 <scalbn+0x50>
 80083bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80083c0:	428a      	cmp	r2, r1
 80083c2:	d10c      	bne.n	80083de <scalbn+0x5e>
 80083c4:	ee10 2a10 	vmov	r2, s0
 80083c8:	4620      	mov	r0, r4
 80083ca:	4629      	mov	r1, r5
 80083cc:	f7f7 ff66 	bl	800029c <__adddf3>
 80083d0:	4604      	mov	r4, r0
 80083d2:	460d      	mov	r5, r1
 80083d4:	e01c      	b.n	8008410 <scalbn+0x90>
 80083d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80083da:	460b      	mov	r3, r1
 80083dc:	3a36      	subs	r2, #54	; 0x36
 80083de:	4432      	add	r2, r6
 80083e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80083e4:	428a      	cmp	r2, r1
 80083e6:	dd0b      	ble.n	8008400 <scalbn+0x80>
 80083e8:	ec45 4b11 	vmov	d1, r4, r5
 80083ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008458 <scalbn+0xd8>
 80083f0:	f000 f83c 	bl	800846c <copysign>
 80083f4:	a318      	add	r3, pc, #96	; (adr r3, 8008458 <scalbn+0xd8>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	ec51 0b10 	vmov	r0, r1, d0
 80083fe:	e7da      	b.n	80083b6 <scalbn+0x36>
 8008400:	2a00      	cmp	r2, #0
 8008402:	dd08      	ble.n	8008416 <scalbn+0x96>
 8008404:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008408:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800840c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008410:	ec45 4b10 	vmov	d0, r4, r5
 8008414:	bd70      	pop	{r4, r5, r6, pc}
 8008416:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800841a:	da0d      	bge.n	8008438 <scalbn+0xb8>
 800841c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008420:	429e      	cmp	r6, r3
 8008422:	ec45 4b11 	vmov	d1, r4, r5
 8008426:	dce1      	bgt.n	80083ec <scalbn+0x6c>
 8008428:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008450 <scalbn+0xd0>
 800842c:	f000 f81e 	bl	800846c <copysign>
 8008430:	a307      	add	r3, pc, #28	; (adr r3, 8008450 <scalbn+0xd0>)
 8008432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008436:	e7e0      	b.n	80083fa <scalbn+0x7a>
 8008438:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800843c:	3236      	adds	r2, #54	; 0x36
 800843e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008442:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008446:	4620      	mov	r0, r4
 8008448:	4629      	mov	r1, r5
 800844a:	2200      	movs	r2, #0
 800844c:	4b06      	ldr	r3, [pc, #24]	; (8008468 <scalbn+0xe8>)
 800844e:	e7b2      	b.n	80083b6 <scalbn+0x36>
 8008450:	c2f8f359 	.word	0xc2f8f359
 8008454:	01a56e1f 	.word	0x01a56e1f
 8008458:	8800759c 	.word	0x8800759c
 800845c:	7e37e43c 	.word	0x7e37e43c
 8008460:	43500000 	.word	0x43500000
 8008464:	ffff3cb0 	.word	0xffff3cb0
 8008468:	3c900000 	.word	0x3c900000

0800846c <copysign>:
 800846c:	ec51 0b10 	vmov	r0, r1, d0
 8008470:	ee11 0a90 	vmov	r0, s3
 8008474:	ee10 2a10 	vmov	r2, s0
 8008478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800847c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008480:	ea41 0300 	orr.w	r3, r1, r0
 8008484:	ec43 2b10 	vmov	d0, r2, r3
 8008488:	4770      	bx	lr
	...

0800848c <_init>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	bf00      	nop
 8008490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008492:	bc08      	pop	{r3}
 8008494:	469e      	mov	lr, r3
 8008496:	4770      	bx	lr

08008498 <_fini>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	bf00      	nop
 800849c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849e:	bc08      	pop	{r3}
 80084a0:	469e      	mov	lr, r3
 80084a2:	4770      	bx	lr
