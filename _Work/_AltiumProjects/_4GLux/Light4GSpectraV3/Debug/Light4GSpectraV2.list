
Light4GSpectraV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f32c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  0800f4cc  0800f4cc  0001f4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801013c  0801013c  0002013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010144  08010144  00020144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010148  08010148  00020148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000260  20000000  0801014c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000c3f8  20000260  080103ac  00030260  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000c658  080103ac  0003c658  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007d425  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bbe1  00000000  00000000  000ad6b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001b1c2  00000000  00000000  000b9296  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002200  00000000  00000000  000d4458  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003300  00000000  00000000  000d6658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002dcba  00000000  00000000  000d9958  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00025aa7  00000000  00000000  00107612  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000fff8a  00000000  00000000  0012d0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000f7  00000000  00000000  0022d043  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000076dc  00000000  00000000  0022d13c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         00000084  00000000  00000000  00234818  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000117  00000000  00000000  0023489c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000260 	.word	0x20000260
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f4b4 	.word	0x0800f4b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000264 	.word	0x20000264
 80001dc:	0800f4b4 	.word	0x0800f4b4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b972 	b.w	8000e28 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	4688      	mov	r8, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14b      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	d967      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0720 	rsb	r7, r2, #32
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b82:	4095      	lsls	r5, r2
 8000b84:	ea47 0803 	orr.w	r8, r7, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b94:	fa1f fc85 	uxth.w	ip, r5
 8000b98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bae:	f080 811b 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8118 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000bb8:	3f02      	subs	r7, #2
 8000bba:	442b      	add	r3, r5
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd0:	45a4      	cmp	ip, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	192c      	adds	r4, r5, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8107 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	f240 8104 	bls.w	8000dec <__udivmoddi4+0x290>
 8000be4:	3802      	subs	r0, #2
 8000be6:	442c      	add	r4, r5
 8000be8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bec:	eba4 040c 	sub.w	r4, r4, ip
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	b11e      	cbz	r6, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0xbe>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80eb 	beq.w	8000de2 <__udivmoddi4+0x286>
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c12:	4638      	mov	r0, r7
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f783 	clz	r7, r3
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d147      	bne.n	8000cb2 <__udivmoddi4+0x156>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xd0>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2c4>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	4698      	mov	r8, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e0      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3e:	e7dd      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000c40:	b902      	cbnz	r2, 8000c44 <__udivmoddi4+0xe8>
 8000c42:	deff      	udf	#255	; 0xff
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f040 808f 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4e:	1b49      	subs	r1, r1, r5
 8000c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c54:	fa1f f885 	uxth.w	r8, r5
 8000c58:	2701      	movs	r7, #1
 8000c5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb08 f10c 	mul.w	r1, r8, ip
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	f200 80cd 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x14c>
 8000c98:	192c      	adds	r4, r5, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x14a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80b6 	bhi.w	8000e12 <__udivmoddi4+0x2b6>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e79f      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	40bb      	lsls	r3, r7
 8000cb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ccc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cd0:	4325      	orrs	r5, r4
 8000cd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd6:	0c2c      	lsrs	r4, r5, #16
 8000cd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cdc:	fa1f fa8e 	uxth.w	sl, lr
 8000ce0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	fa02 f207 	lsl.w	r2, r2, r7
 8000cee:	fa00 f107 	lsl.w	r1, r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cfc:	f080 8087 	bcs.w	8000e0e <__udivmoddi4+0x2b2>
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f240 8084 	bls.w	8000e0e <__udivmoddi4+0x2b2>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4473      	add	r3, lr
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	b2ad      	uxth	r5, r5
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d20:	45a2      	cmp	sl, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1e 0404 	adds.w	r4, lr, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d26b      	bcs.n	8000e06 <__udivmoddi4+0x2aa>
 8000d2e:	45a2      	cmp	sl, r4
 8000d30:	d969      	bls.n	8000e06 <__udivmoddi4+0x2aa>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4474      	add	r4, lr
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	eba4 040a 	sub.w	r4, r4, sl
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c2      	mov	sl, r8
 8000d46:	464b      	mov	r3, r9
 8000d48:	d354      	bcc.n	8000df4 <__udivmoddi4+0x298>
 8000d4a:	d051      	beq.n	8000df0 <__udivmoddi4+0x294>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d069      	beq.n	8000e24 <__udivmoddi4+0x2c8>
 8000d50:	ebb1 050a 	subs.w	r5, r1, sl
 8000d54:	eb64 0403 	sbc.w	r4, r4, r3
 8000d58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d5c:	40fd      	lsrs	r5, r7
 8000d5e:	40fc      	lsrs	r4, r7
 8000d60:	ea4c 0505 	orr.w	r5, ip, r5
 8000d64:	e9c6 5400 	strd	r5, r4, [r6]
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e747      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f703 	lsr.w	r7, r0, r3
 8000d74:	4095      	lsls	r5, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d82:	4338      	orrs	r0, r7
 8000d84:	0c01      	lsrs	r1, r0, #16
 8000d86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d8a:	fa1f f885 	uxth.w	r8, r5
 8000d8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb07 f308 	mul.w	r3, r7, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x256>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da8:	d22f      	bcs.n	8000e0a <__udivmoddi4+0x2ae>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d92d      	bls.n	8000e0a <__udivmoddi4+0x2ae>
 8000dae:	3f02      	subs	r7, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	b281      	uxth	r1, r0
 8000db6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb00 f308 	mul.w	r3, r0, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x27e>
 8000dca:	1869      	adds	r1, r5, r1
 8000dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd0:	d217      	bcs.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d915      	bls.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4429      	add	r1, r5
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000de0:	e73b      	b.n	8000c5a <__udivmoddi4+0xfe>
 8000de2:	4637      	mov	r7, r6
 8000de4:	4630      	mov	r0, r6
 8000de6:	e709      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de8:	4607      	mov	r7, r0
 8000dea:	e6e7      	b.n	8000bbc <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fb      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000df0:	4541      	cmp	r1, r8
 8000df2:	d2ab      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	4613      	mov	r3, r2
 8000e00:	e7a4      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e02:	4660      	mov	r0, ip
 8000e04:	e7e9      	b.n	8000dda <__udivmoddi4+0x27e>
 8000e06:	4618      	mov	r0, r3
 8000e08:	e795      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0a:	4667      	mov	r7, ip
 8000e0c:	e7d1      	b.n	8000db2 <__udivmoddi4+0x256>
 8000e0e:	4681      	mov	r9, r0
 8000e10:	e77c      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	442c      	add	r4, r5
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0x14c>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	442b      	add	r3, r5
 8000e1e:	e72f      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e20:	4638      	mov	r0, r7
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xda>
 8000e24:	4637      	mov	r7, r6
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0xa0>

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_InitTick+0x24>)
{
 8000e30:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e38:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e3c:	f000 fda4 	bl	8001988 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	4621      	mov	r1, r4
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f000 fd5e 	bl	8001908 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	bd10      	pop	{r4, pc}
 8000e50:	20000024 	.word	0x20000024

08000e54 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x20>)
{
 8000e56:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	6813      	ldr	r3, [r2, #0]
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 fd3f 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff ffe0 	bl	8000e2c <HAL_InitTick>
  HAL_MspInit();
 8000e6c:	f009 fc9c 	bl	800a7a8 <HAL_MspInit>
}
 8000e70:	2000      	movs	r0, #0
 8000e72:	bd08      	pop	{r3, pc}
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000e78:	4a02      	ldr	r2, [pc, #8]	; (8000e84 <HAL_IncTick+0xc>)
 8000e7a:	6813      	ldr	r3, [r2, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200003e8 	.word	0x200003e8

08000e88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e88:	4b01      	ldr	r3, [pc, #4]	; (8000e90 <HAL_GetTick+0x8>)
 8000e8a:	6818      	ldr	r0, [r3, #0]
}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200003e8 	.word	0x200003e8

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b538      	push	{r3, r4, r5, lr}
 8000e96:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff fff6 	bl	8000e88 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000e9e:	4605      	mov	r5, r0
  {
    wait++;
 8000ea0:	bf18      	it	ne
 8000ea2:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000ea4:	f7ff fff0 	bl	8000e88 <HAL_GetTick>
 8000ea8:	1b40      	subs	r0, r0, r5
 8000eaa:	42a0      	cmp	r0, r4
 8000eac:	d3fa      	bcc.n	8000ea4 <HAL_Delay+0x10>
  {
  }
}
 8000eae:	bd38      	pop	{r3, r4, r5, pc}

08000eb0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000eb0:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000eb6:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000eba:	fab6 f386 	clz	r3, r6
 8000ebe:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 8000ec2:	40de      	lsrs	r6, r3
 8000ec4:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 8000ec6:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8000eca:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8000ece:	fa93 f5a3 	rbit	r5, r3
 8000ed2:	fab5 f585 	clz	r5, r5
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	2407      	movs	r4, #7
 8000edc:	fa21 f505 	lsr.w	r5, r1, r5
 8000ee0:	fa04 f505 	lsl.w	r5, r4, r5
 8000ee4:	fab3 f383 	clz	r3, r3
 8000ee8:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8000eec:	40d9      	lsrs	r1, r3
 8000eee:	ea24 0405 	bic.w	r4, r4, r5
 8000ef2:	fa02 f101 	lsl.w	r1, r2, r1
 8000ef6:	4321      	orrs	r1, r4
 8000ef8:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
#endif
}
 8000efc:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f06:	4604      	mov	r4, r0
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	f000 80b9 	beq.w	8001080 <HAL_ADC_Init+0x180>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f0e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8000f10:	b925      	cbnz	r5, 8000f1c <HAL_ADC_Init+0x1c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f12:	f008 fe87 	bl	8009c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f16:	6625      	str	r5, [r4, #96]	; 0x60
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f18:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 8000f1c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f22:	bf41      	itttt	mi
 8000f24:	689a      	ldrmi	r2, [r3, #8]
 8000f26:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 8000f2a:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 8000f2e:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 8000f30:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8000f32:	00d1      	lsls	r1, r2, #3
 8000f34:	d57b      	bpl.n	800102e <HAL_ADC_Init+0x12e>
 8000f36:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8000f38:	00d2      	lsls	r2, r2, #3
 8000f3a:	f140 808f 	bpl.w	800105c <HAL_ADC_Init+0x15c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f3e:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f40:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f42:	06d5      	lsls	r5, r2, #27
 8000f44:	f100 8098 	bmi.w	8001078 <HAL_ADC_Init+0x178>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8000f48:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f4a:	0751      	lsls	r1, r2, #29
 8000f4c:	f100 8094 	bmi.w	8001078 <HAL_ADC_Init+0x178>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f50:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f52:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000f56:	f042 0202 	orr.w	r2, r2, #2
 8000f5a:	65e2      	str	r2, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	2a01      	cmp	r2, #1
 8000f64:	d102      	bne.n	8000f6c <HAL_ADC_Init+0x6c>
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	07d2      	lsls	r2, r2, #31
 8000f6a:	d406      	bmi.n	8000f7a <HAL_ADC_Init+0x7a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f6c:	4945      	ldr	r1, [pc, #276]	; (8001084 <HAL_ADC_Init+0x184>)
 8000f6e:	6865      	ldr	r5, [r4, #4]
 8000f70:	688a      	ldr	r2, [r1, #8]
 8000f72:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000f76:	432a      	orrs	r2, r5
 8000f78:	608a      	str	r2, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 8000f7a:	68e5      	ldr	r5, [r4, #12]
 8000f7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8000f7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 8000f80:	432a      	orrs	r2, r5
 8000f82:	68a5      	ldr	r5, [r4, #8]
 8000f84:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000f86:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f88:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8000f8a:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000f8e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f92:	bf02      	ittt	eq
 8000f94:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 8000f96:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8000f9a:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fa0:	b121      	cbz	r1, 8000fac <HAL_ADC_Init+0xac>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8000fa2:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fa4:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000fa8:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000faa:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000fac:	68dd      	ldr	r5, [r3, #12]
 8000fae:	4936      	ldr	r1, [pc, #216]	; (8001088 <HAL_ADC_Init+0x188>)
 8000fb0:	4029      	ands	r1, r5
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	f012 0f0c 	tst.w	r2, #12
 8000fbc:	d120      	bne.n	8001000 <HAL_ADC_Init+0x100>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8000fbe:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000fc0:	69a5      	ldr	r5, [r4, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000fc2:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8000fc4:	0052      	lsls	r2, r2, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8000fc6:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8000fca:	6d25      	ldr	r5, [r4, #80]	; 0x50
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000fcc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8000fd0:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000fd2:	f021 0106 	bic.w	r1, r1, #6
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8000fda:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000fdc:	2a01      	cmp	r2, #1
 8000fde:	d147      	bne.n	8001070 <HAL_ADC_Init+0x170>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000fe0:	e9d4 2510 	ldrd	r2, r5, [r4, #64]	; 0x40
 8000fe4:	432a      	orrs	r2, r5
 8000fe6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000fe8:	6919      	ldr	r1, [r3, #16]
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	432a      	orrs	r2, r5
 8000ff0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8000ff2:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8000ff6:	432a      	orrs	r2, r5
 8000ff8:	f021 0104 	bic.w	r1, r1, #4
 8000ffc:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000ffe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001000:	6922      	ldr	r2, [r4, #16]
 8001002:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001004:	bf05      	ittet	eq
 8001006:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001008:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800100a:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800100c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001010:	bf06      	itte	eq
 8001012:	f021 010f 	biceq.w	r1, r1, #15
 8001016:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001018:	f022 020f 	bicne.w	r2, r2, #15
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800101e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001020:	f023 0303 	bic.w	r3, r3, #3
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800102a:	b003      	add	sp, #12
 800102c:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800102e:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8001030:	4916      	ldr	r1, [pc, #88]	; (800108c <HAL_ADC_Init+0x18c>)
 8001032:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8001036:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800103a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	4a13      	ldr	r2, [pc, #76]	; (8001090 <HAL_ADC_Init+0x190>)
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	fbb2 f1f1 	udiv	r1, r2, r1
 8001048:	220a      	movs	r2, #10
 800104a:	434a      	muls	r2, r1
      wait_loop_index--;
 800104c:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 800104e:	9a01      	ldr	r2, [sp, #4]
 8001050:	2a00      	cmp	r2, #0
 8001052:	f43f af70 	beq.w	8000f36 <HAL_ADC_Init+0x36>
      wait_loop_index--;
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	3a01      	subs	r2, #1
 800105a:	e7f7      	b.n	800104c <HAL_ADC_Init+0x14c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800105e:	f042 0210 	orr.w	r2, r2, #16
 8001062:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001064:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001066:	f042 0201 	orr.w	r2, r2, #1
 800106a:	6622      	str	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 800106c:	2001      	movs	r0, #1
 800106e:	e767      	b.n	8000f40 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001070:	691a      	ldr	r2, [r3, #16]
 8001072:	f022 0201 	bic.w	r2, r2, #1
 8001076:	e7c2      	b.n	8000ffe <HAL_ADC_Init+0xfe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001078:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 8001080:	2001      	movs	r0, #1
 8001082:	e7d2      	b.n	800102a <HAL_ADC_Init+0x12a>
 8001084:	50040300 	.word	0x50040300
 8001088:	fff0c007 	.word	0xfff0c007
 800108c:	001e8480 	.word	0x001e8480
 8001090:	20000024 	.word	0x20000024

08001094 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001096:	6945      	ldr	r5, [r0, #20]
 8001098:	2d08      	cmp	r5, #8
{
 800109a:	4604      	mov	r4, r0
 800109c:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800109e:	d00a      	beq.n	80010b6 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 80010a0:	6803      	ldr	r3, [r0, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	07dd      	lsls	r5, r3, #31
 80010a6:	d505      	bpl.n	80010b4 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80010aa:	f043 0320 	orr.w	r3, r3, #32
 80010ae:	65c3      	str	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 80010b0:	2001      	movs	r0, #1
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80010b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp_Flag_End = (ADC_FLAG_EOC);
 80010b4:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 80010b6:	f7ff fee7 	bl	8000e88 <HAL_GetTick>
 80010ba:	4607      	mov	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4215      	tst	r5, r2
 80010c2:	d01d      	beq.n	8001100 <HAL_ADC_PollForConversion+0x6c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ca:	65e2      	str	r2, [r4, #92]	; 0x5c
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80010d2:	d10f      	bne.n	80010f4 <HAL_ADC_PollForConversion+0x60>
 80010d4:	69e2      	ldr	r2, [r4, #28]
 80010d6:	b96a      	cbnz	r2, 80010f4 <HAL_ADC_PollForConversion+0x60>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	0711      	lsls	r1, r2, #28
 80010dc:	d50a      	bpl.n	80010f4 <HAL_ADC_PollForConversion+0x60>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010e4:	65e2      	str	r2, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010e8:	04d2      	lsls	r2, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010ea:	bf5e      	ittt	pl
 80010ec:	6de2      	ldrpl	r2, [r4, #92]	; 0x5c
 80010ee:	f042 0201 	orrpl.w	r2, r2, #1
 80010f2:	65e2      	strpl	r2, [r4, #92]	; 0x5c
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80010f4:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 80010f6:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80010f8:	d114      	bne.n	8001124 <HAL_ADC_PollForConversion+0x90>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 80010fa:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 80010fc:	2000      	movs	r0, #0
 80010fe:	e7d8      	b.n	80010b2 <HAL_ADC_PollForConversion+0x1e>
    if(Timeout != HAL_MAX_DELAY)
 8001100:	1c70      	adds	r0, r6, #1
 8001102:	d0dc      	beq.n	80010be <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001104:	b946      	cbnz	r6, 8001118 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001106:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 800110e:	2300      	movs	r3, #0
 8001110:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_TIMEOUT;
 8001114:	2003      	movs	r0, #3
 8001116:	e7cc      	b.n	80010b2 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001118:	f7ff feb6 	bl	8000e88 <HAL_GetTick>
 800111c:	1bc0      	subs	r0, r0, r7
 800111e:	42b0      	cmp	r0, r6
 8001120:	d9cc      	bls.n	80010bc <HAL_ADC_PollForConversion+0x28>
 8001122:	e7f0      	b.n	8001106 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001124:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8001128:	d1e8      	bne.n	80010fc <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e7c0      	b.n	80010b2 <HAL_ADC_PollForConversion+0x1e>

08001130 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001130:	6803      	ldr	r3, [r0, #0]
 8001132:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001134:	4770      	bx	lr
	...

08001138 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001138:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001140:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001144:	2b01      	cmp	r3, #1
{
 8001146:	4605      	mov	r5, r0
 8001148:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 800114a:	f000 819b 	beq.w	8001484 <HAL_ADC_ConfigChannel+0x34c>
 800114e:	2301      	movs	r3, #1
 8001150:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001154:	6800      	ldr	r0, [r0, #0]
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001156:	6882      	ldr	r2, [r0, #8]
 8001158:	0751      	lsls	r1, r2, #29
 800115a:	f100 818d 	bmi.w	8001478 <HAL_ADC_ConfigChannel+0x340>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800115e:	6863      	ldr	r3, [r4, #4]
 8001160:	2b05      	cmp	r3, #5
 8001162:	d809      	bhi.n	8001178 <HAL_ADC_ConfigChannel+0x40>
    {
      switch (sConfig->Rank)
 8001164:	3b02      	subs	r3, #2
 8001166:	2b03      	cmp	r3, #3
 8001168:	f200 8085 	bhi.w	8001276 <HAL_ADC_ConfigChannel+0x13e>
 800116c:	e8df f003 	tbb	[pc, r3]
 8001170:	807e7c02 	.word	0x807e7c02
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001174:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8001176:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001178:	6861      	ldr	r1, [r4, #4]
 800117a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800117e:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	f401 7640 	and.w	r6, r1, #768	; 0x300
 800118a:	40de      	lsrs	r6, r3
 800118c:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 8001190:	f001 011f 	and.w	r1, r1, #31
 8001194:	231f      	movs	r3, #31
 8001196:	fa03 f201 	lsl.w	r2, r3, r1
 800119a:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 800119e:	ea23 0302 	bic.w	r3, r3, r2
 80011a2:	6822      	ldr	r2, [r4, #0]
 80011a4:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80011a8:	408a      	lsls	r2, r1
 80011aa:	4313      	orrs	r3, r2
 80011ac:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011b0:	6882      	ldr	r2, [r0, #8]
 80011b2:	f012 020c 	ands.w	r2, r2, #12
 80011b6:	d124      	bne.n	8001202 <HAL_ADC_ConfigChannel+0xca>
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80011b8:	68a3      	ldr	r3, [r4, #8]
 80011ba:	6821      	ldr	r1, [r4, #0]
 80011bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011c0:	d15b      	bne.n	800127a <HAL_ADC_ConfigChannel+0x142>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80011c2:	f7ff fe75 	bl	8000eb0 <LL_ADC_SetChannelSamplingTime>
        
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80011c6:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011c8:	6953      	ldr	r3, [r2, #20]
 80011ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011ce:	6153      	str	r3, [r2, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011d0:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011d2:	6828      	ldr	r0, [r5, #0]
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	68c1      	ldr	r1, [r0, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011d8:	2e04      	cmp	r6, #4
 80011da:	f100 0260 	add.w	r2, r0, #96	; 0x60
 80011de:	d054      	beq.n	800128a <HAL_ADC_ConfigChannel+0x152>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011e0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80011e4:	0048      	lsls	r0, r1, #1
 80011e6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 80011e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 80011ec:	4081      	lsls	r1, r0
 80011ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011f2:	4319      	orrs	r1, r3
 80011f4:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80011f8:	4baa      	ldr	r3, [pc, #680]	; (80014a4 <HAL_ADC_ConfigChannel+0x36c>)
 80011fa:	4003      	ands	r3, r0
 80011fc:	4319      	orrs	r1, r3
 80011fe:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    }
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001202:	6828      	ldr	r0, [r5, #0]
 8001204:	6883      	ldr	r3, [r0, #8]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d103      	bne.n	8001216 <HAL_ADC_ConfigChannel+0xde>
 800120e:	6803      	ldr	r3, [r0, #0]
 8001210:	07da      	lsls	r2, r3, #31
 8001212:	f100 80c1 	bmi.w	8001398 <HAL_ADC_ConfigChannel+0x260>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001216:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8001218:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800121c:	68e1      	ldr	r1, [r4, #12]
 800121e:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001222:	433a      	orrs	r2, r7
 8001224:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
 8001228:	4a9f      	ldr	r2, [pc, #636]	; (80014a8 <HAL_ADC_ConfigChannel+0x370>)
 800122a:	4291      	cmp	r1, r2
 800122c:	f040 80b4 	bne.w	8001398 <HAL_ADC_ConfigChannel+0x260>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8001230:	2f00      	cmp	r7, #0
 8001232:	f040 8091 	bne.w	8001358 <HAL_ADC_ConfigChannel+0x220>
 8001236:	f3c3 6684 	ubfx	r6, r3, #26, #5
 800123a:	3601      	adds	r6, #1
 800123c:	2201      	movs	r2, #1
 800123e:	2e09      	cmp	r6, #9
 8001240:	ea4f 6186 	mov.w	r1, r6, lsl #26
 8001244:	fa02 f206 	lsl.w	r2, r2, r6
 8001248:	f240 809a 	bls.w	8001380 <HAL_ADC_ConfigChannel+0x248>
 800124c:	430a      	orrs	r2, r1
 800124e:	2f00      	cmp	r7, #0
 8001250:	f040 80c4 	bne.w	80013dc <HAL_ADC_ConfigChannel+0x2a4>
 8001254:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001258:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800125c:	f1a3 011b 	sub.w	r1, r3, #27
 8001260:	0509      	lsls	r1, r1, #20
 8001262:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001266:	e093      	b.n	8001390 <HAL_ADC_ConfigChannel+0x258>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001268:	2312      	movs	r3, #18
 800126a:	e784      	b.n	8001176 <HAL_ADC_ConfigChannel+0x3e>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800126c:	2318      	movs	r3, #24
 800126e:	e782      	b.n	8001176 <HAL_ADC_ConfigChannel+0x3e>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001274:	e77f      	b.n	8001176 <HAL_ADC_ConfigChannel+0x3e>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8001276:	2306      	movs	r3, #6
 8001278:	e77d      	b.n	8001176 <HAL_ADC_ConfigChannel+0x3e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800127a:	461a      	mov	r2, r3
 800127c:	f7ff fe18 	bl	8000eb0 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001280:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001282:	6953      	ldr	r3, [r2, #20]
 8001284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001288:	e7a1      	b.n	80011ce <HAL_ADC_ConfigChannel+0x96>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800128a:	f8d0 c060 	ldr.w	ip, [r0, #96]	; 0x60
 800128e:	6e46      	ldr	r6, [r0, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001290:	f3c3 0e12 	ubfx	lr, r3, #0, #19
 8001294:	f3cc 6884 	ubfx	r8, ip, #26, #5
 8001298:	f100 0768 	add.w	r7, r0, #104	; 0x68
 800129c:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 80012a0:	f1be 0f00 	cmp.w	lr, #0
 80012a4:	d137      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x1de>
 80012a6:	f3c3 6e84 	ubfx	lr, r3, #26, #5
 80012aa:	45f0      	cmp	r8, lr
 80012ac:	f040 80ec 	bne.w	8001488 <HAL_ADC_ConfigChannel+0x350>
  MODIFY_REG(*preg,
 80012b0:	f02c 4300 	bic.w	r3, ip, #2147483648	; 0x80000000
 80012b4:	6603      	str	r3, [r0, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	f3c3 0e12 	ubfx	lr, r3, #0, #19
 80012bc:	f3c6 6c84 	ubfx	ip, r6, #26, #5
 80012c0:	f1be 0f00 	cmp.w	lr, #0
 80012c4:	d12f      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x1ee>
 80012c6:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80012ca:	4563      	cmp	r3, ip
 80012cc:	f040 80df 	bne.w	800148e <HAL_ADC_ConfigChannel+0x356>
 80012d0:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80012d4:	6646      	str	r6, [r0, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012d6:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012d8:	6890      	ldr	r0, [r2, #8]
 80012da:	f3c3 0c12 	ubfx	ip, r3, #0, #19
 80012de:	f3c0 6684 	ubfx	r6, r0, #26, #5
 80012e2:	f1bc 0f00 	cmp.w	ip, #0
 80012e6:	d128      	bne.n	800133a <HAL_ADC_ConfigChannel+0x202>
 80012e8:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80012ec:	42b3      	cmp	r3, r6
 80012ee:	f040 80d3 	bne.w	8001498 <HAL_ADC_ConfigChannel+0x360>
  MODIFY_REG(*preg,
 80012f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80012f6:	6038      	str	r0, [r7, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012f8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012fa:	68d2      	ldr	r2, [r2, #12]
 80012fc:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001300:	f3c2 6084 	ubfx	r0, r2, #26, #5
 8001304:	bb1e      	cbnz	r6, 800134e <HAL_ADC_ConfigChannel+0x216>
 8001306:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800130a:	4283      	cmp	r3, r0
  MODIFY_REG(*preg,
 800130c:	bf04      	itt	eq
 800130e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001312:	600a      	streq	r2, [r1, #0]
 8001314:	e775      	b.n	8001202 <HAL_ADC_ConfigChannel+0xca>
 8001316:	fa93 fea3 	rbit	lr, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800131a:	fabe fe8e 	clz	lr, lr
 800131e:	45f0      	cmp	r8, lr
 8001320:	d0c6      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0x178>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001322:	f3c6 6c84 	ubfx	ip, r6, #26, #5
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	fab3 f383 	clz	r3, r3
 800132e:	4563      	cmp	r3, ip
 8001330:	d0ce      	beq.n	80012d0 <HAL_ADC_ConfigChannel+0x198>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001332:	6890      	ldr	r0, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	f3c0 6684 	ubfx	r6, r0, #26, #5
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	42b3      	cmp	r3, r6
 8001344:	d0d5      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x1ba>
 8001346:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	f3c2 6084 	ubfx	r0, r2, #26, #5
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	e7d8      	b.n	800130a <HAL_ADC_ConfigChannel+0x1d2>
 8001358:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 800135c:	fab2 f282 	clz	r2, r2
 8001360:	3201      	adds	r2, #1
 8001362:	2a09      	cmp	r2, #9
 8001364:	d82c      	bhi.n	80013c0 <HAL_ADC_ConfigChannel+0x288>
 8001366:	fa93 f2a3 	rbit	r2, r3
 800136a:	fab2 f282 	clz	r2, r2
 800136e:	3201      	adds	r2, #1
 8001370:	0691      	lsls	r1, r2, #26
 8001372:	fa93 f2a3 	rbit	r2, r3
 8001376:	fab2 f282 	clz	r2, r2
 800137a:	1c56      	adds	r6, r2, #1
 800137c:	2201      	movs	r2, #1
 800137e:	40b2      	lsls	r2, r6
 8001380:	430a      	orrs	r2, r1
 8001382:	b9c7      	cbnz	r7, 80013b6 <HAL_ADC_ConfigChannel+0x27e>
 8001384:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001388:	3301      	adds	r3, #1
 800138a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800138e:	0519      	lsls	r1, r3, #20
 8001390:	4311      	orrs	r1, r2
 8001392:	68a2      	ldr	r2, [r4, #8]
 8001394:	f7ff fd8c 	bl	8000eb0 <LL_ADC_SetChannelSamplingTime>
    /* HAL_ADC_DeInit().                                                      */
       
    /* Configuration of common ADC parameters                                 */
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	4a44      	ldr	r2, [pc, #272]	; (80014ac <HAL_ADC_ConfigChannel+0x374>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d122      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x2ae>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013a0:	4a43      	ldr	r2, [pc, #268]	; (80014b0 <HAL_ADC_ConfigChannel+0x378>)
 80013a2:	6893      	ldr	r3, [r2, #8]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	d54b      	bpl.n	8001440 <HAL_ADC_ConfigChannel+0x308>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a8:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013aa:	2300      	movs	r3, #0
 80013ac:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
  
  /* Return function status */
  return tmp_hal_status;
}
 80013b0:	b002      	add	sp, #8
 80013b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013b6:	fa93 f3a3 	rbit	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	e7e3      	b.n	8001388 <HAL_ADC_ConfigChannel+0x250>
 80013c0:	fa93 f2a3 	rbit	r2, r3
 80013c4:	fab2 f282 	clz	r2, r2
 80013c8:	3201      	adds	r2, #1
 80013ca:	0691      	lsls	r1, r2, #26
 80013cc:	fa93 f2a3 	rbit	r2, r3
 80013d0:	fab2 f282 	clz	r2, r2
 80013d4:	1c56      	adds	r6, r2, #1
 80013d6:	2201      	movs	r2, #1
 80013d8:	40b2      	lsls	r2, r6
 80013da:	e737      	b.n	800124c <HAL_ADC_ConfigChannel+0x114>
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	e738      	b.n	8001258 <HAL_ADC_ConfigChannel+0x120>
          ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 80013e6:	4a33      	ldr	r2, [pc, #204]	; (80014b4 <HAL_ADC_ConfigChannel+0x37c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d113      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x2dc>
 80013ec:	4a30      	ldr	r2, [pc, #192]	; (80014b0 <HAL_ADC_ConfigChannel+0x378>)
 80013ee:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80013f0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80013f4:	d1d8      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x270>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013f6:	6829      	ldr	r1, [r5, #0]
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <HAL_ADC_ConfigChannel+0x380>)
 80013fa:	4299      	cmp	r1, r3
 80013fc:	d1d4      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x270>
 80013fe:	6891      	ldr	r1, [r2, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001400:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001402:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001406:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800140a:	430b      	orrs	r3, r1
 800140c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001410:	6093      	str	r3, [r2, #8]
 8001412:	e7ca      	b.n	80013aa <HAL_ADC_ConfigChannel+0x272>
          ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 8001414:	4a29      	ldr	r2, [pc, #164]	; (80014bc <HAL_ADC_ConfigChannel+0x384>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d1c6      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x270>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800141a:	4a25      	ldr	r2, [pc, #148]	; (80014b0 <HAL_ADC_ConfigChannel+0x378>)
 800141c:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800141e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001422:	d1c1      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x270>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001424:	6829      	ldr	r1, [r5, #0]
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_ADC_ConfigChannel+0x380>)
 8001428:	4299      	cmp	r1, r3
 800142a:	d1bd      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x270>
 800142c:	6891      	ldr	r1, [r2, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800142e:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001430:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001434:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001438:	430b      	orrs	r3, r1
 800143a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800143e:	e7e7      	b.n	8001410 <HAL_ADC_ConfigChannel+0x2d8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001440:	6829      	ldr	r1, [r5, #0]
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_ADC_ConfigChannel+0x380>)
 8001444:	4299      	cmp	r1, r3
 8001446:	d1af      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x270>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001448:	6891      	ldr	r1, [r2, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800144a:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800144c:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001450:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001454:	430b      	orrs	r3, r1
 8001456:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800145a:	6093      	str	r3, [r2, #8]
          wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_ADC_ConfigChannel+0x388>)
 800145e:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <HAL_ADC_ConfigChannel+0x38c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fbb3 f2f2 	udiv	r2, r3, r2
 8001466:	2378      	movs	r3, #120	; 0x78
 8001468:	4353      	muls	r3, r2
            wait_loop_index--;
 800146a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800146c:	9b01      	ldr	r3, [sp, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d09a      	beq.n	80013a8 <HAL_ADC_ConfigChannel+0x270>
            wait_loop_index--;
 8001472:	9b01      	ldr	r3, [sp, #4]
 8001474:	3b01      	subs	r3, #1
 8001476:	e7f8      	b.n	800146a <HAL_ADC_ConfigChannel+0x332>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001478:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800147a:	f042 0220 	orr.w	r2, r2, #32
 800147e:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8001480:	4618      	mov	r0, r3
 8001482:	e792      	b.n	80013aa <HAL_ADC_ConfigChannel+0x272>
  __HAL_LOCK(hadc);
 8001484:	2002      	movs	r0, #2
 8001486:	e793      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x278>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001488:	f3c6 6c84 	ubfx	ip, r6, #26, #5
 800148c:	e71b      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x18e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800148e:	6890      	ldr	r0, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	f3c0 6684 	ubfx	r6, r0, #26, #5
 8001496:	e727      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x1b0>
 8001498:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	f3c2 6084 	ubfx	r0, r2, #26, #5
 80014a0:	e731      	b.n	8001306 <HAL_ADC_ConfigChannel+0x1ce>
 80014a2:	bf00      	nop
 80014a4:	03fff000 	.word	0x03fff000
 80014a8:	407f0000 	.word	0x407f0000
 80014ac:	c7520000 	.word	0xc7520000
 80014b0:	50040300 	.word	0x50040300
 80014b4:	cb840000 	.word	0xcb840000
 80014b8:	50040000 	.word	0x50040000
 80014bc:	80000001 	.word	0x80000001
 80014c0:	20000024 	.word	0x20000024
 80014c4:	001e8480 	.word	0x001e8480

080014c8 <HAL_ADC_GetState>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC handle state */
  return hadc->State;
 80014c8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
}
 80014ca:	4770      	bx	lr

080014cc <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80014cc:	6803      	ldr	r3, [r0, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	f012 0f0c 	tst.w	r2, #12
{
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80014d8:	d101      	bne.n	80014de <ADC_ConversionStop+0x12>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014da:	2000      	movs	r0, #0
}
 80014dc:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	0190      	lsls	r0, r2, #6
 80014e2:	d52a      	bpl.n	800153a <ADC_ConversionStop+0x6e>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 80014e4:	69e2      	ldr	r2, [r4, #28]
 80014e6:	2a01      	cmp	r2, #1
 80014e8:	d127      	bne.n	800153a <ADC_ConversionStop+0x6e>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 80014ea:	69a2      	ldr	r2, [r4, #24]
 80014ec:	2a01      	cmp	r2, #1
 80014ee:	d124      	bne.n	800153a <ADC_ConversionStop+0x6e>
 80014f0:	4a22      	ldr	r2, [pc, #136]	; (800157c <ADC_ConversionStop+0xb0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	0649      	lsls	r1, r1, #25
 80014f6:	d514      	bpl.n	8001522 <ADC_ConversionStop+0x56>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80014f8:	2240      	movs	r2, #64	; 0x40
 80014fa:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 80014fc:	2101      	movs	r1, #1
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	0752      	lsls	r2, r2, #29
 8001502:	d50a      	bpl.n	800151a <ADC_ConversionStop+0x4e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001504:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001506:	0796      	lsls	r6, r2, #30
 8001508:	d407      	bmi.n	800151a <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001510:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001514:	f042 0210 	orr.w	r2, r2, #16
 8001518:	609a      	str	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800151a:	2901      	cmp	r1, #1
 800151c:	d10f      	bne.n	800153e <ADC_ConversionStop+0x72>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800151e:	2504      	movs	r5, #4
 8001520:	e01d      	b.n	800155e <ADC_ConversionStop+0x92>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 8001522:	3a01      	subs	r2, #1
 8001524:	d1e5      	bne.n	80014f2 <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001526:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001528:	f043 0310 	orr.w	r3, r3, #16
 800152c:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001536:	2001      	movs	r0, #1
 8001538:	e7d0      	b.n	80014dc <ADC_ConversionStop+0x10>
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800153a:	2902      	cmp	r1, #2
 800153c:	d1df      	bne.n	80014fe <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	0710      	lsls	r0, r2, #28
 8001542:	d506      	bpl.n	8001552 <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001544:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001546:	0792      	lsls	r2, r2, #30
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8001548:	bf5e      	ittt	pl
 800154a:	689a      	ldrpl	r2, [r3, #8]
 800154c:	f042 0220 	orrpl.w	r2, r2, #32
 8001550:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 8001552:	2902      	cmp	r1, #2
 8001554:	d010      	beq.n	8001578 <ADC_ConversionStop+0xac>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001556:	2903      	cmp	r1, #3
 8001558:	bf0c      	ite	eq
 800155a:	250c      	moveq	r5, #12
 800155c:	2504      	movne	r5, #4
    tickstart = HAL_GetTick();
 800155e:	f7ff fc93 	bl	8000e88 <HAL_GetTick>
 8001562:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	422b      	tst	r3, r5
 800156a:	d0b6      	beq.n	80014da <ADC_ConversionStop+0xe>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800156c:	f7ff fc8c 	bl	8000e88 <HAL_GetTick>
 8001570:	1b80      	subs	r0, r0, r6
 8001572:	2805      	cmp	r0, #5
 8001574:	d9f6      	bls.n	8001564 <ADC_ConversionStop+0x98>
 8001576:	e7d6      	b.n	8001526 <ADC_ConversionStop+0x5a>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001578:	2508      	movs	r5, #8
 800157a:	e7f0      	b.n	800155e <ADC_ConversionStop+0x92>
 800157c:	a3400001 	.word	0xa3400001

08001580 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001580:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 8001582:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001584:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 8001586:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001588:	6893      	ldr	r3, [r2, #8]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b01      	cmp	r3, #1
{
 8001590:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001592:	d105      	bne.n	80015a0 <ADC_Enable+0x20>
 8001594:	6813      	ldr	r3, [r2, #0]
 8001596:	07d8      	lsls	r0, r3, #31
 8001598:	d502      	bpl.n	80015a0 <ADC_Enable+0x20>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800159a:	2000      	movs	r0, #0
}
 800159c:	b002      	add	sp, #8
 800159e:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80015a0:	6891      	ldr	r1, [r2, #8]
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <ADC_Enable+0x94>)
 80015a4:	4219      	tst	r1, r3
 80015a6:	d009      	beq.n	80015bc <ADC_Enable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80015aa:	f043 0310 	orr.w	r3, r3, #16
 80015ae:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 80015b8:	2001      	movs	r0, #1
 80015ba:	e7ef      	b.n	800159c <ADC_Enable+0x1c>
  MODIFY_REG(ADCx->CR,
 80015bc:	6893      	ldr	r3, [r2, #8]
 80015be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <ADC_Enable+0x98>)
 80015ce:	4a13      	ldr	r2, [pc, #76]	; (800161c <ADC_Enable+0x9c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80015d6:	230a      	movs	r3, #10
 80015d8:	4353      	muls	r3, r2
      wait_loop_index--;
 80015da:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80015dc:	9b01      	ldr	r3, [sp, #4]
 80015de:	b9ab      	cbnz	r3, 800160c <ADC_Enable+0x8c>
    tickstart = HAL_GetTick();
 80015e0:	f7ff fc52 	bl	8000e88 <HAL_GetTick>
 80015e4:	4e0e      	ldr	r6, [pc, #56]	; (8001620 <ADC_Enable+0xa0>)
 80015e6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015e8:	6822      	ldr	r2, [r4, #0]
 80015ea:	6813      	ldr	r3, [r2, #0]
 80015ec:	07db      	lsls	r3, r3, #31
 80015ee:	d4d4      	bmi.n	800159a <ADC_Enable+0x1a>
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80015f0:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 80015f2:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 80015f4:	bf5f      	itttt	pl
 80015f6:	6893      	ldrpl	r3, [r2, #8]
 80015f8:	4033      	andpl	r3, r6
 80015fa:	f043 0301 	orrpl.w	r3, r3, #1
 80015fe:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001600:	f7ff fc42 	bl	8000e88 <HAL_GetTick>
 8001604:	1b40      	subs	r0, r0, r5
 8001606:	2802      	cmp	r0, #2
 8001608:	d9ee      	bls.n	80015e8 <ADC_Enable+0x68>
 800160a:	e7cd      	b.n	80015a8 <ADC_Enable+0x28>
      wait_loop_index--;
 800160c:	9b01      	ldr	r3, [sp, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	e7e3      	b.n	80015da <ADC_Enable+0x5a>
 8001612:	bf00      	nop
 8001614:	8000003f 	.word	0x8000003f
 8001618:	20000024 	.word	0x20000024
 800161c:	001e8480 	.word	0x001e8480
 8001620:	7fffffc0 	.word	0x7fffffc0

08001624 <HAL_ADC_Start>:
{
 8001624:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001626:	6803      	ldr	r3, [r0, #0]
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001628:	689d      	ldr	r5, [r3, #8]
 800162a:	f015 0504 	ands.w	r5, r5, #4
{
 800162e:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001630:	d13a      	bne.n	80016a8 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 8001632:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001636:	2b01      	cmp	r3, #1
 8001638:	d036      	beq.n	80016a8 <HAL_ADC_Start+0x84>
 800163a:	2301      	movs	r3, #1
 800163c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 8001640:	f7ff ff9e 	bl	8001580 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001644:	2800      	cmp	r0, #0
 8001646:	d12c      	bne.n	80016a2 <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 8001648:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800164a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	65e3      	str	r3, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001658:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800165a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800165e:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001660:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001662:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001664:	bf48      	it	mi
 8001666:	6e23      	ldrmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001668:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 800166a:	bf52      	itee	pl
 800166c:	6620      	strpl	r0, [r4, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800166e:	f023 0306 	bicmi.w	r3, r3, #6
 8001672:	6623      	strmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001674:	231c      	movs	r3, #28
 8001676:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001678:	2300      	movs	r3, #0
 800167a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800167e:	68d3      	ldr	r3, [r2, #12]
 8001680:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001682:	bf41      	itttt	mi
 8001684:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
 8001686:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 800168a:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 800168e:	65e3      	strmi	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8001690:	6893      	ldr	r3, [r2, #8]
 8001692:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001696:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6093      	str	r3, [r2, #8]
}
 80016a0:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80016a2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80016a6:	e7fb      	b.n	80016a0 <HAL_ADC_Start+0x7c>
    tmp_hal_status = HAL_BUSY;
 80016a8:	2002      	movs	r0, #2
 80016aa:	e7f9      	b.n	80016a0 <HAL_ADC_Start+0x7c>

080016ac <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016ac:	6802      	ldr	r2, [r0, #0]
{
 80016ae:	b538      	push	{r3, r4, r5, lr}
 80016b0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016b2:	6890      	ldr	r0, [r2, #8]
 80016b4:	f000 0003 	and.w	r0, r0, #3
 80016b8:	2801      	cmp	r0, #1
 80016ba:	d001      	beq.n	80016c0 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016bc:	2000      	movs	r0, #0
}
 80016be:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016c0:	6813      	ldr	r3, [r2, #0]
 80016c2:	07d9      	lsls	r1, r3, #31
 80016c4:	d5fa      	bpl.n	80016bc <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80016c6:	6893      	ldr	r3, [r2, #8]
 80016c8:	f003 030d 	and.w	r3, r3, #13
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d11f      	bne.n	8001710 <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 80016d0:	6893      	ldr	r3, [r2, #8]
 80016d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80016e0:	2303      	movs	r3, #3
 80016e2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80016e4:	f7ff fbd0 	bl	8000e88 <HAL_GetTick>
 80016e8:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	07db      	lsls	r3, r3, #31
 80016f0:	d5e4      	bpl.n	80016bc <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016f2:	f7ff fbc9 	bl	8000e88 <HAL_GetTick>
 80016f6:	1b40      	subs	r0, r0, r5
 80016f8:	2802      	cmp	r0, #2
 80016fa:	d9f6      	bls.n	80016ea <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80016fe:	f043 0310 	orr.w	r3, r3, #16
 8001702:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001704:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6623      	str	r3, [r4, #96]	; 0x60
 800170c:	2001      	movs	r0, #1
 800170e:	e7d6      	b.n	80016be <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001710:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 8001720:	e7cd      	b.n	80016be <ADC_Disable+0x12>
	...

08001724 <HAL_ADC_DeInit>:
{
 8001724:	b510      	push	{r4, lr}
  if(hadc == NULL)
 8001726:	4604      	mov	r4, r0
 8001728:	2800      	cmp	r0, #0
 800172a:	f000 808c 	beq.w	8001846 <HAL_ADC_DeInit+0x122>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800172e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001730:	f043 0302 	orr.w	r3, r3, #2
  ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001734:	2103      	movs	r1, #3
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001736:	65c3      	str	r3, [r0, #92]	; 0x5c
  ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001738:	f7ff fec8 	bl	80014cc <ADC_ConversionStop>
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	68d3      	ldr	r3, [r2, #12]
 8001740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001744:	60d3      	str	r3, [r2, #12]
  ADC_Disable(hadc);
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff ffb0 	bl	80016ac <ADC_Disable>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	483f      	ldr	r0, [pc, #252]	; (800184c <HAL_ADC_DeInit+0x128>)
 8001750:	6859      	ldr	r1, [r3, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8001752:	f240 72ff 	movw	r2, #2047	; 0x7ff
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8001756:	4001      	ands	r1, r0
 8001758:	6059      	str	r1, [r3, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800175a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 800175c:	6899      	ldr	r1, [r3, #8]
 800175e:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 8001762:	6099      	str	r1, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);    
 8001764:	6899      	ldr	r1, [r3, #8]
 8001766:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800176a:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 800176c:	68d9      	ldr	r1, [r3, #12]
 800176e:	f001 2180 	and.w	r1, r1, #2147516416	; 0x80008000
 8001772:	60d9      	str	r1, [r3, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);  
 8001774:	68d9      	ldr	r1, [r3, #12]
 8001776:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800177a:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |   
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	4002      	ands	r2, r0
 8001780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);                                 
 8001782:	695a      	ldr	r2, [r3, #20]
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 8001784:	4832      	ldr	r0, [pc, #200]	; (8001850 <HAL_ADC_DeInit+0x12c>)
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);                                 
 8001786:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800178a:	615a      	str	r2, [r3, #20]
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 | 
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8001792:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8001794:	6a1a      	ldr	r2, [r3, #32]
 8001796:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800179a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);    
 800179c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179e:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);      
 80017a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a6:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 80017ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ae:	4a29      	ldr	r2, [pc, #164]	; (8001854 <HAL_ADC_DeInit+0x130>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 80017b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b6:	4001      	ands	r1, r0
 80017b8:	6359      	str	r1, [r3, #52]	; 0x34
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 | 
 80017ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017bc:	4002      	ands	r2, r0
 80017be:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15); 
 80017c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017c2:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 80017c6:	f022 0207 	bic.w	r2, r2, #7
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1); 
 80017cc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80017ce:	4a22      	ldr	r2, [pc, #136]	; (8001858 <HAL_ADC_DeInit+0x134>)
 80017d0:	4011      	ands	r1, r2
 80017d2:	6619      	str	r1, [r3, #96]	; 0x60
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2); 
 80017d4:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80017d6:	4011      	ands	r1, r2
 80017d8:	6659      	str	r1, [r3, #100]	; 0x64
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3); 
 80017da:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80017dc:	4011      	ands	r1, r2
 80017de:	6699      	str	r1, [r3, #104]	; 0x68
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80017e0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80017e2:	400a      	ands	r2, r1
 80017e4:	66da      	str	r2, [r3, #108]	; 0x6c
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80017e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80017ea:	491c      	ldr	r1, [pc, #112]	; (800185c <HAL_ADC_DeInit+0x138>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80017f2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80017f6:	400a      	ands	r2, r1
 80017f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 80017fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001800:	400a      	ands	r2, r1
 8001802:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8001806:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800180a:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 800180e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	f002 0203 	and.w	r2, r2, #3
 8001818:	2a01      	cmp	r2, #1
 800181a:	d102      	bne.n	8001822 <HAL_ADC_DeInit+0xfe>
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	07db      	lsls	r3, r3, #31
 8001820:	d406      	bmi.n	8001830 <HAL_ADC_DeInit+0x10c>
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_ADC_DeInit+0x13c>)
 8001824:	6893      	ldr	r3, [r2, #8]
 8001826:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800182a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182e:	6093      	str	r3, [r2, #8]
  HAL_ADC_MspDeInit(hadc);
 8001830:	4620      	mov	r0, r4
 8001832:	f008 fa1b 	bl	8009c6c <HAL_ADC_MspDeInit>
  ADC_CLEAR_ERRORCODE(hadc);
 8001836:	2000      	movs	r0, #0
  hadc->InjectionConfig.ChannelCount = 0; 
 8001838:	e9c4 0019 	strd	r0, r0, [r4, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(hadc);
 800183c:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hadc);
 800183e:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
  hadc->State = HAL_ADC_STATE_RESET;
 8001842:	65e0      	str	r0, [r4, #92]	; 0x5c
}
 8001844:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001846:	2001      	movs	r0, #1
 8001848:	e7fc      	b.n	8001844 <HAL_ADC_DeInit+0x120>
 800184a:	bf00      	nop
 800184c:	fffff800 	.word	0xfffff800
 8001850:	e0820820 	.word	0xe0820820
 8001854:	e0820830 	.word	0xe0820830
 8001858:	03fff000 	.word	0x03fff000
 800185c:	fff80000 	.word	0xfff80000
 8001860:	50040300 	.word	0x50040300

08001864 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001864:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001866:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800186a:	2b01      	cmp	r3, #1
{
 800186c:	4604      	mov	r4, r0
 800186e:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8001870:	d035      	beq.n	80018de <HAL_ADCEx_Calibration_Start+0x7a>
 8001872:	2301      	movs	r3, #1
 8001874:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001878:	f7ff ff18 	bl	80016ac <ADC_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800187c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  if (tmp_hal_status == HAL_OK)
 800187e:	bb58      	cbnz	r0, 80018d8 <HAL_ADCEx_Calibration_Start+0x74>
    ADC_STATE_CLR_SET(hadc->State, 
 8001880:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001884:	f023 0302 	bic.w	r3, r3, #2
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	65e3      	str	r3, [r4, #92]	; 0x5c
                      HAL_ADC_STATE_BUSY_INTERNAL);

    

    /* Select calibration mode single ended or differential ended */
    MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALDIF, SingleDiff);
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001896:	432a      	orrs	r2, r5
 8001898:	609a      	str	r2, [r3, #8]
    
    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018a0:	609a      	str	r2, [r3, #8]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018a2:	f44f 2291 	mov.w	r2, #296960	; 0x48800
 80018a6:	6899      	ldr	r1, [r3, #8]
 80018a8:	2900      	cmp	r1, #0
 80018aa:	db09      	blt.n	80018c0 <HAL_ADCEx_Calibration_Start+0x5c>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	f043 0301 	orr.w	r3, r3, #1
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b8:	2300      	movs	r3, #0
 80018ba:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  
  /* Return function status */
  return tmp_hal_status;
 80018be:	e00a      	b.n	80018d6 <HAL_ADCEx_Calibration_Start+0x72>
      if (WaitLoopIndex >= ADC_CALIBRATION_TIMEOUT)
 80018c0:	3a01      	subs	r2, #1
 80018c2:	d1f0      	bne.n	80018a6 <HAL_ADCEx_Calibration_Start+0x42>
        ADC_STATE_CLR_SET(hadc->State,
 80018c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 80018c6:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        ADC_STATE_CLR_SET(hadc->State,
 80018ca:	f023 0312 	bic.w	r3, r3, #18
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
}
 80018d6:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	e7eb      	b.n	80018b6 <HAL_ADCEx_Calibration_Start+0x52>
  __HAL_LOCK(hadc);
 80018de:	2002      	movs	r0, #2
 80018e0:	e7f9      	b.n	80018d6 <HAL_ADCEx_Calibration_Start+0x72>
	...

080018e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80018f4:	0200      	lsls	r0, r0, #8
 80018f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80018fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001900:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190a:	b570      	push	{r4, r5, r6, lr}
 800190c:	68dc      	ldr	r4, [r3, #12]
 800190e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001912:	f1c4 0507 	rsb	r5, r4, #7
 8001916:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001918:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	bf28      	it	cs
 800191e:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001924:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001926:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	bf8c      	ite	hi
 800192c:	3c03      	subhi	r4, #3
 800192e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	ea21 0303 	bic.w	r3, r1, r3
 8001934:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001936:	fa06 f404 	lsl.w	r4, r6, r4
 800193a:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 800193e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	bfa8      	it	ge
 8001946:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800194a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	bfbc      	itt	lt
 8001950:	f000 000f 	andlt.w	r0, r0, #15
 8001954:	4a05      	ldrlt	r2, [pc, #20]	; (800196c <HAL_NVIC_SetPriority+0x64>)
 8001956:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	bfaa      	itet	ge
 800195a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001964:	bd70      	pop	{r4, r5, r6, pc}
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	e000ed14 	.word	0xe000ed14

08001970 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001970:	0942      	lsrs	r2, r0, #5
 8001972:	2301      	movs	r3, #1
 8001974:	f000 001f 	and.w	r0, r0, #31
 8001978:	fa03 f000 	lsl.w	r0, r3, r0
 800197c:	4b01      	ldr	r3, [pc, #4]	; (8001984 <HAL_NVIC_EnableIRQ+0x14>)
 800197e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100

08001988 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	3801      	subs	r0, #1
 800198a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800198e:	d20a      	bcs.n	80019a6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001994:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	21f0      	movs	r1, #240	; 0xf0
 8001998:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80019b6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80019b8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80019ba:	bf0c      	ite	eq
 80019bc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80019c0:	f022 0204 	bicne.w	r2, r2, #4
 80019c4:	601a      	str	r2, [r3, #0]
  }
}
 80019c6:	4770      	bx	lr
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80019cc:	4770      	bx	lr

080019ce <HAL_SYSTICK_IRQHandler>:
{
 80019ce:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80019d0:	f7ff fffc 	bl	80019cc <HAL_SYSTICK_Callback>
}
 80019d4:	bd08      	pop	{r3, pc}

080019d6 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80019d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the IP */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80019d8:	0896      	lsrs	r6, r2, #2
 80019da:	6805      	ldr	r5, [r0, #0]
 80019dc:	460b      	mov	r3, r1
 80019de:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80019e2:	42bb      	cmp	r3, r7
 80019e4:	d108      	bne.n	80019f8 <CRC_Handle_8+0x22>
                         ((uint32_t)pBuffer[4U * i + 1U] << 16U) | \
                         ((uint32_t)pBuffer[4U * i + 2U] << 8U)  | \
                         (uint32_t)pBuffer[4U * i + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80019e6:	f012 0203 	ands.w	r2, r2, #3
 80019ea:	d01e      	beq.n	8001a2a <CRC_Handle_8+0x54>
  {
    if (BufferLength % 4U == 1U)
 80019ec:	2a01      	cmp	r2, #1
 80019ee:	d114      	bne.n	8001a1a <CRC_Handle_8+0x44>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];
 80019f0:	f811 3026 	ldrb.w	r3, [r1, r6, lsl #2]
    {
      data = (uint16_t)(pBuffer[4U * i] << 8U) | (uint16_t)pBuffer[4U * i + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i + 2U];
 80019f4:	702b      	strb	r3, [r5, #0]
 80019f6:	e018      	b.n	8001a2a <CRC_Handle_8+0x54>
                         ((uint32_t)pBuffer[4U * i + 1U] << 16U) | \
 80019f8:	785c      	ldrb	r4, [r3, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80019fa:	f893 c000 	ldrb.w	ip, [r3]
                         ((uint32_t)pBuffer[4U * i + 1U] << 16U) | \
 80019fe:	0424      	lsls	r4, r4, #16
                         ((uint32_t)pBuffer[4U * i + 2U] << 8U)  | \
 8001a00:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
                         (uint32_t)pBuffer[4U * i + 3U];
 8001a04:	f893 c003 	ldrb.w	ip, [r3, #3]
                         ((uint32_t)pBuffer[4U * i + 2U] << 8U)  | \
 8001a08:	ea44 040c 	orr.w	r4, r4, ip
 8001a0c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8001a10:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001a14:	602c      	str	r4, [r5, #0]
 8001a16:	3304      	adds	r3, #4
 8001a18:	e7e3      	b.n	80019e2 <CRC_Handle_8+0xc>
    if (BufferLength % 4U == 2U)
 8001a1a:	2a02      	cmp	r2, #2
 8001a1c:	d108      	bne.n	8001a30 <CRC_Handle_8+0x5a>
      data = (uint16_t)(pBuffer[4U * i] << 8U) | (uint16_t)pBuffer[4U * i + 1U];
 8001a1e:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 8001a28:	802b      	strh	r3, [r5, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001a2a:	6803      	ldr	r3, [r0, #0]
 8001a2c:	6818      	ldr	r0, [r3, #0]
}
 8001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = (uint16_t)(pBuffer[4U * i] << 8U) | (uint16_t)pBuffer[4U * i + 1U];
 8001a30:	785a      	ldrb	r2, [r3, #1]
 8001a32:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 8001a36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      *pReg = data;
 8001a3a:	802a      	strh	r2, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i + 2U];
 8001a3c:	789b      	ldrb	r3, [r3, #2]
 8001a3e:	e7d9      	b.n	80019f4 <CRC_Handle_8+0x1e>

08001a40 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001a40:	6800      	ldr	r0, [r0, #0]
 8001a42:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the IP */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	0855      	lsrs	r5, r2, #1
 8001a48:	429d      	cmp	r5, r3
 8001a4a:	d106      	bne.n	8001a5a <CRC_Handle_16+0x1a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[2U * i + 1U];
  }
  if ((BufferLength % 2U) != 0U)
 8001a4c:	07d3      	lsls	r3, r2, #31
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);
    *pReg = pBuffer[2U * i];
 8001a4e:	bf44      	itt	mi
 8001a50:	f831 3025 	ldrhmi.w	r3, [r1, r5, lsl #2]
 8001a54:	8003      	strhmi	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001a56:	6800      	ldr	r0, [r0, #0]
}
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[2U * i + 1U];
 8001a5a:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8001a5e:	f831 6023 	ldrh.w	r6, [r1, r3, lsl #2]
 8001a62:	8864      	ldrh	r4, [r4, #2]
 8001a64:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001a68:	6004      	str	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	e7ec      	b.n	8001a48 <CRC_Handle_16+0x8>
	...

08001a70 <HAL_CRC_Init>:
{
 8001a70:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 8001a72:	4604      	mov	r4, r0
 8001a74:	b908      	cbnz	r0, 8001a7a <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8001a76:	2001      	movs	r0, #1
}
 8001a78:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a7a:	7f43      	ldrb	r3, [r0, #29]
 8001a7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a80:	b913      	cbnz	r3, 8001a88 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001a82:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001a84:	f008 f922 	bl	8009ccc <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a8c:	7923      	ldrb	r3, [r4, #4]
 8001a8e:	b9e3      	cbnz	r3, 8001aca <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <HAL_CRC_Init+0x70>)
 8001a94:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	f022 0218 	bic.w	r2, r2, #24
 8001a9c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a9e:	7962      	ldrb	r2, [r4, #5]
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	b9d2      	cbnz	r2, 8001ada <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001aa8:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	6961      	ldr	r1, [r4, #20]
 8001aae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	69a1      	ldr	r1, [r4, #24]
 8001aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	e7d6      	b.n	8001a78 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001aca:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f000 f832 	bl	8001b38 <HAL_CRCEx_Polynomial_Set>
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	d0e2      	beq.n	8001a9e <HAL_CRC_Init+0x2e>
 8001ad8:	e7cd      	b.n	8001a76 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ada:	6922      	ldr	r2, [r4, #16]
 8001adc:	e7e4      	b.n	8001aa8 <HAL_CRC_Init+0x38>
 8001ade:	bf00      	nop
 8001ae0:	04c11db7 	.word	0x04c11db7

08001ae4 <HAL_CRC_Accumulate>:
{
 8001ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hcrc);
 8001ae6:	7f03      	ldrb	r3, [r0, #28]
 8001ae8:	2b01      	cmp	r3, #1
{
 8001aea:	4604      	mov	r4, r0
 8001aec:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hcrc);
 8001af0:	d020      	beq.n	8001b34 <HAL_CRC_Accumulate+0x50>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001af2:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8001af4:	6a03      	ldr	r3, [r0, #32]
  __HAL_LOCK(hcrc);
 8001af6:	2701      	movs	r7, #1
  switch (hcrc->InputDataFormat)
 8001af8:	2b02      	cmp	r3, #2
  __HAL_LOCK(hcrc);
 8001afa:	7707      	strb	r7, [r0, #28]
  switch (hcrc->InputDataFormat)
 8001afc:	d015      	beq.n	8001b2a <HAL_CRC_Accumulate+0x46>
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d004      	beq.n	8001b0c <HAL_CRC_Accumulate+0x28>
 8001b02:	42bb      	cmp	r3, r7
 8001b04:	d114      	bne.n	8001b30 <HAL_CRC_Accumulate+0x4c>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001b06:	f7ff ff66 	bl	80019d6 <CRC_Handle_8>
      break;
 8001b0a:	e005      	b.n	8001b18 <HAL_CRC_Accumulate+0x34>
 8001b0c:	6803      	ldr	r3, [r0, #0]
 8001b0e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 8001b12:	42b1      	cmp	r1, r6
 8001b14:	d105      	bne.n	8001b22 <HAL_CRC_Accumulate+0x3e>
      temp = hcrc->Instance->DR;
 8001b16:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	7723      	strb	r3, [r4, #28]
}
 8001b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcrc->Instance->DR = pBuffer[index];
 8001b22:	f851 2b04 	ldr.w	r2, [r1], #4
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e7f3      	b.n	8001b12 <HAL_CRC_Accumulate+0x2e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)pBuffer, BufferLength);
 8001b2a:	f7ff ff89 	bl	8001a40 <CRC_Handle_16>
      break;
 8001b2e:	e7f3      	b.n	8001b18 <HAL_CRC_Accumulate+0x34>
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001b30:	2000      	movs	r0, #0
 8001b32:	e7f1      	b.n	8001b18 <HAL_CRC_Accumulate+0x34>
  __HAL_LOCK(hcrc);
 8001b34:	4618      	mov	r0, r3
 8001b36:	e7f3      	b.n	8001b20 <HAL_CRC_Accumulate+0x3c>

08001b38 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001b38:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001b3a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << msb)) == 0U))
 8001b3c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8001b40:	d306      	bcc.n	8001b50 <HAL_CRCEx_Polynomial_Set+0x18>
 8001b42:	fa21 f403 	lsr.w	r4, r1, r3
 8001b46:	07e4      	lsls	r4, r4, #31
 8001b48:	d5f8      	bpl.n	8001b3c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8001b4a:	2a08      	cmp	r2, #8
 8001b4c:	d014      	beq.n	8001b78 <HAL_CRCEx_Polynomial_Set+0x40>
 8001b4e:	d802      	bhi.n	8001b56 <HAL_CRCEx_Polynomial_Set+0x1e>
 8001b50:	b13a      	cbz	r2, 8001b62 <HAL_CRCEx_Polynomial_Set+0x2a>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001b52:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8001b54:	e00d      	b.n	8001b72 <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 8001b56:	2a10      	cmp	r2, #16
 8001b58:	d00c      	beq.n	8001b74 <HAL_CRCEx_Polynomial_Set+0x3c>
 8001b5a:	2a18      	cmp	r2, #24
 8001b5c:	d1f9      	bne.n	8001b52 <HAL_CRCEx_Polynomial_Set+0x1a>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001b5e:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b60:	d8f7      	bhi.n	8001b52 <HAL_CRCEx_Polynomial_Set+0x1a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b62:	6800      	ldr	r0, [r0, #0]
 8001b64:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b66:	6883      	ldr	r3, [r0, #8]
 8001b68:	f023 0318 	bic.w	r3, r3, #24
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	6082      	str	r2, [r0, #8]
 8001b70:	2000      	movs	r0, #0
}
 8001b72:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001b74:	2b07      	cmp	r3, #7
 8001b76:	e7f3      	b.n	8001b60 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	e7f1      	b.n	8001b60 <HAL_CRCEx_Polynomial_Set+0x28>

08001b7c <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_FLASH_Unlock+0x1c>)
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	2a00      	cmp	r2, #0
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001b82:	bfbf      	itttt	lt
 8001b84:	4a05      	ldrlt	r2, [pc, #20]	; (8001b9c <HAL_FLASH_Unlock+0x20>)
 8001b86:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001b88:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8001b8c:	609a      	strlt	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001b8e:	bfba      	itte	lt
 8001b90:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001b92:	0fc0      	lsrlt	r0, r0, #31
 8001b94:	2000      	movge	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8001b96:	4770      	bx	lr
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	45670123 	.word	0x45670123

08001ba0 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001ba0:	4a03      	ldr	r2, [pc, #12]	; (8001bb0 <HAL_FLASH_Lock+0x10>)
 8001ba2:	6953      	ldr	r3, [r2, #20]
 8001ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	6153      	str	r3, [r2, #20]

  return HAL_OK;
}
 8001baa:	2000      	movs	r0, #0
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40022000 	.word	0x40022000

08001bb4 <HAL_FLASH_OB_Unlock>:
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_FLASH_OB_Unlock+0x1c>)
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	0052      	lsls	r2, r2, #1
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001bba:	bf41      	itttt	mi
 8001bbc:	4a05      	ldrmi	r2, [pc, #20]	; (8001bd4 <HAL_FLASH_OB_Unlock+0x20>)
 8001bbe:	60da      	strmi	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001bc0:	f102 3244 	addmi.w	r2, r2, #1145324612	; 0x44444444
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001bc4:	2000      	movmi	r0, #0
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001bc6:	bf4c      	ite	mi
 8001bc8:	60da      	strmi	r2, [r3, #12]
    return HAL_ERROR;
 8001bca:	2001      	movpl	r0, #1
}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40022000 	.word	0x40022000
 8001bd4:	08192a3b 	.word	0x08192a3b

08001bd8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	4605      	mov	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff f954 	bl	8000e88 <HAL_GetTick>
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001be0:	4c1a      	ldr	r4, [pc, #104]	; (8001c4c <FLASH_WaitForLastOperation+0x74>)
  uint32_t tickstart = HAL_GetTick();
 8001be2:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001be4:	6923      	ldr	r3, [r4, #16]
 8001be6:	03db      	lsls	r3, r3, #15
 8001be8:	d41e      	bmi.n	8001c28 <FLASH_WaitForLastOperation+0x50>
        return HAL_TIMEOUT;
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001bea:	6923      	ldr	r3, [r4, #16]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8001bec:	69a0      	ldr	r0, [r4, #24]
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001bee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bf2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001bf6:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8001bfa:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8001bfe:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000

  if(error != 0u)
 8001c02:	4318      	orrs	r0, r3
 8001c04:	d019      	beq.n	8001c3a <FLASH_WaitForLastOperation+0x62>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <FLASH_WaitForLastOperation+0x78>)
 8001c08:	6853      	ldr	r3, [r2, #4]
 8001c0a:	4303      	orrs	r3, r0
 8001c0c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001c0e:	f010 4340 	ands.w	r3, r0, #3221225472	; 0xc0000000
 8001c12:	bf1e      	ittt	ne
 8001c14:	69a2      	ldrne	r2, [r4, #24]
 8001c16:	4313      	orrne	r3, r2
 8001c18:	61a3      	strne	r3, [r4, #24]
 8001c1a:	f030 4040 	bics.w	r0, r0, #3221225472	; 0xc0000000
 8001c1e:	d001      	beq.n	8001c24 <FLASH_WaitForLastOperation+0x4c>
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <FLASH_WaitForLastOperation+0x74>)
 8001c22:	6118      	str	r0, [r3, #16]

    return HAL_ERROR;
 8001c24:	2001      	movs	r0, #1
 8001c26:	e00e      	b.n	8001c46 <FLASH_WaitForLastOperation+0x6e>
    if(Timeout != HAL_MAX_DELAY)
 8001c28:	1c6a      	adds	r2, r5, #1
 8001c2a:	d0db      	beq.n	8001be4 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001c2c:	f7ff f92c 	bl	8000e88 <HAL_GetTick>
 8001c30:	1b80      	subs	r0, r0, r6
 8001c32:	42a8      	cmp	r0, r5
 8001c34:	d3d6      	bcc.n	8001be4 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8001c36:	2003      	movs	r0, #3
 8001c38:	e005      	b.n	8001c46 <FLASH_WaitForLastOperation+0x6e>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001c3a:	6923      	ldr	r3, [r4, #16]
 8001c3c:	f013 0301 	ands.w	r3, r3, #1
 8001c40:	d002      	beq.n	8001c48 <FLASH_WaitForLastOperation+0x70>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c42:	2301      	movs	r3, #1
 8001c44:	6123      	str	r3, [r4, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
}
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001c48:	4618      	mov	r0, r3
 8001c4a:	e7fc      	b.n	8001c46 <FLASH_WaitForLastOperation+0x6e>
 8001c4c:	40022000 	.word	0x40022000
 8001c50:	20000000 	.word	0x20000000

08001c54 <HAL_FLASHEx_OBProgram>:
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c54:	4b8d      	ldr	r3, [pc, #564]	; (8001e8c <HAL_FLASHEx_OBProgram+0x238>)
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	2a01      	cmp	r2, #1
{
 8001c5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c5e:	4606      	mov	r6, r0
 8001c60:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8001c62:	f000 8111 	beq.w	8001e88 <HAL_FLASHEx_OBProgram+0x234>
 8001c66:	2701      	movs	r7, #1
 8001c68:	701f      	strb	r7, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
  
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c8 3004 	str.w	r3, [r8, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8001c70:	6803      	ldr	r3, [r0, #0]
 8001c72:	403b      	ands	r3, r7
 8001c74:	f000 8106 	beq.w	8001e84 <HAL_FLASHEx_OBProgram+0x230>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 8001c78:	e9d0 a901 	ldrd	sl, r9, [r0, #4]
 8001c7c:	68c5      	ldr	r5, [r0, #12]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c82:	f7ff ffa9 	bl	8001bd8 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8001c86:	b9d8      	cbnz	r0, 8001cc0 <HAL_FLASHEx_OBProgram+0x6c>
 8001c88:	4c81      	ldr	r4, [pc, #516]	; (8001e90 <HAL_FLASHEx_OBProgram+0x23c>)
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8001c8a:	f1ba 0f00 	cmp.w	sl, #0
 8001c8e:	f040 80ec 	bne.w	8001e6a <HAL_FLASHEx_OBProgram+0x216>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END), 
 8001c92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c94:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001c98:	ea43 0309 	orr.w	r3, r3, r9
 8001c9c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
    {
      /* Nothing to do */
    }
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001ca2:	6963      	ldr	r3, [r4, #20]
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	6163      	str	r3, [r4, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001caa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cae:	f7ff ff93 	bl	8001bd8 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001cb2:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb4:	1c07      	adds	r7, r0, #0
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001cb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001cba:	6163      	str	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001cbc:	bf18      	it	ne
 8001cbe:	2701      	movne	r7, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8001cc0:	6833      	ldr	r3, [r6, #0]
 8001cc2:	079d      	lsls	r5, r3, #30
 8001cc4:	d519      	bpl.n	8001cfa <HAL_FLASHEx_OBProgram+0xa6>

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cc6:	f24c 3050 	movw	r0, #50000	; 0xc350
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8001cca:	6935      	ldr	r5, [r6, #16]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ccc:	f7ff ff84 	bl	8001bd8 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8001cd0:	b990      	cbnz	r0, 8001cf8 <HAL_FLASHEx_OBProgram+0xa4>
  { 
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 8001cd2:	4c6f      	ldr	r4, [pc, #444]	; (8001e90 <HAL_FLASHEx_OBProgram+0x23c>)
 8001cd4:	6a23      	ldr	r3, [r4, #32]
 8001cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cda:	432b      	orrs	r3, r5
 8001cdc:	6223      	str	r3, [r4, #32]
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001cde:	6963      	ldr	r3, [r4, #20]
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce4:	6163      	str	r3, [r4, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ce6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cea:	f7ff ff75 	bl	8001bd8 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001cee:	6963      	ldr	r3, [r4, #20]
 8001cf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001cf4:	6163      	str	r3, [r4, #20]
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8001cf6:	b100      	cbz	r0, 8001cfa <HAL_FLASHEx_OBProgram+0xa6>
      status = HAL_ERROR;
 8001cf8:	2701      	movs	r7, #1
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8001cfa:	6833      	ldr	r3, [r6, #0]
 8001cfc:	075c      	lsls	r4, r3, #29
 8001cfe:	d578      	bpl.n	8001df2 <HAL_FLASHEx_OBProgram+0x19e>

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d00:	f24c 3050 	movw	r0, #50000	; 0xc350
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8001d04:	e9d6 5405 	ldrd	r5, r4, [r6, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d08:	f7ff ff66 	bl	8001bd8 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d16f      	bne.n	8001df0 <HAL_FLASHEx_OBProgram+0x19c>
  { 
    if((UserType & OB_USER_BOR_LEV) != 0U)
 8001d10:	f015 0301 	ands.w	r3, r5, #1
  uint32_t optr_reg_val = 0;
 8001d14:	bf0e      	itee	eq
 8001d16:	461a      	moveq	r2, r3
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));
    
      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8001d18:	f404 62e0 	andne.w	r2, r4, #1792	; 0x700
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8001d1c:	f44f 63e0 	movne.w	r3, #1792	; 0x700
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 8001d20:	07a8      	lsls	r0, r5, #30
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));
    
      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8001d22:	bf42      	ittt	mi
 8001d24:	f404 5180 	andmi.w	r1, r4, #4096	; 0x1000
 8001d28:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8001d2a:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 8001d2e:	0769      	lsls	r1, r5, #29
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));
    
      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8001d30:	bf42      	ittt	mi
 8001d32:	f404 5100 	andmi.w	r1, r4, #8192	; 0x2000
 8001d36:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8001d38:	f443 5300 	orrmi.w	r3, r3, #8192	; 0x2000
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 8001d3c:	04e8      	lsls	r0, r5, #19
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));
    
      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8001d3e:	bf42      	ittt	mi
 8001d40:	f404 4180 	andmi.w	r1, r4, #16384	; 0x4000
 8001d44:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8001d46:	f443 4380 	orrmi.w	r3, r3, #16384	; 0x4000
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 8001d4a:	0729      	lsls	r1, r5, #28
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));
    
      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8001d4c:	bf42      	ittt	mi
 8001d4e:	f404 3180 	andmi.w	r1, r4, #65536	; 0x10000
 8001d52:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8001d54:	f443 3380 	orrmi.w	r3, r3, #65536	; 0x10000
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 8001d58:	06e8      	lsls	r0, r5, #27
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));
    
      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8001d5a:	bf42      	ittt	mi
 8001d5c:	f404 3100 	andmi.w	r1, r4, #131072	; 0x20000
 8001d60:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8001d62:	f443 3300 	orrmi.w	r3, r3, #131072	; 0x20000
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8001d66:	06a9      	lsls	r1, r5, #26
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));
    
      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8001d68:	bf42      	ittt	mi
 8001d6a:	f404 2180 	andmi.w	r1, r4, #262144	; 0x40000
 8001d6e:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8001d70:	f443 2380 	orrmi.w	r3, r3, #262144	; 0x40000
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 8001d74:	0668      	lsls	r0, r5, #25
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));
    
      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8001d76:	bf42      	ittt	mi
 8001d78:	f404 2100 	andmi.w	r1, r4, #524288	; 0x80000
 8001d7c:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8001d7e:	f443 2300 	orrmi.w	r3, r3, #524288	; 0x80000
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
#endif
    }
#endif
    
    if((UserType & OB_USER_nBOOT1) != 0U)
 8001d82:	05a9      	lsls	r1, r5, #22
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));
    
      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8001d84:	bf42      	ittt	mi
 8001d86:	f404 0100 	andmi.w	r1, r4, #8388608	; 0x800000
 8001d8a:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 8001d8c:	f443 0300 	orrmi.w	r3, r3, #8388608	; 0x800000
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 8001d90:	0568      	lsls	r0, r5, #21
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));
    
      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 8001d92:	bf42      	ittt	mi
 8001d94:	f004 7180 	andmi.w	r1, r4, #16777216	; 0x1000000
 8001d98:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 8001d9a:	f043 7380 	orrmi.w	r3, r3, #16777216	; 0x1000000
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 8001d9e:	0529      	lsls	r1, r5, #20
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));
    
      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 8001da0:	bf42      	ittt	mi
 8001da2:	f004 7100 	andmi.w	r1, r4, #33554432	; 0x2000000
 8001da6:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 8001da8:	f043 7300 	orrmi.w	r3, r3, #33554432	; 0x2000000

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || \
    defined (STM32L443xx) || defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_nSWBOOT0) != 0U)
 8001dac:	04a8      	lsls	r0, r5, #18
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));
    
      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 8001dae:	bf42      	ittt	mi
 8001db0:	f004 6180 	andmi.w	r1, r4, #67108864	; 0x4000000
 8001db4:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 8001db6:	f043 6380 	orrmi.w	r3, r3, #67108864	; 0x4000000
    }

    if((UserType & OB_USER_nBOOT0) != 0U)
 8001dba:	0469      	lsls	r1, r5, #17
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));
    
      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 8001dbc:	bf44      	itt	mi
 8001dbe:	f004 6400 	andmi.w	r4, r4, #134217728	; 0x8000000
 8001dc2:	4322      	orrmi	r2, r4
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif
    
    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8001dc4:	4c32      	ldr	r4, [pc, #200]	; (8001e90 <HAL_FLASHEx_OBProgram+0x23c>)
 8001dc6:	6a21      	ldr	r1, [r4, #32]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 8001dc8:	bf48      	it	mi
 8001dca:	f043 6300 	orrmi.w	r3, r3, #134217728	; 0x8000000
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8001dce:	ea21 0303 	bic.w	r3, r1, r3
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	6222      	str	r2, [r4, #32]
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001dd6:	6963      	ldr	r3, [r4, #20]
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	6163      	str	r3, [r4, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dde:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de2:	f7ff fef9 	bl	8001bd8 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001de6:	6963      	ldr	r3, [r4, #20]
 8001de8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dec:	6163      	str	r3, [r4, #20]
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8001dee:	b100      	cbz	r0, 8001df2 <HAL_FLASHEx_OBProgram+0x19e>
      status = HAL_ERROR;
 8001df0:	2701      	movs	r7, #1
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8001df2:	6833      	ldr	r3, [r6, #0]
 8001df4:	071a      	lsls	r2, r3, #28
 8001df6:	d532      	bpl.n	8001e5e <HAL_FLASHEx_OBProgram+0x20a>
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 8001df8:	e9d6 9408 	ldrd	r9, r4, [r6, #32]
 8001dfc:	45a1      	cmp	r9, r4
 8001dfe:	d02e      	beq.n	8001e5e <HAL_FLASHEx_OBProgram+0x20a>
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e00:	f24c 3050 	movw	r0, #50000	; 0xc350
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8001e04:	69f5      	ldr	r5, [r6, #28]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e06:	f7ff fee7 	bl	8001bd8 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8001e0a:	bb38      	cbnz	r0, 8001e5c <HAL_FLASHEx_OBProgram+0x208>
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8001e0c:	07eb      	lsls	r3, r5, #31
 8001e0e:	d510      	bpl.n	8001e32 <HAL_FLASHEx_OBProgram+0x1de>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8001e10:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <HAL_FLASHEx_OBProgram+0x23c>)
 8001e12:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e14:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 8001e18:	f109 4978 	add.w	r9, r9, #4160749568	; 0xf8000000
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8001e1c:	4001      	ands	r1, r0
 8001e1e:	ea41 01d9 	orr.w	r1, r1, r9, lsr #3
 8001e22:	6259      	str	r1, [r3, #36]	; 0x24
        
        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8001e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 8001e26:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8001e2a:	4002      	ands	r2, r0
 8001e2c:	ea42 02d4 	orr.w	r2, r2, r4, lsr #3
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
      {
        /* Nothing to do */
      }
    }
    
    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8001e32:	4c17      	ldr	r4, [pc, #92]	; (8001e90 <HAL_FLASHEx_OBProgram+0x23c>)
 8001e34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e36:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8001e3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e3e:	432b      	orrs	r3, r5
 8001e40:	62a3      	str	r3, [r4, #40]	; 0x28
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001e42:	6963      	ldr	r3, [r4, #20]
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	6163      	str	r3, [r4, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e4e:	f7ff fec3 	bl	8001bd8 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001e52:	6963      	ldr	r3, [r4, #20]
 8001e54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e58:	6163      	str	r3, [r4, #20]
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8001e5a:	b100      	cbz	r0, 8001e5e <HAL_FLASHEx_OBProgram+0x20a>
        status = HAL_ERROR;
 8001e5c:	2701      	movs	r7, #1
  __HAL_UNLOCK(&pFlash);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f888 3000 	strb.w	r3, [r8]
}
 8001e64:	4638      	mov	r0, r7
 8001e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8001e6a:	f1ba 0f01 	cmp.w	sl, #1
 8001e6e:	f47f af18 	bne.w	8001ca2 <HAL_FLASHEx_OBProgram+0x4e>
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END), 
 8001e72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e74:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001e78:	ea43 0309 	orr.w	r3, r3, r9
 8001e7c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001e80:	6323      	str	r3, [r4, #48]	; 0x30
 8001e82:	e70e      	b.n	8001ca2 <HAL_FLASHEx_OBProgram+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 8001e84:	461f      	mov	r7, r3
 8001e86:	e71b      	b.n	8001cc0 <HAL_FLASHEx_OBProgram+0x6c>
  __HAL_LOCK(&pFlash);
 8001e88:	2702      	movs	r7, #2
 8001e8a:	e7eb      	b.n	8001e64 <HAL_FLASHEx_OBProgram+0x210>
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	40022000 	.word	0x40022000

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001e98:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8002014 <HAL_GPIO_Init+0x180>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ea0:	4a5a      	ldr	r2, [pc, #360]	; (800200c <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00;
 8001ea2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001ea4:	fa38 f403 	lsrs.w	r4, r8, r3
 8001ea8:	d102      	bne.n	8001eb0 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8001eaa:	b003      	add	sp, #12
 8001eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001eb0:	2401      	movs	r4, #1
 8001eb2:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8001eb6:	ea1a 0508 	ands.w	r5, sl, r8
 8001eba:	f000 809c 	beq.w	8001ff6 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ebe:	684c      	ldr	r4, [r1, #4]
 8001ec0:	f024 0b10 	bic.w	fp, r4, #16
 8001ec4:	f1bb 0f02 	cmp.w	fp, #2
 8001ec8:	d114      	bne.n	8001ef4 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8001eca:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001ece:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ed2:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001ed6:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001eda:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001ede:	270f      	movs	r7, #15
 8001ee0:	fa07 f70e 	lsl.w	r7, r7, lr
 8001ee4:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ee8:	690e      	ldr	r6, [r1, #16]
 8001eea:	fa06 f60e 	lsl.w	r6, r6, lr
 8001eee:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001ef0:	f8cc 6020 	str.w	r6, [ip, #32]
 8001ef4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001ef8:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001efa:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001efc:	fa07 f70e 	lsl.w	r7, r7, lr
 8001f00:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f02:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001f06:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f08:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f0c:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f10:	ea4c 0606 	orr.w	r6, ip, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f14:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001f18:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1a:	d811      	bhi.n	8001f40 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001f1c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001f1e:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f22:	68ce      	ldr	r6, [r1, #12]
 8001f24:	fa06 fc0e 	lsl.w	ip, r6, lr
 8001f28:	ea4c 060b 	orr.w	r6, ip, fp
        GPIOx->OSPEEDR = temp;
 8001f2c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f2e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f30:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f34:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001f38:	409e      	lsls	r6, r3
 8001f3a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001f3e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001f40:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001f42:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f44:	688e      	ldr	r6, [r1, #8]
 8001f46:	fa06 f60e 	lsl.w	r6, r6, lr
 8001f4a:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4c:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001f4e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f50:	d551      	bpl.n	8001ff6 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001f56:	f046 0601 	orr.w	r6, r6, #1
 8001f5a:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001f5e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001f62:	f023 0703 	bic.w	r7, r3, #3
 8001f66:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001f6a:	f006 0601 	and.w	r6, r6, #1
 8001f6e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001f72:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f74:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f78:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001f7a:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f7c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001f80:	f04f 0c0f 	mov.w	ip, #15
 8001f84:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001f88:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f8c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001f90:	d033      	beq.n	8001ffa <HAL_GPIO_Init+0x166>
 8001f92:	4e1f      	ldr	r6, [pc, #124]	; (8002010 <HAL_GPIO_Init+0x17c>)
 8001f94:	42b0      	cmp	r0, r6
 8001f96:	d032      	beq.n	8001ffe <HAL_GPIO_Init+0x16a>
 8001f98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f9c:	42b0      	cmp	r0, r6
 8001f9e:	d030      	beq.n	8002002 <HAL_GPIO_Init+0x16e>
 8001fa0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fa4:	42b0      	cmp	r0, r6
 8001fa6:	d02e      	beq.n	8002006 <HAL_GPIO_Init+0x172>
 8001fa8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001fac:	42b0      	cmp	r0, r6
 8001fae:	bf14      	ite	ne
 8001fb0:	2607      	movne	r6, #7
 8001fb2:	2604      	moveq	r6, #4
 8001fb4:	fa06 f60e 	lsl.w	r6, r6, lr
 8001fb8:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fbc:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001fbe:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	bf0c      	ite	eq
 8001fc8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001fca:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8001fcc:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8001fce:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001fd4:	bf0c      	ite	eq
 8001fd6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001fd8:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8001fda:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8001fdc:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fde:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	bf0c      	ite	eq
 8001fe4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001fe6:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8001fe8:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8001fea:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fec:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001fee:	bf54      	ite	pl
 8001ff0:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001ff2:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8001ff4:	60d6      	str	r6, [r2, #12]
    position++;
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	e754      	b.n	8001ea4 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001ffa:	2600      	movs	r6, #0
 8001ffc:	e7da      	b.n	8001fb4 <HAL_GPIO_Init+0x120>
 8001ffe:	2601      	movs	r6, #1
 8002000:	e7d8      	b.n	8001fb4 <HAL_GPIO_Init+0x120>
 8002002:	2602      	movs	r6, #2
 8002004:	e7d6      	b.n	8001fb4 <HAL_GPIO_Init+0x120>
 8002006:	2603      	movs	r6, #3
 8002008:	e7d4      	b.n	8001fb4 <HAL_GPIO_Init+0x120>
 800200a:	bf00      	nop
 800200c:	40010400 	.word	0x40010400
 8002010:	48000400 	.word	0x48000400
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 800201c:	4c37      	ldr	r4, [pc, #220]	; (80020fc <HAL_GPIO_DeInit+0xe4>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800201e:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8002104 <HAL_GPIO_DeInit+0xec>
  uint32_t position = 0x00;
 8002022:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1U << position);
 8002024:	f04f 0e01 	mov.w	lr, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8002028:	f04f 0803 	mov.w	r8, #3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800202c:	f04f 0c0f 	mov.w	ip, #15
  while ((GPIO_Pin >> position) != RESET)
 8002030:	fa31 f203 	lsrs.w	r2, r1, r3
 8002034:	d101      	bne.n	800203a <HAL_GPIO_DeInit+0x22>
      }
    }
    
    position++;
  }
}
 8002036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 800203a:	fa0e fa03 	lsl.w	sl, lr, r3
    if (iocurrent)
 800203e:	ea1a 0501 	ands.w	r5, sl, r1
 8002042:	d051      	beq.n	80020e8 <HAL_GPIO_DeInit+0xd0>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8002044:	6806      	ldr	r6, [r0, #0]
 8002046:	005a      	lsls	r2, r3, #1
 8002048:	fa08 f202 	lsl.w	r2, r8, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800204c:	08df      	lsrs	r7, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 800204e:	4316      	orrs	r6, r2
 8002050:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002054:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002056:	f003 0607 	and.w	r6, r3, #7
 800205a:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800205e:	00b6      	lsls	r6, r6, #2
 8002060:	fa0c f606 	lsl.w	r6, ip, r6
 8002064:	ea2b 0606 	bic.w	r6, fp, r6
 8002068:	623e      	str	r6, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800206a:	6886      	ldr	r6, [r0, #8]
 800206c:	43d2      	mvns	r2, r2
 800206e:	4016      	ands	r6, r2
 8002070:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002072:	6846      	ldr	r6, [r0, #4]
 8002074:	ea26 060a 	bic.w	r6, r6, sl
 8002078:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800207a:	68c6      	ldr	r6, [r0, #12]
 800207c:	4032      	ands	r2, r6
 800207e:	60c2      	str	r2, [r0, #12]
 8002080:	f023 0203 	bic.w	r2, r3, #3
 8002084:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002088:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800208c:	f003 0703 	and.w	r7, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8002090:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002092:	00bf      	lsls	r7, r7, #2
 8002094:	fa0c fb07 	lsl.w	fp, ip, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8002098:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800209c:	ea0b 0a06 	and.w	sl, fp, r6
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80020a0:	d024      	beq.n	80020ec <HAL_GPIO_DeInit+0xd4>
 80020a2:	4e17      	ldr	r6, [pc, #92]	; (8002100 <HAL_GPIO_DeInit+0xe8>)
 80020a4:	42b0      	cmp	r0, r6
 80020a6:	d023      	beq.n	80020f0 <HAL_GPIO_DeInit+0xd8>
 80020a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020ac:	42b0      	cmp	r0, r6
 80020ae:	d021      	beq.n	80020f4 <HAL_GPIO_DeInit+0xdc>
 80020b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020b4:	42b0      	cmp	r0, r6
 80020b6:	d01f      	beq.n	80020f8 <HAL_GPIO_DeInit+0xe0>
 80020b8:	4548      	cmp	r0, r9
 80020ba:	bf0c      	ite	eq
 80020bc:	2604      	moveq	r6, #4
 80020be:	2607      	movne	r6, #7
 80020c0:	40be      	lsls	r6, r7
 80020c2:	4556      	cmp	r6, sl
 80020c4:	d110      	bne.n	80020e8 <HAL_GPIO_DeInit+0xd0>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80020c6:	6896      	ldr	r6, [r2, #8]
 80020c8:	ea26 060b 	bic.w	r6, r6, fp
 80020cc:	6096      	str	r6, [r2, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 80020ce:	6822      	ldr	r2, [r4, #0]
 80020d0:	43ed      	mvns	r5, r5
 80020d2:	402a      	ands	r2, r5
 80020d4:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 80020d6:	6862      	ldr	r2, [r4, #4]
 80020d8:	402a      	ands	r2, r5
 80020da:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 80020dc:	68a2      	ldr	r2, [r4, #8]
 80020de:	402a      	ands	r2, r5
 80020e0:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 80020e2:	68e2      	ldr	r2, [r4, #12]
 80020e4:	4015      	ands	r5, r2
 80020e6:	60e5      	str	r5, [r4, #12]
    position++;
 80020e8:	3301      	adds	r3, #1
 80020ea:	e7a1      	b.n	8002030 <HAL_GPIO_DeInit+0x18>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80020ec:	2600      	movs	r6, #0
 80020ee:	e7e7      	b.n	80020c0 <HAL_GPIO_DeInit+0xa8>
 80020f0:	2601      	movs	r6, #1
 80020f2:	e7e5      	b.n	80020c0 <HAL_GPIO_DeInit+0xa8>
 80020f4:	2602      	movs	r6, #2
 80020f6:	e7e3      	b.n	80020c0 <HAL_GPIO_DeInit+0xa8>
 80020f8:	2603      	movs	r6, #3
 80020fa:	e7e1      	b.n	80020c0 <HAL_GPIO_DeInit+0xa8>
 80020fc:	40010400 	.word	0x40010400
 8002100:	48000400 	.word	0x48000400
 8002104:	48001000 	.word	0x48001000

08002108 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002108:	6903      	ldr	r3, [r0, #16]
 800210a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800210c:	bf14      	ite	ne
 800210e:	2001      	movne	r0, #1
 8002110:	2000      	moveq	r0, #0
 8002112:	4770      	bx	lr

08002114 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002114:	b10a      	cbz	r2, 800211a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002116:	6181      	str	r1, [r0, #24]
 8002118:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800211a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800211c:	4770      	bx	lr

0800211e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800211e:	6943      	ldr	r3, [r0, #20]
 8002120:	4059      	eors	r1, r3
 8002122:	6141      	str	r1, [r0, #20]
}
 8002124:	4770      	bx	lr

08002126 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002126:	6803      	ldr	r3, [r0, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800212c:	bf44      	itt	mi
 800212e:	2200      	movmi	r2, #0
 8002130:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002136:	bf5e      	ittt	pl
 8002138:	699a      	ldrpl	r2, [r3, #24]
 800213a:	f042 0201 	orrpl.w	r2, r2, #1
 800213e:	619a      	strpl	r2, [r3, #24]
  }
}
 8002140:	4770      	bx	lr
	...

08002144 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002144:	b530      	push	{r4, r5, lr}
 8002146:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002148:	6804      	ldr	r4, [r0, #0]
 800214a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800214e:	4313      	orrs	r3, r2
 8002150:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8002154:	431a      	orrs	r2, r3
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <I2C_TransferConfig+0x24>)
 8002158:	6860      	ldr	r0, [r4, #4]
 800215a:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 800215e:	ea20 0003 	bic.w	r0, r0, r3
 8002162:	4302      	orrs	r2, r0
 8002164:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002166:	bd30      	pop	{r4, r5, pc}
 8002168:	03ff63ff 	.word	0x03ff63ff

0800216c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800216c:	6803      	ldr	r3, [r0, #0]
{
 800216e:	b570      	push	{r4, r5, r6, lr}
 8002170:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002172:	6998      	ldr	r0, [r3, #24]
 8002174:	f010 0010 	ands.w	r0, r0, #16
{
 8002178:	460d      	mov	r5, r1
 800217a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800217c:	d116      	bne.n	80021ac <I2C_IsAcknowledgeFailed+0x40>
}
 800217e:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002180:	1c69      	adds	r1, r5, #1
 8002182:	d014      	beq.n	80021ae <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002184:	f7fe fe80 	bl	8000e88 <HAL_GetTick>
 8002188:	1b80      	subs	r0, r0, r6
 800218a:	42a8      	cmp	r0, r5
 800218c:	d800      	bhi.n	8002190 <I2C_IsAcknowledgeFailed+0x24>
 800218e:	b96d      	cbnz	r5, 80021ac <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002190:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002192:	f043 0320 	orr.w	r3, r3, #32
 8002196:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002198:	2320      	movs	r3, #32
 800219a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800219e:	2300      	movs	r3, #0
 80021a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80021a4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
 80021aa:	e7e8      	b.n	800217e <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	6999      	ldr	r1, [r3, #24]
 80021b0:	068a      	lsls	r2, r1, #26
 80021b2:	d5e5      	bpl.n	8002180 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b4:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b6:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b8:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80021ba:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021bc:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80021be:	f7ff ffb2 	bl	8002126 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80021c2:	6822      	ldr	r2, [r4, #0]
 80021c4:	6853      	ldr	r3, [r2, #4]
 80021c6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80021ca:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80021ce:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80021e4:	e7db      	b.n	800219e <I2C_IsAcknowledgeFailed+0x32>

080021e6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80021e6:	b570      	push	{r4, r5, r6, lr}
 80021e8:	4604      	mov	r4, r0
 80021ea:	460d      	mov	r5, r1
 80021ec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	075b      	lsls	r3, r3, #29
 80021f4:	d40e      	bmi.n	8002214 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f6:	4632      	mov	r2, r6
 80021f8:	4629      	mov	r1, r5
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff ffb6 	bl	800216c <I2C_IsAcknowledgeFailed>
 8002200:	b9f0      	cbnz	r0, 8002240 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	0691      	lsls	r1, r2, #26
 8002208:	d51c      	bpl.n	8002244 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	0752      	lsls	r2, r2, #29
 800220e:	d503      	bpl.n	8002218 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8002210:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002212:	b10a      	cbz	r2, 8002218 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8002214:	2000      	movs	r0, #0
}
 8002216:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002218:	2120      	movs	r1, #32
 800221a:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002222:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002226:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002230:	2300      	movs	r3, #0
 8002232:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002234:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800223c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002240:	2001      	movs	r0, #1
 8002242:	e7e8      	b.n	8002216 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002244:	f7fe fe20 	bl	8000e88 <HAL_GetTick>
 8002248:	1b80      	subs	r0, r0, r6
 800224a:	42a8      	cmp	r0, r5
 800224c:	d801      	bhi.n	8002252 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800224e:	2d00      	cmp	r5, #0
 8002250:	d1cd      	bne.n	80021ee <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002252:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002254:	f043 0320 	orr.w	r3, r3, #32
 8002258:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800225a:	2320      	movs	r3, #32
 800225c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8002260:	2300      	movs	r3, #0
 8002262:	e7eb      	b.n	800223c <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08002264 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	4604      	mov	r4, r0
 8002268:	460d      	mov	r5, r1
 800226a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	069b      	lsls	r3, r3, #26
 8002272:	d501      	bpl.n	8002278 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002274:	2000      	movs	r0, #0
}
 8002276:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002278:	4632      	mov	r2, r6
 800227a:	4629      	mov	r1, r5
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff ff75 	bl	800216c <I2C_IsAcknowledgeFailed>
 8002282:	b990      	cbnz	r0, 80022aa <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002284:	f7fe fe00 	bl	8000e88 <HAL_GetTick>
 8002288:	1b80      	subs	r0, r0, r6
 800228a:	42a8      	cmp	r0, r5
 800228c:	d801      	bhi.n	8002292 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800228e:	2d00      	cmp	r5, #0
 8002290:	d1ec      	bne.n	800226c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002292:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002294:	f043 0320 	orr.w	r3, r3, #32
 8002298:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800229a:	2320      	movs	r3, #32
 800229c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80022a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80022aa:	2001      	movs	r0, #1
 80022ac:	e7e3      	b.n	8002276 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080022ae <I2C_WaitOnFlagUntilTimeout>:
{
 80022ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022b2:	9f06      	ldr	r7, [sp, #24]
 80022b4:	4604      	mov	r4, r0
 80022b6:	4688      	mov	r8, r1
 80022b8:	4616      	mov	r6, r2
 80022ba:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022bc:	6822      	ldr	r2, [r4, #0]
 80022be:	6993      	ldr	r3, [r2, #24]
 80022c0:	ea38 0303 	bics.w	r3, r8, r3
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	42b3      	cmp	r3, r6
 80022cc:	d001      	beq.n	80022d2 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80022ce:	2000      	movs	r0, #0
 80022d0:	e015      	b.n	80022fe <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80022d2:	1c6b      	adds	r3, r5, #1
 80022d4:	d0f3      	beq.n	80022be <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d6:	f7fe fdd7 	bl	8000e88 <HAL_GetTick>
 80022da:	1bc0      	subs	r0, r0, r7
 80022dc:	42a8      	cmp	r0, r5
 80022de:	d801      	bhi.n	80022e4 <I2C_WaitOnFlagUntilTimeout+0x36>
 80022e0:	2d00      	cmp	r5, #0
 80022e2:	d1eb      	bne.n	80022bc <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022e6:	f043 0320 	orr.w	r3, r3, #32
 80022ea:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	2320      	movs	r3, #32
 80022ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80022f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80022fc:	2001      	movs	r0, #1
}
 80022fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002302 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002302:	b570      	push	{r4, r5, r6, lr}
 8002304:	4604      	mov	r4, r0
 8002306:	460d      	mov	r5, r1
 8002308:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	079b      	lsls	r3, r3, #30
 8002310:	d501      	bpl.n	8002316 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8002312:	2000      	movs	r0, #0
}
 8002314:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002316:	4632      	mov	r2, r6
 8002318:	4629      	mov	r1, r5
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff ff26 	bl	800216c <I2C_IsAcknowledgeFailed>
 8002320:	b9a0      	cbnz	r0, 800234c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002322:	1c6a      	adds	r2, r5, #1
 8002324:	d0f1      	beq.n	800230a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002326:	f7fe fdaf 	bl	8000e88 <HAL_GetTick>
 800232a:	1b80      	subs	r0, r0, r6
 800232c:	42a8      	cmp	r0, r5
 800232e:	d801      	bhi.n	8002334 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002330:	2d00      	cmp	r5, #0
 8002332:	d1ea      	bne.n	800230a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002334:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002336:	f043 0320 	orr.w	r3, r3, #32
 800233a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800233c:	2320      	movs	r3, #32
 800233e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002342:	2300      	movs	r3, #0
 8002344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002348:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800234c:	2001      	movs	r0, #1
 800234e:	e7e1      	b.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08002350 <I2C_RequestMemoryRead>:
{
 8002350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002352:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002354:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <I2C_RequestMemoryRead+0x60>)
 8002358:	9300      	str	r3, [sp, #0]
{
 800235a:	4605      	mov	r5, r0
 800235c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800235e:	2300      	movs	r3, #0
 8002360:	b2fa      	uxtb	r2, r7
 8002362:	f7ff feef 	bl	8002144 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002366:	4632      	mov	r2, r6
 8002368:	9908      	ldr	r1, [sp, #32]
 800236a:	4628      	mov	r0, r5
 800236c:	f7ff ffc9 	bl	8002302 <I2C_WaitOnTXISFlagUntilTimeout>
 8002370:	b110      	cbz	r0, 8002378 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8002372:	2001      	movs	r0, #1
}
 8002374:	b003      	add	sp, #12
 8002376:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002378:	2f01      	cmp	r7, #1
 800237a:	682b      	ldr	r3, [r5, #0]
 800237c:	d10c      	bne.n	8002398 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800237e:	b2e4      	uxtb	r4, r4
 8002380:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002382:	9b08      	ldr	r3, [sp, #32]
 8002384:	9600      	str	r6, [sp, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	2140      	movs	r1, #64	; 0x40
 800238a:	4628      	mov	r0, r5
 800238c:	f7ff ff8f 	bl	80022ae <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002390:	3000      	adds	r0, #0
 8002392:	bf18      	it	ne
 8002394:	2001      	movne	r0, #1
 8002396:	e7ed      	b.n	8002374 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002398:	0a22      	lsrs	r2, r4, #8
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800239c:	9908      	ldr	r1, [sp, #32]
 800239e:	4632      	mov	r2, r6
 80023a0:	4628      	mov	r0, r5
 80023a2:	f7ff ffae 	bl	8002302 <I2C_WaitOnTXISFlagUntilTimeout>
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d1e3      	bne.n	8002372 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023aa:	682b      	ldr	r3, [r5, #0]
 80023ac:	e7e7      	b.n	800237e <I2C_RequestMemoryRead+0x2e>
 80023ae:	bf00      	nop
 80023b0:	80002000 	.word	0x80002000

080023b4 <HAL_I2C_Init>:
{
 80023b4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80023b6:	4604      	mov	r4, r0
 80023b8:	b908      	cbnz	r0, 80023be <HAL_I2C_Init+0xa>
    hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023ba:	6460      	str	r0, [r4, #68]	; 0x44
 80023bc:	deff      	udf	#255	; 0xff
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80023c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023c6:	b91b      	cbnz	r3, 80023d0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80023c8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80023cc:	f007 ff82 	bl	800a2d4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d0:	2324      	movs	r3, #36	; 0x24
 80023d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023e0:	6862      	ldr	r2, [r4, #4]
 80023e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023f4:	2901      	cmp	r1, #1
 80023f6:	d124      	bne.n	8002442 <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023fc:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002408:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002410:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002412:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8002416:	430a      	orrs	r2, r1
 8002418:	69a1      	ldr	r1, [r4, #24]
 800241a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800241e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002420:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002430:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002432:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002434:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002436:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800243a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002440:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002442:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002446:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002448:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800244a:	bf04      	itt	eq
 800244c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002450:	605a      	streq	r2, [r3, #4]
 8002452:	e7d4      	b.n	80023fe <HAL_I2C_Init+0x4a>

08002454 <HAL_I2C_DeInit>:
{
 8002454:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002456:	4604      	mov	r4, r0
 8002458:	b908      	cbnz	r0, 800245e <HAL_I2C_DeInit+0xa>
    hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800245a:	6460      	str	r0, [r4, #68]	; 0x44
 800245c:	deff      	udf	#255	; 0xff
  __HAL_I2C_DISABLE(hi2c);
 800245e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002460:	2324      	movs	r3, #36	; 0x24
 8002462:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800246e:	f007 ff79 	bl	800a364 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002472:	2000      	movs	r0, #0
 8002474:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8002476:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800247a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800247e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002480:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002484:	bd10      	pop	{r4, pc}
	...

08002488 <HAL_I2C_Master_Transmit>:
{
 8002488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800248c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800248e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002492:	2b20      	cmp	r3, #32
{
 8002494:	4604      	mov	r4, r0
 8002496:	460e      	mov	r6, r1
 8002498:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800249a:	f040 8082 	bne.w	80025a2 <HAL_I2C_Master_Transmit+0x11a>
    __HAL_LOCK(hi2c);
 800249e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d07d      	beq.n	80025a2 <HAL_I2C_Master_Transmit+0x11a>
 80024a6:	2701      	movs	r7, #1
 80024a8:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80024ac:	f7fe fcec 	bl	8000e88 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024b0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80024b2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024b4:	9000      	str	r0, [sp, #0]
 80024b6:	463a      	mov	r2, r7
 80024b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024bc:	4620      	mov	r0, r4
 80024be:	f7ff fef6 	bl	80022ae <I2C_WaitOnFlagUntilTimeout>
 80024c2:	b118      	cbz	r0, 80024cc <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 80024c4:	2001      	movs	r0, #1
}
 80024c6:	b003      	add	sp, #12
 80024c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024cc:	2321      	movs	r3, #33	; 0x21
 80024ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024d2:	2310      	movs	r3, #16
 80024d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80024da:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80024e0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e4:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80024e6:	6360      	str	r0, [r4, #52]	; 0x34
 80024e8:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <HAL_I2C_Master_Transmit+0x120>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ea:	d926      	bls.n	800253a <HAL_I2C_Master_Transmit+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ec:	22ff      	movs	r2, #255	; 0xff
 80024ee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024f0:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024f6:	4631      	mov	r1, r6
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7ff fe23 	bl	8002144 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002500:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8002502:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002504:	462a      	mov	r2, r5
 8002506:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8002508:	b9fb      	cbnz	r3, 800254a <HAL_I2C_Master_Transmit+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	f7ff feab 	bl	8002264 <I2C_WaitOnSTOPFlagUntilTimeout>
 800250e:	2800      	cmp	r0, #0
 8002510:	d1d8      	bne.n	80024c4 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	2120      	movs	r1, #32
 8002516:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800251e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002522:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002530:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002534:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002538:	e7c5      	b.n	80024c6 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 800253a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800253c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800253e:	b292      	uxth	r2, r2
 8002540:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	e7d5      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x6e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254a:	f7ff feda 	bl	8002302 <I2C_WaitOnTXISFlagUntilTimeout>
 800254e:	2800      	cmp	r0, #0
 8002550:	d1b8      	bne.n	80024c4 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	6262      	str	r2, [r4, #36]	; 0x24
 8002558:	6822      	ldr	r2, [r4, #0]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800255e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002560:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002562:	3b01      	subs	r3, #1
 8002564:	b29b      	uxth	r3, r3
 8002566:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002568:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800256a:	3a01      	subs	r2, #1
 800256c:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800256e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002570:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0c3      	beq.n	80024fe <HAL_I2C_Master_Transmit+0x76>
 8002576:	2a00      	cmp	r2, #0
 8002578:	d1c1      	bne.n	80024fe <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800257a:	9500      	str	r5, [sp, #0]
 800257c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	4620      	mov	r0, r4
 8002582:	f7ff fe94 	bl	80022ae <I2C_WaitOnFlagUntilTimeout>
 8002586:	2800      	cmp	r0, #0
 8002588:	d19c      	bne.n	80024c4 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800258c:	2bff      	cmp	r3, #255	; 0xff
 800258e:	d903      	bls.n	8002598 <HAL_I2C_Master_Transmit+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002590:	22ff      	movs	r2, #255	; 0xff
 8002592:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002594:	9000      	str	r0, [sp, #0]
 8002596:	e7ac      	b.n	80024f2 <HAL_I2C_Master_Transmit+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8002598:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800259a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800259c:	b292      	uxth	r2, r2
 800259e:	8522      	strh	r2, [r4, #40]	; 0x28
 80025a0:	e7cf      	b.n	8002542 <HAL_I2C_Master_Transmit+0xba>
    return HAL_BUSY;
 80025a2:	2002      	movs	r0, #2
 80025a4:	e78f      	b.n	80024c6 <HAL_I2C_Master_Transmit+0x3e>
 80025a6:	bf00      	nop
 80025a8:	80002000 	.word	0x80002000

080025ac <HAL_I2C_Master_Receive>:
{
 80025ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80025b0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025b6:	2b20      	cmp	r3, #32
{
 80025b8:	4604      	mov	r4, r0
 80025ba:	460e      	mov	r6, r1
 80025bc:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025be:	f040 8082 	bne.w	80026c6 <HAL_I2C_Master_Receive+0x11a>
    __HAL_LOCK(hi2c);
 80025c2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d07d      	beq.n	80026c6 <HAL_I2C_Master_Receive+0x11a>
 80025ca:	2701      	movs	r7, #1
 80025cc:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80025d0:	f7fe fc5a 	bl	8000e88 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d4:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80025d6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d8:	9000      	str	r0, [sp, #0]
 80025da:	463a      	mov	r2, r7
 80025dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff fe64 	bl	80022ae <I2C_WaitOnFlagUntilTimeout>
 80025e6:	b118      	cbz	r0, 80025f0 <HAL_I2C_Master_Receive+0x44>
      return HAL_ERROR;
 80025e8:	2001      	movs	r0, #1
}
 80025ea:	b003      	add	sp, #12
 80025ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f0:	2322      	movs	r3, #34	; 0x22
 80025f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025f6:	2310      	movs	r3, #16
 80025f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80025fe:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002602:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002604:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002608:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800260a:	6360      	str	r0, [r4, #52]	; 0x34
 800260c:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_I2C_Master_Receive+0x120>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800260e:	d926      	bls.n	800265e <HAL_I2C_Master_Receive+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002610:	22ff      	movs	r2, #255	; 0xff
 8002612:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002614:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002616:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800261a:	4631      	mov	r1, r6
 800261c:	4620      	mov	r0, r4
 800261e:	f7ff fd91 	bl	8002144 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002622:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002624:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8002626:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002628:	462a      	mov	r2, r5
 800262a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800262c:	b9fb      	cbnz	r3, 800266e <HAL_I2C_Master_Receive+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262e:	f7ff fe19 	bl	8002264 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002632:	2800      	cmp	r0, #0
 8002634:	d1d8      	bne.n	80025e8 <HAL_I2C_Master_Receive+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	2120      	movs	r1, #32
 800263a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002642:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002646:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002650:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002654:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002658:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800265c:	e7c5      	b.n	80025ea <HAL_I2C_Master_Receive+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 800265e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002660:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002662:	b292      	uxth	r2, r2
 8002664:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	e7d5      	b.n	800261a <HAL_I2C_Master_Receive+0x6e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266e:	f7ff fdba 	bl	80021e6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002672:	2800      	cmp	r0, #0
 8002674:	d1b8      	bne.n	80025e8 <HAL_I2C_Master_Receive+0x3c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800267c:	1c59      	adds	r1, r3, #1
 800267e:	6261      	str	r1, [r4, #36]	; 0x24
 8002680:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002682:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002684:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002686:	3b01      	subs	r3, #1
 8002688:	b29b      	uxth	r3, r3
 800268a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800268c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800268e:	3a01      	subs	r2, #1
 8002690:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002692:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002694:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0c3      	beq.n	8002622 <HAL_I2C_Master_Receive+0x76>
 800269a:	2a00      	cmp	r2, #0
 800269c:	d1c1      	bne.n	8002622 <HAL_I2C_Master_Receive+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800269e:	9500      	str	r5, [sp, #0]
 80026a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7ff fe02 	bl	80022ae <I2C_WaitOnFlagUntilTimeout>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d19c      	bne.n	80025e8 <HAL_I2C_Master_Receive+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026b0:	2bff      	cmp	r3, #255	; 0xff
 80026b2:	d903      	bls.n	80026bc <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b4:	22ff      	movs	r2, #255	; 0xff
 80026b6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026b8:	9000      	str	r0, [sp, #0]
 80026ba:	e7ac      	b.n	8002616 <HAL_I2C_Master_Receive+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 80026bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026be:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80026c0:	b292      	uxth	r2, r2
 80026c2:	8522      	strh	r2, [r4, #40]	; 0x28
 80026c4:	e7cf      	b.n	8002666 <HAL_I2C_Master_Receive+0xba>
    return HAL_BUSY;
 80026c6:	2002      	movs	r0, #2
 80026c8:	e78f      	b.n	80025ea <HAL_I2C_Master_Receive+0x3e>
 80026ca:	bf00      	nop
 80026cc:	80002400 	.word	0x80002400

080026d0 <HAL_I2C_Mem_Read>:
{
 80026d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d4:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80026da:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80026dc:	2b20      	cmp	r3, #32
{
 80026de:	4604      	mov	r4, r0
 80026e0:	460f      	mov	r7, r1
 80026e2:	9203      	str	r2, [sp, #12]
 80026e4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80026e8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ec:	f040 80a5 	bne.w	800283a <HAL_I2C_Mem_Read+0x16a>
    if ((pData == NULL) || (Size == 0U))
 80026f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026f2:	b113      	cbz	r3, 80026fa <HAL_I2C_Mem_Read+0x2a>
 80026f4:	f1ba 0f00 	cmp.w	sl, #0
 80026f8:	d106      	bne.n	8002708 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026fe:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002700:	2001      	movs	r0, #1
}
 8002702:	b005      	add	sp, #20
 8002704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002708:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800270c:	2b01      	cmp	r3, #1
 800270e:	f000 8094 	beq.w	800283a <HAL_I2C_Mem_Read+0x16a>
 8002712:	2501      	movs	r5, #1
 8002714:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002718:	f7fe fbb6 	bl	8000e88 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800271c:	2319      	movs	r3, #25
 800271e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002720:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002722:	462a      	mov	r2, r5
 8002724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff fdc0 	bl	80022ae <I2C_WaitOnFlagUntilTimeout>
 800272e:	4681      	mov	r9, r0
 8002730:	2800      	cmp	r0, #0
 8002732:	d1e5      	bne.n	8002700 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002734:	2322      	movs	r3, #34	; 0x22
 8002736:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800273a:	2340      	movs	r3, #64	; 0x40
 800273c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002742:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002744:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8002746:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002748:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800274c:	e9cd 8600 	strd	r8, r6, [sp]
 8002750:	465b      	mov	r3, fp
 8002752:	9a03      	ldr	r2, [sp, #12]
 8002754:	4639      	mov	r1, r7
 8002756:	4620      	mov	r0, r4
 8002758:	f7ff fdfa 	bl	8002350 <I2C_RequestMemoryRead>
 800275c:	b110      	cbz	r0, 8002764 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 800275e:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002762:	e7cd      	b.n	8002700 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002764:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002766:	2bff      	cmp	r3, #255	; 0xff
 8002768:	4b35      	ldr	r3, [pc, #212]	; (8002840 <HAL_I2C_Mem_Read+0x170>)
 800276a:	d956      	bls.n	800281a <HAL_I2C_Mem_Read+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800276c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800276e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002770:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002772:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002776:	4639      	mov	r1, r7
 8002778:	4620      	mov	r0, r4
 800277a:	f7ff fce3 	bl	8002144 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800277e:	9600      	str	r6, [sp, #0]
 8002780:	4643      	mov	r3, r8
 8002782:	2200      	movs	r2, #0
 8002784:	2104      	movs	r1, #4
 8002786:	4620      	mov	r0, r4
 8002788:	f7ff fd91 	bl	80022ae <I2C_WaitOnFlagUntilTimeout>
 800278c:	2800      	cmp	r0, #0
 800278e:	d1b7      	bne.n	8002700 <HAL_I2C_Mem_Read+0x30>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002796:	1c59      	adds	r1, r3, #1
 8002798:	6261      	str	r1, [r4, #36]	; 0x24
 800279a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800279c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800279e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027a8:	3a01      	subs	r2, #1
 80027aa:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ac:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80027ae:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027b0:	b1a3      	cbz	r3, 80027dc <HAL_I2C_Mem_Read+0x10c>
 80027b2:	b99a      	cbnz	r2, 80027dc <HAL_I2C_Mem_Read+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027b4:	9600      	str	r6, [sp, #0]
 80027b6:	4643      	mov	r3, r8
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7ff fd77 	bl	80022ae <I2C_WaitOnFlagUntilTimeout>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d19d      	bne.n	8002700 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027c6:	2bff      	cmp	r3, #255	; 0xff
 80027c8:	d92f      	bls.n	800282a <HAL_I2C_Mem_Read+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ca:	22ff      	movs	r2, #255	; 0xff
 80027cc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027ce:	9000      	str	r0, [sp, #0]
 80027d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027d4:	4639      	mov	r1, r7
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff fcb4 	bl	8002144 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80027dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1cc      	bne.n	800277e <HAL_I2C_Mem_Read+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e4:	4632      	mov	r2, r6
 80027e6:	4641      	mov	r1, r8
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7ff fd3b 	bl	8002264 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d186      	bne.n	8002700 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	2120      	movs	r1, #32
 80027f6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80027fe:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002802:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800280c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002810:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002814:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002818:	e773      	b.n	8002702 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800281a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800281c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800281e:	b292      	uxth	r2, r2
 8002820:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	e7a5      	b.n	8002776 <HAL_I2C_Mem_Read+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 800282a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800282c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800282e:	b292      	uxth	r2, r2
 8002830:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	e7cc      	b.n	80027d4 <HAL_I2C_Mem_Read+0x104>
    return HAL_BUSY;
 800283a:	2002      	movs	r0, #2
 800283c:	e761      	b.n	8002702 <HAL_I2C_Mem_Read+0x32>
 800283e:	bf00      	nop
 8002840:	80002400 	.word	0x80002400

08002844 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002844:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	2a20      	cmp	r2, #32
{
 800284c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800284e:	d11d      	bne.n	800288c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002850:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002854:	2b01      	cmp	r3, #1
 8002856:	d019      	beq.n	800288c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002858:	2324      	movs	r3, #36	; 0x24
 800285a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800285e:	6803      	ldr	r3, [r0, #0]
 8002860:	681c      	ldr	r4, [r3, #0]
 8002862:	f024 0401 	bic.w	r4, r4, #1
 8002866:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002868:	681c      	ldr	r4, [r3, #0]
 800286a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800286e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002870:	681c      	ldr	r4, [r3, #0]
 8002872:	4321      	orrs	r1, r4
 8002874:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002876:	6819      	ldr	r1, [r3, #0]
 8002878:	f041 0101 	orr.w	r1, r1, #1
 800287c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002880:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002884:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002888:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800288a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800288c:	2002      	movs	r0, #2
 800288e:	e7fc      	b.n	800288a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08002890 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002890:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002892:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002896:	b2e4      	uxtb	r4, r4
 8002898:	2c20      	cmp	r4, #32
 800289a:	d11c      	bne.n	80028d6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d018      	beq.n	80028d6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028a4:	2324      	movs	r3, #36	; 0x24
 80028a6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028aa:	6803      	ldr	r3, [r0, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028b4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028b6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028ba:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028be:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80028ce:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80028d2:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80028d4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80028d6:	2002      	movs	r0, #2
 80028d8:	e7fc      	b.n	80028d4 <HAL_I2CEx_ConfigDigitalFilter+0x44>

080028da <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80028da:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 80028dc:	4604      	mov	r4, r0
 80028de:	b300      	cbz	r0, 8002922 <HAL_IWDG_Init+0x48>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80028e0:	6803      	ldr	r3, [r0, #0]
 80028e2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80028e6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80028e8:	f245 5255 	movw	r2, #21845	; 0x5555
 80028ec:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80028ee:	6842      	ldr	r2, [r0, #4]
 80028f0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80028f2:	6882      	ldr	r2, [r0, #8]
 80028f4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80028f6:	f7fe fac7 	bl	8000e88 <HAL_GetTick>
 80028fa:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	68d8      	ldr	r0, [r3, #12]
 8002900:	b940      	cbnz	r0, 8002914 <HAL_IWDG_Init+0x3a>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002902:	68e2      	ldr	r2, [r4, #12]
 8002904:	6919      	ldr	r1, [r3, #16]
 8002906:	4291      	cmp	r1, r2
    hiwdg->Instance->WINR = hiwdg->Init.Window;
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002908:	bf0a      	itet	eq
 800290a:	f64a 22aa 	movweq	r2, #43690	; 0xaaaa
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800290e:	611a      	strne	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002910:	601a      	streq	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002912:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002914:	f7fe fab8 	bl	8000e88 <HAL_GetTick>
 8002918:	1b40      	subs	r0, r0, r5
 800291a:	2830      	cmp	r0, #48	; 0x30
 800291c:	d9ee      	bls.n	80028fc <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 800291e:	2003      	movs	r0, #3
 8002920:	e7f7      	b.n	8002912 <HAL_IWDG_Init+0x38>
    return HAL_ERROR;
 8002922:	2001      	movs	r0, #1
 8002924:	e7f5      	b.n	8002912 <HAL_IWDG_Init+0x38>
	...

08002928 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002928:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcfgr = 0;

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 800292a:	4604      	mov	r4, r0
 800292c:	2800      	cmp	r0, #0
 800292e:	d046      	beq.n	80029be <HAL_LPTIM_Init+0x96>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 8002930:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8002934:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002938:	b91b      	cbnz	r3, 8002942 <HAL_LPTIM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800293a:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800293e:	f007 fdb9 	bl	800a4b4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002942:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002944:	6820      	ldr	r0, [r4, #0]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8002946:	6865      	ldr	r5, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002948:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  tmpcfgr = hlptim->Instance->CFGR;
 800294c:	68c2      	ldr	r2, [r0, #12]
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800294e:	6961      	ldr	r1, [r4, #20]
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002950:	4e1c      	ldr	r6, [pc, #112]	; (80029c4 <HAL_LPTIM_Init+0x9c>)
  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8002952:	2d01      	cmp	r5, #1
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8002954:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002958:	bf08      	it	eq
 800295a:	f022 021e 	biceq.w	r2, r2, #30
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800295e:	4299      	cmp	r1, r3
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002960:	bf1c      	itt	ne
 8002962:	f422 4260 	bicne.w	r2, r2, #57344	; 0xe000
 8002966:	f022 02c0 	bicne.w	r2, r2, #192	; 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800296a:	4016      	ands	r6, r2
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800296c:	68a2      	ldr	r2, [r4, #8]
 800296e:	ea45 0302 	orr.w	r3, r5, r2
              hlptim->Init.Clock.Prescaler |
 8002972:	6a22      	ldr	r2, [r4, #32]
 8002974:	4313      	orrs	r3, r2
              hlptim->Init.OutputPolarity  |
 8002976:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002978:	4313      	orrs	r3, r2
              hlptim->Init.UpdateMode      |
 800297a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              hlptim->Init.CounterSource);

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 800297c:	2d01      	cmp	r5, #1
              hlptim->Init.UpdateMode      |
 800297e:	ea43 0302 	orr.w	r3, r3, r2
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8002982:	bf08      	it	eq
 8002984:	e9d4 2503 	ldrdeq	r2, r5, [r4, #12]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002988:	ea43 0306 	orr.w	r3, r3, r6
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800298c:	bf04      	itt	eq
 800298e:	432a      	orreq	r2, r5
 8002990:	4313      	orreq	r3, r2
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8002992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002996:	4291      	cmp	r1, r2
 8002998:	d004      	beq.n	80029a4 <HAL_LPTIM_Init+0x7c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800299a:	69a2      	ldr	r2, [r4, #24]
 800299c:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 800299e:	69e2      	ldr	r2, [r4, #28]
 80029a0:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80029a2:	430b      	orrs	r3, r1

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 80029a4:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <HAL_LPTIM_Init+0xa0>)
  hlptim->Instance->CFGR = tmpcfgr;
 80029a6:	60c3      	str	r3, [r0, #12]
  if(hlptim->Instance == LPTIM1)
 80029a8:	4290      	cmp	r0, r2
 80029aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80029ac:	bf04      	itt	eq
 80029ae:	6b22      	ldreq	r2, [r4, #48]	; 0x30
 80029b0:	4313      	orreq	r3, r2
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80029b2:	6203      	str	r3, [r0, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80029ba:	2000      	movs	r0, #0
}
 80029bc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80029be:	2001      	movs	r0, #1
 80029c0:	e7fc      	b.n	80029bc <HAL_LPTIM_Init+0x94>
 80029c2:	bf00      	nop
 80029c4:	ff19f1fe 	.word	0xff19f1fe
 80029c8:	40007c00 	.word	0x40007c00

080029cc <HAL_LPTIM_TimeOut_Start_IT>:
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State= HAL_LPTIM_STATE_BUSY;
 80029cc:	2302      	movs	r3, #2
{
 80029ce:	b510      	push	{r4, lr}
  hlptim->State= HAL_LPTIM_STATE_BUSY;
 80029d0:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 80029d4:	6803      	ldr	r3, [r0, #0]
 80029d6:	68dc      	ldr	r4, [r3, #12]
 80029d8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80029dc:	60dc      	str	r4, [r3, #12]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 80029de:	689c      	ldr	r4, [r3, #8]
 80029e0:	f044 0401 	orr.w	r4, r4, #1
 80029e4:	609c      	str	r4, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80029e6:	691c      	ldr	r4, [r3, #16]
 80029e8:	f044 0401 	orr.w	r4, r4, #1
 80029ec:	611c      	str	r4, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80029ee:	6199      	str	r1, [r3, #24]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 80029f0:	615a      	str	r2, [r3, #20]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	f042 0204 	orr.w	r2, r2, #4
 80029f8:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State= HAL_LPTIM_STATE_READY;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
}
 8002a00:	2000      	movs	r0, #0
 8002a02:	bd10      	pop	{r4, pc}

08002a04 <HAL_LPTIM_TimeOut_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State= HAL_LPTIM_STATE_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002a0a:	6803      	ldr	r3, [r0, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	611a      	str	r2, [r3, #16]

  /* Reset TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Disable Compare match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	609a      	str	r2, [r3, #8]

  /* Change the TIM state*/
  hlptim->State= HAL_LPTIM_STATE_READY;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
}
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	4770      	bx	lr

08002a2e <HAL_LPTIM_CompareMatchCallback>:
 8002a2e:	4770      	bx	lr

08002a30 <HAL_LPTIM_AutoReloadMatchCallback>:
 8002a30:	4770      	bx	lr

08002a32 <HAL_LPTIM_TriggerCallback>:
 8002a32:	4770      	bx	lr

08002a34 <HAL_LPTIM_CompareWriteCallback>:
 8002a34:	4770      	bx	lr

08002a36 <HAL_LPTIM_AutoReloadWriteCallback>:
 8002a36:	4770      	bx	lr

08002a38 <HAL_LPTIM_DirectionUpCallback>:
 8002a38:	4770      	bx	lr

08002a3a <HAL_LPTIM_DirectionDownCallback>:
 8002a3a:	4770      	bx	lr

08002a3c <HAL_LPTIM_IRQHandler>:
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
  /* Compare match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002a3c:	6803      	ldr	r3, [r0, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	07d1      	lsls	r1, r2, #31
{
 8002a42:	b510      	push	{r4, lr}
 8002a44:	4604      	mov	r4, r0
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002a46:	d506      	bpl.n	8002a56 <HAL_LPTIM_IRQHandler+0x1a>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	07d2      	lsls	r2, r2, #31
 8002a4c:	d503      	bpl.n	8002a56 <HAL_LPTIM_IRQHandler+0x1a>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002a4e:	2201      	movs	r2, #1
 8002a50:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002a52:	f7ff ffec 	bl	8002a2e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	0790      	lsls	r0, r2, #30
 8002a5c:	d507      	bpl.n	8002a6e <HAL_LPTIM_IRQHandler+0x32>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	0791      	lsls	r1, r2, #30
 8002a62:	d504      	bpl.n	8002a6e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8002a64:	2202      	movs	r2, #2
 8002a66:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7ff ffe1 	bl	8002a30 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	0752      	lsls	r2, r2, #29
 8002a74:	d507      	bpl.n	8002a86 <HAL_LPTIM_IRQHandler+0x4a>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	0750      	lsls	r0, r2, #29
 8002a7a:	d504      	bpl.n	8002a86 <HAL_LPTIM_IRQHandler+0x4a>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8002a80:	4620      	mov	r0, r4
 8002a82:	f7ff ffd6 	bl	8002a32 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	0711      	lsls	r1, r2, #28
 8002a8c:	d507      	bpl.n	8002a9e <HAL_LPTIM_IRQHandler+0x62>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	0712      	lsls	r2, r2, #28
 8002a92:	d504      	bpl.n	8002a9e <HAL_LPTIM_IRQHandler+0x62>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002a94:	2208      	movs	r2, #8
 8002a96:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f7ff ffcb 	bl	8002a34 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	06d0      	lsls	r0, r2, #27
 8002aa4:	d507      	bpl.n	8002ab6 <HAL_LPTIM_IRQHandler+0x7a>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	06d1      	lsls	r1, r2, #27
 8002aaa:	d504      	bpl.n	8002ab6 <HAL_LPTIM_IRQHandler+0x7a>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002aac:	2210      	movs	r2, #16
 8002aae:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f7ff ffc0 	bl	8002a36 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	0692      	lsls	r2, r2, #26
 8002abc:	d507      	bpl.n	8002ace <HAL_LPTIM_IRQHandler+0x92>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	0690      	lsls	r0, r2, #26
 8002ac2:	d504      	bpl.n	8002ace <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7ff ffb5 	bl	8002a38 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	0651      	lsls	r1, r2, #25
 8002ad4:	d507      	bpl.n	8002ae6 <HAL_LPTIM_IRQHandler+0xaa>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	0652      	lsls	r2, r2, #25
 8002ada:	d504      	bpl.n	8002ae6 <HAL_LPTIM_IRQHandler+0xaa>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002adc:	2240      	movs	r2, #64	; 0x40
 8002ade:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f7ff ffaa 	bl	8002a3a <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae6:	bd10      	pop	{r4, pc}

08002ae8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8002ae8:	4a02      	ldr	r2, [pc, #8]	; (8002af4 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002aea:	6813      	ldr	r3, [r2, #0]
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	6013      	str	r3, [r2, #0]
}
 8002af2:	4770      	bx	lr
 8002af4:	40007000 	.word	0x40007000

08002af8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002af8:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <HAL_PWREx_GetVoltageRange+0xc>)
 8002afa:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8002afc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40007000 	.word	0x40007000

08002b08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b10:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b14:	d11a      	bne.n	8002b4c <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b16:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002b1a:	d013      	beq.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1c:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8002b1e:	4912      	ldr	r1, [pc, #72]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b20:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b28:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8002b2a:	4a10      	ldr	r2, [pc, #64]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	fbb2 f1f1 	udiv	r1, r2, r1
 8002b32:	2232      	movs	r2, #50	; 0x32
 8002b34:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8002b36:	b112      	cbz	r2, 8002b3e <HAL_PWREx_ControlVoltageScaling+0x36>
 8002b38:	6959      	ldr	r1, [r3, #20]
 8002b3a:	0549      	lsls	r1, r1, #21
 8002b3c:	d404      	bmi.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	055b      	lsls	r3, r3, #21
 8002b42:	d40d      	bmi.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8002b44:	2000      	movs	r0, #0
 8002b46:	4770      	bx	lr
        wait_loop_index--;
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	e7f4      	b.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b4c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b50:	bf1f      	itttt	ne
 8002b52:	681a      	ldrne	r2, [r3, #0]
 8002b54:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8002b58:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8002b5c:	601a      	strne	r2, [r3, #0]
 8002b5e:	e7f1      	b.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8002b60:	2003      	movs	r0, #3
}  
 8002b62:	4770      	bx	lr
 8002b64:	40007000 	.word	0x40007000
 8002b68:	000f4240 	.word	0x000f4240
 8002b6c:	20000024 	.word	0x20000024

08002b70 <HAL_PWREx_EnterSTOP2Mode>:
{
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8002b70:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <HAL_PWREx_EnterSTOP2Mode+0x30>)
 8002b72:	6813      	ldr	r3, [r2, #0]
 8002b74:	f023 0307 	bic.w	r3, r3, #7
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8002b80:	691a      	ldr	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002b82:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b84:	f042 0204 	orr.w	r2, r2, #4
 8002b88:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002b8a:	d105      	bne.n	8002b98 <HAL_PWREx_EnterSTOP2Mode+0x28>
  __ASM volatile ("wfi");
 8002b8c:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	f022 0204 	bic.w	r2, r2, #4
 8002b94:	611a      	str	r2, [r3, #16]
}
 8002b96:	4770      	bx	lr
  __ASM volatile ("sev");
 8002b98:	bf40      	sev
  __ASM volatile ("wfe");
 8002b9a:	bf20      	wfe
 8002b9c:	bf20      	wfe
 8002b9e:	e7f6      	b.n	8002b8e <HAL_PWREx_EnterSTOP2Mode+0x1e>
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002baa:	4d1e      	ldr	r5, [pc, #120]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002bac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002bae:	00da      	lsls	r2, r3, #3
{
 8002bb0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bb2:	d518      	bpl.n	8002be6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bb4:	f7ff ffa0 	bl	8002af8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002bbc:	d123      	bne.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bbe:	2c80      	cmp	r4, #128	; 0x80
 8002bc0:	d929      	bls.n	8002c16 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bc2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bc4:	bf8c      	ite	hi
 8002bc6:	2002      	movhi	r0, #2
 8002bc8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bca:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002bcc:	6813      	ldr	r3, [r2, #0]
 8002bce:	f023 0307 	bic.w	r3, r3, #7
 8002bd2:	4303      	orrs	r3, r0
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bd6:	6813      	ldr	r3, [r2, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002bdc:	1a18      	subs	r0, r3, r0
 8002bde:	bf18      	it	ne
 8002be0:	2001      	movne	r0, #1
 8002be2:	b003      	add	sp, #12
 8002be4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	65ab      	str	r3, [r5, #88]	; 0x58
 8002bee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002bf8:	f7ff ff7e 	bl	8002af8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c02:	65ab      	str	r3, [r5, #88]	; 0x58
 8002c04:	e7d8      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002c06:	2c80      	cmp	r4, #128	; 0x80
 8002c08:	d807      	bhi.n	8002c1a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002c0a:	d008      	beq.n	8002c1e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002c0c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002c10:	4258      	negs	r0, r3
 8002c12:	4158      	adcs	r0, r3
 8002c14:	e7d9      	b.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c16:	2000      	movs	r0, #0
 8002c18:	e7d7      	b.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c1a:	2003      	movs	r0, #3
 8002c1c:	e7d5      	b.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c1e:	2002      	movs	r0, #2
 8002c20:	e7d3      	b.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40022000 	.word	0x40022000

08002c2c <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8002c2c:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	f012 0f0c 	tst.w	r2, #12
{
 8002c34:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8002c36:	d009      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8002c3e:	2a0c      	cmp	r2, #12
 8002c40:	d12d      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	f002 0203 	and.w	r2, r2, #3
 8002c48:	2a01      	cmp	r2, #1
 8002c4a:	d128      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8002c4c:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002c4e:	4928      	ldr	r1, [pc, #160]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8002c50:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c52:	bf55      	itete	pl
 8002c54:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c58:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c5a:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c5e:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8002c62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8002c66:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8002c68:	f011 0f0c 	tst.w	r1, #12
 8002c6c:	bf0c      	ite	eq
 8002c6e:	4610      	moveq	r0, r2
 8002c70:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c72:	6899      	ldr	r1, [r3, #8]
 8002c74:	f001 010c 	and.w	r1, r1, #12
 8002c78:	290c      	cmp	r1, #12
 8002c7a:	d130      	bne.n	8002cde <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c7c:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c7e:	68d8      	ldr	r0, [r3, #12]
 8002c80:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8002c84:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c86:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8002c8a:	2802      	cmp	r0, #2
 8002c8c:	d019      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x96>
 8002c8e:	2803      	cmp	r0, #3
 8002c90:	d026      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c92:	fbb2 f2f1 	udiv	r2, r2, r1
 8002c96:	68d8      	ldr	r0, [r3, #12]
 8002c98:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002c9c:	e017      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	f002 020c 	and.w	r2, r2, #12
 8002ca4:	2a04      	cmp	r2, #4
 8002ca6:	d007      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	f002 020c 	and.w	r2, r2, #12
 8002cae:	2a08      	cmp	r2, #8
 8002cb0:	d104      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8002cb2:	4810      	ldr	r0, [pc, #64]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	e7dc      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8002cb8:	480f      	ldr	r0, [pc, #60]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cba:	e7fb      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8002cbc:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	e7d7      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	480c      	ldr	r0, [pc, #48]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cc6:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cca:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002cd4:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cd6:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cd8:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8002cda:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002cde:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ce4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002ce8:	e7ef      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x9e>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	0800fa3c 	.word	0x0800fa3c
 8002cf4:	007a1200 	.word	0x007a1200
 8002cf8:	00f42400 	.word	0x00f42400

08002cfc <HAL_RCC_OscConfig>:
{
 8002cfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(RCC_OscInitStruct == NULL)
 8002d00:	4605      	mov	r5, r0
 8002d02:	b908      	cbnz	r0, 8002d08 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8002d04:	2001      	movs	r0, #1
 8002d06:	e08d      	b.n	8002e24 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d08:	6803      	ldr	r3, [r0, #0]
 8002d0a:	06d8      	lsls	r0, r3, #27
 8002d0c:	d538      	bpl.n	8002d80 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8002d0e:	4cab      	ldr	r4, [pc, #684]	; (8002fbc <HAL_RCC_OscConfig+0x2c0>)
 8002d10:	68a3      	ldr	r3, [r4, #8]
 8002d12:	f013 0f0c 	tst.w	r3, #12
 8002d16:	d161      	bne.n	8002ddc <HAL_RCC_OscConfig+0xe0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	0799      	lsls	r1, r3, #30
 8002d1c:	d502      	bpl.n	8002d24 <HAL_RCC_OscConfig+0x28>
 8002d1e:	69ab      	ldr	r3, [r5, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ef      	beq.n	8002d04 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	6a28      	ldr	r0, [r5, #32]
 8002d28:	071a      	lsls	r2, r3, #28
 8002d2a:	bf56      	itet	pl
 8002d2c:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002d30:	6823      	ldrmi	r3, [r4, #0]
 8002d32:	091b      	lsrpl	r3, r3, #4
 8002d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d38:	4298      	cmp	r0, r3
 8002d3a:	d93a      	bls.n	8002db2 <HAL_RCC_OscConfig+0xb6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d3c:	f7ff ff34 	bl	8002ba8 <RCC_SetFlashLatencyFromMSIRange>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d1df      	bne.n	8002d04 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6023      	str	r3, [r4, #0]
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	6a2a      	ldr	r2, [r5, #32]
 8002d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d54:	4313      	orrs	r3, r2
 8002d56:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d58:	6863      	ldr	r3, [r4, #4]
 8002d5a:	69ea      	ldr	r2, [r5, #28]
 8002d5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d64:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d66:	f7ff ff61 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002d6a:	68a3      	ldr	r3, [r4, #8]
 8002d6c:	4a94      	ldr	r2, [pc, #592]	; (8002fc0 <HAL_RCC_OscConfig+0x2c4>)
 8002d6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	40d8      	lsrs	r0, r3
 8002d76:	4b93      	ldr	r3, [pc, #588]	; (8002fc4 <HAL_RCC_OscConfig+0x2c8>)
 8002d78:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fe f856 	bl	8000e2c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	07d8      	lsls	r0, r3, #31
 8002d84:	d461      	bmi.n	8002e4a <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d86:	682b      	ldr	r3, [r5, #0]
 8002d88:	0799      	lsls	r1, r3, #30
 8002d8a:	f100 80a9 	bmi.w	8002ee0 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	682b      	ldr	r3, [r5, #0]
 8002d90:	071a      	lsls	r2, r3, #28
 8002d92:	f100 80e7 	bmi.w	8002f64 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d96:	682b      	ldr	r3, [r5, #0]
 8002d98:	075b      	lsls	r3, r3, #29
 8002d9a:	f100 8115 	bmi.w	8002fc8 <HAL_RCC_OscConfig+0x2cc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d9e:	682b      	ldr	r3, [r5, #0]
 8002da0:	069a      	lsls	r2, r3, #26
 8002da2:	f100 817c 	bmi.w	800309e <HAL_RCC_OscConfig+0x3a2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002da6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002da8:	2a00      	cmp	r2, #0
 8002daa:	f040 81a3 	bne.w	80030f4 <HAL_RCC_OscConfig+0x3f8>
  return HAL_OK;
 8002dae:	2000      	movs	r0, #0
 8002db0:	e038      	b.n	8002e24 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	f043 0308 	orr.w	r3, r3, #8
 8002db8:	6023      	str	r3, [r4, #0]
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc4:	6863      	ldr	r3, [r4, #4]
 8002dc6:	69ea      	ldr	r2, [r5, #28]
 8002dc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002dd0:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dd2:	f7ff fee9 	bl	8002ba8 <RCC_SetFlashLatencyFromMSIRange>
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	d0c5      	beq.n	8002d66 <HAL_RCC_OscConfig+0x6a>
 8002dda:	e793      	b.n	8002d04 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ddc:	69ab      	ldr	r3, [r5, #24]
 8002dde:	b323      	cbz	r3, 8002e2a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002de8:	f7fe f84e 	bl	8000e88 <HAL_GetTick>
 8002dec:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	079b      	lsls	r3, r3, #30
 8002df2:	d511      	bpl.n	8002e18 <HAL_RCC_OscConfig+0x11c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	f043 0308 	orr.w	r3, r3, #8
 8002dfa:	6023      	str	r3, [r4, #0]
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	6a2a      	ldr	r2, [r5, #32]
 8002e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e04:	4313      	orrs	r3, r2
 8002e06:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e08:	6863      	ldr	r3, [r4, #4]
 8002e0a:	69ea      	ldr	r2, [r5, #28]
 8002e0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e14:	6063      	str	r3, [r4, #4]
 8002e16:	e7b3      	b.n	8002d80 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e18:	f7fe f836 	bl	8000e88 <HAL_GetTick>
 8002e1c:	1b80      	subs	r0, r0, r6
 8002e1e:	2802      	cmp	r0, #2
 8002e20:	d9e5      	bls.n	8002dee <HAL_RCC_OscConfig+0xf2>
            return HAL_TIMEOUT;
 8002e22:	2003      	movs	r0, #3
}
 8002e24:	b002      	add	sp, #8
 8002e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e32:	f7fe f829 	bl	8000e88 <HAL_GetTick>
 8002e36:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	079f      	lsls	r7, r3, #30
 8002e3c:	d5a0      	bpl.n	8002d80 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e3e:	f7fe f823 	bl	8000e88 <HAL_GetTick>
 8002e42:	1b80      	subs	r0, r0, r6
 8002e44:	2802      	cmp	r0, #2
 8002e46:	d9f7      	bls.n	8002e38 <HAL_RCC_OscConfig+0x13c>
 8002e48:	e7eb      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8002e4a:	4c5c      	ldr	r4, [pc, #368]	; (8002fbc <HAL_RCC_OscConfig+0x2c0>)
 8002e4c:	68a3      	ldr	r3, [r4, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e56:	68a3      	ldr	r3, [r4, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	d10b      	bne.n	8002e78 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e60:	68e3      	ldr	r3, [r4, #12]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d106      	bne.n	8002e78 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	039a      	lsls	r2, r3, #14
 8002e6e:	d58a      	bpl.n	8002d86 <HAL_RCC_OscConfig+0x8a>
 8002e70:	686b      	ldr	r3, [r5, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d187      	bne.n	8002d86 <HAL_RCC_OscConfig+0x8a>
 8002e76:	e745      	b.n	8002d04 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e78:	686b      	ldr	r3, [r5, #4]
 8002e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7e:	d110      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x1a6>
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e86:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e88:	f7fd fffe 	bl	8000e88 <HAL_GetTick>
 8002e8c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	039b      	lsls	r3, r3, #14
 8002e92:	f53f af78 	bmi.w	8002d86 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e96:	f7fd fff7 	bl	8000e88 <HAL_GetTick>
 8002e9a:	1b80      	subs	r0, r0, r6
 8002e9c:	2864      	cmp	r0, #100	; 0x64
 8002e9e:	d9f6      	bls.n	8002e8e <HAL_RCC_OscConfig+0x192>
 8002ea0:	e7bf      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea6:	d104      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x1b6>
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eae:	6023      	str	r3, [r4, #0]
 8002eb0:	e7e6      	b.n	8002e80 <HAL_RCC_OscConfig+0x184>
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002eb8:	6022      	str	r2, [r4, #0]
 8002eba:	6822      	ldr	r2, [r4, #0]
 8002ebc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ec0:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8002ec6:	f7fd ffdf 	bl	8000e88 <HAL_GetTick>
 8002eca:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	039f      	lsls	r7, r3, #14
 8002ed0:	f57f af59 	bpl.w	8002d86 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fd ffd8 	bl	8000e88 <HAL_GetTick>
 8002ed8:	1b80      	subs	r0, r0, r6
 8002eda:	2864      	cmp	r0, #100	; 0x64
 8002edc:	d9f6      	bls.n	8002ecc <HAL_RCC_OscConfig+0x1d0>
 8002ede:	e7a0      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002ee0:	4c36      	ldr	r4, [pc, #216]	; (8002fbc <HAL_RCC_OscConfig+0x2c0>)
 8002ee2:	68a3      	ldr	r3, [r4, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d009      	beq.n	8002f00 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002eec:	68a3      	ldr	r3, [r4, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d113      	bne.n	8002f1e <HAL_RCC_OscConfig+0x222>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ef6:	68e3      	ldr	r3, [r4, #12]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d10e      	bne.n	8002f1e <HAL_RCC_OscConfig+0x222>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	055e      	lsls	r6, r3, #21
 8002f04:	d503      	bpl.n	8002f0e <HAL_RCC_OscConfig+0x212>
 8002f06:	68eb      	ldr	r3, [r5, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f43f aefb 	beq.w	8002d04 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0e:	6863      	ldr	r3, [r4, #4]
 8002f10:	692a      	ldr	r2, [r5, #16]
 8002f12:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f1a:	6063      	str	r3, [r4, #4]
 8002f1c:	e737      	b.n	8002d8e <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f1e:	68eb      	ldr	r3, [r5, #12]
 8002f20:	b17b      	cbz	r3, 8002f42 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_HSI_ENABLE();
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f2a:	f7fd ffad 	bl	8000e88 <HAL_GetTick>
 8002f2e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	0558      	lsls	r0, r3, #21
 8002f34:	d4eb      	bmi.n	8002f0e <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f36:	f7fd ffa7 	bl	8000e88 <HAL_GetTick>
 8002f3a:	1b80      	subs	r0, r0, r6
 8002f3c:	2802      	cmp	r0, #2
 8002f3e:	d9f7      	bls.n	8002f30 <HAL_RCC_OscConfig+0x234>
 8002f40:	e76f      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_DISABLE();
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f48:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f4a:	f7fd ff9d 	bl	8000e88 <HAL_GetTick>
 8002f4e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	0559      	lsls	r1, r3, #21
 8002f54:	f57f af1b 	bpl.w	8002d8e <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f58:	f7fd ff96 	bl	8000e88 <HAL_GetTick>
 8002f5c:	1b80      	subs	r0, r0, r6
 8002f5e:	2802      	cmp	r0, #2
 8002f60:	d9f6      	bls.n	8002f50 <HAL_RCC_OscConfig+0x254>
 8002f62:	e75e      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f64:	696b      	ldr	r3, [r5, #20]
 8002f66:	4c15      	ldr	r4, [pc, #84]	; (8002fbc <HAL_RCC_OscConfig+0x2c0>)
 8002f68:	b19b      	cbz	r3, 8002f92 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8002f6a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002f76:	f7fd ff87 	bl	8000e88 <HAL_GetTick>
 8002f7a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8002f7c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002f80:	079f      	lsls	r7, r3, #30
 8002f82:	f53f af08 	bmi.w	8002d96 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f86:	f7fd ff7f 	bl	8000e88 <HAL_GetTick>
 8002f8a:	1b80      	subs	r0, r0, r6
 8002f8c:	2802      	cmp	r0, #2
 8002f8e:	d9f5      	bls.n	8002f7c <HAL_RCC_OscConfig+0x280>
 8002f90:	e747      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 8002f92:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002f9e:	f7fd ff73 	bl	8000e88 <HAL_GetTick>
 8002fa2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8002fa4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002fa8:	0798      	lsls	r0, r3, #30
 8002faa:	f57f aef4 	bpl.w	8002d96 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fae:	f7fd ff6b 	bl	8000e88 <HAL_GetTick>
 8002fb2:	1b80      	subs	r0, r0, r6
 8002fb4:	2802      	cmp	r0, #2
 8002fb6:	d9f5      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x2a8>
 8002fb8:	e733      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	0800fa24 	.word	0x0800fa24
 8002fc4:	20000024 	.word	0x20000024
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fc8:	4c79      	ldr	r4, [pc, #484]	; (80031b0 <HAL_RCC_OscConfig+0x4b4>)
 8002fca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fcc:	00d9      	lsls	r1, r3, #3
 8002fce:	d427      	bmi.n	8003020 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8002fd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002fe2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe4:	4e73      	ldr	r6, [pc, #460]	; (80031b4 <HAL_RCC_OscConfig+0x4b8>)
 8002fe6:	6833      	ldr	r3, [r6, #0]
 8002fe8:	05da      	lsls	r2, r3, #23
 8002fea:	d51b      	bpl.n	8003024 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fec:	68ab      	ldr	r3, [r5, #8]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d129      	bne.n	8003046 <HAL_RCC_OscConfig+0x34a>
 8002ff2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002ffe:	f7fd ff43 	bl	8000e88 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003006:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003008:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800300c:	0798      	lsls	r0, r3, #30
 800300e:	d540      	bpl.n	8003092 <HAL_RCC_OscConfig+0x396>
    if(pwrclkchanged == SET)
 8003010:	2f00      	cmp	r7, #0
 8003012:	f43f aec4 	beq.w	8002d9e <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003016:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301c:	65a3      	str	r3, [r4, #88]	; 0x58
 800301e:	e6be      	b.n	8002d9e <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8003020:	2700      	movs	r7, #0
 8003022:	e7df      	b.n	8002fe4 <HAL_RCC_OscConfig+0x2e8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003024:	6833      	ldr	r3, [r6, #0]
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800302c:	f7fd ff2c 	bl	8000e88 <HAL_GetTick>
 8003030:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003032:	6833      	ldr	r3, [r6, #0]
 8003034:	05db      	lsls	r3, r3, #23
 8003036:	d4d9      	bmi.n	8002fec <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003038:	f7fd ff26 	bl	8000e88 <HAL_GetTick>
 800303c:	eba0 0008 	sub.w	r0, r0, r8
 8003040:	2802      	cmp	r0, #2
 8003042:	d9f6      	bls.n	8003032 <HAL_RCC_OscConfig+0x336>
 8003044:	e6ed      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003046:	2b05      	cmp	r3, #5
 8003048:	d106      	bne.n	8003058 <HAL_RCC_OscConfig+0x35c>
 800304a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8003056:	e7cc      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2f6>
 8003058:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8003064:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003068:	f022 0204 	bic.w	r2, r2, #4
 800306c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1c4      	bne.n	8002ffe <HAL_RCC_OscConfig+0x302>
      tickstart = HAL_GetTick();
 8003074:	f7fd ff08 	bl	8000e88 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003078:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800307c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800307e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003082:	0799      	lsls	r1, r3, #30
 8003084:	d5c4      	bpl.n	8003010 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fd feff 	bl	8000e88 <HAL_GetTick>
 800308a:	1b80      	subs	r0, r0, r6
 800308c:	4540      	cmp	r0, r8
 800308e:	d9f6      	bls.n	800307e <HAL_RCC_OscConfig+0x382>
 8003090:	e6c7      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fd fef9 	bl	8000e88 <HAL_GetTick>
 8003096:	1b80      	subs	r0, r0, r6
 8003098:	4540      	cmp	r0, r8
 800309a:	d9b5      	bls.n	8003008 <HAL_RCC_OscConfig+0x30c>
 800309c:	e6c1      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800309e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80030a0:	4c43      	ldr	r4, [pc, #268]	; (80031b0 <HAL_RCC_OscConfig+0x4b4>)
 80030a2:	b19b      	cbz	r3, 80030cc <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSI48_ENABLE();
 80030a4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80030b0:	f7fd feea 	bl	8000e88 <HAL_GetTick>
 80030b4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80030b6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80030ba:	079b      	lsls	r3, r3, #30
 80030bc:	f53f ae73 	bmi.w	8002da6 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030c0:	f7fd fee2 	bl	8000e88 <HAL_GetTick>
 80030c4:	1b80      	subs	r0, r0, r6
 80030c6:	2802      	cmp	r0, #2
 80030c8:	d9f5      	bls.n	80030b6 <HAL_RCC_OscConfig+0x3ba>
 80030ca:	e6aa      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 80030cc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80030d8:	f7fd fed6 	bl	8000e88 <HAL_GetTick>
 80030dc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80030de:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80030e2:	079f      	lsls	r7, r3, #30
 80030e4:	f57f ae5f 	bpl.w	8002da6 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e8:	f7fd fece 	bl	8000e88 <HAL_GetTick>
 80030ec:	1b80      	subs	r0, r0, r6
 80030ee:	2802      	cmp	r0, #2
 80030f0:	d9f5      	bls.n	80030de <HAL_RCC_OscConfig+0x3e2>
 80030f2:	e696      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030f4:	4c2e      	ldr	r4, [pc, #184]	; (80031b0 <HAL_RCC_OscConfig+0x4b4>)
 80030f6:	68a3      	ldr	r3, [r4, #8]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b0c      	cmp	r3, #12
 80030fe:	f43f ae01 	beq.w	8002d04 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003102:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003104:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800310a:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800310c:	d136      	bne.n	800317c <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 800310e:	f7fd febb 	bl	8000e88 <HAL_GetTick>
 8003112:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	0198      	lsls	r0, r3, #6
 8003118:	d42a      	bmi.n	8003170 <HAL_RCC_OscConfig+0x474>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311a:	e9d5 230d 	ldrd	r2, r3, [r5, #52]	; 0x34
 800311e:	06db      	lsls	r3, r3, #27
 8003120:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003124:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003126:	4313      	orrs	r3, r2
 8003128:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800312a:	3a01      	subs	r2, #1
 800312c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003130:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003132:	0852      	lsrs	r2, r2, #1
 8003134:	3a01      	subs	r2, #1
 8003136:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800313a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800313c:	0852      	lsrs	r2, r2, #1
 800313e:	3a01      	subs	r2, #1
 8003140:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003144:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800314e:	68e3      	ldr	r3, [r4, #12]
 8003150:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003154:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003156:	f7fd fe97 	bl	8000e88 <HAL_GetTick>
 800315a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	0199      	lsls	r1, r3, #6
 8003160:	f53f ae25 	bmi.w	8002dae <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fd fe90 	bl	8000e88 <HAL_GetTick>
 8003168:	1b40      	subs	r0, r0, r5
 800316a:	2802      	cmp	r0, #2
 800316c:	d9f6      	bls.n	800315c <HAL_RCC_OscConfig+0x460>
 800316e:	e658      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fd fe8a 	bl	8000e88 <HAL_GetTick>
 8003174:	1b80      	subs	r0, r0, r6
 8003176:	2802      	cmp	r0, #2
 8003178:	d9cc      	bls.n	8003114 <HAL_RCC_OscConfig+0x418>
 800317a:	e652      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003180:	bf5e      	ittt	pl
 8003182:	68e3      	ldrpl	r3, [r4, #12]
 8003184:	f023 0303 	bicpl.w	r3, r3, #3
 8003188:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800318a:	68e3      	ldr	r3, [r4, #12]
 800318c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003194:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003196:	f7fd fe77 	bl	8000e88 <HAL_GetTick>
 800319a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	019b      	lsls	r3, r3, #6
 80031a0:	f57f ae05 	bpl.w	8002dae <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fd fe70 	bl	8000e88 <HAL_GetTick>
 80031a8:	1b40      	subs	r0, r0, r5
 80031aa:	2802      	cmp	r0, #2
 80031ac:	d9f6      	bls.n	800319c <HAL_RCC_OscConfig+0x4a0>
 80031ae:	e638      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000

080031b8 <HAL_RCC_ClockConfig>:
{
 80031b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031bc:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80031be:	4604      	mov	r4, r0
 80031c0:	b910      	cbnz	r0, 80031c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80031c2:	2001      	movs	r0, #1
}
 80031c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4a3f      	ldr	r2, [pc, #252]	; (80032c8 <HAL_RCC_ClockConfig+0x110>)
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	428b      	cmp	r3, r1
 80031d2:	d327      	bcc.n	8003224 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	07d9      	lsls	r1, r3, #31
 80031d8:	d42f      	bmi.n	800323a <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031da:	6821      	ldr	r1, [r4, #0]
 80031dc:	078a      	lsls	r2, r1, #30
 80031de:	d458      	bmi.n	8003292 <HAL_RCC_ClockConfig+0xda>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4a39      	ldr	r2, [pc, #228]	; (80032c8 <HAL_RCC_ClockConfig+0x110>)
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	42b3      	cmp	r3, r6
 80031ea:	d85a      	bhi.n	80032a2 <HAL_RCC_ClockConfig+0xea>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	f011 0f04 	tst.w	r1, #4
 80031f0:	4d36      	ldr	r5, [pc, #216]	; (80032cc <HAL_RCC_ClockConfig+0x114>)
 80031f2:	d161      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	070b      	lsls	r3, r1, #28
 80031f6:	d506      	bpl.n	8003206 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f8:	68ab      	ldr	r3, [r5, #8]
 80031fa:	6922      	ldr	r2, [r4, #16]
 80031fc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003200:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003204:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003206:	f7ff fd11 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 800320a:	68ab      	ldr	r3, [r5, #8]
 800320c:	4a30      	ldr	r2, [pc, #192]	; (80032d0 <HAL_RCC_ClockConfig+0x118>)
 800320e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	40d8      	lsrs	r0, r3
 8003216:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <HAL_RCC_ClockConfig+0x11c>)
 8003218:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800321a:	2000      	movs	r0, #0
 800321c:	f7fd fe06 	bl	8000e2c <HAL_InitTick>
  return HAL_OK;
 8003220:	2000      	movs	r0, #0
 8003222:	e7cf      	b.n	80031c4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	430b      	orrs	r3, r1
 800322c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	6813      	ldr	r3, [r2, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	428b      	cmp	r3, r1
 8003236:	d1c4      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xa>
 8003238:	e7cc      	b.n	80031d4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323a:	6862      	ldr	r2, [r4, #4]
 800323c:	4d23      	ldr	r5, [pc, #140]	; (80032cc <HAL_RCC_ClockConfig+0x114>)
 800323e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003240:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003242:	d11a      	bne.n	800327a <HAL_RCC_ClockConfig+0xc2>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003244:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003248:	d0bb      	beq.n	80031c2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800324a:	68ab      	ldr	r3, [r5, #8]
 800324c:	f023 0303 	bic.w	r3, r3, #3
 8003250:	4313      	orrs	r3, r2
 8003252:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8003254:	f7fd fe18 	bl	8000e88 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003258:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800325c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	68ab      	ldr	r3, [r5, #8]
 8003260:	6862      	ldr	r2, [r4, #4]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800326a:	d0b6      	beq.n	80031da <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326c:	f7fd fe0c 	bl	8000e88 <HAL_GetTick>
 8003270:	1bc0      	subs	r0, r0, r7
 8003272:	4540      	cmp	r0, r8
 8003274:	d9f3      	bls.n	800325e <HAL_RCC_ClockConfig+0xa6>
        return HAL_TIMEOUT;
 8003276:	2003      	movs	r0, #3
 8003278:	e7a4      	b.n	80031c4 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327a:	2a02      	cmp	r2, #2
 800327c:	d102      	bne.n	8003284 <HAL_RCC_ClockConfig+0xcc>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800327e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003282:	e7e1      	b.n	8003248 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003284:	b912      	cbnz	r2, 800328c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003286:	f013 0f02 	tst.w	r3, #2
 800328a:	e7dd      	b.n	8003248 <HAL_RCC_ClockConfig+0x90>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800328c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003290:	e7da      	b.n	8003248 <HAL_RCC_ClockConfig+0x90>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003292:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <HAL_RCC_ClockConfig+0x114>)
 8003294:	68a0      	ldr	r0, [r4, #8]
 8003296:	6893      	ldr	r3, [r2, #8]
 8003298:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800329c:	4303      	orrs	r3, r0
 800329e:	6093      	str	r3, [r2, #8]
 80032a0:	e79e      	b.n	80031e0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	6813      	ldr	r3, [r2, #0]
 80032a4:	f023 0307 	bic.w	r3, r3, #7
 80032a8:	4333      	orrs	r3, r6
 80032aa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ac:	6813      	ldr	r3, [r2, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	42b3      	cmp	r3, r6
 80032b4:	d185      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xa>
 80032b6:	e799      	b.n	80031ec <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b8:	68ab      	ldr	r3, [r5, #8]
 80032ba:	68e2      	ldr	r2, [r4, #12]
 80032bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60ab      	str	r3, [r5, #8]
 80032c4:	e796      	b.n	80031f4 <HAL_RCC_ClockConfig+0x3c>
 80032c6:	bf00      	nop
 80032c8:	40022000 	.word	0x40022000
 80032cc:	40021000 	.word	0x40021000
 80032d0:	0800fa24 	.word	0x0800fa24
 80032d4:	20000024 	.word	0x20000024

080032d8 <HAL_RCC_GetHCLKFreq>:
}
 80032d8:	4b01      	ldr	r3, [pc, #4]	; (80032e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000024 	.word	0x20000024

080032e4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80032e6:	4a05      	ldr	r2, [pc, #20]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	4a03      	ldr	r2, [pc, #12]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80032f2:	6810      	ldr	r0, [r2, #0]
}
 80032f4:	40d8      	lsrs	r0, r3
 80032f6:	4770      	bx	lr
 80032f8:	40021000 	.word	0x40021000
 80032fc:	0800fa34 	.word	0x0800fa34
 8003300:	20000024 	.word	0x20000024

08003304 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003306:	4a05      	ldr	r2, [pc, #20]	; (800331c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800330e:	5cd3      	ldrb	r3, [r2, r3]
 8003310:	4a03      	ldr	r2, [pc, #12]	; (8003320 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003312:	6810      	ldr	r0, [r2, #0]
}
 8003314:	40d8      	lsrs	r0, r3
 8003316:	4770      	bx	lr
 8003318:	40021000 	.word	0x40021000
 800331c:	0800fa34 	.word	0x0800fa34
 8003320:	20000024 	.word	0x20000024

08003324 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003326:	4b43      	ldr	r3, [pc, #268]	; (8003434 <RCCEx_PLLSAI1_Config+0x110>)
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	f012 0f03 	tst.w	r2, #3
{
 800332e:	4605      	mov	r5, r0
 8003330:	460e      	mov	r6, r1
 8003332:	6800      	ldr	r0, [r0, #0]
 8003334:	461c      	mov	r4, r3
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003336:	d028      	beq.n	800338a <RCCEx_PLLSAI1_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	f002 0203 	and.w	r2, r2, #3
 800333e:	4282      	cmp	r2, r0
 8003340:	d13a      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0x94>
       ||
 8003342:	2a00      	cmp	r2, #0
 8003344:	d038      	beq.n	80033b8 <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003346:	68db      	ldr	r3, [r3, #12]
       ||
 8003348:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800334a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800334e:	3301      	adds	r3, #1
       ||
 8003350:	4293      	cmp	r3, r2
 8003352:	d131      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800335a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335c:	f7fd fd94 	bl	8000e88 <HAL_GetTick>
 8003360:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	011a      	lsls	r2, r3, #4
 8003366:	d430      	bmi.n	80033ca <RCCEx_PLLSAI1_Config+0xa6>
 8003368:	68ab      	ldr	r3, [r5, #8]
 800336a:	0218      	lsls	r0, r3, #8
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800336c:	b3a6      	cbz	r6, 80033d8 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800336e:	2e01      	cmp	r6, #1
 8003370:	d14c      	bne.n	800340c <RCCEx_PLLSAI1_Config+0xe8>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003372:	692a      	ldr	r2, [r5, #16]
 8003374:	6921      	ldr	r1, [r4, #16]
 8003376:	0852      	lsrs	r2, r2, #1
 8003378:	1e53      	subs	r3, r2, #1
 800337a:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 800337e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003382:	4302      	orrs	r2, r0
 8003384:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 8003388:	e02f      	b.n	80033ea <RCCEx_PLLSAI1_Config+0xc6>
    switch(PllSai1->PLLSAI1Source)
 800338a:	2802      	cmp	r0, #2
 800338c:	d010      	beq.n	80033b0 <RCCEx_PLLSAI1_Config+0x8c>
 800338e:	2803      	cmp	r0, #3
 8003390:	d014      	beq.n	80033bc <RCCEx_PLLSAI1_Config+0x98>
 8003392:	2801      	cmp	r0, #1
 8003394:	d110      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	079f      	lsls	r7, r3, #30
 800339a:	d51c      	bpl.n	80033d6 <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800339c:	68e3      	ldr	r3, [r4, #12]
 800339e:	686a      	ldr	r2, [r5, #4]
 80033a0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80033a4:	3a01      	subs	r2, #1
 80033a6:	4318      	orrs	r0, r3
 80033a8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80033ac:	60e0      	str	r0, [r4, #12]
 80033ae:	e7d1      	b.n	8003354 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033b6:	d1f1      	bne.n	800339c <RCCEx_PLLSAI1_Config+0x78>
 80033b8:	2001      	movs	r0, #1
 80033ba:	e00c      	b.n	80033d6 <RCCEx_PLLSAI1_Config+0xb2>
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	0391      	lsls	r1, r2, #14
 80033c0:	d4ec      	bmi.n	800339c <RCCEx_PLLSAI1_Config+0x78>
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80033c8:	e7f5      	b.n	80033b6 <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033ca:	f7fd fd5d 	bl	8000e88 <HAL_GetTick>
 80033ce:	1bc0      	subs	r0, r0, r7
 80033d0:	2802      	cmp	r0, #2
 80033d2:	d9c6      	bls.n	8003362 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80033d4:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80033d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033d8:	6923      	ldr	r3, [r4, #16]
 80033da:	68ea      	ldr	r2, [r5, #12]
 80033dc:	ea40 62c2 	orr.w	r2, r0, r2, lsl #27
 80033e0:	f023 4078 	bic.w	r0, r3, #4160749568	; 0xf8000000
 80033e4:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 80033e8:	4302      	orrs	r2, r0
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ea:	6122      	str	r2, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033f2:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80033f4:	f7fd fd48 	bl	8000e88 <HAL_GetTick>
 80033f8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	d512      	bpl.n	8003426 <RCCEx_PLLSAI1_Config+0x102>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003400:	6923      	ldr	r3, [r4, #16]
 8003402:	69aa      	ldr	r2, [r5, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	6123      	str	r3, [r4, #16]
 8003408:	2000      	movs	r0, #0
  return status;
 800340a:	e7e4      	b.n	80033d6 <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800340c:	696b      	ldr	r3, [r5, #20]
 800340e:	6922      	ldr	r2, [r4, #16]
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	1e59      	subs	r1, r3, #1
 8003414:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8003418:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800341c:	4303      	orrs	r3, r0
 800341e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003422:	6123      	str	r3, [r4, #16]
 8003424:	e7e2      	b.n	80033ec <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003426:	f7fd fd2f 	bl	8000e88 <HAL_GetTick>
 800342a:	1b80      	subs	r0, r0, r6
 800342c:	2802      	cmp	r0, #2
 800342e:	d9e4      	bls.n	80033fa <RCCEx_PLLSAI1_Config+0xd6>
 8003430:	e7d0      	b.n	80033d4 <RCCEx_PLLSAI1_Config+0xb0>
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000

08003438 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800343c:	6805      	ldr	r5, [r0, #0]
 800343e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8003442:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003444:	d00e      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003446:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003448:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800344c:	d052      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 800344e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003452:	d054      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8003454:	2900      	cmp	r1, #0
 8003456:	d15d      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003458:	3004      	adds	r0, #4
 800345a:	f7ff ff63 	bl	8003324 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800345e:	4605      	mov	r5, r0
 8003460:	2800      	cmp	r0, #0
 8003462:	d04c      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	039e      	lsls	r6, r3, #14
 8003468:	d564      	bpl.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346a:	4eb7      	ldr	r6, [pc, #732]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800346c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800346e:	00d8      	lsls	r0, r3, #3
 8003470:	d452      	bmi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	65b3      	str	r3, [r6, #88]	; 0x58
 800347a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003484:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003486:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 800374c <HAL_RCCEx_PeriphCLKConfig+0x314>
 800348a:	f8d8 3000 	ldr.w	r3, [r8]
 800348e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003492:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8003496:	f7fd fcf7 	bl	8000e88 <HAL_GetTick>
 800349a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800349c:	f8d8 3000 	ldr.w	r3, [r8]
 80034a0:	05d9      	lsls	r1, r3, #23
 80034a2:	d53b      	bpl.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    if(ret == HAL_OK)
 80034a4:	2d00      	cmp	r5, #0
 80034a6:	d140      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xf2>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034a8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034ac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80034b0:	d014      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80034b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d011      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034b8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80034bc:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80034c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034c4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034c8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034d4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80034d8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034dc:	07da      	lsls	r2, r3, #31
 80034de:	f100 8101 	bmi.w	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e2:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80034e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80034f2:	e01a      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034f4:	4a94      	ldr	r2, [pc, #592]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034f6:	68d3      	ldr	r3, [r2, #12]
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034fe:	4a92      	ldr	r2, [pc, #584]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003500:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003502:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003506:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800350a:	430b      	orrs	r3, r1
 800350c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003510:	2500      	movs	r5, #0
 8003512:	e7a7      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8003514:	2501      	movs	r5, #1
 8003516:	e7a5      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8003518:	2700      	movs	r7, #0
 800351a:	e7b4      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351c:	f7fd fcb4 	bl	8000e88 <HAL_GetTick>
 8003520:	eba0 0009 	sub.w	r0, r0, r9
 8003524:	2802      	cmp	r0, #2
 8003526:	d9b9      	bls.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8003528:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800352a:	b11f      	cbz	r7, 8003534 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800352e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003532:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	07df      	lsls	r7, r3, #31
 8003538:	d508      	bpl.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353a:	4983      	ldr	r1, [pc, #524]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800353c:	6a20      	ldr	r0, [r4, #32]
 800353e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003542:	f022 0203 	bic.w	r2, r2, #3
 8003546:	4302      	orrs	r2, r0
 8003548:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800354c:	079e      	lsls	r6, r3, #30
 800354e:	d508      	bpl.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003550:	497d      	ldr	r1, [pc, #500]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003552:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003554:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003558:	f022 020c 	bic.w	r2, r2, #12
 800355c:	4302      	orrs	r2, r0
 800355e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003562:	0758      	lsls	r0, r3, #29
 8003564:	d508      	bpl.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x140>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003566:	4978      	ldr	r1, [pc, #480]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003568:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800356a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800356e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003572:	4302      	orrs	r2, r0
 8003574:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003578:	0719      	lsls	r1, r3, #28
 800357a:	d508      	bpl.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x156>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800357c:	4972      	ldr	r1, [pc, #456]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800357e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003580:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003584:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003588:	4302      	orrs	r2, r0
 800358a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800358e:	069a      	lsls	r2, r3, #26
 8003590:	d508      	bpl.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003592:	496d      	ldr	r1, [pc, #436]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003594:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003596:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800359a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800359e:	4302      	orrs	r2, r0
 80035a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035a4:	059f      	lsls	r7, r3, #22
 80035a6:	d508      	bpl.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x182>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a8:	4967      	ldr	r1, [pc, #412]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035aa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80035ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80035b0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80035b4:	4302      	orrs	r2, r0
 80035b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035ba:	055e      	lsls	r6, r3, #21
 80035bc:	d508      	bpl.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035be:	4962      	ldr	r1, [pc, #392]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80035c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80035c6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80035ca:	4302      	orrs	r2, r0
 80035cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d0:	0658      	lsls	r0, r3, #25
 80035d2:	d508      	bpl.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035d4:	495c      	ldr	r1, [pc, #368]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80035d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80035dc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80035e0:	4302      	orrs	r2, r0
 80035e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035e6:	0619      	lsls	r1, r3, #24
 80035e8:	d508      	bpl.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ea:	4957      	ldr	r1, [pc, #348]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80035ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80035f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80035f6:	4302      	orrs	r2, r0
 80035f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035fc:	05da      	lsls	r2, r3, #23
 80035fe:	d508      	bpl.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003600:	4951      	ldr	r1, [pc, #324]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003602:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003604:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003608:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800360c:	4302      	orrs	r2, r0
 800360e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003612:	02df      	lsls	r7, r3, #11
 8003614:	d508      	bpl.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003616:	494c      	ldr	r1, [pc, #304]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003618:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800361a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800361e:	f022 0203 	bic.w	r2, r2, #3
 8003622:	4302      	orrs	r2, r0
 8003624:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003628:	049e      	lsls	r6, r3, #18
 800362a:	d50f      	bpl.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x214>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800362c:	4a46      	ldr	r2, [pc, #280]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800362e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003630:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003634:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003638:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800363a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800363e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003642:	d160      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003644:	68d3      	ldr	r3, [r2, #12]
 8003646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800364a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	0318      	lsls	r0, r3, #12
 8003650:	d50f      	bpl.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003652:	4a3d      	ldr	r2, [pc, #244]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003654:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003656:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800365a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800365e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003660:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003668:	d158      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366a:	68d3      	ldr	r3, [r2, #12]
 800366c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003670:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	0359      	lsls	r1, r3, #13
 8003676:	d50f      	bpl.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x260>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003678:	4a33      	ldr	r2, [pc, #204]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800367a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800367c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003680:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003684:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003686:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800368a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800368e:	d150      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003690:	68d3      	ldr	r3, [r2, #12]
 8003692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003696:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	045a      	lsls	r2, r3, #17
 800369c:	d512      	bpl.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800369e:	492a      	ldr	r1, [pc, #168]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80036a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80036a6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80036aa:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036ac:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036b4:	d106      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036b6:	2102      	movs	r1, #2
 80036b8:	1d20      	adds	r0, r4, #4
 80036ba:	f7ff fe33 	bl	8003324 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80036be:	2800      	cmp	r0, #0
 80036c0:	bf18      	it	ne
 80036c2:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	03db      	lsls	r3, r3, #15
 80036c8:	d508      	bpl.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036cc:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80036ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036d6:	430b      	orrs	r3, r1
 80036d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80036dc:	4628      	mov	r0, r5
 80036de:	b003      	add	sp, #12
 80036e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 80036e4:	f7fd fbd0 	bl	8000e88 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80036ec:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80036ee:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80036f2:	079b      	lsls	r3, r3, #30
 80036f4:	f53f aef5 	bmi.w	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fd fbc6 	bl	8000e88 <HAL_GetTick>
 80036fc:	eba0 0008 	sub.w	r0, r0, r8
 8003700:	4548      	cmp	r0, r9
 8003702:	d9f4      	bls.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8003704:	e710      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003706:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800370a:	d19f      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x214>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800370c:	2101      	movs	r1, #1
 800370e:	1d20      	adds	r0, r4, #4
 8003710:	f7ff fe08 	bl	8003324 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003714:	2800      	cmp	r0, #0
 8003716:	bf18      	it	ne
 8003718:	4605      	movne	r5, r0
 800371a:	e797      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x214>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800371c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003720:	d1a7      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x23a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003722:	2101      	movs	r1, #1
 8003724:	1d20      	adds	r0, r4, #4
 8003726:	f7ff fdfd 	bl	8003324 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800372a:	2800      	cmp	r0, #0
 800372c:	bf18      	it	ne
 800372e:	4605      	movne	r5, r0
 8003730:	e79f      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003732:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003736:	d1af      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x260>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003738:	2101      	movs	r1, #1
 800373a:	1d20      	adds	r0, r4, #4
 800373c:	f7ff fdf2 	bl	8003324 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003740:	2800      	cmp	r0, #0
 8003742:	bf18      	it	ne
 8003744:	4605      	movne	r5, r0
 8003746:	e7a7      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000

08003750 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RTC_AlarmIRQHandler+0x6c>)
 8003752:	f44f 2280 	mov.w	r2, #262144	; 0x40000
{
 8003756:	b510      	push	{r4, lr}
 8003758:	4604      	mov	r4, r0
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800375a:	615a      	str	r2, [r3, #20]

  /* As alarms are sharing the same EXTI line, exit when no more pending Alarm event */
  while(((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)) ||
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	04d2      	lsls	r2, r2, #19
 8003762:	d502      	bpl.n	800376a <HAL_RTC_AlarmIRQHandler+0x1a>
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	05d0      	lsls	r0, r2, #23
 8003768:	d409      	bmi.n	800377e <HAL_RTC_AlarmIRQHandler+0x2e>
        ((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)))
 800376a:	689a      	ldr	r2, [r3, #8]
  while(((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)) ||
 800376c:	0491      	lsls	r1, r2, #18
 800376e:	d502      	bpl.n	8003776 <HAL_RTC_AlarmIRQHandler+0x26>
        ((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)))
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	0592      	lsls	r2, r2, #22
 8003774:	d403      	bmi.n	800377e <HAL_RTC_AlarmIRQHandler+0x2e>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003776:	2301      	movs	r3, #1
 8003778:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800377c:	bd10      	pop	{r4, pc}
    if((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET))
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	04d1      	lsls	r1, r2, #19
 8003782:	d50a      	bpl.n	800379a <HAL_RTC_AlarmIRQHandler+0x4a>
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	05d2      	lsls	r2, r2, #23
 8003788:	d507      	bpl.n	800379a <HAL_RTC_AlarmIRQHandler+0x4a>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003792:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003794:	4620      	mov	r0, r4
 8003796:	f007 f863 	bl	800a860 <HAL_RTC_AlarmAEventCallback>
    if((__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET) && (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET))
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	6893      	ldr	r3, [r2, #8]
 800379e:	0498      	lsls	r0, r3, #18
 80037a0:	d5dc      	bpl.n	800375c <HAL_RTC_AlarmIRQHandler+0xc>
 80037a2:	68d3      	ldr	r3, [r2, #12]
 80037a4:	0599      	lsls	r1, r3, #22
 80037a6:	d5d9      	bpl.n	800375c <HAL_RTC_AlarmIRQHandler+0xc>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80037a8:	68d3      	ldr	r3, [r2, #12]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f463 7320 	orn	r3, r3, #640	; 0x280
 80037b0:	60d3      	str	r3, [r2, #12]
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80037b2:	4620      	mov	r0, r4
 80037b4:	f007 f860 	bl	800a878 <HAL_RTCEx_AlarmBEventCallback>
 80037b8:	e7d0      	b.n	800375c <HAL_RTC_AlarmIRQHandler+0xc>
 80037ba:	bf00      	nop
 80037bc:	40010400 	.word	0x40010400

080037c0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037c0:	6802      	ldr	r2, [r0, #0]
{
 80037c2:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037c4:	68d3      	ldr	r3, [r2, #12]
 80037c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ca:	60d3      	str	r3, [r2, #12]
{
 80037cc:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 80037ce:	f7fd fb5b 	bl	8000e88 <HAL_GetTick>
 80037d2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	069b      	lsls	r3, r3, #26
 80037da:	d501      	bpl.n	80037e0 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80037dc:	2000      	movs	r0, #0
}
 80037de:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037e0:	f7fd fb52 	bl	8000e88 <HAL_GetTick>
 80037e4:	1b40      	subs	r0, r0, r5
 80037e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80037ea:	d9f3      	bls.n	80037d4 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80037ec:	2003      	movs	r0, #3
 80037ee:	e7f6      	b.n	80037de <HAL_RTC_WaitForSynchro+0x1e>

080037f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80037f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80037f2:	6803      	ldr	r3, [r0, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	0652      	lsls	r2, r2, #25
{
 80037f8:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80037fa:	d501      	bpl.n	8003800 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80037fc:	2000      	movs	r0, #0
}
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003800:	f04f 32ff 	mov.w	r2, #4294967295
 8003804:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003806:	f7fd fb3f 	bl	8000e88 <HAL_GetTick>
 800380a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	065b      	lsls	r3, r3, #25
 8003812:	d4f3      	bmi.n	80037fc <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003814:	f7fd fb38 	bl	8000e88 <HAL_GetTick>
 8003818:	1b40      	subs	r0, r0, r5
 800381a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800381e:	d9f5      	bls.n	800380c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8003820:	2003      	movs	r0, #3
 8003822:	e7ec      	b.n	80037fe <RTC_EnterInitMode+0xe>

08003824 <HAL_RTC_Init>:
{
 8003824:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8003826:	4604      	mov	r4, r0
 8003828:	b1d8      	cbz	r0, 8003862 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800382a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800382e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003832:	b91b      	cbnz	r3, 800383c <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8003834:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8003838:	f006 fedc 	bl	800a5f4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800383c:	2302      	movs	r3, #2
 800383e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	22ca      	movs	r2, #202	; 0xca
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
 8003848:	2253      	movs	r2, #83	; 0x53
 800384a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800384c:	4620      	mov	r0, r4
 800384e:	f7ff ffcf 	bl	80037f0 <RTC_EnterInitMode>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	4605      	mov	r5, r0
 8003856:	b130      	cbz	r0, 8003866 <HAL_RTC_Init+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003858:	22ff      	movs	r2, #255	; 0xff
 800385a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800385c:	2304      	movs	r3, #4
 800385e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 8003862:	2501      	movs	r5, #1
 8003864:	e031      	b.n	80038ca <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003866:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003868:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800386a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800386e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003872:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003874:	6862      	ldr	r2, [r4, #4]
 8003876:	6899      	ldr	r1, [r3, #8]
 8003878:	4302      	orrs	r2, r0
 800387a:	69a0      	ldr	r0, [r4, #24]
 800387c:	4302      	orrs	r2, r0
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003882:	68e2      	ldr	r2, [r4, #12]
 8003884:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	68a1      	ldr	r1, [r4, #8]
 800388a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800388e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003896:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	069b      	lsls	r3, r3, #26
 800389c:	d405      	bmi.n	80038aa <HAL_RTC_Init+0x86>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff ff8e 	bl	80037c0 <HAL_RTC_WaitForSynchro>
 80038a4:	b108      	cbz	r0, 80038aa <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	e7d6      	b.n	8003858 <HAL_RTC_Init+0x34>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80038aa:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038ac:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80038ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038b0:	f022 0203 	bic.w	r2, r2, #3
 80038b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038b6:	69e2      	ldr	r2, [r4, #28]
 80038b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80038ba:	4302      	orrs	r2, r0
 80038bc:	430a      	orrs	r2, r1
 80038be:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038c0:	22ff      	movs	r2, #255	; 0xff
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80038ca:	4628      	mov	r0, r5
 80038cc:	bd38      	pop	{r3, r4, r5, pc}

080038ce <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 80038ce:	2300      	movs	r3, #0

  while(Value >= 10)
 80038d0:	2809      	cmp	r0, #9
 80038d2:	d803      	bhi.n	80038dc <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80038d4:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80038d8:	b2c0      	uxtb	r0, r0
 80038da:	4770      	bx	lr
    Value -= 10;
 80038dc:	380a      	subs	r0, #10
    bcdhigh++;
 80038de:	3301      	adds	r3, #1
    Value -= 10;
 80038e0:	b2c0      	uxtb	r0, r0
 80038e2:	e7f5      	b.n	80038d0 <RTC_ByteToBcd2+0x2>

080038e4 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 80038e4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80038e8:	2b01      	cmp	r3, #1
{
 80038ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ee:	4606      	mov	r6, r0
 80038f0:	460f      	mov	r7, r1
 80038f2:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 80038f6:	d032      	beq.n	800395e <HAL_RTC_SetTime+0x7a>
 80038f8:	2301      	movs	r3, #1
 80038fa:	6801      	ldr	r1, [r0, #0]
 80038fc:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003900:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
 8003904:	7838      	ldrb	r0, [r7, #0]
 8003906:	787d      	ldrb	r5, [r7, #1]
 8003908:	78bc      	ldrb	r4, [r7, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800390a:	688b      	ldr	r3, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 800390c:	bb52      	cbnz	r2, 8003964 <HAL_RTC_SetTime+0x80>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800390e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 8003912:	bf08      	it	eq
 8003914:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003916:	f7ff ffda 	bl	80038ce <RTC_ByteToBcd2>
 800391a:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800391c:	4628      	mov	r0, r5
 800391e:	f7ff ffd6 	bl	80038ce <RTC_ByteToBcd2>
 8003922:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003924:	4620      	mov	r0, r4
 8003926:	f7ff ffd2 	bl	80038ce <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 800392a:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800392c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003930:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8003934:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003938:	23ca      	movs	r3, #202	; 0xca
 800393a:	624b      	str	r3, [r1, #36]	; 0x24
 800393c:	2353      	movs	r3, #83	; 0x53
 800393e:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003940:	4630      	mov	r0, r6
 8003942:	f7ff ff55 	bl	80037f0 <RTC_EnterInitMode>
 8003946:	6833      	ldr	r3, [r6, #0]
 8003948:	4605      	mov	r5, r0
 800394a:	b1c0      	cbz	r0, 800397e <HAL_RTC_SetTime+0x9a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800394c:	22ff      	movs	r2, #255	; 0xff
 800394e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003950:	2304      	movs	r3, #4
 8003952:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8003956:	2300      	movs	r3, #0
 8003958:	f886 3020 	strb.w	r3, [r6, #32]
        return HAL_ERROR;
 800395c:	2501      	movs	r5, #1
}
 800395e:	4628      	mov	r0, r5
 8003960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003964:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003968:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00;
 800396c:	bf08      	it	eq
 800396e:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003970:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003974:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));
 8003976:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003978:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800397c:	e7dc      	b.n	8003938 <HAL_RTC_SetTime+0x54>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800397e:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8003982:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8003986:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800398e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003990:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 8003994:	6899      	ldr	r1, [r3, #8]
 8003996:	4302      	orrs	r2, r0
 8003998:	430a      	orrs	r2, r1
 800399a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a2:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	069b      	lsls	r3, r3, #26
 80039a8:	d40c      	bmi.n	80039c4 <HAL_RTC_SetTime+0xe0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039aa:	4630      	mov	r0, r6
 80039ac:	f7ff ff08 	bl	80037c0 <HAL_RTC_WaitForSynchro>
 80039b0:	b140      	cbz	r0, 80039c4 <HAL_RTC_SetTime+0xe0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039b2:	6833      	ldr	r3, [r6, #0]
 80039b4:	22ff      	movs	r2, #255	; 0xff
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80039b8:	2304      	movs	r3, #4
 80039ba:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80039be:	f886 5020 	strb.w	r5, [r6, #32]
 80039c2:	e7cb      	b.n	800395c <HAL_RTC_SetTime+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039c4:	6833      	ldr	r3, [r6, #0]
 80039c6:	22ff      	movs	r2, #255	; 0xff
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 80039d0:	2300      	movs	r3, #0
 80039d2:	f886 3020 	strb.w	r3, [r6, #32]
   return HAL_OK;
 80039d6:	e7c2      	b.n	800395e <HAL_RTC_SetTime+0x7a>

080039d8 <HAL_RTC_SetDate>:
{
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80039da:	f890 3020 	ldrb.w	r3, [r0, #32]
 80039de:	2b01      	cmp	r3, #1
{
 80039e0:	4606      	mov	r6, r0
 80039e2:	f04f 0502 	mov.w	r5, #2
 __HAL_LOCK(hrtc);
 80039e6:	d034      	beq.n	8003a52 <HAL_RTC_SetDate+0x7a>
 80039e8:	2301      	movs	r3, #1
 80039ea:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039ee:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
 80039f2:	780d      	ldrb	r5, [r1, #0]
 80039f4:	784c      	ldrb	r4, [r1, #1]
 80039f6:	788f      	ldrb	r7, [r1, #2]
 80039f8:	78c8      	ldrb	r0, [r1, #3]
 80039fa:	036d      	lsls	r5, r5, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039fc:	2a00      	cmp	r2, #0
 80039fe:	d14d      	bne.n	8003a9c <HAL_RTC_SetDate+0xc4>
 8003a00:	06e2      	lsls	r2, r4, #27
 8003a02:	d503      	bpl.n	8003a0c <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003a04:	f024 0410 	bic.w	r4, r4, #16
 8003a08:	340a      	adds	r4, #10
 8003a0a:	704c      	strb	r4, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003a0c:	f7ff ff5f 	bl	80038ce <RTC_ByteToBcd2>
 8003a10:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8003a12:	7848      	ldrb	r0, [r1, #1]
 8003a14:	f7ff ff5b 	bl	80038ce <RTC_ByteToBcd2>
 8003a18:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	f7ff ff57 	bl	80038ce <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003a20:	4328      	orrs	r0, r5
 8003a22:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a26:	6833      	ldr	r3, [r6, #0]
 8003a28:	22ca      	movs	r2, #202	; 0xca
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24
 8003a2c:	2253      	movs	r2, #83	; 0x53
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003a30:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a34:	4630      	mov	r0, r6
 8003a36:	f7ff fedb 	bl	80037f0 <RTC_EnterInitMode>
 8003a3a:	6833      	ldr	r3, [r6, #0]
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	b150      	cbz	r0, 8003a56 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a40:	22ff      	movs	r2, #255	; 0xff
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a44:	2304      	movs	r3, #4
 8003a46:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f886 3020 	strb.w	r3, [r6, #32]
        return HAL_ERROR;
 8003a50:	2501      	movs	r5, #1
}
 8003a52:	4628      	mov	r0, r5
 8003a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a56:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8003a5a:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8003a5e:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a66:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	069b      	lsls	r3, r3, #26
 8003a6c:	d40c      	bmi.n	8003a88 <HAL_RTC_SetDate+0xb0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a6e:	4630      	mov	r0, r6
 8003a70:	f7ff fea6 	bl	80037c0 <HAL_RTC_WaitForSynchro>
 8003a74:	b140      	cbz	r0, 8003a88 <HAL_RTC_SetDate+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003a76:	6833      	ldr	r3, [r6, #0]
 8003a78:	22ff      	movs	r2, #255	; 0xff
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8003a82:	f886 5020 	strb.w	r5, [r6, #32]
 8003a86:	e7e3      	b.n	8003a50 <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a88:	6833      	ldr	r3, [r6, #0]
 8003a8a:	22ff      	movs	r2, #255	; 0xff
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8003a94:	2300      	movs	r3, #0
 8003a96:	f886 3020 	strb.w	r3, [r6, #32]
    return HAL_OK;
 8003a9a:	e7da      	b.n	8003a52 <HAL_RTC_SetDate+0x7a>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003a9c:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8003aa0:	4338      	orrs	r0, r7
 8003aa2:	e7c0      	b.n	8003a26 <HAL_RTC_SetDate+0x4e>

08003aa4 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8003aa4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003aa8:	2b01      	cmp	r3, #1
{
 8003aaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aae:	4606      	mov	r6, r0
 8003ab0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003ab4:	f000 8088 	beq.w	8003bc8 <HAL_RTC_SetAlarm_IT+0x124>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	6837      	ldr	r7, [r6, #0]
 8003abc:	f886 3020 	strb.w	r3, [r6, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ac0:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
 8003ac4:	7808      	ldrb	r0, [r1, #0]
 8003ac6:	f891 a001 	ldrb.w	sl, [r1, #1]
 8003aca:	788c      	ldrb	r4, [r1, #2]
 8003acc:	f891 8020 	ldrb.w	r8, [r1, #32]
 8003ad0:	69cd      	ldr	r5, [r1, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
  if(Format == RTC_FORMAT_BIN)
 8003ad4:	2a00      	cmp	r2, #0
 8003ad6:	d157      	bne.n	8003b88 <HAL_RTC_SetAlarm_IT+0xe4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003ad8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8003adc:	bf08      	it	eq
 8003ade:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003ae0:	f7ff fef5 	bl	80038ce <RTC_ByteToBcd2>
 8003ae4:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8003ae6:	4650      	mov	r0, sl
 8003ae8:	f7ff fef1 	bl	80038ce <RTC_ByteToBcd2>
 8003aec:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7ff feed 	bl	80038ce <RTC_ByteToBcd2>
 8003af4:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8003af6:	4640      	mov	r0, r8
 8003af8:	f7ff fee9 	bl	80038ce <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003afc:	694b      	ldr	r3, [r1, #20]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003afe:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8003b00:	431d      	orrs	r5, r3
 8003b02:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8003b06:	ea44 040a 	orr.w	r4, r4, sl
 8003b0a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8003b0e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8003b12:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003b16:	698b      	ldr	r3, [r1, #24]
 8003b18:	684d      	ldr	r5, [r1, #4]
 8003b1a:	431d      	orrs	r5, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b1c:	23ca      	movs	r3, #202	; 0xca
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b20:	2353      	movs	r3, #83	; 0x53
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003b24:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003b2c:	d14e      	bne.n	8003bcc <HAL_RTC_SetAlarm_IT+0x128>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b32:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8003b3c:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 8003b3e:	f7fd f9a3 	bl	8000e88 <HAL_GetTick>
 8003b42:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003b44:	6833      	ldr	r3, [r6, #0]
 8003b46:	68df      	ldr	r7, [r3, #12]
 8003b48:	f017 0701 	ands.w	r7, r7, #1
 8003b4c:	d02d      	beq.n	8003baa <HAL_RTC_SetAlarm_IT+0x106>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003b4e:	61dc      	str	r4, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003b50:	645d      	str	r5, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b58:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003b60:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003b62:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <HAL_RTC_SetAlarm_IT+0x16c>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b6a:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b72:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b74:	6833      	ldr	r3, [r6, #0]
 8003b76:	22ff      	movs	r2, #255	; 0xff
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8003b7a:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY; 
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8003b82:	f886 0020 	strb.w	r0, [r6, #32]
  return HAL_OK;
 8003b86:	e01f      	b.n	8003bc8 <HAL_RTC_SetAlarm_IT+0x124>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003b88:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8003b8c:	bf08      	it	eq
 8003b8e:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003b90:	694b      	ldr	r3, [r1, #20]
 8003b92:	431d      	orrs	r5, r3
 8003b94:	432c      	orrs	r4, r5
 8003b96:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8003b9a:	78c8      	ldrb	r0, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8003b9c:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
 8003ba0:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8003ba4:	ea44 6408 	orr.w	r4, r4, r8, lsl #24
 8003ba8:	e7b5      	b.n	8003b16 <HAL_RTC_SetAlarm_IT+0x72>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003baa:	f7fd f96d 	bl	8000e88 <HAL_GetTick>
 8003bae:	eba0 0008 	sub.w	r0, r0, r8
 8003bb2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003bb6:	d9c5      	bls.n	8003b44 <HAL_RTC_SetAlarm_IT+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb8:	6833      	ldr	r3, [r6, #0]
 8003bba:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bbc:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bc0:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8003bc4:	f886 7020 	strb.w	r7, [r6, #32]
}
 8003bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bd0:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f463 7320 	orn	r3, r3, #640	; 0x280
 8003bda:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 8003bdc:	f7fd f954 	bl	8000e88 <HAL_GetTick>
 8003be0:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003be2:	6833      	ldr	r3, [r6, #0]
 8003be4:	68df      	ldr	r7, [r3, #12]
 8003be6:	f017 0702 	ands.w	r7, r7, #2
 8003bea:	d009      	beq.n	8003c00 <HAL_RTC_SetAlarm_IT+0x15c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003bec:	621c      	str	r4, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003bee:	649d      	str	r5, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bfe:	e7af      	b.n	8003b60 <HAL_RTC_SetAlarm_IT+0xbc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c00:	f7fd f942 	bl	8000e88 <HAL_GetTick>
 8003c04:	eba0 0008 	sub.w	r0, r0, r8
 8003c08:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c0c:	d9e9      	bls.n	8003be2 <HAL_RTC_SetAlarm_IT+0x13e>
 8003c0e:	e7d3      	b.n	8003bb8 <HAL_RTC_SetAlarm_IT+0x114>
 8003c10:	40010400 	.word	0x40010400

08003c14 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003c14:	0903      	lsrs	r3, r0, #4
 8003c16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003c1a:	f000 000f 	and.w	r0, r0, #15
 8003c1e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8003c22:	b2c0      	uxtb	r0, r0
 8003c24:	4770      	bx	lr

08003c26 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003c26:	6803      	ldr	r3, [r0, #0]
 8003c28:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003c2a:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003c2c:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c34:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
{
 8003c38:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003c3a:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8003c3e:	0c1d      	lsrs	r5, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003c40:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8003c42:	f3c3 2606 	ubfx	r6, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8003c46:	f005 003f 	and.w	r0, r5, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003c4a:	b2dc      	uxtb	r4, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8003c4c:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8003c50:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8003c52:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003c54:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8003c56:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8003c58:	b952      	cbnz	r2, 8003c70 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003c5a:	f7ff ffdb 	bl	8003c14 <RTC_Bcd2ToByte>
 8003c5e:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003c60:	4630      	mov	r0, r6
 8003c62:	f7ff ffd7 	bl	8003c14 <RTC_Bcd2ToByte>
 8003c66:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f7ff ffd3 	bl	8003c14 <RTC_Bcd2ToByte>
 8003c6e:	7088      	strb	r0, [r1, #2]
}
 8003c70:	2000      	movs	r0, #0
 8003c72:	bd70      	pop	{r4, r5, r6, pc}

08003c74 <HAL_RTC_GetDate>:
{
 8003c74:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003c76:	6803      	ldr	r3, [r0, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8003c82:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8003c84:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003c88:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8003c8a:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8003c8e:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8003c90:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003c92:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8003c94:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8003c96:	b952      	cbnz	r2, 8003cae <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003c98:	f7ff ffbc 	bl	8003c14 <RTC_Bcd2ToByte>
 8003c9c:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	f7ff ffb8 	bl	8003c14 <RTC_Bcd2ToByte>
 8003ca4:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f7ff ffb4 	bl	8003c14 <RTC_Bcd2ToByte>
 8003cac:	7088      	strb	r0, [r1, #2]
}
 8003cae:	2000      	movs	r0, #0
 8003cb0:	bd38      	pop	{r3, r4, r5, pc}

08003cb2 <HAL_RTCEx_DeactivateWakeUpTimer>:
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0;

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8003cb2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003cb6:	2b01      	cmp	r3, #1
{
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	4604      	mov	r4, r0
 8003cbc:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003cc0:	d030      	beq.n	8003d24 <HAL_RTCEx_DeactivateWakeUpTimer+0x72>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f884 3020 	strb.w	r3, [r4, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cc8:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cca:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cce:	22ca      	movs	r2, #202	; 0xca
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24
 8003cd2:	2253      	movs	r2, #83	; 0x53
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cdc:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ce4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003ce6:	f7fd f8cf 	bl	8000e88 <HAL_GetTick>
 8003cea:	4606      	mov	r6, r0
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003cec:	6822      	ldr	r2, [r4, #0]
 8003cee:	68d5      	ldr	r5, [r2, #12]
 8003cf0:	f015 0504 	ands.w	r5, r5, #4
 8003cf4:	d008      	beq.n	8003d08 <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
      return HAL_TIMEOUT;
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cf6:	23ff      	movs	r3, #255	; 0xff
 8003cf8:	6253      	str	r3, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003cfa:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8003d02:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
 8003d06:	e00d      	b.n	8003d24 <HAL_RTCEx_DeactivateWakeUpTimer+0x72>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d08:	f7fd f8be 	bl	8000e88 <HAL_GetTick>
 8003d0c:	1b80      	subs	r0, r0, r6
 8003d0e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003d12:	d9eb      	bls.n	8003cec <HAL_RTCEx_DeactivateWakeUpTimer+0x3a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d18:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d1c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      __HAL_UNLOCK(hrtc);
 8003d20:	f884 5020 	strb.w	r5, [r4, #32]
}
 8003d24:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d28 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read   
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2c:	b087      	sub	sp, #28
 8003d2e:	4604      	mov	r4, r0
 8003d30:	460d      	mov	r5, r1
 8003d32:	4690      	mov	r8, r2
 8003d34:	4699      	mov	r9, r3
 8003d36:	9f10      	ldr	r7, [sp, #64]	; 0x40
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003d38:	f7fd f8a6 	bl	8000e88 <HAL_GetTick>
 8003d3c:	4606      	mov	r6, r0
  uint32_t count, data;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;
  
  if(NULL == pData)
 8003d3e:	b92d      	cbnz	r5, 8003d4c <HAL_SD_ReadBlocks+0x24>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003d46:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003d48:	2001      	movs	r0, #1
 8003d4a:	e010      	b.n	8003d6e <HAL_SD_ReadBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8003d4c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003d50:	b2c0      	uxtb	r0, r0
 8003d52:	2801      	cmp	r0, #1
 8003d54:	f040 80e8 	bne.w	8003f28 <HAL_SD_ReadBlocks+0x200>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d58:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003d5a:	eb08 0309 	add.w	r3, r8, r9
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d5e:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d60:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d62:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d64:	d906      	bls.n	8003d74 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d6c:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 8003d6e:	b007      	add	sp, #28
 8003d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8003d74:	2303      	movs	r3, #3
 8003d76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003d7a:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8003d7e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d80:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d82:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8003d86:	bf18      	it	ne
 8003d88:	ea4f 2848 	movne.w	r8, r8, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d8c:	f001 f999 	bl	80050c2 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d90:	b148      	cbz	r0, 8003da6 <HAL_SD_ReadBlocks+0x7e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	4a66      	ldr	r2, [pc, #408]	; (8003f30 <HAL_SD_ReadBlocks+0x208>)
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003d98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d9a:	4318      	orrs	r0, r3
 8003d9c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003da4:	e7e3      	b.n	8003d6e <HAL_SD_ReadBlocks+0x46>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003dac:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003db0:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003db2:	9004      	str	r0, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003db4:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003db6:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003dba:	f04f 0b02 	mov.w	fp, #2
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003dbe:	4669      	mov	r1, sp
 8003dc0:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003dc2:	f8cd a014 	str.w	sl, [sp, #20]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003dc6:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003dca:	f001 f968 	bl	800509e <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8003dce:	45d1      	cmp	r9, sl
 8003dd0:	d913      	bls.n	8003dfa <HAL_SD_ReadBlocks+0xd2>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003dd2:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	6820      	ldr	r0, [r4, #0]
 8003dda:	f001 f9a2 	bl	8005122 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d03e      	beq.n	8003e60 <HAL_SD_ReadBlocks+0x138>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	4a52      	ldr	r2, [pc, #328]	; (8003f30 <HAL_SD_ReadBlocks+0x208>)
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003de8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dea:	4318      	orrs	r0, r3
 8003dec:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003dee:	2001      	movs	r0, #1
        hsd->Context = SD_CONTEXT_NONE;
 8003df0:	2300      	movs	r3, #0
        hsd->State= HAL_SD_STATE_READY;
 8003df2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003df6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8003df8:	e7b9      	b.n	8003d6e <HAL_SD_ReadBlocks+0x46>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003dfa:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003dfe:	4641      	mov	r1, r8
 8003e00:	6820      	ldr	r0, [r4, #0]
 8003e02:	f001 f976 	bl	80050f2 <SDMMC_CmdReadSingleBlock>
 8003e06:	e7ea      	b.n	8003dde <HAL_SD_ReadBlocks+0xb6>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8003e08:	041a      	lsls	r2, r3, #16
 8003e0a:	d516      	bpl.n	8003e3a <HAL_SD_ReadBlocks+0x112>
 8003e0c:	f105 0804 	add.w	r8, r5, #4
 8003e10:	f105 0a24 	add.w	sl, r5, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003e14:	6820      	ldr	r0, [r4, #0]
 8003e16:	f001 f91d 	bl	8005054 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003e1a:	0a03      	lsrs	r3, r0, #8
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003e1c:	f808 0c04 	strb.w	r0, [r8, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003e20:	f808 3c03 	strb.w	r3, [r8, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003e24:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003e26:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003e28:	f808 3c02 	strb.w	r3, [r8, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003e2c:	f808 0c01 	strb.w	r0, [r8, #-1]
 8003e30:	f108 0804 	add.w	r8, r8, #4
        for(count = 0U; count < 8U; count++)
 8003e34:	45d0      	cmp	r8, sl
 8003e36:	d1ed      	bne.n	8003e14 <HAL_SD_ReadBlocks+0xec>
 8003e38:	3520      	adds	r5, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e3a:	f7fd f825 	bl	8000e88 <HAL_GetTick>
 8003e3e:	1b80      	subs	r0, r0, r6
 8003e40:	42b8      	cmp	r0, r7
 8003e42:	d30d      	bcc.n	8003e60 <HAL_SD_ReadBlocks+0x138>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	4a3a      	ldr	r2, [pc, #232]	; (8003f30 <HAL_SD_ReadBlocks+0x208>)
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003e4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e50:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8003e5c:	2003      	movs	r0, #3
 8003e5e:	e786      	b.n	8003d6e <HAL_SD_ReadBlocks+0x46>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003e60:	6820      	ldr	r0, [r4, #0]
 8003e62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e64:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8003e68:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003e6a:	d0cd      	beq.n	8003e08 <HAL_SD_ReadBlocks+0xe0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003e6c:	05db      	lsls	r3, r3, #23
 8003e6e:	d509      	bpl.n	8003e84 <HAL_SD_ReadBlocks+0x15c>
 8003e70:	f1b9 0f01 	cmp.w	r9, #1
 8003e74:	d906      	bls.n	8003e84 <HAL_SD_ReadBlocks+0x15c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003e76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d003      	beq.n	8003e84 <HAL_SD_ReadBlocks+0x15c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e7c:	f001 f99a 	bl	80051b4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d1ae      	bne.n	8003de2 <HAL_SD_ReadBlocks+0xba>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e88:	f011 0108 	ands.w	r1, r1, #8
 8003e8c:	d006      	beq.n	8003e9c <HAL_SD_ReadBlocks+0x174>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e8e:	4a28      	ldr	r2, [pc, #160]	; (8003f30 <HAL_SD_ReadBlocks+0x208>)
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e94:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003e98:	63a3      	str	r3, [r4, #56]	; 0x38
 8003e9a:	e7a8      	b.n	8003dee <HAL_SD_ReadBlocks+0xc6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9e:	f012 0202 	ands.w	r2, r2, #2
 8003ea2:	d00a      	beq.n	8003eba <HAL_SD_ReadBlocks+0x192>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ea4:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <HAL_SD_ReadBlocks+0x208>)
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ea8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003eaa:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003eac:	f043 0302 	orr.w	r3, r3, #2
 8003eb0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003eb2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003eb6:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003eb8:	e759      	b.n	8003d6e <HAL_SD_ReadBlocks+0x46>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003eba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ebc:	0689      	lsls	r1, r1, #26
 8003ebe:	d525      	bpl.n	8003f0c <HAL_SD_ReadBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ec0:	491b      	ldr	r1, [pc, #108]	; (8003f30 <HAL_SD_ReadBlocks+0x208>)
 8003ec2:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ec6:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003ec8:	f043 0320 	orr.w	r3, r3, #32
 8003ecc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ece:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ed2:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003ed4:	e74b      	b.n	8003d6e <HAL_SD_ReadBlocks+0x46>
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003ed6:	f001 f8bd 	bl	8005054 <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003eda:	0a03      	lsrs	r3, r0, #8
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003edc:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003ee0:	f805 3c03 	strb.w	r3, [r5, #-3]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003ee4:	0c03      	lsrs	r3, r0, #16
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003ee6:	0e00      	lsrs	r0, r0, #24
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003ee8:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003eec:	f805 0c01 	strb.w	r0, [r5, #-1]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003ef0:	f7fc ffca 	bl	8000e88 <HAL_GetTick>
 8003ef4:	1b80      	subs	r0, r0, r6
 8003ef6:	42b8      	cmp	r0, r7
 8003ef8:	f105 0504 	add.w	r5, r5, #4
 8003efc:	d307      	bcc.n	8003f0e <HAL_SD_ReadBlocks+0x1e6>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	4a0b      	ldr	r2, [pc, #44]	; (8003f30 <HAL_SD_ReadBlocks+0x208>)
 8003f02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003f04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f0a:	e7c5      	b.n	8003e98 <HAL_SD_ReadBlocks+0x170>
 8003f0c:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8003f0e:	6820      	ldr	r0, [r4, #0]
 8003f10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f12:	f413 1300 	ands.w	r3, r3, #2097152	; 0x200000
 8003f16:	d1de      	bne.n	8003ed6 <HAL_SD_ReadBlocks+0x1ae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003f18:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f1c:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8003f24:	4618      	mov	r0, r3
 8003f26:	e722      	b.n	8003d6e <HAL_SD_ReadBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003f28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f2e:	e70a      	b.n	8003d46 <HAL_SD_ReadBlocks+0x1e>
 8003f30:	004005ff 	.word	0x004005ff

08003f34 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write 
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f38:	b089      	sub	sp, #36	; 0x24
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	460e      	mov	r6, r1
 8003f3e:	4617      	mov	r7, r2
 8003f40:	4698      	mov	r8, r3
 8003f42:	9d10      	ldr	r5, [sp, #64]	; 0x40
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003f44:	f7fc ffa0 	bl	8000e88 <HAL_GetTick>
 8003f48:	4681      	mov	r9, r0
  uint32_t count, data;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;
  
  if(NULL == pData)
 8003f4a:	b92e      	cbnz	r6, 8003f58 <HAL_SD_WriteBlocks+0x24>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003f52:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003f54:	2001      	movs	r0, #1
 8003f56:	e010      	b.n	8003f7a <HAL_SD_WriteBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8003f58:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003f5c:	b2c0      	uxtb	r0, r0
 8003f5e:	2801      	cmp	r0, #1
 8003f60:	f040 80b6 	bne.w	80040d0 <HAL_SD_WriteBlocks+0x19c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f64:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003f66:	eb07 0308 	add.w	r3, r7, r8
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f6a:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f6c:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f6e:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f70:	d906      	bls.n	8003f80 <HAL_SD_WriteBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f78:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 8003f7a:	b009      	add	sp, #36	; 0x24
 8003f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8003f80:	2303      	movs	r3, #3
 8003f82:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003f86:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f88:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8003f8a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f8c:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f8e:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8003f92:	bf18      	it	ne
 8003f94:	027f      	lslne	r7, r7, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f96:	f001 f894 	bl	80050c2 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f9a:	b148      	cbz	r0, 8003fb0 <HAL_SD_WriteBlocks+0x7c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	4a4e      	ldr	r2, [pc, #312]	; (80040d8 <HAL_SD_WriteBlocks+0x1a4>)
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003fa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fa4:	4318      	orrs	r0, r3
 8003fa6:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fa8:	2001      	movs	r0, #1
 8003faa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003fae:	e7e4      	b.n	8003f7a <HAL_SD_WriteBlocks+0x46>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb4:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003fb6:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003fba:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003fbc:	2390      	movs	r3, #144	; 0x90
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003fbe:	e9cd 3004 	strd	r3, r0, [sp, #16]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003fc2:	9006      	str	r0, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003fc4:	2301      	movs	r3, #1
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003fc6:	a902      	add	r1, sp, #8
 8003fc8:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003fca:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003fcc:	f001 f867 	bl	800509e <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8003fd0:	f1b8 0f01 	cmp.w	r8, #1
 8003fd4:	d913      	bls.n	8003ffe <HAL_SD_WriteBlocks+0xca>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003fd6:	2320      	movs	r3, #32
 8003fd8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003fda:	4639      	mov	r1, r7
 8003fdc:	6820      	ldr	r0, [r4, #0]
 8003fde:	f001 f8d0 	bl	8005182 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d031      	beq.n	800404a <HAL_SD_WriteBlocks+0x116>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	4a3b      	ldr	r2, [pc, #236]	; (80040d8 <HAL_SD_WriteBlocks+0x1a4>)
 8003fea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003fec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fee:	4318      	orrs	r0, r3
 8003ff0:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ff2:	2001      	movs	r0, #1
      hsd->Context = SD_CONTEXT_NONE;
 8003ff4:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8003ff6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ffa:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003ffc:	e7bd      	b.n	8003f7a <HAL_SD_WriteBlocks+0x46>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003ffe:	2310      	movs	r3, #16
 8004000:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004002:	4639      	mov	r1, r7
 8004004:	6820      	ldr	r0, [r4, #0]
 8004006:	f001 f8a4 	bl	8005152 <SDMMC_CmdWriteSingleBlock>
 800400a:	e7ea      	b.n	8003fe2 <HAL_SD_WriteBlocks+0xae>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 800400c:	045a      	lsls	r2, r3, #17
 800400e:	d50a      	bpl.n	8004026 <HAL_SD_WriteBlocks+0xf2>
 8004010:	f106 0720 	add.w	r7, r6, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004014:	f856 3b04 	ldr.w	r3, [r6], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004018:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800401a:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800401c:	a901      	add	r1, sp, #4
 800401e:	f001 f81c 	bl	800505a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004022:	42b7      	cmp	r7, r6
 8004024:	d1f6      	bne.n	8004014 <HAL_SD_WriteBlocks+0xe0>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004026:	f7fc ff2f 	bl	8000e88 <HAL_GetTick>
 800402a:	eba0 0009 	sub.w	r0, r0, r9
 800402e:	42a8      	cmp	r0, r5
 8004030:	d30b      	bcc.n	800404a <HAL_SD_WriteBlocks+0x116>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	4a28      	ldr	r2, [pc, #160]	; (80040d8 <HAL_SD_WriteBlocks+0x1a4>)
 8004036:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004038:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800403a:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800403c:	2301      	movs	r3, #1
 800403e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004042:	2300      	movs	r3, #0
 8004044:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8004046:	2003      	movs	r0, #3
 8004048:	e797      	b.n	8003f7a <HAL_SD_WriteBlocks+0x46>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800404a:	6820      	ldr	r0, [r4, #0]
 800404c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800404e:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8004052:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004054:	d0da      	beq.n	800400c <HAL_SD_WriteBlocks+0xd8>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004056:	05db      	lsls	r3, r3, #23
 8004058:	d509      	bpl.n	800406e <HAL_SD_WriteBlocks+0x13a>
 800405a:	f1b8 0f01 	cmp.w	r8, #1
 800405e:	d906      	bls.n	800406e <HAL_SD_WriteBlocks+0x13a>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004060:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004062:	2b03      	cmp	r3, #3
 8004064:	d003      	beq.n	800406e <HAL_SD_WriteBlocks+0x13a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004066:	f001 f8a5 	bl	80051b4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800406a:	2800      	cmp	r0, #0
 800406c:	d1bb      	bne.n	8003fe6 <HAL_SD_WriteBlocks+0xb2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004072:	f011 0108 	ands.w	r1, r1, #8
 8004076:	d006      	beq.n	8004086 <HAL_SD_WriteBlocks+0x152>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004078:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_SD_WriteBlocks+0x1a4>)
 800407a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800407c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800407e:	f043 0308 	orr.w	r3, r3, #8
 8004082:	63a3      	str	r3, [r4, #56]	; 0x38
 8004084:	e7b5      	b.n	8003ff2 <HAL_SD_WriteBlocks+0xbe>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004088:	f012 0202 	ands.w	r2, r2, #2
 800408c:	d00a      	beq.n	80040a4 <HAL_SD_WriteBlocks+0x170>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800408e:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <HAL_SD_WriteBlocks+0x1a4>)
 8004090:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004092:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004094:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004096:	f043 0302 	orr.w	r3, r3, #2
 800409a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800409c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040a0:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80040a2:	e76a      	b.n	8003f7a <HAL_SD_WriteBlocks+0x46>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80040a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80040a6:	f010 0010 	ands.w	r0, r0, #16
 80040aa:	d00a      	beq.n	80040c2 <HAL_SD_WriteBlocks+0x18e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80040ac:	490a      	ldr	r1, [pc, #40]	; (80040d8 <HAL_SD_WriteBlocks+0x1a4>)
 80040ae:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80040b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040b2:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80040b4:	f043 0310 	orr.w	r3, r3, #16
 80040b8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040ba:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040be:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80040c0:	e75b      	b.n	8003f7a <HAL_SD_WriteBlocks+0x46>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80040c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80040ce:	e754      	b.n	8003f7a <HAL_SD_WriteBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80040d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040d6:	e73c      	b.n	8003f52 <HAL_SD_WriteBlocks+0x1e>
 80040d8:	004005ff 	.word	0x004005ff

080040dc <HAL_SD_GetCardCSD>:
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypedef *pCSD)
{
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80040dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80040de:	0f9a      	lsrs	r2, r3, #30
 80040e0:	700a      	strb	r2, [r1, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80040e2:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80040e6:	704a      	strb	r2, [r1, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80040e8:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80040ec:	708a      	strb	r2, [r1, #2]
  
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80040ee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80040f2:	70ca      	strb	r2, [r1, #3]
  
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80040f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
  
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80040f8:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80040fa:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80040fc:	714b      	strb	r3, [r1, #5]
  
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80040fe:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004100:	0d1a      	lsrs	r2, r3, #20
 8004102:	80ca      	strh	r2, [r1, #6]
  
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004104:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8004108:	720a      	strb	r2, [r1, #8]
  
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800410a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800410e:	724a      	strb	r2, [r1, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004110:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8004114:	728a      	strb	r2, [r1, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004116:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800411a:	72ca      	strb	r2, [r1, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800411c:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8004120:	730a      	strb	r2, [r1, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004122:	2200      	movs	r2, #0
 8004124:	734a      	strb	r2, [r1, #13]
  
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004126:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8004128:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 800412a:	2a00      	cmp	r2, #0
 800412c:	d16b      	bne.n	8004206 <HAL_SD_GetCardCSD+0x12a>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800412e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8004130:	f640 74fc 	movw	r4, #4092	; 0xffc
 8004134:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8004138:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800413c:	610b      	str	r3, [r1, #16]
    
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800413e:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8004142:	750b      	strb	r3, [r1, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004144:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8004148:	754b      	strb	r3, [r1, #21]
    
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800414a:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800414e:	758b      	strb	r3, [r1, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004150:	f3c2 4382 	ubfx	r3, r2, #18, #3

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004154:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004158:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800415a:	760a      	strb	r2, [r1, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800415c:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800415e:	7e0a      	ldrb	r2, [r1, #24]
 8004160:	f002 0207 	and.w	r2, r2, #7
 8004164:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004166:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004168:	4093      	lsls	r3, r2
 800416a:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800416c:	7a0a      	ldrb	r2, [r1, #8]
 800416e:	f002 040f 	and.w	r4, r2, #15
 8004172:	2201      	movs	r2, #1
 8004174:	40a2      	lsls	r2, r4
 8004176:	6582      	str	r2, [r0, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8004178:	0a52      	lsrs	r2, r2, #9
 800417a:	4353      	muls	r3, r2
 800417c:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800417e:	f44f 7300 	mov.w	r3, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
    hsd->SdCard.BlockSize = 512U;
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004182:	6603      	str	r3, [r0, #96]	; 0x60
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
  }
  
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004184:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004186:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800418a:	764a      	strb	r2, [r1, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800418c:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004194:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004196:	76cb      	strb	r3, [r1, #27]
  
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004198:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800419a:	0fda      	lsrs	r2, r3, #31
 800419c:	770a      	strb	r2, [r1, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800419e:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80041a2:	774a      	strb	r2, [r1, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80041a4:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80041a8:	778a      	strb	r2, [r1, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80041aa:	f3c3 5283 	ubfx	r2, r3, #22, #4
 80041ae:	77ca      	strb	r2, [r1, #31]
  
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80041b0:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80041b4:	f881 2020 	strb.w	r2, [r1, #32]

  pCSD->Reserved3 = 0;
 80041b8:	2000      	movs	r0, #0

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80041ba:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 80041be:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80041c2:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80041c6:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80041ca:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80041ce:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80041d2:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80041d6:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80041da:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80041de:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80041e2:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80041e6:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80041ea:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80041ee:	f3c3 2201 	ubfx	r2, r3, #8, #2
  
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80041f2:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80041f6:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80041fa:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80041fe:	2301      	movs	r3, #1
 8004200:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  
  return HAL_OK;
}
 8004204:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004206:	2a01      	cmp	r2, #1
 8004208:	d10f      	bne.n	800422a <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800420a:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004214:	4313      	orrs	r3, r2
 8004216:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004218:	690b      	ldr	r3, [r1, #16]
 800421a:	3301      	adds	r3, #1
 800421c:	029b      	lsls	r3, r3, #10
 800421e:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004220:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004226:	6583      	str	r3, [r0, #88]	; 0x58
 8004228:	e7ab      	b.n	8004182 <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800422a:	6803      	ldr	r3, [r0, #0]
 800422c:	4a05      	ldr	r2, [pc, #20]	; (8004244 <HAL_SD_GetCardCSD+0x168>)
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004230:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004236:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004238:	2301      	movs	r3, #1
 800423a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800423e:	4618      	mov	r0, r3
 8004240:	e7e0      	b.n	8004204 <HAL_SD_GetCardCSD+0x128>
 8004242:	bf00      	nop
 8004244:	004005ff 	.word	0x004005ff

08004248 <HAL_SD_InitCard>:
{
 8004248:	b570      	push	{r4, r5, r6, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800424a:	2300      	movs	r3, #0
{
 800424c:	b098      	sub	sp, #96	; 0x60
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800424e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004252:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004256:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004258:	2376      	movs	r3, #118	; 0x76
 800425a:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 800425c:	ab0a      	add	r3, sp, #40	; 0x28
{
 800425e:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 8004260:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004264:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004268:	ab07      	add	r3, sp, #28
 800426a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800426c:	6820      	ldr	r0, [r4, #0]
 800426e:	f000 fed5 	bl	800501c <SDMMC_Init>
  if(status != HAL_OK)
 8004272:	b118      	cbz	r0, 800427c <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8004274:	2501      	movs	r5, #1
}
 8004276:	4628      	mov	r0, r5
 8004278:	b018      	add	sp, #96	; 0x60
 800427a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_SD_DISABLE(hsd); 
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	6843      	ldr	r3, [r0, #4]
 8004280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004284:	6043      	str	r3, [r0, #4]
  status = SDMMC_PowerState_ON(hsd->Instance);
 8004286:	f000 feed 	bl	8005064 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800428a:	4605      	mov	r5, r0
 800428c:	2800      	cmp	r0, #0
 800428e:	d1f1      	bne.n	8004274 <HAL_SD_InitCard+0x2c>
  __HAL_SD_ENABLE(hsd);
 8004290:	6822      	ldr	r2, [r4, #0]
 8004292:	6853      	ldr	r3, [r2, #4]
 8004294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004298:	6053      	str	r3, [r2, #4]
  HAL_Delay(2U);
 800429a:	2002      	movs	r0, #2
 800429c:	f7fc fdfa 	bl	8000e94 <HAL_Delay>
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80042a0:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 80042a2:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80042a4:	f000 ffb8 	bl	8005218 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80042a8:	4606      	mov	r6, r0
 80042aa:	b970      	cbnz	r0, 80042ca <HAL_SD_InitCard+0x82>
  {
    return errorstate;
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80042ac:	6820      	ldr	r0, [r4, #0]
 80042ae:	f000 ffdb 	bl	8005268 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d073      	beq.n	800439e <HAL_SD_InitCard+0x156>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80042b6:	64a6      	str	r6, [r4, #72]	; 0x48
      
#if !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80042b8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80042bc:	9b06      	ldr	r3, [sp, #24]
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	42ab      	cmp	r3, r5
 80042c2:	9206      	str	r2, [sp, #24]
 80042c4:	d108      	bne.n	80042d8 <HAL_SD_InitCard+0x90>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80042c6:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 80042ca:	2501      	movs	r5, #1
 80042cc:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80042d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80042d2:	430e      	orrs	r6, r1
 80042d4:	63a6      	str	r6, [r4, #56]	; 0x38
 80042d6:	e7ce      	b.n	8004276 <HAL_SD_InitCard+0x2e>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80042d8:	2100      	movs	r1, #0
 80042da:	6820      	ldr	r0, [r4, #0]
 80042dc:	f001 f800 	bl	80052e0 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80042e0:	4601      	mov	r1, r0
 80042e2:	b110      	cbz	r0, 80042ea <HAL_SD_InitCard+0xa2>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042e4:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80042e8:	e7ef      	b.n	80042ca <HAL_SD_InitCard+0x82>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80042ea:	6820      	ldr	r0, [r4, #0]
 80042ec:	f001 f810 	bl	8005310 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80042f0:	4601      	mov	r1, r0
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d1f6      	bne.n	80042e4 <HAL_SD_InitCard+0x9c>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80042f6:	6820      	ldr	r0, [r4, #0]
 80042f8:	f000 fece 	bl	8005098 <SDMMC_GetResponse>
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80042fc:	2800      	cmp	r0, #0
 80042fe:	dadd      	bge.n	80042bc <HAL_SD_InitCard+0x74>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8004300:	2300      	movs	r3, #0
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004302:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDMMC_GetPowerState(hsd->Instance) == 0U) 
 8004304:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8004306:	2301      	movs	r3, #1
 8004308:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U) 
 800430c:	f000 feae 	bl	800506c <SDMMC_GetPowerState>
 8004310:	2800      	cmp	r0, #0
 8004312:	f000 8095 	beq.w	8004440 <HAL_SD_InitCard+0x1f8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004316:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004318:	2b03      	cmp	r3, #3
 800431a:	d019      	beq.n	8004350 <HAL_SD_InitCard+0x108>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800431c:	6820      	ldr	r0, [r4, #0]
 800431e:	f001 f810 	bl	8005342 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004322:	2800      	cmp	r0, #0
 8004324:	d164      	bne.n	80043f0 <HAL_SD_InitCard+0x1a8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004326:	4601      	mov	r1, r0
 8004328:	6820      	ldr	r0, [r4, #0]
 800432a:	f000 feb5 	bl	8005098 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800432e:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004330:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	f000 feb0 	bl	8005098 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004338:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800433a:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800433c:	6820      	ldr	r0, [r4, #0]
 800433e:	f000 feab 	bl	8005098 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004342:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004344:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004346:	6820      	ldr	r0, [r4, #0]
 8004348:	f000 fea6 	bl	8005098 <SDMMC_GetResponse>
 800434c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004350:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004352:	2b03      	cmp	r3, #3
 8004354:	d145      	bne.n	80043e2 <HAL_SD_InitCard+0x19a>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004356:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004358:	2b03      	cmp	r3, #3
 800435a:	d150      	bne.n	80043fe <HAL_SD_InitCard+0x1b6>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800435c:	2104      	movs	r1, #4
 800435e:	6820      	ldr	r0, [r4, #0]
 8004360:	f000 fe9a 	bl	8005098 <SDMMC_GetResponse>
 8004364:	0d00      	lsrs	r0, r0, #20
 8004366:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004368:	a90d      	add	r1, sp, #52	; 0x34
 800436a:	4620      	mov	r0, r4
 800436c:	f7ff feb6 	bl	80040dc <HAL_SD_GetCardCSD>
 8004370:	4605      	mov	r5, r0
 8004372:	2800      	cmp	r0, #0
 8004374:	d161      	bne.n	800443a <HAL_SD_InitCard+0x1f2>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8004376:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004378:	4603      	mov	r3, r0
 800437a:	0412      	lsls	r2, r2, #16
 800437c:	6820      	ldr	r0, [r4, #0]
 800437e:	f000 ff33 	bl	80051e8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004382:	2800      	cmp	r0, #0
 8004384:	d134      	bne.n	80043f0 <HAL_SD_InitCard+0x1a8>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004386:	f104 0310 	add.w	r3, r4, #16
 800438a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800438e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004392:	1d23      	adds	r3, r4, #4
 8004394:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004396:	6820      	ldr	r0, [r4, #0]
 8004398:	f000 fe40 	bl	800501c <SDMMC_Init>
 800439c:	e76b      	b.n	8004276 <HAL_SD_InitCard+0x2e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800439e:	2301      	movs	r3, #1
 80043a0:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80043a2:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80043a6:	9b06      	ldr	r3, [sp, #24]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	42ab      	cmp	r3, r5
 80043ac:	9206      	str	r2, [sp, #24]
 80043ae:	d08a      	beq.n	80042c6 <HAL_SD_InitCard+0x7e>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80043b0:	2100      	movs	r1, #0
 80043b2:	6820      	ldr	r0, [r4, #0]
 80043b4:	f000 ff94 	bl	80052e0 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80043b8:	4606      	mov	r6, r0
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d185      	bne.n	80042ca <HAL_SD_InitCard+0x82>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80043be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	f000 ffa4 	bl	8005310 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80043c8:	4606      	mov	r6, r0
 80043ca:	2800      	cmp	r0, #0
 80043cc:	f47f af7d 	bne.w	80042ca <HAL_SD_InitCard+0x82>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80043d0:	4601      	mov	r1, r0
 80043d2:	6820      	ldr	r0, [r4, #0]
 80043d4:	f000 fe60 	bl	8005098 <SDMMC_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80043d8:	0fc3      	lsrs	r3, r0, #31
 80043da:	d0e4      	beq.n	80043a6 <HAL_SD_InitCard+0x15e>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80043dc:	0042      	lsls	r2, r0, #1
 80043de:	d58f      	bpl.n	8004300 <HAL_SD_InitCard+0xb8>
 80043e0:	e78f      	b.n	8004302 <HAL_SD_InitCard+0xba>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80043e2:	f10d 0116 	add.w	r1, sp, #22
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	f000 ffd6 	bl	8005398 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d0b2      	beq.n	8004356 <HAL_SD_InitCard+0x10e>
    hsd->State = HAL_SD_STATE_READY;
 80043f0:	2501      	movs	r5, #1
 80043f2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80043f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80043f8:	4308      	orrs	r0, r1
 80043fa:	63a0      	str	r0, [r4, #56]	; 0x38
 80043fc:	e73b      	b.n	8004276 <HAL_SD_InitCard+0x2e>
    hsd->SdCard.RelCardAdd = sd_rca;
 80043fe:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8004402:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004404:	6820      	ldr	r0, [r4, #0]
 8004406:	0409      	lsls	r1, r1, #16
 8004408:	f000 ffb0 	bl	800536c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800440c:	2800      	cmp	r0, #0
 800440e:	d1ef      	bne.n	80043f0 <HAL_SD_InitCard+0x1a8>
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004410:	4601      	mov	r1, r0
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	f000 fe40 	bl	8005098 <SDMMC_GetResponse>
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004418:	2104      	movs	r1, #4
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800441a:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800441c:	6820      	ldr	r0, [r4, #0]
 800441e:	f000 fe3b 	bl	8005098 <SDMMC_GetResponse>
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004422:	2108      	movs	r1, #8
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004424:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	f000 fe36 	bl	8005098 <SDMMC_GetResponse>
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800442c:	210c      	movs	r1, #12
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800442e:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004430:	6820      	ldr	r0, [r4, #0]
 8004432:	f000 fe31 	bl	8005098 <SDMMC_GetResponse>
 8004436:	6720      	str	r0, [r4, #112]	; 0x70
 8004438:	e790      	b.n	800435c <HAL_SD_InitCard+0x114>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800443a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800443e:	e7d7      	b.n	80043f0 <HAL_SD_InitCard+0x1a8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004440:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004444:	e7d4      	b.n	80043f0 <HAL_SD_InitCard+0x1a8>

08004446 <HAL_SD_Init>:
{ 
 8004446:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8004448:	4604      	mov	r4, r0
 800444a:	b908      	cbnz	r0, 8004450 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 800444c:	2001      	movs	r0, #1
}
 800444e:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8004450:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8004454:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004458:	b913      	cbnz	r3, 8004460 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 800445a:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800445c:	f003 fd5e 	bl	8007f1c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8004460:	2303      	movs	r3, #3
 8004462:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004466:	4620      	mov	r0, r4
 8004468:	f7ff feee 	bl	8004248 <HAL_SD_InitCard>
 800446c:	2800      	cmp	r0, #0
 800446e:	d1ed      	bne.n	800444c <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8004470:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004472:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8004474:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8004476:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800447a:	e7e8      	b.n	800444e <HAL_SD_Init+0x8>

0800447c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800447c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800447e:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004480:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004482:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004484:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004486:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004488:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800448a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800448c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800448e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004490:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004492:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004494:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004496:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004498:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800449a:	61cb      	str	r3, [r1, #28]
}
 800449c:	2000      	movs	r0, #0
 800449e:	4770      	bx	lr

080044a0 <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80044a0:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80044a2:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80044a4:	0409      	lsls	r1, r1, #16
{
 80044a6:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80044a8:	6800      	ldr	r0, [r0, #0]
 80044aa:	f000 ffc3 	bl	8005434 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80044ae:	4601      	mov	r1, r0
 80044b0:	b928      	cbnz	r0, 80044be <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80044b2:	6820      	ldr	r0, [r4, #0]
 80044b4:	f000 fdf0 	bl	8005098 <SDMMC_GetResponse>
}
 80044b8:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80044bc:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80044be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044c0:	4319      	orrs	r1, r3
 80044c2:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80044c4:	2000      	movs	r0, #0
 80044c6:	e7f7      	b.n	80044b8 <HAL_SD_GetCardState+0x18>

080044c8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80044c8:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ca:	4605      	mov	r5, r0
 80044cc:	b1b0      	cbz	r0, 80044fc <HAL_UART_DeInit+0x34>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80044ce:	2324      	movs	r3, #36	; 0x24
 80044d0:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80044d4:	6803      	ldr	r3, [r0, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80044d8:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 80044da:	f022 0201 	bic.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 80044e0:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80044e2:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80044e4:	609c      	str	r4, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80044e6:	f006 fa79 	bl	800a9dc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ea:	676c      	str	r4, [r5, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
  huart->RxState = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80044ec:	f885 4070 	strb.w	r4, [r5, #112]	; 0x70
  huart->gState = HAL_UART_STATE_RESET;
 80044f0:	f885 4071 	strb.w	r4, [r5, #113]	; 0x71

  return HAL_OK;
 80044f4:	4620      	mov	r0, r4
  huart->RxState = HAL_UART_STATE_RESET;
 80044f6:	f885 4072 	strb.w	r4, [r5, #114]	; 0x72
}
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80044fc:	2001      	movs	r0, #1
 80044fe:	e7fc      	b.n	80044fa <HAL_UART_DeInit+0x32>

08004500 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8004500:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004502:	69c1      	ldr	r1, [r0, #28]
{
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004508:	6883      	ldr	r3, [r0, #8]
 800450a:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800450c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800450e:	4303      	orrs	r3, r0
 8004510:	6960      	ldr	r0, [r4, #20]
 8004512:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004514:	48af      	ldr	r0, [pc, #700]	; (80047d4 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004516:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004518:	4028      	ands	r0, r5
 800451a:	4303      	orrs	r3, r0
 800451c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800451e:	6853      	ldr	r3, [r2, #4]
 8004520:	68e0      	ldr	r0, [r4, #12]
 8004522:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004526:	4303      	orrs	r3, r0
 8004528:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800452a:	4bab      	ldr	r3, [pc, #684]	; (80047d8 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800452c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800452e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004530:	bf1c      	itt	ne
 8004532:	6a23      	ldrne	r3, [r4, #32]
 8004534:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004536:	6893      	ldr	r3, [r2, #8]
 8004538:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800453c:	4303      	orrs	r3, r0
 800453e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004540:	4ba6      	ldr	r3, [pc, #664]	; (80047dc <UART_SetConfig+0x2dc>)
 8004542:	429a      	cmp	r2, r3
 8004544:	d119      	bne.n	800457a <UART_SetConfig+0x7a>
 8004546:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800454a:	4aa5      	ldr	r2, [pc, #660]	; (80047e0 <UART_SetConfig+0x2e0>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004554:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004558:	5cd3      	ldrb	r3, [r2, r3]
 800455a:	f040 8122 	bne.w	80047a2 <UART_SetConfig+0x2a2>
  {
    switch (clocksource)
 800455e:	2b08      	cmp	r3, #8
 8004560:	f200 80b0 	bhi.w	80046c4 <UART_SetConfig+0x1c4>
 8004564:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004568:	00ab0104 	.word	0x00ab0104
 800456c:	00ae00f2 	.word	0x00ae00f2
 8004570:	00ae00fe 	.word	0x00ae00fe
 8004574:	00ae00ae 	.word	0x00ae00ae
 8004578:	00dd      	.short	0x00dd
  UART_GETCLOCKSOURCE(huart, clocksource);
 800457a:	4b9a      	ldr	r3, [pc, #616]	; (80047e4 <UART_SetConfig+0x2e4>)
 800457c:	429a      	cmp	r2, r3
 800457e:	d107      	bne.n	8004590 <UART_SetConfig+0x90>
 8004580:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8004584:	4a98      	ldr	r2, [pc, #608]	; (80047e8 <UART_SetConfig+0x2e8>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	e7e1      	b.n	8004554 <UART_SetConfig+0x54>
 8004590:	4b96      	ldr	r3, [pc, #600]	; (80047ec <UART_SetConfig+0x2ec>)
 8004592:	429a      	cmp	r2, r3
 8004594:	d123      	bne.n	80045de <UART_SetConfig+0xde>
 8004596:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	f000 80c8 	beq.w	8004738 <UART_SetConfig+0x238>
 80045a8:	d80a      	bhi.n	80045c0 <UART_SetConfig+0xc0>
 80045aa:	b97b      	cbnz	r3, 80045cc <UART_SetConfig+0xcc>
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ac:	4b8a      	ldr	r3, [pc, #552]	; (80047d8 <UART_SetConfig+0x2d8>)
 80045ae:	429a      	cmp	r2, r3
 80045b0:	f040 80db 	bne.w	800476a <UART_SetConfig+0x26a>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7fe fe96 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
        break;
 80045b8:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80045ba:	bbd0      	cbnz	r0, 8004632 <UART_SetConfig+0x132>
 80045bc:	4602      	mov	r2, r0
 80045be:	e03e      	b.n	800463e <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	f000 80b3 	beq.w	800472c <UART_SetConfig+0x22c>
 80045c6:	2b30      	cmp	r3, #48	; 0x30
 80045c8:	f000 80a5 	beq.w	8004716 <UART_SetConfig+0x216>
  if (UART_INSTANCE_LOWPOWER(huart))
 80045cc:	4b82      	ldr	r3, [pc, #520]	; (80047d8 <UART_SetConfig+0x2d8>)
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d034      	beq.n	800463c <UART_SetConfig+0x13c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80045d6:	d075      	beq.n	80046c4 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80045d8:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80045da:	2300      	movs	r3, #0
 80045dc:	e07e      	b.n	80046dc <UART_SetConfig+0x1dc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045de:	4b84      	ldr	r3, [pc, #528]	; (80047f0 <UART_SetConfig+0x2f0>)
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d10e      	bne.n	8004602 <UART_SetConfig+0x102>
 80045e4:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045f0:	2b40      	cmp	r3, #64	; 0x40
 80045f2:	f000 80a1 	beq.w	8004738 <UART_SetConfig+0x238>
 80045f6:	d9d8      	bls.n	80045aa <UART_SetConfig+0xaa>
 80045f8:	2b80      	cmp	r3, #128	; 0x80
 80045fa:	f000 8097 	beq.w	800472c <UART_SetConfig+0x22c>
 80045fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004600:	e7e2      	b.n	80045c8 <UART_SetConfig+0xc8>
 8004602:	4b75      	ldr	r3, [pc, #468]	; (80047d8 <UART_SetConfig+0x2d8>)
 8004604:	429a      	cmp	r2, r3
 8004606:	d1e4      	bne.n	80045d2 <UART_SetConfig+0xd2>
 8004608:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004618:	f000 808e 	beq.w	8004738 <UART_SetConfig+0x238>
 800461c:	d9c5      	bls.n	80045aa <UART_SetConfig+0xaa>
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004622:	f000 8083 	beq.w	800472c <UART_SetConfig+0x22c>
 8004626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800462a:	e7cd      	b.n	80045c8 <UART_SetConfig+0xc8>
  if (UART_INSTANCE_LOWPOWER(huart))
 800462c:	2308      	movs	r3, #8
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800462e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8004632:	6862      	ldr	r2, [r4, #4]
 8004634:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8004638:	4281      	cmp	r1, r0
 800463a:	d905      	bls.n	8004648 <UART_SetConfig+0x148>
        ret = HAL_ERROR;
 800463c:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800463e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004640:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60

  return ret;
}
 8004644:	4610      	mov	r0, r2
 8004646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8004648:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800464c:	d8f6      	bhi.n	800463c <UART_SetConfig+0x13c>
        switch (clocksource)
 800464e:	2b08      	cmp	r3, #8
 8004650:	d832      	bhi.n	80046b8 <UART_SetConfig+0x1b8>
 8004652:	e8df f003 	tbb	[pc, r3]
 8004656:	3105      	.short	0x3105
 8004658:	31253112 	.word	0x31253112
 800465c:	3131      	.short	0x3131
 800465e:	28          	.byte	0x28
 800465f:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004660:	f7fe fe40 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004664:	6862      	ldr	r2, [r4, #4]
 8004666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800466a:	0856      	lsrs	r6, r2, #1
 800466c:	2700      	movs	r7, #0
 800466e:	fbe1 6700 	umlal	r6, r7, r1, r0
 8004672:	2300      	movs	r3, #0
 8004674:	4630      	mov	r0, r6
 8004676:	4639      	mov	r1, r7
 8004678:	e007      	b.n	800468a <UART_SetConfig+0x18a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800467a:	4e5e      	ldr	r6, [pc, #376]	; (80047f4 <UART_SetConfig+0x2f4>)
 800467c:	0855      	lsrs	r5, r2, #1
 800467e:	2700      	movs	r7, #0
 8004680:	1970      	adds	r0, r6, r5
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	f147 0100 	adc.w	r1, r7, #0
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800468a:	f7fc fa4f 	bl	8000b2c <__aeabi_uldivmod>
            break;
 800468e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004690:	4b59      	ldr	r3, [pc, #356]	; (80047f8 <UART_SetConfig+0x2f8>)
 8004692:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8004696:	4299      	cmp	r1, r3
 8004698:	d8d0      	bhi.n	800463c <UART_SetConfig+0x13c>
          huart->Instance->BRR = usartdiv;
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	60d8      	str	r0, [r3, #12]
 800469e:	e7ce      	b.n	800463e <UART_SetConfig+0x13e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80046a0:	f7fe fac4 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 80046a4:	e7de      	b.n	8004664 <UART_SetConfig+0x164>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80046a6:	0850      	lsrs	r0, r2, #1
 80046a8:	2600      	movs	r6, #0
 80046aa:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	f146 0100 	adc.w	r1, r6, #0
 80046b6:	e7e8      	b.n	800468a <UART_SetConfig+0x18a>
            ret = HAL_ERROR;
 80046b8:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80046ba:	2000      	movs	r0, #0
 80046bc:	e7e8      	b.n	8004690 <UART_SetConfig+0x190>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046be:	f7fe fe21 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 80046c2:	e057      	b.n	8004774 <UART_SetConfig+0x274>
        ret = HAL_ERROR;
 80046c4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e05c      	b.n	8004784 <UART_SetConfig+0x284>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80046ca:	f7fe fe0b 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80046ce:	6862      	ldr	r2, [r4, #4]
 80046d0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80046d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80046d8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80046da:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046dc:	f1a3 0010 	sub.w	r0, r3, #16
 80046e0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80046e4:	4288      	cmp	r0, r1
 80046e6:	d8a9      	bhi.n	800463c <UART_SetConfig+0x13c>
      huart->Instance->BRR = usartdiv;
 80046e8:	6821      	ldr	r1, [r4, #0]
 80046ea:	60cb      	str	r3, [r1, #12]
 80046ec:	e7a7      	b.n	800463e <UART_SetConfig+0x13e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046ee:	f7fe fe09 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 80046f2:	e7ec      	b.n	80046ce <UART_SetConfig+0x1ce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80046f4:	6860      	ldr	r0, [r4, #4]
 80046f6:	0843      	lsrs	r3, r0, #1
 80046f8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80046fc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004700:	fbb3 f3f0 	udiv	r3, r3, r0
 8004704:	e7e8      	b.n	80046d8 <UART_SetConfig+0x1d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004706:	f7fe fa91 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 800470a:	e7e0      	b.n	80046ce <UART_SetConfig+0x1ce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800470c:	6860      	ldr	r0, [r4, #4]
 800470e:	0843      	lsrs	r3, r0, #1
 8004710:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004714:	e7f4      	b.n	8004700 <UART_SetConfig+0x200>
  if (UART_INSTANCE_LOWPOWER(huart))
 8004716:	4b30      	ldr	r3, [pc, #192]	; (80047d8 <UART_SetConfig+0x2d8>)
 8004718:	429a      	cmp	r2, r3
 800471a:	d087      	beq.n	800462c <UART_SetConfig+0x12c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800471c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004720:	d1f4      	bne.n	800470c <UART_SetConfig+0x20c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004722:	6860      	ldr	r0, [r4, #4]
 8004724:	0843      	lsrs	r3, r0, #1
 8004726:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800472a:	e015      	b.n	8004758 <UART_SetConfig+0x258>
  if (UART_INSTANCE_LOWPOWER(huart))
 800472c:	4b2a      	ldr	r3, [pc, #168]	; (80047d8 <UART_SetConfig+0x2d8>)
 800472e:	429a      	cmp	r2, r3
 8004730:	d109      	bne.n	8004746 <UART_SetConfig+0x246>
 8004732:	2302      	movs	r3, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004734:	4831      	ldr	r0, [pc, #196]	; (80047fc <UART_SetConfig+0x2fc>)
 8004736:	e77c      	b.n	8004632 <UART_SetConfig+0x132>
  if (UART_INSTANCE_LOWPOWER(huart))
 8004738:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <UART_SetConfig+0x2d8>)
 800473a:	429a      	cmp	r2, r3
 800473c:	d10f      	bne.n	800475e <UART_SetConfig+0x25e>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800473e:	f7fe fa75 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
        break;
 8004742:	2304      	movs	r3, #4
 8004744:	e739      	b.n	80045ba <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004746:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800474a:	d1d3      	bne.n	80046f4 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800474c:	6860      	ldr	r0, [r4, #4]
 800474e:	0843      	lsrs	r3, r0, #1
 8004750:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004754:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004758:	fbb3 f3f0 	udiv	r3, r3, r0
 800475c:	e010      	b.n	8004780 <UART_SetConfig+0x280>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800475e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004762:	d1d0      	bne.n	8004706 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004764:	f7fe fa62 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8004768:	e004      	b.n	8004774 <UART_SetConfig+0x274>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800476a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800476e:	d1ac      	bne.n	80046ca <UART_SetConfig+0x1ca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004770:	f7fe fdb8 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004774:	6861      	ldr	r1, [r4, #4]
 8004776:	084a      	lsrs	r2, r1, #1
 8004778:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800477c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004780:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004782:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004784:	f1a3 0010 	sub.w	r0, r3, #16
 8004788:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800478c:	4288      	cmp	r0, r1
 800478e:	f63f af55 	bhi.w	800463c <UART_SetConfig+0x13c>
      brrtemp = usartdiv & 0xFFF0U;
 8004792:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8004796:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004798:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800479c:	430b      	orrs	r3, r1
 800479e:	60c3      	str	r3, [r0, #12]
 80047a0:	e74d      	b.n	800463e <UART_SetConfig+0x13e>
    switch (clocksource)
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	f63f af4a 	bhi.w	800463c <UART_SetConfig+0x13c>
 80047a8:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0x2b0>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080046cb 	.word	0x080046cb
 80047b4:	080046ef 	.word	0x080046ef
 80047b8:	080046f5 	.word	0x080046f5
 80047bc:	0800463d 	.word	0x0800463d
 80047c0:	08004707 	.word	0x08004707
 80047c4:	0800463d 	.word	0x0800463d
 80047c8:	0800463d 	.word	0x0800463d
 80047cc:	0800463d 	.word	0x0800463d
 80047d0:	0800470d 	.word	0x0800470d
 80047d4:	efff69f3 	.word	0xefff69f3
 80047d8:	40008000 	.word	0x40008000
 80047dc:	40013800 	.word	0x40013800
 80047e0:	0800f4e8 	.word	0x0800f4e8
 80047e4:	40004400 	.word	0x40004400
 80047e8:	0800f4ec 	.word	0x0800f4ec
 80047ec:	40004800 	.word	0x40004800
 80047f0:	40004c00 	.word	0x40004c00
 80047f4:	f4240000 	.word	0xf4240000
 80047f8:	000ffcff 	.word	0x000ffcff
 80047fc:	00f42400 	.word	0x00f42400

08004800 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004800:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004802:	07da      	lsls	r2, r3, #31
{
 8004804:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004806:	d506      	bpl.n	8004816 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004808:	6801      	ldr	r1, [r0, #0]
 800480a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800480c:	684a      	ldr	r2, [r1, #4]
 800480e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004812:	4322      	orrs	r2, r4
 8004814:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004816:	079c      	lsls	r4, r3, #30
 8004818:	d506      	bpl.n	8004828 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800481a:	6801      	ldr	r1, [r0, #0]
 800481c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800481e:	684a      	ldr	r2, [r1, #4]
 8004820:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004824:	4322      	orrs	r2, r4
 8004826:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004828:	0759      	lsls	r1, r3, #29
 800482a:	d506      	bpl.n	800483a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800482c:	6801      	ldr	r1, [r0, #0]
 800482e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004830:	684a      	ldr	r2, [r1, #4]
 8004832:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004836:	4322      	orrs	r2, r4
 8004838:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800483a:	071a      	lsls	r2, r3, #28
 800483c:	d506      	bpl.n	800484c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800483e:	6801      	ldr	r1, [r0, #0]
 8004840:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004842:	684a      	ldr	r2, [r1, #4]
 8004844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004848:	4322      	orrs	r2, r4
 800484a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800484c:	06dc      	lsls	r4, r3, #27
 800484e:	d506      	bpl.n	800485e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004850:	6801      	ldr	r1, [r0, #0]
 8004852:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004854:	688a      	ldr	r2, [r1, #8]
 8004856:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800485a:	4322      	orrs	r2, r4
 800485c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800485e:	0699      	lsls	r1, r3, #26
 8004860:	d506      	bpl.n	8004870 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004862:	6801      	ldr	r1, [r0, #0]
 8004864:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004866:	688a      	ldr	r2, [r1, #8]
 8004868:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800486c:	4322      	orrs	r2, r4
 800486e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004870:	065a      	lsls	r2, r3, #25
 8004872:	d50f      	bpl.n	8004894 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004874:	6801      	ldr	r1, [r0, #0]
 8004876:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004878:	684a      	ldr	r2, [r1, #4]
 800487a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800487e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004880:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004884:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004886:	d105      	bne.n	8004894 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004888:	684a      	ldr	r2, [r1, #4]
 800488a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800488c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004890:	4322      	orrs	r2, r4
 8004892:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004894:	061b      	lsls	r3, r3, #24
 8004896:	d506      	bpl.n	80048a6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004898:	6802      	ldr	r2, [r0, #0]
 800489a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800489c:	6853      	ldr	r3, [r2, #4]
 800489e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80048a2:	430b      	orrs	r3, r1
 80048a4:	6053      	str	r3, [r2, #4]
  }
}
 80048a6:	bd10      	pop	{r4, pc}

080048a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ac:	9d06      	ldr	r5, [sp, #24]
 80048ae:	4604      	mov	r4, r0
 80048b0:	460f      	mov	r7, r1
 80048b2:	4616      	mov	r6, r2
 80048b4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b6:	6821      	ldr	r1, [r4, #0]
 80048b8:	69ca      	ldr	r2, [r1, #28]
 80048ba:	ea37 0302 	bics.w	r3, r7, r2
 80048be:	bf0c      	ite	eq
 80048c0:	2201      	moveq	r2, #1
 80048c2:	2200      	movne	r2, #0
 80048c4:	42b2      	cmp	r2, r6
 80048c6:	d001      	beq.n	80048cc <UART_WaitOnFlagUntilTimeout+0x24>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80048c8:	2000      	movs	r0, #0
 80048ca:	e014      	b.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80048cc:	1c6b      	adds	r3, r5, #1
 80048ce:	d0f3      	beq.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048d0:	b99d      	cbnz	r5, 80048fa <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80048e4:	2320      	movs	r3, #32
 80048e6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80048ea:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80048ee:	2300      	movs	r3, #0
 80048f0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80048f4:	2003      	movs	r0, #3
}
 80048f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048fa:	f7fc fac5 	bl	8000e88 <HAL_GetTick>
 80048fe:	eba0 0008 	sub.w	r0, r0, r8
 8004902:	42a8      	cmp	r0, r5
 8004904:	d9d7      	bls.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xe>
 8004906:	e7e4      	b.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x2a>

08004908 <HAL_UART_Transmit>:
{
 8004908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800490c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800490e:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8004912:	2b20      	cmp	r3, #32
{
 8004914:	4604      	mov	r4, r0
 8004916:	460d      	mov	r5, r1
 8004918:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800491a:	d14a      	bne.n	80049b2 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 800491c:	2900      	cmp	r1, #0
 800491e:	d046      	beq.n	80049ae <HAL_UART_Transmit+0xa6>
 8004920:	2a00      	cmp	r2, #0
 8004922:	d044      	beq.n	80049ae <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8004924:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8004928:	2b01      	cmp	r3, #1
 800492a:	d042      	beq.n	80049b2 <HAL_UART_Transmit+0xaa>
 800492c:	2301      	movs	r3, #1
 800492e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004932:	2300      	movs	r3, #0
 8004934:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004936:	2321      	movs	r3, #33	; 0x21
 8004938:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 800493c:	f7fc faa4 	bl	8000e88 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8004940:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8004944:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8004946:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800494a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800494e:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8004950:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004952:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8004954:	b952      	cbnz	r2, 800496c <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004956:	2140      	movs	r1, #64	; 0x40
 8004958:	4620      	mov	r0, r4
 800495a:	f7ff ffa5 	bl	80048a8 <UART_WaitOnFlagUntilTimeout>
 800495e:	b958      	cbnz	r0, 8004978 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8004960:	2320      	movs	r3, #32
 8004962:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8004966:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 800496a:	e006      	b.n	800497a <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496c:	2200      	movs	r2, #0
 800496e:	2180      	movs	r1, #128	; 0x80
 8004970:	4620      	mov	r0, r4
 8004972:	f7ff ff99 	bl	80048a8 <UART_WaitOnFlagUntilTimeout>
 8004976:	b118      	cbz	r0, 8004980 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8004978:	2003      	movs	r0, #3
}
 800497a:	b002      	add	sp, #8
 800497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004980:	68a3      	ldr	r3, [r4, #8]
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004988:	d10d      	bne.n	80049a6 <HAL_UART_Transmit+0x9e>
 800498a:	6923      	ldr	r3, [r4, #16]
 800498c:	b95b      	cbnz	r3, 80049a6 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800498e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004996:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004998:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800499c:	3b01      	subs	r3, #1
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80049a4:	e7d1      	b.n	800494a <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80049a6:	782b      	ldrb	r3, [r5, #0]
 80049a8:	8513      	strh	r3, [r2, #40]	; 0x28
 80049aa:	3501      	adds	r5, #1
 80049ac:	e7f4      	b.n	8004998 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80049ae:	2001      	movs	r0, #1
 80049b0:	e7e3      	b.n	800497a <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 80049b2:	2002      	movs	r0, #2
 80049b4:	e7e1      	b.n	800497a <HAL_UART_Transmit+0x72>

080049b6 <UART_CheckIdleState>:
{
 80049b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049b8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ba:	2600      	movs	r6, #0
 80049bc:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80049be:	f7fc fa63 	bl	8000e88 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80049c8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ca:	d417      	bmi.n	80049fc <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	075b      	lsls	r3, r3, #29
 80049d2:	d50a      	bpl.n	80049ea <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2200      	movs	r2, #0
 80049dc:	462b      	mov	r3, r5
 80049de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7ff ff60 	bl	80048a8 <UART_WaitOnFlagUntilTimeout>
 80049e8:	b9a0      	cbnz	r0, 8004a14 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80049ea:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80049ec:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80049ee:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 80049f2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80049f6:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80049fa:	e00c      	b.n	8004a16 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	4632      	mov	r2, r6
 8004a04:	4603      	mov	r3, r0
 8004a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7ff ff4c 	bl	80048a8 <UART_WaitOnFlagUntilTimeout>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d0db      	beq.n	80049cc <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8004a14:	2003      	movs	r0, #3
}
 8004a16:	b002      	add	sp, #8
 8004a18:	bd70      	pop	{r4, r5, r6, pc}

08004a1a <HAL_UART_Init>:
{
 8004a1a:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	b360      	cbz	r0, 8004a7a <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004a20:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8004a24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a28:	b91b      	cbnz	r3, 8004a32 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004a2a:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8004a2e:	f005 ffb1 	bl	800a994 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004a32:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004a34:	2324      	movs	r3, #36	; 0x24
 8004a36:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8004a3a:	6813      	ldr	r3, [r2, #0]
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a42:	4620      	mov	r0, r4
 8004a44:	f7ff fd5c 	bl	8004500 <UART_SetConfig>
 8004a48:	2801      	cmp	r0, #1
 8004a4a:	d016      	beq.n	8004a7a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a4e:	b113      	cbz	r3, 8004a56 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7ff fed5 	bl	8004800 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a66:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004a6e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004a70:	601a      	str	r2, [r3, #0]
}
 8004a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004a76:	f7ff bf9e 	b.w	80049b6 <UART_CheckIdleState>
}
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	bd10      	pop	{r4, pc}

08004a7e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004a7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004a82:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a84:	fa92 f4a2 	rbit	r4, r2
 8004a88:	684d      	ldr	r5, [r1, #4]
 8004a8a:	fab4 f484 	clz	r4, r4
 8004a8e:	f105 3cff 	add.w	ip, r5, #4294967295

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004a92:	f04f 0801 	mov.w	r8, #1
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004a96:	2603      	movs	r6, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004a98:	f04f 0e0f 	mov.w	lr, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004a9c:	fa32 f304 	lsrs.w	r3, r2, r4
 8004aa0:	d10c      	bne.n	8004abc <LL_GPIO_Init+0x3e>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004aa2:	f1bc 0f01 	cmp.w	ip, #1
 8004aa6:	d806      	bhi.n	8004ab6 <LL_GPIO_Init+0x38>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004aa8:	6843      	ldr	r3, [r0, #4]
 8004aaa:	68c9      	ldr	r1, [r1, #12]
 8004aac:	ea23 0302 	bic.w	r3, r3, r2
 8004ab0:	434a      	muls	r2, r1
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004abc:	fa08 f304 	lsl.w	r3, r8, r4
    if (currentpin)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d066      	beq.n	8004b92 <LL_GPIO_Init+0x114>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004ac4:	f8d0 a000 	ldr.w	sl, [r0]
 8004ac8:	fa93 f9a3 	rbit	r9, r3
 8004acc:	fab9 f989 	clz	r9, r9
 8004ad0:	fa93 f7a3 	rbit	r7, r3
 8004ad4:	fab7 f787 	clz	r7, r7
 8004ad8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8004adc:	fa06 f909 	lsl.w	r9, r6, r9
 8004ae0:	007f      	lsls	r7, r7, #1
 8004ae2:	ea2a 0909 	bic.w	r9, sl, r9
 8004ae6:	fa05 f707 	lsl.w	r7, r5, r7
 8004aea:	ea49 0707 	orr.w	r7, r9, r7
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004aee:	f1bc 0f01 	cmp.w	ip, #1
 8004af2:	6007      	str	r7, [r0, #0]
 8004af4:	d816      	bhi.n	8004b24 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004af6:	6887      	ldr	r7, [r0, #8]
 8004af8:	fa93 f9a3 	rbit	r9, r3
 8004afc:	fab9 f989 	clz	r9, r9
 8004b00:	fa93 faa3 	rbit	sl, r3
 8004b04:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8004b08:	fa06 f909 	lsl.w	r9, r6, r9
 8004b0c:	ea27 0909 	bic.w	r9, r7, r9
 8004b10:	faba fa8a 	clz	sl, sl
 8004b14:	688f      	ldr	r7, [r1, #8]
 8004b16:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8004b1a:	fa07 f70a 	lsl.w	r7, r7, sl
 8004b1e:	ea49 0707 	orr.w	r7, r9, r7
 8004b22:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004b24:	68c7      	ldr	r7, [r0, #12]
 8004b26:	fa93 f9a3 	rbit	r9, r3
 8004b2a:	fab9 f989 	clz	r9, r9
 8004b2e:	fa93 faa3 	rbit	sl, r3
 8004b32:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8004b36:	fa06 f909 	lsl.w	r9, r6, r9
 8004b3a:	ea27 0909 	bic.w	r9, r7, r9
 8004b3e:	faba fa8a 	clz	sl, sl
 8004b42:	690f      	ldr	r7, [r1, #16]
 8004b44:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8004b48:	fa07 f70a 	lsl.w	r7, r7, sl
 8004b4c:	ea49 0707 	orr.w	r7, r9, r7
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004b50:	2d02      	cmp	r5, #2
 8004b52:	60c7      	str	r7, [r0, #12]
 8004b54:	d11d      	bne.n	8004b92 <LL_GPIO_Init+0x114>
 8004b56:	fa93 f7a3 	rbit	r7, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004b5a:	fab7 f787 	clz	r7, r7
 8004b5e:	2f07      	cmp	r7, #7
 8004b60:	f8d1 9014 	ldr.w	r9, [r1, #20]
 8004b64:	dc17      	bgt.n	8004b96 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004b66:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8004b6a:	fa93 fba3 	rbit	fp, r3
 8004b6e:	fabb fb8b 	clz	fp, fp
 8004b72:	fa93 f7a3 	rbit	r7, r3
 8004b76:	fab7 f787 	clz	r7, r7
 8004b7a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8004b7e:	fa0e f303 	lsl.w	r3, lr, r3
 8004b82:	00bf      	lsls	r7, r7, #2
 8004b84:	ea2a 0303 	bic.w	r3, sl, r3
 8004b88:	fa09 f907 	lsl.w	r9, r9, r7
 8004b8c:	ea43 0309 	orr.w	r3, r3, r9
 8004b90:	6203      	str	r3, [r0, #32]
    pinpos++;
 8004b92:	3401      	adds	r4, #1
 8004b94:	e782      	b.n	8004a9c <LL_GPIO_Init+0x1e>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004b96:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	fa93 faa3 	rbit	sl, r3
 8004b9e:	faba fa8a 	clz	sl, sl
 8004ba2:	fa93 f3a3 	rbit	r3, r3
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8004bae:	fa0e fa0a 	lsl.w	sl, lr, sl
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	ea27 070a 	bic.w	r7, r7, sl
 8004bb8:	fa09 f903 	lsl.w	r9, r9, r3
 8004bbc:	ea47 0709 	orr.w	r7, r7, r9
 8004bc0:	6247      	str	r7, [r0, #36]	; 0x24
 8004bc2:	e7e6      	b.n	8004b92 <LL_GPIO_Init+0x114>

08004bc4 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004bc4:	4b02      	ldr	r3, [pc, #8]	; (8004bd0 <LL_RCC_HSI_IsReady+0xc>)
 8004bc6:	6818      	ldr	r0, [r3, #0]
}
 8004bc8:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000

08004bd4 <LL_RCC_LSE_IsReady>:
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004bd4:	4b02      	ldr	r3, [pc, #8]	; (8004be0 <LL_RCC_LSE_IsReady+0xc>)
 8004bd6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8004bda:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004bde:	4770      	bx	lr
 8004be0:	40021000 	.word	0x40021000

08004be4 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL));
 8004be4:	4b02      	ldr	r3, [pc, #8]	; (8004bf0 <LL_RCC_MSI_IsEnabledRangeSelect+0xc>)
 8004be6:	6818      	ldr	r0, [r3, #0]
}
 8004be8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000

08004bf4 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004bf6:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <RCC_GetHCLKClockFreq+0x14>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004bfe:	5cd3      	ldrb	r3, [r2, r3]
}
 8004c00:	40d8      	lsrs	r0, r3
 8004c02:	4770      	bx	lr
 8004c04:	40021000 	.word	0x40021000
 8004c08:	0800fa24 	.word	0x0800fa24

08004c0c <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004c0e:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <RCC_GetPCLK1ClockFreq+0x14>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004c16:	5cd3      	ldrb	r3, [r2, r3]
}
 8004c18:	40d8      	lsrs	r0, r3
 8004c1a:	4770      	bx	lr
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	0800fa34 	.word	0x0800fa34

08004c24 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004c26:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <RCC_GetPCLK2ClockFreq+0x14>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004c2e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004c30:	40d8      	lsrs	r0, r3
 8004c32:	4770      	bx	lr
 8004c34:	40021000 	.word	0x40021000
 8004c38:	0800fa34 	.word	0x0800fa34

08004c3c <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c3c:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <RCC_PLL_GetFreqDomain_SYS+0x7c>)
 8004c3e:	68d3      	ldr	r3, [r2, #12]
 8004c40:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8004c44:	2b02      	cmp	r3, #2
{
 8004c46:	b510      	push	{r4, lr}
  switch (pllsource)
 8004c48:	d034      	beq.n	8004cb4 <RCC_PLL_GetFreqDomain_SYS+0x78>
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d00b      	beq.n	8004c66 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004c4e:	491b      	ldr	r1, [pc, #108]	; (8004cbc <RCC_PLL_GetFreqDomain_SYS+0x80>)
    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004c50:	f7ff ffc8 	bl	8004be4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c54:	4604      	mov	r4, r0
 8004c56:	b9f0      	cbnz	r0, 8004c96 <RCC_PLL_GetFreqDomain_SYS+0x5a>
 8004c58:	f7ff ffc4 	bl	8004be4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c5c:	b1b0      	cbz	r0, 8004c8c <RCC_PLL_GetFreqDomain_SYS+0x50>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004c5e:	6813      	ldr	r3, [r2, #0]
 8004c60:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8004c64:	e000      	b.n	8004c68 <RCC_PLL_GetFreqDomain_SYS+0x2c>
      pllinputfreq = HSE_VALUE;
 8004c66:	4816      	ldr	r0, [pc, #88]	; (8004cc0 <RCC_PLL_GetFreqDomain_SYS+0x84>)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c68:	68d4      	ldr	r4, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c6a:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004c6c:	68d3      	ldr	r3, [r2, #12]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004c6e:	f3c4 1202 	ubfx	r2, r4, #4, #3
 8004c72:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004c76:	3201      	adds	r2, #1
 8004c78:	3301      	adds	r3, #1
 8004c7a:	fbb0 f0f2 	udiv	r0, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c7e:	f3c1 2206 	ubfx	r2, r1, #8, #7
 8004c82:	4350      	muls	r0, r2
 8004c84:	005b      	lsls	r3, r3, #1
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8004c86:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c8a:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004c8c:	f8d2 4094 	ldr.w	r4, [r2, #148]	; 0x94
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004c90:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8004c94:	e7e4      	b.n	8004c60 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8004c96:	f7ff ffa5 	bl	8004be4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c9a:	b128      	cbz	r0, 8004ca8 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004c9c:	6813      	ldr	r3, [r2, #0]
 8004c9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ca2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8004ca6:	e7df      	b.n	8004c68 <RCC_PLL_GetFreqDomain_SYS+0x2c>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004ca8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb2:	e7f6      	b.n	8004ca2 <RCC_PLL_GetFreqDomain_SYS+0x66>
      pllinputfreq = HSI_VALUE;
 8004cb4:	4803      	ldr	r0, [pc, #12]	; (8004cc4 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 8004cb6:	e7d7      	b.n	8004c68 <RCC_PLL_GetFreqDomain_SYS+0x2c>
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	0800fa3c 	.word	0x0800fa3c
 8004cc0:	007a1200 	.word	0x007a1200
 8004cc4:	00f42400 	.word	0x00f42400

08004cc8 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004cc8:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <RCC_GetSystemClockFreq+0x70>)
 8004cca:	6893      	ldr	r3, [r2, #8]
 8004ccc:	f003 030c 	and.w	r3, r3, #12
{
 8004cd0:	b510      	push	{r4, lr}
  switch (LL_RCC_GetSysClkSource())
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d80e      	bhi.n	8004cf4 <RCC_GetSystemClockFreq+0x2c>
 8004cd6:	e8df f003 	tbb	[pc, r3]
 8004cda:	0d0d      	.short	0x0d0d
 8004cdc:	0d2d0d0d 	.word	0x0d2d0d0d
 8004ce0:	0d070d0d 	.word	0x0d070d0d
 8004ce4:	0d0d      	.short	0x0d0d
 8004ce6:	09          	.byte	0x09
 8004ce7:	00          	.byte	0x00
      frequency = HSE_VALUE;
 8004ce8:	4814      	ldr	r0, [pc, #80]	; (8004d3c <RCC_GetSystemClockFreq+0x74>)
}
 8004cea:	bd10      	pop	{r4, pc}
 8004cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004cf0:	f7ff bfa4 	b.w	8004c3c <RCC_PLL_GetFreqDomain_SYS>
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004cf4:	f7ff ff76 	bl	8004be4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004cf8:	4c11      	ldr	r4, [pc, #68]	; (8004d40 <RCC_GetSystemClockFreq+0x78>)
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	b958      	cbnz	r0, 8004d16 <RCC_GetSystemClockFreq+0x4e>
 8004cfe:	f7ff ff71 	bl	8004be4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004d02:	b118      	cbz	r0, 8004d0c <RCC_GetSystemClockFreq+0x44>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004d04:	6813      	ldr	r3, [r2, #0]
 8004d06:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8004d0a:	e7ee      	b.n	8004cea <RCC_GetSystemClockFreq+0x22>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004d0c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
 8004d10:	f3c1 2103 	ubfx	r1, r1, #8, #4
 8004d14:	e7f7      	b.n	8004d06 <RCC_GetSystemClockFreq+0x3e>
 8004d16:	f7ff ff65 	bl	8004be4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004d1a:	b128      	cbz	r0, 8004d28 <RCC_GetSystemClockFreq+0x60>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004d1c:	6813      	ldr	r3, [r2, #0]
 8004d1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d22:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8004d26:	e7e0      	b.n	8004cea <RCC_GetSystemClockFreq+0x22>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004d28:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004d2c:	091b      	lsrs	r3, r3, #4
 8004d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d32:	e7f6      	b.n	8004d22 <RCC_GetSystemClockFreq+0x5a>
      frequency = HSI_VALUE;
 8004d34:	4803      	ldr	r0, [pc, #12]	; (8004d44 <RCC_GetSystemClockFreq+0x7c>)
  return frequency;
 8004d36:	e7d8      	b.n	8004cea <RCC_GetSystemClockFreq+0x22>
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	007a1200 	.word	0x007a1200
 8004d40:	0800fa3c 	.word	0x0800fa3c
 8004d44:	00f42400 	.word	0x00f42400

08004d48 <LL_RCC_GetUSARTClockFreq>:
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004d48:	2803      	cmp	r0, #3
{
 8004d4a:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004d4c:	d128      	bne.n	8004da0 <LL_RCC_GetUSARTClockFreq+0x58>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004d4e:	4b2b      	ldr	r3, [pc, #172]	; (8004dfc <LL_RCC_GetUSARTClockFreq+0xb4>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004d50:	4a2b      	ldr	r2, [pc, #172]	; (8004e00 <LL_RCC_GetUSARTClockFreq+0xb8>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d009      	beq.n	8004d76 <LL_RCC_GetUSARTClockFreq+0x2e>
 8004d62:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8004d66:	d00c      	beq.n	8004d82 <LL_RCC_GetUSARTClockFreq+0x3a>
 8004d68:	3a01      	subs	r2, #1
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d110      	bne.n	8004d90 <LL_RCC_GetUSARTClockFreq+0x48>
}
 8004d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetSystemClockFreq();
 8004d72:	f7ff bfa9 	b.w	8004cc8 <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 8004d76:	f7ff ff25 	bl	8004bc4 <LL_RCC_HSI_IsReady>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d13b      	bne.n	8004df6 <LL_RCC_GetUSARTClockFreq+0xae>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004d7e:	2000      	movs	r0, #0
}
 8004d80:	bd08      	pop	{r3, pc}
        if (LL_RCC_LSE_IsReady())
 8004d82:	f7ff ff27 	bl	8004bd4 <LL_RCC_LSE_IsReady>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d0f9      	beq.n	8004d7e <LL_RCC_GetUSARTClockFreq+0x36>
          usart_frequency = LSE_VALUE;
 8004d8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 8004d8e:	e7f7      	b.n	8004d80 <LL_RCC_GetUSARTClockFreq+0x38>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004d90:	f7ff ff9a 	bl	8004cc8 <RCC_GetSystemClockFreq>
 8004d94:	f7ff ff2e 	bl	8004bf4 <RCC_GetHCLKClockFreq>
}
 8004d98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004d9c:	f7ff bf42 	b.w	8004c24 <RCC_GetPCLK2ClockFreq>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004da0:	280c      	cmp	r0, #12
 8004da2:	d117      	bne.n	8004dd4 <LL_RCC_GetUSARTClockFreq+0x8c>
 8004da4:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <LL_RCC_GetUSARTClockFreq+0xb4>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004da6:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <LL_RCC_GetUSARTClockFreq+0xbc>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d0de      	beq.n	8004d76 <LL_RCC_GetUSARTClockFreq+0x2e>
 8004db8:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8004dbc:	d0e1      	beq.n	8004d82 <LL_RCC_GetUSARTClockFreq+0x3a>
 8004dbe:	3a04      	subs	r2, #4
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d0d4      	beq.n	8004d6e <LL_RCC_GetUSARTClockFreq+0x26>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004dc4:	f7ff ff80 	bl	8004cc8 <RCC_GetSystemClockFreq>
 8004dc8:	f7ff ff14 	bl	8004bf4 <RCC_GetHCLKClockFreq>
}
 8004dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004dd0:	f7ff bf1c 	b.w	8004c0c <RCC_GetPCLK1ClockFreq>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8004dd4:	2830      	cmp	r0, #48	; 0x30
 8004dd6:	d1d2      	bne.n	8004d7e <LL_RCC_GetUSARTClockFreq+0x36>
 8004dd8:	4b08      	ldr	r3, [pc, #32]	; (8004dfc <LL_RCC_GetUSARTClockFreq+0xb4>)
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004dda:	4a0b      	ldr	r2, [pc, #44]	; (8004e08 <LL_RCC_GetUSARTClockFreq+0xc0>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004de4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d0c4      	beq.n	8004d76 <LL_RCC_GetUSARTClockFreq+0x2e>
 8004dec:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004df0:	d0c7      	beq.n	8004d82 <LL_RCC_GetUSARTClockFreq+0x3a>
 8004df2:	3a10      	subs	r2, #16
 8004df4:	e7e4      	b.n	8004dc0 <LL_RCC_GetUSARTClockFreq+0x78>
          usart_frequency = HSI_VALUE;
 8004df6:	4805      	ldr	r0, [pc, #20]	; (8004e0c <LL_RCC_GetUSARTClockFreq+0xc4>)
 8004df8:	e7c2      	b.n	8004d80 <LL_RCC_GetUSARTClockFreq+0x38>
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	00030002 	.word	0x00030002
 8004e04:	000c0008 	.word	0x000c0008
 8004e08:	00300020 	.word	0x00300020
 8004e0c:	00f42400 	.word	0x00f42400

08004e10 <LL_RCC_GetUARTClockFreq>:
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004e10:	28c0      	cmp	r0, #192	; 0xc0
{
 8004e12:	b508      	push	{r3, lr}
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004e14:	d001      	beq.n	8004e1a <LL_RCC_GetUARTClockFreq+0xa>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004e16:	2000      	movs	r0, #0
}
 8004e18:	bd08      	pop	{r3, pc}
 8004e1a:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <LL_RCC_GetUARTClockFreq+0x5c>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004e1c:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <LL_RCC_GetUARTClockFreq+0x60>)
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e26:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <LL_RCC_GetUARTClockFreq+0x32>
 8004e2e:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004e32:	d00c      	beq.n	8004e4e <LL_RCC_GetUARTClockFreq+0x3e>
 8004e34:	3a40      	subs	r2, #64	; 0x40
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d110      	bne.n	8004e5c <LL_RCC_GetUARTClockFreq+0x4c>
}
 8004e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        uart_frequency = RCC_GetSystemClockFreq();
 8004e3e:	f7ff bf43 	b.w	8004cc8 <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 8004e42:	f7ff febf 	bl	8004bc4 <LL_RCC_HSI_IsReady>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d0e5      	beq.n	8004e16 <LL_RCC_GetUARTClockFreq+0x6>
          uart_frequency = HSI_VALUE;
 8004e4a:	480a      	ldr	r0, [pc, #40]	; (8004e74 <LL_RCC_GetUARTClockFreq+0x64>)
 8004e4c:	e7e4      	b.n	8004e18 <LL_RCC_GetUARTClockFreq+0x8>
        if (LL_RCC_LSE_IsReady())
 8004e4e:	f7ff fec1 	bl	8004bd4 <LL_RCC_LSE_IsReady>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0df      	beq.n	8004e16 <LL_RCC_GetUARTClockFreq+0x6>
          uart_frequency = LSE_VALUE;
 8004e56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 8004e5a:	e7dd      	b.n	8004e18 <LL_RCC_GetUARTClockFreq+0x8>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004e5c:	f7ff ff34 	bl	8004cc8 <RCC_GetSystemClockFreq>
 8004e60:	f7ff fec8 	bl	8004bf4 <RCC_GetHCLKClockFreq>
}
 8004e64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004e68:	f7ff bed0 	b.w	8004c0c <RCC_GetPCLK1ClockFreq>
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	00c00080 	.word	0x00c00080
 8004e74:	00f42400 	.word	0x00f42400

08004e78 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e78:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <SDMMC_GetCmdResp2+0x48>)
 8004e7a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e84:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e88:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8004e8a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004e8e:	d313      	bcc.n	8004eb8 <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004e90:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004e92:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004e96:	d0f8      	beq.n	8004e8a <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004e98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e9a:	075b      	lsls	r3, r3, #29
 8004e9c:	d503      	bpl.n	8004ea6 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004e9e:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004ea0:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004ea6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ea8:	f013 0301 	ands.w	r3, r3, #1
 8004eac:	d001      	beq.n	8004eb2 <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e7f6      	b.n	8004ea0 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004eb2:	22c5      	movs	r2, #197	; 0xc5
 8004eb4:	6382      	str	r2, [r0, #56]	; 0x38
 8004eb6:	e7f4      	b.n	8004ea2 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8004eb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ebc:	e7f1      	b.n	8004ea2 <SDMMC_GetCmdResp2+0x2a>
 8004ebe:	bf00      	nop
 8004ec0:	20000024 	.word	0x20000024

08004ec4 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <SDMMC_GetCmdResp3+0x3c>)
 8004ec6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ed0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ed4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8004ed6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004eda:	d30d      	bcc.n	8004ef8 <SDMMC_GetCmdResp3+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004edc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004ede:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004ee2:	d0f8      	beq.n	8004ed6 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004ee4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ee6:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004eea:	bf15      	itete	ne
 8004eec:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004eee:	22c5      	moveq	r2, #197	; 0xc5
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004ef0:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004ef2:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004ef8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000024 	.word	0x20000024

08004f04 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004f04:	4b43      	ldr	r3, [pc, #268]	; (8005014 <SDMMC_GetCmdResp1+0x110>)
{
 8004f06:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8004f0e:	fbb3 f3f4 	udiv	r3, r3, r4
 8004f12:	435a      	muls	r2, r3
    if (count-- == 0U)
 8004f14:	2a00      	cmp	r2, #0
 8004f16:	d048      	beq.n	8004faa <SDMMC_GetCmdResp1+0xa6>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8004f18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f1a:	f013 0f45 	tst.w	r3, #69	; 0x45
 8004f1e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004f22:	d0f7      	beq.n	8004f14 <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004f24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f26:	075b      	lsls	r3, r3, #29
 8004f28:	d503      	bpl.n	8004f32 <SDMMC_GetCmdResp1+0x2e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f2e:	4618      	mov	r0, r3
}
 8004f30:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004f32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f34:	07dc      	lsls	r4, r3, #31
 8004f36:	d503      	bpl.n	8004f40 <SDMMC_GetCmdResp1+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004f38:	2301      	movs	r3, #1
 8004f3a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	e7f7      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
  return (uint8_t)(SDMMCx->RESPCMD);
 8004f40:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	4299      	cmp	r1, r3
 8004f46:	d1f9      	bne.n	8004f3c <SDMMC_GetCmdResp1+0x38>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f48:	23c5      	movs	r3, #197	; 0xc5
 8004f4a:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8004f4c:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004f4e:	4832      	ldr	r0, [pc, #200]	; (8005018 <SDMMC_GetCmdResp1+0x114>)
 8004f50:	4018      	ands	r0, r3
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d0ec      	beq.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	db2a      	blt.n	8004fb0 <SDMMC_GetCmdResp1+0xac>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004f5a:	005a      	lsls	r2, r3, #1
 8004f5c:	d42b      	bmi.n	8004fb6 <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004f5e:	009c      	lsls	r4, r3, #2
 8004f60:	d42b      	bmi.n	8004fba <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004f62:	00d9      	lsls	r1, r3, #3
 8004f64:	d42b      	bmi.n	8004fbe <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004f66:	011a      	lsls	r2, r3, #4
 8004f68:	d42c      	bmi.n	8004fc4 <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004f6a:	015c      	lsls	r4, r3, #5
 8004f6c:	d42d      	bmi.n	8004fca <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004f6e:	01d9      	lsls	r1, r3, #7
 8004f70:	d42e      	bmi.n	8004fd0 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004f72:	021a      	lsls	r2, r3, #8
 8004f74:	d42f      	bmi.n	8004fd6 <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004f76:	025c      	lsls	r4, r3, #9
 8004f78:	d430      	bmi.n	8004fdc <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004f7a:	0299      	lsls	r1, r3, #10
 8004f7c:	d431      	bmi.n	8004fe2 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004f7e:	02da      	lsls	r2, r3, #11
 8004f80:	d432      	bmi.n	8004fe8 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004f82:	035c      	lsls	r4, r3, #13
 8004f84:	d433      	bmi.n	8004fee <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004f86:	0399      	lsls	r1, r3, #14
 8004f88:	d434      	bmi.n	8004ff4 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004f8a:	03da      	lsls	r2, r3, #15
 8004f8c:	d435      	bmi.n	8004ffa <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004f8e:	041c      	lsls	r4, r3, #16
 8004f90:	d436      	bmi.n	8005000 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004f92:	0459      	lsls	r1, r3, #17
 8004f94:	d437      	bmi.n	8005006 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004f96:	049a      	lsls	r2, r3, #18
 8004f98:	d438      	bmi.n	800500c <SDMMC_GetCmdResp1+0x108>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004f9a:	f013 0f08 	tst.w	r3, #8
 8004f9e:	bf14      	ite	ne
 8004fa0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8004fa4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8004fa8:	e7c2      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8004faa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004fae:	e7bf      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004fb0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004fb4:	e7bc      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004fb6:	2040      	movs	r0, #64	; 0x40
 8004fb8:	e7ba      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004fba:	2080      	movs	r0, #128	; 0x80
 8004fbc:	e7b8      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004fbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004fc2:	e7b5      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004fc4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004fc8:	e7b2      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004fca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004fce:	e7af      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004fd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004fd4:	e7ac      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004fd6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004fda:	e7a9      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004fdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004fe0:	e7a6      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004fe2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004fe6:	e7a3      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8004fe8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004fec:	e7a0      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004fee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004ff2:	e79d      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004ff4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004ff8:	e79a      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004ffa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004ffe:	e797      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005000:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005004:	e794      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005006:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800500a:	e791      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 800500c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005010:	e78e      	b.n	8004f30 <SDMMC_GetCmdResp1+0x2c>
 8005012:	bf00      	nop
 8005014:	20000024 	.word	0x20000024
 8005018:	fdffe008 	.word	0xfdffe008

0800501c <SDMMC_Init>:
{
 800501c:	b084      	sub	sp, #16
 800501e:	b510      	push	{r4, lr}
 8005020:	ac03      	add	r4, sp, #12
 8005022:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8005026:	460b      	mov	r3, r1
 8005028:	9904      	ldr	r1, [sp, #16]
 800502a:	6842      	ldr	r2, [r0, #4]
 800502c:	430b      	orrs	r3, r1
 800502e:	9905      	ldr	r1, [sp, #20]
 8005030:	430b      	orrs	r3, r1
 8005032:	9906      	ldr	r1, [sp, #24]
 8005034:	430b      	orrs	r3, r1
 8005036:	9907      	ldr	r1, [sp, #28]
 8005038:	430b      	orrs	r3, r1
 800503a:	9908      	ldr	r1, [sp, #32]
}
 800503c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8005040:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8005044:	430b      	orrs	r3, r1
 8005046:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800504a:	4313      	orrs	r3, r2
 800504c:	6043      	str	r3, [r0, #4]
}
 800504e:	b004      	add	sp, #16
 8005050:	2000      	movs	r0, #0
 8005052:	4770      	bx	lr

08005054 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8005054:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8005058:	4770      	bx	lr

0800505a <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800505a:	680b      	ldr	r3, [r1, #0]
 800505c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8005060:	2000      	movs	r0, #0
 8005062:	4770      	bx	lr

08005064 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005064:	2303      	movs	r3, #3
 8005066:	6003      	str	r3, [r0, #0]
}
 8005068:	2000      	movs	r0, #0
 800506a:	4770      	bx	lr

0800506c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800506c:	6800      	ldr	r0, [r0, #0]
}
 800506e:	f000 0003 	and.w	r0, r0, #3
 8005072:	4770      	bx	lr

08005074 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8005074:	680b      	ldr	r3, [r1, #0]
 8005076:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8005078:	68c3      	ldr	r3, [r0, #12]
 800507a:	684a      	ldr	r2, [r1, #4]
 800507c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005080:	f023 030f 	bic.w	r3, r3, #15
 8005084:	4313      	orrs	r3, r2
 8005086:	688a      	ldr	r2, [r1, #8]
 8005088:	4313      	orrs	r3, r2
 800508a:	68ca      	ldr	r2, [r1, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	690a      	ldr	r2, [r1, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	60c3      	str	r3, [r0, #12]
}
 8005094:	2000      	movs	r0, #0
 8005096:	4770      	bx	lr

08005098 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005098:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800509a:	5840      	ldr	r0, [r0, r1]
}  
 800509c:	4770      	bx	lr

0800509e <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800509e:	680b      	ldr	r3, [r1, #0]
 80050a0:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80050a2:	684b      	ldr	r3, [r1, #4]
 80050a4:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 80050a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80050a8:	688a      	ldr	r2, [r1, #8]
 80050aa:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 80050ae:	4313      	orrs	r3, r2
 80050b0:	68ca      	ldr	r2, [r1, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	690a      	ldr	r2, [r1, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	694a      	ldr	r2, [r1, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80050be:	2000      	movs	r0, #0
 80050c0:	4770      	bx	lr

080050c2 <SDMMC_CmdBlockLength>:
{
 80050c2:	b530      	push	{r4, r5, lr}
 80050c4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050c6:	2410      	movs	r4, #16
 80050c8:	2340      	movs	r3, #64	; 0x40
{
 80050ca:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80050cc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050ce:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050d2:	2200      	movs	r2, #0
 80050d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050d8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050da:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050de:	f7ff ffc9 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80050e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e6:	4621      	mov	r1, r4
 80050e8:	4628      	mov	r0, r5
 80050ea:	f7ff ff0b 	bl	8004f04 <SDMMC_GetCmdResp1>
}
 80050ee:	b007      	add	sp, #28
 80050f0:	bd30      	pop	{r4, r5, pc}

080050f2 <SDMMC_CmdReadSingleBlock>:
{
 80050f2:	b530      	push	{r4, r5, lr}
 80050f4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050f6:	2411      	movs	r4, #17
 80050f8:	2340      	movs	r3, #64	; 0x40
{
 80050fa:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050fc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050fe:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005102:	2200      	movs	r2, #0
 8005104:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005108:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800510a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800510e:	f7ff ffb1 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4621      	mov	r1, r4
 8005118:	4628      	mov	r0, r5
 800511a:	f7ff fef3 	bl	8004f04 <SDMMC_GetCmdResp1>
}
 800511e:	b007      	add	sp, #28
 8005120:	bd30      	pop	{r4, r5, pc}

08005122 <SDMMC_CmdReadMultiBlock>:
{
 8005122:	b530      	push	{r4, r5, lr}
 8005124:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005126:	2412      	movs	r4, #18
 8005128:	2340      	movs	r3, #64	; 0x40
{
 800512a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800512c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800512e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005132:	2200      	movs	r2, #0
 8005134:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005138:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800513a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800513e:	f7ff ff99 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4621      	mov	r1, r4
 8005148:	4628      	mov	r0, r5
 800514a:	f7ff fedb 	bl	8004f04 <SDMMC_GetCmdResp1>
}
 800514e:	b007      	add	sp, #28
 8005150:	bd30      	pop	{r4, r5, pc}

08005152 <SDMMC_CmdWriteSingleBlock>:
{
 8005152:	b530      	push	{r4, r5, lr}
 8005154:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005156:	2418      	movs	r4, #24
 8005158:	2340      	movs	r3, #64	; 0x40
{
 800515a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800515c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800515e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005162:	2200      	movs	r2, #0
 8005164:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005168:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800516a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800516e:	f7ff ff81 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	4621      	mov	r1, r4
 8005178:	4628      	mov	r0, r5
 800517a:	f7ff fec3 	bl	8004f04 <SDMMC_GetCmdResp1>
}
 800517e:	b007      	add	sp, #28
 8005180:	bd30      	pop	{r4, r5, pc}

08005182 <SDMMC_CmdWriteMultiBlock>:
{
 8005182:	b530      	push	{r4, r5, lr}
 8005184:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005186:	2419      	movs	r4, #25
 8005188:	2340      	movs	r3, #64	; 0x40
{
 800518a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800518c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800518e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005192:	2200      	movs	r2, #0
 8005194:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005198:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800519a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800519e:	f7ff ff69 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80051a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a6:	4621      	mov	r1, r4
 80051a8:	4628      	mov	r0, r5
 80051aa:	f7ff feab 	bl	8004f04 <SDMMC_GetCmdResp1>
}
 80051ae:	b007      	add	sp, #28
 80051b0:	bd30      	pop	{r4, r5, pc}
	...

080051b4 <SDMMC_CmdStopTransfer>:
{
 80051b4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80051b6:	2300      	movs	r3, #0
{
 80051b8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80051ba:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051bc:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051be:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 80051c2:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80051c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051c8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ce:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051d0:	f7ff ff50 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80051d4:	4a03      	ldr	r2, [pc, #12]	; (80051e4 <SDMMC_CmdStopTransfer+0x30>)
 80051d6:	4621      	mov	r1, r4
 80051d8:	4628      	mov	r0, r5
 80051da:	f7ff fe93 	bl	8004f04 <SDMMC_GetCmdResp1>
}
 80051de:	b007      	add	sp, #28
 80051e0:	bd30      	pop	{r4, r5, pc}
 80051e2:	bf00      	nop
 80051e4:	05f5e100 	.word	0x05f5e100

080051e8 <SDMMC_CmdSelDesel>:
{
 80051e8:	b530      	push	{r4, r5, lr}
 80051ea:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051ec:	2407      	movs	r4, #7
 80051ee:	2340      	movs	r3, #64	; 0x40
{
 80051f0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80051f2:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051f4:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051f8:	2200      	movs	r2, #0
 80051fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051fe:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005200:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005204:	f7ff ff36 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005208:	f241 3288 	movw	r2, #5000	; 0x1388
 800520c:	4621      	mov	r1, r4
 800520e:	4628      	mov	r0, r5
 8005210:	f7ff fe78 	bl	8004f04 <SDMMC_GetCmdResp1>
}
 8005214:	b007      	add	sp, #28
 8005216:	bd30      	pop	{r4, r5, pc}

08005218 <SDMMC_CmdGoIdleState>:
{
 8005218:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 800521a:	2300      	movs	r3, #0
{
 800521c:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800521e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005222:	e9cd 3303 	strd	r3, r3, [sp, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005226:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800522c:	9305      	str	r3, [sp, #20]
{
 800522e:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005230:	f7ff ff20 	bl	8005074 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <SDMMC_CmdGoIdleState+0x4c>)
 8005236:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005240:	f241 3388 	movw	r3, #5000	; 0x1388
 8005244:	4353      	muls	r3, r2
    if (count-- == 0U)
 8005246:	f113 33ff 	adds.w	r3, r3, #4294967295
 800524a:	d307      	bcc.n	800525c <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800524c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800524e:	0612      	lsls	r2, r2, #24
 8005250:	d5f9      	bpl.n	8005246 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005252:	23c5      	movs	r3, #197	; 0xc5
 8005254:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005256:	2000      	movs	r0, #0
}
 8005258:	b006      	add	sp, #24
 800525a:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800525c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8005260:	e7fa      	b.n	8005258 <SDMMC_CmdGoIdleState+0x40>
 8005262:	bf00      	nop
 8005264:	20000024 	.word	0x20000024

08005268 <SDMMC_CmdOperCond>:
{
 8005268:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800526a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
{
 800526e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005270:	2308      	movs	r3, #8
 8005272:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005276:	2140      	movs	r1, #64	; 0x40
 8005278:	2300      	movs	r3, #0
 800527a:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800527e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005282:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005284:	9305      	str	r3, [sp, #20]
{
 8005286:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005288:	f7ff fef4 	bl	8005074 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800528c:	4b13      	ldr	r3, [pc, #76]	; (80052dc <SDMMC_CmdOperCond+0x74>)
 800528e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	fbb3 f2f2 	udiv	r2, r3, r2
 8005298:	f241 3388 	movw	r3, #5000	; 0x1388
 800529c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800529e:	f113 33ff 	adds.w	r3, r3, #4294967295
 80052a2:	d318      	bcc.n	80052d6 <SDMMC_CmdOperCond+0x6e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80052a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80052a6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80052aa:	d0f8      	beq.n	800529e <SDMMC_CmdOperCond+0x36>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80052ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052ae:	075b      	lsls	r3, r3, #29
 80052b0:	d503      	bpl.n	80052ba <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80052b2:	2004      	movs	r0, #4
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80052b4:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80052b6:	b006      	add	sp, #24
 80052b8:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80052ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80052bc:	f012 0201 	ands.w	r2, r2, #1
 80052c0:	d001      	beq.n	80052c6 <SDMMC_CmdOperCond+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80052c2:	2001      	movs	r0, #1
 80052c4:	e7f6      	b.n	80052b4 <SDMMC_CmdOperCond+0x4c>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80052c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80052c8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80052cc:	d0f3      	beq.n	80052b6 <SDMMC_CmdOperCond+0x4e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80052ce:	2340      	movs	r3, #64	; 0x40
 80052d0:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80052d2:	4610      	mov	r0, r2
 80052d4:	e7ef      	b.n	80052b6 <SDMMC_CmdOperCond+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 80052d6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80052da:	e7ec      	b.n	80052b6 <SDMMC_CmdOperCond+0x4e>
 80052dc:	20000024 	.word	0x20000024

080052e0 <SDMMC_CmdAppCommand>:
{
 80052e0:	b530      	push	{r4, r5, lr}
 80052e2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052e4:	2437      	movs	r4, #55	; 0x37
 80052e6:	2340      	movs	r3, #64	; 0x40
{
 80052e8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80052ea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052ec:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052f0:	2200      	movs	r2, #0
 80052f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052f6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052fc:	f7ff feba 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005300:	f241 3288 	movw	r2, #5000	; 0x1388
 8005304:	4621      	mov	r1, r4
 8005306:	4628      	mov	r0, r5
 8005308:	f7ff fdfc 	bl	8004f04 <SDMMC_GetCmdResp1>
}
 800530c:	b007      	add	sp, #28
 800530e:	bd30      	pop	{r4, r5, pc}

08005310 <SDMMC_CmdAppOperCommand>:
{
 8005310:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005312:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8005316:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005318:	2229      	movs	r2, #41	; 0x29
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800531a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005324:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800532a:	2100      	movs	r1, #0
 800532c:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8005330:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005332:	a901      	add	r1, sp, #4
 8005334:	f7ff fe9e 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005338:	4620      	mov	r0, r4
 800533a:	f7ff fdc3 	bl	8004ec4 <SDMMC_GetCmdResp3>
}
 800533e:	b006      	add	sp, #24
 8005340:	bd10      	pop	{r4, pc}

08005342 <SDMMC_CmdSendCID>:
{
 8005342:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005344:	2300      	movs	r3, #0
{
 8005346:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005348:	2202      	movs	r2, #2
 800534a:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800534e:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005350:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 8005354:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005356:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800535a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800535c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800535e:	f7ff fe89 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005362:	4620      	mov	r0, r4
 8005364:	f7ff fd88 	bl	8004e78 <SDMMC_GetCmdResp2>
}
 8005368:	b006      	add	sp, #24
 800536a:	bd10      	pop	{r4, pc}

0800536c <SDMMC_CmdSendCSD>:
{
 800536c:	b510      	push	{r4, lr}
 800536e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005370:	2209      	movs	r2, #9
 8005372:	23c0      	movs	r3, #192	; 0xc0
 8005374:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 8005378:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800537a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800537e:	2100      	movs	r1, #0
 8005380:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8005384:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005386:	a901      	add	r1, sp, #4
 8005388:	f7ff fe74 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800538c:	4620      	mov	r0, r4
 800538e:	f7ff fd73 	bl	8004e78 <SDMMC_GetCmdResp2>
}
 8005392:	b006      	add	sp, #24
 8005394:	bd10      	pop	{r4, pc}
	...

08005398 <SDMMC_CmdSetRelAdd>:
{
 8005398:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800539a:	2300      	movs	r3, #0
{
 800539c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800539e:	2203      	movs	r2, #3
 80053a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053a4:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 80053aa:	460d      	mov	r5, r1
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053b0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053b2:	9305      	str	r3, [sp, #20]
{
 80053b4:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053b6:	f7ff fe5d 	bl	8005074 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053ba:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <SDMMC_CmdSetRelAdd+0x98>)
 80053bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80053c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80053ca:	4353      	muls	r3, r2
    if (count-- == 0U)
 80053cc:	f113 33ff 	adds.w	r3, r3, #4294967295
 80053d0:	d326      	bcc.n	8005420 <SDMMC_CmdSetRelAdd+0x88>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80053d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80053d4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80053d8:	d0f8      	beq.n	80053cc <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80053da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053dc:	0758      	lsls	r0, r3, #29
 80053de:	d503      	bpl.n	80053e8 <SDMMC_CmdSetRelAdd+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80053e0:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80053e2:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80053e4:	b007      	add	sp, #28
 80053e6:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80053e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053ea:	07d9      	lsls	r1, r3, #31
 80053ec:	d501      	bpl.n	80053f2 <SDMMC_CmdSetRelAdd+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80053ee:	2001      	movs	r0, #1
 80053f0:	e7f7      	b.n	80053e2 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDMMCx->RESPCMD);
 80053f2:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d115      	bne.n	8005426 <SDMMC_CmdSetRelAdd+0x8e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80053fa:	23c5      	movs	r3, #197	; 0xc5
 80053fc:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80053fe:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005400:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8005404:	d102      	bne.n	800540c <SDMMC_CmdSetRelAdd+0x74>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005406:	0c1b      	lsrs	r3, r3, #16
 8005408:	802b      	strh	r3, [r5, #0]
 800540a:	e7eb      	b.n	80053e4 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800540c:	045a      	lsls	r2, r3, #17
 800540e:	d40c      	bmi.n	800542a <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005410:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005414:	bf14      	ite	ne
 8005416:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800541a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800541e:	e7e1      	b.n	80053e4 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8005420:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005424:	e7de      	b.n	80053e4 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005426:	2001      	movs	r0, #1
 8005428:	e7dc      	b.n	80053e4 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800542a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800542e:	e7d9      	b.n	80053e4 <SDMMC_CmdSetRelAdd+0x4c>
 8005430:	20000024 	.word	0x20000024

08005434 <SDMMC_CmdSendStatus>:
{
 8005434:	b530      	push	{r4, r5, lr}
 8005436:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005438:	240d      	movs	r4, #13
 800543a:	2340      	movs	r3, #64	; 0x40
{
 800543c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 800543e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005440:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005444:	2200      	movs	r2, #0
 8005446:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800544a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800544c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005450:	f7ff fe10 	bl	8005074 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4621      	mov	r1, r4
 800545a:	4628      	mov	r0, r5
 800545c:	f7ff fd52 	bl	8004f04 <SDMMC_GetCmdResp1>
}
 8005460:	b007      	add	sp, #28
 8005462:	bd30      	pop	{r4, r5, pc}

08005464 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005464:	b538      	push	{r3, r4, r5, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005466:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005468:	07db      	lsls	r3, r3, #31
{
 800546a:	4604      	mov	r4, r0
 800546c:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800546e:	d501      	bpl.n	8005474 <LL_USART_Init+0x10>
  ErrorStatus status = ERROR;
 8005470:	2000      	movs	r0, #0
#endif
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8005472:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8005474:	68ea      	ldr	r2, [r5, #12]
 8005476:	686b      	ldr	r3, [r5, #4]
 8005478:	6801      	ldr	r1, [r0, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	692a      	ldr	r2, [r5, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	69aa      	ldr	r2, [r5, #24]
 8005482:	4313      	orrs	r3, r2
 8005484:	4a21      	ldr	r2, [pc, #132]	; (800550c <LL_USART_Init+0xa8>)
 8005486:	400a      	ands	r2, r1
 8005488:	4313      	orrs	r3, r2
 800548a:	6003      	str	r3, [r0, #0]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800548c:	6843      	ldr	r3, [r0, #4]
 800548e:	68aa      	ldr	r2, [r5, #8]
 8005490:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005494:	4313      	orrs	r3, r2
 8005496:	6043      	str	r3, [r0, #4]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005498:	6883      	ldr	r3, [r0, #8]
 800549a:	696a      	ldr	r2, [r5, #20]
 800549c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a0:	4313      	orrs	r3, r2
 80054a2:	6083      	str	r3, [r0, #8]
    if (USARTx == USART1)
 80054a4:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <LL_USART_Init+0xac>)
 80054a6:	4298      	cmp	r0, r3
 80054a8:	d11a      	bne.n	80054e0 <LL_USART_Init+0x7c>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80054aa:	2003      	movs	r0, #3
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80054ac:	f7ff fc4c 	bl	8004d48 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d0dd      	beq.n	8005470 <LL_USART_Init+0xc>
        && (USART_InitStruct->BaudRate != 0U))
 80054b4:	682a      	ldr	r2, [r5, #0]
 80054b6:	2a00      	cmp	r2, #0
 80054b8:	d0da      	beq.n	8005470 <LL_USART_Init+0xc>
#endif
{
  register uint32_t usartdiv = 0x0U;
  register uint32_t brrtemp = 0x0U;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80054ba:	69a9      	ldr	r1, [r5, #24]
 80054bc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80054c0:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80054c4:	d11d      	bne.n	8005502 <LL_USART_Init+0x9e>
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80054c6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
#endif
    brrtemp = usartdiv & 0xFFF0U;
 80054ca:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80054ce:	fbb0 f0f2 	udiv	r0, r0, r2
    brrtemp = usartdiv & 0xFFF0U;
 80054d2:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054d4:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80054d8:	4318      	orrs	r0, r3
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80054da:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 80054dc:	2001      	movs	r0, #1
 80054de:	e7c8      	b.n	8005472 <LL_USART_Init+0xe>
    else if (USARTx == USART2)
 80054e0:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <LL_USART_Init+0xb0>)
 80054e2:	4298      	cmp	r0, r3
 80054e4:	d101      	bne.n	80054ea <LL_USART_Init+0x86>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80054e6:	200c      	movs	r0, #12
 80054e8:	e7e0      	b.n	80054ac <LL_USART_Init+0x48>
    else if (USARTx == USART3)
 80054ea:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <LL_USART_Init+0xb4>)
 80054ec:	4298      	cmp	r0, r3
 80054ee:	d101      	bne.n	80054f4 <LL_USART_Init+0x90>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80054f0:	2030      	movs	r0, #48	; 0x30
 80054f2:	e7db      	b.n	80054ac <LL_USART_Init+0x48>
    else if (USARTx == UART4)
 80054f4:	4b09      	ldr	r3, [pc, #36]	; (800551c <LL_USART_Init+0xb8>)
 80054f6:	4298      	cmp	r0, r3
 80054f8:	d1ba      	bne.n	8005470 <LL_USART_Init+0xc>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80054fa:	20c0      	movs	r0, #192	; 0xc0
 80054fc:	f7ff fc88 	bl	8004e10 <LL_RCC_GetUARTClockFreq>
 8005500:	e7d6      	b.n	80054b0 <LL_USART_Init+0x4c>
 8005502:	4418      	add	r0, r3
 8005504:	fbb0 f0f2 	udiv	r0, r0, r2
 8005508:	b280      	uxth	r0, r0
 800550a:	e7e6      	b.n	80054da <LL_USART_Init+0x76>
 800550c:	efff69f3 	.word	0xefff69f3
 8005510:	40013800 	.word	0x40013800
 8005514:	40004400 	.word	0x40004400
 8005518:	40004800 	.word	0x40004800
 800551c:	40004c00 	.word	0x40004c00

08005520 <disk_status>:
 8005520:	4b03      	ldr	r3, [pc, #12]	; (8005530 <disk_status+0x10>)
 8005522:	181a      	adds	r2, r3, r0
 8005524:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005528:	7a10      	ldrb	r0, [r2, #8]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4718      	bx	r3
 8005530:	200002a4 	.word	0x200002a4

08005534 <disk_initialize>:
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <disk_initialize+0x1c>)
 8005536:	5c1a      	ldrb	r2, [r3, r0]
 8005538:	b942      	cbnz	r2, 800554c <disk_initialize+0x18>
 800553a:	2201      	movs	r2, #1
 800553c:	541a      	strb	r2, [r3, r0]
 800553e:	181a      	adds	r2, r3, r0
 8005540:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005544:	7a10      	ldrb	r0, [r2, #8]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4718      	bx	r3
 800554c:	2000      	movs	r0, #0
 800554e:	4770      	bx	lr
 8005550:	200002a4 	.word	0x200002a4

08005554 <disk_read>:
 8005554:	b430      	push	{r4, r5}
 8005556:	4c05      	ldr	r4, [pc, #20]	; (800556c <disk_read+0x18>)
 8005558:	1825      	adds	r5, r4, r0
 800555a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800555e:	6860      	ldr	r0, [r4, #4]
 8005560:	6884      	ldr	r4, [r0, #8]
 8005562:	7a28      	ldrb	r0, [r5, #8]
 8005564:	46a4      	mov	ip, r4
 8005566:	bc30      	pop	{r4, r5}
 8005568:	4760      	bx	ip
 800556a:	bf00      	nop
 800556c:	200002a4 	.word	0x200002a4

08005570 <disk_write>:
 8005570:	b430      	push	{r4, r5}
 8005572:	4c05      	ldr	r4, [pc, #20]	; (8005588 <disk_write+0x18>)
 8005574:	1825      	adds	r5, r4, r0
 8005576:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800557a:	6860      	ldr	r0, [r4, #4]
 800557c:	68c4      	ldr	r4, [r0, #12]
 800557e:	7a28      	ldrb	r0, [r5, #8]
 8005580:	46a4      	mov	ip, r4
 8005582:	bc30      	pop	{r4, r5}
 8005584:	4760      	bx	ip
 8005586:	bf00      	nop
 8005588:	200002a4 	.word	0x200002a4

0800558c <disk_ioctl>:
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <disk_ioctl+0x18>)
 800558e:	b410      	push	{r4}
 8005590:	181c      	adds	r4, r3, r0
 8005592:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005596:	7a20      	ldrb	r0, [r4, #8]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	4718      	bx	r3
 80055a2:	bf00      	nop
 80055a4:	200002a4 	.word	0x200002a4

080055a8 <ld_dword>:
 80055a8:	8842      	ldrh	r2, [r0, #2]
 80055aa:	7843      	ldrb	r3, [r0, #1]
 80055ac:	7800      	ldrb	r0, [r0, #0]
 80055ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80055b2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80055b6:	4770      	bx	lr

080055b8 <st_dword>:
 80055b8:	0a0b      	lsrs	r3, r1, #8
 80055ba:	7001      	strb	r1, [r0, #0]
 80055bc:	7043      	strb	r3, [r0, #1]
 80055be:	0c0b      	lsrs	r3, r1, #16
 80055c0:	0e09      	lsrs	r1, r1, #24
 80055c2:	7083      	strb	r3, [r0, #2]
 80055c4:	70c1      	strb	r1, [r0, #3]
 80055c6:	4770      	bx	lr

080055c8 <mem_set>:
 80055c8:	4402      	add	r2, r0
 80055ca:	f800 1b01 	strb.w	r1, [r0], #1
 80055ce:	4290      	cmp	r0, r2
 80055d0:	d1fb      	bne.n	80055ca <mem_set+0x2>
 80055d2:	4770      	bx	lr

080055d4 <chk_lock>:
 80055d4:	4b15      	ldr	r3, [pc, #84]	; (800562c <chk_lock+0x58>)
 80055d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d8:	2500      	movs	r5, #0
 80055da:	462a      	mov	r2, r5
 80055dc:	461c      	mov	r4, r3
 80055de:	681e      	ldr	r6, [r3, #0]
 80055e0:	b1a6      	cbz	r6, 800560c <chk_lock+0x38>
 80055e2:	6807      	ldr	r7, [r0, #0]
 80055e4:	42be      	cmp	r6, r7
 80055e6:	d112      	bne.n	800560e <chk_lock+0x3a>
 80055e8:	685f      	ldr	r7, [r3, #4]
 80055ea:	6886      	ldr	r6, [r0, #8]
 80055ec:	42b7      	cmp	r7, r6
 80055ee:	d10e      	bne.n	800560e <chk_lock+0x3a>
 80055f0:	689f      	ldr	r7, [r3, #8]
 80055f2:	6946      	ldr	r6, [r0, #20]
 80055f4:	42b7      	cmp	r7, r6
 80055f6:	d10a      	bne.n	800560e <chk_lock+0x3a>
 80055f8:	b9b1      	cbnz	r1, 8005628 <chk_lock+0x54>
 80055fa:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80055fe:	8993      	ldrh	r3, [r2, #12]
 8005600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005604:	bf14      	ite	ne
 8005606:	2000      	movne	r0, #0
 8005608:	2010      	moveq	r0, #16
 800560a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800560c:	2501      	movs	r5, #1
 800560e:	3201      	adds	r2, #1
 8005610:	2a02      	cmp	r2, #2
 8005612:	f103 0310 	add.w	r3, r3, #16
 8005616:	d1e2      	bne.n	80055de <chk_lock+0xa>
 8005618:	b10d      	cbz	r5, 800561e <chk_lock+0x4a>
 800561a:	2000      	movs	r0, #0
 800561c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561e:	2902      	cmp	r1, #2
 8005620:	bf0c      	ite	eq
 8005622:	2000      	moveq	r0, #0
 8005624:	2012      	movne	r0, #18
 8005626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005628:	2010      	movs	r0, #16
 800562a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800562c:	20000280 	.word	0x20000280

08005630 <inc_lock>:
 8005630:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <inc_lock+0x74>)
 8005632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005634:	6805      	ldr	r5, [r0, #0]
 8005636:	2300      	movs	r3, #0
 8005638:	4616      	mov	r6, r2
 800563a:	6814      	ldr	r4, [r2, #0]
 800563c:	42ac      	cmp	r4, r5
 800563e:	d107      	bne.n	8005650 <inc_lock+0x20>
 8005640:	6857      	ldr	r7, [r2, #4]
 8005642:	6884      	ldr	r4, [r0, #8]
 8005644:	42a7      	cmp	r7, r4
 8005646:	d103      	bne.n	8005650 <inc_lock+0x20>
 8005648:	6897      	ldr	r7, [r2, #8]
 800564a:	6944      	ldr	r4, [r0, #20]
 800564c:	42a7      	cmp	r7, r4
 800564e:	d01d      	beq.n	800568c <inc_lock+0x5c>
 8005650:	3301      	adds	r3, #1
 8005652:	2b02      	cmp	r3, #2
 8005654:	f102 0210 	add.w	r2, r2, #16
 8005658:	d1ef      	bne.n	800563a <inc_lock+0xa>
 800565a:	6833      	ldr	r3, [r6, #0]
 800565c:	b113      	cbz	r3, 8005664 <inc_lock+0x34>
 800565e:	6933      	ldr	r3, [r6, #16]
 8005660:	b9eb      	cbnz	r3, 800569e <inc_lock+0x6e>
 8005662:	2301      	movs	r3, #1
 8005664:	011c      	lsls	r4, r3, #4
 8005666:	1932      	adds	r2, r6, r4
 8005668:	5135      	str	r5, [r6, r4]
 800566a:	6884      	ldr	r4, [r0, #8]
 800566c:	6940      	ldr	r0, [r0, #20]
 800566e:	6090      	str	r0, [r2, #8]
 8005670:	2000      	movs	r0, #0
 8005672:	6054      	str	r4, [r2, #4]
 8005674:	8190      	strh	r0, [r2, #12]
 8005676:	b979      	cbnz	r1, 8005698 <inc_lock+0x68>
 8005678:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 800567c:	8992      	ldrh	r2, [r2, #12]
 800567e:	3201      	adds	r2, #1
 8005680:	b292      	uxth	r2, r2
 8005682:	eb06 1603 	add.w	r6, r6, r3, lsl #4
 8005686:	1c58      	adds	r0, r3, #1
 8005688:	81b2      	strh	r2, [r6, #12]
 800568a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800568c:	2900      	cmp	r1, #0
 800568e:	d0f3      	beq.n	8005678 <inc_lock+0x48>
 8005690:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8005694:	8992      	ldrh	r2, [r2, #12]
 8005696:	b912      	cbnz	r2, 800569e <inc_lock+0x6e>
 8005698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800569c:	e7f1      	b.n	8005682 <inc_lock+0x52>
 800569e:	2000      	movs	r0, #0
 80056a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000280 	.word	0x20000280

080056a8 <dec_lock>:
 80056a8:	3801      	subs	r0, #1
 80056aa:	2801      	cmp	r0, #1
 80056ac:	d80e      	bhi.n	80056cc <dec_lock+0x24>
 80056ae:	4a09      	ldr	r2, [pc, #36]	; (80056d4 <dec_lock+0x2c>)
 80056b0:	0103      	lsls	r3, r0, #4
 80056b2:	18d1      	adds	r1, r2, r3
 80056b4:	8989      	ldrh	r1, [r1, #12]
 80056b6:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 80056ba:	b280      	uxth	r0, r0
 80056bc:	b108      	cbz	r0, 80056c2 <dec_lock+0x1a>
 80056be:	1e48      	subs	r0, r1, #1
 80056c0:	b280      	uxth	r0, r0
 80056c2:	18d1      	adds	r1, r2, r3
 80056c4:	8188      	strh	r0, [r1, #12]
 80056c6:	b918      	cbnz	r0, 80056d0 <dec_lock+0x28>
 80056c8:	50d0      	str	r0, [r2, r3]
 80056ca:	4770      	bx	lr
 80056cc:	2002      	movs	r0, #2
 80056ce:	4770      	bx	lr
 80056d0:	2000      	movs	r0, #0
 80056d2:	4770      	bx	lr
 80056d4:	20000280 	.word	0x20000280

080056d8 <clust2sect>:
 80056d8:	6943      	ldr	r3, [r0, #20]
 80056da:	3902      	subs	r1, #2
 80056dc:	3b02      	subs	r3, #2
 80056de:	4299      	cmp	r1, r3
 80056e0:	bf3d      	ittte	cc
 80056e2:	8943      	ldrhcc	r3, [r0, #10]
 80056e4:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
 80056e6:	fb01 0003 	mlacc	r0, r1, r3, r0
 80056ea:	2000      	movcs	r0, #0
 80056ec:	4770      	bx	lr

080056ee <clmt_clust>:
 80056ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80056f0:	6802      	ldr	r2, [r0, #0]
 80056f2:	3304      	adds	r3, #4
 80056f4:	0a49      	lsrs	r1, r1, #9
 80056f6:	8952      	ldrh	r2, [r2, #10]
 80056f8:	fbb1 f1f2 	udiv	r1, r1, r2
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	b130      	cbz	r0, 800570e <clmt_clust+0x20>
 8005700:	4281      	cmp	r1, r0
 8005702:	d302      	bcc.n	800570a <clmt_clust+0x1c>
 8005704:	1a09      	subs	r1, r1, r0
 8005706:	3308      	adds	r3, #8
 8005708:	e7f8      	b.n	80056fc <clmt_clust+0xe>
 800570a:	6858      	ldr	r0, [r3, #4]
 800570c:	4408      	add	r0, r1
 800570e:	4770      	bx	lr

08005710 <get_achar>:
 8005710:	6803      	ldr	r3, [r0, #0]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	6002      	str	r2, [r0, #0]
 8005716:	781a      	ldrb	r2, [r3, #0]
 8005718:	b290      	uxth	r0, r2
 800571a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800571e:	2b19      	cmp	r3, #25
 8005720:	d802      	bhi.n	8005728 <get_achar+0x18>
 8005722:	3820      	subs	r0, #32
 8005724:	b280      	uxth	r0, r0
 8005726:	4770      	bx	lr
 8005728:	287f      	cmp	r0, #127	; 0x7f
 800572a:	bf82      	ittt	hi
 800572c:	4b02      	ldrhi	r3, [pc, #8]	; (8005738 <get_achar+0x28>)
 800572e:	189b      	addhi	r3, r3, r2
 8005730:	f813 0c80 	ldrbhi.w	r0, [r3, #-128]
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	0800f4f9 	.word	0x0800f4f9

0800573c <pattern_matching>:
 800573c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573e:	b085      	sub	sp, #20
 8005740:	ac04      	add	r4, sp, #16
 8005742:	4605      	mov	r5, r0
 8005744:	f844 1d0c 	str.w	r1, [r4, #-12]!
 8005748:	461e      	mov	r6, r3
 800574a:	4611      	mov	r1, r2
 800574c:	b921      	cbnz	r1, 8005758 <pattern_matching+0x1c>
 800574e:	782b      	ldrb	r3, [r5, #0]
 8005750:	b95b      	cbnz	r3, 800576a <pattern_matching+0x2e>
 8005752:	b156      	cbz	r6, 800576a <pattern_matching+0x2e>
 8005754:	2001      	movs	r0, #1
 8005756:	e006      	b.n	8005766 <pattern_matching+0x2a>
 8005758:	4620      	mov	r0, r4
 800575a:	f7ff ffd9 	bl	8005710 <get_achar>
 800575e:	3901      	subs	r1, #1
 8005760:	2800      	cmp	r0, #0
 8005762:	d1f3      	bne.n	800574c <pattern_matching+0x10>
 8005764:	2000      	movs	r0, #0
 8005766:	b005      	add	sp, #20
 8005768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576a:	ac04      	add	r4, sp, #16
 800576c:	9b01      	ldr	r3, [sp, #4]
 800576e:	f844 3d04 	str.w	r3, [r4, #-4]!
 8005772:	9502      	str	r5, [sp, #8]
 8005774:	9b02      	ldr	r3, [sp, #8]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b3f      	cmp	r3, #63	; 0x3f
 800577a:	d001      	beq.n	8005780 <pattern_matching+0x44>
 800577c:	2b2a      	cmp	r3, #42	; 0x2a
 800577e:	d11d      	bne.n	80057bc <pattern_matching+0x80>
 8005780:	2300      	movs	r3, #0
 8005782:	461a      	mov	r2, r3
 8005784:	9902      	ldr	r1, [sp, #8]
 8005786:	1c48      	adds	r0, r1, #1
 8005788:	9002      	str	r0, [sp, #8]
 800578a:	780c      	ldrb	r4, [r1, #0]
 800578c:	7849      	ldrb	r1, [r1, #1]
 800578e:	2c3f      	cmp	r4, #63	; 0x3f
 8005790:	bf0c      	ite	eq
 8005792:	3201      	addeq	r2, #1
 8005794:	2301      	movne	r3, #1
 8005796:	293f      	cmp	r1, #63	; 0x3f
 8005798:	d0f4      	beq.n	8005784 <pattern_matching+0x48>
 800579a:	292a      	cmp	r1, #42	; 0x2a
 800579c:	d0f2      	beq.n	8005784 <pattern_matching+0x48>
 800579e:	9903      	ldr	r1, [sp, #12]
 80057a0:	f7ff ffcc 	bl	800573c <pattern_matching>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d1d5      	bne.n	8005754 <pattern_matching+0x18>
 80057a8:	9b03      	ldr	r3, [sp, #12]
 80057aa:	7819      	ldrb	r1, [r3, #0]
 80057ac:	a801      	add	r0, sp, #4
 80057ae:	f7ff ffaf 	bl	8005710 <get_achar>
 80057b2:	2e00      	cmp	r6, #0
 80057b4:	d0d6      	beq.n	8005764 <pattern_matching+0x28>
 80057b6:	2900      	cmp	r1, #0
 80057b8:	d1d7      	bne.n	800576a <pattern_matching+0x2e>
 80057ba:	e7d3      	b.n	8005764 <pattern_matching+0x28>
 80057bc:	a802      	add	r0, sp, #8
 80057be:	f7ff ffa7 	bl	8005710 <get_achar>
 80057c2:	4607      	mov	r7, r0
 80057c4:	4620      	mov	r0, r4
 80057c6:	f7ff ffa3 	bl	8005710 <get_achar>
 80057ca:	4287      	cmp	r7, r0
 80057cc:	4601      	mov	r1, r0
 80057ce:	d1ed      	bne.n	80057ac <pattern_matching+0x70>
 80057d0:	2f00      	cmp	r7, #0
 80057d2:	d1cf      	bne.n	8005774 <pattern_matching+0x38>
 80057d4:	e7be      	b.n	8005754 <pattern_matching+0x18>

080057d6 <get_ldnumber>:
 80057d6:	6802      	ldr	r2, [r0, #0]
 80057d8:	b510      	push	{r4, lr}
 80057da:	b152      	cbz	r2, 80057f2 <get_ldnumber+0x1c>
 80057dc:	4611      	mov	r1, r2
 80057de:	460b      	mov	r3, r1
 80057e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057e4:	2c20      	cmp	r4, #32
 80057e6:	d90c      	bls.n	8005802 <get_ldnumber+0x2c>
 80057e8:	2c3a      	cmp	r4, #58	; 0x3a
 80057ea:	d1f8      	bne.n	80057de <get_ldnumber+0x8>
 80057ec:	1c51      	adds	r1, r2, #1
 80057ee:	428b      	cmp	r3, r1
 80057f0:	d002      	beq.n	80057f8 <get_ldnumber+0x22>
 80057f2:	f04f 30ff 	mov.w	r0, #4294967295
 80057f6:	bd10      	pop	{r4, pc}
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	2a30      	cmp	r2, #48	; 0x30
 80057fc:	d1f9      	bne.n	80057f2 <get_ldnumber+0x1c>
 80057fe:	3301      	adds	r3, #1
 8005800:	6003      	str	r3, [r0, #0]
 8005802:	2000      	movs	r0, #0
 8005804:	bd10      	pop	{r4, pc}

08005806 <validate>:
 8005806:	b538      	push	{r3, r4, r5, lr}
 8005808:	460d      	mov	r5, r1
 800580a:	4604      	mov	r4, r0
 800580c:	b918      	cbnz	r0, 8005816 <validate+0x10>
 800580e:	2300      	movs	r3, #0
 8005810:	602b      	str	r3, [r5, #0]
 8005812:	2009      	movs	r0, #9
 8005814:	bd38      	pop	{r3, r4, r5, pc}
 8005816:	6803      	ldr	r3, [r0, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f8      	beq.n	800580e <validate+0x8>
 800581c:	781a      	ldrb	r2, [r3, #0]
 800581e:	2a00      	cmp	r2, #0
 8005820:	d0f5      	beq.n	800580e <validate+0x8>
 8005822:	88d9      	ldrh	r1, [r3, #6]
 8005824:	8882      	ldrh	r2, [r0, #4]
 8005826:	4291      	cmp	r1, r2
 8005828:	d1f1      	bne.n	800580e <validate+0x8>
 800582a:	7858      	ldrb	r0, [r3, #1]
 800582c:	f7ff fe78 	bl	8005520 <disk_status>
 8005830:	f010 0001 	ands.w	r0, r0, #1
 8005834:	d1eb      	bne.n	800580e <validate+0x8>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	602b      	str	r3, [r5, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}

0800583c <mem_cpy.part.0>:
 800583c:	3801      	subs	r0, #1
 800583e:	440a      	add	r2, r1
 8005840:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005844:	f800 3f01 	strb.w	r3, [r0, #1]!
 8005848:	4291      	cmp	r1, r2
 800584a:	d1f9      	bne.n	8005840 <mem_cpy.part.0+0x4>
 800584c:	4770      	bx	lr

0800584e <ld_clust.isra.1>:
 800584e:	7eca      	ldrb	r2, [r1, #27]
 8005850:	7e8b      	ldrb	r3, [r1, #26]
 8005852:	2803      	cmp	r0, #3
 8005854:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005858:	bf01      	itttt	eq
 800585a:	7d48      	ldrbeq	r0, [r1, #21]
 800585c:	7d0a      	ldrbeq	r2, [r1, #20]
 800585e:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8005862:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
 8005866:	4618      	mov	r0, r3
 8005868:	4770      	bx	lr

0800586a <st_clust.isra.2>:
 800586a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800586e:	768a      	strb	r2, [r1, #26]
 8005870:	76cb      	strb	r3, [r1, #27]
 8005872:	7803      	ldrb	r3, [r0, #0]
 8005874:	2b03      	cmp	r3, #3
 8005876:	bf01      	itttt	eq
 8005878:	0c12      	lsreq	r2, r2, #16
 800587a:	750a      	strbeq	r2, [r1, #20]
 800587c:	0a12      	lsreq	r2, r2, #8
 800587e:	754a      	strbeq	r2, [r1, #21]
 8005880:	4770      	bx	lr

08005882 <get_fileinfo.part.3>:
 8005882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005884:	6a04      	ldr	r4, [r0, #32]
 8005886:	2300      	movs	r3, #0
 8005888:	1e65      	subs	r5, r4, #1
 800588a:	4618      	mov	r0, r3
 800588c:	262e      	movs	r6, #46	; 0x2e
 800588e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005892:	2a20      	cmp	r2, #32
 8005894:	f100 0001 	add.w	r0, r0, #1
 8005898:	d00a      	beq.n	80058b0 <get_fileinfo.part.3+0x2e>
 800589a:	2a05      	cmp	r2, #5
 800589c:	bf08      	it	eq
 800589e:	22e5      	moveq	r2, #229	; 0xe5
 80058a0:	2809      	cmp	r0, #9
 80058a2:	bf02      	ittt	eq
 80058a4:	18cf      	addeq	r7, r1, r3
 80058a6:	3301      	addeq	r3, #1
 80058a8:	727e      	strbeq	r6, [r7, #9]
 80058aa:	18cf      	adds	r7, r1, r3
 80058ac:	3301      	adds	r3, #1
 80058ae:	727a      	strb	r2, [r7, #9]
 80058b0:	280b      	cmp	r0, #11
 80058b2:	d1ec      	bne.n	800588e <get_fileinfo.part.3+0xc>
 80058b4:	440b      	add	r3, r1
 80058b6:	2200      	movs	r2, #0
 80058b8:	725a      	strb	r2, [r3, #9]
 80058ba:	7ae3      	ldrb	r3, [r4, #11]
 80058bc:	720b      	strb	r3, [r1, #8]
 80058be:	f104 001c 	add.w	r0, r4, #28
 80058c2:	f7ff fe71 	bl	80055a8 <ld_dword>
 80058c6:	6008      	str	r0, [r1, #0]
 80058c8:	f104 0016 	add.w	r0, r4, #22
 80058cc:	f7ff fe6c 	bl	80055a8 <ld_dword>
 80058d0:	80c8      	strh	r0, [r1, #6]
 80058d2:	0c00      	lsrs	r0, r0, #16
 80058d4:	8088      	strh	r0, [r1, #4]
 80058d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080058d8 <sync_window.part.4>:
 80058d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058da:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80058dc:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80058e0:	4604      	mov	r4, r0
 80058e2:	2301      	movs	r3, #1
 80058e4:	462a      	mov	r2, r5
 80058e6:	4639      	mov	r1, r7
 80058e8:	7840      	ldrb	r0, [r0, #1]
 80058ea:	f7ff fe41 	bl	8005570 <disk_write>
 80058ee:	b9a0      	cbnz	r0, 800591a <sync_window.part.4+0x42>
 80058f0:	6a23      	ldr	r3, [r4, #32]
 80058f2:	69a2      	ldr	r2, [r4, #24]
 80058f4:	70e0      	strb	r0, [r4, #3]
 80058f6:	1aeb      	subs	r3, r5, r3
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d301      	bcc.n	8005900 <sync_window.part.4+0x28>
 80058fc:	2000      	movs	r0, #0
 80058fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005900:	78a6      	ldrb	r6, [r4, #2]
 8005902:	2e01      	cmp	r6, #1
 8005904:	d9fa      	bls.n	80058fc <sync_window.part.4+0x24>
 8005906:	69a3      	ldr	r3, [r4, #24]
 8005908:	7860      	ldrb	r0, [r4, #1]
 800590a:	441d      	add	r5, r3
 800590c:	462a      	mov	r2, r5
 800590e:	2301      	movs	r3, #1
 8005910:	4639      	mov	r1, r7
 8005912:	f7ff fe2d 	bl	8005570 <disk_write>
 8005916:	3e01      	subs	r6, #1
 8005918:	e7f3      	b.n	8005902 <sync_window.part.4+0x2a>
 800591a:	2001      	movs	r0, #1
 800591c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800591e <sync_window>:
 800591e:	78c3      	ldrb	r3, [r0, #3]
 8005920:	b10b      	cbz	r3, 8005926 <sync_window+0x8>
 8005922:	f7ff bfd9 	b.w	80058d8 <sync_window.part.4>
 8005926:	4618      	mov	r0, r3
 8005928:	4770      	bx	lr

0800592a <sync_fs>:
 800592a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592c:	4604      	mov	r4, r0
 800592e:	f7ff fff6 	bl	800591e <sync_window>
 8005932:	4605      	mov	r5, r0
 8005934:	2800      	cmp	r0, #0
 8005936:	d142      	bne.n	80059be <sync_fs+0x94>
 8005938:	7823      	ldrb	r3, [r4, #0]
 800593a:	2b03      	cmp	r3, #3
 800593c:	d137      	bne.n	80059ae <sync_fs+0x84>
 800593e:	7927      	ldrb	r7, [r4, #4]
 8005940:	2f01      	cmp	r7, #1
 8005942:	d134      	bne.n	80059ae <sync_fs+0x84>
 8005944:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005948:	4601      	mov	r1, r0
 800594a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594e:	4630      	mov	r0, r6
 8005950:	f7ff fe3a 	bl	80055c8 <mem_set>
 8005954:	2355      	movs	r3, #85	; 0x55
 8005956:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
 800595a:	23aa      	movs	r3, #170	; 0xaa
 800595c:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
 8005960:	2352      	movs	r3, #82	; 0x52
 8005962:	2241      	movs	r2, #65	; 0x41
 8005964:	2172      	movs	r1, #114	; 0x72
 8005966:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800596a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 800596e:	2361      	movs	r3, #97	; 0x61
 8005970:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8005974:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 8005978:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
 800597c:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
 8005980:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
 8005984:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
 8005988:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800598c:	6921      	ldr	r1, [r4, #16]
 800598e:	f7ff fe13 	bl	80055b8 <st_dword>
 8005992:	68e1      	ldr	r1, [r4, #12]
 8005994:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8005998:	f7ff fe0e 	bl	80055b8 <st_dword>
 800599c:	69e2      	ldr	r2, [r4, #28]
 800599e:	7860      	ldrb	r0, [r4, #1]
 80059a0:	3201      	adds	r2, #1
 80059a2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80059a4:	463b      	mov	r3, r7
 80059a6:	4631      	mov	r1, r6
 80059a8:	f7ff fde2 	bl	8005570 <disk_write>
 80059ac:	7125      	strb	r5, [r4, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	4611      	mov	r1, r2
 80059b2:	7860      	ldrb	r0, [r4, #1]
 80059b4:	f7ff fdea 	bl	800558c <disk_ioctl>
 80059b8:	3000      	adds	r0, #0
 80059ba:	bf18      	it	ne
 80059bc:	2001      	movne	r0, #1
 80059be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059c0 <move_window>:
 80059c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80059c2:	428b      	cmp	r3, r1
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	4606      	mov	r6, r0
 80059c8:	460d      	mov	r5, r1
 80059ca:	d012      	beq.n	80059f2 <move_window+0x32>
 80059cc:	f7ff ffa7 	bl	800591e <sync_window>
 80059d0:	4604      	mov	r4, r0
 80059d2:	b960      	cbnz	r0, 80059ee <move_window+0x2e>
 80059d4:	462a      	mov	r2, r5
 80059d6:	2301      	movs	r3, #1
 80059d8:	f106 0130 	add.w	r1, r6, #48	; 0x30
 80059dc:	7870      	ldrb	r0, [r6, #1]
 80059de:	f7ff fdb9 	bl	8005554 <disk_read>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	bf1c      	itt	ne
 80059e6:	f04f 35ff 	movne.w	r5, #4294967295
 80059ea:	2401      	movne	r4, #1
 80059ec:	62f5      	str	r5, [r6, #44]	; 0x2c
 80059ee:	4620      	mov	r0, r4
 80059f0:	bd70      	pop	{r4, r5, r6, pc}
 80059f2:	2400      	movs	r4, #0
 80059f4:	e7fb      	b.n	80059ee <move_window+0x2e>
	...

080059f8 <check_fs>:
 80059f8:	2300      	movs	r3, #0
 80059fa:	b510      	push	{r4, lr}
 80059fc:	70c3      	strb	r3, [r0, #3]
 80059fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005a02:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005a04:	4604      	mov	r4, r0
 8005a06:	f7ff ffdb 	bl	80059c0 <move_window>
 8005a0a:	bb30      	cbnz	r0, 8005a5a <check_fs+0x62>
 8005a0c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8005a10:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 8005a14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a18:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d11e      	bne.n	8005a5e <check_fs+0x66>
 8005a20:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005a24:	2be9      	cmp	r3, #233	; 0xe9
 8005a26:	d005      	beq.n	8005a34 <check_fs+0x3c>
 8005a28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a2a:	4a10      	ldr	r2, [pc, #64]	; (8005a6c <check_fs+0x74>)
 8005a2c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d116      	bne.n	8005a62 <check_fs+0x6a>
 8005a34:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8005a38:	f7ff fdb6 	bl	80055a8 <ld_dword>
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <check_fs+0x78>)
 8005a3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005a42:	4298      	cmp	r0, r3
 8005a44:	d00f      	beq.n	8005a66 <check_fs+0x6e>
 8005a46:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8005a4a:	f7ff fdad 	bl	80055a8 <ld_dword>
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <check_fs+0x7c>)
 8005a50:	4298      	cmp	r0, r3
 8005a52:	bf14      	ite	ne
 8005a54:	2002      	movne	r0, #2
 8005a56:	2000      	moveq	r0, #0
 8005a58:	bd10      	pop	{r4, pc}
 8005a5a:	2004      	movs	r0, #4
 8005a5c:	bd10      	pop	{r4, pc}
 8005a5e:	2003      	movs	r0, #3
 8005a60:	bd10      	pop	{r4, pc}
 8005a62:	2002      	movs	r0, #2
 8005a64:	bd10      	pop	{r4, pc}
 8005a66:	2000      	movs	r0, #0
 8005a68:	bd10      	pop	{r4, pc}
 8005a6a:	bf00      	nop
 8005a6c:	009000eb 	.word	0x009000eb
 8005a70:	00544146 	.word	0x00544146
 8005a74:	33544146 	.word	0x33544146

08005a78 <find_volume>:
 8005a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	b085      	sub	sp, #20
 8005a80:	600b      	str	r3, [r1, #0]
 8005a82:	460f      	mov	r7, r1
 8005a84:	4615      	mov	r5, r2
 8005a86:	f7ff fea6 	bl	80057d6 <get_ldnumber>
 8005a8a:	1e06      	subs	r6, r0, #0
 8005a8c:	f2c0 8140 	blt.w	8005d10 <find_volume+0x298>
 8005a90:	4ba3      	ldr	r3, [pc, #652]	; (8005d20 <find_volume+0x2a8>)
 8005a92:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8005a96:	2c00      	cmp	r4, #0
 8005a98:	f000 813c 	beq.w	8005d14 <find_volume+0x29c>
 8005a9c:	603c      	str	r4, [r7, #0]
 8005a9e:	7823      	ldrb	r3, [r4, #0]
 8005aa0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8005aa4:	b173      	cbz	r3, 8005ac4 <find_volume+0x4c>
 8005aa6:	7860      	ldrb	r0, [r4, #1]
 8005aa8:	f7ff fd3a 	bl	8005520 <disk_status>
 8005aac:	07c1      	lsls	r1, r0, #31
 8005aae:	d409      	bmi.n	8005ac4 <find_volume+0x4c>
 8005ab0:	2d00      	cmp	r5, #0
 8005ab2:	f000 8131 	beq.w	8005d18 <find_volume+0x2a0>
 8005ab6:	f010 0004 	ands.w	r0, r0, #4
 8005aba:	d000      	beq.n	8005abe <find_volume+0x46>
 8005abc:	200a      	movs	r0, #10
 8005abe:	b005      	add	sp, #20
 8005ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	b2f0      	uxtb	r0, r6
 8005ac8:	7023      	strb	r3, [r4, #0]
 8005aca:	7060      	strb	r0, [r4, #1]
 8005acc:	f7ff fd32 	bl	8005534 <disk_initialize>
 8005ad0:	07c2      	lsls	r2, r0, #31
 8005ad2:	f100 8123 	bmi.w	8005d1c <find_volume+0x2a4>
 8005ad6:	b10d      	cbz	r5, 8005adc <find_volume+0x64>
 8005ad8:	0743      	lsls	r3, r0, #29
 8005ada:	d4ef      	bmi.n	8005abc <find_volume+0x44>
 8005adc:	2100      	movs	r1, #0
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f7ff ff8a 	bl	80059f8 <check_fs>
 8005ae4:	2802      	cmp	r0, #2
 8005ae6:	f040 80f7 	bne.w	8005cd8 <find_volume+0x260>
 8005aea:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 8005aee:	2100      	movs	r1, #0
 8005af0:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 8005af4:	b110      	cbz	r0, 8005afc <find_volume+0x84>
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7ff fd56 	bl	80055a8 <ld_dword>
 8005afc:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
 8005b00:	3101      	adds	r1, #1
 8005b02:	2904      	cmp	r1, #4
 8005b04:	f105 0510 	add.w	r5, r5, #16
 8005b08:	d1f2      	bne.n	8005af0 <find_volume+0x78>
 8005b0a:	2500      	movs	r5, #0
 8005b0c:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
 8005b10:	2e00      	cmp	r6, #0
 8005b12:	f000 80d8 	beq.w	8005cc6 <find_volume+0x24e>
 8005b16:	4631      	mov	r1, r6
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f7ff ff6d 	bl	80059f8 <check_fs>
 8005b1e:	2801      	cmp	r0, #1
 8005b20:	f200 80d2 	bhi.w	8005cc8 <find_volume+0x250>
 8005b24:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8005b28:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8005b2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b34:	f040 80d4 	bne.w	8005ce0 <find_volume+0x268>
 8005b38:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8005b3c:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
 8005b40:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 8005b44:	d104      	bne.n	8005b50 <find_volume+0xd8>
 8005b46:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8005b4a:	f7ff fd2d 	bl	80055a8 <ld_dword>
 8005b4e:	4605      	mov	r5, r0
 8005b50:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 8005b54:	61a5      	str	r5, [r4, #24]
 8005b56:	f109 33ff 	add.w	r3, r9, #4294967295
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	f884 9002 	strb.w	r9, [r4, #2]
 8005b60:	f200 80be 	bhi.w	8005ce0 <find_volume+0x268>
 8005b64:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 8005b68:	b2bb      	uxth	r3, r7
 8005b6a:	8163      	strh	r3, [r4, #10]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80b7 	beq.w	8005ce0 <find_volume+0x268>
 8005b72:	1e7b      	subs	r3, r7, #1
 8005b74:	423b      	tst	r3, r7
 8005b76:	f040 80b3 	bne.w	8005ce0 <find_volume+0x268>
 8005b7a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005b7e:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 8005b82:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 8005b86:	f018 0f0f 	tst.w	r8, #15
 8005b8a:	f8a4 8008 	strh.w	r8, [r4, #8]
 8005b8e:	f040 80a7 	bne.w	8005ce0 <find_volume+0x268>
 8005b92:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8005b96:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8005b9a:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8005b9e:	d103      	bne.n	8005ba8 <find_volume+0x130>
 8005ba0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ba4:	f7ff fd00 	bl	80055a8 <ld_dword>
 8005ba8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8005bac:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005bb0:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8005bb4:	f000 8094 	beq.w	8005ce0 <find_volume+0x268>
 8005bb8:	fb05 f309 	mul.w	r3, r5, r9
 8005bbc:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 8005bc0:	449e      	add	lr, r3
 8005bc2:	4570      	cmp	r0, lr
 8005bc4:	f0c0 808c 	bcc.w	8005ce0 <find_volume+0x268>
 8005bc8:	eba0 010e 	sub.w	r1, r0, lr
 8005bcc:	fbb1 f1f7 	udiv	r1, r1, r7
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	f000 8085 	beq.w	8005ce0 <find_volume+0x268>
 8005bd6:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8005bda:	4281      	cmp	r1, r0
 8005bdc:	f200 8084 	bhi.w	8005ce8 <find_volume+0x270>
 8005be0:	f640 77f5 	movw	r7, #4085	; 0xff5
 8005be4:	42b9      	cmp	r1, r7
 8005be6:	bf8c      	ite	hi
 8005be8:	2702      	movhi	r7, #2
 8005bea:	2701      	movls	r7, #1
 8005bec:	3102      	adds	r1, #2
 8005bee:	4432      	add	r2, r6
 8005bf0:	eb06 000e 	add.w	r0, r6, lr
 8005bf4:	2f03      	cmp	r7, #3
 8005bf6:	6161      	str	r1, [r4, #20]
 8005bf8:	61e6      	str	r6, [r4, #28]
 8005bfa:	6222      	str	r2, [r4, #32]
 8005bfc:	62a0      	str	r0, [r4, #40]	; 0x28
 8005bfe:	d175      	bne.n	8005cec <find_volume+0x274>
 8005c00:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 8005c04:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8005c08:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8005c0c:	d168      	bne.n	8005ce0 <find_volume+0x268>
 8005c0e:	f1b8 0f00 	cmp.w	r8, #0
 8005c12:	d165      	bne.n	8005ce0 <find_volume+0x268>
 8005c14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c18:	f7ff fcc6 	bl	80055a8 <ld_dword>
 8005c1c:	6260      	str	r0, [r4, #36]	; 0x24
 8005c1e:	0089      	lsls	r1, r1, #2
 8005c20:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8005c24:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 8005c28:	d35a      	bcc.n	8005ce0 <find_volume+0x268>
 8005c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	60e3      	str	r3, [r4, #12]
 8005c32:	2f03      	cmp	r7, #3
 8005c34:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005c38:	7123      	strb	r3, [r4, #4]
 8005c3a:	d12f      	bne.n	8005c9c <find_volume+0x224>
 8005c3c:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8005c40:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8005c44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d127      	bne.n	8005c9c <find_volume+0x224>
 8005c4c:	1c71      	adds	r1, r6, #1
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f7ff feb6 	bl	80059c0 <move_window>
 8005c54:	bb10      	cbnz	r0, 8005c9c <find_volume+0x224>
 8005c56:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8005c5a:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 8005c5e:	7120      	strb	r0, [r4, #4]
 8005c60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c64:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d117      	bne.n	8005c9c <find_volume+0x224>
 8005c6c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005c70:	f7ff fc9a 	bl	80055a8 <ld_dword>
 8005c74:	4b2b      	ldr	r3, [pc, #172]	; (8005d24 <find_volume+0x2ac>)
 8005c76:	4298      	cmp	r0, r3
 8005c78:	d110      	bne.n	8005c9c <find_volume+0x224>
 8005c7a:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8005c7e:	f7ff fc93 	bl	80055a8 <ld_dword>
 8005c82:	4b29      	ldr	r3, [pc, #164]	; (8005d28 <find_volume+0x2b0>)
 8005c84:	4298      	cmp	r0, r3
 8005c86:	d109      	bne.n	8005c9c <find_volume+0x224>
 8005c88:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8005c8c:	f7ff fc8c 	bl	80055a8 <ld_dword>
 8005c90:	6120      	str	r0, [r4, #16]
 8005c92:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8005c96:	f7ff fc87 	bl	80055a8 <ld_dword>
 8005c9a:	60e0      	str	r0, [r4, #12]
 8005c9c:	4a23      	ldr	r2, [pc, #140]	; (8005d2c <find_volume+0x2b4>)
 8005c9e:	7027      	strb	r7, [r4, #0]
 8005ca0:	8813      	ldrh	r3, [r2, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	8013      	strh	r3, [r2, #0]
 8005ca8:	80e3      	strh	r3, [r4, #6]
 8005caa:	4b21      	ldr	r3, [pc, #132]	; (8005d30 <find_volume+0x2b8>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4294      	cmp	r4, r2
 8005cb0:	bf04      	itt	eq
 8005cb2:	2200      	moveq	r2, #0
 8005cb4:	601a      	streq	r2, [r3, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	4294      	cmp	r4, r2
 8005cba:	f04f 0000 	mov.w	r0, #0
 8005cbe:	f47f aefe 	bne.w	8005abe <find_volume+0x46>
 8005cc2:	6118      	str	r0, [r3, #16]
 8005cc4:	e6fb      	b.n	8005abe <find_volume+0x46>
 8005cc6:	2003      	movs	r0, #3
 8005cc8:	3501      	adds	r5, #1
 8005cca:	2d04      	cmp	r5, #4
 8005ccc:	f47f af1e 	bne.w	8005b0c <find_volume+0x94>
 8005cd0:	2804      	cmp	r0, #4
 8005cd2:	d105      	bne.n	8005ce0 <find_volume+0x268>
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	e6f2      	b.n	8005abe <find_volume+0x46>
 8005cd8:	2804      	cmp	r0, #4
 8005cda:	d0fb      	beq.n	8005cd4 <find_volume+0x25c>
 8005cdc:	2801      	cmp	r0, #1
 8005cde:	d901      	bls.n	8005ce4 <find_volume+0x26c>
 8005ce0:	200d      	movs	r0, #13
 8005ce2:	e6ec      	b.n	8005abe <find_volume+0x46>
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	e71d      	b.n	8005b24 <find_volume+0xac>
 8005ce8:	2703      	movs	r7, #3
 8005cea:	e77f      	b.n	8005bec <find_volume+0x174>
 8005cec:	f1b8 0f00 	cmp.w	r8, #0
 8005cf0:	d0f6      	beq.n	8005ce0 <find_volume+0x268>
 8005cf2:	2f02      	cmp	r7, #2
 8005cf4:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8005cf8:	bf18      	it	ne
 8005cfa:	1840      	addne	r0, r0, r1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	bf18      	it	ne
 8005d00:	f001 0101 	andne.w	r1, r1, #1
 8005d04:	6263      	str	r3, [r4, #36]	; 0x24
 8005d06:	bf0c      	ite	eq
 8005d08:	4601      	moveq	r1, r0
 8005d0a:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 8005d0e:	e787      	b.n	8005c20 <find_volume+0x1a8>
 8005d10:	200b      	movs	r0, #11
 8005d12:	e6d4      	b.n	8005abe <find_volume+0x46>
 8005d14:	200c      	movs	r0, #12
 8005d16:	e6d2      	b.n	8005abe <find_volume+0x46>
 8005d18:	4628      	mov	r0, r5
 8005d1a:	e6d0      	b.n	8005abe <find_volume+0x46>
 8005d1c:	2003      	movs	r0, #3
 8005d1e:	e6ce      	b.n	8005abe <find_volume+0x46>
 8005d20:	2000027c 	.word	0x2000027c
 8005d24:	41615252 	.word	0x41615252
 8005d28:	61417272 	.word	0x61417272
 8005d2c:	200002a0 	.word	0x200002a0
 8005d30:	20000280 	.word	0x20000280

08005d34 <put_fat>:
 8005d34:	2901      	cmp	r1, #1
 8005d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	4617      	mov	r7, r2
 8005d40:	d972      	bls.n	8005e28 <put_fat+0xf4>
 8005d42:	6943      	ldr	r3, [r0, #20]
 8005d44:	4299      	cmp	r1, r3
 8005d46:	d26f      	bcs.n	8005e28 <put_fat+0xf4>
 8005d48:	7803      	ldrb	r3, [r0, #0]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d03f      	beq.n	8005dce <put_fat+0x9a>
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d050      	beq.n	8005df4 <put_fat+0xc0>
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d168      	bne.n	8005e28 <put_fat+0xf4>
 8005d56:	eb01 0851 	add.w	r8, r1, r1, lsr #1
 8005d5a:	6a01      	ldr	r1, [r0, #32]
 8005d5c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8005d60:	f7ff fe2e 	bl	80059c0 <move_window>
 8005d64:	4606      	mov	r6, r0
 8005d66:	bb38      	cbnz	r0, 8005db8 <put_fat+0x84>
 8005d68:	f105 0930 	add.w	r9, r5, #48	; 0x30
 8005d6c:	f108 0a01 	add.w	sl, r8, #1
 8005d70:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8005d74:	f014 0401 	ands.w	r4, r4, #1
 8005d78:	bf1f      	itttt	ne
 8005d7a:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8005d7e:	f003 020f 	andne.w	r2, r3, #15
 8005d82:	013b      	lslne	r3, r7, #4
 8005d84:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8005d88:	bf14      	ite	ne
 8005d8a:	4313      	orrne	r3, r2
 8005d8c:	b2fb      	uxtbeq	r3, r7
 8005d8e:	f809 3008 	strb.w	r3, [r9, r8]
 8005d92:	6a29      	ldr	r1, [r5, #32]
 8005d94:	2301      	movs	r3, #1
 8005d96:	70eb      	strb	r3, [r5, #3]
 8005d98:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	f7ff fe0f 	bl	80059c0 <move_window>
 8005da2:	4606      	mov	r6, r0
 8005da4:	b940      	cbnz	r0, 8005db8 <put_fat+0x84>
 8005da6:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 8005daa:	b144      	cbz	r4, 8005dbe <put_fat+0x8a>
 8005dac:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8005db0:	f809 700a 	strb.w	r7, [r9, sl]
 8005db4:	2301      	movs	r3, #1
 8005db6:	70eb      	strb	r3, [r5, #3]
 8005db8:	4630      	mov	r0, r6
 8005dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbe:	f819 300a 	ldrb.w	r3, [r9, sl]
 8005dc2:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8005dc6:	f023 030f 	bic.w	r3, r3, #15
 8005dca:	431f      	orrs	r7, r3
 8005dcc:	e7f0      	b.n	8005db0 <put_fat+0x7c>
 8005dce:	6a01      	ldr	r1, [r0, #32]
 8005dd0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005dd4:	f7ff fdf4 	bl	80059c0 <move_window>
 8005dd8:	4606      	mov	r6, r0
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d1ec      	bne.n	8005db8 <put_fat+0x84>
 8005dde:	0064      	lsls	r4, r4, #1
 8005de0:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8005de4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8005de8:	191a      	adds	r2, r3, r4
 8005dea:	551f      	strb	r7, [r3, r4]
 8005dec:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8005df0:	7057      	strb	r7, [r2, #1]
 8005df2:	e7df      	b.n	8005db4 <put_fat+0x80>
 8005df4:	6a01      	ldr	r1, [r0, #32]
 8005df6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005dfa:	f7ff fde1 	bl	80059c0 <move_window>
 8005dfe:	4606      	mov	r6, r0
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d1d9      	bne.n	8005db8 <put_fat+0x84>
 8005e04:	00a4      	lsls	r4, r4, #2
 8005e06:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8005e0a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8005e0e:	441c      	add	r4, r3
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7ff fbc9 	bl	80055a8 <ld_dword>
 8005e16:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8005e1a:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
 8005e1e:	4339      	orrs	r1, r7
 8005e20:	4620      	mov	r0, r4
 8005e22:	f7ff fbc9 	bl	80055b8 <st_dword>
 8005e26:	e7c5      	b.n	8005db4 <put_fat+0x80>
 8005e28:	2602      	movs	r6, #2
 8005e2a:	e7c5      	b.n	8005db8 <put_fat+0x84>

08005e2c <get_fat.isra.8>:
 8005e2c:	2901      	cmp	r1, #1
 8005e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e30:	4605      	mov	r5, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	d952      	bls.n	8005edc <get_fat.isra.8+0xb0>
 8005e36:	6943      	ldr	r3, [r0, #20]
 8005e38:	4299      	cmp	r1, r3
 8005e3a:	d24f      	bcs.n	8005edc <get_fat.isra.8+0xb0>
 8005e3c:	7803      	ldrb	r3, [r0, #0]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d029      	beq.n	8005e96 <get_fat.isra.8+0x6a>
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d038      	beq.n	8005eb8 <get_fat.isra.8+0x8c>
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d148      	bne.n	8005edc <get_fat.isra.8+0xb0>
 8005e4a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
 8005e4e:	6a01      	ldr	r1, [r0, #32]
 8005e50:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8005e54:	f7ff fdb4 	bl	80059c0 <move_window>
 8005e58:	b110      	cbz	r0, 8005e60 <get_fat.isra.8+0x34>
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e60:	1c77      	adds	r7, r6, #1
 8005e62:	6a29      	ldr	r1, [r5, #32]
 8005e64:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8005e68:	442e      	add	r6, r5
 8005e6a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
 8005e74:	f7ff fda4 	bl	80059c0 <move_window>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d1ee      	bne.n	8005e5a <get_fat.isra.8+0x2e>
 8005e7c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8005e80:	443d      	add	r5, r7
 8005e82:	07e3      	lsls	r3, r4, #31
 8005e84:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8005e88:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
 8005e8c:	bf4c      	ite	mi
 8005e8e:	0900      	lsrmi	r0, r0, #4
 8005e90:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8005e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e96:	6a01      	ldr	r1, [r0, #32]
 8005e98:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005e9c:	f7ff fd90 	bl	80059c0 <move_window>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d1da      	bne.n	8005e5a <get_fat.isra.8+0x2e>
 8005ea4:	0064      	lsls	r4, r4, #1
 8005ea6:	3530      	adds	r5, #48	; 0x30
 8005ea8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8005eac:	192b      	adds	r3, r5, r4
 8005eae:	5d28      	ldrb	r0, [r5, r4]
 8005eb0:	785b      	ldrb	r3, [r3, #1]
 8005eb2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb8:	6a01      	ldr	r1, [r0, #32]
 8005eba:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005ebe:	f7ff fd7f 	bl	80059c0 <move_window>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d1c9      	bne.n	8005e5a <get_fat.isra.8+0x2e>
 8005ec6:	00a4      	lsls	r4, r4, #2
 8005ec8:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8005ecc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8005ed0:	4420      	add	r0, r4
 8005ed2:	f7ff fb69 	bl	80055a8 <ld_dword>
 8005ed6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8005eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005edc:	2001      	movs	r0, #1
 8005ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ee0 <create_chain>:
 8005ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	6805      	ldr	r5, [r0, #0]
 8005ee8:	460f      	mov	r7, r1
 8005eea:	b971      	cbnz	r1, 8005f0a <create_chain+0x2a>
 8005eec:	68ee      	ldr	r6, [r5, #12]
 8005eee:	b1f6      	cbz	r6, 8005f2e <create_chain+0x4e>
 8005ef0:	696b      	ldr	r3, [r5, #20]
 8005ef2:	429e      	cmp	r6, r3
 8005ef4:	bf28      	it	cs
 8005ef6:	2601      	movcs	r6, #1
 8005ef8:	4634      	mov	r4, r6
 8005efa:	696b      	ldr	r3, [r5, #20]
 8005efc:	3401      	adds	r4, #1
 8005efe:	429c      	cmp	r4, r3
 8005f00:	d318      	bcc.n	8005f34 <create_chain+0x54>
 8005f02:	2e01      	cmp	r6, #1
 8005f04:	d815      	bhi.n	8005f32 <create_chain+0x52>
 8005f06:	2400      	movs	r4, #0
 8005f08:	e009      	b.n	8005f1e <create_chain+0x3e>
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f7ff ff8e 	bl	8005e2c <get_fat.isra.8>
 8005f10:	2801      	cmp	r0, #1
 8005f12:	4604      	mov	r4, r0
 8005f14:	d937      	bls.n	8005f86 <create_chain+0xa6>
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d104      	bne.n	8005f24 <create_chain+0x44>
 8005f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8005f1e:	4620      	mov	r0, r4
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f24:	696b      	ldr	r3, [r5, #20]
 8005f26:	4298      	cmp	r0, r3
 8005f28:	d3f9      	bcc.n	8005f1e <create_chain+0x3e>
 8005f2a:	463e      	mov	r6, r7
 8005f2c:	e7e4      	b.n	8005ef8 <create_chain+0x18>
 8005f2e:	2601      	movs	r6, #1
 8005f30:	e7e2      	b.n	8005ef8 <create_chain+0x18>
 8005f32:	2402      	movs	r4, #2
 8005f34:	4621      	mov	r1, r4
 8005f36:	f8d8 0000 	ldr.w	r0, [r8]
 8005f3a:	f7ff ff77 	bl	8005e2c <get_fat.isra.8>
 8005f3e:	b130      	cbz	r0, 8005f4e <create_chain+0x6e>
 8005f40:	2801      	cmp	r0, #1
 8005f42:	d020      	beq.n	8005f86 <create_chain+0xa6>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d0e8      	beq.n	8005f1a <create_chain+0x3a>
 8005f48:	42b4      	cmp	r4, r6
 8005f4a:	d1d6      	bne.n	8005efa <create_chain+0x1a>
 8005f4c:	e7db      	b.n	8005f06 <create_chain+0x26>
 8005f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f52:	4621      	mov	r1, r4
 8005f54:	4628      	mov	r0, r5
 8005f56:	f7ff feed 	bl	8005d34 <put_fat>
 8005f5a:	b990      	cbnz	r0, 8005f82 <create_chain+0xa2>
 8005f5c:	b957      	cbnz	r7, 8005f74 <create_chain+0x94>
 8005f5e:	696a      	ldr	r2, [r5, #20]
 8005f60:	692b      	ldr	r3, [r5, #16]
 8005f62:	60ec      	str	r4, [r5, #12]
 8005f64:	3a02      	subs	r2, #2
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d90f      	bls.n	8005f8a <create_chain+0xaa>
 8005f6a:	792b      	ldrb	r3, [r5, #4]
 8005f6c:	f043 0301 	orr.w	r3, r3, #1
 8005f70:	712b      	strb	r3, [r5, #4]
 8005f72:	e7d4      	b.n	8005f1e <create_chain+0x3e>
 8005f74:	4622      	mov	r2, r4
 8005f76:	4639      	mov	r1, r7
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f7ff fedb 	bl	8005d34 <put_fat>
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d0ed      	beq.n	8005f5e <create_chain+0x7e>
 8005f82:	2801      	cmp	r0, #1
 8005f84:	d0c9      	beq.n	8005f1a <create_chain+0x3a>
 8005f86:	2401      	movs	r4, #1
 8005f88:	e7c9      	b.n	8005f1e <create_chain+0x3e>
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	612b      	str	r3, [r5, #16]
 8005f8e:	e7ec      	b.n	8005f6a <create_chain+0x8a>

08005f90 <remove_chain>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	460d      	mov	r5, r1
 8005f94:	2d01      	cmp	r5, #1
 8005f96:	4607      	mov	r7, r0
 8005f98:	4611      	mov	r1, r2
 8005f9a:	d801      	bhi.n	8005fa0 <remove_chain+0x10>
 8005f9c:	2002      	movs	r0, #2
 8005f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa0:	6804      	ldr	r4, [r0, #0]
 8005fa2:	6963      	ldr	r3, [r4, #20]
 8005fa4:	429d      	cmp	r5, r3
 8005fa6:	d2f9      	bcs.n	8005f9c <remove_chain+0xc>
 8005fa8:	b12a      	cbz	r2, 8005fb6 <remove_chain+0x26>
 8005faa:	f04f 32ff 	mov.w	r2, #4294967295
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f7ff fec0 	bl	8005d34 <put_fat>
 8005fb4:	bb08      	cbnz	r0, 8005ffa <remove_chain+0x6a>
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	6838      	ldr	r0, [r7, #0]
 8005fba:	f7ff ff37 	bl	8005e2c <get_fat.isra.8>
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	b908      	cbnz	r0, 8005fc6 <remove_chain+0x36>
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc6:	2801      	cmp	r0, #1
 8005fc8:	d0e8      	beq.n	8005f9c <remove_chain+0xc>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d014      	beq.n	8005ff8 <remove_chain+0x68>
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f7ff feae 	bl	8005d34 <put_fat>
 8005fd8:	b978      	cbnz	r0, 8005ffa <remove_chain+0x6a>
 8005fda:	6962      	ldr	r2, [r4, #20]
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	1e91      	subs	r1, r2, #2
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	d205      	bcs.n	8005ff0 <remove_chain+0x60>
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	6123      	str	r3, [r4, #16]
 8005fe8:	7923      	ldrb	r3, [r4, #4]
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	7123      	strb	r3, [r4, #4]
 8005ff0:	4296      	cmp	r6, r2
 8005ff2:	4635      	mov	r5, r6
 8005ff4:	d3df      	bcc.n	8005fb6 <remove_chain+0x26>
 8005ff6:	e7e4      	b.n	8005fc2 <remove_chain+0x32>
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ffc <dir_sdi.constprop.14>:
 8005ffc:	6882      	ldr	r2, [r0, #8]
 8005ffe:	b538      	push	{r3, r4, r5, lr}
 8006000:	2300      	movs	r3, #0
 8006002:	4605      	mov	r5, r0
 8006004:	6804      	ldr	r4, [r0, #0]
 8006006:	6143      	str	r3, [r0, #20]
 8006008:	b992      	cbnz	r2, 8006030 <dir_sdi.constprop.14+0x34>
 800600a:	7823      	ldrb	r3, [r4, #0]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <dir_sdi.constprop.14+0x18>
 8006010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006012:	b973      	cbnz	r3, 8006032 <dir_sdi.constprop.14+0x36>
 8006014:	8923      	ldrh	r3, [r4, #8]
 8006016:	b90b      	cbnz	r3, 800601c <dir_sdi.constprop.14+0x20>
 8006018:	2002      	movs	r0, #2
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800601e:	61eb      	str	r3, [r5, #28]
 8006020:	69eb      	ldr	r3, [r5, #28]
 8006022:	61aa      	str	r2, [r5, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f7      	beq.n	8006018 <dir_sdi.constprop.14+0x1c>
 8006028:	3430      	adds	r4, #48	; 0x30
 800602a:	622c      	str	r4, [r5, #32]
 800602c:	2000      	movs	r0, #0
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	4613      	mov	r3, r2
 8006032:	8961      	ldrh	r1, [r4, #10]
 8006034:	461a      	mov	r2, r3
 8006036:	b961      	cbnz	r1, 8006052 <dir_sdi.constprop.14+0x56>
 8006038:	4611      	mov	r1, r2
 800603a:	6828      	ldr	r0, [r5, #0]
 800603c:	f7ff fef6 	bl	8005e2c <get_fat.isra.8>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	4602      	mov	r2, r0
 8006044:	d00b      	beq.n	800605e <dir_sdi.constprop.14+0x62>
 8006046:	2801      	cmp	r0, #1
 8006048:	d9e6      	bls.n	8006018 <dir_sdi.constprop.14+0x1c>
 800604a:	6963      	ldr	r3, [r4, #20]
 800604c:	4298      	cmp	r0, r3
 800604e:	d3f3      	bcc.n	8006038 <dir_sdi.constprop.14+0x3c>
 8006050:	e7e2      	b.n	8006018 <dir_sdi.constprop.14+0x1c>
 8006052:	4619      	mov	r1, r3
 8006054:	4620      	mov	r0, r4
 8006056:	f7ff fb3f 	bl	80056d8 <clust2sect>
 800605a:	61e8      	str	r0, [r5, #28]
 800605c:	e7e0      	b.n	8006020 <dir_sdi.constprop.14+0x24>
 800605e:	2001      	movs	r0, #1
 8006060:	bd38      	pop	{r3, r4, r5, pc}

08006062 <dir_next>:
 8006062:	69c3      	ldr	r3, [r0, #28]
 8006064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	4605      	mov	r5, r0
 800606a:	460f      	mov	r7, r1
 800606c:	b1ab      	cbz	r3, 800609a <dir_next+0x38>
 800606e:	6942      	ldr	r2, [r0, #20]
 8006070:	f102 0820 	add.w	r8, r2, #32
 8006074:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8006078:	d20f      	bcs.n	800609a <dir_next+0x38>
 800607a:	f3c8 0908 	ubfx	r9, r8, #0, #9
 800607e:	6804      	ldr	r4, [r0, #0]
 8006080:	f1b9 0f00 	cmp.w	r9, #0
 8006084:	d14f      	bne.n	8006126 <dir_next+0xc4>
 8006086:	6981      	ldr	r1, [r0, #24]
 8006088:	3301      	adds	r3, #1
 800608a:	61c3      	str	r3, [r0, #28]
 800608c:	b941      	cbnz	r1, 80060a0 <dir_next+0x3e>
 800608e:	8923      	ldrh	r3, [r4, #8]
 8006090:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8006094:	d847      	bhi.n	8006126 <dir_next+0xc4>
 8006096:	2300      	movs	r3, #0
 8006098:	61eb      	str	r3, [r5, #28]
 800609a:	2004      	movs	r0, #4
 800609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a0:	8963      	ldrh	r3, [r4, #10]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 80060a8:	d13d      	bne.n	8006126 <dir_next+0xc4>
 80060aa:	4620      	mov	r0, r4
 80060ac:	f7ff febe 	bl	8005e2c <get_fat.isra.8>
 80060b0:	2801      	cmp	r0, #1
 80060b2:	4606      	mov	r6, r0
 80060b4:	d802      	bhi.n	80060bc <dir_next+0x5a>
 80060b6:	2002      	movs	r0, #2
 80060b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060bc:	1c42      	adds	r2, r0, #1
 80060be:	d102      	bne.n	80060c6 <dir_next+0x64>
 80060c0:	2001      	movs	r0, #1
 80060c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c6:	6963      	ldr	r3, [r4, #20]
 80060c8:	4298      	cmp	r0, r3
 80060ca:	d326      	bcc.n	800611a <dir_next+0xb8>
 80060cc:	2f00      	cmp	r7, #0
 80060ce:	d0e2      	beq.n	8006096 <dir_next+0x34>
 80060d0:	69a9      	ldr	r1, [r5, #24]
 80060d2:	4628      	mov	r0, r5
 80060d4:	f7ff ff04 	bl	8005ee0 <create_chain>
 80060d8:	4606      	mov	r6, r0
 80060da:	2800      	cmp	r0, #0
 80060dc:	d037      	beq.n	800614e <dir_next+0xec>
 80060de:	2801      	cmp	r0, #1
 80060e0:	d0e9      	beq.n	80060b6 <dir_next+0x54>
 80060e2:	1c43      	adds	r3, r0, #1
 80060e4:	d0ec      	beq.n	80060c0 <dir_next+0x5e>
 80060e6:	4620      	mov	r0, r4
 80060e8:	f7ff fc19 	bl	800591e <sync_window>
 80060ec:	4607      	mov	r7, r0
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d1e6      	bne.n	80060c0 <dir_next+0x5e>
 80060f2:	4601      	mov	r1, r0
 80060f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80060fc:	f7ff fa64 	bl	80055c8 <mem_set>
 8006100:	4631      	mov	r1, r6
 8006102:	4620      	mov	r0, r4
 8006104:	f7ff fae8 	bl	80056d8 <clust2sect>
 8006108:	f04f 0a01 	mov.w	sl, #1
 800610c:	62e0      	str	r0, [r4, #44]	; 0x2c
 800610e:	8963      	ldrh	r3, [r4, #10]
 8006110:	429f      	cmp	r7, r3
 8006112:	d310      	bcc.n	8006136 <dir_next+0xd4>
 8006114:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006116:	1bdf      	subs	r7, r3, r7
 8006118:	62e7      	str	r7, [r4, #44]	; 0x2c
 800611a:	61ae      	str	r6, [r5, #24]
 800611c:	4631      	mov	r1, r6
 800611e:	4620      	mov	r0, r4
 8006120:	f7ff fada 	bl	80056d8 <clust2sect>
 8006124:	61e8      	str	r0, [r5, #28]
 8006126:	3430      	adds	r4, #48	; 0x30
 8006128:	444c      	add	r4, r9
 800612a:	f8c5 8014 	str.w	r8, [r5, #20]
 800612e:	622c      	str	r4, [r5, #32]
 8006130:	2000      	movs	r0, #0
 8006132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006136:	f884 a003 	strb.w	sl, [r4, #3]
 800613a:	4620      	mov	r0, r4
 800613c:	f7ff fbcc 	bl	80058d8 <sync_window.part.4>
 8006140:	2800      	cmp	r0, #0
 8006142:	d1bd      	bne.n	80060c0 <dir_next+0x5e>
 8006144:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006146:	3301      	adds	r3, #1
 8006148:	3701      	adds	r7, #1
 800614a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800614c:	e7df      	b.n	800610e <dir_next+0xac>
 800614e:	2007      	movs	r0, #7
 8006150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006154 <follow_path>:
 8006154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006158:	6807      	ldr	r7, [r0, #0]
 800615a:	4604      	mov	r4, r0
 800615c:	780b      	ldrb	r3, [r1, #0]
 800615e:	2b2f      	cmp	r3, #47	; 0x2f
 8006160:	460d      	mov	r5, r1
 8006162:	f101 0101 	add.w	r1, r1, #1
 8006166:	d0f9      	beq.n	800615c <follow_path+0x8>
 8006168:	2b5c      	cmp	r3, #92	; 0x5c
 800616a:	d0f7      	beq.n	800615c <follow_path+0x8>
 800616c:	2300      	movs	r3, #0
 800616e:	60a3      	str	r3, [r4, #8]
 8006170:	782b      	ldrb	r3, [r5, #0]
 8006172:	2b1f      	cmp	r3, #31
 8006174:	d959      	bls.n	800622a <follow_path+0xd6>
 8006176:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80062d4 <follow_path+0x180>
 800617a:	f104 0624 	add.w	r6, r4, #36	; 0x24
 800617e:	220b      	movs	r2, #11
 8006180:	2120      	movs	r1, #32
 8006182:	4630      	mov	r0, r6
 8006184:	f7ff fa20 	bl	80055c8 <mem_set>
 8006188:	2200      	movs	r2, #0
 800618a:	f105 3eff 	add.w	lr, r5, #4294967295
 800618e:	4611      	mov	r1, r2
 8006190:	2008      	movs	r0, #8
 8006192:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8006196:	2b20      	cmp	r3, #32
 8006198:	f101 0101 	add.w	r1, r1, #1
 800619c:	d90b      	bls.n	80061b6 <follow_path+0x62>
 800619e:	2b2f      	cmp	r3, #47	; 0x2f
 80061a0:	d14b      	bne.n	800623a <follow_path+0xe6>
 80061a2:	1868      	adds	r0, r5, r1
 80061a4:	1b41      	subs	r1, r0, r5
 80061a6:	f810 eb01 	ldrb.w	lr, [r0], #1
 80061aa:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 80061ae:	d0f9      	beq.n	80061a4 <follow_path+0x50>
 80061b0:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 80061b4:	d0f6      	beq.n	80061a4 <follow_path+0x50>
 80061b6:	440d      	add	r5, r1
 80061b8:	2a00      	cmp	r2, #0
 80061ba:	d054      	beq.n	8006266 <follow_path+0x112>
 80061bc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80061c0:	f8d4 9000 	ldr.w	r9, [r4]
 80061c4:	2ae5      	cmp	r2, #229	; 0xe5
 80061c6:	bf04      	itt	eq
 80061c8:	2205      	moveq	r2, #5
 80061ca:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
 80061ce:	2b21      	cmp	r3, #33	; 0x21
 80061d0:	bf34      	ite	cc
 80061d2:	2304      	movcc	r3, #4
 80061d4:	2300      	movcs	r3, #0
 80061d6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 80061da:	4620      	mov	r0, r4
 80061dc:	f7ff ff0e 	bl	8005ffc <dir_sdi.constprop.14>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d145      	bne.n	8006270 <follow_path+0x11c>
 80061e4:	69e1      	ldr	r1, [r4, #28]
 80061e6:	4648      	mov	r0, r9
 80061e8:	f7ff fbea 	bl	80059c0 <move_window>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d13f      	bne.n	8006270 <follow_path+0x11c>
 80061f0:	6a23      	ldr	r3, [r4, #32]
 80061f2:	781a      	ldrb	r2, [r3, #0]
 80061f4:	2a00      	cmp	r2, #0
 80061f6:	d046      	beq.n	8006286 <follow_path+0x132>
 80061f8:	7ada      	ldrb	r2, [r3, #11]
 80061fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80061fe:	71a2      	strb	r2, [r4, #6]
 8006200:	7ada      	ldrb	r2, [r3, #11]
 8006202:	0711      	lsls	r1, r2, #28
 8006204:	d40c      	bmi.n	8006220 <follow_path+0xcc>
 8006206:	f103 0e0b 	add.w	lr, r3, #11
 800620a:	4631      	mov	r1, r6
 800620c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006210:	f811 cb01 	ldrb.w	ip, [r1], #1
 8006214:	459e      	cmp	lr, r3
 8006216:	eba2 020c 	sub.w	r2, r2, ip
 800621a:	d027      	beq.n	800626c <follow_path+0x118>
 800621c:	2a00      	cmp	r2, #0
 800621e:	d0f5      	beq.n	800620c <follow_path+0xb8>
 8006220:	2100      	movs	r1, #0
 8006222:	4620      	mov	r0, r4
 8006224:	f7ff ff1d 	bl	8006062 <dir_next>
 8006228:	e7da      	b.n	80061e0 <follow_path+0x8c>
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8006230:	4620      	mov	r0, r4
 8006232:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006236:	f7ff bee1 	b.w	8005ffc <dir_sdi.constprop.14>
 800623a:	2b5c      	cmp	r3, #92	; 0x5c
 800623c:	d0b1      	beq.n	80061a2 <follow_path+0x4e>
 800623e:	2b2e      	cmp	r3, #46	; 0x2e
 8006240:	d036      	beq.n	80062b0 <follow_path+0x15c>
 8006242:	4290      	cmp	r0, r2
 8006244:	d90f      	bls.n	8006266 <follow_path+0x112>
 8006246:	f013 0f80 	tst.w	r3, #128	; 0x80
 800624a:	bf18      	it	ne
 800624c:	3b80      	subne	r3, #128	; 0x80
 800624e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80062d8 <follow_path+0x184>
 8006252:	bf18      	it	ne
 8006254:	f818 3003 	ldrbne.w	r3, [r8, r3]
 8006258:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 800625c:	f1bc 0f00 	cmp.w	ip, #0
 8006260:	d02b      	beq.n	80062ba <follow_path+0x166>
 8006262:	4563      	cmp	r3, ip
 8006264:	d1f8      	bne.n	8006258 <follow_path+0x104>
 8006266:	2006      	movs	r0, #6
 8006268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800626c:	2a00      	cmp	r2, #0
 800626e:	d1d7      	bne.n	8006220 <follow_path+0xcc>
 8006270:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8006274:	b148      	cbz	r0, 800628a <follow_path+0x136>
 8006276:	2804      	cmp	r0, #4
 8006278:	d129      	bne.n	80062ce <follow_path+0x17a>
 800627a:	f013 0f04 	tst.w	r3, #4
 800627e:	bf08      	it	eq
 8006280:	2005      	moveq	r0, #5
 8006282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006286:	2004      	movs	r0, #4
 8006288:	e7f2      	b.n	8006270 <follow_path+0x11c>
 800628a:	075a      	lsls	r2, r3, #29
 800628c:	d41f      	bmi.n	80062ce <follow_path+0x17a>
 800628e:	79a3      	ldrb	r3, [r4, #6]
 8006290:	06db      	lsls	r3, r3, #27
 8006292:	d50a      	bpl.n	80062aa <follow_path+0x156>
 8006294:	6963      	ldr	r3, [r4, #20]
 8006296:	7838      	ldrb	r0, [r7, #0]
 8006298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80062a0:	4419      	add	r1, r3
 80062a2:	f7ff fad4 	bl	800584e <ld_clust.isra.1>
 80062a6:	60a0      	str	r0, [r4, #8]
 80062a8:	e767      	b.n	800617a <follow_path+0x26>
 80062aa:	2005      	movs	r0, #5
 80062ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b0:	280b      	cmp	r0, #11
 80062b2:	d0d8      	beq.n	8006266 <follow_path+0x112>
 80062b4:	2208      	movs	r2, #8
 80062b6:	200b      	movs	r0, #11
 80062b8:	e76b      	b.n	8006192 <follow_path+0x3e>
 80062ba:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80062be:	f1bc 0f19 	cmp.w	ip, #25
 80062c2:	d801      	bhi.n	80062c8 <follow_path+0x174>
 80062c4:	3b20      	subs	r3, #32
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	54b3      	strb	r3, [r6, r2]
 80062ca:	3201      	adds	r2, #1
 80062cc:	e761      	b.n	8006192 <follow_path+0x3e>
 80062ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d2:	bf00      	nop
 80062d4:	0800f4f9 	.word	0x0800f4f9
 80062d8:	0800f578 	.word	0x0800f578

080062dc <dir_read.constprop.10>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4604      	mov	r4, r0
 80062e0:	6805      	ldr	r5, [r0, #0]
 80062e2:	2004      	movs	r0, #4
 80062e4:	69e1      	ldr	r1, [r4, #28]
 80062e6:	b909      	cbnz	r1, 80062ec <dir_read.constprop.10+0x10>
 80062e8:	b1a8      	cbz	r0, 8006316 <dir_read.constprop.10+0x3a>
 80062ea:	e01c      	b.n	8006326 <dir_read.constprop.10+0x4a>
 80062ec:	4628      	mov	r0, r5
 80062ee:	f7ff fb67 	bl	80059c0 <move_window>
 80062f2:	b9c0      	cbnz	r0, 8006326 <dir_read.constprop.10+0x4a>
 80062f4:	6a23      	ldr	r3, [r4, #32]
 80062f6:	781a      	ldrb	r2, [r3, #0]
 80062f8:	b1c2      	cbz	r2, 800632c <dir_read.constprop.10+0x50>
 80062fa:	7adb      	ldrb	r3, [r3, #11]
 80062fc:	2ae5      	cmp	r2, #229	; 0xe5
 80062fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006302:	71a3      	strb	r3, [r4, #6]
 8006304:	d009      	beq.n	800631a <dir_read.constprop.10+0x3e>
 8006306:	2a2e      	cmp	r2, #46	; 0x2e
 8006308:	d007      	beq.n	800631a <dir_read.constprop.10+0x3e>
 800630a:	2b0f      	cmp	r3, #15
 800630c:	d005      	beq.n	800631a <dir_read.constprop.10+0x3e>
 800630e:	f023 0320 	bic.w	r3, r3, #32
 8006312:	2b08      	cmp	r3, #8
 8006314:	d001      	beq.n	800631a <dir_read.constprop.10+0x3e>
 8006316:	2000      	movs	r0, #0
 8006318:	bd38      	pop	{r3, r4, r5, pc}
 800631a:	2100      	movs	r1, #0
 800631c:	4620      	mov	r0, r4
 800631e:	f7ff fea0 	bl	8006062 <dir_next>
 8006322:	2800      	cmp	r0, #0
 8006324:	d0de      	beq.n	80062e4 <dir_read.constprop.10+0x8>
 8006326:	2300      	movs	r3, #0
 8006328:	61e3      	str	r3, [r4, #28]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	2004      	movs	r0, #4
 800632e:	e7fa      	b.n	8006326 <dir_read.constprop.10+0x4a>

08006330 <dir_register>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4605      	mov	r5, r0
 8006334:	6806      	ldr	r6, [r0, #0]
 8006336:	f7ff fe61 	bl	8005ffc <dir_sdi.constprop.14>
 800633a:	4604      	mov	r4, r0
 800633c:	bb28      	cbnz	r0, 800638a <dir_register+0x5a>
 800633e:	69e9      	ldr	r1, [r5, #28]
 8006340:	4630      	mov	r0, r6
 8006342:	f7ff fb3d 	bl	80059c0 <move_window>
 8006346:	4604      	mov	r4, r0
 8006348:	b9f8      	cbnz	r0, 800638a <dir_register+0x5a>
 800634a:	6a2b      	ldr	r3, [r5, #32]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2be5      	cmp	r3, #229	; 0xe5
 8006350:	d114      	bne.n	800637c <dir_register+0x4c>
 8006352:	69e9      	ldr	r1, [r5, #28]
 8006354:	4630      	mov	r0, r6
 8006356:	f7ff fb33 	bl	80059c0 <move_window>
 800635a:	4604      	mov	r4, r0
 800635c:	b960      	cbnz	r0, 8006378 <dir_register+0x48>
 800635e:	4601      	mov	r1, r0
 8006360:	2220      	movs	r2, #32
 8006362:	6a28      	ldr	r0, [r5, #32]
 8006364:	f7ff f930 	bl	80055c8 <mem_set>
 8006368:	220b      	movs	r2, #11
 800636a:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800636e:	6a28      	ldr	r0, [r5, #32]
 8006370:	f7ff fa64 	bl	800583c <mem_cpy.part.0>
 8006374:	2301      	movs	r3, #1
 8006376:	70f3      	strb	r3, [r6, #3]
 8006378:	4620      	mov	r0, r4
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0e8      	beq.n	8006352 <dir_register+0x22>
 8006380:	2101      	movs	r1, #1
 8006382:	4628      	mov	r0, r5
 8006384:	f7ff fe6d 	bl	8006062 <dir_next>
 8006388:	e7d7      	b.n	800633a <dir_register+0xa>
 800638a:	2c04      	cmp	r4, #4
 800638c:	bf08      	it	eq
 800638e:	2407      	moveq	r4, #7
 8006390:	e7f2      	b.n	8006378 <dir_register+0x48>
	...

08006394 <f_mount>:
 8006394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006396:	9001      	str	r0, [sp, #4]
 8006398:	a804      	add	r0, sp, #16
 800639a:	9100      	str	r1, [sp, #0]
 800639c:	f840 1d04 	str.w	r1, [r0, #-4]!
 80063a0:	4616      	mov	r6, r2
 80063a2:	f7ff fa18 	bl	80057d6 <get_ldnumber>
 80063a6:	1e05      	subs	r5, r0, #0
 80063a8:	db1f      	blt.n	80063ea <f_mount+0x56>
 80063aa:	4912      	ldr	r1, [pc, #72]	; (80063f4 <f_mount+0x60>)
 80063ac:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]
 80063b0:	b15c      	cbz	r4, 80063ca <f_mount+0x36>
 80063b2:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <f_mount+0x64>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4294      	cmp	r4, r2
 80063b8:	bf04      	itt	eq
 80063ba:	2200      	moveq	r2, #0
 80063bc:	601a      	streq	r2, [r3, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	2000      	movs	r0, #0
 80063c2:	4294      	cmp	r4, r2
 80063c4:	bf08      	it	eq
 80063c6:	6118      	streq	r0, [r3, #16]
 80063c8:	7020      	strb	r0, [r4, #0]
 80063ca:	9801      	ldr	r0, [sp, #4]
 80063cc:	b108      	cbz	r0, 80063d2 <f_mount+0x3e>
 80063ce:	2300      	movs	r3, #0
 80063d0:	7003      	strb	r3, [r0, #0]
 80063d2:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
 80063d6:	b130      	cbz	r0, 80063e6 <f_mount+0x52>
 80063d8:	2e01      	cmp	r6, #1
 80063da:	d108      	bne.n	80063ee <f_mount+0x5a>
 80063dc:	2200      	movs	r2, #0
 80063de:	a901      	add	r1, sp, #4
 80063e0:	4668      	mov	r0, sp
 80063e2:	f7ff fb49 	bl	8005a78 <find_volume>
 80063e6:	b004      	add	sp, #16
 80063e8:	bd70      	pop	{r4, r5, r6, pc}
 80063ea:	200b      	movs	r0, #11
 80063ec:	e7fb      	b.n	80063e6 <f_mount+0x52>
 80063ee:	2000      	movs	r0, #0
 80063f0:	e7f9      	b.n	80063e6 <f_mount+0x52>
 80063f2:	bf00      	nop
 80063f4:	2000027c 	.word	0x2000027c
 80063f8:	20000280 	.word	0x20000280

080063fc <f_open>:
 80063fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	b090      	sub	sp, #64	; 0x40
 8006402:	4690      	mov	r8, r2
 8006404:	9101      	str	r1, [sp, #4]
 8006406:	4604      	mov	r4, r0
 8006408:	2800      	cmp	r0, #0
 800640a:	f000 80ce 	beq.w	80065aa <f_open+0x1ae>
 800640e:	f002 053f 	and.w	r5, r2, #63	; 0x3f
 8006412:	462a      	mov	r2, r5
 8006414:	a902      	add	r1, sp, #8
 8006416:	a801      	add	r0, sp, #4
 8006418:	f7ff fb2e 	bl	8005a78 <find_volume>
 800641c:	4607      	mov	r7, r0
 800641e:	bb38      	cbnz	r0, 8006470 <f_open+0x74>
 8006420:	ae10      	add	r6, sp, #64	; 0x40
 8006422:	9b02      	ldr	r3, [sp, #8]
 8006424:	f846 3d34 	str.w	r3, [r6, #-52]!
 8006428:	9901      	ldr	r1, [sp, #4]
 800642a:	4630      	mov	r0, r6
 800642c:	f7ff fe92 	bl	8006154 <follow_path>
 8006430:	b958      	cbnz	r0, 800644a <f_open+0x4e>
 8006432:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8006436:	2b00      	cmp	r3, #0
 8006438:	db1e      	blt.n	8006478 <f_open+0x7c>
 800643a:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 800643e:	bf14      	ite	ne
 8006440:	2101      	movne	r1, #1
 8006442:	2100      	moveq	r1, #0
 8006444:	4630      	mov	r0, r6
 8006446:	f7ff f8c5 	bl	80055d4 <chk_lock>
 800644a:	f018 0f1c 	tst.w	r8, #28
 800644e:	d073      	beq.n	8006538 <f_open+0x13c>
 8006450:	b1a0      	cbz	r0, 800647c <f_open+0x80>
 8006452:	2804      	cmp	r0, #4
 8006454:	d109      	bne.n	800646a <f_open+0x6e>
 8006456:	4b71      	ldr	r3, [pc, #452]	; (800661c <f_open+0x220>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	2a00      	cmp	r2, #0
 800645c:	f000 80da 	beq.w	8006614 <f_open+0x218>
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 80d6 	beq.w	8006614 <f_open+0x218>
 8006468:	2012      	movs	r0, #18
 800646a:	f045 0508 	orr.w	r5, r5, #8
 800646e:	b170      	cbz	r0, 800648e <f_open+0x92>
 8006470:	2300      	movs	r3, #0
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	4607      	mov	r7, r0
 8006476:	e092      	b.n	800659e <f_open+0x1a2>
 8006478:	2006      	movs	r0, #6
 800647a:	e7e6      	b.n	800644a <f_open+0x4e>
 800647c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006480:	f013 0f11 	tst.w	r3, #17
 8006484:	d163      	bne.n	800654e <f_open+0x152>
 8006486:	f018 0f04 	tst.w	r8, #4
 800648a:	f040 80bd 	bne.w	8006608 <f_open+0x20c>
 800648e:	0728      	lsls	r0, r5, #28
 8006490:	d53c      	bpl.n	800650c <f_open+0x110>
 8006492:	f001 fcc9 	bl	8007e28 <get_fattime>
 8006496:	4602      	mov	r2, r0
 8006498:	4601      	mov	r1, r0
 800649a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800649c:	300e      	adds	r0, #14
 800649e:	f7ff f88b 	bl	80055b8 <st_dword>
 80064a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80064a4:	4611      	mov	r1, r2
 80064a6:	3016      	adds	r0, #22
 80064a8:	f7ff f886 	bl	80055b8 <st_dword>
 80064ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ae:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80064b2:	2220      	movs	r2, #32
 80064b4:	72da      	strb	r2, [r3, #11]
 80064b6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80064ba:	f899 0000 	ldrb.w	r0, [r9]
 80064be:	4651      	mov	r1, sl
 80064c0:	f7ff f9c5 	bl	800584e <ld_clust.isra.1>
 80064c4:	2200      	movs	r2, #0
 80064c6:	4651      	mov	r1, sl
 80064c8:	4680      	mov	r8, r0
 80064ca:	4648      	mov	r0, r9
 80064cc:	f7ff f9cd 	bl	800586a <st_clust.isra.2>
 80064d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064d2:	2200      	movs	r2, #0
 80064d4:	771a      	strb	r2, [r3, #28]
 80064d6:	775a      	strb	r2, [r3, #29]
 80064d8:	779a      	strb	r2, [r3, #30]
 80064da:	77da      	strb	r2, [r3, #31]
 80064dc:	9b02      	ldr	r3, [sp, #8]
 80064de:	2101      	movs	r1, #1
 80064e0:	70d9      	strb	r1, [r3, #3]
 80064e2:	f1b8 0f00 	cmp.w	r8, #0
 80064e6:	d011      	beq.n	800650c <f_open+0x110>
 80064e8:	4641      	mov	r1, r8
 80064ea:	4630      	mov	r0, r6
 80064ec:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
 80064f0:	f7ff fd4e 	bl	8005f90 <remove_chain>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d1bb      	bne.n	8006470 <f_open+0x74>
 80064f8:	4649      	mov	r1, r9
 80064fa:	9802      	ldr	r0, [sp, #8]
 80064fc:	f7ff fa60 	bl	80059c0 <move_window>
 8006500:	9a02      	ldr	r2, [sp, #8]
 8006502:	f108 33ff 	add.w	r3, r8, #4294967295
 8006506:	60d3      	str	r3, [r2, #12]
 8006508:	2800      	cmp	r0, #0
 800650a:	d1b1      	bne.n	8006470 <f_open+0x74>
 800650c:	9b02      	ldr	r3, [sp, #8]
 800650e:	0728      	lsls	r0, r5, #28
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	6263      	str	r3, [r4, #36]	; 0x24
 8006514:	bf48      	it	mi
 8006516:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
 800651a:	f015 0ffe 	tst.w	r5, #254	; 0xfe
 800651e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006520:	62a3      	str	r3, [r4, #40]	; 0x28
 8006522:	bf14      	ite	ne
 8006524:	2101      	movne	r1, #1
 8006526:	2100      	moveq	r1, #0
 8006528:	4630      	mov	r0, r6
 800652a:	f7ff f881 	bl	8005630 <inc_lock>
 800652e:	6120      	str	r0, [r4, #16]
 8006530:	2800      	cmp	r0, #0
 8006532:	d13c      	bne.n	80065ae <f_open+0x1b2>
 8006534:	2002      	movs	r0, #2
 8006536:	e79b      	b.n	8006470 <f_open+0x74>
 8006538:	2800      	cmp	r0, #0
 800653a:	d199      	bne.n	8006470 <f_open+0x74>
 800653c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006540:	06da      	lsls	r2, r3, #27
 8006542:	d463      	bmi.n	800660c <f_open+0x210>
 8006544:	f018 0f02 	tst.w	r8, #2
 8006548:	d0e0      	beq.n	800650c <f_open+0x110>
 800654a:	07db      	lsls	r3, r3, #31
 800654c:	d5de      	bpl.n	800650c <f_open+0x110>
 800654e:	2007      	movs	r0, #7
 8006550:	e78e      	b.n	8006470 <f_open+0x74>
 8006552:	6820      	ldr	r0, [r4, #0]
 8006554:	f7ff fc6a 	bl	8005e2c <get_fat.isra.8>
 8006558:	2801      	cmp	r0, #1
 800655a:	4601      	mov	r1, r0
 800655c:	d923      	bls.n	80065a6 <f_open+0x1aa>
 800655e:	1c42      	adds	r2, r0, #1
 8006560:	4250      	negs	r0, r2
 8006562:	4150      	adcs	r0, r2
 8006564:	eba5 0508 	sub.w	r5, r5, r8
 8006568:	2800      	cmp	r0, #0
 800656a:	d049      	beq.n	8006600 <f_open+0x204>
 800656c:	61e1      	str	r1, [r4, #28]
 800656e:	2800      	cmp	r0, #0
 8006570:	f47f af7e 	bne.w	8006470 <f_open+0x74>
 8006574:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8006578:	b18b      	cbz	r3, 800659e <f_open+0x1a2>
 800657a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800657e:	4640      	mov	r0, r8
 8006580:	f7ff f8aa 	bl	80056d8 <clust2sect>
 8006584:	2800      	cmp	r0, #0
 8006586:	d0d5      	beq.n	8006534 <f_open+0x138>
 8006588:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 800658c:	6222      	str	r2, [r4, #32]
 800658e:	2301      	movs	r3, #1
 8006590:	4631      	mov	r1, r6
 8006592:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006596:	f7fe ffdd 	bl	8005554 <disk_read>
 800659a:	2800      	cmp	r0, #0
 800659c:	d138      	bne.n	8006610 <f_open+0x214>
 800659e:	4638      	mov	r0, r7
 80065a0:	b010      	add	sp, #64	; 0x40
 80065a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a6:	2002      	movs	r0, #2
 80065a8:	e7dc      	b.n	8006564 <f_open+0x168>
 80065aa:	2709      	movs	r7, #9
 80065ac:	e7f7      	b.n	800659e <f_open+0x1a2>
 80065ae:	9e02      	ldr	r6, [sp, #8]
 80065b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80065b4:	7830      	ldrb	r0, [r6, #0]
 80065b6:	4641      	mov	r1, r8
 80065b8:	f7ff f949 	bl	800584e <ld_clust.isra.1>
 80065bc:	60a0      	str	r0, [r4, #8]
 80065be:	f108 001c 	add.w	r0, r8, #28
 80065c2:	f7fe fff1 	bl	80055a8 <ld_dword>
 80065c6:	88f3      	ldrh	r3, [r6, #6]
 80065c8:	6026      	str	r6, [r4, #0]
 80065ca:	2100      	movs	r1, #0
 80065cc:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80065d0:	60e0      	str	r0, [r4, #12]
 80065d2:	80a3      	strh	r3, [r4, #4]
 80065d4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80065d6:	7525      	strb	r5, [r4, #20]
 80065d8:	7561      	strb	r1, [r4, #21]
 80065da:	6221      	str	r1, [r4, #32]
 80065dc:	61a1      	str	r1, [r4, #24]
 80065de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e2:	4630      	mov	r0, r6
 80065e4:	f7fe fff0 	bl	80055c8 <mem_set>
 80065e8:	06ab      	lsls	r3, r5, #26
 80065ea:	d5d8      	bpl.n	800659e <f_open+0x1a2>
 80065ec:	68e5      	ldr	r5, [r4, #12]
 80065ee:	2d00      	cmp	r5, #0
 80065f0:	d0d5      	beq.n	800659e <f_open+0x1a2>
 80065f2:	9b02      	ldr	r3, [sp, #8]
 80065f4:	68a1      	ldr	r1, [r4, #8]
 80065f6:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 80065fa:	61a5      	str	r5, [r4, #24]
 80065fc:	ea4f 2848 	mov.w	r8, r8, lsl #9
 8006600:	45a8      	cmp	r8, r5
 8006602:	d3a6      	bcc.n	8006552 <f_open+0x156>
 8006604:	2000      	movs	r0, #0
 8006606:	e7b1      	b.n	800656c <f_open+0x170>
 8006608:	2008      	movs	r0, #8
 800660a:	e731      	b.n	8006470 <f_open+0x74>
 800660c:	2004      	movs	r0, #4
 800660e:	e72f      	b.n	8006470 <f_open+0x74>
 8006610:	2001      	movs	r0, #1
 8006612:	e72d      	b.n	8006470 <f_open+0x74>
 8006614:	4630      	mov	r0, r6
 8006616:	f7ff fe8b 	bl	8006330 <dir_register>
 800661a:	e726      	b.n	800646a <f_open+0x6e>
 800661c:	20000280 	.word	0x20000280

08006620 <f_read>:
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	469b      	mov	fp, r3
 8006626:	b085      	sub	sp, #20
 8006628:	2300      	movs	r3, #0
 800662a:	4689      	mov	r9, r1
 800662c:	f8cb 3000 	str.w	r3, [fp]
 8006630:	a903      	add	r1, sp, #12
 8006632:	4604      	mov	r4, r0
 8006634:	4615      	mov	r5, r2
 8006636:	f7ff f8e6 	bl	8005806 <validate>
 800663a:	4606      	mov	r6, r0
 800663c:	bb00      	cbnz	r0, 8006680 <f_read+0x60>
 800663e:	7d66      	ldrb	r6, [r4, #21]
 8006640:	b9f6      	cbnz	r6, 8006680 <f_read+0x60>
 8006642:	7d23      	ldrb	r3, [r4, #20]
 8006644:	07da      	lsls	r2, r3, #31
 8006646:	f140 8096 	bpl.w	8006776 <f_read+0x156>
 800664a:	68e3      	ldr	r3, [r4, #12]
 800664c:	69a7      	ldr	r7, [r4, #24]
 800664e:	1bdf      	subs	r7, r3, r7
 8006650:	42af      	cmp	r7, r5
 8006652:	bf28      	it	cs
 8006654:	462f      	movcs	r7, r5
 8006656:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 800665a:	b18f      	cbz	r7, 8006680 <f_read+0x60>
 800665c:	69a1      	ldr	r1, [r4, #24]
 800665e:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8006662:	2b00      	cmp	r3, #0
 8006664:	d179      	bne.n	800675a <f_read+0x13a>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	895b      	ldrh	r3, [r3, #10]
 800666a:	3b01      	subs	r3, #1
 800666c:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	d119      	bne.n	80066a8 <f_read+0x88>
 8006674:	b941      	cbnz	r1, 8006688 <f_read+0x68>
 8006676:	68a0      	ldr	r0, [r4, #8]
 8006678:	2801      	cmp	r0, #1
 800667a:	d810      	bhi.n	800669e <f_read+0x7e>
 800667c:	2602      	movs	r6, #2
 800667e:	7566      	strb	r6, [r4, #21]
 8006680:	4630      	mov	r0, r6
 8006682:	b005      	add	sp, #20
 8006684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800668a:	b11b      	cbz	r3, 8006694 <f_read+0x74>
 800668c:	4620      	mov	r0, r4
 800668e:	f7ff f82e 	bl	80056ee <clmt_clust>
 8006692:	e7f1      	b.n	8006678 <f_read+0x58>
 8006694:	69e1      	ldr	r1, [r4, #28]
 8006696:	6820      	ldr	r0, [r4, #0]
 8006698:	f7ff fbc8 	bl	8005e2c <get_fat.isra.8>
 800669c:	e7ec      	b.n	8006678 <f_read+0x58>
 800669e:	1c43      	adds	r3, r0, #1
 80066a0:	d101      	bne.n	80066a6 <f_read+0x86>
 80066a2:	2601      	movs	r6, #1
 80066a4:	e7eb      	b.n	800667e <f_read+0x5e>
 80066a6:	61e0      	str	r0, [r4, #28]
 80066a8:	9b03      	ldr	r3, [sp, #12]
 80066aa:	69e1      	ldr	r1, [r4, #28]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff f812 	bl	80056d8 <clust2sect>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d0e1      	beq.n	800667c <f_read+0x5c>
 80066b8:	9b01      	ldr	r3, [sp, #4]
 80066ba:	0a7d      	lsrs	r5, r7, #9
 80066bc:	eb03 0800 	add.w	r8, r3, r0
 80066c0:	d02d      	beq.n	800671e <f_read+0xfe>
 80066c2:	9b00      	ldr	r3, [sp, #0]
 80066c4:	9a01      	ldr	r2, [sp, #4]
 80066c6:	895b      	ldrh	r3, [r3, #10]
 80066c8:	9800      	ldr	r0, [sp, #0]
 80066ca:	442a      	add	r2, r5
 80066cc:	429a      	cmp	r2, r3
 80066ce:	bf88      	it	hi
 80066d0:	9a01      	ldrhi	r2, [sp, #4]
 80066d2:	7840      	ldrb	r0, [r0, #1]
 80066d4:	bf88      	it	hi
 80066d6:	1a9d      	subhi	r5, r3, r2
 80066d8:	462b      	mov	r3, r5
 80066da:	4642      	mov	r2, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f7fe ff39 	bl	8005554 <disk_read>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d1dd      	bne.n	80066a2 <f_read+0x82>
 80066e6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	da0b      	bge.n	8006706 <f_read+0xe6>
 80066ee:	6a20      	ldr	r0, [r4, #32]
 80066f0:	eba0 0008 	sub.w	r0, r0, r8
 80066f4:	4285      	cmp	r5, r0
 80066f6:	d906      	bls.n	8006706 <f_read+0xe6>
 80066f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066fc:	4651      	mov	r1, sl
 80066fe:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8006702:	f7ff f89b 	bl	800583c <mem_cpy.part.0>
 8006706:	026d      	lsls	r5, r5, #9
 8006708:	69a3      	ldr	r3, [r4, #24]
 800670a:	442b      	add	r3, r5
 800670c:	61a3      	str	r3, [r4, #24]
 800670e:	f8db 3000 	ldr.w	r3, [fp]
 8006712:	442b      	add	r3, r5
 8006714:	44a9      	add	r9, r5
 8006716:	f8cb 3000 	str.w	r3, [fp]
 800671a:	1b7f      	subs	r7, r7, r5
 800671c:	e79d      	b.n	800665a <f_read+0x3a>
 800671e:	6a22      	ldr	r2, [r4, #32]
 8006720:	4590      	cmp	r8, r2
 8006722:	d018      	beq.n	8006756 <f_read+0x136>
 8006724:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	da0b      	bge.n	8006744 <f_read+0x124>
 800672c:	9800      	ldr	r0, [sp, #0]
 800672e:	2301      	movs	r3, #1
 8006730:	4651      	mov	r1, sl
 8006732:	7840      	ldrb	r0, [r0, #1]
 8006734:	f7fe ff1c 	bl	8005570 <disk_write>
 8006738:	2800      	cmp	r0, #0
 800673a:	d1b2      	bne.n	80066a2 <f_read+0x82>
 800673c:	7d23      	ldrb	r3, [r4, #20]
 800673e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006742:	7523      	strb	r3, [r4, #20]
 8006744:	9803      	ldr	r0, [sp, #12]
 8006746:	2301      	movs	r3, #1
 8006748:	4642      	mov	r2, r8
 800674a:	4651      	mov	r1, sl
 800674c:	7840      	ldrb	r0, [r0, #1]
 800674e:	f7fe ff01 	bl	8005554 <disk_read>
 8006752:	2800      	cmp	r0, #0
 8006754:	d1a5      	bne.n	80066a2 <f_read+0x82>
 8006756:	f8c4 8020 	str.w	r8, [r4, #32]
 800675a:	69a1      	ldr	r1, [r4, #24]
 800675c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006760:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 8006764:	42bd      	cmp	r5, r7
 8006766:	bf28      	it	cs
 8006768:	463d      	movcs	r5, r7
 800676a:	462a      	mov	r2, r5
 800676c:	4451      	add	r1, sl
 800676e:	4648      	mov	r0, r9
 8006770:	f7ff f864 	bl	800583c <mem_cpy.part.0>
 8006774:	e7c8      	b.n	8006708 <f_read+0xe8>
 8006776:	2607      	movs	r6, #7
 8006778:	e782      	b.n	8006680 <f_read+0x60>

0800677a <f_write>:
 800677a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677e:	469b      	mov	fp, r3
 8006780:	b085      	sub	sp, #20
 8006782:	2300      	movs	r3, #0
 8006784:	4689      	mov	r9, r1
 8006786:	f8cb 3000 	str.w	r3, [fp]
 800678a:	a903      	add	r1, sp, #12
 800678c:	4604      	mov	r4, r0
 800678e:	4617      	mov	r7, r2
 8006790:	f7ff f839 	bl	8005806 <validate>
 8006794:	4606      	mov	r6, r0
 8006796:	bb58      	cbnz	r0, 80067f0 <f_write+0x76>
 8006798:	7d66      	ldrb	r6, [r4, #21]
 800679a:	bb4e      	cbnz	r6, 80067f0 <f_write+0x76>
 800679c:	7d23      	ldrb	r3, [r4, #20]
 800679e:	079a      	lsls	r2, r3, #30
 80067a0:	f140 80ae 	bpl.w	8006900 <f_write+0x186>
 80067a4:	69a3      	ldr	r3, [r4, #24]
 80067a6:	42fb      	cmn	r3, r7
 80067a8:	bf28      	it	cs
 80067aa:	43df      	mvncs	r7, r3
 80067ac:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 80067b0:	b1d7      	cbz	r7, 80067e8 <f_write+0x6e>
 80067b2:	69a1      	ldr	r1, [r4, #24]
 80067b4:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f040 808f 	bne.w	80068dc <f_write+0x162>
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	895b      	ldrh	r3, [r3, #10]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	d124      	bne.n	8006816 <f_write+0x9c>
 80067cc:	b931      	cbnz	r1, 80067dc <f_write+0x62>
 80067ce:	68a0      	ldr	r0, [r4, #8]
 80067d0:	b9a0      	cbnz	r0, 80067fc <f_write+0x82>
 80067d2:	4601      	mov	r1, r0
 80067d4:	4620      	mov	r0, r4
 80067d6:	f7ff fb83 	bl	8005ee0 <create_chain>
 80067da:	e004      	b.n	80067e6 <f_write+0x6c>
 80067dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067de:	b15b      	cbz	r3, 80067f8 <f_write+0x7e>
 80067e0:	4620      	mov	r0, r4
 80067e2:	f7fe ff84 	bl	80056ee <clmt_clust>
 80067e6:	b948      	cbnz	r0, 80067fc <f_write+0x82>
 80067e8:	7d23      	ldrb	r3, [r4, #20]
 80067ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ee:	7523      	strb	r3, [r4, #20]
 80067f0:	4630      	mov	r0, r6
 80067f2:	b005      	add	sp, #20
 80067f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f8:	69e1      	ldr	r1, [r4, #28]
 80067fa:	e7eb      	b.n	80067d4 <f_write+0x5a>
 80067fc:	2801      	cmp	r0, #1
 80067fe:	d102      	bne.n	8006806 <f_write+0x8c>
 8006800:	2602      	movs	r6, #2
 8006802:	7566      	strb	r6, [r4, #21]
 8006804:	e7f4      	b.n	80067f0 <f_write+0x76>
 8006806:	1c43      	adds	r3, r0, #1
 8006808:	d101      	bne.n	800680e <f_write+0x94>
 800680a:	2601      	movs	r6, #1
 800680c:	e7f9      	b.n	8006802 <f_write+0x88>
 800680e:	68a3      	ldr	r3, [r4, #8]
 8006810:	61e0      	str	r0, [r4, #28]
 8006812:	b903      	cbnz	r3, 8006816 <f_write+0x9c>
 8006814:	60a0      	str	r0, [r4, #8]
 8006816:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	da0c      	bge.n	8006838 <f_write+0xbe>
 800681e:	9803      	ldr	r0, [sp, #12]
 8006820:	6a22      	ldr	r2, [r4, #32]
 8006822:	7840      	ldrb	r0, [r0, #1]
 8006824:	2301      	movs	r3, #1
 8006826:	4651      	mov	r1, sl
 8006828:	f7fe fea2 	bl	8005570 <disk_write>
 800682c:	2800      	cmp	r0, #0
 800682e:	d1ec      	bne.n	800680a <f_write+0x90>
 8006830:	7d23      	ldrb	r3, [r4, #20]
 8006832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006836:	7523      	strb	r3, [r4, #20]
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	69e1      	ldr	r1, [r4, #28]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe ff4a 	bl	80056d8 <clust2sect>
 8006844:	2800      	cmp	r0, #0
 8006846:	d0db      	beq.n	8006800 <f_write+0x86>
 8006848:	9b01      	ldr	r3, [sp, #4]
 800684a:	0a7d      	lsrs	r5, r7, #9
 800684c:	eb03 0800 	add.w	r8, r3, r0
 8006850:	d032      	beq.n	80068b8 <f_write+0x13e>
 8006852:	9b00      	ldr	r3, [sp, #0]
 8006854:	9a01      	ldr	r2, [sp, #4]
 8006856:	895b      	ldrh	r3, [r3, #10]
 8006858:	9800      	ldr	r0, [sp, #0]
 800685a:	442a      	add	r2, r5
 800685c:	429a      	cmp	r2, r3
 800685e:	bf88      	it	hi
 8006860:	9a01      	ldrhi	r2, [sp, #4]
 8006862:	7840      	ldrb	r0, [r0, #1]
 8006864:	bf88      	it	hi
 8006866:	1a9d      	subhi	r5, r3, r2
 8006868:	462b      	mov	r3, r5
 800686a:	4642      	mov	r2, r8
 800686c:	4649      	mov	r1, r9
 800686e:	f7fe fe7f 	bl	8005570 <disk_write>
 8006872:	2800      	cmp	r0, #0
 8006874:	d1c9      	bne.n	800680a <f_write+0x90>
 8006876:	6a21      	ldr	r1, [r4, #32]
 8006878:	eba1 0108 	sub.w	r1, r1, r8
 800687c:	428d      	cmp	r5, r1
 800687e:	d90a      	bls.n	8006896 <f_write+0x11c>
 8006880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006884:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8006888:	4650      	mov	r0, sl
 800688a:	f7fe ffd7 	bl	800583c <mem_cpy.part.0>
 800688e:	7d23      	ldrb	r3, [r4, #20]
 8006890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006894:	7523      	strb	r3, [r4, #20]
 8006896:	026d      	lsls	r5, r5, #9
 8006898:	69a3      	ldr	r3, [r4, #24]
 800689a:	68e2      	ldr	r2, [r4, #12]
 800689c:	442b      	add	r3, r5
 800689e:	61a3      	str	r3, [r4, #24]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	bf2c      	ite	cs
 80068a4:	60e2      	strcs	r2, [r4, #12]
 80068a6:	60e3      	strcc	r3, [r4, #12]
 80068a8:	f8db 3000 	ldr.w	r3, [fp]
 80068ac:	442b      	add	r3, r5
 80068ae:	44a9      	add	r9, r5
 80068b0:	f8cb 3000 	str.w	r3, [fp]
 80068b4:	1b7f      	subs	r7, r7, r5
 80068b6:	e77b      	b.n	80067b0 <f_write+0x36>
 80068b8:	6a23      	ldr	r3, [r4, #32]
 80068ba:	4598      	cmp	r8, r3
 80068bc:	d00c      	beq.n	80068d8 <f_write+0x15e>
 80068be:	69a2      	ldr	r2, [r4, #24]
 80068c0:	68e3      	ldr	r3, [r4, #12]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d208      	bcs.n	80068d8 <f_write+0x15e>
 80068c6:	9800      	ldr	r0, [sp, #0]
 80068c8:	2301      	movs	r3, #1
 80068ca:	4642      	mov	r2, r8
 80068cc:	4651      	mov	r1, sl
 80068ce:	7840      	ldrb	r0, [r0, #1]
 80068d0:	f7fe fe40 	bl	8005554 <disk_read>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d198      	bne.n	800680a <f_write+0x90>
 80068d8:	f8c4 8020 	str.w	r8, [r4, #32]
 80068dc:	69a0      	ldr	r0, [r4, #24]
 80068de:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80068e2:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 80068e6:	42bd      	cmp	r5, r7
 80068e8:	bf28      	it	cs
 80068ea:	463d      	movcs	r5, r7
 80068ec:	462a      	mov	r2, r5
 80068ee:	4649      	mov	r1, r9
 80068f0:	4450      	add	r0, sl
 80068f2:	f7fe ffa3 	bl	800583c <mem_cpy.part.0>
 80068f6:	7d23      	ldrb	r3, [r4, #20]
 80068f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068fc:	7523      	strb	r3, [r4, #20]
 80068fe:	e7cb      	b.n	8006898 <f_write+0x11e>
 8006900:	2607      	movs	r6, #7
 8006902:	e775      	b.n	80067f0 <f_write+0x76>

08006904 <f_sync>:
 8006904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006906:	a901      	add	r1, sp, #4
 8006908:	4604      	mov	r4, r0
 800690a:	f7fe ff7c 	bl	8005806 <validate>
 800690e:	4605      	mov	r5, r0
 8006910:	2800      	cmp	r0, #0
 8006912:	d13a      	bne.n	800698a <f_sync+0x86>
 8006914:	7d23      	ldrb	r3, [r4, #20]
 8006916:	065a      	lsls	r2, r3, #25
 8006918:	d537      	bpl.n	800698a <f_sync+0x86>
 800691a:	061b      	lsls	r3, r3, #24
 800691c:	d50c      	bpl.n	8006938 <f_sync+0x34>
 800691e:	9801      	ldr	r0, [sp, #4]
 8006920:	6a22      	ldr	r2, [r4, #32]
 8006922:	7840      	ldrb	r0, [r0, #1]
 8006924:	2301      	movs	r3, #1
 8006926:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800692a:	f7fe fe21 	bl	8005570 <disk_write>
 800692e:	bb78      	cbnz	r0, 8006990 <f_sync+0x8c>
 8006930:	7d23      	ldrb	r3, [r4, #20]
 8006932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006936:	7523      	strb	r3, [r4, #20]
 8006938:	f001 fa76 	bl	8007e28 <get_fattime>
 800693c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800693e:	4607      	mov	r7, r0
 8006940:	9801      	ldr	r0, [sp, #4]
 8006942:	f7ff f83d 	bl	80059c0 <move_window>
 8006946:	4605      	mov	r5, r0
 8006948:	b9f8      	cbnz	r0, 800698a <f_sync+0x86>
 800694a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800694c:	7af3      	ldrb	r3, [r6, #11]
 800694e:	f043 0320 	orr.w	r3, r3, #32
 8006952:	72f3      	strb	r3, [r6, #11]
 8006954:	68a2      	ldr	r2, [r4, #8]
 8006956:	6820      	ldr	r0, [r4, #0]
 8006958:	4631      	mov	r1, r6
 800695a:	f7fe ff86 	bl	800586a <st_clust.isra.2>
 800695e:	68e1      	ldr	r1, [r4, #12]
 8006960:	f106 001c 	add.w	r0, r6, #28
 8006964:	f7fe fe28 	bl	80055b8 <st_dword>
 8006968:	4639      	mov	r1, r7
 800696a:	f106 0016 	add.w	r0, r6, #22
 800696e:	f7fe fe23 	bl	80055b8 <st_dword>
 8006972:	9801      	ldr	r0, [sp, #4]
 8006974:	74b5      	strb	r5, [r6, #18]
 8006976:	2301      	movs	r3, #1
 8006978:	74f5      	strb	r5, [r6, #19]
 800697a:	70c3      	strb	r3, [r0, #3]
 800697c:	f7fe ffd5 	bl	800592a <sync_fs>
 8006980:	7d23      	ldrb	r3, [r4, #20]
 8006982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006986:	4605      	mov	r5, r0
 8006988:	7523      	strb	r3, [r4, #20]
 800698a:	4628      	mov	r0, r5
 800698c:	b003      	add	sp, #12
 800698e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006990:	2501      	movs	r5, #1
 8006992:	e7fa      	b.n	800698a <f_sync+0x86>

08006994 <f_close>:
 8006994:	b513      	push	{r0, r1, r4, lr}
 8006996:	4604      	mov	r4, r0
 8006998:	f7ff ffb4 	bl	8006904 <f_sync>
 800699c:	b948      	cbnz	r0, 80069b2 <f_close+0x1e>
 800699e:	a901      	add	r1, sp, #4
 80069a0:	4620      	mov	r0, r4
 80069a2:	f7fe ff30 	bl	8005806 <validate>
 80069a6:	b920      	cbnz	r0, 80069b2 <f_close+0x1e>
 80069a8:	6920      	ldr	r0, [r4, #16]
 80069aa:	f7fe fe7d 	bl	80056a8 <dec_lock>
 80069ae:	b900      	cbnz	r0, 80069b2 <f_close+0x1e>
 80069b0:	6020      	str	r0, [r4, #0]
 80069b2:	b002      	add	sp, #8
 80069b4:	bd10      	pop	{r4, pc}

080069b6 <f_lseek>:
 80069b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ba:	460d      	mov	r5, r1
 80069bc:	a901      	add	r1, sp, #4
 80069be:	4604      	mov	r4, r0
 80069c0:	f7fe ff21 	bl	8005806 <validate>
 80069c4:	4606      	mov	r6, r0
 80069c6:	b9e0      	cbnz	r0, 8006a02 <f_lseek+0x4c>
 80069c8:	7d66      	ldrb	r6, [r4, #21]
 80069ca:	b9d6      	cbnz	r6, 8006a02 <f_lseek+0x4c>
 80069cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d078      	beq.n	8006ac4 <f_lseek+0x10e>
 80069d2:	1c6a      	adds	r2, r5, #1
 80069d4:	d139      	bne.n	8006a4a <f_lseek+0x94>
 80069d6:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80069da:	f8d3 b000 	ldr.w	fp, [r3]
 80069de:	1d1f      	adds	r7, r3, #4
 80069e0:	2502      	movs	r5, #2
 80069e2:	f1b8 0f00 	cmp.w	r8, #0
 80069e6:	d028      	beq.n	8006a3a <f_lseek+0x84>
 80069e8:	46c1      	mov	r9, r8
 80069ea:	f04f 0a00 	mov.w	sl, #0
 80069ee:	4649      	mov	r1, r9
 80069f0:	6820      	ldr	r0, [r4, #0]
 80069f2:	f7ff fa1b 	bl	8005e2c <get_fat.isra.8>
 80069f6:	2801      	cmp	r0, #1
 80069f8:	f10a 0a01 	add.w	sl, sl, #1
 80069fc:	d807      	bhi.n	8006a0e <f_lseek+0x58>
 80069fe:	2602      	movs	r6, #2
 8006a00:	7566      	strb	r6, [r4, #21]
 8006a02:	4630      	mov	r0, r6
 8006a04:	b003      	add	sp, #12
 8006a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0a:	4680      	mov	r8, r0
 8006a0c:	e7ec      	b.n	80069e8 <f_lseek+0x32>
 8006a0e:	1c43      	adds	r3, r0, #1
 8006a10:	d101      	bne.n	8006a16 <f_lseek+0x60>
 8006a12:	2601      	movs	r6, #1
 8006a14:	e7f4      	b.n	8006a00 <f_lseek+0x4a>
 8006a16:	f109 0301 	add.w	r3, r9, #1
 8006a1a:	4298      	cmp	r0, r3
 8006a1c:	4681      	mov	r9, r0
 8006a1e:	d0e6      	beq.n	80069ee <f_lseek+0x38>
 8006a20:	3502      	adds	r5, #2
 8006a22:	45ab      	cmp	fp, r5
 8006a24:	bf21      	itttt	cs
 8006a26:	463b      	movcs	r3, r7
 8006a28:	f843 ab08 	strcs.w	sl, [r3], #8
 8006a2c:	f8c7 8004 	strcs.w	r8, [r7, #4]
 8006a30:	461f      	movcs	r7, r3
 8006a32:	9b01      	ldr	r3, [sp, #4]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	4298      	cmp	r0, r3
 8006a38:	d3e7      	bcc.n	8006a0a <f_lseek+0x54>
 8006a3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a3c:	455d      	cmp	r5, fp
 8006a3e:	601d      	str	r5, [r3, #0]
 8006a40:	f200 80d4 	bhi.w	8006bec <f_lseek+0x236>
 8006a44:	2300      	movs	r3, #0
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	e7db      	b.n	8006a02 <f_lseek+0x4c>
 8006a4a:	68e0      	ldr	r0, [r4, #12]
 8006a4c:	4285      	cmp	r5, r0
 8006a4e:	bf28      	it	cs
 8006a50:	4605      	movcs	r5, r0
 8006a52:	61a5      	str	r5, [r4, #24]
 8006a54:	2d00      	cmp	r5, #0
 8006a56:	d0d4      	beq.n	8006a02 <f_lseek+0x4c>
 8006a58:	f105 38ff 	add.w	r8, r5, #4294967295
 8006a5c:	4641      	mov	r1, r8
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f7fe fe45 	bl	80056ee <clmt_clust>
 8006a64:	9f01      	ldr	r7, [sp, #4]
 8006a66:	61e0      	str	r0, [r4, #28]
 8006a68:	4601      	mov	r1, r0
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	f7fe fe34 	bl	80056d8 <clust2sect>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d0c4      	beq.n	80069fe <f_lseek+0x48>
 8006a74:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8006a78:	2d00      	cmp	r5, #0
 8006a7a:	d0c2      	beq.n	8006a02 <f_lseek+0x4c>
 8006a7c:	897d      	ldrh	r5, [r7, #10]
 8006a7e:	6a22      	ldr	r2, [r4, #32]
 8006a80:	3d01      	subs	r5, #1
 8006a82:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 8006a86:	4405      	add	r5, r0
 8006a88:	4295      	cmp	r5, r2
 8006a8a:	d0ba      	beq.n	8006a02 <f_lseek+0x4c>
 8006a8c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8006a96:	da0a      	bge.n	8006aae <f_lseek+0xf8>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	7878      	ldrb	r0, [r7, #1]
 8006a9e:	f7fe fd67 	bl	8005570 <disk_write>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d1b5      	bne.n	8006a12 <f_lseek+0x5c>
 8006aa6:	7d23      	ldrb	r3, [r4, #20]
 8006aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aac:	7523      	strb	r3, [r4, #20]
 8006aae:	9801      	ldr	r0, [sp, #4]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	462a      	mov	r2, r5
 8006ab4:	4641      	mov	r1, r8
 8006ab6:	7840      	ldrb	r0, [r0, #1]
 8006ab8:	f7fe fd4c 	bl	8005554 <disk_read>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d1a8      	bne.n	8006a12 <f_lseek+0x5c>
 8006ac0:	6225      	str	r5, [r4, #32]
 8006ac2:	e79e      	b.n	8006a02 <f_lseek+0x4c>
 8006ac4:	68e3      	ldr	r3, [r4, #12]
 8006ac6:	429d      	cmp	r5, r3
 8006ac8:	d904      	bls.n	8006ad4 <f_lseek+0x11e>
 8006aca:	7d22      	ldrb	r2, [r4, #20]
 8006acc:	f012 0f02 	tst.w	r2, #2
 8006ad0:	bf08      	it	eq
 8006ad2:	461d      	moveq	r5, r3
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	69a3      	ldr	r3, [r4, #24]
 8006ad8:	61a2      	str	r2, [r4, #24]
 8006ada:	2d00      	cmp	r5, #0
 8006adc:	d132      	bne.n	8006b44 <f_lseek+0x18e>
 8006ade:	462f      	mov	r7, r5
 8006ae0:	e009      	b.n	8006af6 <f_lseek+0x140>
 8006ae2:	2700      	movs	r7, #0
 8006ae4:	68e3      	ldr	r3, [r4, #12]
 8006ae6:	69a5      	ldr	r5, [r4, #24]
 8006ae8:	429d      	cmp	r5, r3
 8006aea:	bf81      	itttt	hi
 8006aec:	7d23      	ldrbhi	r3, [r4, #20]
 8006aee:	60e5      	strhi	r5, [r4, #12]
 8006af0:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 8006af4:	7523      	strbhi	r3, [r4, #20]
 8006af6:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8006afa:	2d00      	cmp	r5, #0
 8006afc:	d081      	beq.n	8006a02 <f_lseek+0x4c>
 8006afe:	6a22      	ldr	r2, [r4, #32]
 8006b00:	42ba      	cmp	r2, r7
 8006b02:	f43f af7e 	beq.w	8006a02 <f_lseek+0x4c>
 8006b06:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8006b10:	da0c      	bge.n	8006b2c <f_lseek+0x176>
 8006b12:	9801      	ldr	r0, [sp, #4]
 8006b14:	2301      	movs	r3, #1
 8006b16:	4629      	mov	r1, r5
 8006b18:	7840      	ldrb	r0, [r0, #1]
 8006b1a:	f7fe fd29 	bl	8005570 <disk_write>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f47f af77 	bne.w	8006a12 <f_lseek+0x5c>
 8006b24:	7d23      	ldrb	r3, [r4, #20]
 8006b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b2a:	7523      	strb	r3, [r4, #20]
 8006b2c:	9801      	ldr	r0, [sp, #4]
 8006b2e:	2301      	movs	r3, #1
 8006b30:	463a      	mov	r2, r7
 8006b32:	4629      	mov	r1, r5
 8006b34:	7840      	ldrb	r0, [r0, #1]
 8006b36:	f7fe fd0d 	bl	8005554 <disk_read>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f47f af69 	bne.w	8006a12 <f_lseek+0x5c>
 8006b40:	6227      	str	r7, [r4, #32]
 8006b42:	e75e      	b.n	8006a02 <f_lseek+0x4c>
 8006b44:	9a01      	ldr	r2, [sp, #4]
 8006b46:	8957      	ldrh	r7, [r2, #10]
 8006b48:	027f      	lsls	r7, r7, #9
 8006b4a:	b303      	cbz	r3, 8006b8e <f_lseek+0x1d8>
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	1e6a      	subs	r2, r5, #1
 8006b50:	fbb3 f1f7 	udiv	r1, r3, r7
 8006b54:	fbb2 f2f7 	udiv	r2, r2, r7
 8006b58:	428a      	cmp	r2, r1
 8006b5a:	d318      	bcc.n	8006b8e <f_lseek+0x1d8>
 8006b5c:	427a      	negs	r2, r7
 8006b5e:	4013      	ands	r3, r2
 8006b60:	69e1      	ldr	r1, [r4, #28]
 8006b62:	61a3      	str	r3, [r4, #24]
 8006b64:	1aed      	subs	r5, r5, r3
 8006b66:	2900      	cmp	r1, #0
 8006b68:	d0bb      	beq.n	8006ae2 <f_lseek+0x12c>
 8006b6a:	42bd      	cmp	r5, r7
 8006b6c:	d81e      	bhi.n	8006bac <f_lseek+0x1f6>
 8006b6e:	69a3      	ldr	r3, [r4, #24]
 8006b70:	442b      	add	r3, r5
 8006b72:	61a3      	str	r3, [r4, #24]
 8006b74:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0b2      	beq.n	8006ae2 <f_lseek+0x12c>
 8006b7c:	9801      	ldr	r0, [sp, #4]
 8006b7e:	f7fe fdab 	bl	80056d8 <clust2sect>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	f43f af3b 	beq.w	80069fe <f_lseek+0x48>
 8006b88:	eb00 2755 	add.w	r7, r0, r5, lsr #9
 8006b8c:	e7aa      	b.n	8006ae4 <f_lseek+0x12e>
 8006b8e:	68a1      	ldr	r1, [r4, #8]
 8006b90:	b951      	cbnz	r1, 8006ba8 <f_lseek+0x1f2>
 8006b92:	4620      	mov	r0, r4
 8006b94:	f7ff f9a4 	bl	8005ee0 <create_chain>
 8006b98:	2801      	cmp	r0, #1
 8006b9a:	4601      	mov	r1, r0
 8006b9c:	f43f af2f 	beq.w	80069fe <f_lseek+0x48>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f43f af36 	beq.w	8006a12 <f_lseek+0x5c>
 8006ba6:	60a1      	str	r1, [r4, #8]
 8006ba8:	61e1      	str	r1, [r4, #28]
 8006baa:	e7dc      	b.n	8006b66 <f_lseek+0x1b0>
 8006bac:	69a3      	ldr	r3, [r4, #24]
 8006bae:	443b      	add	r3, r7
 8006bb0:	61a3      	str	r3, [r4, #24]
 8006bb2:	7d23      	ldrb	r3, [r4, #20]
 8006bb4:	079a      	lsls	r2, r3, #30
 8006bb6:	eba5 0507 	sub.w	r5, r5, r7
 8006bba:	d506      	bpl.n	8006bca <f_lseek+0x214>
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f7ff f98f 	bl	8005ee0 <create_chain>
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	b928      	cbnz	r0, 8006bd2 <f_lseek+0x21c>
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	e7d1      	b.n	8006b6e <f_lseek+0x1b8>
 8006bca:	6820      	ldr	r0, [r4, #0]
 8006bcc:	f7ff f92e 	bl	8005e2c <get_fat.isra.8>
 8006bd0:	4601      	mov	r1, r0
 8006bd2:	1c4b      	adds	r3, r1, #1
 8006bd4:	f43f af1d 	beq.w	8006a12 <f_lseek+0x5c>
 8006bd8:	2901      	cmp	r1, #1
 8006bda:	f67f af10 	bls.w	80069fe <f_lseek+0x48>
 8006bde:	9b01      	ldr	r3, [sp, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	4299      	cmp	r1, r3
 8006be4:	f4bf af0b 	bcs.w	80069fe <f_lseek+0x48>
 8006be8:	61e1      	str	r1, [r4, #28]
 8006bea:	e7be      	b.n	8006b6a <f_lseek+0x1b4>
 8006bec:	2611      	movs	r6, #17
 8006bee:	e708      	b.n	8006a02 <f_lseek+0x4c>

08006bf0 <f_opendir>:
 8006bf0:	b530      	push	{r4, r5, lr}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	9101      	str	r1, [sp, #4]
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d03a      	beq.n	8006c72 <f_opendir+0x82>
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	a903      	add	r1, sp, #12
 8006c00:	a801      	add	r0, sp, #4
 8006c02:	f7fe ff39 	bl	8005a78 <find_volume>
 8006c06:	4604      	mov	r4, r0
 8006c08:	b9f8      	cbnz	r0, 8006c4a <f_opendir+0x5a>
 8006c0a:	9b03      	ldr	r3, [sp, #12]
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	9901      	ldr	r1, [sp, #4]
 8006c10:	4628      	mov	r0, r5
 8006c12:	f7ff fa9f 	bl	8006154 <follow_path>
 8006c16:	4604      	mov	r4, r0
 8006c18:	b9a0      	cbnz	r0, 8006c44 <f_opendir+0x54>
 8006c1a:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	db08      	blt.n	8006c34 <f_opendir+0x44>
 8006c22:	79ab      	ldrb	r3, [r5, #6]
 8006c24:	06db      	lsls	r3, r3, #27
 8006c26:	d520      	bpl.n	8006c6a <f_opendir+0x7a>
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	6a29      	ldr	r1, [r5, #32]
 8006c2c:	7818      	ldrb	r0, [r3, #0]
 8006c2e:	f7fe fe0e 	bl	800584e <ld_clust.isra.1>
 8006c32:	60a8      	str	r0, [r5, #8]
 8006c34:	9b03      	ldr	r3, [sp, #12]
 8006c36:	88db      	ldrh	r3, [r3, #6]
 8006c38:	80ab      	strh	r3, [r5, #4]
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f7ff f9de 	bl	8005ffc <dir_sdi.constprop.14>
 8006c40:	4604      	mov	r4, r0
 8006c42:	b128      	cbz	r0, 8006c50 <f_opendir+0x60>
 8006c44:	2c04      	cmp	r4, #4
 8006c46:	bf08      	it	eq
 8006c48:	2405      	moveq	r4, #5
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	602b      	str	r3, [r5, #0]
 8006c4e:	e007      	b.n	8006c60 <f_opendir+0x70>
 8006c50:	68ab      	ldr	r3, [r5, #8]
 8006c52:	b143      	cbz	r3, 8006c66 <f_opendir+0x76>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	f7fe fcea 	bl	8005630 <inc_lock>
 8006c5c:	6128      	str	r0, [r5, #16]
 8006c5e:	b130      	cbz	r0, 8006c6e <f_opendir+0x7e>
 8006c60:	4620      	mov	r0, r4
 8006c62:	b005      	add	sp, #20
 8006c64:	bd30      	pop	{r4, r5, pc}
 8006c66:	612c      	str	r4, [r5, #16]
 8006c68:	e7fa      	b.n	8006c60 <f_opendir+0x70>
 8006c6a:	2405      	movs	r4, #5
 8006c6c:	e7ed      	b.n	8006c4a <f_opendir+0x5a>
 8006c6e:	2412      	movs	r4, #18
 8006c70:	e7eb      	b.n	8006c4a <f_opendir+0x5a>
 8006c72:	2409      	movs	r4, #9
 8006c74:	e7f4      	b.n	8006c60 <f_opendir+0x70>

08006c76 <f_closedir>:
 8006c76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c78:	a901      	add	r1, sp, #4
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	f7fe fdc3 	bl	8005806 <validate>
 8006c80:	4604      	mov	r4, r0
 8006c82:	b918      	cbnz	r0, 8006c8c <f_closedir+0x16>
 8006c84:	6928      	ldr	r0, [r5, #16]
 8006c86:	b920      	cbnz	r0, 8006c92 <f_closedir+0x1c>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	602b      	str	r3, [r5, #0]
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	b003      	add	sp, #12
 8006c90:	bd30      	pop	{r4, r5, pc}
 8006c92:	f7fe fd09 	bl	80056a8 <dec_lock>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d0f6      	beq.n	8006c88 <f_closedir+0x12>
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	e7f6      	b.n	8006c8c <f_closedir+0x16>

08006c9e <f_readdir>:
 8006c9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ca0:	460d      	mov	r5, r1
 8006ca2:	a901      	add	r1, sp, #4
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	f7fe fdae 	bl	8005806 <validate>
 8006caa:	b918      	cbnz	r0, 8006cb4 <f_readdir+0x16>
 8006cac:	4620      	mov	r0, r4
 8006cae:	b91d      	cbnz	r5, 8006cb8 <f_readdir+0x1a>
 8006cb0:	f7ff f9a4 	bl	8005ffc <dir_sdi.constprop.14>
 8006cb4:	b003      	add	sp, #12
 8006cb6:	bd30      	pop	{r4, r5, pc}
 8006cb8:	f7ff fb10 	bl	80062dc <dir_read.constprop.10>
 8006cbc:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
 8006cc0:	d1f8      	bne.n	8006cb4 <f_readdir+0x16>
 8006cc2:	726b      	strb	r3, [r5, #9]
 8006cc4:	69e3      	ldr	r3, [r4, #28]
 8006cc6:	b11b      	cbz	r3, 8006cd0 <f_readdir+0x32>
 8006cc8:	4629      	mov	r1, r5
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7fe fdd9 	bl	8005882 <get_fileinfo.part.3>
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f7ff f9c5 	bl	8006062 <dir_next>
 8006cd8:	2804      	cmp	r0, #4
 8006cda:	bf08      	it	eq
 8006cdc:	2000      	moveq	r0, #0
 8006cde:	e7e9      	b.n	8006cb4 <f_readdir+0x16>

08006ce0 <f_findnext>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	460d      	mov	r5, r1
 8006ce6:	f101 0709 	add.w	r7, r1, #9
 8006cea:	4629      	mov	r1, r5
 8006cec:	4630      	mov	r0, r6
 8006cee:	f7ff ffd6 	bl	8006c9e <f_readdir>
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	b950      	cbnz	r0, 8006d0c <f_findnext+0x2c>
 8006cf6:	b14d      	cbz	r5, 8006d0c <f_findnext+0x2c>
 8006cf8:	7a6b      	ldrb	r3, [r5, #9]
 8006cfa:	b13b      	cbz	r3, 8006d0c <f_findnext+0x2c>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	4602      	mov	r2, r0
 8006d00:	4639      	mov	r1, r7
 8006d02:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8006d04:	f7fe fd1a 	bl	800573c <pattern_matching>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d0ee      	beq.n	8006cea <f_findnext+0xa>
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d10 <f_findfirst>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	460d      	mov	r5, r1
 8006d14:	6303      	str	r3, [r0, #48]	; 0x30
 8006d16:	4611      	mov	r1, r2
 8006d18:	4604      	mov	r4, r0
 8006d1a:	f7ff ff69 	bl	8006bf0 <f_opendir>
 8006d1e:	b928      	cbnz	r0, 8006d2c <f_findfirst+0x1c>
 8006d20:	4629      	mov	r1, r5
 8006d22:	4620      	mov	r0, r4
 8006d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d28:	f7ff bfda 	b.w	8006ce0 <f_findnext>
 8006d2c:	bd38      	pop	{r3, r4, r5, pc}

08006d2e <f_stat>:
 8006d2e:	b530      	push	{r4, r5, lr}
 8006d30:	b091      	sub	sp, #68	; 0x44
 8006d32:	460d      	mov	r5, r1
 8006d34:	9001      	str	r0, [sp, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	a903      	add	r1, sp, #12
 8006d3a:	a801      	add	r0, sp, #4
 8006d3c:	f7fe fe9c 	bl	8005a78 <find_volume>
 8006d40:	4604      	mov	r4, r0
 8006d42:	b988      	cbnz	r0, 8006d68 <f_stat+0x3a>
 8006d44:	9901      	ldr	r1, [sp, #4]
 8006d46:	a803      	add	r0, sp, #12
 8006d48:	f7ff fa04 	bl	8006154 <follow_path>
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	b958      	cbnz	r0, 8006d68 <f_stat+0x3a>
 8006d50:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	db0a      	blt.n	8006d6e <f_stat+0x40>
 8006d58:	b135      	cbz	r5, 8006d68 <f_stat+0x3a>
 8006d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5c:	7268      	strb	r0, [r5, #9]
 8006d5e:	b11b      	cbz	r3, 8006d68 <f_stat+0x3a>
 8006d60:	4629      	mov	r1, r5
 8006d62:	a803      	add	r0, sp, #12
 8006d64:	f7fe fd8d 	bl	8005882 <get_fileinfo.part.3>
 8006d68:	4620      	mov	r0, r4
 8006d6a:	b011      	add	sp, #68	; 0x44
 8006d6c:	bd30      	pop	{r4, r5, pc}
 8006d6e:	2406      	movs	r4, #6
 8006d70:	e7fa      	b.n	8006d68 <f_stat+0x3a>

08006d72 <f_unlink>:
 8006d72:	b570      	push	{r4, r5, r6, lr}
 8006d74:	b09e      	sub	sp, #120	; 0x78
 8006d76:	2202      	movs	r2, #2
 8006d78:	9001      	str	r0, [sp, #4]
 8006d7a:	a903      	add	r1, sp, #12
 8006d7c:	a801      	add	r0, sp, #4
 8006d7e:	f7fe fe7b 	bl	8005a78 <find_volume>
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	b990      	cbnz	r0, 8006dae <f_unlink+0x3c>
 8006d88:	9901      	ldr	r1, [sp, #4]
 8006d8a:	a804      	add	r0, sp, #16
 8006d8c:	f7ff f9e2 	bl	8006154 <follow_path>
 8006d90:	b968      	cbnz	r0, 8006dae <f_unlink+0x3c>
 8006d92:	2102      	movs	r1, #2
 8006d94:	a804      	add	r0, sp, #16
 8006d96:	f7fe fc1d 	bl	80055d4 <chk_lock>
 8006d9a:	b940      	cbnz	r0, 8006dae <f_unlink+0x3c>
 8006d9c:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	db0e      	blt.n	8006dc2 <f_unlink+0x50>
 8006da4:	f89d 6016 	ldrb.w	r6, [sp, #22]
 8006da8:	07f2      	lsls	r2, r6, #31
 8006daa:	d50c      	bpl.n	8006dc6 <f_unlink+0x54>
 8006dac:	2007      	movs	r0, #7
 8006dae:	b01e      	add	sp, #120	; 0x78
 8006db0:	bd70      	pop	{r4, r5, r6, pc}
 8006db2:	4602      	mov	r2, r0
 8006db4:	4621      	mov	r1, r4
 8006db6:	a804      	add	r0, sp, #16
 8006db8:	f7ff f8ea 	bl	8005f90 <remove_chain>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d1f6      	bne.n	8006dae <f_unlink+0x3c>
 8006dc0:	e025      	b.n	8006e0e <f_unlink+0x9c>
 8006dc2:	2006      	movs	r0, #6
 8006dc4:	e7f3      	b.n	8006dae <f_unlink+0x3c>
 8006dc6:	9d03      	ldr	r5, [sp, #12]
 8006dc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006dca:	7828      	ldrb	r0, [r5, #0]
 8006dcc:	f7fe fd3f 	bl	800584e <ld_clust.isra.1>
 8006dd0:	06f3      	lsls	r3, r6, #27
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	d50d      	bpl.n	8006df2 <f_unlink+0x80>
 8006dd6:	a811      	add	r0, sp, #68	; 0x44
 8006dd8:	9511      	str	r5, [sp, #68]	; 0x44
 8006dda:	9413      	str	r4, [sp, #76]	; 0x4c
 8006ddc:	f7ff f90e 	bl	8005ffc <dir_sdi.constprop.14>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d1e4      	bne.n	8006dae <f_unlink+0x3c>
 8006de4:	a811      	add	r0, sp, #68	; 0x44
 8006de6:	f7ff fa79 	bl	80062dc <dir_read.constprop.10>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d0de      	beq.n	8006dac <f_unlink+0x3a>
 8006dee:	2804      	cmp	r0, #4
 8006df0:	d1dd      	bne.n	8006dae <f_unlink+0x3c>
 8006df2:	9d04      	ldr	r5, [sp, #16]
 8006df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006df6:	4628      	mov	r0, r5
 8006df8:	f7fe fde2 	bl	80059c0 <move_window>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d1d6      	bne.n	8006dae <f_unlink+0x3c>
 8006e00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e02:	22e5      	movs	r2, #229	; 0xe5
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	2301      	movs	r3, #1
 8006e08:	70eb      	strb	r3, [r5, #3]
 8006e0a:	2c00      	cmp	r4, #0
 8006e0c:	d1d1      	bne.n	8006db2 <f_unlink+0x40>
 8006e0e:	9803      	ldr	r0, [sp, #12]
 8006e10:	f7fe fd8b 	bl	800592a <sync_fs>
 8006e14:	e7cb      	b.n	8006dae <f_unlink+0x3c>

08006e16 <f_mkdir>:
 8006e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1a:	b090      	sub	sp, #64	; 0x40
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	9001      	str	r0, [sp, #4]
 8006e20:	a902      	add	r1, sp, #8
 8006e22:	a801      	add	r0, sp, #4
 8006e24:	f7fe fe28 	bl	8005a78 <find_volume>
 8006e28:	9b02      	ldr	r3, [sp, #8]
 8006e2a:	9303      	str	r3, [sp, #12]
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	4605      	mov	r5, r0
 8006e30:	2800      	cmp	r0, #0
 8006e32:	f040 8094 	bne.w	8006f5e <f_mkdir+0x148>
 8006e36:	9901      	ldr	r1, [sp, #4]
 8006e38:	a803      	add	r0, sp, #12
 8006e3a:	f7ff f98b 	bl	8006154 <follow_path>
 8006e3e:	4604      	mov	r4, r0
 8006e40:	2800      	cmp	r0, #0
 8006e42:	f000 8090 	beq.w	8006f66 <f_mkdir+0x150>
 8006e46:	2804      	cmp	r0, #4
 8006e48:	f040 8089 	bne.w	8006f5e <f_mkdir+0x148>
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	a803      	add	r0, sp, #12
 8006e50:	f7ff f846 	bl	8005ee0 <create_chain>
 8006e54:	9a02      	ldr	r2, [sp, #8]
 8006e56:	8953      	ldrh	r3, [r2, #10]
 8006e58:	025b      	lsls	r3, r3, #9
 8006e5a:	9306      	str	r3, [sp, #24]
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d055      	beq.n	8006f0e <f_mkdir+0xf8>
 8006e62:	2801      	cmp	r0, #1
 8006e64:	d055      	beq.n	8006f12 <f_mkdir+0xfc>
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	d17f      	bne.n	8006f6a <f_mkdir+0x154>
 8006e6a:	2401      	movs	r4, #1
 8006e6c:	f000 ffdc 	bl	8007e28 <get_fattime>
 8006e70:	4680      	mov	r8, r0
 8006e72:	2c00      	cmp	r4, #0
 8006e74:	d145      	bne.n	8006f02 <f_mkdir+0xec>
 8006e76:	9e02      	ldr	r6, [sp, #8]
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7fe fc2c 	bl	80056d8 <clust2sect>
 8006e80:	f106 0730 	add.w	r7, r6, #48	; 0x30
 8006e84:	4621      	mov	r1, r4
 8006e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e8a:	4681      	mov	r9, r0
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	f7fe fb9b 	bl	80055c8 <mem_set>
 8006e92:	220b      	movs	r2, #11
 8006e94:	2120      	movs	r1, #32
 8006e96:	4638      	mov	r0, r7
 8006e98:	f7fe fb96 	bl	80055c8 <mem_set>
 8006e9c:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
 8006ea6:	4641      	mov	r1, r8
 8006ea8:	f106 0046 	add.w	r0, r6, #70	; 0x46
 8006eac:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
 8006eb0:	f7fe fb82 	bl	80055b8 <st_dword>
 8006eb4:	f106 0450 	add.w	r4, r6, #80	; 0x50
 8006eb8:	462a      	mov	r2, r5
 8006eba:	4639      	mov	r1, r7
 8006ebc:	9802      	ldr	r0, [sp, #8]
 8006ebe:	f7fe fcd4 	bl	800586a <st_clust.isra.2>
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	f7fe fcb8 	bl	800583c <mem_cpy.part.0>
 8006ecc:	9802      	ldr	r0, [sp, #8]
 8006ece:	f886 a051 	strb.w	sl, [r6, #81]	; 0x51
 8006ed2:	7803      	ldrb	r3, [r0, #0]
 8006ed4:	9a05      	ldr	r2, [sp, #20]
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d103      	bne.n	8006ee2 <f_mkdir+0xcc>
 8006eda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006edc:	429a      	cmp	r2, r3
 8006ede:	bf08      	it	eq
 8006ee0:	2200      	moveq	r2, #0
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	f7fe fcc1 	bl	800586a <st_clust.isra.2>
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	895e      	ldrh	r6, [r3, #10]
 8006eec:	f04f 0a01 	mov.w	sl, #1
 8006ef0:	44b1      	add	r9, r6
 8006ef2:	eba9 0306 	sub.w	r3, r9, r6
 8006ef6:	b976      	cbnz	r6, 8006f16 <f_mkdir+0x100>
 8006ef8:	a803      	add	r0, sp, #12
 8006efa:	f7ff fa19 	bl	8006330 <dir_register>
 8006efe:	4604      	mov	r4, r0
 8006f00:	b1d0      	cbz	r0, 8006f38 <f_mkdir+0x122>
 8006f02:	2200      	movs	r2, #0
 8006f04:	4629      	mov	r1, r5
 8006f06:	a803      	add	r0, sp, #12
 8006f08:	f7ff f842 	bl	8005f90 <remove_chain>
 8006f0c:	e027      	b.n	8006f5e <f_mkdir+0x148>
 8006f0e:	2407      	movs	r4, #7
 8006f10:	e7ac      	b.n	8006e6c <f_mkdir+0x56>
 8006f12:	2402      	movs	r4, #2
 8006f14:	e7aa      	b.n	8006e6c <f_mkdir+0x56>
 8006f16:	9802      	ldr	r0, [sp, #8]
 8006f18:	62c3      	str	r3, [r0, #44]	; 0x2c
 8006f1a:	f880 a003 	strb.w	sl, [r0, #3]
 8006f1e:	f7fe fcdb 	bl	80058d8 <sync_window.part.4>
 8006f22:	4604      	mov	r4, r0
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d1ec      	bne.n	8006f02 <f_mkdir+0xec>
 8006f28:	4601      	mov	r1, r0
 8006f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f2e:	4638      	mov	r0, r7
 8006f30:	f7fe fb4a 	bl	80055c8 <mem_set>
 8006f34:	3e01      	subs	r6, #1
 8006f36:	e7dc      	b.n	8006ef2 <f_mkdir+0xdc>
 8006f38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006f3a:	4641      	mov	r1, r8
 8006f3c:	f104 0016 	add.w	r0, r4, #22
 8006f40:	f7fe fb3a 	bl	80055b8 <st_dword>
 8006f44:	4621      	mov	r1, r4
 8006f46:	462a      	mov	r2, r5
 8006f48:	9802      	ldr	r0, [sp, #8]
 8006f4a:	f7fe fc8e 	bl	800586a <st_clust.isra.2>
 8006f4e:	2310      	movs	r3, #16
 8006f50:	9802      	ldr	r0, [sp, #8]
 8006f52:	72e3      	strb	r3, [r4, #11]
 8006f54:	2301      	movs	r3, #1
 8006f56:	70c3      	strb	r3, [r0, #3]
 8006f58:	f7fe fce7 	bl	800592a <sync_fs>
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	4620      	mov	r0, r4
 8006f60:	b010      	add	sp, #64	; 0x40
 8006f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f66:	2408      	movs	r4, #8
 8006f68:	e7f9      	b.n	8006f5e <f_mkdir+0x148>
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7fe fcd7 	bl	800591e <sync_window>
 8006f70:	4604      	mov	r4, r0
 8006f72:	e77b      	b.n	8006e6c <f_mkdir+0x56>

08006f74 <f_rename>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	b0a4      	sub	sp, #144	; 0x90
 8006f78:	9001      	str	r0, [sp, #4]
 8006f7a:	a824      	add	r0, sp, #144	; 0x90
 8006f7c:	f840 1d90 	str.w	r1, [r0, #-144]!
 8006f80:	f7fe fc29 	bl	80057d6 <get_ldnumber>
 8006f84:	2202      	movs	r2, #2
 8006f86:	a903      	add	r1, sp, #12
 8006f88:	a801      	add	r0, sp, #4
 8006f8a:	f7fe fd75 	bl	8005a78 <find_volume>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d174      	bne.n	800707c <f_rename+0x108>
 8006f92:	ac24      	add	r4, sp, #144	; 0x90
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	f844 3d68 	str.w	r3, [r4, #-104]!
 8006f9a:	9901      	ldr	r1, [sp, #4]
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f7ff f8d9 	bl	8006154 <follow_path>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d16a      	bne.n	800707c <f_rename+0x108>
 8006fa6:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
 8006faa:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8006fae:	d167      	bne.n	8007080 <f_rename+0x10c>
 8006fb0:	2102      	movs	r1, #2
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f7fe fb0e 	bl	80055d4 <chk_lock>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d15f      	bne.n	800707c <f_rename+0x108>
 8006fbc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006fbe:	2215      	movs	r2, #21
 8006fc0:	310b      	adds	r1, #11
 8006fc2:	a804      	add	r0, sp, #16
 8006fc4:	f7fe fc3a 	bl	800583c <mem_cpy.part.0>
 8006fc8:	4621      	mov	r1, r4
 8006fca:	a817      	add	r0, sp, #92	; 0x5c
 8006fcc:	2234      	movs	r2, #52	; 0x34
 8006fce:	f7fe fc35 	bl	800583c <mem_cpy.part.0>
 8006fd2:	9900      	ldr	r1, [sp, #0]
 8006fd4:	a817      	add	r0, sp, #92	; 0x5c
 8006fd6:	f7ff f8bd 	bl	8006154 <follow_path>
 8006fda:	b948      	cbnz	r0, 8006ff0 <f_rename+0x7c>
 8006fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fde:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d103      	bne.n	8006fec <f_rename+0x78>
 8006fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fe6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d003      	beq.n	8006ff4 <f_rename+0x80>
 8006fec:	2008      	movs	r0, #8
 8006fee:	e045      	b.n	800707c <f_rename+0x108>
 8006ff0:	2804      	cmp	r0, #4
 8006ff2:	d143      	bne.n	800707c <f_rename+0x108>
 8006ff4:	a817      	add	r0, sp, #92	; 0x5c
 8006ff6:	f7ff f99b 	bl	8006330 <dir_register>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d13e      	bne.n	800707c <f_rename+0x108>
 8006ffe:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8007000:	2213      	movs	r2, #19
 8007002:	f10d 0112 	add.w	r1, sp, #18
 8007006:	f105 000d 	add.w	r0, r5, #13
 800700a:	f7fe fc17 	bl	800583c <mem_cpy.part.0>
 800700e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007012:	9c03      	ldr	r4, [sp, #12]
 8007014:	f043 0320 	orr.w	r3, r3, #32
 8007018:	2601      	movs	r6, #1
 800701a:	72eb      	strb	r3, [r5, #11]
 800701c:	70e6      	strb	r6, [r4, #3]
 800701e:	7aeb      	ldrb	r3, [r5, #11]
 8007020:	06db      	lsls	r3, r3, #27
 8007022:	d51d      	bpl.n	8007060 <f_rename+0xec>
 8007024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007028:	429a      	cmp	r2, r3
 800702a:	d019      	beq.n	8007060 <f_rename+0xec>
 800702c:	4629      	mov	r1, r5
 800702e:	7820      	ldrb	r0, [r4, #0]
 8007030:	f7fe fc0d 	bl	800584e <ld_clust.isra.1>
 8007034:	4601      	mov	r1, r0
 8007036:	4620      	mov	r0, r4
 8007038:	f7fe fb4e 	bl	80056d8 <clust2sect>
 800703c:	4601      	mov	r1, r0
 800703e:	b308      	cbz	r0, 8007084 <f_rename+0x110>
 8007040:	4620      	mov	r0, r4
 8007042:	f7fe fcbd 	bl	80059c0 <move_window>
 8007046:	b9c8      	cbnz	r0, 800707c <f_rename+0x108>
 8007048:	9803      	ldr	r0, [sp, #12]
 800704a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800704e:	2b2e      	cmp	r3, #46	; 0x2e
 8007050:	d106      	bne.n	8007060 <f_rename+0xec>
 8007052:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007054:	f100 0150 	add.w	r1, r0, #80	; 0x50
 8007058:	f7fe fc07 	bl	800586a <st_clust.isra.2>
 800705c:	9b03      	ldr	r3, [sp, #12]
 800705e:	70de      	strb	r6, [r3, #3]
 8007060:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007062:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007064:	4620      	mov	r0, r4
 8007066:	f7fe fcab 	bl	80059c0 <move_window>
 800706a:	b938      	cbnz	r0, 800707c <f_rename+0x108>
 800706c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800706e:	22e5      	movs	r2, #229	; 0xe5
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	2301      	movs	r3, #1
 8007074:	70e3      	strb	r3, [r4, #3]
 8007076:	9803      	ldr	r0, [sp, #12]
 8007078:	f7fe fc57 	bl	800592a <sync_fs>
 800707c:	b024      	add	sp, #144	; 0x90
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	2006      	movs	r0, #6
 8007082:	e7fb      	b.n	800707c <f_rename+0x108>
 8007084:	2002      	movs	r0, #2
 8007086:	e7f9      	b.n	800707c <f_rename+0x108>

08007088 <f_utime>:
 8007088:	b510      	push	{r4, lr}
 800708a:	b090      	sub	sp, #64	; 0x40
 800708c:	460c      	mov	r4, r1
 800708e:	9001      	str	r0, [sp, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	a902      	add	r1, sp, #8
 8007094:	a801      	add	r0, sp, #4
 8007096:	f7fe fcef 	bl	8005a78 <find_volume>
 800709a:	9b02      	ldr	r3, [sp, #8]
 800709c:	9303      	str	r3, [sp, #12]
 800709e:	b950      	cbnz	r0, 80070b6 <f_utime+0x2e>
 80070a0:	9901      	ldr	r1, [sp, #4]
 80070a2:	a803      	add	r0, sp, #12
 80070a4:	f7ff f856 	bl	8006154 <follow_path>
 80070a8:	b928      	cbnz	r0, 80070b6 <f_utime+0x2e>
 80070aa:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 80070ae:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 80070b2:	d002      	beq.n	80070ba <f_utime+0x32>
 80070b4:	2006      	movs	r0, #6
 80070b6:	b010      	add	sp, #64	; 0x40
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	88e3      	ldrh	r3, [r4, #6]
 80070bc:	88a1      	ldrh	r1, [r4, #4]
 80070be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80070c0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80070c4:	3016      	adds	r0, #22
 80070c6:	f7fe fa77 	bl	80055b8 <st_dword>
 80070ca:	9802      	ldr	r0, [sp, #8]
 80070cc:	2301      	movs	r3, #1
 80070ce:	70c3      	strb	r3, [r0, #3]
 80070d0:	f7fe fc2b 	bl	800592a <sync_fs>
 80070d4:	e7ef      	b.n	80070b6 <f_utime+0x2e>

080070d6 <f_gets>:
 80070d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80070da:	4606      	mov	r6, r0
 80070dc:	4690      	mov	r8, r2
 80070de:	4605      	mov	r5, r0
 80070e0:	2400      	movs	r4, #0
 80070e2:	1e4f      	subs	r7, r1, #1
 80070e4:	42bc      	cmp	r4, r7
 80070e6:	da12      	bge.n	800710e <f_gets+0x38>
 80070e8:	ab01      	add	r3, sp, #4
 80070ea:	2201      	movs	r2, #1
 80070ec:	4669      	mov	r1, sp
 80070ee:	4640      	mov	r0, r8
 80070f0:	f7ff fa96 	bl	8006620 <f_read>
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d109      	bne.n	800710e <f_gets+0x38>
 80070fa:	f89d 3000 	ldrb.w	r3, [sp]
 80070fe:	2b0d      	cmp	r3, #13
 8007100:	d0f0      	beq.n	80070e4 <f_gets+0xe>
 8007102:	2b0a      	cmp	r3, #10
 8007104:	f805 3b01 	strb.w	r3, [r5], #1
 8007108:	f104 0401 	add.w	r4, r4, #1
 800710c:	d1ea      	bne.n	80070e4 <f_gets+0xe>
 800710e:	2300      	movs	r3, #0
 8007110:	429c      	cmp	r4, r3
 8007112:	bf14      	ite	ne
 8007114:	4630      	movne	r0, r6
 8007116:	4618      	moveq	r0, r3
 8007118:	702b      	strb	r3, [r5, #0]
 800711a:	b002      	add	sp, #8
 800711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007120 <FATFS_LinkDriverEx>:
 8007120:	b530      	push	{r4, r5, lr}
 8007122:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <FATFS_LinkDriverEx+0x40>)
 8007124:	7a5d      	ldrb	r5, [r3, #9]
 8007126:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800712a:	b9b5      	cbnz	r5, 800715a <FATFS_LinkDriverEx+0x3a>
 800712c:	7a5d      	ldrb	r5, [r3, #9]
 800712e:	555c      	strb	r4, [r3, r5]
 8007130:	7a5d      	ldrb	r5, [r3, #9]
 8007132:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007136:	6068      	str	r0, [r5, #4]
 8007138:	7a58      	ldrb	r0, [r3, #9]
 800713a:	4418      	add	r0, r3
 800713c:	7202      	strb	r2, [r0, #8]
 800713e:	7a5a      	ldrb	r2, [r3, #9]
 8007140:	b2d2      	uxtb	r2, r2
 8007142:	1c50      	adds	r0, r2, #1
 8007144:	b2c0      	uxtb	r0, r0
 8007146:	7258      	strb	r0, [r3, #9]
 8007148:	233a      	movs	r3, #58	; 0x3a
 800714a:	3230      	adds	r2, #48	; 0x30
 800714c:	704b      	strb	r3, [r1, #1]
 800714e:	232f      	movs	r3, #47	; 0x2f
 8007150:	700a      	strb	r2, [r1, #0]
 8007152:	708b      	strb	r3, [r1, #2]
 8007154:	70cc      	strb	r4, [r1, #3]
 8007156:	4620      	mov	r0, r4
 8007158:	bd30      	pop	{r4, r5, pc}
 800715a:	2001      	movs	r0, #1
 800715c:	bd30      	pop	{r4, r5, pc}
 800715e:	bf00      	nop
 8007160:	200002a4 	.word	0x200002a4

08007164 <FATFS_LinkDriver>:
 8007164:	2200      	movs	r2, #0
 8007166:	f7ff bfdb 	b.w	8007120 <FATFS_LinkDriverEx>
	...

0800716c <FATFS_UnLinkDriverEx>:
 800716c:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <FATFS_UnLinkDriverEx+0x2c>)
 800716e:	7a53      	ldrb	r3, [r2, #9]
 8007170:	b17b      	cbz	r3, 8007192 <FATFS_UnLinkDriverEx+0x26>
 8007172:	7803      	ldrb	r3, [r0, #0]
 8007174:	3b30      	subs	r3, #48	; 0x30
 8007176:	b2db      	uxtb	r3, r3
 8007178:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800717c:	6848      	ldr	r0, [r1, #4]
 800717e:	b140      	cbz	r0, 8007192 <FATFS_UnLinkDriverEx+0x26>
 8007180:	4413      	add	r3, r2
 8007182:	2000      	movs	r0, #0
 8007184:	7218      	strb	r0, [r3, #8]
 8007186:	7a53      	ldrb	r3, [r2, #9]
 8007188:	6048      	str	r0, [r1, #4]
 800718a:	3b01      	subs	r3, #1
 800718c:	b2db      	uxtb	r3, r3
 800718e:	7253      	strb	r3, [r2, #9]
 8007190:	4770      	bx	lr
 8007192:	2001      	movs	r0, #1
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	200002a4 	.word	0x200002a4

0800719c <FATFS_UnLinkDriver>:
 800719c:	2100      	movs	r1, #0
 800719e:	f7ff bfe5 	b.w	800716c <FATFS_UnLinkDriverEx>
	...

080071a4 <Battery_GetLevel_Raw>:
 80071a4:	b530      	push	{r4, r5, lr}
 80071a6:	b089      	sub	sp, #36	; 0x24
 80071a8:	2300      	movs	r3, #0
 80071aa:	210a      	movs	r1, #10
 80071ac:	4818      	ldr	r0, [pc, #96]	; (8007210 <Battery_GetLevel_Raw+0x6c>)
 80071ae:	f8ad 301e 	strh.w	r3, [sp, #30]
 80071b2:	f7f9 ff6f 	bl	8001094 <HAL_ADC_PollForConversion>
 80071b6:	4816      	ldr	r0, [pc, #88]	; (8007210 <Battery_GetLevel_Raw+0x6c>)
 80071b8:	f7fa f986 	bl	80014c8 <HAL_ADC_GetState>
 80071bc:	f410 7400 	ands.w	r4, r0, #512	; 0x200
 80071c0:	d00a      	beq.n	80071d8 <Battery_GetLevel_Raw+0x34>
 80071c2:	4813      	ldr	r0, [pc, #76]	; (8007210 <Battery_GetLevel_Raw+0x6c>)
 80071c4:	f7f9 ffb4 	bl	8001130 <HAL_ADC_GetValue>
 80071c8:	b280      	uxth	r0, r0
 80071ca:	f8ad 001e 	strh.w	r0, [sp, #30]
 80071ce:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 80071d2:	b280      	uxth	r0, r0
 80071d4:	b009      	add	sp, #36	; 0x24
 80071d6:	bd30      	pop	{r4, r5, pc}
 80071d8:	f001 ff22 	bl	8009020 <GetTempInfoStruct>
 80071dc:	2511      	movs	r5, #17
 80071de:	462b      	mov	r3, r5
 80071e0:	9004      	str	r0, [sp, #16]
 80071e2:	2212      	movs	r2, #18
 80071e4:	2113      	movs	r1, #19
 80071e6:	9403      	str	r4, [sp, #12]
 80071e8:	9402      	str	r4, [sp, #8]
 80071ea:	9401      	str	r4, [sp, #4]
 80071ec:	9500      	str	r5, [sp, #0]
 80071ee:	2015      	movs	r0, #21
 80071f0:	f005 f8e3 	bl	800c3ba <InfoLogAdd>
 80071f4:	f001 ff0c 	bl	8009010 <GetErrorStruct>
 80071f8:	9402      	str	r4, [sp, #8]
 80071fa:	9003      	str	r0, [sp, #12]
 80071fc:	9401      	str	r4, [sp, #4]
 80071fe:	9400      	str	r4, [sp, #0]
 8007200:	462b      	mov	r3, r5
 8007202:	462a      	mov	r2, r5
 8007204:	2112      	movs	r1, #18
 8007206:	2013      	movs	r0, #19
 8007208:	f005 f887 	bl	800c31a <ErrorAddLog>
 800720c:	e7df      	b.n	80071ce <Battery_GetLevel_Raw+0x2a>
 800720e:	bf00      	nop
 8007210:	2000c444 	.word	0x2000c444

08007214 <Battery_GetLevel>:
 8007214:	b507      	push	{r0, r1, r2, lr}
 8007216:	f7ff ffc5 	bl	80071a4 <Battery_GetLevel_Raw>
 800721a:	ee07 0a90 	vmov	s15, r0
 800721e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007222:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007270 <Battery_GetLevel+0x5c>
 8007226:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007274 <Battery_GetLevel+0x60>
 800722a:	eddf 5a13 	vldr	s11, [pc, #76]	; 8007278 <Battery_GetLevel+0x64>
 800722e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007232:	eddf 7a12 	vldr	s15, [pc, #72]	; 800727c <Battery_GetLevel+0x68>
 8007236:	ee77 6a67 	vsub.f32	s13, s14, s15
 800723a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800723e:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8007242:	eefc 6ac6 	vcvt.u32.f32	s13, s12
 8007246:	edcd 6a01 	vstr	s13, [sp, #4]
 800724a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800724e:	2863      	cmp	r0, #99	; 0x63
 8007250:	d905      	bls.n	800725e <Battery_GetLevel+0x4a>
 8007252:	eeb4 7a67 	vcmp.f32	s14, s15
 8007256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725a:	bfc8      	it	gt
 800725c:	2064      	movgt	r0, #100	; 0x64
 800725e:	eeb4 7a67 	vcmp.f32	s14, s15
 8007262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007266:	bf48      	it	mi
 8007268:	2000      	movmi	r0, #0
 800726a:	b003      	add	sp, #12
 800726c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007270:	3f3b8bb9 	.word	0x3f3b8bb9
 8007274:	42c80000 	.word	0x42c80000
 8007278:	44058000 	.word	0x44058000
 800727c:	450da000 	.word	0x450da000

08007280 <Battery_init>:
 8007280:	b530      	push	{r4, r5, lr}
 8007282:	2001      	movs	r0, #1
 8007284:	b087      	sub	sp, #28
 8007286:	f002 ff69 	bl	800a15c <DisEnableBatteryPin>
 800728a:	217f      	movs	r1, #127	; 0x7f
 800728c:	481e      	ldr	r0, [pc, #120]	; (8007308 <Battery_init+0x88>)
 800728e:	f7fa fae9 	bl	8001864 <HAL_ADCEx_Calibration_Start>
 8007292:	4604      	mov	r4, r0
 8007294:	b1e0      	cbz	r0, 80072d0 <Battery_init+0x50>
 8007296:	f001 fec3 	bl	8009020 <GetTempInfoStruct>
 800729a:	2400      	movs	r4, #0
 800729c:	2511      	movs	r5, #17
 800729e:	2324      	movs	r3, #36	; 0x24
 80072a0:	2227      	movs	r2, #39	; 0x27
 80072a2:	9004      	str	r0, [sp, #16]
 80072a4:	2113      	movs	r1, #19
 80072a6:	2015      	movs	r0, #21
 80072a8:	9403      	str	r4, [sp, #12]
 80072aa:	9402      	str	r4, [sp, #8]
 80072ac:	9401      	str	r4, [sp, #4]
 80072ae:	9500      	str	r5, [sp, #0]
 80072b0:	f005 f883 	bl	800c3ba <InfoLogAdd>
 80072b4:	f001 feac 	bl	8009010 <GetErrorStruct>
 80072b8:	9402      	str	r4, [sp, #8]
 80072ba:	9003      	str	r0, [sp, #12]
 80072bc:	9401      	str	r4, [sp, #4]
 80072be:	9400      	str	r4, [sp, #0]
 80072c0:	462b      	mov	r3, r5
 80072c2:	2224      	movs	r2, #36	; 0x24
 80072c4:	2127      	movs	r1, #39	; 0x27
 80072c6:	2013      	movs	r0, #19
 80072c8:	f005 f827 	bl	800c31a <ErrorAddLog>
 80072cc:	b007      	add	sp, #28
 80072ce:	bd30      	pop	{r4, r5, pc}
 80072d0:	480d      	ldr	r0, [pc, #52]	; (8007308 <Battery_init+0x88>)
 80072d2:	f7fa f9a7 	bl	8001624 <HAL_ADC_Start>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d0f8      	beq.n	80072cc <Battery_init+0x4c>
 80072da:	f001 fea1 	bl	8009020 <GetTempInfoStruct>
 80072de:	2511      	movs	r5, #17
 80072e0:	2316      	movs	r3, #22
 80072e2:	2227      	movs	r2, #39	; 0x27
 80072e4:	9004      	str	r0, [sp, #16]
 80072e6:	2113      	movs	r1, #19
 80072e8:	2015      	movs	r0, #21
 80072ea:	9403      	str	r4, [sp, #12]
 80072ec:	9402      	str	r4, [sp, #8]
 80072ee:	9401      	str	r4, [sp, #4]
 80072f0:	9500      	str	r5, [sp, #0]
 80072f2:	f005 f862 	bl	800c3ba <InfoLogAdd>
 80072f6:	f001 fe8b 	bl	8009010 <GetErrorStruct>
 80072fa:	9402      	str	r4, [sp, #8]
 80072fc:	9003      	str	r0, [sp, #12]
 80072fe:	9401      	str	r4, [sp, #4]
 8007300:	9400      	str	r4, [sp, #0]
 8007302:	462b      	mov	r3, r5
 8007304:	2216      	movs	r2, #22
 8007306:	e7dd      	b.n	80072c4 <Battery_init+0x44>
 8007308:	2000c444 	.word	0x2000c444

0800730c <MX_ADC_DeInit>:
 800730c:	4801      	ldr	r0, [pc, #4]	; (8007314 <MX_ADC_DeInit+0x8>)
 800730e:	f7fa ba09 	b.w	8001724 <HAL_ADC_DeInit>
 8007312:	bf00      	nop
 8007314:	2000c444 	.word	0x2000c444

08007318 <SD_Write.part.4>:
 8007318:	b530      	push	{r4, r5, lr}
 800731a:	b089      	sub	sp, #36	; 0x24
 800731c:	460a      	mov	r2, r1
 800731e:	ab07      	add	r3, sp, #28
 8007320:	4601      	mov	r1, r0
 8007322:	4814      	ldr	r0, [pc, #80]	; (8007374 <SD_Write.part.4+0x5c>)
 8007324:	f7ff fa29 	bl	800677a <f_write>
 8007328:	2500      	movs	r5, #0
 800732a:	4604      	mov	r4, r0
 800732c:	b1e8      	cbz	r0, 800736a <SD_Write.part.4+0x52>
 800732e:	f001 fe6f 	bl	8009010 <GetErrorStruct>
 8007332:	2401      	movs	r4, #1
 8007334:	2215      	movs	r2, #21
 8007336:	2311      	movs	r3, #17
 8007338:	2117      	movs	r1, #23
 800733a:	9003      	str	r0, [sp, #12]
 800733c:	9502      	str	r5, [sp, #8]
 800733e:	4610      	mov	r0, r2
 8007340:	9501      	str	r5, [sp, #4]
 8007342:	9400      	str	r4, [sp, #0]
 8007344:	f004 ffe9 	bl	800c31a <ErrorAddLog>
 8007348:	f001 fe6a 	bl	8009020 <GetTempInfoStruct>
 800734c:	2311      	movs	r3, #17
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	2315      	movs	r3, #21
 8007352:	9004      	str	r0, [sp, #16]
 8007354:	9503      	str	r5, [sp, #12]
 8007356:	9502      	str	r5, [sp, #8]
 8007358:	9401      	str	r4, [sp, #4]
 800735a:	2217      	movs	r2, #23
 800735c:	4619      	mov	r1, r3
 800735e:	2014      	movs	r0, #20
 8007360:	f005 f82b 	bl	800c3ba <InfoLogAdd>
 8007364:	4620      	mov	r0, r4
 8007366:	b009      	add	sp, #36	; 0x24
 8007368:	bd30      	pop	{r4, r5, pc}
 800736a:	4802      	ldr	r0, [pc, #8]	; (8007374 <SD_Write.part.4+0x5c>)
 800736c:	f7ff fb12 	bl	8006994 <f_close>
 8007370:	e7f8      	b.n	8007364 <SD_Write.part.4+0x4c>
 8007372:	bf00      	nop
 8007374:	200003f4 	.word	0x200003f4

08007378 <SD_Init>:
 8007378:	b530      	push	{r4, r5, lr}
 800737a:	b087      	sub	sp, #28
 800737c:	f000 fd04 	bl	8007d88 <BSP_SD_Init>
 8007380:	2201      	movs	r2, #1
 8007382:	4915      	ldr	r1, [pc, #84]	; (80073d8 <SD_Init+0x60>)
 8007384:	4815      	ldr	r0, [pc, #84]	; (80073dc <SD_Init+0x64>)
 8007386:	f7ff f805 	bl	8006394 <f_mount>
 800738a:	4601      	mov	r1, r0
 800738c:	4604      	mov	r4, r0
 800738e:	4814      	ldr	r0, [pc, #80]	; (80073e0 <SD_Init+0x68>)
 8007390:	f005 ffb4 	bl	800d2fc <iprintf>
 8007394:	2500      	movs	r5, #0
 8007396:	b1e4      	cbz	r4, 80073d2 <SD_Init+0x5a>
 8007398:	f001 fe3a 	bl	8009010 <GetErrorStruct>
 800739c:	2311      	movs	r3, #17
 800739e:	2223      	movs	r2, #35	; 0x23
 80073a0:	2127      	movs	r1, #39	; 0x27
 80073a2:	9003      	str	r0, [sp, #12]
 80073a4:	9502      	str	r5, [sp, #8]
 80073a6:	2015      	movs	r0, #21
 80073a8:	9501      	str	r5, [sp, #4]
 80073aa:	9500      	str	r5, [sp, #0]
 80073ac:	f004 ffb5 	bl	800c31a <ErrorAddLog>
 80073b0:	f001 fe36 	bl	8009020 <GetTempInfoStruct>
 80073b4:	2311      	movs	r3, #17
 80073b6:	9004      	str	r0, [sp, #16]
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	2014      	movs	r0, #20
 80073bc:	9503      	str	r5, [sp, #12]
 80073be:	9502      	str	r5, [sp, #8]
 80073c0:	9501      	str	r5, [sp, #4]
 80073c2:	2323      	movs	r3, #35	; 0x23
 80073c4:	2227      	movs	r2, #39	; 0x27
 80073c6:	2115      	movs	r1, #21
 80073c8:	f004 fff7 	bl	800c3ba <InfoLogAdd>
 80073cc:	2001      	movs	r0, #1
 80073ce:	b007      	add	sp, #28
 80073d0:	bd30      	pop	{r4, r5, pc}
 80073d2:	4620      	mov	r0, r4
 80073d4:	e7fb      	b.n	80073ce <SD_Init+0x56>
 80073d6:	bf00      	nop
 80073d8:	200003ed 	.word	0x200003ed
 80073dc:	20000624 	.word	0x20000624
 80073e0:	0800f6da 	.word	0x0800f6da

080073e4 <InitFoldersSD>:
 80073e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80073e6:	f7ff ffc7 	bl	8007378 <SD_Init>
 80073ea:	4669      	mov	r1, sp
 80073ec:	480e      	ldr	r0, [pc, #56]	; (8007428 <InitFoldersSD+0x44>)
 80073ee:	f7ff fc9e 	bl	8006d2e <f_stat>
 80073f2:	2804      	cmp	r0, #4
 80073f4:	d102      	bne.n	80073fc <InitFoldersSD+0x18>
 80073f6:	480c      	ldr	r0, [pc, #48]	; (8007428 <InitFoldersSD+0x44>)
 80073f8:	f7ff fd0d 	bl	8006e16 <f_mkdir>
 80073fc:	4669      	mov	r1, sp
 80073fe:	480b      	ldr	r0, [pc, #44]	; (800742c <InitFoldersSD+0x48>)
 8007400:	f7ff fc95 	bl	8006d2e <f_stat>
 8007404:	2804      	cmp	r0, #4
 8007406:	d102      	bne.n	800740e <InitFoldersSD+0x2a>
 8007408:	4808      	ldr	r0, [pc, #32]	; (800742c <InitFoldersSD+0x48>)
 800740a:	f7ff fd04 	bl	8006e16 <f_mkdir>
 800740e:	4669      	mov	r1, sp
 8007410:	4807      	ldr	r0, [pc, #28]	; (8007430 <InitFoldersSD+0x4c>)
 8007412:	f7ff fc8c 	bl	8006d2e <f_stat>
 8007416:	2804      	cmp	r0, #4
 8007418:	d102      	bne.n	8007420 <InitFoldersSD+0x3c>
 800741a:	4805      	ldr	r0, [pc, #20]	; (8007430 <InitFoldersSD+0x4c>)
 800741c:	f7ff fcfb 	bl	8006e16 <f_mkdir>
 8007420:	b007      	add	sp, #28
 8007422:	f85d fb04 	ldr.w	pc, [sp], #4
 8007426:	bf00      	nop
 8007428:	0800f672 	.word	0x0800f672
 800742c:	0800f67b 	.word	0x0800f67b
 8007430:	0800f681 	.word	0x0800f681

08007434 <SD_Verify>:
 8007434:	b084      	sub	sp, #16
 8007436:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
 800743a:	b0c7      	sub	sp, #284	; 0x11c
 800743c:	ac4e      	add	r4, sp, #312	; 0x138
 800743e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007442:	2300      	movs	r3, #0
 8007444:	9fdc      	ldr	r7, [sp, #880]	; 0x370
 8007446:	9305      	str	r3, [sp, #20]
 8007448:	f7ff ff96 	bl	8007378 <SD_Init>
 800744c:	4604      	mov	r4, r0
 800744e:	b988      	cbnz	r0, 8007474 <SD_Verify+0x40>
 8007450:	2201      	movs	r2, #1
 8007452:	99da      	ldr	r1, [sp, #872]	; 0x368
 8007454:	482d      	ldr	r0, [pc, #180]	; (800750c <SD_Verify+0xd8>)
 8007456:	f7fe ffd1 	bl	80063fc <f_open>
 800745a:	b168      	cbz	r0, 8007478 <SD_Verify+0x44>
 800745c:	f001 fdd8 	bl	8009010 <GetErrorStruct>
 8007460:	9402      	str	r4, [sp, #8]
 8007462:	9003      	str	r0, [sp, #12]
 8007464:	9401      	str	r4, [sp, #4]
 8007466:	9400      	str	r4, [sp, #0]
 8007468:	2311      	movs	r3, #17
 800746a:	2218      	movs	r2, #24
 800746c:	2115      	movs	r1, #21
 800746e:	4608      	mov	r0, r1
 8007470:	f004 ff53 	bl	800c31a <ErrorAddLog>
 8007474:	2401      	movs	r4, #1
 8007476:	e01b      	b.n	80074b0 <SD_Verify+0x7c>
 8007478:	9951      	ldr	r1, [sp, #324]	; 0x144
 800747a:	4824      	ldr	r0, [pc, #144]	; (800750c <SD_Verify+0xd8>)
 800747c:	1bc9      	subs	r1, r1, r7
 800747e:	f7ff fa9a 	bl	80069b6 <f_lseek>
 8007482:	b940      	cbnz	r0, 8007496 <SD_Verify+0x62>
 8007484:	f8df a084 	ldr.w	sl, [pc, #132]	; 800750c <SD_Verify+0xd8>
 8007488:	4625      	mov	r5, r4
 800748a:	42bd      	cmp	r5, r7
 800748c:	d316      	bcc.n	80074bc <SD_Verify+0x88>
 800748e:	481f      	ldr	r0, [pc, #124]	; (800750c <SD_Verify+0xd8>)
 8007490:	f7ff fa80 	bl	8006994 <f_close>
 8007494:	e00c      	b.n	80074b0 <SD_Verify+0x7c>
 8007496:	f001 fdbb 	bl	8009010 <GetErrorStruct>
 800749a:	9402      	str	r4, [sp, #8]
 800749c:	9401      	str	r4, [sp, #4]
 800749e:	2401      	movs	r4, #1
 80074a0:	9003      	str	r0, [sp, #12]
 80074a2:	9400      	str	r4, [sp, #0]
 80074a4:	2311      	movs	r3, #17
 80074a6:	2219      	movs	r2, #25
 80074a8:	2126      	movs	r1, #38	; 0x26
 80074aa:	2015      	movs	r0, #21
 80074ac:	f004 ff35 	bl	800c31a <ErrorAddLog>
 80074b0:	4620      	mov	r0, r4
 80074b2:	b047      	add	sp, #284	; 0x11c
 80074b4:	e8bd 46f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, lr}
 80074b8:	b004      	add	sp, #16
 80074ba:	4770      	bx	lr
 80074bc:	ab05      	add	r3, sp, #20
 80074be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074c2:	a906      	add	r1, sp, #24
 80074c4:	4650      	mov	r0, sl
 80074c6:	f7ff f8ab 	bl	8006620 <f_read>
 80074ca:	4606      	mov	r6, r0
 80074cc:	b148      	cbz	r0, 80074e2 <SD_Verify+0xae>
 80074ce:	f001 fd9f 	bl	8009010 <GetErrorStruct>
 80074d2:	2300      	movs	r3, #0
 80074d4:	9302      	str	r3, [sp, #8]
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	9003      	str	r0, [sp, #12]
 80074dc:	2311      	movs	r3, #17
 80074de:	2214      	movs	r2, #20
 80074e0:	e7c4      	b.n	800746c <SD_Verify+0x38>
 80074e2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80074e6:	9bdb      	ldr	r3, [sp, #876]	; 0x36c
 80074e8:	464a      	mov	r2, r9
 80074ea:	18e9      	adds	r1, r5, r3
 80074ec:	a806      	add	r0, sp, #24
 80074ee:	f005 fba7 	bl	800cc40 <memcmp>
 80074f2:	b148      	cbz	r0, 8007508 <SD_Verify+0xd4>
 80074f4:	f001 fd8c 	bl	8009010 <GetErrorStruct>
 80074f8:	2401      	movs	r4, #1
 80074fa:	9003      	str	r0, [sp, #12]
 80074fc:	9602      	str	r6, [sp, #8]
 80074fe:	9601      	str	r6, [sp, #4]
 8007500:	9400      	str	r4, [sp, #0]
 8007502:	2311      	movs	r3, #17
 8007504:	2225      	movs	r2, #37	; 0x25
 8007506:	e7cf      	b.n	80074a8 <SD_Verify+0x74>
 8007508:	444d      	add	r5, r9
 800750a:	e7be      	b.n	800748a <SD_Verify+0x56>
 800750c:	200003f4 	.word	0x200003f4

08007510 <SD_DeInit>:
 8007510:	b508      	push	{r3, lr}
 8007512:	2200      	movs	r2, #0
 8007514:	4904      	ldr	r1, [pc, #16]	; (8007528 <SD_DeInit+0x18>)
 8007516:	4610      	mov	r0, r2
 8007518:	f7fe ff3c 	bl	8006394 <f_mount>
 800751c:	4803      	ldr	r0, [pc, #12]	; (800752c <SD_DeInit+0x1c>)
 800751e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007522:	f7ff be3b 	b.w	800719c <FATFS_UnLinkDriver>
 8007526:	bf00      	nop
 8007528:	0800f691 	.word	0x0800f691
 800752c:	200003ed 	.word	0x200003ed

08007530 <SD_set_timestamp>:
 8007530:	b510      	push	{r4, lr}
 8007532:	b090      	sub	sp, #64	; 0x40
 8007534:	4604      	mov	r4, r0
 8007536:	2200      	movs	r2, #0
 8007538:	a905      	add	r1, sp, #20
 800753a:	481b      	ldr	r0, [pc, #108]	; (80075a8 <SD_set_timestamp+0x78>)
 800753c:	f7fc fb73 	bl	8003c26 <HAL_RTC_GetTime>
 8007540:	2200      	movs	r2, #0
 8007542:	a904      	add	r1, sp, #16
 8007544:	4818      	ldr	r0, [pc, #96]	; (80075a8 <SD_set_timestamp+0x78>)
 8007546:	f7fc fb95 	bl	8003c74 <HAL_RTC_GetDate>
 800754a:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800754e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007552:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8007556:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800755a:	3214      	adds	r2, #20
 800755c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8007560:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8007564:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8007568:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800756c:	015b      	lsls	r3, r3, #5
 800756e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8007572:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8007576:	4620      	mov	r0, r4
 8007578:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800757c:	a90a      	add	r1, sp, #40	; 0x28
 800757e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8007582:	f7ff fd81 	bl	8007088 <f_utime>
 8007586:	2400      	movs	r4, #0
 8007588:	b160      	cbz	r0, 80075a4 <SD_set_timestamp+0x74>
 800758a:	f001 fd41 	bl	8009010 <GetErrorStruct>
 800758e:	9402      	str	r4, [sp, #8]
 8007590:	9003      	str	r0, [sp, #12]
 8007592:	9401      	str	r4, [sp, #4]
 8007594:	2015      	movs	r0, #21
 8007596:	9400      	str	r4, [sp, #0]
 8007598:	2311      	movs	r3, #17
 800759a:	221a      	movs	r2, #26
 800759c:	2117      	movs	r1, #23
 800759e:	f004 febc 	bl	800c31a <ErrorAddLog>
 80075a2:	2001      	movs	r0, #1
 80075a4:	b010      	add	sp, #64	; 0x40
 80075a6:	bd10      	pop	{r4, pc}
 80075a8:	2000c5b4 	.word	0x2000c5b4

080075ac <SD_DoFileExist>:
 80075ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075ae:	4614      	mov	r4, r2
 80075b0:	4602      	mov	r2, r0
 80075b2:	4668      	mov	r0, sp
 80075b4:	f005 ff42 	bl	800d43c <siprintf>
 80075b8:	4621      	mov	r1, r4
 80075ba:	4668      	mov	r0, sp
 80075bc:	f7ff fbb7 	bl	8006d2e <f_stat>
 80075c0:	3804      	subs	r0, #4
 80075c2:	bf18      	it	ne
 80075c4:	2001      	movne	r0, #1
 80075c6:	b004      	add	sp, #16
 80075c8:	bd10      	pop	{r4, pc}

080075ca <SD_getNumFiles>:
 80075ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80075cc:	4605      	mov	r5, r0
 80075ce:	460e      	mov	r6, r1
 80075d0:	2401      	movs	r4, #1
 80075d2:	4632      	mov	r2, r6
 80075d4:	4629      	mov	r1, r5
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7ff ffe8 	bl	80075ac <SD_DoFileExist>
 80075dc:	b930      	cbnz	r0, 80075ec <SD_getNumFiles+0x22>
 80075de:	2c01      	cmp	r4, #1
 80075e0:	d001      	beq.n	80075e6 <SD_getNumFiles+0x1c>
 80075e2:	3c01      	subs	r4, #1
 80075e4:	b2e4      	uxtb	r4, r4
 80075e6:	4620      	mov	r0, r4
 80075e8:	b004      	add	sp, #16
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	3401      	adds	r4, #1
 80075ee:	b2e4      	uxtb	r4, r4
 80075f0:	2c63      	cmp	r4, #99	; 0x63
 80075f2:	d1ee      	bne.n	80075d2 <SD_getNumFiles+0x8>
 80075f4:	f001 fd0c 	bl	8009010 <GetErrorStruct>
 80075f8:	2300      	movs	r3, #0
 80075fa:	9302      	str	r3, [sp, #8]
 80075fc:	9301      	str	r3, [sp, #4]
 80075fe:	2311      	movs	r3, #17
 8007600:	9003      	str	r0, [sp, #12]
 8007602:	9400      	str	r4, [sp, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	211a      	movs	r1, #26
 8007608:	2015      	movs	r0, #21
 800760a:	f004 fe86 	bl	800c31a <ErrorAddLog>
 800760e:	e7ea      	b.n	80075e6 <SD_getNumFiles+0x1c>

08007610 <SD_getFileName>:
 8007610:	b530      	push	{r4, r5, lr}
 8007612:	b087      	sub	sp, #28
 8007614:	460d      	mov	r5, r1
 8007616:	4669      	mov	r1, sp
 8007618:	4604      	mov	r4, r0
 800761a:	f7ff ffd6 	bl	80075ca <SD_getNumFiles>
 800761e:	2863      	cmp	r0, #99	; 0x63
 8007620:	4602      	mov	r2, r0
 8007622:	d105      	bne.n	8007630 <SD_getFileName+0x20>
 8007624:	4808      	ldr	r0, [pc, #32]	; (8007648 <SD_getFileName+0x38>)
 8007626:	f005 fef1 	bl	800d40c <puts>
 800762a:	2001      	movs	r0, #1
 800762c:	b007      	add	sp, #28
 800762e:	bd30      	pop	{r4, r5, pc}
 8007630:	9b00      	ldr	r3, [sp, #0]
 8007632:	4806      	ldr	r0, [pc, #24]	; (800764c <SD_getFileName+0x3c>)
 8007634:	42ab      	cmp	r3, r5
 8007636:	bf24      	itt	cs
 8007638:	3201      	addcs	r2, #1
 800763a:	b2d2      	uxtbcs	r2, r2
 800763c:	4621      	mov	r1, r4
 800763e:	f005 fefd 	bl	800d43c <siprintf>
 8007642:	2000      	movs	r0, #0
 8007644:	e7f2      	b.n	800762c <SD_getFileName+0x1c>
 8007646:	bf00      	nop
 8007648:	0800f6ff 	.word	0x0800f6ff
 800764c:	2000c112 	.word	0x2000c112

08007650 <ArchivePATHFile>:
 8007650:	b530      	push	{r4, r5, lr}
 8007652:	b089      	sub	sp, #36	; 0x24
 8007654:	4604      	mov	r4, r0
 8007656:	460d      	mov	r5, r1
 8007658:	2220      	movs	r2, #32
 800765a:	2100      	movs	r1, #0
 800765c:	4668      	mov	r0, sp
 800765e:	f005 fb09 	bl	800cc74 <memset>
 8007662:	4623      	mov	r3, r4
 8007664:	462a      	mov	r2, r5
 8007666:	490f      	ldr	r1, [pc, #60]	; (80076a4 <ArchivePATHFile+0x54>)
 8007668:	4668      	mov	r0, sp
 800766a:	f005 fee7 	bl	800d43c <siprintf>
 800766e:	4669      	mov	r1, sp
 8007670:	4620      	mov	r0, r4
 8007672:	f7ff fc7f 	bl	8006f74 <f_rename>
 8007676:	2808      	cmp	r0, #8
 8007678:	4601      	mov	r1, r0
 800767a:	d107      	bne.n	800768c <ArchivePATHFile+0x3c>
 800767c:	480a      	ldr	r0, [pc, #40]	; (80076a8 <ArchivePATHFile+0x58>)
 800767e:	f005 fe3d 	bl	800d2fc <iprintf>
 8007682:	4620      	mov	r0, r4
 8007684:	f7ff fb75 	bl	8006d72 <f_unlink>
 8007688:	b009      	add	sp, #36	; 0x24
 800768a:	bd30      	pop	{r4, r5, pc}
 800768c:	b928      	cbnz	r0, 800769a <ArchivePATHFile+0x4a>
 800768e:	466a      	mov	r2, sp
 8007690:	4621      	mov	r1, r4
 8007692:	4806      	ldr	r0, [pc, #24]	; (80076ac <ArchivePATHFile+0x5c>)
 8007694:	f005 fe32 	bl	800d2fc <iprintf>
 8007698:	e7f6      	b.n	8007688 <ArchivePATHFile+0x38>
 800769a:	4805      	ldr	r0, [pc, #20]	; (80076b0 <ArchivePATHFile+0x60>)
 800769c:	f005 fe2e 	bl	800d2fc <iprintf>
 80076a0:	e7f2      	b.n	8007688 <ArchivePATHFile+0x38>
 80076a2:	bf00      	nop
 80076a4:	0800f5c4 	.word	0x0800f5c4
 80076a8:	0800f5ca 	.word	0x0800f5ca
 80076ac:	0800f607 	.word	0x0800f607
 80076b0:	0800f628 	.word	0x0800f628

080076b4 <FindFile>:
 80076b4:	b510      	push	{r4, lr}
 80076b6:	b094      	sub	sp, #80	; 0x50
 80076b8:	4b0e      	ldr	r3, [pc, #56]	; (80076f4 <FindFile+0x40>)
 80076ba:	4a0f      	ldr	r2, [pc, #60]	; (80076f8 <FindFile+0x44>)
 80076bc:	a901      	add	r1, sp, #4
 80076be:	a807      	add	r0, sp, #28
 80076c0:	f7ff fb26 	bl	8006d10 <f_findfirst>
 80076c4:	b9a0      	cbnz	r0, 80076f0 <FindFile+0x3c>
 80076c6:	f89d 400d 	ldrb.w	r4, [sp, #13]
 80076ca:	b144      	cbz	r4, 80076de <FindFile+0x2a>
 80076cc:	f10d 010d 	add.w	r1, sp, #13
 80076d0:	480a      	ldr	r0, [pc, #40]	; (80076fc <FindFile+0x48>)
 80076d2:	f005 fe13 	bl	800d2fc <iprintf>
 80076d6:	480a      	ldr	r0, [pc, #40]	; (8007700 <FindFile+0x4c>)
 80076d8:	f005 fe98 	bl	800d40c <puts>
 80076dc:	2401      	movs	r4, #1
 80076de:	a807      	add	r0, sp, #28
 80076e0:	f7ff fac9 	bl	8006c76 <f_closedir>
 80076e4:	4807      	ldr	r0, [pc, #28]	; (8007704 <FindFile+0x50>)
 80076e6:	f005 fe91 	bl	800d40c <puts>
 80076ea:	4620      	mov	r0, r4
 80076ec:	b014      	add	sp, #80	; 0x50
 80076ee:	bd10      	pop	{r4, pc}
 80076f0:	2400      	movs	r4, #0
 80076f2:	e7f4      	b.n	80076de <FindFile+0x2a>
 80076f4:	0800f642 	.word	0x0800f642
 80076f8:	0800f691 	.word	0x0800f691
 80076fc:	0800f64a 	.word	0x0800f64a
 8007700:	0800f655 	.word	0x0800f655
 8007704:	0800f661 	.word	0x0800f661

08007708 <ArchiveFiles>:
 8007708:	b500      	push	{lr}
 800770a:	480f      	ldr	r0, [pc, #60]	; (8007748 <ArchiveFiles+0x40>)
 800770c:	b095      	sub	sp, #84	; 0x54
 800770e:	f005 fe7d 	bl	800d40c <puts>
 8007712:	4b0e      	ldr	r3, [pc, #56]	; (800774c <ArchiveFiles+0x44>)
 8007714:	4a0e      	ldr	r2, [pc, #56]	; (8007750 <ArchiveFiles+0x48>)
 8007716:	a901      	add	r1, sp, #4
 8007718:	a807      	add	r0, sp, #28
 800771a:	f7ff faf9 	bl	8006d10 <f_findfirst>
 800771e:	b960      	cbnz	r0, 800773a <ArchiveFiles+0x32>
 8007720:	f10d 010d 	add.w	r1, sp, #13
 8007724:	480b      	ldr	r0, [pc, #44]	; (8007754 <ArchiveFiles+0x4c>)
 8007726:	f005 fde9 	bl	800d2fc <iprintf>
 800772a:	f10d 000d 	add.w	r0, sp, #13
 800772e:	490a      	ldr	r1, [pc, #40]	; (8007758 <ArchiveFiles+0x50>)
 8007730:	f7ff ff8e 	bl	8007650 <ArchivePATHFile>
 8007734:	4809      	ldr	r0, [pc, #36]	; (800775c <ArchiveFiles+0x54>)
 8007736:	f005 fe69 	bl	800d40c <puts>
 800773a:	a807      	add	r0, sp, #28
 800773c:	f7ff fa9b 	bl	8006c76 <f_closedir>
 8007740:	b015      	add	sp, #84	; 0x54
 8007742:	f85d fb04 	ldr.w	pc, [sp], #4
 8007746:	bf00      	nop
 8007748:	0800f588 	.word	0x0800f588
 800774c:	0800f642 	.word	0x0800f642
 8007750:	0800f691 	.word	0x0800f691
 8007754:	0800f59b 	.word	0x0800f59b
 8007758:	0800f672 	.word	0x0800f672
 800775c:	0800f5b1 	.word	0x0800f5b1

08007760 <ArchiveInfoFilesExceptNewest>:
 8007760:	b530      	push	{r4, r5, lr}
 8007762:	b095      	sub	sp, #84	; 0x54
 8007764:	4604      	mov	r4, r0
 8007766:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <ArchiveInfoFilesExceptNewest+0x44>)
 8007768:	4a0f      	ldr	r2, [pc, #60]	; (80077a8 <ArchiveInfoFilesExceptNewest+0x48>)
 800776a:	4d10      	ldr	r5, [pc, #64]	; (80077ac <ArchiveInfoFilesExceptNewest+0x4c>)
 800776c:	a901      	add	r1, sp, #4
 800776e:	a807      	add	r0, sp, #28
 8007770:	f7ff face 	bl	8006d10 <f_findfirst>
 8007774:	b910      	cbnz	r0, 800777c <ArchiveInfoFilesExceptNewest+0x1c>
 8007776:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800777a:	b90b      	cbnz	r3, 8007780 <ArchiveInfoFilesExceptNewest+0x20>
 800777c:	b015      	add	sp, #84	; 0x54
 800777e:	bd30      	pop	{r4, r5, pc}
 8007780:	4621      	mov	r1, r4
 8007782:	f10d 000d 	add.w	r0, sp, #13
 8007786:	f7f8 fd2b 	bl	80001e0 <strcmp>
 800778a:	b920      	cbnz	r0, 8007796 <ArchiveInfoFilesExceptNewest+0x36>
 800778c:	a901      	add	r1, sp, #4
 800778e:	a807      	add	r0, sp, #28
 8007790:	f7ff faa6 	bl	8006ce0 <f_findnext>
 8007794:	e7ee      	b.n	8007774 <ArchiveInfoFilesExceptNewest+0x14>
 8007796:	4629      	mov	r1, r5
 8007798:	f10d 000d 	add.w	r0, sp, #13
 800779c:	f7ff ff58 	bl	8007650 <ArchivePATHFile>
 80077a0:	e7f4      	b.n	800778c <ArchiveInfoFilesExceptNewest+0x2c>
 80077a2:	bf00      	nop
 80077a4:	0800f5c0 	.word	0x0800f5c0
 80077a8:	0800f691 	.word	0x0800f691
 80077ac:	0800f681 	.word	0x0800f681

080077b0 <SDReadAndSendPackets>:
 80077b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077b2:	f2ad 5d54 	subw	sp, sp, #1364	; 0x554
 80077b6:	4607      	mov	r7, r0
 80077b8:	f001 fc5e 	bl	8009078 <GetSaraConfigurationStruct>
 80077bc:	4604      	mov	r4, r0
 80077be:	f001 fc5f 	bl	8009080 <GetErrorFlagsStruct>
 80077c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077c6:	2100      	movs	r1, #0
 80077c8:	4605      	mov	r5, r0
 80077ca:	a808      	add	r0, sp, #32
 80077cc:	f005 fa52 	bl	800cc74 <memset>
 80077d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077d4:	2100      	movs	r1, #0
 80077d6:	a848      	add	r0, sp, #288	; 0x120
 80077d8:	f005 fa4c 	bl	800cc74 <memset>
 80077dc:	4b3e      	ldr	r3, [pc, #248]	; (80078d8 <SDReadAndSendPackets+0x128>)
 80077de:	aa04      	add	r2, sp, #16
 80077e0:	f103 0e08 	add.w	lr, r3, #8
 80077e4:	6818      	ldr	r0, [r3, #0]
 80077e6:	6859      	ldr	r1, [r3, #4]
 80077e8:	4616      	mov	r6, r2
 80077ea:	c603      	stmia	r6!, {r0, r1}
 80077ec:	3308      	adds	r3, #8
 80077ee:	4573      	cmp	r3, lr
 80077f0:	4632      	mov	r2, r6
 80077f2:	d1f7      	bne.n	80077e4 <SDReadAndSendPackets+0x34>
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	889b      	ldrh	r3, [r3, #4]
 80077f8:	6030      	str	r0, [r6, #0]
 80077fa:	80b3      	strh	r3, [r6, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	2600      	movs	r6, #0
 8007800:	4639      	mov	r1, r7
 8007802:	a8c8      	add	r0, sp, #800	; 0x320
 8007804:	f8ad 601e 	strh.w	r6, [sp, #30]
 8007808:	f7fe fdf8 	bl	80063fc <f_open>
 800780c:	b178      	cbz	r0, 800782e <SDReadAndSendPackets+0x7e>
 800780e:	f001 fbff 	bl	8009010 <GetErrorStruct>
 8007812:	2115      	movs	r1, #21
 8007814:	9003      	str	r0, [sp, #12]
 8007816:	9602      	str	r6, [sp, #8]
 8007818:	4608      	mov	r0, r1
 800781a:	9601      	str	r6, [sp, #4]
 800781c:	9600      	str	r6, [sp, #0]
 800781e:	2311      	movs	r3, #17
 8007820:	2218      	movs	r2, #24
 8007822:	f004 fd7a 	bl	800c31a <ErrorAddLog>
 8007826:	2001      	movs	r0, #1
 8007828:	f20d 5d54 	addw	sp, sp, #1364	; 0x554
 800782c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800782e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8007832:	2b01      	cmp	r3, #1
 8007834:	d004      	beq.n	8007840 <SDReadAndSendPackets+0x90>
 8007836:	2601      	movs	r6, #1
 8007838:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800783c:	429e      	cmp	r6, r3
 800783e:	db40      	blt.n	80078c2 <SDReadAndSendPackets+0x112>
 8007840:	4f26      	ldr	r7, [pc, #152]	; (80078dc <SDReadAndSendPackets+0x12c>)
 8007842:	f104 0660 	add.w	r6, r4, #96	; 0x60
 8007846:	aac8      	add	r2, sp, #800	; 0x320
 8007848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800784c:	a808      	add	r0, sp, #32
 800784e:	f7ff fc42 	bl	80070d6 <f_gets>
 8007852:	b1b8      	cbz	r0, 8007884 <SDReadAndSendPackets+0xd4>
 8007854:	2300      	movs	r3, #0
 8007856:	461a      	mov	r2, r3
 8007858:	a908      	add	r1, sp, #32
 800785a:	4630      	mov	r0, r6
 800785c:	f004 f9fc 	bl	800bc58 <MqttPushPublishSD>
 8007860:	a908      	add	r1, sp, #32
 8007862:	4638      	mov	r0, r7
 8007864:	f005 fd4a 	bl	800d2fc <iprintf>
 8007868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800786c:	2100      	movs	r1, #0
 800786e:	a808      	add	r0, sp, #32
 8007870:	f005 fa00 	bl	800cc74 <memset>
 8007874:	8b2b      	ldrh	r3, [r5, #24]
 8007876:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800787a:	3301      	adds	r3, #1
 800787c:	b29b      	uxth	r3, r3
 800787e:	4293      	cmp	r3, r2
 8007880:	832b      	strh	r3, [r5, #24]
 8007882:	d1e0      	bne.n	8007846 <SDReadAndSendPackets+0x96>
 8007884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007888:	2100      	movs	r1, #0
 800788a:	a888      	add	r0, sp, #544	; 0x220
 800788c:	f005 f9f2 	bl	800cc74 <memset>
 8007890:	22c8      	movs	r2, #200	; 0xc8
 8007892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007896:	a888      	add	r0, sp, #544	; 0x220
 8007898:	f004 fa36 	bl	800bd08 <SaraWaitForResponse>
 800789c:	8b2b      	ldrh	r3, [r5, #24]
 800789e:	3b01      	subs	r3, #1
 80078a0:	832b      	strh	r3, [r5, #24]
 80078a2:	2300      	movs	r3, #0
 80078a4:	461a      	mov	r2, r3
 80078a6:	a904      	add	r1, sp, #16
 80078a8:	4630      	mov	r0, r6
 80078aa:	f004 f9d5 	bl	800bc58 <MqttPushPublishSD>
 80078ae:	2301      	movs	r3, #1
 80078b0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80078b4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80078b8:	a8c8      	add	r0, sp, #800	; 0x320
 80078ba:	f7ff f86b 	bl	8006994 <f_close>
 80078be:	2000      	movs	r0, #0
 80078c0:	e7b2      	b.n	8007828 <SDReadAndSendPackets+0x78>
 80078c2:	aac8      	add	r2, sp, #800	; 0x320
 80078c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078c8:	a848      	add	r0, sp, #288	; 0x120
 80078ca:	f7ff fc04 	bl	80070d6 <f_gets>
 80078ce:	8b2b      	ldrh	r3, [r5, #24]
 80078d0:	3301      	adds	r3, #1
 80078d2:	832b      	strh	r3, [r5, #24]
 80078d4:	3601      	adds	r6, #1
 80078d6:	e7af      	b.n	8007838 <SDReadAndSendPackets+0x88>
 80078d8:	0800f4cc 	.word	0x0800f4cc
 80078dc:	0800f686 	.word	0x0800f686

080078e0 <FindAndSendFile>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	b094      	sub	sp, #80	; 0x50
 80078e4:	f001 fbcc 	bl	8009080 <GetErrorFlagsStruct>
 80078e8:	2301      	movs	r3, #1
 80078ea:	8303      	strh	r3, [r0, #24]
 80078ec:	a901      	add	r1, sp, #4
 80078ee:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <FindAndSendFile+0x40>)
 80078f0:	4a0c      	ldr	r2, [pc, #48]	; (8007924 <FindAndSendFile+0x44>)
 80078f2:	a807      	add	r0, sp, #28
 80078f4:	f7ff fa0c 	bl	8006d10 <f_findfirst>
 80078f8:	f10d 010d 	add.w	r1, sp, #13
 80078fc:	4604      	mov	r4, r0
 80078fe:	480a      	ldr	r0, [pc, #40]	; (8007928 <FindAndSendFile+0x48>)
 8007900:	f005 fcfc 	bl	800d2fc <iprintf>
 8007904:	b934      	cbnz	r4, 8007914 <FindAndSendFile+0x34>
 8007906:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800790a:	b11b      	cbz	r3, 8007914 <FindAndSendFile+0x34>
 800790c:	f10d 000d 	add.w	r0, sp, #13
 8007910:	f7ff ff4e 	bl	80077b0 <SDReadAndSendPackets>
 8007914:	a807      	add	r0, sp, #28
 8007916:	f7ff f9ae 	bl	8006c76 <f_closedir>
 800791a:	b014      	add	sp, #80	; 0x50
 800791c:	bd10      	pop	{r4, pc}
 800791e:	bf00      	nop
 8007920:	0800f642 	.word	0x0800f642
 8007924:	0800f691 	.word	0x0800f691
 8007928:	0800f633 	.word	0x0800f633

0800792c <SDWriteChars>:
 800792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007930:	2220      	movs	r2, #32
 8007932:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 8007936:	4604      	mov	r4, r0
 8007938:	2100      	movs	r1, #0
 800793a:	eb0d 0002 	add.w	r0, sp, r2
 800793e:	f005 f999 	bl	800cc74 <memset>
 8007942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007946:	2100      	movs	r1, #0
 8007948:	a810      	add	r0, sp, #64	; 0x40
 800794a:	f005 f993 	bl	800cc74 <memset>
 800794e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007952:	2100      	movs	r1, #0
 8007954:	a850      	add	r0, sp, #320	; 0x140
 8007956:	f005 f98d 	bl	800cc74 <memset>
 800795a:	f001 fb55 	bl	8009008 <GetDataStruct>
 800795e:	f645 2308 	movw	r3, #23048	; 0x5a08
 8007962:	4621      	mov	r1, r4
 8007964:	f830 8003 	ldrh.w	r8, [r0, r3]
 8007968:	4606      	mov	r6, r0
 800796a:	2232      	movs	r2, #50	; 0x32
 800796c:	a890      	add	r0, sp, #576	; 0x240
 800796e:	f7fe fd45 	bl	80063fc <f_open>
 8007972:	2400      	movs	r4, #0
 8007974:	b960      	cbnz	r0, 8007990 <SDWriteChars+0x64>
 8007976:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8007a70 <SDWriteChars+0x144>
 800797a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007a74 <SDWriteChars+0x148>
 800797e:	4634      	mov	r4, r6
 8007980:	4605      	mov	r5, r0
 8007982:	2301      	movs	r3, #1
 8007984:	4545      	cmp	r5, r8
 8007986:	db15      	blt.n	80079b4 <SDWriteChars+0x88>
 8007988:	a890      	add	r0, sp, #576	; 0x240
 800798a:	f7ff f803 	bl	8006994 <f_close>
 800798e:	e00c      	b.n	80079aa <SDWriteChars+0x7e>
 8007990:	f001 fb3e 	bl	8009010 <GetErrorStruct>
 8007994:	2301      	movs	r3, #1
 8007996:	9003      	str	r0, [sp, #12]
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	9402      	str	r4, [sp, #8]
 800799c:	9401      	str	r4, [sp, #4]
 800799e:	2311      	movs	r3, #17
 80079a0:	2218      	movs	r2, #24
 80079a2:	2117      	movs	r1, #23
 80079a4:	2015      	movs	r0, #21
 80079a6:	f004 fcb8 	bl	800c31a <ErrorAddLog>
 80079aa:	2000      	movs	r0, #0
 80079ac:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 80079b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b4:	68a7      	ldr	r7, [r4, #8]
 80079b6:	ea4f 3bd7 	mov.w	fp, r7, lsr #15
 80079ba:	f3c7 070e 	ubfx	r7, r7, #0, #15
 80079be:	b14b      	cbz	r3, 80079d4 <SDWriteChars+0xa8>
 80079c0:	492a      	ldr	r1, [pc, #168]	; (8007a6c <SDWriteChars+0x140>)
 80079c2:	7933      	ldrb	r3, [r6, #4]
 80079c4:	6832      	ldr	r2, [r6, #0]
 80079c6:	a808      	add	r0, sp, #32
 80079c8:	f005 fd38 	bl	800d43c <siprintf>
 80079cc:	a908      	add	r1, sp, #32
 80079ce:	a850      	add	r0, sp, #320	; 0x140
 80079d0:	f005 fdc3 	bl	800d55a <strcat>
 80079d4:	8ae3      	ldrh	r3, [r4, #22]
 80079d6:	9305      	str	r3, [sp, #20]
 80079d8:	8aa3      	ldrh	r3, [r4, #20]
 80079da:	9304      	str	r3, [sp, #16]
 80079dc:	8a63      	ldrh	r3, [r4, #18]
 80079de:	9303      	str	r3, [sp, #12]
 80079e0:	8a23      	ldrh	r3, [r4, #16]
 80079e2:	9302      	str	r3, [sp, #8]
 80079e4:	89e3      	ldrh	r3, [r4, #14]
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	463a      	mov	r2, r7
 80079ee:	465b      	mov	r3, fp
 80079f0:	4651      	mov	r1, sl
 80079f2:	a810      	add	r0, sp, #64	; 0x40
 80079f4:	f005 fd22 	bl	800d43c <siprintf>
 80079f8:	a910      	add	r1, sp, #64	; 0x40
 80079fa:	a850      	add	r0, sp, #320	; 0x140
 80079fc:	f005 fdad 	bl	800d55a <strcat>
 8007a00:	a850      	add	r0, sp, #320	; 0x140
 8007a02:	f7f8 fbf7 	bl	80001f4 <strlen>
 8007a06:	f108 33ff 	add.w	r3, r8, #4294967295
 8007a0a:	429d      	cmp	r5, r3
 8007a0c:	b280      	uxth	r0, r0
 8007a0e:	d01e      	beq.n	8007a4e <SDWriteChars+0x122>
 8007a10:	2882      	cmp	r0, #130	; 0x82
 8007a12:	d918      	bls.n	8007a46 <SDWriteChars+0x11a>
 8007a14:	4649      	mov	r1, r9
 8007a16:	a850      	add	r0, sp, #320	; 0x140
 8007a18:	f005 fd9f 	bl	800d55a <strcat>
 8007a1c:	a850      	add	r0, sp, #320	; 0x140
 8007a1e:	f7f8 fbe9 	bl	80001f4 <strlen>
 8007a22:	ab07      	add	r3, sp, #28
 8007a24:	4602      	mov	r2, r0
 8007a26:	a950      	add	r1, sp, #320	; 0x140
 8007a28:	a890      	add	r0, sp, #576	; 0x240
 8007a2a:	f7fe fea6 	bl	800677a <f_write>
 8007a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a32:	2100      	movs	r1, #0
 8007a34:	a850      	add	r0, sp, #320	; 0x140
 8007a36:	f005 f91d 	bl	800cc74 <memset>
 8007a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a3e:	2100      	movs	r1, #0
 8007a40:	a810      	add	r0, sp, #64	; 0x40
 8007a42:	f005 f917 	bl	800cc74 <memset>
 8007a46:	3501      	adds	r5, #1
 8007a48:	3410      	adds	r4, #16
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e79a      	b.n	8007984 <SDWriteChars+0x58>
 8007a4e:	4649      	mov	r1, r9
 8007a50:	a850      	add	r0, sp, #320	; 0x140
 8007a52:	f005 fd82 	bl	800d55a <strcat>
 8007a56:	a850      	add	r0, sp, #320	; 0x140
 8007a58:	f7f8 fbcc 	bl	80001f4 <strlen>
 8007a5c:	ab07      	add	r3, sp, #28
 8007a5e:	4602      	mov	r2, r0
 8007a60:	a950      	add	r1, sp, #320	; 0x140
 8007a62:	a890      	add	r0, sp, #576	; 0x240
 8007a64:	f7fe fe89 	bl	800677a <f_write>
 8007a68:	e7ed      	b.n	8007a46 <SDWriteChars+0x11a>
 8007a6a:	bf00      	nop
 8007a6c:	0800f692 	.word	0x0800f692
 8007a70:	0800f699 	.word	0x0800f699
 8007a74:	0800f690 	.word	0x0800f690

08007a78 <EnableSD_Card>:
 8007a78:	b530      	push	{r4, r5, lr}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	f000 f9c6 	bl	8007e0c <MX_FATFS_Init>
 8007a80:	4816      	ldr	r0, [pc, #88]	; (8007adc <EnableSD_Card+0x64>)
 8007a82:	f000 fa4b 	bl	8007f1c <HAL_SD_MspInit>
 8007a86:	2001      	movs	r0, #1
 8007a88:	f002 fb86 	bl	800a198 <DisEnableSDPin>
 8007a8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a90:	f002 f846 	bl	8009b20 <SleepForApproxMs>
 8007a94:	2406      	movs	r4, #6
 8007a96:	f7ff fc6f 	bl	8007378 <SD_Init>
 8007a9a:	b1e8      	cbz	r0, 8007ad8 <EnableSD_Card+0x60>
 8007a9c:	3c01      	subs	r4, #1
 8007a9e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8007aa2:	d1f8      	bne.n	8007a96 <EnableSD_Card+0x1e>
 8007aa4:	f001 fabc 	bl	8009020 <GetTempInfoStruct>
 8007aa8:	2513      	movs	r5, #19
 8007aaa:	2323      	movs	r3, #35	; 0x23
 8007aac:	2227      	movs	r2, #39	; 0x27
 8007aae:	2115      	movs	r1, #21
 8007ab0:	9004      	str	r0, [sp, #16]
 8007ab2:	9403      	str	r4, [sp, #12]
 8007ab4:	2016      	movs	r0, #22
 8007ab6:	9402      	str	r4, [sp, #8]
 8007ab8:	9401      	str	r4, [sp, #4]
 8007aba:	9500      	str	r5, [sp, #0]
 8007abc:	f004 fc7d 	bl	800c3ba <InfoLogAdd>
 8007ac0:	f001 faa6 	bl	8009010 <GetErrorStruct>
 8007ac4:	9402      	str	r4, [sp, #8]
 8007ac6:	9003      	str	r0, [sp, #12]
 8007ac8:	9401      	str	r4, [sp, #4]
 8007aca:	9400      	str	r4, [sp, #0]
 8007acc:	462b      	mov	r3, r5
 8007ace:	2223      	movs	r2, #35	; 0x23
 8007ad0:	2127      	movs	r1, #39	; 0x27
 8007ad2:	2015      	movs	r0, #21
 8007ad4:	f004 fc21 	bl	800c31a <ErrorAddLog>
 8007ad8:	b007      	add	sp, #28
 8007ada:	bd30      	pop	{r4, r5, pc}
 8007adc:	20000854 	.word	0x20000854

08007ae0 <SDWriteSensorData>:
 8007ae0:	b530      	push	{r4, r5, lr}
 8007ae2:	b08d      	sub	sp, #52	; 0x34
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	a806      	add	r0, sp, #24
 8007ae8:	f004 ffba 	bl	800ca60 <GetTime>
 8007aec:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8007af0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007af4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8007af8:	9100      	str	r1, [sp, #0]
 8007afa:	a808      	add	r0, sp, #32
 8007afc:	4917      	ldr	r1, [pc, #92]	; (8007b5c <SDWriteSensorData+0x7c>)
 8007afe:	f005 fc9d 	bl	800d43c <siprintf>
 8007b02:	f7ff fc39 	bl	8007378 <SD_Init>
 8007b06:	b9c0      	cbnz	r0, 8007b3a <SDWriteSensorData+0x5a>
 8007b08:	f645 2108 	movw	r1, #23048	; 0x5a08
 8007b0c:	a808      	add	r0, sp, #32
 8007b0e:	f7ff fd7f 	bl	8007610 <SD_getFileName>
 8007b12:	b990      	cbnz	r0, 8007b3a <SDWriteSensorData+0x5a>
 8007b14:	4812      	ldr	r0, [pc, #72]	; (8007b60 <SDWriteSensorData+0x80>)
 8007b16:	f7ff ff09 	bl	800792c <SDWriteChars>
 8007b1a:	b970      	cbnz	r0, 8007b3a <SDWriteSensorData+0x5a>
 8007b1c:	4810      	ldr	r0, [pc, #64]	; (8007b60 <SDWriteSensorData+0x80>)
 8007b1e:	f7ff fd07 	bl	8007530 <SD_set_timestamp>
 8007b22:	4604      	mov	r4, r0
 8007b24:	b948      	cbnz	r0, 8007b3a <SDWriteSensorData+0x5a>
 8007b26:	490e      	ldr	r1, [pc, #56]	; (8007b60 <SDWriteSensorData+0x80>)
 8007b28:	480e      	ldr	r0, [pc, #56]	; (8007b64 <SDWriteSensorData+0x84>)
 8007b2a:	f005 fbe7 	bl	800d2fc <iprintf>
 8007b2e:	f645 2308 	movw	r3, #23048	; 0x5a08
 8007b32:	52ec      	strh	r4, [r5, r3]
 8007b34:	4620      	mov	r0, r4
 8007b36:	b00d      	add	sp, #52	; 0x34
 8007b38:	bd30      	pop	{r4, r5, pc}
 8007b3a:	f001 fa71 	bl	8009020 <GetTempInfoStruct>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	9302      	str	r3, [sp, #8]
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	2313      	movs	r3, #19
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	2315      	movs	r3, #21
 8007b4c:	9004      	str	r0, [sp, #16]
 8007b4e:	2217      	movs	r2, #23
 8007b50:	4619      	mov	r1, r3
 8007b52:	2014      	movs	r0, #20
 8007b54:	f004 fc31 	bl	800c3ba <InfoLogAdd>
 8007b58:	2401      	movs	r4, #1
 8007b5a:	e7eb      	b.n	8007b34 <SDWriteSensorData+0x54>
 8007b5c:	0800f6b2 	.word	0x0800f6b2
 8007b60:	2000c112 	.word	0x2000c112
 8007b64:	0800f6c3 	.word	0x0800f6c3

08007b68 <SD_Write>:
 8007b68:	b084      	sub	sp, #16
 8007b6a:	b530      	push	{r4, r5, lr}
 8007b6c:	b087      	sub	sp, #28
 8007b6e:	ac0a      	add	r4, sp, #40	; 0x28
 8007b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007b74:	2232      	movs	r2, #50	; 0x32
 8007b76:	9996      	ldr	r1, [sp, #600]	; 0x258
 8007b78:	4817      	ldr	r0, [pc, #92]	; (8007bd8 <SD_Write+0x70>)
 8007b7a:	9c97      	ldr	r4, [sp, #604]	; 0x25c
 8007b7c:	9d98      	ldr	r5, [sp, #608]	; 0x260
 8007b7e:	f7fe fc3d 	bl	80063fc <f_open>
 8007b82:	b938      	cbnz	r0, 8007b94 <SD_Write+0x2c>
 8007b84:	4629      	mov	r1, r5
 8007b86:	4620      	mov	r0, r4
 8007b88:	b007      	add	sp, #28
 8007b8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b8e:	b004      	add	sp, #16
 8007b90:	f7ff bbc2 	b.w	8007318 <SD_Write.part.4>
 8007b94:	f001 fa3c 	bl	8009010 <GetErrorStruct>
 8007b98:	2400      	movs	r4, #0
 8007b9a:	2501      	movs	r5, #1
 8007b9c:	9003      	str	r0, [sp, #12]
 8007b9e:	2311      	movs	r3, #17
 8007ba0:	2218      	movs	r2, #24
 8007ba2:	2117      	movs	r1, #23
 8007ba4:	9402      	str	r4, [sp, #8]
 8007ba6:	9401      	str	r4, [sp, #4]
 8007ba8:	9500      	str	r5, [sp, #0]
 8007baa:	2015      	movs	r0, #21
 8007bac:	f004 fbb5 	bl	800c31a <ErrorAddLog>
 8007bb0:	f001 fa36 	bl	8009020 <GetTempInfoStruct>
 8007bb4:	2311      	movs	r3, #17
 8007bb6:	9004      	str	r0, [sp, #16]
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	9403      	str	r4, [sp, #12]
 8007bbc:	9402      	str	r4, [sp, #8]
 8007bbe:	9501      	str	r5, [sp, #4]
 8007bc0:	2318      	movs	r3, #24
 8007bc2:	2217      	movs	r2, #23
 8007bc4:	2115      	movs	r1, #21
 8007bc6:	2014      	movs	r0, #20
 8007bc8:	f004 fbf7 	bl	800c3ba <InfoLogAdd>
 8007bcc:	4620      	mov	r0, r4
 8007bce:	b007      	add	sp, #28
 8007bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bd4:	b004      	add	sp, #16
 8007bd6:	4770      	bx	lr
 8007bd8:	200003f4 	.word	0x200003f4

08007bdc <SD_WriteInfoLog>:
 8007bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bde:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8007be2:	4606      	mov	r6, r0
 8007be4:	f001 fa18 	bl	8009018 <GetInfoStruct>
 8007be8:	f004 fc3b 	bl	800c462 <InfoGetSize>
 8007bec:	4607      	mov	r7, r0
 8007bee:	a88c      	add	r0, sp, #560	; 0x230
 8007bf0:	f004 ff36 	bl	800ca60 <GetTime>
 8007bf4:	f89d 1232 	ldrb.w	r1, [sp, #562]	; 0x232
 8007bf8:	f89d 3231 	ldrb.w	r3, [sp, #561]	; 0x231
 8007bfc:	f89d 2230 	ldrb.w	r2, [sp, #560]	; 0x230
 8007c00:	9100      	str	r1, [sp, #0]
 8007c02:	a88e      	add	r0, sp, #568	; 0x238
 8007c04:	4924      	ldr	r1, [pc, #144]	; (8007c98 <SD_WriteInfoLog+0xbc>)
 8007c06:	f005 fc19 	bl	800d43c <siprintf>
 8007c0a:	f7ff fbb5 	bl	8007378 <SD_Init>
 8007c0e:	b120      	cbz	r0, 8007c1a <SD_WriteInfoLog+0x3e>
 8007c10:	2401      	movs	r4, #1
 8007c12:	4620      	mov	r0, r4
 8007c14:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8007c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c1a:	4d20      	ldr	r5, [pc, #128]	; (8007c9c <SD_WriteInfoLog+0xc0>)
 8007c1c:	4c20      	ldr	r4, [pc, #128]	; (8007ca0 <SD_WriteInfoLog+0xc4>)
 8007c1e:	a98e      	add	r1, sp, #568	; 0x238
 8007c20:	4628      	mov	r0, r5
 8007c22:	f005 fc0b 	bl	800d43c <siprintf>
 8007c26:	f44f 7208 	mov.w	r2, #544	; 0x220
 8007c2a:	f104 0110 	add.w	r1, r4, #16
 8007c2e:	4668      	mov	r0, sp
 8007c30:	978a      	str	r7, [sp, #552]	; 0x228
 8007c32:	9689      	str	r6, [sp, #548]	; 0x224
 8007c34:	9588      	str	r5, [sp, #544]	; 0x220
 8007c36:	f005 f812 	bl	800cc5e <memcpy>
 8007c3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007c3e:	f7ff ff93 	bl	8007b68 <SD_Write>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d1e4      	bne.n	8007c10 <SD_WriteInfoLog+0x34>
 8007c46:	f44f 7208 	mov.w	r2, #544	; 0x220
 8007c4a:	f104 0110 	add.w	r1, r4, #16
 8007c4e:	4668      	mov	r0, sp
 8007c50:	978a      	str	r7, [sp, #552]	; 0x228
 8007c52:	9689      	str	r6, [sp, #548]	; 0x224
 8007c54:	9588      	str	r5, [sp, #544]	; 0x220
 8007c56:	f005 f802 	bl	800cc5e <memcpy>
 8007c5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007c5e:	f7ff fbe9 	bl	8007434 <SD_Verify>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d1d4      	bne.n	8007c10 <SD_WriteInfoLog+0x34>
 8007c66:	4628      	mov	r0, r5
 8007c68:	f7ff fc62 	bl	8007530 <SD_set_timestamp>
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d1ce      	bne.n	8007c10 <SD_WriteInfoLog+0x34>
 8007c72:	4629      	mov	r1, r5
 8007c74:	480b      	ldr	r0, [pc, #44]	; (8007ca4 <SD_WriteInfoLog+0xc8>)
 8007c76:	f005 fb41 	bl	800d2fc <iprintf>
 8007c7a:	f001 fa01 	bl	8009080 <GetErrorFlagsStruct>
 8007c7e:	78c3      	ldrb	r3, [r0, #3]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d103      	bne.n	8007c8c <SD_WriteInfoLog+0xb0>
 8007c84:	a88e      	add	r0, sp, #568	; 0x238
 8007c86:	f7ff fd6b 	bl	8007760 <ArchiveInfoFilesExceptNewest>
 8007c8a:	e7c2      	b.n	8007c12 <SD_WriteInfoLog+0x36>
 8007c8c:	f001 f9f8 	bl	8009080 <GetErrorFlagsStruct>
 8007c90:	7d43      	ldrb	r3, [r0, #21]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d1bd      	bne.n	8007c12 <SD_WriteInfoLog+0x36>
 8007c96:	e7f5      	b.n	8007c84 <SD_WriteInfoLog+0xa8>
 8007c98:	0800f6ee 	.word	0x0800f6ee
 8007c9c:	2000c112 	.word	0x2000c112
 8007ca0:	200003f4 	.word	0x200003f4
 8007ca4:	0800f6c3 	.word	0x0800f6c3

08007ca8 <SDwriteErrorLog>:
 8007ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cac:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	f001 f9ad 	bl	8009010 <GetErrorStruct>
 8007cb6:	f004 fc93 	bl	800c5e0 <ErrorGetSize>
 8007cba:	4680      	mov	r8, r0
 8007cbc:	f001 f9e0 	bl	8009080 <GetErrorFlagsStruct>
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	a88c      	add	r0, sp, #560	; 0x230
 8007cc4:	f004 fecc 	bl	800ca60 <GetTime>
 8007cc8:	f89d 1232 	ldrb.w	r1, [sp, #562]	; 0x232
 8007ccc:	f89d 3231 	ldrb.w	r3, [sp, #561]	; 0x231
 8007cd0:	f89d 2230 	ldrb.w	r2, [sp, #560]	; 0x230
 8007cd4:	9100      	str	r1, [sp, #0]
 8007cd6:	a88e      	add	r0, sp, #568	; 0x238
 8007cd8:	4926      	ldr	r1, [pc, #152]	; (8007d74 <SDwriteErrorLog+0xcc>)
 8007cda:	f005 fbaf 	bl	800d43c <siprintf>
 8007cde:	f7ff fb4b 	bl	8007378 <SD_Init>
 8007ce2:	b128      	cbz	r0, 8007cf0 <SDwriteErrorLog+0x48>
 8007ce4:	2401      	movs	r4, #1
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f50d 7d12 	add.w	sp, sp, #584	; 0x248
 8007cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf0:	4d21      	ldr	r5, [pc, #132]	; (8007d78 <SDwriteErrorLog+0xd0>)
 8007cf2:	4c22      	ldr	r4, [pc, #136]	; (8007d7c <SDwriteErrorLog+0xd4>)
 8007cf4:	a98e      	add	r1, sp, #568	; 0x238
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f005 fba0 	bl	800d43c <siprintf>
 8007cfc:	f44f 7208 	mov.w	r2, #544	; 0x220
 8007d00:	f104 0110 	add.w	r1, r4, #16
 8007d04:	4668      	mov	r0, sp
 8007d06:	f8cd 8228 	str.w	r8, [sp, #552]	; 0x228
 8007d0a:	9789      	str	r7, [sp, #548]	; 0x224
 8007d0c:	9588      	str	r5, [sp, #544]	; 0x220
 8007d0e:	f004 ffa6 	bl	800cc5e <memcpy>
 8007d12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007d16:	f7ff ff27 	bl	8007b68 <SD_Write>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d1e2      	bne.n	8007ce4 <SDwriteErrorLog+0x3c>
 8007d1e:	f44f 7208 	mov.w	r2, #544	; 0x220
 8007d22:	f104 0110 	add.w	r1, r4, #16
 8007d26:	4668      	mov	r0, sp
 8007d28:	f8cd 8228 	str.w	r8, [sp, #552]	; 0x228
 8007d2c:	9789      	str	r7, [sp, #548]	; 0x224
 8007d2e:	9588      	str	r5, [sp, #544]	; 0x220
 8007d30:	f004 ff95 	bl	800cc5e <memcpy>
 8007d34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007d38:	f7ff fb7c 	bl	8007434 <SD_Verify>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d1d1      	bne.n	8007ce4 <SDwriteErrorLog+0x3c>
 8007d40:	4628      	mov	r0, r5
 8007d42:	f7ff fbf5 	bl	8007530 <SD_set_timestamp>
 8007d46:	4604      	mov	r4, r0
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d1cb      	bne.n	8007ce4 <SDwriteErrorLog+0x3c>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	480c      	ldr	r0, [pc, #48]	; (8007d80 <SDwriteErrorLog+0xd8>)
 8007d50:	f005 fad4 	bl	800d2fc <iprintf>
 8007d54:	f001 f95c 	bl	8009010 <GetErrorStruct>
 8007d58:	f8a0 4258 	strh.w	r4, [r0, #600]	; 0x258
 8007d5c:	7933      	ldrb	r3, [r6, #4]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d104      	bne.n	8007d6c <SDwriteErrorLog+0xc4>
 8007d62:	4908      	ldr	r1, [pc, #32]	; (8007d84 <SDwriteErrorLog+0xdc>)
 8007d64:	a88e      	add	r0, sp, #568	; 0x238
 8007d66:	f7ff fc73 	bl	8007650 <ArchivePATHFile>
 8007d6a:	e7bc      	b.n	8007ce6 <SDwriteErrorLog+0x3e>
 8007d6c:	7d73      	ldrb	r3, [r6, #21]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d1b9      	bne.n	8007ce6 <SDwriteErrorLog+0x3e>
 8007d72:	e7f6      	b.n	8007d62 <SDwriteErrorLog+0xba>
 8007d74:	0800f712 	.word	0x0800f712
 8007d78:	2000c112 	.word	0x2000c112
 8007d7c:	200003f4 	.word	0x200003f4
 8007d80:	0800f6c3 	.word	0x0800f6c3
 8007d84:	0800f67b 	.word	0x0800f67b

08007d88 <BSP_SD_Init>:
 8007d88:	b507      	push	{r0, r1, r2, lr}
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007d90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d105      	bne.n	8007da4 <BSP_SD_Init+0x1c>
 8007d98:	4803      	ldr	r0, [pc, #12]	; (8007da8 <BSP_SD_Init+0x20>)
 8007d9a:	f7fc fb54 	bl	8004446 <HAL_SD_Init>
 8007d9e:	b003      	add	sp, #12
 8007da0:	f85d fb04 	ldr.w	pc, [sp], #4
 8007da4:	2002      	movs	r0, #2
 8007da6:	e7fa      	b.n	8007d9e <BSP_SD_Init+0x16>
 8007da8:	20000854 	.word	0x20000854

08007dac <BSP_SD_ReadBlocks>:
 8007dac:	b507      	push	{r0, r1, r2, lr}
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	4613      	mov	r3, r2
 8007db2:	460a      	mov	r2, r1
 8007db4:	4601      	mov	r1, r0
 8007db6:	4804      	ldr	r0, [pc, #16]	; (8007dc8 <BSP_SD_ReadBlocks+0x1c>)
 8007db8:	f7fb ffb6 	bl	8003d28 <HAL_SD_ReadBlocks>
 8007dbc:	3000      	adds	r0, #0
 8007dbe:	bf18      	it	ne
 8007dc0:	2001      	movne	r0, #1
 8007dc2:	b003      	add	sp, #12
 8007dc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dc8:	20000854 	.word	0x20000854

08007dcc <BSP_SD_WriteBlocks>:
 8007dcc:	b507      	push	{r0, r1, r2, lr}
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	460a      	mov	r2, r1
 8007dd4:	4601      	mov	r1, r0
 8007dd6:	4804      	ldr	r0, [pc, #16]	; (8007de8 <BSP_SD_WriteBlocks+0x1c>)
 8007dd8:	f7fc f8ac 	bl	8003f34 <HAL_SD_WriteBlocks>
 8007ddc:	3000      	adds	r0, #0
 8007dde:	bf18      	it	ne
 8007de0:	2001      	movne	r0, #1
 8007de2:	b003      	add	sp, #12
 8007de4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007de8:	20000854 	.word	0x20000854

08007dec <BSP_SD_GetCardState>:
 8007dec:	b508      	push	{r3, lr}
 8007dee:	4803      	ldr	r0, [pc, #12]	; (8007dfc <BSP_SD_GetCardState+0x10>)
 8007df0:	f7fc fb56 	bl	80044a0 <HAL_SD_GetCardState>
 8007df4:	3804      	subs	r0, #4
 8007df6:	bf18      	it	ne
 8007df8:	2001      	movne	r0, #1
 8007dfa:	bd08      	pop	{r3, pc}
 8007dfc:	20000854 	.word	0x20000854

08007e00 <BSP_SD_GetCardInfo>:
 8007e00:	4601      	mov	r1, r0
 8007e02:	4801      	ldr	r0, [pc, #4]	; (8007e08 <BSP_SD_GetCardInfo+0x8>)
 8007e04:	f7fc bb3a 	b.w	800447c <HAL_SD_GetCardInfo>
 8007e08:	20000854 	.word	0x20000854

08007e0c <MX_FATFS_Init>:
 8007e0c:	b508      	push	{r3, lr}
 8007e0e:	4903      	ldr	r1, [pc, #12]	; (8007e1c <MX_FATFS_Init+0x10>)
 8007e10:	4803      	ldr	r0, [pc, #12]	; (8007e20 <MX_FATFS_Init+0x14>)
 8007e12:	f7ff f9a7 	bl	8007164 <FATFS_LinkDriver>
 8007e16:	4b03      	ldr	r3, [pc, #12]	; (8007e24 <MX_FATFS_Init+0x18>)
 8007e18:	7018      	strb	r0, [r3, #0]
 8007e1a:	bd08      	pop	{r3, pc}
 8007e1c:	200003ed 	.word	0x200003ed
 8007e20:	0800f724 	.word	0x0800f724
 8007e24:	200003ec 	.word	0x200003ec

08007e28 <get_fattime>:
 8007e28:	2000      	movs	r0, #0
 8007e2a:	4770      	bx	lr

08007e2c <SD_CheckStatus.isra.0>:
 8007e2c:	b510      	push	{r4, lr}
 8007e2e:	4c06      	ldr	r4, [pc, #24]	; (8007e48 <SD_CheckStatus.isra.0+0x1c>)
 8007e30:	2301      	movs	r3, #1
 8007e32:	7023      	strb	r3, [r4, #0]
 8007e34:	f7ff ffda 	bl	8007dec <BSP_SD_GetCardState>
 8007e38:	4623      	mov	r3, r4
 8007e3a:	b918      	cbnz	r0, 8007e44 <SD_CheckStatus.isra.0+0x18>
 8007e3c:	7822      	ldrb	r2, [r4, #0]
 8007e3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e42:	7022      	strb	r2, [r4, #0]
 8007e44:	7818      	ldrb	r0, [r3, #0]
 8007e46:	bd10      	pop	{r4, pc}
 8007e48:	20000020 	.word	0x20000020

08007e4c <SD_initialize>:
 8007e4c:	b510      	push	{r4, lr}
 8007e4e:	4c05      	ldr	r4, [pc, #20]	; (8007e64 <SD_initialize+0x18>)
 8007e50:	2301      	movs	r3, #1
 8007e52:	7023      	strb	r3, [r4, #0]
 8007e54:	f7ff ff98 	bl	8007d88 <BSP_SD_Init>
 8007e58:	b910      	cbnz	r0, 8007e60 <SD_initialize+0x14>
 8007e5a:	f7ff ffe7 	bl	8007e2c <SD_CheckStatus.isra.0>
 8007e5e:	7020      	strb	r0, [r4, #0]
 8007e60:	7820      	ldrb	r0, [r4, #0]
 8007e62:	bd10      	pop	{r4, pc}
 8007e64:	20000020 	.word	0x20000020

08007e68 <SD_status>:
 8007e68:	f7ff bfe0 	b.w	8007e2c <SD_CheckStatus.isra.0>

08007e6c <SD_read>:
 8007e6c:	b508      	push	{r3, lr}
 8007e6e:	4608      	mov	r0, r1
 8007e70:	4611      	mov	r1, r2
 8007e72:	461a      	mov	r2, r3
 8007e74:	f04f 33ff 	mov.w	r3, #4294967295
 8007e78:	f7ff ff98 	bl	8007dac <BSP_SD_ReadBlocks>
 8007e7c:	b920      	cbnz	r0, 8007e88 <SD_read+0x1c>
 8007e7e:	f7ff ffb5 	bl	8007dec <BSP_SD_GetCardState>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d1fb      	bne.n	8007e7e <SD_read+0x12>
 8007e86:	bd08      	pop	{r3, pc}
 8007e88:	2001      	movs	r0, #1
 8007e8a:	bd08      	pop	{r3, pc}

08007e8c <SD_ioctl>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <SD_ioctl+0x4c>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	07db      	lsls	r3, r3, #31
 8007e94:	b088      	sub	sp, #32
 8007e96:	4614      	mov	r4, r2
 8007e98:	d41b      	bmi.n	8007ed2 <SD_ioctl+0x46>
 8007e9a:	2903      	cmp	r1, #3
 8007e9c:	d803      	bhi.n	8007ea6 <SD_ioctl+0x1a>
 8007e9e:	e8df f001 	tbb	[pc, r1]
 8007ea2:	0510      	.short	0x0510
 8007ea4:	120b      	.short	0x120b
 8007ea6:	2004      	movs	r0, #4
 8007ea8:	b008      	add	sp, #32
 8007eaa:	bd10      	pop	{r4, pc}
 8007eac:	4668      	mov	r0, sp
 8007eae:	f7ff ffa7 	bl	8007e00 <BSP_SD_GetCardInfo>
 8007eb2:	9b06      	ldr	r3, [sp, #24]
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	e004      	b.n	8007ec2 <SD_ioctl+0x36>
 8007eb8:	4668      	mov	r0, sp
 8007eba:	f7ff ffa1 	bl	8007e00 <BSP_SD_GetCardInfo>
 8007ebe:	9b07      	ldr	r3, [sp, #28]
 8007ec0:	8023      	strh	r3, [r4, #0]
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	e7f0      	b.n	8007ea8 <SD_ioctl+0x1c>
 8007ec6:	4668      	mov	r0, sp
 8007ec8:	f7ff ff9a 	bl	8007e00 <BSP_SD_GetCardInfo>
 8007ecc:	9b07      	ldr	r3, [sp, #28]
 8007ece:	0a5b      	lsrs	r3, r3, #9
 8007ed0:	e7f0      	b.n	8007eb4 <SD_ioctl+0x28>
 8007ed2:	2003      	movs	r0, #3
 8007ed4:	e7e8      	b.n	8007ea8 <SD_ioctl+0x1c>
 8007ed6:	bf00      	nop
 8007ed8:	20000020 	.word	0x20000020

08007edc <SD_write>:
 8007edc:	b508      	push	{r3, lr}
 8007ede:	4608      	mov	r0, r1
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee8:	f7ff ff70 	bl	8007dcc <BSP_SD_WriteBlocks>
 8007eec:	b920      	cbnz	r0, 8007ef8 <SD_write+0x1c>
 8007eee:	f7ff ff7d 	bl	8007dec <BSP_SD_GetCardState>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d1fb      	bne.n	8007eee <SD_write+0x12>
 8007ef6:	bd08      	pop	{r3, pc}
 8007ef8:	2001      	movs	r0, #1
 8007efa:	bd08      	pop	{r3, pc}

08007efc <MX_SDMMC1_SD_Init>:
 8007efc:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <MX_SDMMC1_SD_Init+0x18>)
 8007efe:	4a06      	ldr	r2, [pc, #24]	; (8007f18 <MX_SDMMC1_SD_Init+0x1c>)
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	605a      	str	r2, [r3, #4]
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	60da      	str	r2, [r3, #12]
 8007f0a:	611a      	str	r2, [r3, #16]
 8007f0c:	615a      	str	r2, [r3, #20]
 8007f0e:	619a      	str	r2, [r3, #24]
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000854 	.word	0x20000854
 8007f18:	40012800 	.word	0x40012800

08007f1c <HAL_SD_MspInit>:
 8007f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f1e:	6802      	ldr	r2, [r0, #0]
 8007f20:	4b15      	ldr	r3, [pc, #84]	; (8007f78 <HAL_SD_MspInit+0x5c>)
 8007f22:	429a      	cmp	r2, r3
 8007f24:	b087      	sub	sp, #28
 8007f26:	d124      	bne.n	8007f72 <HAL_SD_MspInit+0x56>
 8007f28:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8007f2c:	2702      	movs	r7, #2
 8007f2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007f30:	4812      	ldr	r0, [pc, #72]	; (8007f7c <HAL_SD_MspInit+0x60>)
 8007f32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f36:	661a      	str	r2, [r3, #96]	; 0x60
 8007f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f3a:	9702      	str	r7, [sp, #8]
 8007f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	2600      	movs	r6, #0
 8007f46:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8007f4a:	2503      	movs	r5, #3
 8007f4c:	240c      	movs	r4, #12
 8007f4e:	a901      	add	r1, sp, #4
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	9603      	str	r6, [sp, #12]
 8007f54:	9504      	str	r5, [sp, #16]
 8007f56:	9405      	str	r4, [sp, #20]
 8007f58:	f7f9 ff9c 	bl	8001e94 <HAL_GPIO_Init>
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	eb0d 0103 	add.w	r1, sp, r3
 8007f62:	4807      	ldr	r0, [pc, #28]	; (8007f80 <HAL_SD_MspInit+0x64>)
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	9702      	str	r7, [sp, #8]
 8007f68:	9603      	str	r6, [sp, #12]
 8007f6a:	9504      	str	r5, [sp, #16]
 8007f6c:	9405      	str	r4, [sp, #20]
 8007f6e:	f7f9 ff91 	bl	8001e94 <HAL_GPIO_Init>
 8007f72:	b007      	add	sp, #28
 8007f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f76:	bf00      	nop
 8007f78:	40012800 	.word	0x40012800
 8007f7c:	48000800 	.word	0x48000800
 8007f80:	48000c00 	.word	0x48000c00

08007f84 <SD_DeInitTest>:
 8007f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f86:	4a17      	ldr	r2, [pc, #92]	; (8007fe4 <SD_DeInitTest+0x60>)
 8007f88:	4d17      	ldr	r5, [pc, #92]	; (8007fe8 <SD_DeInitTest+0x64>)
 8007f8a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8007f8c:	b087      	sub	sp, #28
 8007f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f92:	6613      	str	r3, [r2, #96]	; 0x60
 8007f94:	2400      	movs	r4, #0
 8007f96:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8007f9a:	2601      	movs	r6, #1
 8007f9c:	a901      	add	r1, sp, #4
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	9602      	str	r6, [sp, #8]
 8007fa4:	9403      	str	r4, [sp, #12]
 8007fa6:	f7f9 ff75 	bl	8001e94 <HAL_GPIO_Init>
 8007faa:	9602      	str	r6, [sp, #8]
 8007fac:	4e0f      	ldr	r6, [pc, #60]	; (8007fec <SD_DeInitTest+0x68>)
 8007fae:	9403      	str	r4, [sp, #12]
 8007fb0:	2704      	movs	r7, #4
 8007fb2:	eb0d 0107 	add.w	r1, sp, r7
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	9701      	str	r7, [sp, #4]
 8007fba:	f7f9 ff6b 	bl	8001e94 <HAL_GPIO_Init>
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	4639      	mov	r1, r7
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	f7fa f8a6 	bl	8002114 <HAL_GPIO_WritePin>
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007fd0:	f7fa f8a0 	bl	8002114 <HAL_GPIO_WritePin>
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f7fa f89a 	bl	8002114 <HAL_GPIO_WritePin>
 8007fe0:	b007      	add	sp, #28
 8007fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe4:	40021000 	.word	0x40021000
 8007fe8:	48000800 	.word	0x48000800
 8007fec:	48000c00 	.word	0x48000c00

08007ff0 <AS726X_readRegister>:
 8007ff0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007ff2:	ac04      	add	r4, sp, #16
 8007ff4:	4e0a      	ldr	r6, [pc, #40]	; (8008020 <AS726X_readRegister+0x30>)
 8007ff6:	f804 0d04 	strb.w	r0, [r4, #-4]!
 8007ffa:	2501      	movs	r5, #1
 8007ffc:	462b      	mov	r3, r5
 8007ffe:	4622      	mov	r2, r4
 8008000:	9500      	str	r5, [sp, #0]
 8008002:	2192      	movs	r1, #146	; 0x92
 8008004:	4630      	mov	r0, r6
 8008006:	f7fa fa3f 	bl	8002488 <HAL_I2C_Master_Transmit>
 800800a:	9500      	str	r5, [sp, #0]
 800800c:	462b      	mov	r3, r5
 800800e:	4622      	mov	r2, r4
 8008010:	2193      	movs	r1, #147	; 0x93
 8008012:	4630      	mov	r0, r6
 8008014:	f7fa faca 	bl	80025ac <HAL_I2C_Master_Receive>
 8008018:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800801c:	b004      	add	sp, #16
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	2000c4d4 	.word	0x2000c4d4

08008024 <AS726X_writeRegister>:
 8008024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008028:	b086      	sub	sp, #24
 800802a:	4f12      	ldr	r7, [pc, #72]	; (8008074 <AS726X_writeRegister+0x50>)
 800802c:	f88d 0014 	strb.w	r0, [sp, #20]
 8008030:	4605      	mov	r5, r0
 8008032:	460e      	mov	r6, r1
 8008034:	f88d 1015 	strb.w	r1, [sp, #21]
 8008038:	2466      	movs	r4, #102	; 0x66
 800803a:	f04f 0801 	mov.w	r8, #1
 800803e:	f8cd 8000 	str.w	r8, [sp]
 8008042:	2302      	movs	r3, #2
 8008044:	aa05      	add	r2, sp, #20
 8008046:	2192      	movs	r1, #146	; 0x92
 8008048:	4638      	mov	r0, r7
 800804a:	f7fa fa1d 	bl	8002488 <HAL_I2C_Master_Transmit>
 800804e:	b168      	cbz	r0, 800806c <AS726X_writeRegister+0x48>
 8008050:	3c01      	subs	r4, #1
 8008052:	d1f4      	bne.n	800803e <AS726X_writeRegister+0x1a>
 8008054:	f000 ffdc 	bl	8009010 <GetErrorStruct>
 8008058:	9402      	str	r4, [sp, #8]
 800805a:	9003      	str	r0, [sp, #12]
 800805c:	9501      	str	r5, [sp, #4]
 800805e:	9600      	str	r6, [sp, #0]
 8008060:	2313      	movs	r3, #19
 8008062:	2215      	movs	r2, #21
 8008064:	2117      	movs	r1, #23
 8008066:	2014      	movs	r0, #20
 8008068:	f004 f957 	bl	800c31a <ErrorAddLog>
 800806c:	b006      	add	sp, #24
 800806e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008072:	bf00      	nop
 8008074:	2000c4d4 	.word	0x2000c4d4

08008078 <AS726X_virtualReadRegister>:
 8008078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800807a:	4604      	mov	r4, r0
 800807c:	b087      	sub	sp, #28
 800807e:	2000      	movs	r0, #0
 8008080:	f7ff ffb6 	bl	8007ff0 <AS726X_readRegister>
 8008084:	07c1      	lsls	r1, r0, #31
 8008086:	d502      	bpl.n	800808e <AS726X_virtualReadRegister+0x16>
 8008088:	2002      	movs	r0, #2
 800808a:	f7ff ffb1 	bl	8007ff0 <AS726X_readRegister>
 800808e:	2564      	movs	r5, #100	; 0x64
 8008090:	2000      	movs	r0, #0
 8008092:	f7ff ffad 	bl	8007ff0 <AS726X_readRegister>
 8008096:	0782      	lsls	r2, r0, #30
 8008098:	d51f      	bpl.n	80080da <AS726X_virtualReadRegister+0x62>
 800809a:	2001      	movs	r0, #1
 800809c:	f7f8 fefa 	bl	8000e94 <HAL_Delay>
 80080a0:	3d01      	subs	r5, #1
 80080a2:	d1f5      	bne.n	8008090 <AS726X_virtualReadRegister+0x18>
 80080a4:	f000 ffbc 	bl	8009020 <GetTempInfoStruct>
 80080a8:	2701      	movs	r7, #1
 80080aa:	2314      	movs	r3, #20
 80080ac:	2613      	movs	r6, #19
 80080ae:	461a      	mov	r2, r3
 80080b0:	4619      	mov	r1, r3
 80080b2:	9004      	str	r0, [sp, #16]
 80080b4:	9503      	str	r5, [sp, #12]
 80080b6:	4618      	mov	r0, r3
 80080b8:	9702      	str	r7, [sp, #8]
 80080ba:	9401      	str	r4, [sp, #4]
 80080bc:	9600      	str	r6, [sp, #0]
 80080be:	f004 f97c 	bl	800c3ba <InfoLogAdd>
 80080c2:	f000 ffa5 	bl	8009010 <GetErrorStruct>
 80080c6:	2214      	movs	r2, #20
 80080c8:	9003      	str	r0, [sp, #12]
 80080ca:	9502      	str	r5, [sp, #8]
 80080cc:	e88d 0090 	stmia.w	sp, {r4, r7}
 80080d0:	4633      	mov	r3, r6
 80080d2:	4611      	mov	r1, r2
 80080d4:	4610      	mov	r0, r2
 80080d6:	f004 f920 	bl	800c31a <ErrorAddLog>
 80080da:	4621      	mov	r1, r4
 80080dc:	2001      	movs	r0, #1
 80080de:	f7ff ffa1 	bl	8008024 <AS726X_writeRegister>
 80080e2:	2564      	movs	r5, #100	; 0x64
 80080e4:	2000      	movs	r0, #0
 80080e6:	f7ff ff83 	bl	8007ff0 <AS726X_readRegister>
 80080ea:	07c3      	lsls	r3, r0, #31
 80080ec:	d41f      	bmi.n	800812e <AS726X_virtualReadRegister+0xb6>
 80080ee:	200a      	movs	r0, #10
 80080f0:	f001 fd2a 	bl	8009b48 <SleepForApproxMsSpectra>
 80080f4:	3d01      	subs	r5, #1
 80080f6:	d1f5      	bne.n	80080e4 <AS726X_virtualReadRegister+0x6c>
 80080f8:	f000 ff92 	bl	8009020 <GetTempInfoStruct>
 80080fc:	2702      	movs	r7, #2
 80080fe:	2314      	movs	r3, #20
 8008100:	2613      	movs	r6, #19
 8008102:	461a      	mov	r2, r3
 8008104:	4619      	mov	r1, r3
 8008106:	9004      	str	r0, [sp, #16]
 8008108:	9503      	str	r5, [sp, #12]
 800810a:	4618      	mov	r0, r3
 800810c:	9702      	str	r7, [sp, #8]
 800810e:	9401      	str	r4, [sp, #4]
 8008110:	9600      	str	r6, [sp, #0]
 8008112:	f004 f952 	bl	800c3ba <InfoLogAdd>
 8008116:	f000 ff7b 	bl	8009010 <GetErrorStruct>
 800811a:	2214      	movs	r2, #20
 800811c:	9003      	str	r0, [sp, #12]
 800811e:	9502      	str	r5, [sp, #8]
 8008120:	e88d 0090 	stmia.w	sp, {r4, r7}
 8008124:	4633      	mov	r3, r6
 8008126:	4611      	mov	r1, r2
 8008128:	4610      	mov	r0, r2
 800812a:	f004 f8f6 	bl	800c31a <ErrorAddLog>
 800812e:	2002      	movs	r0, #2
 8008130:	b007      	add	sp, #28
 8008132:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008136:	f7ff bf5b 	b.w	8007ff0 <AS726X_readRegister>

0800813a <AS726X_Get_HW_No>:
 800813a:	2001      	movs	r0, #1
 800813c:	f7ff bf9c 	b.w	8008078 <AS726X_virtualReadRegister>

08008140 <AS726X_virtualWriteRegister>:
 8008140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008142:	4605      	mov	r5, r0
 8008144:	460e      	mov	r6, r1
 8008146:	2464      	movs	r4, #100	; 0x64
 8008148:	2000      	movs	r0, #0
 800814a:	f7ff ff51 	bl	8007ff0 <AS726X_readRegister>
 800814e:	0782      	lsls	r2, r0, #30
 8008150:	d511      	bpl.n	8008176 <AS726X_virtualWriteRegister+0x36>
 8008152:	2005      	movs	r0, #5
 8008154:	f7f8 fe9e 	bl	8000e94 <HAL_Delay>
 8008158:	3c01      	subs	r4, #1
 800815a:	d1f5      	bne.n	8008148 <AS726X_virtualWriteRegister+0x8>
 800815c:	f000 ff58 	bl	8009010 <GetErrorStruct>
 8008160:	2301      	movs	r3, #1
 8008162:	9003      	str	r0, [sp, #12]
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	9402      	str	r4, [sp, #8]
 8008168:	9500      	str	r5, [sp, #0]
 800816a:	2313      	movs	r3, #19
 800816c:	2215      	movs	r2, #21
 800816e:	2116      	movs	r1, #22
 8008170:	2014      	movs	r0, #20
 8008172:	f004 f8d2 	bl	800c31a <ErrorAddLog>
 8008176:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 800817a:	2001      	movs	r0, #1
 800817c:	f7ff ff52 	bl	8008024 <AS726X_writeRegister>
 8008180:	2464      	movs	r4, #100	; 0x64
 8008182:	2000      	movs	r0, #0
 8008184:	f7ff ff34 	bl	8007ff0 <AS726X_readRegister>
 8008188:	0783      	lsls	r3, r0, #30
 800818a:	d511      	bpl.n	80081b0 <AS726X_virtualWriteRegister+0x70>
 800818c:	2005      	movs	r0, #5
 800818e:	f7f8 fe81 	bl	8000e94 <HAL_Delay>
 8008192:	3c01      	subs	r4, #1
 8008194:	d1f5      	bne.n	8008182 <AS726X_virtualWriteRegister+0x42>
 8008196:	f000 ff3b 	bl	8009010 <GetErrorStruct>
 800819a:	2302      	movs	r3, #2
 800819c:	9003      	str	r0, [sp, #12]
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	9402      	str	r4, [sp, #8]
 80081a2:	9500      	str	r5, [sp, #0]
 80081a4:	2313      	movs	r3, #19
 80081a6:	2215      	movs	r2, #21
 80081a8:	2116      	movs	r1, #22
 80081aa:	2014      	movs	r0, #20
 80081ac:	f004 f8b5 	bl	800c31a <ErrorAddLog>
 80081b0:	4631      	mov	r1, r6
 80081b2:	2001      	movs	r0, #1
 80081b4:	b004      	add	sp, #16
 80081b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081ba:	f7ff bf33 	b.w	8008024 <AS726X_writeRegister>

080081be <AS726X_setMeasurementMode>:
 80081be:	b510      	push	{r4, lr}
 80081c0:	4604      	mov	r4, r0
 80081c2:	2004      	movs	r0, #4
 80081c4:	f7ff ff58 	bl	8008078 <AS726X_virtualReadRegister>
 80081c8:	2c03      	cmp	r4, #3
 80081ca:	bf28      	it	cs
 80081cc:	2403      	movcs	r4, #3
 80081ce:	f020 010c 	bic.w	r1, r0, #12
 80081d2:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
 80081d6:	b2c9      	uxtb	r1, r1
 80081d8:	2004      	movs	r0, #4
 80081da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081de:	f7ff bfaf 	b.w	8008140 <AS726X_virtualWriteRegister>

080081e2 <AS726X_setGain>:
 80081e2:	b510      	push	{r4, lr}
 80081e4:	4604      	mov	r4, r0
 80081e6:	2004      	movs	r0, #4
 80081e8:	f7ff ff46 	bl	8008078 <AS726X_virtualReadRegister>
 80081ec:	2c03      	cmp	r4, #3
 80081ee:	bf28      	it	cs
 80081f0:	2403      	movcs	r4, #3
 80081f2:	f020 0130 	bic.w	r1, r0, #48	; 0x30
 80081f6:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 80081fa:	b2c9      	uxtb	r1, r1
 80081fc:	2004      	movs	r0, #4
 80081fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008202:	f7ff bf9d 	b.w	8008140 <AS726X_virtualWriteRegister>

08008206 <AS726X_setIntegrationTime>:
 8008206:	4601      	mov	r1, r0
 8008208:	2005      	movs	r0, #5
 800820a:	f7ff bf99 	b.w	8008140 <AS726X_virtualWriteRegister>

0800820e <AS726X_dataAvailable>:
 800820e:	b508      	push	{r3, lr}
 8008210:	2004      	movs	r0, #4
 8008212:	f7ff ff31 	bl	8008078 <AS726X_virtualReadRegister>
 8008216:	f000 0002 	and.w	r0, r0, #2
 800821a:	bd08      	pop	{r3, pc}

0800821c <AS726X_clearDataAvailable>:
 800821c:	b508      	push	{r3, lr}
 800821e:	2004      	movs	r0, #4
 8008220:	f7ff ff2a 	bl	8008078 <AS726X_virtualReadRegister>
 8008224:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8008228:	2004      	movs	r0, #4
 800822a:	f7ff ff89 	bl	8008140 <AS726X_virtualWriteRegister>
 800822e:	2001      	movs	r0, #1
 8008230:	bd08      	pop	{r3, pc}

08008232 <AS726X_getCalibratedValue>:
 8008232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008234:	4605      	mov	r5, r0
 8008236:	f7ff ff1f 	bl	8008078 <AS726X_virtualReadRegister>
 800823a:	4607      	mov	r7, r0
 800823c:	1c68      	adds	r0, r5, #1
 800823e:	b2c0      	uxtb	r0, r0
 8008240:	f7ff ff1a 	bl	8008078 <AS726X_virtualReadRegister>
 8008244:	4604      	mov	r4, r0
 8008246:	1ca8      	adds	r0, r5, #2
 8008248:	b2c0      	uxtb	r0, r0
 800824a:	f7ff ff15 	bl	8008078 <AS726X_virtualReadRegister>
 800824e:	4606      	mov	r6, r0
 8008250:	1ce8      	adds	r0, r5, #3
 8008252:	b2c0      	uxtb	r0, r0
 8008254:	f7ff ff10 	bl	8008078 <AS726X_virtualReadRegister>
 8008258:	0424      	lsls	r4, r4, #16
 800825a:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 800825e:	4320      	orrs	r0, r4
 8008260:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8008264:	ee00 0a10 	vmov	s0, r0
 8008268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800826a <AS726X_getCalibratedViolet>:
 800826a:	2014      	movs	r0, #20
 800826c:	f7ff bfe1 	b.w	8008232 <AS726X_getCalibratedValue>

08008270 <AS726X_getCalibratedBlue>:
 8008270:	2018      	movs	r0, #24
 8008272:	f7ff bfde 	b.w	8008232 <AS726X_getCalibratedValue>

08008276 <AS726X_getCalibratedGreen>:
 8008276:	201c      	movs	r0, #28
 8008278:	f7ff bfdb 	b.w	8008232 <AS726X_getCalibratedValue>

0800827c <AS726X_getCalibratedYellow>:
 800827c:	2020      	movs	r0, #32
 800827e:	f7ff bfd8 	b.w	8008232 <AS726X_getCalibratedValue>

08008282 <AS726X_getCalibratedOrange>:
 8008282:	2024      	movs	r0, #36	; 0x24
 8008284:	f7ff bfd5 	b.w	8008232 <AS726X_getCalibratedValue>

08008288 <AS726X_getCalibratedRed>:
 8008288:	2028      	movs	r0, #40	; 0x28
 800828a:	f7ff bfd2 	b.w	8008232 <AS726X_getCalibratedValue>

0800828e <AS726X_getSpectrum>:
 800828e:	b510      	push	{r4, lr}
 8008290:	4604      	mov	r4, r0
 8008292:	f7ff ffea 	bl	800826a <AS726X_getCalibratedViolet>
 8008296:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800829a:	ee17 3a90 	vmov	r3, s15
 800829e:	8023      	strh	r3, [r4, #0]
 80082a0:	f7ff ffe6 	bl	8008270 <AS726X_getCalibratedBlue>
 80082a4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80082a8:	ee17 3a90 	vmov	r3, s15
 80082ac:	8063      	strh	r3, [r4, #2]
 80082ae:	f7ff ffe2 	bl	8008276 <AS726X_getCalibratedGreen>
 80082b2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80082b6:	ee17 3a90 	vmov	r3, s15
 80082ba:	80a3      	strh	r3, [r4, #4]
 80082bc:	f7ff ffde 	bl	800827c <AS726X_getCalibratedYellow>
 80082c0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80082c4:	ee17 3a90 	vmov	r3, s15
 80082c8:	80e3      	strh	r3, [r4, #6]
 80082ca:	f7ff ffda 	bl	8008282 <AS726X_getCalibratedOrange>
 80082ce:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80082d2:	ee17 3a90 	vmov	r3, s15
 80082d6:	8123      	strh	r3, [r4, #8]
 80082d8:	f7ff ffd6 	bl	8008288 <AS726X_getCalibratedRed>
 80082dc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80082e0:	ee17 3a90 	vmov	r3, s15
 80082e4:	8163      	strh	r3, [r4, #10]
 80082e6:	bd10      	pop	{r4, pc}

080082e8 <AS726X_disableIndicator>:
 80082e8:	b508      	push	{r3, lr}
 80082ea:	2007      	movs	r0, #7
 80082ec:	f7ff fec4 	bl	8008078 <AS726X_virtualReadRegister>
 80082f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80082f4:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 80082f8:	2007      	movs	r0, #7
 80082fa:	f7ff bf21 	b.w	8008140 <AS726X_virtualWriteRegister>

080082fe <AS726X_disableBulb>:
 80082fe:	b508      	push	{r3, lr}
 8008300:	2007      	movs	r0, #7
 8008302:	f7ff feb9 	bl	8008078 <AS726X_virtualReadRegister>
 8008306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800830a:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
 800830e:	2007      	movs	r0, #7
 8008310:	f7ff bf16 	b.w	8008140 <AS726X_virtualWriteRegister>

08008314 <AS726X_setBulbCurrent>:
 8008314:	b510      	push	{r4, lr}
 8008316:	4604      	mov	r4, r0
 8008318:	2007      	movs	r0, #7
 800831a:	f7ff fead 	bl	8008078 <AS726X_virtualReadRegister>
 800831e:	2c03      	cmp	r4, #3
 8008320:	bf28      	it	cs
 8008322:	2403      	movcs	r4, #3
 8008324:	f020 0130 	bic.w	r1, r0, #48	; 0x30
 8008328:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 800832c:	b2c9      	uxtb	r1, r1
 800832e:	2007      	movs	r0, #7
 8008330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008334:	f7ff bf04 	b.w	8008140 <AS726X_virtualWriteRegister>

08008338 <AS726X_begin>:
 8008338:	b530      	push	{r4, r5, lr}
 800833a:	b085      	sub	sp, #20
 800833c:	4605      	mov	r5, r0
 800833e:	460c      	mov	r4, r1
 8008340:	f7ff fefb 	bl	800813a <AS726X_Get_HW_No>
 8008344:	283e      	cmp	r0, #62	; 0x3e
 8008346:	d013      	beq.n	8008370 <AS726X_begin+0x38>
 8008348:	f7ff fef7 	bl	800813a <AS726X_Get_HW_No>
 800834c:	283f      	cmp	r0, #63	; 0x3f
 800834e:	d00f      	beq.n	8008370 <AS726X_begin+0x38>
 8008350:	f000 fe5e 	bl	8009010 <GetErrorStruct>
 8008354:	2300      	movs	r3, #0
 8008356:	9003      	str	r0, [sp, #12]
 8008358:	9302      	str	r3, [sp, #8]
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	2014      	movs	r0, #20
 8008360:	2311      	movs	r3, #17
 8008362:	2213      	movs	r2, #19
 8008364:	2127      	movs	r1, #39	; 0x27
 8008366:	f003 ffd8 	bl	800c31a <ErrorAddLog>
 800836a:	2001      	movs	r0, #1
 800836c:	b005      	add	sp, #20
 800836e:	bd30      	pop	{r4, r5, pc}
 8008370:	2000      	movs	r0, #0
 8008372:	f7ff ffcf 	bl	8008314 <AS726X_setBulbCurrent>
 8008376:	f7ff ffc2 	bl	80082fe <AS726X_disableBulb>
 800837a:	f7ff ffb5 	bl	80082e8 <AS726X_disableIndicator>
 800837e:	20d2      	movs	r0, #210	; 0xd2
 8008380:	f7ff ff41 	bl	8008206 <AS726X_setIntegrationTime>
 8008384:	4628      	mov	r0, r5
 8008386:	f7ff ff2c 	bl	80081e2 <AS726X_setGain>
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff ff17 	bl	80081be <AS726X_setMeasurementMode>
 8008390:	2000      	movs	r0, #0
 8008392:	e7eb      	b.n	800836c <AS726X_begin+0x34>

08008394 <AS726X_takeMeasurements>:
 8008394:	b530      	push	{r4, r5, lr}
 8008396:	460c      	mov	r4, r1
 8008398:	b087      	sub	sp, #28
 800839a:	2103      	movs	r1, #3
 800839c:	f7ff ffcc 	bl	8008338 <AS726X_begin>
 80083a0:	b1e0      	cbz	r0, 80083dc <AS726X_takeMeasurements+0x48>
 80083a2:	f000 fe3d 	bl	8009020 <GetTempInfoStruct>
 80083a6:	2400      	movs	r4, #0
 80083a8:	2114      	movs	r1, #20
 80083aa:	2511      	movs	r5, #17
 80083ac:	9004      	str	r0, [sp, #16]
 80083ae:	2320      	movs	r3, #32
 80083b0:	2224      	movs	r2, #36	; 0x24
 80083b2:	4608      	mov	r0, r1
 80083b4:	9403      	str	r4, [sp, #12]
 80083b6:	9402      	str	r4, [sp, #8]
 80083b8:	9401      	str	r4, [sp, #4]
 80083ba:	9500      	str	r5, [sp, #0]
 80083bc:	f003 fffd 	bl	800c3ba <InfoLogAdd>
 80083c0:	f000 fe26 	bl	8009010 <GetErrorStruct>
 80083c4:	9402      	str	r4, [sp, #8]
 80083c6:	9003      	str	r0, [sp, #12]
 80083c8:	9401      	str	r4, [sp, #4]
 80083ca:	9400      	str	r4, [sp, #0]
 80083cc:	462b      	mov	r3, r5
 80083ce:	2220      	movs	r2, #32
 80083d0:	2124      	movs	r1, #36	; 0x24
 80083d2:	2014      	movs	r0, #20
 80083d4:	f003 ffa1 	bl	800c31a <ErrorAddLog>
 80083d8:	b007      	add	sp, #28
 80083da:	bd30      	pop	{r4, r5, pc}
 80083dc:	f7ff ff1e 	bl	800821c <AS726X_clearDataAvailable>
 80083e0:	f7ff ff15 	bl	800820e <AS726X_dataAvailable>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d0fb      	beq.n	80083e0 <AS726X_takeMeasurements+0x4c>
 80083e8:	4620      	mov	r0, r4
 80083ea:	b007      	add	sp, #28
 80083ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083f0:	f7ff bf4d 	b.w	800828e <AS726X_getSpectrum>

080083f4 <HDC1080_writeRegister>:
 80083f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083f8:	4e13      	ldr	r6, [pc, #76]	; (8008448 <HDC1080_writeRegister+0x54>)
 80083fa:	b085      	sub	sp, #20
 80083fc:	4605      	mov	r5, r0
 80083fe:	4691      	mov	r9, r2
 8008400:	2466      	movs	r4, #102	; 0x66
 8008402:	460f      	mov	r7, r1
 8008404:	f04f 0801 	mov.w	r8, #1
 8008408:	f8cd 8000 	str.w	r8, [sp]
 800840c:	463b      	mov	r3, r7
 800840e:	462a      	mov	r2, r5
 8008410:	2180      	movs	r1, #128	; 0x80
 8008412:	4630      	mov	r0, r6
 8008414:	f7fa f838 	bl	8002488 <HAL_I2C_Master_Transmit>
 8008418:	b190      	cbz	r0, 8008440 <HDC1080_writeRegister+0x4c>
 800841a:	3c01      	subs	r4, #1
 800841c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8008420:	d1f2      	bne.n	8008408 <HDC1080_writeRegister+0x14>
 8008422:	782e      	ldrb	r6, [r5, #0]
 8008424:	786d      	ldrb	r5, [r5, #1]
 8008426:	f000 fdf3 	bl	8009010 <GetErrorStruct>
 800842a:	9402      	str	r4, [sp, #8]
 800842c:	9003      	str	r0, [sp, #12]
 800842e:	9501      	str	r5, [sp, #4]
 8008430:	2018      	movs	r0, #24
 8008432:	9600      	str	r6, [sp, #0]
 8008434:	2313      	movs	r3, #19
 8008436:	464a      	mov	r2, r9
 8008438:	2117      	movs	r1, #23
 800843a:	f003 ff6e 	bl	800c31a <ErrorAddLog>
 800843e:	2001      	movs	r0, #1
 8008440:	b005      	add	sp, #20
 8008442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008446:	bf00      	nop
 8008448:	2000c520 	.word	0x2000c520

0800844c <HDC1080_readRegister>:
 800844c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008450:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80084dc <HDC1080_readRegister+0x90>
 8008454:	b085      	sub	sp, #20
 8008456:	4605      	mov	r5, r0
 8008458:	460e      	mov	r6, r1
 800845a:	4617      	mov	r7, r2
 800845c:	2466      	movs	r4, #102	; 0x66
 800845e:	f04f 0801 	mov.w	r8, #1
 8008462:	f8cd 8000 	str.w	r8, [sp]
 8008466:	2301      	movs	r3, #1
 8008468:	462a      	mov	r2, r5
 800846a:	2180      	movs	r1, #128	; 0x80
 800846c:	4648      	mov	r0, r9
 800846e:	f7fa f80b 	bl	8002488 <HAL_I2C_Master_Transmit>
 8008472:	b9e8      	cbnz	r0, 80084b0 <HDC1080_readRegister+0x64>
 8008474:	2014      	movs	r0, #20
 8008476:	f7f8 fd0d 	bl	8000e94 <HAL_Delay>
 800847a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80084dc <HDC1080_readRegister+0x90>
 800847e:	2466      	movs	r4, #102	; 0x66
 8008480:	b2b6      	uxth	r6, r6
 8008482:	f04f 0901 	mov.w	r9, #1
 8008486:	f8cd 9000 	str.w	r9, [sp]
 800848a:	4633      	mov	r3, r6
 800848c:	462a      	mov	r2, r5
 800848e:	2181      	movs	r1, #129	; 0x81
 8008490:	4640      	mov	r0, r8
 8008492:	f7fa f88b 	bl	80025ac <HAL_I2C_Master_Receive>
 8008496:	b1f0      	cbz	r0, 80084d6 <HDC1080_readRegister+0x8a>
 8008498:	3c01      	subs	r4, #1
 800849a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800849e:	d1f2      	bne.n	8008486 <HDC1080_readRegister+0x3a>
 80084a0:	782d      	ldrb	r5, [r5, #0]
 80084a2:	f000 fdb5 	bl	8009010 <GetErrorStruct>
 80084a6:	2302      	movs	r3, #2
 80084a8:	9003      	str	r0, [sp, #12]
 80084aa:	9402      	str	r4, [sp, #8]
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	e00a      	b.n	80084c6 <HDC1080_readRegister+0x7a>
 80084b0:	3c01      	subs	r4, #1
 80084b2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80084b6:	d1d4      	bne.n	8008462 <HDC1080_readRegister+0x16>
 80084b8:	782d      	ldrb	r5, [r5, #0]
 80084ba:	f000 fda9 	bl	8009010 <GetErrorStruct>
 80084be:	9402      	str	r4, [sp, #8]
 80084c0:	9003      	str	r0, [sp, #12]
 80084c2:	f8cd 8004 	str.w	r8, [sp, #4]
 80084c6:	2018      	movs	r0, #24
 80084c8:	9500      	str	r5, [sp, #0]
 80084ca:	2313      	movs	r3, #19
 80084cc:	463a      	mov	r2, r7
 80084ce:	2115      	movs	r1, #21
 80084d0:	f003 ff23 	bl	800c31a <ErrorAddLog>
 80084d4:	2001      	movs	r0, #1
 80084d6:	b005      	add	sp, #20
 80084d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084dc:	2000c520 	.word	0x2000c520

080084e0 <HDC1080_Get_Device_ID>:
 80084e0:	b507      	push	{r0, r1, r2, lr}
 80084e2:	2300      	movs	r3, #0
 80084e4:	a802      	add	r0, sp, #8
 80084e6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80084ea:	23ff      	movs	r3, #255	; 0xff
 80084ec:	f800 3d04 	strb.w	r3, [r0, #-4]!
 80084f0:	2213      	movs	r2, #19
 80084f2:	2102      	movs	r1, #2
 80084f4:	f7ff ffaa 	bl	800844c <HDC1080_readRegister>
 80084f8:	b940      	cbnz	r0, 800850c <HDC1080_Get_Device_ID+0x2c>
 80084fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80084fe:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8008502:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008506:	b003      	add	sp, #12
 8008508:	f85d fb04 	ldr.w	pc, [sp], #4
 800850c:	f64d 60ad 	movw	r0, #57005	; 0xdead
 8008510:	e7f9      	b.n	8008506 <HDC1080_Get_Device_ID+0x26>

08008512 <HDC1080_Init>:
 8008512:	b570      	push	{r4, r5, r6, lr}
 8008514:	b088      	sub	sp, #32
 8008516:	2400      	movs	r4, #0
 8008518:	2602      	movs	r6, #2
 800851a:	9407      	str	r4, [sp, #28]
 800851c:	f88d 601c 	strb.w	r6, [sp, #28]
 8008520:	f7ff ffde 	bl	80084e0 <HDC1080_Get_Device_ID>
 8008524:	f241 0350 	movw	r3, #4176	; 0x1050
 8008528:	4298      	cmp	r0, r3
 800852a:	d01b      	beq.n	8008564 <HDC1080_Init+0x52>
 800852c:	f000 fd70 	bl	8009010 <GetErrorStruct>
 8008530:	2311      	movs	r3, #17
 8008532:	9003      	str	r0, [sp, #12]
 8008534:	2213      	movs	r2, #19
 8008536:	2127      	movs	r1, #39	; 0x27
 8008538:	2018      	movs	r0, #24
 800853a:	9402      	str	r4, [sp, #8]
 800853c:	9401      	str	r4, [sp, #4]
 800853e:	9400      	str	r4, [sp, #0]
 8008540:	f003 feeb 	bl	800c31a <ErrorAddLog>
 8008544:	f000 fd6c 	bl	8009020 <GetTempInfoStruct>
 8008548:	2311      	movs	r3, #17
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	9004      	str	r0, [sp, #16]
 800854e:	9403      	str	r4, [sp, #12]
 8008550:	9402      	str	r4, [sp, #8]
 8008552:	9401      	str	r4, [sp, #4]
 8008554:	2313      	movs	r3, #19
 8008556:	2227      	movs	r2, #39	; 0x27
 8008558:	2118      	movs	r1, #24
 800855a:	2015      	movs	r0, #21
 800855c:	f003 ff2d 	bl	800c3ba <InfoLogAdd>
 8008560:	b008      	add	sp, #32
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	2217      	movs	r2, #23
 8008566:	4631      	mov	r1, r6
 8008568:	a807      	add	r0, sp, #28
 800856a:	f7ff ff6f 	bl	800844c <HDC1080_readRegister>
 800856e:	4605      	mov	r5, r0
 8008570:	b1a8      	cbz	r0, 800859e <HDC1080_Init+0x8c>
 8008572:	f000 fd4d 	bl	8009010 <GetErrorStruct>
 8008576:	2311      	movs	r3, #17
 8008578:	9003      	str	r0, [sp, #12]
 800857a:	2214      	movs	r2, #20
 800857c:	2127      	movs	r1, #39	; 0x27
 800857e:	2018      	movs	r0, #24
 8008580:	9402      	str	r4, [sp, #8]
 8008582:	9401      	str	r4, [sp, #4]
 8008584:	9400      	str	r4, [sp, #0]
 8008586:	f003 fec8 	bl	800c31a <ErrorAddLog>
 800858a:	f000 fd49 	bl	8009020 <GetTempInfoStruct>
 800858e:	2311      	movs	r3, #17
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	9004      	str	r0, [sp, #16]
 8008594:	9403      	str	r4, [sp, #12]
 8008596:	9402      	str	r4, [sp, #8]
 8008598:	9401      	str	r4, [sp, #4]
 800859a:	2314      	movs	r3, #20
 800859c:	e7db      	b.n	8008556 <HDC1080_Init+0x44>
 800859e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80085a2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80085a6:	f88d 601c 	strb.w	r6, [sp, #28]
 80085aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80085ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085b2:	0a1a      	lsrs	r2, r3, #8
 80085b4:	f88d 201d 	strb.w	r2, [sp, #29]
 80085b8:	2103      	movs	r1, #3
 80085ba:	2217      	movs	r2, #23
 80085bc:	a807      	add	r0, sp, #28
 80085be:	f88d 301e 	strb.w	r3, [sp, #30]
 80085c2:	f7ff ff17 	bl	80083f4 <HDC1080_writeRegister>
 80085c6:	b1a8      	cbz	r0, 80085f4 <HDC1080_Init+0xe2>
 80085c8:	f000 fd22 	bl	8009010 <GetErrorStruct>
 80085cc:	2311      	movs	r3, #17
 80085ce:	9003      	str	r0, [sp, #12]
 80085d0:	2215      	movs	r2, #21
 80085d2:	2127      	movs	r1, #39	; 0x27
 80085d4:	2018      	movs	r0, #24
 80085d6:	9502      	str	r5, [sp, #8]
 80085d8:	9501      	str	r5, [sp, #4]
 80085da:	9500      	str	r5, [sp, #0]
 80085dc:	f003 fe9d 	bl	800c31a <ErrorAddLog>
 80085e0:	f000 fd1e 	bl	8009020 <GetTempInfoStruct>
 80085e4:	2311      	movs	r3, #17
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	9004      	str	r0, [sp, #16]
 80085ea:	9503      	str	r5, [sp, #12]
 80085ec:	9502      	str	r5, [sp, #8]
 80085ee:	9501      	str	r5, [sp, #4]
 80085f0:	2315      	movs	r3, #21
 80085f2:	e7b0      	b.n	8008556 <HDC1080_Init+0x44>
 80085f4:	2217      	movs	r2, #23
 80085f6:	4631      	mov	r1, r6
 80085f8:	a807      	add	r0, sp, #28
 80085fa:	f88d 601c 	strb.w	r6, [sp, #28]
 80085fe:	f7ff ff25 	bl	800844c <HDC1080_readRegister>
 8008602:	e7ad      	b.n	8008560 <HDC1080_Init+0x4e>

08008604 <HDC1080_Get_Humidity_raw>:
 8008604:	b510      	push	{r4, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	a808      	add	r0, sp, #32
 800860a:	2400      	movs	r4, #0
 800860c:	2301      	movs	r3, #1
 800860e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8008612:	221f      	movs	r2, #31
 8008614:	f800 3d04 	strb.w	r3, [r0, #-4]!
 8008618:	2102      	movs	r1, #2
 800861a:	f7ff ff17 	bl	800844c <HDC1080_readRegister>
 800861e:	b938      	cbnz	r0, 8008630 <HDC1080_Get_Humidity_raw+0x2c>
 8008620:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8008624:	f89d 001d 	ldrb.w	r0, [sp, #29]
 8008628:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800862c:	b008      	add	sp, #32
 800862e:	bd10      	pop	{r4, pc}
 8008630:	f000 fcf6 	bl	8009020 <GetTempInfoStruct>
 8008634:	2311      	movs	r3, #17
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2314      	movs	r3, #20
 800863a:	9004      	str	r0, [sp, #16]
 800863c:	9403      	str	r4, [sp, #12]
 800863e:	4618      	mov	r0, r3
 8008640:	9402      	str	r4, [sp, #8]
 8008642:	9401      	str	r4, [sp, #4]
 8008644:	2239      	movs	r2, #57	; 0x39
 8008646:	2118      	movs	r1, #24
 8008648:	f003 feb7 	bl	800c3ba <InfoLogAdd>
 800864c:	f64d 60ad 	movw	r0, #57005	; 0xdead
 8008650:	e7ec      	b.n	800862c <HDC1080_Get_Humidity_raw+0x28>
	...

08008654 <HDC1080_Get_Humidity>:
 8008654:	b507      	push	{r0, r1, r2, lr}
 8008656:	f7ff ffd5 	bl	8008604 <HDC1080_Get_Humidity_raw>
 800865a:	ee07 0a90 	vmov	s15, r0
 800865e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008662:	ee17 0a90 	vmov	r0, s15
 8008666:	f7f7 ff87 	bl	8000578 <__aeabi_f2d>
 800866a:	2200      	movs	r2, #0
 800866c:	4b13      	ldr	r3, [pc, #76]	; (80086bc <HDC1080_Get_Humidity+0x68>)
 800866e:	f7f7 ffdb 	bl	8000628 <__aeabi_dmul>
 8008672:	2200      	movs	r2, #0
 8008674:	4b12      	ldr	r3, [pc, #72]	; (80086c0 <HDC1080_Get_Humidity+0x6c>)
 8008676:	f7f7 ffd7 	bl	8000628 <__aeabi_dmul>
 800867a:	f7f8 fa07 	bl	8000a8c <__aeabi_d2f>
 800867e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80086c4 <HDC1080_Get_Humidity+0x70>
 8008682:	ee07 0a90 	vmov	s15, r0
 8008686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800868a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800868e:	dc11      	bgt.n	80086b4 <HDC1080_Get_Humidity+0x60>
 8008690:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008694:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80086c8 <HDC1080_Get_Humidity+0x74>
 8008698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869c:	bf48      	it	mi
 800869e:	eef0 7a47 	vmovmi.f32	s15, s14
 80086a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a6:	edcd 7a01 	vstr	s15, [sp, #4]
 80086aa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80086ae:	b003      	add	sp, #12
 80086b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80086b4:	eef0 7a47 	vmov.f32	s15, s14
 80086b8:	e7f3      	b.n	80086a2 <HDC1080_Get_Humidity+0x4e>
 80086ba:	bf00      	nop
 80086bc:	40590000 	.word	0x40590000
 80086c0:	3ef00000 	.word	0x3ef00000
 80086c4:	42c80000 	.word	0x42c80000
 80086c8:	00000000 	.word	0x00000000

080086cc <MultiSensor_takeMeasurements>:
 80086cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ce:	4a13      	ldr	r2, [pc, #76]	; (800871c <MultiSensor_takeMeasurements+0x50>)
 80086d0:	8813      	ldrh	r3, [r2, #0]
 80086d2:	4604      	mov	r4, r0
 80086d4:	3301      	adds	r3, #1
 80086d6:	a801      	add	r0, sp, #4
 80086d8:	8013      	strh	r3, [r2, #0]
 80086da:	f000 fc37 	bl	8008f4c <VEML7700_GetAutoALSLux>
 80086de:	f000 f9c3 	bl	8008a68 <TMP112_ReadTemp>
 80086e2:	4605      	mov	r5, r0
 80086e4:	f7ff ffb6 	bl	8008654 <HDC1080_Get_Humidity>
 80086e8:	eddd 7a01 	vldr	s15, [sp, #4]
 80086ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086f0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80086f4:	ea40 13c5 	orr.w	r3, r0, r5, lsl #7
 80086f8:	ee17 0a90 	vmov	r0, s15
 80086fc:	ea43 30c0 	orr.w	r0, r3, r0, lsl #15
 8008700:	f844 0b04 	str.w	r0, [r4], #4
 8008704:	2200      	movs	r2, #0
 8008706:	2140      	movs	r1, #64	; 0x40
 8008708:	4805      	ldr	r0, [pc, #20]	; (8008720 <MultiSensor_takeMeasurements+0x54>)
 800870a:	f7f9 fd03 	bl	8002114 <HAL_GPIO_WritePin>
 800870e:	4621      	mov	r1, r4
 8008710:	2001      	movs	r0, #1
 8008712:	f7ff fe3f 	bl	8008394 <AS726X_takeMeasurements>
 8008716:	b003      	add	sp, #12
 8008718:	bd30      	pop	{r4, r5, pc}
 800871a:	bf00      	nop
 800871c:	200002b0 	.word	0x200002b0
 8008720:	48000400 	.word	0x48000400

08008724 <DataStruct_init>:
 8008724:	f645 2208 	movw	r2, #23048	; 0x5a08
 8008728:	2300      	movs	r3, #0
 800872a:	5283      	strh	r3, [r0, r2]
 800872c:	f645 220a 	movw	r2, #23050	; 0x5a0a
 8008730:	5483      	strb	r3, [r0, r2]
 8008732:	6003      	str	r3, [r0, #0]
 8008734:	7103      	strb	r3, [r0, #4]
 8008736:	7143      	strb	r3, [r0, #5]
 8008738:	80c3      	strh	r3, [r0, #6]
 800873a:	4770      	bx	lr

0800873c <PrintSensorData>:
 800873c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008740:	4604      	mov	r4, r0
 8008742:	7902      	ldrb	r2, [r0, #4]
 8008744:	6801      	ldr	r1, [r0, #0]
 8008746:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80087b4 <PrintSensorData+0x78>
 800874a:	4818      	ldr	r0, [pc, #96]	; (80087ac <PrintSensorData+0x70>)
 800874c:	b086      	sub	sp, #24
 800874e:	f504 45b4 	add.w	r5, r4, #23040	; 0x5a00
 8008752:	f004 fdd3 	bl	800d2fc <iprintf>
 8008756:	3508      	adds	r5, #8
 8008758:	2300      	movs	r3, #0
 800875a:	2705      	movs	r7, #5
 800875c:	8829      	ldrh	r1, [r5, #0]
 800875e:	b29a      	uxth	r2, r3
 8008760:	4291      	cmp	r1, r2
 8008762:	f103 0601 	add.w	r6, r3, #1
 8008766:	d805      	bhi.n	8008774 <PrintSensorData+0x38>
 8008768:	4811      	ldr	r0, [pc, #68]	; (80087b0 <PrintSensorData+0x74>)
 800876a:	b006      	add	sp, #24
 800876c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008770:	f004 be4c 	b.w	800d40c <puts>
 8008774:	b29b      	uxth	r3, r3
 8008776:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 800877a:	8ad8      	ldrh	r0, [r3, #22]
 800877c:	689a      	ldr	r2, [r3, #8]
 800877e:	9005      	str	r0, [sp, #20]
 8008780:	8a98      	ldrh	r0, [r3, #20]
 8008782:	9004      	str	r0, [sp, #16]
 8008784:	8a58      	ldrh	r0, [r3, #18]
 8008786:	9003      	str	r0, [sp, #12]
 8008788:	8a18      	ldrh	r0, [r3, #16]
 800878a:	9002      	str	r0, [sp, #8]
 800878c:	89d8      	ldrh	r0, [r3, #14]
 800878e:	9001      	str	r0, [sp, #4]
 8008790:	899b      	ldrh	r3, [r3, #12]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	f3c2 11c7 	ubfx	r1, r2, #7, #8
 8008798:	0bd3      	lsrs	r3, r2, #15
 800879a:	fbb1 f1f7 	udiv	r1, r1, r7
 800879e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80087a2:	4640      	mov	r0, r8
 80087a4:	f004 fdaa 	bl	800d2fc <iprintf>
 80087a8:	4633      	mov	r3, r6
 80087aa:	e7d7      	b.n	800875c <PrintSensorData+0x20>
 80087ac:	0800f738 	.word	0x0800f738
 80087b0:	0800f896 	.word	0x0800f896
 80087b4:	0800f756 	.word	0x0800f756

080087b8 <TMP112_writeRegister>:
#include "Error.h"
#include "utils.h"


uint8_t TMP112_writeRegister(unsigned char* data, uint8_t len, uint8_t throw)
{
 80087b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t timeOutCounter = 0;

	while (HAL_I2C_Master_Transmit(&hi2c2, TMP112_ADDR_WRITE, (uint8_t *) data,
 80087bc:	4d1a      	ldr	r5, [pc, #104]	; (8008828 <TMP112_writeRegister+0x70>)
{
 80087be:	b087      	sub	sp, #28
 80087c0:	4606      	mov	r6, r0
 80087c2:	4690      	mov	r8, r2
	while (HAL_I2C_Master_Transmit(&hi2c2, TMP112_ADDR_WRITE, (uint8_t *) data,
 80087c4:	2434      	movs	r4, #52	; 0x34
 80087c6:	460f      	mov	r7, r1
 80087c8:	f04f 0901 	mov.w	r9, #1
 80087cc:	f8cd 9000 	str.w	r9, [sp]
 80087d0:	463b      	mov	r3, r7
 80087d2:	4632      	mov	r2, r6
 80087d4:	2190      	movs	r1, #144	; 0x90
 80087d6:	4628      	mov	r0, r5
 80087d8:	f7f9 fe56 	bl	8002488 <HAL_I2C_Master_Transmit>
 80087dc:	b300      	cbz	r0, 8008820 <TMP112_writeRegister+0x68>
 80087de:	3c01      	subs	r4, #1
			len, 1) != HAL_OK)
	{

		if (timeOutCounter > TMP112_TIMEOUT_TX_END)
 80087e0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80087e4:	d1f2      	bne.n	80087cc <TMP112_writeRegister+0x14>
		{
			InfoLogAdd(ERRORLEVEL_SEVERE,
 80087e6:	f000 fc1b 	bl	8009020 <GetTempInfoStruct>
 80087ea:	2513      	movs	r5, #19
 80087ec:	462b      	mov	r3, r5
 80087ee:	2217      	movs	r2, #23
 80087f0:	2116      	movs	r1, #22
 80087f2:	e9cd 4003 	strd	r4, r0, [sp, #12]
 80087f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80087fa:	2015      	movs	r0, #21
 80087fc:	9500      	str	r5, [sp, #0]
 80087fe:	f003 fddc 	bl	800c3ba <InfoLogAdd>
			LOG_FUNC_TMP112,
			LOG_SUB_WRITE,
			LOG_TYPE_ID,
			LOG_STATUS_TIMEOUT, 0, 0, 0, GetTempInfoStruct());

			ErrorAddLog(LOG_FUNC_TMP112, LOG_SUB_WRITE, throw, LOG_STATUS_TIMEOUT, data[1], data[0], 0, GetErrorStruct());
 8008802:	7877      	ldrb	r7, [r6, #1]
 8008804:	7836      	ldrb	r6, [r6, #0]
 8008806:	f000 fc03 	bl	8009010 <GetErrorStruct>
 800880a:	e9cd 7600 	strd	r7, r6, [sp]
 800880e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8008812:	462b      	mov	r3, r5
 8008814:	2016      	movs	r0, #22
 8008816:	4642      	mov	r2, r8
 8008818:	2117      	movs	r1, #23
 800881a:	f003 fd7e 	bl	800c31a <ErrorAddLog>
 800881e:	2001      	movs	r0, #1
		}

		timeOutCounter++;
	}
	return HAL_OK;
}
 8008820:	b007      	add	sp, #28
 8008822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008826:	bf00      	nop
 8008828:	2000c520 	.word	0x2000c520

0800882c <TMP112_readRegister>:

uint16_t TMP112_readRegister(unsigned char* data, uint8_t len, uint8_t throw)
{
 800882c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t timeOutCounter = 0;

	while (HAL_I2C_Master_Transmit(&hi2c2, TMP112_ADDR_WRITE, (uint8_t *) data,
 8008830:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80088d4 <TMP112_readRegister+0xa8>
{
 8008834:	b087      	sub	sp, #28
 8008836:	4605      	mov	r5, r0
 8008838:	460e      	mov	r6, r1
 800883a:	4617      	mov	r7, r2
	while (HAL_I2C_Master_Transmit(&hi2c2, TMP112_ADDR_WRITE, (uint8_t *) data,
 800883c:	2434      	movs	r4, #52	; 0x34
 800883e:	f04f 0801 	mov.w	r8, #1
 8008842:	f8cd 8000 	str.w	r8, [sp]
 8008846:	2301      	movs	r3, #1
 8008848:	462a      	mov	r2, r5
 800884a:	2190      	movs	r1, #144	; 0x90
 800884c:	4648      	mov	r0, r9
 800884e:	f7f9 fe1b 	bl	8002488 <HAL_I2C_Master_Transmit>
 8008852:	b9d0      	cbnz	r0, 800888a <TMP112_readRegister+0x5e>
		}
		timeOutCounter++;
	}

	timeOutCounter = 0;
	while (HAL_I2C_Master_Receive(&hi2c2, TMP112_ADDR_READ, (uint8_t *) data,
 8008854:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80088d4 <TMP112_readRegister+0xa8>
 8008858:	2434      	movs	r4, #52	; 0x34
 800885a:	b2b6      	uxth	r6, r6
 800885c:	f04f 0901 	mov.w	r9, #1
 8008860:	f8cd 9000 	str.w	r9, [sp]
 8008864:	4633      	mov	r3, r6
 8008866:	462a      	mov	r2, r5
 8008868:	2191      	movs	r1, #145	; 0x91
 800886a:	4640      	mov	r0, r8
 800886c:	f7f9 fe9e 	bl	80025ac <HAL_I2C_Master_Receive>
 8008870:	b360      	cbz	r0, 80088cc <TMP112_readRegister+0xa0>
 8008872:	3c01      	subs	r4, #1
			len, 1) != HAL_OK)
	{
		if (timeOutCounter > TMP112_TIMEOUT_RX_END)
 8008874:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8008878:	d1f2      	bne.n	8008860 <TMP112_readRegister+0x34>
		{
			InfoLogAdd(ERRORLEVEL_SEVERE,
 800887a:	782e      	ldrb	r6, [r5, #0]
 800887c:	f000 fbd0 	bl	8009020 <GetTempInfoStruct>
 8008880:	f04f 0802 	mov.w	r8, #2
 8008884:	e9cd 4003 	strd	r4, r0, [sp, #12]
 8008888:	e008      	b.n	800889c <TMP112_readRegister+0x70>
 800888a:	3c01      	subs	r4, #1
		if (timeOutCounter > TMP112_TIMEOUT_TX_END)
 800888c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8008890:	d1d7      	bne.n	8008842 <TMP112_readRegister+0x16>
			InfoLogAdd(ERRORLEVEL_SEVERE,
 8008892:	782e      	ldrb	r6, [r5, #0]
 8008894:	f000 fbc4 	bl	8009020 <GetTempInfoStruct>
 8008898:	e9cd 4003 	strd	r4, r0, [sp, #12]
			InfoLogAdd(ERRORLEVEL_SEVERE,
 800889c:	2215      	movs	r2, #21
 800889e:	e9cd 6801 	strd	r6, r8, [sp, #4]
 80088a2:	2613      	movs	r6, #19
 80088a4:	4633      	mov	r3, r6
 80088a6:	2116      	movs	r1, #22
 80088a8:	4610      	mov	r0, r2
 80088aa:	9600      	str	r6, [sp, #0]
 80088ac:	f003 fd85 	bl	800c3ba <InfoLogAdd>
			LOG_FUNC_TMP112,
			LOG_SUB_READ,
			LOG_TYPE_ID,
			LOG_STATUS_TIMEOUT, data[0], 2, 0, GetTempInfoStruct());

			ErrorAddLog(LOG_FUNC_TMP112, LOG_SUB_READ, throw, LOG_STATUS_TIMEOUT, data[0], 2, 0, GetErrorStruct());
 80088b0:	782d      	ldrb	r5, [r5, #0]
 80088b2:	f000 fbad 	bl	8009010 <GetErrorStruct>
 80088b6:	e9cd 5800 	strd	r5, r8, [sp]
 80088ba:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80088be:	4633      	mov	r3, r6
 80088c0:	2016      	movs	r0, #22
 80088c2:	463a      	mov	r2, r7
 80088c4:	2115      	movs	r1, #21
 80088c6:	f003 fd28 	bl	800c31a <ErrorAddLog>
			return HAL_ERROR;
 80088ca:	2001      	movs	r0, #1
		}
		timeOutCounter++;
	}
	return HAL_OK;
}
 80088cc:	b007      	add	sp, #28
 80088ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088d2:	bf00      	nop
 80088d4:	2000c520 	.word	0x2000c520

080088d8 <TMP112_Init>:


void TMP112_Init(void)
{
 80088d8:	b507      	push	{r0, r1, r2, lr}
	unsigned char data_t[4] = { 0 };
 80088da:	2300      	movs	r3, #0
 80088dc:	f8ad 3006 	strh.w	r3, [sp, #6]

	/* Set TMP112 into Shutdown mode */
	data_t[0] = TMP112_CONF_REG;
 80088e0:	f246 1301 	movw	r3, #24833	; 0x6101
 80088e4:	f8ad 3004 	strh.w	r3, [sp, #4]
	data_t[1] = 0x61; //0x61 = SD enable
	data_t[2] = 0xA0; //Default values of byte 2 in configuration register

	TMP112_writeRegister(data_t, 3, LOG_TYPE_INIT);
 80088e8:	2220      	movs	r2, #32
	data_t[1] = 0x61; //0x61 = SD enable
 80088ea:	23a0      	movs	r3, #160	; 0xa0
	TMP112_writeRegister(data_t, 3, LOG_TYPE_INIT);
 80088ec:	2103      	movs	r1, #3
 80088ee:	a801      	add	r0, sp, #4
	data_t[1] = 0x61; //0x61 = SD enable
 80088f0:	f88d 3006 	strb.w	r3, [sp, #6]
	TMP112_writeRegister(data_t, 3, LOG_TYPE_INIT);
 80088f4:	f7ff ff60 	bl	80087b8 <TMP112_writeRegister>
}
 80088f8:	b003      	add	sp, #12
 80088fa:	f85d fb04 	ldr.w	pc, [sp], #4

080088fe <TMP112_StartOneShot>:

/*
 *  Sets up one short setting
 */
uint8_t TMP112_StartOneShot(void)
{
 80088fe:	b507      	push	{r0, r1, r2, lr}
	unsigned char data_t[4] = { 0 };
 8008900:	2300      	movs	r3, #0
 8008902:	f8ad 3006 	strh.w	r3, [sp, #6]

	/* Set TMP112 into OneShot mode */
	data_t[0] = TMP112_CONF_REG;
 8008906:	f24e 1301 	movw	r3, #57601	; 0xe101
 800890a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data_t[1] = 0xE1; //0xE1 = SD enable & OS enable
	data_t[2] = 0xA0; //Default values of byte 2 in configuration register

	/* Send data to sensor */
	return TMP112_writeRegister(data_t, 3, LOG_TYPE_START_ONESHOT);
 800890e:	221b      	movs	r2, #27
	data_t[1] = 0xE1; //0xE1 = SD enable & OS enable
 8008910:	23a0      	movs	r3, #160	; 0xa0
	return TMP112_writeRegister(data_t, 3, LOG_TYPE_START_ONESHOT);
 8008912:	2103      	movs	r1, #3
 8008914:	a801      	add	r0, sp, #4
	data_t[1] = 0xE1; //0xE1 = SD enable & OS enable
 8008916:	f88d 3006 	strb.w	r3, [sp, #6]
	return TMP112_writeRegister(data_t, 3, LOG_TYPE_START_ONESHOT);
 800891a:	f7ff ff4d 	bl	80087b8 <TMP112_writeRegister>
}
 800891e:	b003      	add	sp, #12
 8008920:	f85d fb04 	ldr.w	pc, [sp], #4

08008924 <TMP112_WaitForOneShot>:

uint8_t TMP112_WaitForOneShot(void)
{
 8008924:	b573      	push	{r0, r1, r4, r5, r6, lr}
	unsigned char data[2] = { 0 };
	data[0] = TMP112_CONF_REG;
 8008926:	ae02      	add	r6, sp, #8
	unsigned char data[2] = { 0 };
 8008928:	2500      	movs	r5, #0
	data[0] = TMP112_CONF_REG;
 800892a:	2301      	movs	r3, #1
	unsigned char data[2] = { 0 };
 800892c:	f8ad 5004 	strh.w	r5, [sp, #4]
	data[0] = TMP112_CONF_REG;
 8008930:	f806 3d04 	strb.w	r3, [r6, #-4]!
	uint8_t timeOutCounter = 25; // wait total of max 100ms (4*25)
 8008934:	2419      	movs	r4, #25
	uint8_t ret = 0;

	while ((data[0] & 0x80) == 0 && timeOutCounter--)
 8008936:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	db03      	blt.n	8008946 <TMP112_WaitForOneShot+0x22>
 800893e:	3c01      	subs	r4, #1
 8008940:	b2e4      	uxtb	r4, r4
 8008942:	2cff      	cmp	r4, #255	; 0xff
 8008944:	d105      	bne.n	8008952 <TMP112_WaitForOneShot+0x2e>
			HAL_Delay(4);
		}
	}

	/* SUCCESS only if everything went OK */
	return (ret == HAL_OK && timeOutCounter > 0) ? HAL_OK : HAL_ERROR;
 8008946:	b995      	cbnz	r5, 800896e <TMP112_WaitForOneShot+0x4a>
 8008948:	fab4 f084 	clz	r0, r4
 800894c:	0940      	lsrs	r0, r0, #5
}
 800894e:	b002      	add	sp, #8
 8008950:	bd70      	pop	{r4, r5, r6, pc}
		ret = TMP112_readRegister(data, 2, LOG_TYPE_WAIT_ONESHOT);
 8008952:	221c      	movs	r2, #28
 8008954:	2102      	movs	r1, #2
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff ff68 	bl	800882c <TMP112_readRegister>
		if ((data[0] & 0x80) == 0)
 800895c:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8008960:	2b00      	cmp	r3, #0
		ret = TMP112_readRegister(data, 2, LOG_TYPE_WAIT_ONESHOT);
 8008962:	b2c5      	uxtb	r5, r0
		if ((data[0] & 0x80) == 0)
 8008964:	dbe7      	blt.n	8008936 <TMP112_WaitForOneShot+0x12>
			HAL_Delay(4);
 8008966:	2004      	movs	r0, #4
 8008968:	f7f8 fa94 	bl	8000e94 <HAL_Delay>
 800896c:	e7e3      	b.n	8008936 <TMP112_WaitForOneShot+0x12>
	return (ret == HAL_OK && timeOutCounter > 0) ? HAL_OK : HAL_ERROR;
 800896e:	2001      	movs	r0, #1
 8008970:	e7ed      	b.n	800894e <TMP112_WaitForOneShot+0x2a>

08008972 <TMP112_GetTemperature_raw>:

/*
 * Gets the raw value from the temp register
 */
uint8_t TMP112_GetTemperature_raw(uint16_t *get)
{
 8008972:	b513      	push	{r0, r1, r4, lr}
 8008974:	4604      	mov	r4, r0
	unsigned char data[2] = { 0 };
 8008976:	a802      	add	r0, sp, #8
 8008978:	2300      	movs	r3, #0
 800897a:	f820 3d04 	strh.w	r3, [r0, #-4]!

	uint8_t ret = HAL_OK;
	data[0] = TMP112_TEMP_REG;

	ret = TMP112_readRegister(data, 2, LOG_TYPE_GET_TEMP);
 800897e:	221d      	movs	r2, #29
 8008980:	2102      	movs	r1, #2
 8008982:	f7ff ff53 	bl	800882c <TMP112_readRegister>

	/* 12 bit temperature */
	*get = (((data[0] << 8) | data[1]) >> 4);
 8008986:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800898a:	ba5b      	rev16	r3, r3
 800898c:	f3c3 130b 	ubfx	r3, r3, #4, #12

	return ret;
}
 8008990:	b2c0      	uxtb	r0, r0
	*get = (((data[0] << 8) | data[1]) >> 4);
 8008992:	8023      	strh	r3, [r4, #0]
}
 8008994:	b002      	add	sp, #8
 8008996:	bd10      	pop	{r4, pc}

08008998 <TMP112_ReadTemp_raw>:
/*
 * Reads the raw value from the temp register.
 * Returns a 12 bit two's complement value. range: (-2047) - (2047)
 */
uint16_t TMP112_ReadTemp_raw(void)
{
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	b088      	sub	sp, #32
	uint8_t ret = HAL_OK;
	uint16_t temp = 0;
 800899c:	2500      	movs	r5, #0
 800899e:	f8ad 501e 	strh.w	r5, [sp, #30]

	/* Set one shot */
	ret = TMP112_StartOneShot();
 80089a2:	f7ff ffac 	bl	80088fe <TMP112_StartOneShot>
	if (ret != HAL_OK)
 80089a6:	4604      	mov	r4, r0
 80089a8:	b3c8      	cbz	r0, 8008a1e <TMP112_ReadTemp_raw+0x86>
	{
		InfoLogAdd(
 80089aa:	f000 fb39 	bl	8009020 <GetTempInfoStruct>
 80089ae:	2411      	movs	r4, #17
 80089b0:	231c      	movs	r3, #28
 80089b2:	221d      	movs	r2, #29
 80089b4:	e9cd 5003 	strd	r5, r0, [sp, #12]
 80089b8:	2116      	movs	r1, #22
 80089ba:	2015      	movs	r0, #21
 80089bc:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80089c0:	9400      	str	r4, [sp, #0]
 80089c2:	f003 fcfa 	bl	800c3ba <InfoLogAdd>
				0,
				0,
				0,
				GetTempInfoStruct());
		
		ErrorAddLog(LOG_FUNC_TMP112, LOG_SUB_READTEMP, LOG_TYPE_WAIT_ONESHOT, LOG_STATUS_FAIL, 0, 0, 0, GetErrorStruct());
 80089c6:	f000 fb23 	bl	8009010 <GetErrorStruct>
 80089ca:	e9cd 5500 	strd	r5, r5, [sp]
 80089ce:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80089d2:	4623      	mov	r3, r4
 80089d4:	221c      	movs	r2, #28
					0,
					0,
					0,
					GetTempInfoStruct());
			
			ErrorAddLog(LOG_FUNC_TMP112, LOG_SUB_READTEMP, LOG_TYPE_START_ONESHOT, LOG_STATUS_FAIL, 0, 0, 0, GetErrorStruct());
 80089d6:	211d      	movs	r1, #29
 80089d8:	2016      	movs	r0, #22
 80089da:	f003 fc9e 	bl	800c31a <ErrorAddLog>
	}

	/* If get temperature fails, send back Invalid temperature representation */
	if (ret != HAL_OK)
	{
		temp = TMP112_INVALID_TEMP;
 80089de:	2400      	movs	r4, #0
 80089e0:	f8ad 401e 	strh.w	r4, [sp, #30]

		InfoLogAdd(
 80089e4:	f000 fb1c 	bl	8009020 <GetTempInfoStruct>
 80089e8:	2511      	movs	r5, #17
 80089ea:	231d      	movs	r3, #29
 80089ec:	461a      	mov	r2, r3
 80089ee:	e9cd 4003 	strd	r4, r0, [sp, #12]
 80089f2:	2116      	movs	r1, #22
 80089f4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80089f8:	9500      	str	r5, [sp, #0]
 80089fa:	2015      	movs	r0, #21
 80089fc:	f003 fcdd 	bl	800c3ba <InfoLogAdd>
				0,
				temp,
				0,
				GetTempInfoStruct());
		
		ErrorAddLog(LOG_FUNC_TMP112, LOG_SUB_READTEMP, LOG_TYPE_GET_TEMP, LOG_STATUS_FAIL, temp, 0, 0, GetErrorStruct());
 8008a00:	f8bd 601e 	ldrh.w	r6, [sp, #30]
 8008a04:	f000 fb04 	bl	8009010 <GetErrorStruct>
 8008a08:	221d      	movs	r2, #29
 8008a0a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8008a0e:	e9cd 6400 	strd	r6, r4, [sp]
 8008a12:	462b      	mov	r3, r5
 8008a14:	4611      	mov	r1, r2
 8008a16:	2016      	movs	r0, #22
 8008a18:	f003 fc7f 	bl	800c31a <ErrorAddLog>
 8008a1c:	e01f      	b.n	8008a5e <TMP112_ReadTemp_raw+0xc6>
		ret = TMP112_WaitForOneShot();
 8008a1e:	f7ff ff81 	bl	8008924 <TMP112_WaitForOneShot>
		if (ret != HAL_OK)
 8008a22:	b1b0      	cbz	r0, 8008a52 <TMP112_ReadTemp_raw+0xba>
			InfoLogAdd(
 8008a24:	f000 fafc 	bl	8009020 <GetTempInfoStruct>
 8008a28:	2511      	movs	r5, #17
 8008a2a:	231b      	movs	r3, #27
 8008a2c:	221d      	movs	r2, #29
 8008a2e:	e9cd 4003 	strd	r4, r0, [sp, #12]
 8008a32:	2116      	movs	r1, #22
 8008a34:	2015      	movs	r0, #21
 8008a36:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8008a3a:	9500      	str	r5, [sp, #0]
 8008a3c:	f003 fcbd 	bl	800c3ba <InfoLogAdd>
			ErrorAddLog(LOG_FUNC_TMP112, LOG_SUB_READTEMP, LOG_TYPE_START_ONESHOT, LOG_STATUS_FAIL, 0, 0, 0, GetErrorStruct());
 8008a40:	f000 fae6 	bl	8009010 <GetErrorStruct>
 8008a44:	e9cd 4400 	strd	r4, r4, [sp]
 8008a48:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	221b      	movs	r2, #27
 8008a50:	e7c1      	b.n	80089d6 <TMP112_ReadTemp_raw+0x3e>
			ret = TMP112_GetTemperature_raw(&temp);
 8008a52:	f10d 001e 	add.w	r0, sp, #30
 8008a56:	f7ff ff8c 	bl	8008972 <TMP112_GetTemperature_raw>
	if (ret != HAL_OK)
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d1bf      	bne.n	80089de <TMP112_ReadTemp_raw+0x46>
	}
	return temp;
}
 8008a5e:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8008a62:	b008      	add	sp, #32
 8008a64:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a68 <TMP112_ReadTemp>:
 * Reads and calculates the temperature. Multiplies by 10 means that we get a 1 decimal number.
 * Example: returns 241 means 24,1 celsius.
 * Can use 9 bits -> max value is then 51,1 degrees.
 */
uint8_t TMP112_ReadTemp(void)
{
 8008a68:	b530      	push	{r4, r5, lr}
 8008a6a:	b087      	sub	sp, #28

	/* Calculate temp */
	uint16_t raw = TMP112_ReadTemp_raw();
 8008a6c:	f7ff ff94 	bl	8008998 <TMP112_ReadTemp_raw>

	if (raw == TMP112_INVALID_TEMP)
 8008a70:	4604      	mov	r4, r0
 8008a72:	b1e8      	cbz	r0, 8008ab0 <TMP112_ReadTemp+0x48>
	}

	double tempCalc = (double) (raw & 0xFFF);

	/* Check if number is negative (bit 11 == 1, raw >= 0x800). Can't represent negative values */
	if (BitTst(raw, 11))
 8008a74:	0503      	lsls	r3, r0, #20
 8008a76:	d51d      	bpl.n	8008ab4 <TMP112_ReadTemp+0x4c>
	{
		InfoLogAdd(
 8008a78:	f000 fad2 	bl	8009020 <GetTempInfoStruct>
 8008a7c:	2500      	movs	r5, #0
 8008a7e:	231d      	movs	r3, #29
 8008a80:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008a84:	2416      	movs	r4, #22
 8008a86:	461a      	mov	r2, r3
 8008a88:	4621      	mov	r1, r4
 8008a8a:	9004      	str	r0, [sp, #16]
 8008a8c:	9501      	str	r5, [sp, #4]
 8008a8e:	2014      	movs	r0, #20
 8008a90:	9400      	str	r4, [sp, #0]
 8008a92:	f003 fc92 	bl	800c3ba <InfoLogAdd>
				0,
				raw,
				0,
				GetTempInfoStruct());
		
		ErrorAddLog(LOG_FUNC_TMP112, LOG_SUB_READTEMP, LOG_TYPE_GET_TEMP, LOG_STATUS_MIN, 0, 0, 0, GetErrorStruct());
 8008a96:	f000 fabb 	bl	8009010 <GetErrorStruct>
 8008a9a:	221d      	movs	r2, #29
 8008a9c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8008aa0:	e9cd 5500 	strd	r5, r5, [sp]
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	4623      	mov	r3, r4
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	f003 fc36 	bl	800c31a <ErrorAddLog>
		return TMP112_INVALID_TEMP;
 8008aae:	4628      	mov	r0, r5
	{
		temp = TMP112_MAX_TEMP;
	}

	return temp;
}
 8008ab0:	b007      	add	sp, #28
 8008ab2:	bd30      	pop	{r4, r5, pc}
	double tempCalc = (double) (raw & 0xFFF);
 8008ab4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008ab8:	f7f7 fd4c 	bl	8000554 <__aeabi_i2d>
	uint8_t temp = (uint8_t) (5 * tempCalc / 16.0);
 8008abc:	2200      	movs	r2, #0
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <TMP112_ReadTemp+0x6c>)
 8008ac0:	f7f7 fdb2 	bl	8000628 <__aeabi_dmul>
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <TMP112_ReadTemp+0x70>)
 8008ac8:	f7f7 fdae 	bl	8000628 <__aeabi_dmul>
 8008acc:	f7f7 ffbe 	bl	8000a4c <__aeabi_d2uiz>
 8008ad0:	b2c0      	uxtb	r0, r0
	return temp;
 8008ad2:	e7ed      	b.n	8008ab0 <TMP112_ReadTemp+0x48>
 8008ad4:	40140000 	.word	0x40140000
 8008ad8:	3fb00000 	.word	0x3fb00000

08008adc <VEML7700_ReadData>:
 8008adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ae0:	b087      	sub	sp, #28
 8008ae2:	ad05      	add	r5, sp, #20
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4f12      	ldr	r7, [pc, #72]	; (8008b30 <VEML7700_ReadData+0x54>)
 8008ae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008aec:	460e      	mov	r6, r1
 8008aee:	70ab      	strb	r3, [r5, #2]
 8008af0:	2466      	movs	r4, #102	; 0x66
 8008af2:	4680      	mov	r8, r0
 8008af4:	f04f 090a 	mov.w	r9, #10
 8008af8:	2302      	movs	r3, #2
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b00:	9500      	str	r5, [sp, #0]
 8008b02:	2301      	movs	r3, #1
 8008b04:	4642      	mov	r2, r8
 8008b06:	2121      	movs	r1, #33	; 0x21
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f7f9 fde1 	bl	80026d0 <HAL_I2C_Mem_Read>
 8008b0e:	b938      	cbnz	r0, 8008b20 <VEML7700_ReadData+0x44>
 8008b10:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8008b14:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008b18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008b1c:	8033      	strh	r3, [r6, #0]
 8008b1e:	e004      	b.n	8008b2a <VEML7700_ReadData+0x4e>
 8008b20:	3c01      	subs	r4, #1
 8008b22:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8008b26:	d1e7      	bne.n	8008af8 <VEML7700_ReadData+0x1c>
 8008b28:	20ff      	movs	r0, #255	; 0xff
 8008b2a:	b007      	add	sp, #28
 8008b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b30:	2000c520 	.word	0x2000c520

08008b34 <VEML7700_GetALS>:
 8008b34:	4601      	mov	r1, r0
 8008b36:	2004      	movs	r0, #4
 8008b38:	f7ff bfd0 	b.w	8008adc <VEML7700_ReadData>

08008b3c <VEML7700_SendData>:
 8008b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9303      	str	r3, [sp, #12]
 8008b42:	4d0d      	ldr	r5, [pc, #52]	; (8008b78 <VEML7700_SendData+0x3c>)
 8008b44:	f88d 100d 	strb.w	r1, [sp, #13]
 8008b48:	0a09      	lsrs	r1, r1, #8
 8008b4a:	f88d 000c 	strb.w	r0, [sp, #12]
 8008b4e:	f88d 100e 	strb.w	r1, [sp, #14]
 8008b52:	2466      	movs	r4, #102	; 0x66
 8008b54:	260a      	movs	r6, #10
 8008b56:	9600      	str	r6, [sp, #0]
 8008b58:	2303      	movs	r3, #3
 8008b5a:	aa03      	add	r2, sp, #12
 8008b5c:	2120      	movs	r1, #32
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f7f9 fc92 	bl	8002488 <HAL_I2C_Master_Transmit>
 8008b64:	b908      	cbnz	r0, 8008b6a <VEML7700_SendData+0x2e>
 8008b66:	b004      	add	sp, #16
 8008b68:	bd70      	pop	{r4, r5, r6, pc}
 8008b6a:	3c01      	subs	r4, #1
 8008b6c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8008b70:	d1f1      	bne.n	8008b56 <VEML7700_SendData+0x1a>
 8008b72:	20ff      	movs	r0, #255	; 0xff
 8008b74:	e7f7      	b.n	8008b66 <VEML7700_SendData+0x2a>
 8008b76:	bf00      	nop
 8008b78:	2000c520 	.word	0x2000c520

08008b7c <VEML7700_Initialize>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4d0c      	ldr	r5, [pc, #48]	; (8008bb0 <VEML7700_Initialize+0x34>)
 8008b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b84:	802a      	strh	r2, [r5, #0]
 8008b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b8a:	2400      	movs	r4, #0
 8008b8c:	80aa      	strh	r2, [r5, #4]
 8008b8e:	2204      	movs	r2, #4
 8008b90:	806c      	strh	r4, [r5, #2]
 8008b92:	80ea      	strh	r2, [r5, #6]
 8008b94:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8008b98:	b2e0      	uxtb	r0, r4
 8008b9a:	3401      	adds	r4, #1
 8008b9c:	f7ff ffce 	bl	8008b3c <VEML7700_SendData>
 8008ba0:	2c04      	cmp	r4, #4
 8008ba2:	d1f7      	bne.n	8008b94 <VEML7700_Initialize+0x18>
 8008ba4:	2003      	movs	r0, #3
 8008ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008baa:	f7f8 b973 	b.w	8000e94 <HAL_Delay>
 8008bae:	bf00      	nop
 8008bb0:	200008d8 	.word	0x200008d8

08008bb4 <VEML7700_SetGain>:
 8008bb4:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <VEML7700_SetGain+0x1c>)
 8008bb6:	8819      	ldrh	r1, [r3, #0]
 8008bb8:	02c0      	lsls	r0, r0, #11
 8008bba:	f400 50c0 	and.w	r0, r0, #6144	; 0x1800
 8008bbe:	f421 51c0 	bic.w	r1, r1, #6144	; 0x1800
 8008bc2:	4301      	orrs	r1, r0
 8008bc4:	b289      	uxth	r1, r1
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	8019      	strh	r1, [r3, #0]
 8008bca:	f7ff bfb7 	b.w	8008b3c <VEML7700_SendData>
 8008bce:	bf00      	nop
 8008bd0:	200008d8 	.word	0x200008d8

08008bd4 <VEML7700_GetGain>:
 8008bd4:	4b03      	ldr	r3, [pc, #12]	; (8008be4 <VEML7700_GetGain+0x10>)
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	f3c3 23c1 	ubfx	r3, r3, #11, #2
 8008bdc:	7003      	strb	r3, [r0, #0]
 8008bde:	2000      	movs	r0, #0
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	200008d8 	.word	0x200008d8

08008be8 <VEML7700_SetIntegrationTime>:
 8008be8:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <VEML7700_SetIntegrationTime+0x1c>)
 8008bea:	8819      	ldrh	r1, [r3, #0]
 8008bec:	0180      	lsls	r0, r0, #6
 8008bee:	f400 7070 	and.w	r0, r0, #960	; 0x3c0
 8008bf2:	f421 7170 	bic.w	r1, r1, #960	; 0x3c0
 8008bf6:	4301      	orrs	r1, r0
 8008bf8:	b289      	uxth	r1, r1
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	8019      	strh	r1, [r3, #0]
 8008bfe:	f7ff bf9d 	b.w	8008b3c <VEML7700_SendData>
 8008c02:	bf00      	nop
 8008c04:	200008d8 	.word	0x200008d8

08008c08 <VEML7700_GetIntegrationTime>:
 8008c08:	4b03      	ldr	r3, [pc, #12]	; (8008c18 <VEML7700_GetIntegrationTime+0x10>)
 8008c0a:	881b      	ldrh	r3, [r3, #0]
 8008c0c:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8008c10:	7003      	strb	r3, [r0, #0]
 8008c12:	2000      	movs	r0, #0
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	200008d8 	.word	0x200008d8

08008c1c <VEML7700_SetPower>:
 8008c1c:	4a0a      	ldr	r2, [pc, #40]	; (8008c48 <VEML7700_SetPower+0x2c>)
 8008c1e:	8811      	ldrh	r1, [r2, #0]
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	f021 0301 	bic.w	r3, r1, #1
 8008c26:	43c1      	mvns	r1, r0
 8008c28:	f001 0101 	and.w	r1, r1, #1
 8008c2c:	4319      	orrs	r1, r3
 8008c2e:	b289      	uxth	r1, r1
 8008c30:	4604      	mov	r4, r0
 8008c32:	2000      	movs	r0, #0
 8008c34:	8011      	strh	r1, [r2, #0]
 8008c36:	f7ff ff81 	bl	8008b3c <VEML7700_SendData>
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	b114      	cbz	r4, 8008c44 <VEML7700_SetPower+0x28>
 8008c3e:	2003      	movs	r0, #3
 8008c40:	f7f8 f928 	bl	8000e94 <HAL_Delay>
 8008c44:	4628      	mov	r0, r5
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	200008d8 	.word	0x200008d8

08008c4c <VEML7700_ScaleLux>:
 8008c4c:	b507      	push	{r0, r1, r2, lr}
 8008c4e:	ee07 0a90 	vmov	s15, r0
 8008c52:	f10d 0006 	add.w	r0, sp, #6
 8008c56:	f7ff ffbd 	bl	8008bd4 <VEML7700_GetGain>
 8008c5a:	f10d 0007 	add.w	r0, sp, #7
 8008c5e:	f7ff ffd3 	bl	8008c08 <VEML7700_GetIntegrationTime>
 8008c62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008c66:	f003 0303 	and.w	r3, r3, #3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	bf9c      	itt	ls
 8008c72:	4a17      	ldrls	r2, [pc, #92]	; (8008cd0 <VEML7700_ScaleLux+0x84>)
 8008c74:	eb02 0383 	addls.w	r3, r2, r3, lsl #2
 8008c78:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008c7c:	bf94      	ite	ls
 8008c7e:	edd3 6a00 	vldrls	s13, [r3]
 8008c82:	eef7 6a00 	vmovhi.f32	s13, #112	; 0x3f800000  1.0
 8008c86:	2a08      	cmp	r2, #8
 8008c88:	bf94      	ite	ls
 8008c8a:	4b12      	ldrls	r3, [pc, #72]	; (8008cd4 <VEML7700_ScaleLux+0x88>)
 8008c8c:	ed9f 7a12 	vldrhi	s14, [pc, #72]	; 8008cd8 <VEML7700_ScaleLux+0x8c>
 8008c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c94:	bf9c      	itt	ls
 8008c96:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8008c9a:	ed93 7a00 	vldrls	s14, [r3]
 8008c9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ca2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8008cdc <VEML7700_ScaleLux+0x90>
 8008ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008caa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008ce0 <VEML7700_ScaleLux+0x94>
 8008cae:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008cb2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8008ce4 <VEML7700_ScaleLux+0x98>
 8008cb6:	eee7 6a87 	vfma.f32	s13, s15, s14
 8008cba:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8008ce8 <VEML7700_ScaleLux+0x9c>
 8008cbe:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc6:	edc1 7a00 	vstr	s15, [r1]
 8008cca:	b003      	add	sp, #12
 8008ccc:	f85d fb04 	ldr.w	pc, [sp], #4
 8008cd0:	0800f7bc 	.word	0x0800f7bc
 8008cd4:	0800f7c8 	.word	0x0800f7c8
 8008cd8:	3e6bedfa 	.word	0x3e6bedfa
 8008cdc:	2b2943d6 	.word	0x2b2943d6
 8008ce0:	b2215c36 	.word	0xb2215c36
 8008ce4:	38aae489 	.word	0x38aae489
 8008ce8:	3f804b5e 	.word	0x3f804b5e

08008cec <VEML7700_SampleDelay>:
 8008cec:	b513      	push	{r0, r1, r4, lr}
 8008cee:	f10d 0007 	add.w	r0, sp, #7
 8008cf2:	f7ff ff89 	bl	8008c08 <VEML7700_GetIntegrationTime>
 8008cf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	2b0c      	cmp	r3, #12
 8008cfe:	d819      	bhi.n	8008d34 <VEML7700_SampleDelay+0x48>
 8008d00:	e8df f003 	tbb	[pc, r3]
 8008d04:	15120f18 	.word	0x15120f18
 8008d08:	18181818 	.word	0x18181818
 8008d0c:	1818180d 	.word	0x1818180d
 8008d10:	07          	.byte	0x07
 8008d11:	00          	.byte	0x00
 8008d12:	2032      	movs	r0, #50	; 0x32
 8008d14:	f7f8 f8be 	bl	8000e94 <HAL_Delay>
 8008d18:	4620      	mov	r0, r4
 8008d1a:	b002      	add	sp, #8
 8008d1c:	bd10      	pop	{r4, pc}
 8008d1e:	2064      	movs	r0, #100	; 0x64
 8008d20:	e7f8      	b.n	8008d14 <VEML7700_SampleDelay+0x28>
 8008d22:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008d26:	e7f5      	b.n	8008d14 <VEML7700_SampleDelay+0x28>
 8008d28:	f44f 7048 	mov.w	r0, #800	; 0x320
 8008d2c:	e7f2      	b.n	8008d14 <VEML7700_SampleDelay+0x28>
 8008d2e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008d32:	e7ef      	b.n	8008d14 <VEML7700_SampleDelay+0x28>
 8008d34:	20c8      	movs	r0, #200	; 0xc8
 8008d36:	e7ed      	b.n	8008d14 <VEML7700_SampleDelay+0x28>

08008d38 <VEML7700_GetAutoXLux>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	b08f      	sub	sp, #60	; 0x3c
 8008d3e:	2500      	movs	r5, #0
 8008d40:	9109      	str	r1, [sp, #36]	; 0x24
 8008d42:	210c      	movs	r1, #12
 8008d44:	2402      	movs	r4, #2
 8008d46:	4682      	mov	sl, r0
 8008d48:	9206      	str	r2, [sp, #24]
 8008d4a:	9307      	str	r3, [sp, #28]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	2303      	movs	r3, #3
 8008d50:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8008d54:	4628      	mov	r0, r5
 8008d56:	2108      	movs	r1, #8
 8008d58:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008d5a:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
 8008d5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d62:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8008d66:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8008d6a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8008d6e:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
 8008d72:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
 8008d76:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8008d7a:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
 8008d7e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8008d82:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
 8008d86:	f7ff ff49 	bl	8008c1c <VEML7700_SetPower>
 8008d8a:	b148      	cbz	r0, 8008da0 <VEML7700_GetAutoXLux+0x68>
 8008d8c:	f000 f948 	bl	8009020 <GetTempInfoStruct>
 8008d90:	9503      	str	r5, [sp, #12]
 8008d92:	9004      	str	r0, [sp, #16]
 8008d94:	9502      	str	r5, [sp, #8]
 8008d96:	9501      	str	r5, [sp, #4]
 8008d98:	2211      	movs	r2, #17
 8008d9a:	9200      	str	r2, [sp, #0]
 8008d9c:	2336      	movs	r3, #54	; 0x36
 8008d9e:	e010      	b.n	8008dc2 <VEML7700_GetAutoXLux+0x8a>
 8008da0:	4607      	mov	r7, r0
 8008da2:	ab0c      	add	r3, sp, #48	; 0x30
 8008da4:	fa4f f884 	sxtb.w	r8, r4
 8008da8:	5d18      	ldrb	r0, [r3, r4]
 8008daa:	f7ff ff1d 	bl	8008be8 <VEML7700_SetIntegrationTime>
 8008dae:	b190      	cbz	r0, 8008dd6 <VEML7700_GetAutoXLux+0x9e>
 8008db0:	f000 f936 	bl	8009020 <GetTempInfoStruct>
 8008db4:	2211      	movs	r2, #17
 8008db6:	9004      	str	r0, [sp, #16]
 8008db8:	9703      	str	r7, [sp, #12]
 8008dba:	9702      	str	r7, [sp, #8]
 8008dbc:	9701      	str	r7, [sp, #4]
 8008dbe:	9200      	str	r2, [sp, #0]
 8008dc0:	2331      	movs	r3, #49	; 0x31
 8008dc2:	211d      	movs	r1, #29
 8008dc4:	2015      	movs	r0, #21
 8008dc6:	f003 faf8 	bl	800c3ba <InfoLogAdd>
 8008dca:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8008dce:	4648      	mov	r0, r9
 8008dd0:	b00f      	add	sp, #60	; 0x3c
 8008dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	ab0a      	add	r3, sp, #40	; 0x28
 8008dda:	f813 b005 	ldrb.w	fp, [r3, r5]
 8008dde:	4658      	mov	r0, fp
 8008de0:	f7ff fee8 	bl	8008bb4 <VEML7700_SetGain>
 8008de4:	4681      	mov	r9, r0
 8008de6:	b150      	cbz	r0, 8008dfe <VEML7700_GetAutoXLux+0xc6>
 8008de8:	f000 f91a 	bl	8009020 <GetTempInfoStruct>
 8008dec:	2300      	movs	r3, #0
 8008dee:	2211      	movs	r2, #17
 8008df0:	9303      	str	r3, [sp, #12]
 8008df2:	9302      	str	r3, [sp, #8]
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	9004      	str	r0, [sp, #16]
 8008df8:	9200      	str	r2, [sp, #0]
 8008dfa:	2330      	movs	r3, #48	; 0x30
 8008dfc:	e7e1      	b.n	8008dc2 <VEML7700_GetAutoXLux+0x8a>
 8008dfe:	2001      	movs	r0, #1
 8008e00:	f7ff ff0c 	bl	8008c1c <VEML7700_SetPower>
 8008e04:	b168      	cbz	r0, 8008e22 <VEML7700_GetAutoXLux+0xea>
 8008e06:	f000 f90b 	bl	8009020 <GetTempInfoStruct>
 8008e0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e0e:	9004      	str	r0, [sp, #16]
 8008e10:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e14:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e18:	2311      	movs	r3, #17
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	2212      	movs	r2, #18
 8008e1e:	2336      	movs	r3, #54	; 0x36
 8008e20:	e7cf      	b.n	8008dc2 <VEML7700_GetAutoXLux+0x8a>
 8008e22:	9008      	str	r0, [sp, #32]
 8008e24:	f7ff ff62 	bl	8008cec <VEML7700_SampleDelay>
 8008e28:	4630      	mov	r0, r6
 8008e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2c:	4798      	blx	r3
 8008e2e:	9a08      	ldr	r2, [sp, #32]
 8008e30:	4681      	mov	r9, r0
 8008e32:	b158      	cbz	r0, 8008e4c <VEML7700_GetAutoXLux+0x114>
 8008e34:	9206      	str	r2, [sp, #24]
 8008e36:	f000 f8f3 	bl	8009020 <GetTempInfoStruct>
 8008e3a:	9a06      	ldr	r2, [sp, #24]
 8008e3c:	9004      	str	r0, [sp, #16]
 8008e3e:	9203      	str	r2, [sp, #12]
 8008e40:	9202      	str	r2, [sp, #8]
 8008e42:	9201      	str	r2, [sp, #4]
 8008e44:	2211      	movs	r2, #17
 8008e46:	9200      	str	r2, [sp, #0]
 8008e48:	2332      	movs	r3, #50	; 0x32
 8008e4a:	e7ba      	b.n	8008dc2 <VEML7700_GetAutoXLux+0x8a>
 8008e4c:	8832      	ldrh	r2, [r6, #0]
 8008e4e:	2ac8      	cmp	r2, #200	; 0xc8
 8008e50:	d959      	bls.n	8008f06 <VEML7700_GetAutoXLux+0x1ce>
 8008e52:	8830      	ldrh	r0, [r6, #0]
 8008e54:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e58:	4298      	cmp	r0, r3
 8008e5a:	d80c      	bhi.n	8008e76 <VEML7700_GetAutoXLux+0x13e>
 8008e5c:	4651      	mov	r1, sl
 8008e5e:	f7ff fef5 	bl	8008c4c <VEML7700_ScaleLux>
 8008e62:	9b06      	ldr	r3, [sp, #24]
 8008e64:	f883 b000 	strb.w	fp, [r3]
 8008e68:	ab0e      	add	r3, sp, #56	; 0x38
 8008e6a:	4498      	add	r8, r3
 8008e6c:	9b07      	ldr	r3, [sp, #28]
 8008e6e:	f818 2c08 	ldrb.w	r2, [r8, #-8]
 8008e72:	701a      	strb	r2, [r3, #0]
 8008e74:	e7ab      	b.n	8008dce <VEML7700_GetAutoXLux+0x96>
 8008e76:	2000      	movs	r0, #0
 8008e78:	f7ff fed0 	bl	8008c1c <VEML7700_SetPower>
 8008e7c:	4607      	mov	r7, r0
 8008e7e:	b138      	cbz	r0, 8008e90 <VEML7700_GetAutoXLux+0x158>
 8008e80:	f000 f8ce 	bl	8009020 <GetTempInfoStruct>
 8008e84:	2300      	movs	r3, #0
 8008e86:	9004      	str	r0, [sp, #16]
 8008e88:	9303      	str	r3, [sp, #12]
 8008e8a:	9302      	str	r3, [sp, #8]
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	e783      	b.n	8008d98 <VEML7700_GetAutoXLux+0x60>
 8008e90:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e94:	fa5f f488 	uxtb.w	r4, r8
 8008e98:	ab0e      	add	r3, sp, #56	; 0x38
 8008e9a:	1919      	adds	r1, r3, r4
 8008e9c:	fa4f f884 	sxtb.w	r8, r4
 8008ea0:	f811 3c08 	ldrb.w	r3, [r1, #-8]
 8008ea4:	9308      	str	r3, [sp, #32]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7ff fe9e 	bl	8008be8 <VEML7700_SetIntegrationTime>
 8008eac:	4605      	mov	r5, r0
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	f47f af7e 	bne.w	8008db0 <VEML7700_GetAutoXLux+0x78>
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	f7ff feb1 	bl	8008c1c <VEML7700_SetPower>
 8008eba:	4607      	mov	r7, r0
 8008ebc:	b130      	cbz	r0, 8008ecc <VEML7700_GetAutoXLux+0x194>
 8008ebe:	f000 f8af 	bl	8009020 <GetTempInfoStruct>
 8008ec2:	9503      	str	r5, [sp, #12]
 8008ec4:	9004      	str	r0, [sp, #16]
 8008ec6:	9502      	str	r5, [sp, #8]
 8008ec8:	9501      	str	r5, [sp, #4]
 8008eca:	e7a5      	b.n	8008e18 <VEML7700_GetAutoXLux+0xe0>
 8008ecc:	f7ff ff0e 	bl	8008cec <VEML7700_SampleDelay>
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed4:	4798      	blx	r3
 8008ed6:	b130      	cbz	r0, 8008ee6 <VEML7700_GetAutoXLux+0x1ae>
 8008ed8:	f000 f8a2 	bl	8009020 <GetTempInfoStruct>
 8008edc:	9703      	str	r7, [sp, #12]
 8008ede:	9004      	str	r0, [sp, #16]
 8008ee0:	9702      	str	r7, [sp, #8]
 8008ee2:	9701      	str	r7, [sp, #4]
 8008ee4:	e7ae      	b.n	8008e44 <VEML7700_GetAutoXLux+0x10c>
 8008ee6:	2c00      	cmp	r4, #0
 8008ee8:	d1b3      	bne.n	8008e52 <VEML7700_GetAutoXLux+0x11a>
 8008eea:	4651      	mov	r1, sl
 8008eec:	8830      	ldrh	r0, [r6, #0]
 8008eee:	f7ff fead 	bl	8008c4c <VEML7700_ScaleLux>
 8008ef2:	9b06      	ldr	r3, [sp, #24]
 8008ef4:	f883 b000 	strb.w	fp, [r3]
 8008ef8:	9b07      	ldr	r3, [sp, #28]
 8008efa:	461a      	mov	r2, r3
 8008efc:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8008f00:	7013      	strb	r3, [r2, #0]
 8008f02:	46a1      	mov	r9, r4
 8008f04:	e763      	b.n	8008dce <VEML7700_GetAutoXLux+0x96>
 8008f06:	9008      	str	r0, [sp, #32]
 8008f08:	f7ff fe88 	bl	8008c1c <VEML7700_SetPower>
 8008f0c:	9908      	ldr	r1, [sp, #32]
 8008f0e:	4681      	mov	r9, r0
 8008f10:	b140      	cbz	r0, 8008f24 <VEML7700_GetAutoXLux+0x1ec>
 8008f12:	9106      	str	r1, [sp, #24]
 8008f14:	f000 f884 	bl	8009020 <GetTempInfoStruct>
 8008f18:	9906      	ldr	r1, [sp, #24]
 8008f1a:	9004      	str	r0, [sp, #16]
 8008f1c:	9103      	str	r1, [sp, #12]
 8008f1e:	9102      	str	r1, [sp, #8]
 8008f20:	9101      	str	r1, [sp, #4]
 8008f22:	e739      	b.n	8008d98 <VEML7700_GetAutoXLux+0x60>
 8008f24:	3501      	adds	r5, #1
 8008f26:	2d04      	cmp	r5, #4
 8008f28:	f47f af56 	bne.w	8008dd8 <VEML7700_GetAutoXLux+0xa0>
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	2c06      	cmp	r4, #6
 8008f30:	f47f af37 	bne.w	8008da2 <VEML7700_GetAutoXLux+0x6a>
 8008f34:	4651      	mov	r1, sl
 8008f36:	8830      	ldrh	r0, [r6, #0]
 8008f38:	f7ff fe88 	bl	8008c4c <VEML7700_ScaleLux>
 8008f3c:	9b06      	ldr	r3, [sp, #24]
 8008f3e:	f883 9000 	strb.w	r9, [r3]
 8008f42:	9b07      	ldr	r3, [sp, #28]
 8008f44:	f883 9000 	strb.w	r9, [r3]
 8008f48:	e741      	b.n	8008dce <VEML7700_GetAutoXLux+0x96>
	...

08008f4c <VEML7700_GetAutoALSLux>:
 8008f4c:	b530      	push	{r4, r5, lr}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	f10d 030e 	add.w	r3, sp, #14
 8008f54:	4604      	mov	r4, r0
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	aa03      	add	r2, sp, #12
 8008f5a:	f10d 030d 	add.w	r3, sp, #13
 8008f5e:	491d      	ldr	r1, [pc, #116]	; (8008fd4 <VEML7700_GetAutoALSLux+0x88>)
 8008f60:	f7ff feea 	bl	8008d38 <VEML7700_GetAutoXLux>
 8008f64:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008fd8 <VEML7700_GetAutoALSLux+0x8c>
 8008f68:	ed94 7a00 	vldr	s14, [r4]
 8008f6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f78:	4605      	mov	r5, r0
 8008f7a:	bfc8      	it	gt
 8008f7c:	edc4 7a00 	vstrgt	s15, [r4]
 8008f80:	b1e3      	cbz	r3, 8008fbc <VEML7700_GetAutoALSLux+0x70>
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d01c      	beq.n	8008fc0 <VEML7700_GetAutoALSLux+0x74>
 8008f86:	4a15      	ldr	r2, [pc, #84]	; (8008fdc <VEML7700_GetAutoALSLux+0x90>)
 8008f88:	4915      	ldr	r1, [pc, #84]	; (8008fe0 <VEML7700_GetAutoALSLux+0x94>)
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	bf18      	it	ne
 8008f8e:	4611      	movne	r1, r2
 8008f90:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008f94:	2b0c      	cmp	r3, #12
 8008f96:	d015      	beq.n	8008fc4 <VEML7700_GetAutoALSLux+0x78>
 8008f98:	2b08      	cmp	r3, #8
 8008f9a:	d015      	beq.n	8008fc8 <VEML7700_GetAutoALSLux+0x7c>
 8008f9c:	b1b3      	cbz	r3, 8008fcc <VEML7700_GetAutoALSLux+0x80>
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d016      	beq.n	8008fd0 <VEML7700_GetAutoALSLux+0x84>
 8008fa2:	4810      	ldr	r0, [pc, #64]	; (8008fe4 <VEML7700_GetAutoALSLux+0x98>)
 8008fa4:	4a10      	ldr	r2, [pc, #64]	; (8008fe8 <VEML7700_GetAutoALSLux+0x9c>)
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	bf18      	it	ne
 8008faa:	4602      	movne	r2, r0
 8008fac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008fb0:	480e      	ldr	r0, [pc, #56]	; (8008fec <VEML7700_GetAutoALSLux+0xa0>)
 8008fb2:	f004 f9a3 	bl	800d2fc <iprintf>
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	b005      	add	sp, #20
 8008fba:	bd30      	pop	{r4, r5, pc}
 8008fbc:	490c      	ldr	r1, [pc, #48]	; (8008ff0 <VEML7700_GetAutoALSLux+0xa4>)
 8008fbe:	e7e7      	b.n	8008f90 <VEML7700_GetAutoALSLux+0x44>
 8008fc0:	490c      	ldr	r1, [pc, #48]	; (8008ff4 <VEML7700_GetAutoALSLux+0xa8>)
 8008fc2:	e7e5      	b.n	8008f90 <VEML7700_GetAutoALSLux+0x44>
 8008fc4:	4a0c      	ldr	r2, [pc, #48]	; (8008ff8 <VEML7700_GetAutoALSLux+0xac>)
 8008fc6:	e7f1      	b.n	8008fac <VEML7700_GetAutoALSLux+0x60>
 8008fc8:	4a0c      	ldr	r2, [pc, #48]	; (8008ffc <VEML7700_GetAutoALSLux+0xb0>)
 8008fca:	e7ef      	b.n	8008fac <VEML7700_GetAutoALSLux+0x60>
 8008fcc:	4a0c      	ldr	r2, [pc, #48]	; (8009000 <VEML7700_GetAutoALSLux+0xb4>)
 8008fce:	e7ed      	b.n	8008fac <VEML7700_GetAutoALSLux+0x60>
 8008fd0:	4a0c      	ldr	r2, [pc, #48]	; (8009004 <VEML7700_GetAutoALSLux+0xb8>)
 8008fd2:	e7eb      	b.n	8008fac <VEML7700_GetAutoALSLux+0x60>
 8008fd4:	08008b35 	.word	0x08008b35
 8008fd8:	47ea6000 	.word	0x47ea6000
 8008fdc:	0800f7ee 	.word	0x0800f7ee
 8008fe0:	0800f7f2 	.word	0x0800f7f2
 8008fe4:	0800f80c 	.word	0x0800f80c
 8008fe8:	0800f812 	.word	0x0800f812
 8008fec:	0800f818 	.word	0x0800f818
 8008ff0:	0800fca7 	.word	0x0800fca7
 8008ff4:	0800f7ec 	.word	0x0800f7ec
 8008ff8:	0800f7fb 	.word	0x0800f7fb
 8008ffc:	0800f7f6 	.word	0x0800f7f6
 8009000:	0800f800 	.word	0x0800f800
 8009004:	0800f806 	.word	0x0800f806

08009008 <GetDataStruct>:
 8009008:	4800      	ldr	r0, [pc, #0]	; (800900c <GetDataStruct+0x4>)
 800900a:	4770      	bx	lr
 800900c:	20003814 	.word	0x20003814

08009010 <GetErrorStruct>:
 8009010:	4800      	ldr	r0, [pc, #0]	; (8009014 <GetErrorStruct+0x4>)
 8009012:	4770      	bx	lr
 8009014:	2000c1dc 	.word	0x2000c1dc

08009018 <GetInfoStruct>:
 8009018:	4800      	ldr	r0, [pc, #0]	; (800901c <GetInfoStruct+0x4>)
 800901a:	4770      	bx	lr
 800901c:	20009228 	.word	0x20009228

08009020 <GetTempInfoStruct>:
 8009020:	4800      	ldr	r0, [pc, #0]	; (8009024 <GetTempInfoStruct+0x4>)
 8009022:	4770      	bx	lr
 8009024:	20000924 	.word	0x20000924

08009028 <GetTimeStruct>:
 8009028:	b170      	cbz	r0, 8009048 <GetTimeStruct+0x20>
 800902a:	2801      	cmp	r0, #1
 800902c:	d00e      	beq.n	800904c <GetTimeStruct+0x24>
 800902e:	2802      	cmp	r0, #2
 8009030:	d00e      	beq.n	8009050 <GetTimeStruct+0x28>
 8009032:	2803      	cmp	r0, #3
 8009034:	d00e      	beq.n	8009054 <GetTimeStruct+0x2c>
 8009036:	2804      	cmp	r0, #4
 8009038:	d00e      	beq.n	8009058 <GetTimeStruct+0x30>
 800903a:	4a08      	ldr	r2, [pc, #32]	; (800905c <GetTimeStruct+0x34>)
 800903c:	4b08      	ldr	r3, [pc, #32]	; (8009060 <GetTimeStruct+0x38>)
 800903e:	2806      	cmp	r0, #6
 8009040:	bf0c      	ite	eq
 8009042:	4618      	moveq	r0, r3
 8009044:	4610      	movne	r0, r2
 8009046:	4770      	bx	lr
 8009048:	4806      	ldr	r0, [pc, #24]	; (8009064 <GetTimeStruct+0x3c>)
 800904a:	4770      	bx	lr
 800904c:	4806      	ldr	r0, [pc, #24]	; (8009068 <GetTimeStruct+0x40>)
 800904e:	4770      	bx	lr
 8009050:	4806      	ldr	r0, [pc, #24]	; (800906c <GetTimeStruct+0x44>)
 8009052:	4770      	bx	lr
 8009054:	4806      	ldr	r0, [pc, #24]	; (8009070 <GetTimeStruct+0x48>)
 8009056:	4770      	bx	lr
 8009058:	4806      	ldr	r0, [pc, #24]	; (8009074 <GetTimeStruct+0x4c>)
 800905a:	4770      	bx	lr
 800905c:	2000c43e 	.word	0x2000c43e
 8009060:	200008e0 	.word	0x200008e0
 8009064:	2000c11f 	.word	0x2000c11f
 8009068:	2000c125 	.word	0x2000c125
 800906c:	20009220 	.word	0x20009220
 8009070:	20003808 	.word	0x20003808
 8009074:	2000c10c 	.word	0x2000c10c

08009078 <GetSaraConfigurationStruct>:
 8009078:	4800      	ldr	r0, [pc, #0]	; (800907c <GetSaraConfigurationStruct+0x4>)
 800907a:	4770      	bx	lr
 800907c:	2000c12c 	.word	0x2000c12c

08009080 <GetErrorFlagsStruct>:
 8009080:	4800      	ldr	r0, [pc, #0]	; (8009084 <GetErrorFlagsStruct+0x4>)
 8009082:	4770      	bx	lr
 8009084:	20000902 	.word	0x20000902

08009088 <GetErrorTimerStruct>:
 8009088:	4b03      	ldr	r3, [pc, #12]	; (8009098 <GetErrorTimerStruct+0x10>)
 800908a:	4a04      	ldr	r2, [pc, #16]	; (800909c <GetErrorTimerStruct+0x14>)
 800908c:	2800      	cmp	r0, #0
 800908e:	bf0c      	ite	eq
 8009090:	4610      	moveq	r0, r2
 8009092:	4618      	movne	r0, r3
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	2000c438 	.word	0x2000c438
 800909c:	200008fc 	.word	0x200008fc

080090a0 <SetServerToDo>:
 80090a0:	b510      	push	{r4, lr}
 80090a2:	2100      	movs	r1, #0
 80090a4:	4614      	mov	r4, r2
 80090a6:	220a      	movs	r2, #10
 80090a8:	f004 fb38 	bl	800d71c <strtol>
 80090ac:	64e0      	str	r0, [r4, #76]	; 0x4c
 80090ae:	2001      	movs	r0, #1
 80090b0:	bd10      	pop	{r4, pc}

080090b2 <SetUpdateFrequency>:
 80090b2:	b510      	push	{r4, lr}
 80090b4:	2100      	movs	r1, #0
 80090b6:	4614      	mov	r4, r2
 80090b8:	220a      	movs	r2, #10
 80090ba:	f004 fb2f 	bl	800d71c <strtol>
 80090be:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80090c2:	2001      	movs	r0, #1
 80090c4:	bd10      	pop	{r4, pc}

080090c6 <SetHourToSend>:
 80090c6:	b510      	push	{r4, lr}
 80090c8:	2100      	movs	r1, #0
 80090ca:	4614      	mov	r4, r2
 80090cc:	220a      	movs	r2, #10
 80090ce:	f004 fb25 	bl	800d71c <strtol>
 80090d2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
 80090d6:	2001      	movs	r0, #1
 80090d8:	bd10      	pop	{r4, pc}

080090da <FirstMessageToResend>:
 80090da:	b510      	push	{r4, lr}
 80090dc:	2100      	movs	r1, #0
 80090de:	4614      	mov	r4, r2
 80090e0:	220a      	movs	r2, #10
 80090e2:	f004 fb1b 	bl	800d71c <strtol>
 80090e6:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 80090ea:	2001      	movs	r0, #1
 80090ec:	bd10      	pop	{r4, pc}

080090ee <LastMessageToResend>:
 80090ee:	b510      	push	{r4, lr}
 80090f0:	2100      	movs	r1, #0
 80090f2:	4614      	mov	r4, r2
 80090f4:	220a      	movs	r2, #10
 80090f6:	f004 fb11 	bl	800d71c <strtol>
 80090fa:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
 80090fe:	2001      	movs	r0, #1
 8009100:	bd10      	pop	{r4, pc}
	...

08009104 <ParseJSMNForHeader>:
 8009104:	b084      	sub	sp, #16
 8009106:	b530      	push	{r4, r5, lr}
 8009108:	b089      	sub	sp, #36	; 0x24
 800910a:	4605      	mov	r5, r0
 800910c:	a80d      	add	r0, sp, #52	; 0x34
 800910e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8009112:	2220      	movs	r2, #32
 8009114:	2100      	movs	r1, #0
 8009116:	4668      	mov	r0, sp
 8009118:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800911a:	f003 fdab 	bl	800cc74 <memset>
 800911e:	b3ad      	cbz	r5, 800918c <ParseJSMNForHeader+0x88>
 8009120:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009122:	1b12      	subs	r2, r2, r4
 8009124:	1e53      	subs	r3, r2, #1
 8009126:	2b1e      	cmp	r3, #30
 8009128:	d830      	bhi.n	800918c <ParseJSMNForHeader+0x88>
 800912a:	1929      	adds	r1, r5, r4
 800912c:	4668      	mov	r0, sp
 800912e:	f004 fa38 	bl	800d5a2 <strncpy>
 8009132:	4921      	ldr	r1, [pc, #132]	; (80091b8 <ParseJSMNForHeader+0xb4>)
 8009134:	4668      	mov	r0, sp
 8009136:	f7f7 f853 	bl	80001e0 <strcmp>
 800913a:	b340      	cbz	r0, 800918e <ParseJSMNForHeader+0x8a>
 800913c:	491f      	ldr	r1, [pc, #124]	; (80091bc <ParseJSMNForHeader+0xb8>)
 800913e:	4668      	mov	r0, sp
 8009140:	f7f7 f84e 	bl	80001e0 <strcmp>
 8009144:	b340      	cbz	r0, 8009198 <ParseJSMNForHeader+0x94>
 8009146:	491e      	ldr	r1, [pc, #120]	; (80091c0 <ParseJSMNForHeader+0xbc>)
 8009148:	4668      	mov	r0, sp
 800914a:	f7f7 f849 	bl	80001e0 <strcmp>
 800914e:	b328      	cbz	r0, 800919c <ParseJSMNForHeader+0x98>
 8009150:	491c      	ldr	r1, [pc, #112]	; (80091c4 <ParseJSMNForHeader+0xc0>)
 8009152:	4668      	mov	r0, sp
 8009154:	f7f7 f844 	bl	80001e0 <strcmp>
 8009158:	b310      	cbz	r0, 80091a0 <ParseJSMNForHeader+0x9c>
 800915a:	491b      	ldr	r1, [pc, #108]	; (80091c8 <ParseJSMNForHeader+0xc4>)
 800915c:	4668      	mov	r0, sp
 800915e:	f7f7 f83f 	bl	80001e0 <strcmp>
 8009162:	b1f8      	cbz	r0, 80091a4 <ParseJSMNForHeader+0xa0>
 8009164:	4919      	ldr	r1, [pc, #100]	; (80091cc <ParseJSMNForHeader+0xc8>)
 8009166:	4668      	mov	r0, sp
 8009168:	f7f7 f83a 	bl	80001e0 <strcmp>
 800916c:	b1e0      	cbz	r0, 80091a8 <ParseJSMNForHeader+0xa4>
 800916e:	4918      	ldr	r1, [pc, #96]	; (80091d0 <ParseJSMNForHeader+0xcc>)
 8009170:	4668      	mov	r0, sp
 8009172:	f7f7 f835 	bl	80001e0 <strcmp>
 8009176:	b1c8      	cbz	r0, 80091ac <ParseJSMNForHeader+0xa8>
 8009178:	4916      	ldr	r1, [pc, #88]	; (80091d4 <ParseJSMNForHeader+0xd0>)
 800917a:	4668      	mov	r0, sp
 800917c:	f7f7 f830 	bl	80001e0 <strcmp>
 8009180:	b1b0      	cbz	r0, 80091b0 <ParseJSMNForHeader+0xac>
 8009182:	4915      	ldr	r1, [pc, #84]	; (80091d8 <ParseJSMNForHeader+0xd4>)
 8009184:	4668      	mov	r0, sp
 8009186:	f7f7 f82b 	bl	80001e0 <strcmp>
 800918a:	b198      	cbz	r0, 80091b4 <ParseJSMNForHeader+0xb0>
 800918c:	2007      	movs	r0, #7
 800918e:	b009      	add	sp, #36	; 0x24
 8009190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009194:	b004      	add	sp, #16
 8009196:	4770      	bx	lr
 8009198:	2002      	movs	r0, #2
 800919a:	e7f8      	b.n	800918e <ParseJSMNForHeader+0x8a>
 800919c:	2003      	movs	r0, #3
 800919e:	e7f6      	b.n	800918e <ParseJSMNForHeader+0x8a>
 80091a0:	2004      	movs	r0, #4
 80091a2:	e7f4      	b.n	800918e <ParseJSMNForHeader+0x8a>
 80091a4:	2005      	movs	r0, #5
 80091a6:	e7f2      	b.n	800918e <ParseJSMNForHeader+0x8a>
 80091a8:	2006      	movs	r0, #6
 80091aa:	e7f0      	b.n	800918e <ParseJSMNForHeader+0x8a>
 80091ac:	2001      	movs	r0, #1
 80091ae:	e7ee      	b.n	800918e <ParseJSMNForHeader+0x8a>
 80091b0:	200a      	movs	r0, #10
 80091b2:	e7ec      	b.n	800918e <ParseJSMNForHeader+0x8a>
 80091b4:	2009      	movs	r0, #9
 80091b6:	e7ea      	b.n	800918e <ParseJSMNForHeader+0x8a>
 80091b8:	0800f83c 	.word	0x0800f83c
 80091bc:	0800f83f 	.word	0x0800f83f
 80091c0:	0800f844 	.word	0x0800f844
 80091c4:	0800f847 	.word	0x0800f847
 80091c8:	0800f852 	.word	0x0800f852
 80091cc:	0800f862 	.word	0x0800f862
 80091d0:	0800f86d 	.word	0x0800f86d
 80091d4:	0800f876 	.word	0x0800f876
 80091d8:	0800f87b 	.word	0x0800f87b

080091dc <ParseSettingsString>:
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
 80091e4:	4682      	mov	sl, r0
 80091e6:	a809      	add	r0, sp, #36	; 0x24
 80091e8:	460f      	mov	r7, r1
 80091ea:	f003 fbd9 	bl	800c9a0 <JsmnInitialize>
 80091ee:	f1ba 0f00 	cmp.w	sl, #0
 80091f2:	f000 80db 	beq.w	80093ac <ParseSettingsString+0x1d0>
 80091f6:	2f00      	cmp	r7, #0
 80091f8:	f000 80d8 	beq.w	80093ac <ParseSettingsString+0x1d0>
 80091fc:	2340      	movs	r3, #64	; 0x40
 80091fe:	aa0c      	add	r2, sp, #48	; 0x30
 8009200:	4651      	mov	r1, sl
 8009202:	a809      	add	r0, sp, #36	; 0x24
 8009204:	f003 fab0 	bl	800c768 <JsmnParse>
 8009208:	4605      	mov	r5, r0
 800920a:	2800      	cmp	r0, #0
 800920c:	f040 80c0 	bne.w	8009390 <ParseSettingsString+0x1b4>
 8009210:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 8009214:	f1b8 0f01 	cmp.w	r8, #1
 8009218:	f040 80ac 	bne.w	8009374 <ParseSettingsString+0x198>
 800921c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009220:	4644      	mov	r4, r8
 8009222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009224:	4598      	cmp	r8, r3
 8009226:	dc01      	bgt.n	800922c <ParseSettingsString+0x50>
 8009228:	2c01      	cmp	r4, #1
 800922a:	d004      	beq.n	8009236 <ParseSettingsString+0x5a>
 800922c:	4620      	mov	r0, r4
 800922e:	f20d 4d54 	addw	sp, sp, #1108	; 0x454
 8009232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	f899 3010 	ldrb.w	r3, [r9, #16]
 800923a:	2b03      	cmp	r3, #3
 800923c:	f040 8090 	bne.w	8009360 <ParseSettingsString+0x184>
 8009240:	ab0c      	add	r3, sp, #48	; 0x30
 8009242:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 8009246:	4650      	mov	r0, sl
 8009248:	68da      	ldr	r2, [r3, #12]
 800924a:	9200      	str	r2, [sp, #0]
 800924c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800924e:	f7ff ff59 	bl	8009104 <ParseJSMNForHeader>
 8009252:	2807      	cmp	r0, #7
 8009254:	9006      	str	r0, [sp, #24]
 8009256:	d07a      	beq.n	800934e <ParseSettingsString+0x172>
 8009258:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800925c:	9305      	str	r3, [sp, #20]
 800925e:	9a05      	ldr	r2, [sp, #20]
 8009260:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8009264:	eba3 0b02 	sub.w	fp, r3, r2
 8009268:	f10b 31ff 	add.w	r1, fp, #4294967295
 800926c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009270:	4291      	cmp	r1, r2
 8009272:	d862      	bhi.n	800933a <ParseSettingsString+0x15e>
 8009274:	f10b 0201 	add.w	r2, fp, #1
 8009278:	4610      	mov	r0, r2
 800927a:	9207      	str	r2, [sp, #28]
 800927c:	f003 fcd0 	bl	800cc20 <malloc>
 8009280:	4606      	mov	r6, r0
 8009282:	2800      	cmp	r0, #0
 8009284:	d04b      	beq.n	800931e <ParseSettingsString+0x142>
 8009286:	9a07      	ldr	r2, [sp, #28]
 8009288:	2100      	movs	r1, #0
 800928a:	f003 fcf3 	bl	800cc74 <memset>
 800928e:	9b05      	ldr	r3, [sp, #20]
 8009290:	4453      	add	r3, sl
 8009292:	4619      	mov	r1, r3
 8009294:	465a      	mov	r2, fp
 8009296:	4630      	mov	r0, r6
 8009298:	f004 f983 	bl	800d5a2 <strncpy>
 800929c:	9b06      	ldr	r3, [sp, #24]
 800929e:	2b0a      	cmp	r3, #10
 80092a0:	d80b      	bhi.n	80092ba <ParseSettingsString+0xde>
 80092a2:	e8df f003 	tbb	[pc, r3]
 80092a6:	2c15      	.short	0x2c15
 80092a8:	20190612 	.word	0x20190612
 80092ac:	360a0a26 	.word	0x360a0a26
 80092b0:	30          	.byte	0x30
 80092b1:	00          	.byte	0x00
 80092b2:	4631      	mov	r1, r6
 80092b4:	4638      	mov	r0, r7
 80092b6:	f004 f96c 	bl	800d592 <strcpy>
 80092ba:	4630      	mov	r0, r6
 80092bc:	f003 fcb8 	bl	800cc30 <free>
 80092c0:	f108 0802 	add.w	r8, r8, #2
 80092c4:	f109 0920 	add.w	r9, r9, #32
 80092c8:	e7ab      	b.n	8009222 <ParseSettingsString+0x46>
 80092ca:	4631      	mov	r1, r6
 80092cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80092ce:	e7f2      	b.n	80092b6 <ParseSettingsString+0xda>
 80092d0:	4631      	mov	r1, r6
 80092d2:	f107 0020 	add.w	r0, r7, #32
 80092d6:	e7ee      	b.n	80092b6 <ParseSettingsString+0xda>
 80092d8:	463a      	mov	r2, r7
 80092da:	4659      	mov	r1, fp
 80092dc:	4630      	mov	r0, r6
 80092de:	f7ff fedf 	bl	80090a0 <SetServerToDo>
 80092e2:	4604      	mov	r4, r0
 80092e4:	e7e9      	b.n	80092ba <ParseSettingsString+0xde>
 80092e6:	463a      	mov	r2, r7
 80092e8:	4659      	mov	r1, fp
 80092ea:	4630      	mov	r0, r6
 80092ec:	f7ff fee1 	bl	80090b2 <SetUpdateFrequency>
 80092f0:	e7f7      	b.n	80092e2 <ParseSettingsString+0x106>
 80092f2:	463a      	mov	r2, r7
 80092f4:	4659      	mov	r1, fp
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7ff fee5 	bl	80090c6 <SetHourToSend>
 80092fc:	e7f1      	b.n	80092e2 <ParseSettingsString+0x106>
 80092fe:	4631      	mov	r1, r6
 8009300:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8009304:	e7d7      	b.n	80092b6 <ParseSettingsString+0xda>
 8009306:	463a      	mov	r2, r7
 8009308:	4659      	mov	r1, fp
 800930a:	4630      	mov	r0, r6
 800930c:	f7ff fee5 	bl	80090da <FirstMessageToResend>
 8009310:	e7e7      	b.n	80092e2 <ParseSettingsString+0x106>
 8009312:	463a      	mov	r2, r7
 8009314:	4659      	mov	r1, fp
 8009316:	4630      	mov	r0, r6
 8009318:	f7ff fee9 	bl	80090ee <LastMessageToResend>
 800931c:	e7e1      	b.n	80092e2 <ParseSettingsString+0x106>
 800931e:	f7ff fe77 	bl	8009010 <GetErrorStruct>
 8009322:	9602      	str	r6, [sp, #8]
 8009324:	9003      	str	r0, [sp, #12]
 8009326:	9601      	str	r6, [sp, #4]
 8009328:	9600      	str	r6, [sp, #0]
 800932a:	2311      	movs	r3, #17
 800932c:	2215      	movs	r2, #21
 800932e:	2113      	movs	r1, #19
 8009330:	201c      	movs	r0, #28
 8009332:	f002 fff2 	bl	800c31a <ErrorAddLog>
 8009336:	2400      	movs	r4, #0
 8009338:	e7c2      	b.n	80092c0 <ParseSettingsString+0xe4>
 800933a:	f7ff fe69 	bl	8009010 <GetErrorStruct>
 800933e:	9502      	str	r5, [sp, #8]
 8009340:	9003      	str	r0, [sp, #12]
 8009342:	9501      	str	r5, [sp, #4]
 8009344:	9500      	str	r5, [sp, #0]
 8009346:	2311      	movs	r3, #17
 8009348:	2215      	movs	r2, #21
 800934a:	2134      	movs	r1, #52	; 0x34
 800934c:	e7f0      	b.n	8009330 <ParseSettingsString+0x154>
 800934e:	f7ff fe5f 	bl	8009010 <GetErrorStruct>
 8009352:	9502      	str	r5, [sp, #8]
 8009354:	9003      	str	r0, [sp, #12]
 8009356:	9501      	str	r5, [sp, #4]
 8009358:	9500      	str	r5, [sp, #0]
 800935a:	2311      	movs	r3, #17
 800935c:	2216      	movs	r2, #22
 800935e:	e7f4      	b.n	800934a <ParseSettingsString+0x16e>
 8009360:	f7ff fe56 	bl	8009010 <GetErrorStruct>
 8009364:	9502      	str	r5, [sp, #8]
 8009366:	9003      	str	r0, [sp, #12]
 8009368:	9501      	str	r5, [sp, #4]
 800936a:	9500      	str	r5, [sp, #0]
 800936c:	2311      	movs	r3, #17
 800936e:	2213      	movs	r2, #19
 8009370:	2135      	movs	r1, #53	; 0x35
 8009372:	e7dd      	b.n	8009330 <ParseSettingsString+0x154>
 8009374:	f7ff fe4c 	bl	8009010 <GetErrorStruct>
 8009378:	9502      	str	r5, [sp, #8]
 800937a:	9003      	str	r0, [sp, #12]
 800937c:	9501      	str	r5, [sp, #4]
 800937e:	9500      	str	r5, [sp, #0]
 8009380:	2311      	movs	r3, #17
 8009382:	2214      	movs	r2, #20
 8009384:	2135      	movs	r1, #53	; 0x35
 8009386:	201c      	movs	r0, #28
 8009388:	f002 ffc7 	bl	800c31a <ErrorAddLog>
 800938c:	462c      	mov	r4, r5
 800938e:	e74d      	b.n	800922c <ParseSettingsString+0x50>
 8009390:	f7ff fe3e 	bl	8009010 <GetErrorStruct>
 8009394:	2400      	movs	r4, #0
 8009396:	9003      	str	r0, [sp, #12]
 8009398:	9402      	str	r4, [sp, #8]
 800939a:	9401      	str	r4, [sp, #4]
 800939c:	9400      	str	r4, [sp, #0]
 800939e:	2311      	movs	r3, #17
 80093a0:	2219      	movs	r2, #25
 80093a2:	2135      	movs	r1, #53	; 0x35
 80093a4:	201c      	movs	r0, #28
 80093a6:	f002 ffb8 	bl	800c31a <ErrorAddLog>
 80093aa:	e73f      	b.n	800922c <ParseSettingsString+0x50>
 80093ac:	f7ff fe30 	bl	8009010 <GetErrorStruct>
 80093b0:	2400      	movs	r4, #0
 80093b2:	2311      	movs	r3, #17
 80093b4:	9003      	str	r0, [sp, #12]
 80093b6:	9402      	str	r4, [sp, #8]
 80093b8:	9401      	str	r4, [sp, #4]
 80093ba:	9400      	str	r4, [sp, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	e7f0      	b.n	80093a2 <ParseSettingsString+0x1c6>

080093c0 <LED_Blink>:
 80093c0:	2140      	movs	r1, #64	; 0x40
 80093c2:	4801      	ldr	r0, [pc, #4]	; (80093c8 <LED_Blink+0x8>)
 80093c4:	f7f8 beab 	b.w	800211e <HAL_GPIO_TogglePin>
 80093c8:	48000800 	.word	0x48000800

080093cc <main>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	f000 fbbc 	bl	8009b4c <InitAll>
 80093d4:	f7ff fe50 	bl	8009078 <GetSaraConfigurationStruct>
 80093d8:	f002 ff38 	bl	800c24c <InitSaraStruct>
 80093dc:	f7ff fe50 	bl	8009080 <GetErrorFlagsStruct>
 80093e0:	f002 ff12 	bl	800c208 <InitErrorStruct>
 80093e4:	f7ff fe18 	bl	8009018 <GetInfoStruct>
 80093e8:	f002 ffe5 	bl	800c3b6 <InitInfoStruct>
 80093ec:	f7ff fe18 	bl	8009020 <GetTempInfoStruct>
 80093f0:	f002 ffe1 	bl	800c3b6 <InitInfoStruct>
 80093f4:	f7ff fe08 	bl	8009008 <GetDataStruct>
 80093f8:	4606      	mov	r6, r0
 80093fa:	f7ff fe09 	bl	8009010 <GetErrorStruct>
 80093fe:	4604      	mov	r4, r0
 8009400:	f7ff fe3e 	bl	8009080 <GetErrorFlagsStruct>
 8009404:	4605      	mov	r5, r0
 8009406:	4630      	mov	r0, r6
 8009408:	f7ff f98c 	bl	8008724 <DataStruct_init>
 800940c:	4620      	mov	r0, r4
 800940e:	f002 ff78 	bl	800c302 <ErrorStruct_init>
 8009412:	f000 fff7 	bl	800a404 <Program_IWDG_Freeze_Shutdown>
 8009416:	4828      	ldr	r0, [pc, #160]	; (80094b8 <main+0xec>)
 8009418:	4c28      	ldr	r4, [pc, #160]	; (80094bc <main+0xf0>)
 800941a:	f003 fff7 	bl	800d40c <puts>
 800941e:	2001      	movs	r0, #1
 8009420:	f000 feba 	bl	800a198 <DisEnableSDPin>
 8009424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009428:	f7f7 fd34 	bl	8000e94 <HAL_Delay>
 800942c:	f7fd ffda 	bl	80073e4 <InitFoldersSD>
 8009430:	2000      	movs	r0, #0
 8009432:	f000 feb1 	bl	800a198 <DisEnableSDPin>
 8009436:	7821      	ldrb	r1, [r4, #0]
 8009438:	4821      	ldr	r0, [pc, #132]	; (80094c0 <main+0xf4>)
 800943a:	f003 ff5f 	bl	800d2fc <iprintf>
 800943e:	4821      	ldr	r0, [pc, #132]	; (80094c4 <main+0xf8>)
 8009440:	f003 ffe4 	bl	800d40c <puts>
 8009444:	7824      	ldrb	r4, [r4, #0]
 8009446:	f7ff fdeb 	bl	8009020 <GetTempInfoStruct>
 800944a:	2300      	movs	r3, #0
 800944c:	9303      	str	r3, [sp, #12]
 800944e:	9302      	str	r3, [sp, #8]
 8009450:	2312      	movs	r3, #18
 8009452:	9004      	str	r0, [sp, #16]
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	9401      	str	r4, [sp, #4]
 8009458:	2316      	movs	r3, #22
 800945a:	2215      	movs	r2, #21
 800945c:	211a      	movs	r1, #26
 800945e:	2017      	movs	r0, #23
 8009460:	f002 ffab 	bl	800c3ba <InfoLogAdd>
 8009464:	f000 ffc6 	bl	800a3f4 <ResetIWDG>
 8009468:	78ab      	ldrb	r3, [r5, #2]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d114      	bne.n	8009498 <main+0xcc>
 800946e:	f7ff fdcb 	bl	8009008 <GetDataStruct>
 8009472:	4604      	mov	r4, r0
 8009474:	f7ff fdcc 	bl	8009010 <GetErrorStruct>
 8009478:	4601      	mov	r1, r0
 800947a:	4620      	mov	r0, r4
 800947c:	f001 fba6 	bl	800abcc <RadioStateMachine>
 8009480:	f7ff fdc2 	bl	8009008 <GetDataStruct>
 8009484:	4604      	mov	r4, r0
 8009486:	f7ff fdc3 	bl	8009010 <GetErrorStruct>
 800948a:	4601      	mov	r1, r0
 800948c:	4620      	mov	r0, r4
 800948e:	f002 f92f 	bl	800b6f0 <SensorStateMachine>
 8009492:	f002 fa39 	bl	800b908 <SleepStateMachine>
 8009496:	e7e5      	b.n	8009464 <main+0x98>
 8009498:	2000      	movs	r0, #0
 800949a:	f7ff fdf5 	bl	8009088 <GetErrorTimerStruct>
 800949e:	4604      	mov	r4, r0
 80094a0:	2001      	movs	r0, #1
 80094a2:	f7ff fdf1 	bl	8009088 <GetErrorTimerStruct>
 80094a6:	4606      	mov	r6, r0
 80094a8:	f7ff fdea 	bl	8009080 <GetErrorFlagsStruct>
 80094ac:	4631      	mov	r1, r6
 80094ae:	4602      	mov	r2, r0
 80094b0:	4620      	mov	r0, r4
 80094b2:	f003 f8c5 	bl	800c640 <ErrorTimerHourlyCheck>
 80094b6:	e7e3      	b.n	8009480 <main+0xb4>
 80094b8:	0800f880 	.word	0x0800f880
 80094bc:	200002b2 	.word	0x200002b2
 80094c0:	0800f89a 	.word	0x0800f89a
 80094c4:	0800f9df 	.word	0x0800f9df

080094c8 <_Error_Handler>:
 80094c8:	e7fe      	b.n	80094c8 <_Error_Handler>
	...

080094cc <DisableSD_Card>:
 80094cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ce:	b087      	sub	sp, #28
 80094d0:	ac06      	add	r4, sp, #24
 80094d2:	2000      	movs	r0, #0
 80094d4:	f000 fe60 	bl	800a198 <DisEnableSDPin>
 80094d8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80094dc:	f844 3d14 	str.w	r3, [r4, #-20]!
 80094e0:	4f0d      	ldr	r7, [pc, #52]	; (8009518 <DisableSD_Card+0x4c>)
 80094e2:	2503      	movs	r5, #3
 80094e4:	2600      	movs	r6, #0
 80094e6:	4621      	mov	r1, r4
 80094e8:	4638      	mov	r0, r7
 80094ea:	9502      	str	r5, [sp, #8]
 80094ec:	9603      	str	r6, [sp, #12]
 80094ee:	f7f8 fcd1 	bl	8001e94 <HAL_GPIO_Init>
 80094f2:	2302      	movs	r3, #2
 80094f4:	9303      	str	r3, [sp, #12]
 80094f6:	4621      	mov	r1, r4
 80094f8:	2380      	movs	r3, #128	; 0x80
 80094fa:	4638      	mov	r0, r7
 80094fc:	9301      	str	r3, [sp, #4]
 80094fe:	9502      	str	r5, [sp, #8]
 8009500:	f7f8 fcc8 	bl	8001e94 <HAL_GPIO_Init>
 8009504:	2304      	movs	r3, #4
 8009506:	4621      	mov	r1, r4
 8009508:	4804      	ldr	r0, [pc, #16]	; (800951c <DisableSD_Card+0x50>)
 800950a:	9502      	str	r5, [sp, #8]
 800950c:	9603      	str	r6, [sp, #12]
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	f7f8 fcc0 	bl	8001e94 <HAL_GPIO_Init>
 8009514:	b007      	add	sp, #28
 8009516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009518:	48000800 	.word	0x48000800
 800951c:	48000c00 	.word	0x48000c00

08009520 <GPIOSetAnalogSensor>:
 8009520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009522:	4c3e      	ldr	r4, [pc, #248]	; (800961c <GPIOSetAnalogSensor+0xfc>)
 8009524:	483e      	ldr	r0, [pc, #248]	; (8009620 <GPIOSetAnalogSensor+0x100>)
 8009526:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009528:	f043 0301 	orr.w	r3, r3, #1
 800952c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800952e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009530:	b08d      	sub	sp, #52	; 0x34
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800953c:	f043 0302 	orr.w	r3, r3, #2
 8009540:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009542:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	9302      	str	r3, [sp, #8]
 800954a:	9b02      	ldr	r3, [sp, #8]
 800954c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800954e:	f043 0304 	orr.w	r3, r3, #4
 8009552:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009554:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009556:	f003 0304 	and.w	r3, r3, #4
 800955a:	9303      	str	r3, [sp, #12]
 800955c:	9b03      	ldr	r3, [sp, #12]
 800955e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009560:	f043 0308 	orr.w	r3, r3, #8
 8009564:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009566:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009568:	f003 0308 	and.w	r3, r3, #8
 800956c:	9304      	str	r3, [sp, #16]
 800956e:	9b04      	ldr	r3, [sp, #16]
 8009570:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009576:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009578:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800957a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800957e:	9305      	str	r3, [sp, #20]
 8009580:	9b05      	ldr	r3, [sp, #20]
 8009582:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009584:	f043 0310 	orr.w	r3, r3, #16
 8009588:	64e3      	str	r3, [r4, #76]	; 0x4c
 800958a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800958c:	f003 0310 	and.w	r3, r3, #16
 8009590:	ad0c      	add	r5, sp, #48	; 0x30
 8009592:	9306      	str	r3, [sp, #24]
 8009594:	2600      	movs	r6, #0
 8009596:	2703      	movs	r7, #3
 8009598:	9b06      	ldr	r3, [sp, #24]
 800959a:	9708      	str	r7, [sp, #32]
 800959c:	f646 7381 	movw	r3, #28545	; 0x6f81
 80095a0:	9609      	str	r6, [sp, #36]	; 0x24
 80095a2:	f845 3d14 	str.w	r3, [r5, #-20]!
 80095a6:	4629      	mov	r1, r5
 80095a8:	f7f8 fc74 	bl	8001e94 <HAL_GPIO_Init>
 80095ac:	4630      	mov	r0, r6
 80095ae:	f000 fdf3 	bl	800a198 <DisEnableSDPin>
 80095b2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80095b6:	4629      	mov	r1, r5
 80095b8:	481a      	ldr	r0, [pc, #104]	; (8009624 <GPIOSetAnalogSensor+0x104>)
 80095ba:	9307      	str	r3, [sp, #28]
 80095bc:	9708      	str	r7, [sp, #32]
 80095be:	9609      	str	r6, [sp, #36]	; 0x24
 80095c0:	f7f8 fc68 	bl	8001e94 <HAL_GPIO_Init>
 80095c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095c8:	4629      	mov	r1, r5
 80095ca:	4817      	ldr	r0, [pc, #92]	; (8009628 <GPIOSetAnalogSensor+0x108>)
 80095cc:	9307      	str	r3, [sp, #28]
 80095ce:	9708      	str	r7, [sp, #32]
 80095d0:	9609      	str	r6, [sp, #36]	; 0x24
 80095d2:	f7f8 fc5f 	bl	8001e94 <HAL_GPIO_Init>
 80095d6:	4629      	mov	r1, r5
 80095d8:	4814      	ldr	r0, [pc, #80]	; (800962c <GPIOSetAnalogSensor+0x10c>)
 80095da:	f7f8 fc5b 	bl	8001e94 <HAL_GPIO_Init>
 80095de:	4629      	mov	r1, r5
 80095e0:	4813      	ldr	r0, [pc, #76]	; (8009630 <GPIOSetAnalogSensor+0x110>)
 80095e2:	f7f8 fc57 	bl	8001e94 <HAL_GPIO_Init>
 80095e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80095e8:	f023 0301 	bic.w	r3, r3, #1
 80095ec:	64e3      	str	r3, [r4, #76]	; 0x4c
 80095ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80095f0:	f023 0302 	bic.w	r3, r3, #2
 80095f4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80095f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80095f8:	f023 0304 	bic.w	r3, r3, #4
 80095fc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80095fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009600:	f023 0308 	bic.w	r3, r3, #8
 8009604:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009606:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800960c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800960e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009610:	f023 0310 	bic.w	r3, r3, #16
 8009614:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009616:	b00d      	add	sp, #52	; 0x34
 8009618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800961a:	bf00      	nop
 800961c:	40021000 	.word	0x40021000
 8009620:	48000400 	.word	0x48000400
 8009624:	48000800 	.word	0x48000800
 8009628:	48000c00 	.word	0x48000c00
 800962c:	48001c00 	.word	0x48001c00
 8009630:	48001000 	.word	0x48001000

08009634 <CheckResetCause>:
 8009634:	4b1c      	ldr	r3, [pc, #112]	; (80096a8 <CheckResetCause+0x74>)
 8009636:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800963a:	2a00      	cmp	r2, #0
 800963c:	4a1b      	ldr	r2, [pc, #108]	; (80096ac <CheckResetCause+0x78>)
 800963e:	da08      	bge.n	8009652 <CheckResetCause+0x1e>
 8009640:	2101      	movs	r1, #1
 8009642:	7011      	strb	r1, [r2, #0]
 8009644:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009648:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800964c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8009650:	4770      	bx	lr
 8009652:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009656:	0048      	lsls	r0, r1, #1
 8009658:	d501      	bpl.n	800965e <CheckResetCause+0x2a>
 800965a:	2102      	movs	r1, #2
 800965c:	e7f1      	b.n	8009642 <CheckResetCause+0xe>
 800965e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009662:	0089      	lsls	r1, r1, #2
 8009664:	d501      	bpl.n	800966a <CheckResetCause+0x36>
 8009666:	2103      	movs	r1, #3
 8009668:	e7eb      	b.n	8009642 <CheckResetCause+0xe>
 800966a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800966e:	00c8      	lsls	r0, r1, #3
 8009670:	d501      	bpl.n	8009676 <CheckResetCause+0x42>
 8009672:	2104      	movs	r1, #4
 8009674:	e7e5      	b.n	8009642 <CheckResetCause+0xe>
 8009676:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800967a:	0149      	lsls	r1, r1, #5
 800967c:	d501      	bpl.n	8009682 <CheckResetCause+0x4e>
 800967e:	2105      	movs	r1, #5
 8009680:	e7df      	b.n	8009642 <CheckResetCause+0xe>
 8009682:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009686:	0108      	lsls	r0, r1, #4
 8009688:	d501      	bpl.n	800968e <CheckResetCause+0x5a>
 800968a:	2106      	movs	r1, #6
 800968c:	e7d9      	b.n	8009642 <CheckResetCause+0xe>
 800968e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009692:	01c9      	lsls	r1, r1, #7
 8009694:	d501      	bpl.n	800969a <CheckResetCause+0x66>
 8009696:	2107      	movs	r1, #7
 8009698:	e7d3      	b.n	8009642 <CheckResetCause+0xe>
 800969a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800969e:	f011 7100 	ands.w	r1, r1, #33554432	; 0x2000000
 80096a2:	bf18      	it	ne
 80096a4:	2108      	movne	r1, #8
 80096a6:	e7cc      	b.n	8009642 <CheckResetCause+0xe>
 80096a8:	40021000 	.word	0x40021000
 80096ac:	200002b2 	.word	0x200002b2

080096b0 <SystemClock_Config>:
 80096b0:	b500      	push	{lr}
 80096b2:	b0b1      	sub	sp, #196	; 0xc4
 80096b4:	f7f9 fa18 	bl	8002ae8 <HAL_PWR_EnableBkUpAccess>
 80096b8:	4a3d      	ldr	r2, [pc, #244]	; (80097b0 <SystemClock_Config+0x100>)
 80096ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80096be:	f023 0318 	bic.w	r3, r3, #24
 80096c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096c6:	2201      	movs	r2, #1
 80096c8:	2305      	movs	r3, #5
 80096ca:	9305      	str	r3, [sp, #20]
 80096cc:	9207      	str	r2, [sp, #28]
 80096ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096d2:	9211      	str	r2, [sp, #68]	; 0x44
 80096d4:	2208      	movs	r2, #8
 80096d6:	9306      	str	r3, [sp, #24]
 80096d8:	2103      	movs	r1, #3
 80096da:	2302      	movs	r3, #2
 80096dc:	9212      	str	r2, [sp, #72]	; 0x48
 80096de:	a805      	add	r0, sp, #20
 80096e0:	2207      	movs	r2, #7
 80096e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80096e4:	9110      	str	r1, [sp, #64]	; 0x40
 80096e6:	9213      	str	r2, [sp, #76]	; 0x4c
 80096e8:	9314      	str	r3, [sp, #80]	; 0x50
 80096ea:	9315      	str	r3, [sp, #84]	; 0x54
 80096ec:	f7f9 fb06 	bl	8002cfc <HAL_RCC_OscConfig>
 80096f0:	b120      	cbz	r0, 80096fc <SystemClock_Config+0x4c>
 80096f2:	f240 2131 	movw	r1, #561	; 0x231
 80096f6:	482f      	ldr	r0, [pc, #188]	; (80097b4 <SystemClock_Config+0x104>)
 80096f8:	f7ff fee6 	bl	80094c8 <_Error_Handler>
 80096fc:	200f      	movs	r0, #15
 80096fe:	2303      	movs	r3, #3
 8009700:	e88d 0009 	stmia.w	sp, {r0, r3}
 8009704:	2101      	movs	r1, #1
 8009706:	2300      	movs	r3, #0
 8009708:	4668      	mov	r0, sp
 800970a:	9302      	str	r3, [sp, #8]
 800970c:	9303      	str	r3, [sp, #12]
 800970e:	9304      	str	r3, [sp, #16]
 8009710:	f7f9 fd52 	bl	80031b8 <HAL_RCC_ClockConfig>
 8009714:	b120      	cbz	r0, 8009720 <SystemClock_Config+0x70>
 8009716:	f240 213f 	movw	r1, #575	; 0x23f
 800971a:	4826      	ldr	r0, [pc, #152]	; (80097b4 <SystemClock_Config+0x104>)
 800971c:	f7ff fed4 	bl	80094c8 <_Error_Handler>
 8009720:	4b25      	ldr	r3, [pc, #148]	; (80097b8 <SystemClock_Config+0x108>)
 8009722:	9316      	str	r3, [sp, #88]	; 0x58
 8009724:	2300      	movs	r3, #0
 8009726:	931f      	str	r3, [sp, #124]	; 0x7c
 8009728:	9322      	str	r3, [sp, #136]	; 0x88
 800972a:	9323      	str	r3, [sp, #140]	; 0x8c
 800972c:	9324      	str	r3, [sp, #144]	; 0x90
 800972e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8009732:	9327      	str	r3, [sp, #156]	; 0x9c
 8009734:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009738:	932d      	str	r3, [sp, #180]	; 0xb4
 800973a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800973e:	932f      	str	r3, [sp, #188]	; 0xbc
 8009740:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009744:	932b      	str	r3, [sp, #172]	; 0xac
 8009746:	2303      	movs	r3, #3
 8009748:	9317      	str	r3, [sp, #92]	; 0x5c
 800974a:	2301      	movs	r3, #1
 800974c:	9318      	str	r3, [sp, #96]	; 0x60
 800974e:	2308      	movs	r3, #8
 8009750:	9319      	str	r3, [sp, #100]	; 0x64
 8009752:	2307      	movs	r3, #7
 8009754:	931a      	str	r3, [sp, #104]	; 0x68
 8009756:	2302      	movs	r3, #2
 8009758:	931b      	str	r3, [sp, #108]	; 0x6c
 800975a:	931c      	str	r3, [sp, #112]	; 0x70
 800975c:	a816      	add	r0, sp, #88	; 0x58
 800975e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8009762:	931d      	str	r3, [sp, #116]	; 0x74
 8009764:	f7f9 fe68 	bl	8003438 <HAL_RCCEx_PeriphCLKConfig>
 8009768:	b120      	cbz	r0, 8009774 <SystemClock_Config+0xc4>
 800976a:	f240 2157 	movw	r1, #599	; 0x257
 800976e:	4811      	ldr	r0, [pc, #68]	; (80097b4 <SystemClock_Config+0x104>)
 8009770:	f7ff feaa 	bl	80094c8 <_Error_Handler>
 8009774:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009778:	f7f9 f9c6 	bl	8002b08 <HAL_PWREx_ControlVoltageScaling>
 800977c:	b120      	cbz	r0, 8009788 <SystemClock_Config+0xd8>
 800977e:	f240 215e 	movw	r1, #606	; 0x25e
 8009782:	480c      	ldr	r0, [pc, #48]	; (80097b4 <SystemClock_Config+0x104>)
 8009784:	f7ff fea0 	bl	80094c8 <_Error_Handler>
 8009788:	f7f9 fda6 	bl	80032d8 <HAL_RCC_GetHCLKFreq>
 800978c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009790:	fbb0 f0f3 	udiv	r0, r0, r3
 8009794:	f7f8 f8f8 	bl	8001988 <HAL_SYSTICK_Config>
 8009798:	2004      	movs	r0, #4
 800979a:	f7f8 f90b 	bl	80019b4 <HAL_SYSTICK_CLKSourceConfig>
 800979e:	2200      	movs	r2, #0
 80097a0:	4611      	mov	r1, r2
 80097a2:	f04f 30ff 	mov.w	r0, #4294967295
 80097a6:	f7f8 f8af 	bl	8001908 <HAL_NVIC_SetPriority>
 80097aa:	b031      	add	sp, #196	; 0xc4
 80097ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80097b0:	40021000 	.word	0x40021000
 80097b4:	0800f8fb 	.word	0x0800f8fb
 80097b8:	000a42e2 	.word	0x000a42e2

080097bc <SystemSleepAndWakeUp>:
 80097bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c0:	4f6d      	ldr	r7, [pc, #436]	; (8009978 <SystemSleepAndWakeUp+0x1bc>)
 80097c2:	4c6e      	ldr	r4, [pc, #440]	; (800997c <SystemSleepAndWakeUp+0x1c0>)
 80097c4:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8009994 <SystemSleepAndWakeUp+0x1d8>
 80097c8:	b08c      	sub	sp, #48	; 0x30
 80097ca:	2200      	movs	r2, #0
 80097cc:	4638      	mov	r0, r7
 80097ce:	2102      	movs	r1, #2
 80097d0:	f7f8 fca0 	bl	8002114 <HAL_GPIO_WritePin>
 80097d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80097d6:	f043 0301 	orr.w	r3, r3, #1
 80097da:	64e3      	str	r3, [r4, #76]	; 0x4c
 80097dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	9b01      	ldr	r3, [sp, #4]
 80097e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80097e8:	f043 0302 	orr.w	r3, r3, #2
 80097ec:	64e3      	str	r3, [r4, #76]	; 0x4c
 80097ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80097f0:	f003 0302 	and.w	r3, r3, #2
 80097f4:	9302      	str	r3, [sp, #8]
 80097f6:	9b02      	ldr	r3, [sp, #8]
 80097f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80097fa:	f043 0304 	orr.w	r3, r3, #4
 80097fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009800:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009802:	f003 0304 	and.w	r3, r3, #4
 8009806:	9303      	str	r3, [sp, #12]
 8009808:	9b03      	ldr	r3, [sp, #12]
 800980a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800980c:	f043 0308 	orr.w	r3, r3, #8
 8009810:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009812:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009814:	f003 0308 	and.w	r3, r3, #8
 8009818:	9304      	str	r3, [sp, #16]
 800981a:	9b04      	ldr	r3, [sp, #16]
 800981c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800981e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009822:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009824:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800982a:	9305      	str	r3, [sp, #20]
 800982c:	9b05      	ldr	r3, [sp, #20]
 800982e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009830:	f043 0310 	orr.w	r3, r3, #16
 8009834:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009836:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009838:	f003 0310 	and.w	r3, r3, #16
 800983c:	ad0c      	add	r5, sp, #48	; 0x30
 800983e:	9306      	str	r3, [sp, #24]
 8009840:	2603      	movs	r6, #3
 8009842:	f04f 0900 	mov.w	r9, #0
 8009846:	9b06      	ldr	r3, [sp, #24]
 8009848:	9608      	str	r6, [sp, #32]
 800984a:	f64f 7331 	movw	r3, #65329	; 0xff31
 800984e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009852:	f845 3d14 	str.w	r3, [r5, #-20]!
 8009856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800985a:	4629      	mov	r1, r5
 800985c:	f7f8 fb1a 	bl	8001e94 <HAL_GPIO_Init>
 8009860:	f04f 0802 	mov.w	r8, #2
 8009864:	23ce      	movs	r3, #206	; 0xce
 8009866:	4629      	mov	r1, r5
 8009868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800986c:	9307      	str	r3, [sp, #28]
 800986e:	9608      	str	r6, [sp, #32]
 8009870:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8009874:	f7f8 fb0e 	bl	8001e94 <HAL_GPIO_Init>
 8009878:	f64f 739f 	movw	r3, #65439	; 0xff9f
 800987c:	4629      	mov	r1, r5
 800987e:	4638      	mov	r0, r7
 8009880:	9307      	str	r3, [sp, #28]
 8009882:	9608      	str	r6, [sp, #32]
 8009884:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009888:	f7f8 fb04 	bl	8001e94 <HAL_GPIO_Init>
 800988c:	2360      	movs	r3, #96	; 0x60
 800988e:	4629      	mov	r1, r5
 8009890:	4638      	mov	r0, r7
 8009892:	9307      	str	r3, [sp, #28]
 8009894:	9608      	str	r6, [sp, #32]
 8009896:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800989a:	f7f8 fafb 	bl	8001e94 <HAL_GPIO_Init>
 800989e:	4648      	mov	r0, r9
 80098a0:	f000 fc7a 	bl	800a198 <DisEnableSDPin>
 80098a4:	f64f 737b 	movw	r3, #65403	; 0xff7b
 80098a8:	4629      	mov	r1, r5
 80098aa:	4650      	mov	r0, sl
 80098ac:	9307      	str	r3, [sp, #28]
 80098ae:	9608      	str	r6, [sp, #32]
 80098b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80098b4:	f7f8 faee 	bl	8001e94 <HAL_GPIO_Init>
 80098b8:	2384      	movs	r3, #132	; 0x84
 80098ba:	4629      	mov	r1, r5
 80098bc:	4650      	mov	r0, sl
 80098be:	9307      	str	r3, [sp, #28]
 80098c0:	9608      	str	r6, [sp, #32]
 80098c2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80098c6:	f7f8 fae5 	bl	8001e94 <HAL_GPIO_Init>
 80098ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098ce:	4629      	mov	r1, r5
 80098d0:	482b      	ldr	r0, [pc, #172]	; (8009980 <SystemSleepAndWakeUp+0x1c4>)
 80098d2:	9307      	str	r3, [sp, #28]
 80098d4:	9608      	str	r6, [sp, #32]
 80098d6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80098da:	f7f8 fadb 	bl	8001e94 <HAL_GPIO_Init>
 80098de:	4629      	mov	r1, r5
 80098e0:	4828      	ldr	r0, [pc, #160]	; (8009984 <SystemSleepAndWakeUp+0x1c8>)
 80098e2:	f7f8 fad7 	bl	8001e94 <HAL_GPIO_Init>
 80098e6:	4629      	mov	r1, r5
 80098e8:	4827      	ldr	r0, [pc, #156]	; (8009988 <SystemSleepAndWakeUp+0x1cc>)
 80098ea:	f7f8 fad3 	bl	8001e94 <HAL_GPIO_Init>
 80098ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80098f0:	f023 0301 	bic.w	r3, r3, #1
 80098f4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80098f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80098f8:	f023 0302 	bic.w	r3, r3, #2
 80098fc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80098fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009900:	f023 0304 	bic.w	r3, r3, #4
 8009904:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009906:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009908:	f023 0308 	bic.w	r3, r3, #8
 800990c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800990e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009914:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009916:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009918:	f023 0310 	bic.w	r3, r3, #16
 800991c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800991e:	4c1b      	ldr	r4, [pc, #108]	; (800998c <SystemSleepAndWakeUp+0x1d0>)
 8009920:	f000 fd42 	bl	800a3a8 <MX_I2C1_DeInit>
 8009924:	f000 fd46 	bl	800a3b4 <MX_I2C2_DeInit>
 8009928:	f001 f894 	bl	800aa54 <MX_LPUART1_UART_DeInit>
 800992c:	f7fd fcee 	bl	800730c <MX_ADC_DeInit>
 8009930:	4620      	mov	r0, r4
 8009932:	f7fa f9be 	bl	8003cb2 <HAL_RTCEx_DeactivateWakeUpTimer>
 8009936:	2001      	movs	r0, #1
 8009938:	f7f9 f91a 	bl	8002b70 <HAL_PWREx_EnterSTOP2Mode>
 800993c:	6822      	ldr	r2, [r4, #0]
 800993e:	68d3      	ldr	r3, [r2, #12]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8009946:	60d3      	str	r3, [r2, #12]
 8009948:	4b11      	ldr	r3, [pc, #68]	; (8009990 <SystemSleepAndWakeUp+0x1d4>)
 800994a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800994e:	615a      	str	r2, [r3, #20]
 8009950:	4620      	mov	r0, r4
 8009952:	f7fa f9ae 	bl	8003cb2 <HAL_RTCEx_DeactivateWakeUpTimer>
 8009956:	f7ff feab 	bl	80096b0 <SystemClock_Config>
 800995a:	f000 f9cb 	bl	8009cf4 <MX_GPIO_Init>
 800995e:	f000 ffb1 	bl	800a8c4 <MX_LPUART1_UART_Init>
 8009962:	f000 ffcf 	bl	800a904 <MX_USART2_UART_Init>
 8009966:	2201      	movs	r2, #1
 8009968:	4641      	mov	r1, r8
 800996a:	4638      	mov	r0, r7
 800996c:	f7f8 fbd2 	bl	8002114 <HAL_GPIO_WritePin>
 8009970:	b00c      	add	sp, #48	; 0x30
 8009972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009976:	bf00      	nop
 8009978:	48000400 	.word	0x48000400
 800997c:	40021000 	.word	0x40021000
 8009980:	48000c00 	.word	0x48000c00
 8009984:	48001c00 	.word	0x48001c00
 8009988:	48001000 	.word	0x48001000
 800998c:	2000c5b4 	.word	0x2000c5b4
 8009990:	40010400 	.word	0x40010400
 8009994:	48000800 	.word	0x48000800

08009998 <EnterStopRadioNetwork>:
 8009998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999c:	4857      	ldr	r0, [pc, #348]	; (8009afc <EnterStopRadioNetwork+0x164>)
 800999e:	4c58      	ldr	r4, [pc, #352]	; (8009b00 <EnterStopRadioNetwork+0x168>)
 80099a0:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8009b1c <EnterStopRadioNetwork+0x184>
 80099a4:	b08c      	sub	sp, #48	; 0x30
 80099a6:	f003 fd31 	bl	800d40c <puts>
 80099aa:	2001      	movs	r0, #1
 80099ac:	f000 feb6 	bl	800a71c <RTC_SetAlarmB>
 80099b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099b2:	f043 0301 	orr.w	r3, r3, #1
 80099b6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80099b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	9301      	str	r3, [sp, #4]
 80099c0:	9b01      	ldr	r3, [sp, #4]
 80099c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099c4:	f043 0302 	orr.w	r3, r3, #2
 80099c8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80099ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	9302      	str	r3, [sp, #8]
 80099d2:	9b02      	ldr	r3, [sp, #8]
 80099d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099d6:	f043 0304 	orr.w	r3, r3, #4
 80099da:	64e3      	str	r3, [r4, #76]	; 0x4c
 80099dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099de:	f003 0304 	and.w	r3, r3, #4
 80099e2:	9303      	str	r3, [sp, #12]
 80099e4:	9b03      	ldr	r3, [sp, #12]
 80099e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099e8:	f043 0308 	orr.w	r3, r3, #8
 80099ec:	64e3      	str	r3, [r4, #76]	; 0x4c
 80099ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	9304      	str	r3, [sp, #16]
 80099f6:	9b04      	ldr	r3, [sp, #16]
 80099f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009a00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a06:	9305      	str	r3, [sp, #20]
 8009a08:	9b05      	ldr	r3, [sp, #20]
 8009a0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a0c:	f043 0310 	orr.w	r3, r3, #16
 8009a10:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009a12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a14:	ad0c      	add	r5, sp, #48	; 0x30
 8009a16:	f003 0310 	and.w	r3, r3, #16
 8009a1a:	2600      	movs	r6, #0
 8009a1c:	2703      	movs	r7, #3
 8009a1e:	9306      	str	r3, [sp, #24]
 8009a20:	9b06      	ldr	r3, [sp, #24]
 8009a22:	9708      	str	r7, [sp, #32]
 8009a24:	9609      	str	r6, [sp, #36]	; 0x24
 8009a26:	f845 6d14 	str.w	r6, [r5, #-20]!
 8009a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a2e:	4629      	mov	r1, r5
 8009a30:	f7f8 fa30 	bl	8001e94 <HAL_GPIO_Init>
 8009a34:	4630      	mov	r0, r6
 8009a36:	f000 fbaf 	bl	800a198 <DisEnableSDPin>
 8009a3a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8009a3e:	4629      	mov	r1, r5
 8009a40:	4640      	mov	r0, r8
 8009a42:	9307      	str	r3, [sp, #28]
 8009a44:	9708      	str	r7, [sp, #32]
 8009a46:	9609      	str	r6, [sp, #36]	; 0x24
 8009a48:	f7f8 fa24 	bl	8001e94 <HAL_GPIO_Init>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a50:	4629      	mov	r1, r5
 8009a52:	2380      	movs	r3, #128	; 0x80
 8009a54:	4640      	mov	r0, r8
 8009a56:	9307      	str	r3, [sp, #28]
 8009a58:	9708      	str	r7, [sp, #32]
 8009a5a:	f7f8 fa1b 	bl	8001e94 <HAL_GPIO_Init>
 8009a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a62:	4629      	mov	r1, r5
 8009a64:	4827      	ldr	r0, [pc, #156]	; (8009b04 <EnterStopRadioNetwork+0x16c>)
 8009a66:	9307      	str	r3, [sp, #28]
 8009a68:	9708      	str	r7, [sp, #32]
 8009a6a:	9609      	str	r6, [sp, #36]	; 0x24
 8009a6c:	f7f8 fa12 	bl	8001e94 <HAL_GPIO_Init>
 8009a70:	4629      	mov	r1, r5
 8009a72:	4825      	ldr	r0, [pc, #148]	; (8009b08 <EnterStopRadioNetwork+0x170>)
 8009a74:	f7f8 fa0e 	bl	8001e94 <HAL_GPIO_Init>
 8009a78:	4629      	mov	r1, r5
 8009a7a:	4824      	ldr	r0, [pc, #144]	; (8009b0c <EnterStopRadioNetwork+0x174>)
 8009a7c:	f7f8 fa0a 	bl	8001e94 <HAL_GPIO_Init>
 8009a80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a82:	f023 0301 	bic.w	r3, r3, #1
 8009a86:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009a88:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a8a:	f023 0302 	bic.w	r3, r3, #2
 8009a8e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009a90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a92:	f023 0304 	bic.w	r3, r3, #4
 8009a96:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009a98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a9a:	f023 0308 	bic.w	r3, r3, #8
 8009a9e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009aa0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aa6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009aa8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009aaa:	f023 0310 	bic.w	r3, r3, #16
 8009aae:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009ab0:	4c17      	ldr	r4, [pc, #92]	; (8009b10 <EnterStopRadioNetwork+0x178>)
 8009ab2:	f000 ffcf 	bl	800aa54 <MX_LPUART1_UART_DeInit>
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f7fa f8fb 	bl	8003cb2 <HAL_RTCEx_DeactivateWakeUpTimer>
 8009abc:	2001      	movs	r0, #1
 8009abe:	f7f9 f857 	bl	8002b70 <HAL_PWREx_EnterSTOP2Mode>
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	68d3      	ldr	r3, [r2, #12]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8009acc:	60d3      	str	r3, [r2, #12]
 8009ace:	4b11      	ldr	r3, [pc, #68]	; (8009b14 <EnterStopRadioNetwork+0x17c>)
 8009ad0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ad4:	615a      	str	r2, [r3, #20]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f7fa f8eb 	bl	8003cb2 <HAL_RTCEx_DeactivateWakeUpTimer>
 8009adc:	f7ff fde8 	bl	80096b0 <SystemClock_Config>
 8009ae0:	f000 f9c4 	bl	8009e6c <GPIOInitRadio>
 8009ae4:	f000 feee 	bl	800a8c4 <MX_LPUART1_UART_Init>
 8009ae8:	f000 ff0c 	bl	800a904 <MX_USART2_UART_Init>
 8009aec:	f000 fcc2 	bl	800a474 <MX_LPTIM1_Init>
 8009af0:	4809      	ldr	r0, [pc, #36]	; (8009b18 <EnterStopRadioNetwork+0x180>)
 8009af2:	f003 fc8b 	bl	800d40c <puts>
 8009af6:	b00c      	add	sp, #48	; 0x30
 8009af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009afc:	0800f8b1 	.word	0x0800f8b1
 8009b00:	40021000 	.word	0x40021000
 8009b04:	48000c00 	.word	0x48000c00
 8009b08:	48001c00 	.word	0x48001c00
 8009b0c:	48001000 	.word	0x48001000
 8009b10:	2000c5b4 	.word	0x2000c5b4
 8009b14:	40010400 	.word	0x40010400
 8009b18:	0800f8f4 	.word	0x0800f8f4
 8009b1c:	48000800 	.word	0x48000800

08009b20 <SleepForApproxMs>:
 8009b20:	b510      	push	{r4, lr}
 8009b22:	4c08      	ldr	r4, [pc, #32]	; (8009b44 <SleepForApproxMs+0x24>)
 8009b24:	0142      	lsls	r2, r0, #5
 8009b26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f7f8 ff4e 	bl	80029cc <HAL_LPTIM_TimeOut_Start_IT>
 8009b30:	2001      	movs	r0, #1
 8009b32:	f7f9 f81d 	bl	8002b70 <HAL_PWREx_EnterSTOP2Mode>
 8009b36:	f7ff fdbb 	bl	80096b0 <SystemClock_Config>
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b40:	f7f8 bf60 	b.w	8002a04 <HAL_LPTIM_TimeOut_Stop_IT>
 8009b44:	2000c57c 	.word	0x2000c57c

08009b48 <SleepForApproxMsSpectra>:
 8009b48:	f7ff bfea 	b.w	8009b20 <SleepForApproxMs>

08009b4c <InitAll>:
 8009b4c:	b508      	push	{r3, lr}
 8009b4e:	f7f7 f981 	bl	8000e54 <HAL_Init>
 8009b52:	f7ff fdad 	bl	80096b0 <SystemClock_Config>
 8009b56:	f7ff fd6d 	bl	8009634 <CheckResetCause>
 8009b5a:	f000 f8cb 	bl	8009cf4 <MX_GPIO_Init>
 8009b5e:	f000 f899 	bl	8009c94 <MX_CRC_Init>
 8009b62:	f000 fb83 	bl	800a26c <MX_I2C2_Init>
 8009b66:	f000 fcc3 	bl	800a4f0 <MX_RTC_Init>
 8009b6a:	f000 feab 	bl	800a8c4 <MX_LPUART1_UART_Init>
 8009b6e:	f000 fec9 	bl	800a904 <MX_USART2_UART_Init>
 8009b72:	f000 fb47 	bl	800a204 <MX_I2C1_Init>
 8009b76:	f000 f819 	bl	8009bac <MX_ADC1_Init>
 8009b7a:	f000 fc7b 	bl	800a474 <MX_LPTIM1_Init>
 8009b7e:	4b09      	ldr	r3, [pc, #36]	; (8009ba4 <InitAll+0x58>)
 8009b80:	2208      	movs	r2, #8
 8009b82:	621a      	str	r2, [r3, #32]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	f042 0220 	orr.w	r2, r2, #32
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	f7fe f93e 	bl	8007e0c <MX_FATFS_Init>
 8009b90:	f7fe f9b4 	bl	8007efc <MX_SDMMC1_SD_Init>
 8009b94:	4804      	ldr	r0, [pc, #16]	; (8009ba8 <InitAll+0x5c>)
 8009b96:	f7fe f9c1 	bl	8007f1c <HAL_SD_MspInit>
 8009b9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009b9e:	f000 bc0f 	b.w	800a3c0 <MX_IWDG_Init>
 8009ba2:	bf00      	nop
 8009ba4:	40004400 	.word	0x40004400
 8009ba8:	20000854 	.word	0x20000854

08009bac <MX_ADC1_Init>:
 8009bac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009bae:	4819      	ldr	r0, [pc, #100]	; (8009c14 <MX_ADC1_Init+0x68>)
 8009bb0:	4b19      	ldr	r3, [pc, #100]	; (8009c18 <MX_ADC1_Init+0x6c>)
 8009bb2:	6003      	str	r3, [r0, #0]
 8009bb4:	2204      	movs	r2, #4
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	6142      	str	r2, [r0, #20]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	6043      	str	r3, [r0, #4]
 8009bbe:	6083      	str	r3, [r0, #8]
 8009bc0:	60c3      	str	r3, [r0, #12]
 8009bc2:	6103      	str	r3, [r0, #16]
 8009bc4:	6183      	str	r3, [r0, #24]
 8009bc6:	61c3      	str	r3, [r0, #28]
 8009bc8:	6202      	str	r2, [r0, #32]
 8009bca:	6243      	str	r3, [r0, #36]	; 0x24
 8009bcc:	6282      	str	r2, [r0, #40]	; 0x28
 8009bce:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009bd0:	6303      	str	r3, [r0, #48]	; 0x30
 8009bd2:	6343      	str	r3, [r0, #52]	; 0x34
 8009bd4:	6383      	str	r3, [r0, #56]	; 0x38
 8009bd6:	63c3      	str	r3, [r0, #60]	; 0x3c
 8009bd8:	f7f7 f992 	bl	8000f00 <HAL_ADC_Init>
 8009bdc:	b118      	cbz	r0, 8009be6 <MX_ADC1_Init+0x3a>
 8009bde:	2156      	movs	r1, #86	; 0x56
 8009be0:	480e      	ldr	r0, [pc, #56]	; (8009c1c <MX_ADC1_Init+0x70>)
 8009be2:	f7ff fc71 	bl	80094c8 <_Error_Handler>
 8009be6:	4a0e      	ldr	r2, [pc, #56]	; (8009c20 <MX_ADC1_Init+0x74>)
 8009be8:	480a      	ldr	r0, [pc, #40]	; (8009c14 <MX_ADC1_Init+0x68>)
 8009bea:	2306      	movs	r3, #6
 8009bec:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009bf0:	227f      	movs	r2, #127	; 0x7f
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9203      	str	r2, [sp, #12]
 8009bf6:	4669      	mov	r1, sp
 8009bf8:	2204      	movs	r2, #4
 8009bfa:	9302      	str	r3, [sp, #8]
 8009bfc:	9204      	str	r2, [sp, #16]
 8009bfe:	9305      	str	r3, [sp, #20]
 8009c00:	f7f7 fa9a 	bl	8001138 <HAL_ADC_ConfigChannel>
 8009c04:	b118      	cbz	r0, 8009c0e <MX_ADC1_Init+0x62>
 8009c06:	2163      	movs	r1, #99	; 0x63
 8009c08:	4804      	ldr	r0, [pc, #16]	; (8009c1c <MX_ADC1_Init+0x70>)
 8009c0a:	f7ff fc5d 	bl	80094c8 <_Error_Handler>
 8009c0e:	b007      	add	sp, #28
 8009c10:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c14:	2000c444 	.word	0x2000c444
 8009c18:	50040000 	.word	0x50040000
 8009c1c:	0800f916 	.word	0x0800f916
 8009c20:	10c00010 	.word	0x10c00010

08009c24 <HAL_ADC_MspInit>:
 8009c24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009c26:	6802      	ldr	r2, [r0, #0]
 8009c28:	4b0e      	ldr	r3, [pc, #56]	; (8009c64 <HAL_ADC_MspInit+0x40>)
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d116      	bne.n	8009c5c <HAL_ADC_MspInit+0x38>
 8009c2e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8009c32:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
 8009c36:	a901      	add	r1, sp, #4
 8009c38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c3a:	480b      	ldr	r0, [pc, #44]	; (8009c68 <HAL_ADC_MspInit+0x44>)
 8009c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c40:	64da      	str	r2, [r3, #76]	; 0x4c
 8009c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	9b00      	ldr	r3, [sp, #0]
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	230b      	movs	r3, #11
 8009c52:	9302      	str	r3, [sp, #8]
 8009c54:	2300      	movs	r3, #0
 8009c56:	9303      	str	r3, [sp, #12]
 8009c58:	f7f8 f91c 	bl	8001e94 <HAL_GPIO_Init>
 8009c5c:	b007      	add	sp, #28
 8009c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c62:	bf00      	nop
 8009c64:	50040000 	.word	0x50040000
 8009c68:	48000800 	.word	0x48000800

08009c6c <HAL_ADC_MspDeInit>:
 8009c6c:	6802      	ldr	r2, [r0, #0]
 8009c6e:	4b06      	ldr	r3, [pc, #24]	; (8009c88 <HAL_ADC_MspDeInit+0x1c>)
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d108      	bne.n	8009c86 <HAL_ADC_MspDeInit+0x1a>
 8009c74:	4a05      	ldr	r2, [pc, #20]	; (8009c8c <HAL_ADC_MspDeInit+0x20>)
 8009c76:	4806      	ldr	r0, [pc, #24]	; (8009c90 <HAL_ADC_MspDeInit+0x24>)
 8009c78:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c80:	2108      	movs	r1, #8
 8009c82:	f7f8 b9c9 	b.w	8002018 <HAL_GPIO_DeInit>
 8009c86:	4770      	bx	lr
 8009c88:	50040000 	.word	0x50040000
 8009c8c:	40021000 	.word	0x40021000
 8009c90:	48000800 	.word	0x48000800

08009c94 <MX_CRC_Init>:
 8009c94:	480a      	ldr	r0, [pc, #40]	; (8009cc0 <MX_CRC_Init+0x2c>)
 8009c96:	b508      	push	{r3, lr}
 8009c98:	4b0a      	ldr	r3, [pc, #40]	; (8009cc4 <MX_CRC_Init+0x30>)
 8009c9a:	6003      	str	r3, [r0, #0]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	7103      	strb	r3, [r0, #4]
 8009ca0:	7143      	strb	r3, [r0, #5]
 8009ca2:	6143      	str	r3, [r0, #20]
 8009ca4:	6183      	str	r3, [r0, #24]
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	6203      	str	r3, [r0, #32]
 8009caa:	f7f7 fee1 	bl	8001a70 <HAL_CRC_Init>
 8009cae:	b128      	cbz	r0, 8009cbc <MX_CRC_Init+0x28>
 8009cb0:	2147      	movs	r1, #71	; 0x47
 8009cb2:	4805      	ldr	r0, [pc, #20]	; (8009cc8 <MX_CRC_Init+0x34>)
 8009cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009cb8:	f7ff bc06 	b.w	80094c8 <_Error_Handler>
 8009cbc:	bd08      	pop	{r3, pc}
 8009cbe:	bf00      	nop
 8009cc0:	2000c4b0 	.word	0x2000c4b0
 8009cc4:	40023000 	.word	0x40023000
 8009cc8:	0800f92c 	.word	0x0800f92c

08009ccc <HAL_CRC_MspInit>:
 8009ccc:	6802      	ldr	r2, [r0, #0]
 8009cce:	4b08      	ldr	r3, [pc, #32]	; (8009cf0 <HAL_CRC_MspInit+0x24>)
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	d10a      	bne.n	8009cec <HAL_CRC_MspInit+0x20>
 8009cd6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8009cda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ce0:	649a      	str	r2, [r3, #72]	; 0x48
 8009ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ce8:	9301      	str	r3, [sp, #4]
 8009cea:	9b01      	ldr	r3, [sp, #4]
 8009cec:	b002      	add	sp, #8
 8009cee:	4770      	bx	lr
 8009cf0:	40023000 	.word	0x40023000

08009cf4 <MX_GPIO_Init>:
 8009cf4:	4b59      	ldr	r3, [pc, #356]	; (8009e5c <MX_GPIO_Init+0x168>)
 8009cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cfc:	4d58      	ldr	r5, [pc, #352]	; (8009e60 <MX_GPIO_Init+0x16c>)
 8009cfe:	4f59      	ldr	r7, [pc, #356]	; (8009e64 <MX_GPIO_Init+0x170>)
 8009d00:	f042 0204 	orr.w	r2, r2, #4
 8009d04:	64da      	str	r2, [r3, #76]	; 0x4c
 8009d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d08:	b08a      	sub	sp, #40	; 0x28
 8009d0a:	f002 0204 	and.w	r2, r2, #4
 8009d0e:	9200      	str	r2, [sp, #0]
 8009d10:	9a00      	ldr	r2, [sp, #0]
 8009d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d18:	64da      	str	r2, [r3, #76]	; 0x4c
 8009d1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d1c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009d20:	9201      	str	r2, [sp, #4]
 8009d22:	9a01      	ldr	r2, [sp, #4]
 8009d24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d26:	f042 0201 	orr.w	r2, r2, #1
 8009d2a:	64da      	str	r2, [r3, #76]	; 0x4c
 8009d2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d2e:	f002 0201 	and.w	r2, r2, #1
 8009d32:	9202      	str	r2, [sp, #8]
 8009d34:	9a02      	ldr	r2, [sp, #8]
 8009d36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d38:	f042 0202 	orr.w	r2, r2, #2
 8009d3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8009d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d40:	f002 0202 	and.w	r2, r2, #2
 8009d44:	9203      	str	r2, [sp, #12]
 8009d46:	9a03      	ldr	r2, [sp, #12]
 8009d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d4a:	f042 0208 	orr.w	r2, r2, #8
 8009d4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8009d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d52:	f003 0308 	and.w	r3, r3, #8
 8009d56:	9304      	str	r3, [sp, #16]
 8009d58:	4628      	mov	r0, r5
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	21e4      	movs	r1, #228	; 0xe4
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	f7f8 f9d8 	bl	8002114 <HAL_GPIO_WritePin>
 8009d64:	2200      	movs	r2, #0
 8009d66:	f248 51d3 	movw	r1, #34259	; 0x85d3
 8009d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d6e:	f7f8 f9d1 	bl	8002114 <HAL_GPIO_WritePin>
 8009d72:	2200      	movs	r2, #0
 8009d74:	4638      	mov	r0, r7
 8009d76:	21f6      	movs	r1, #246	; 0xf6
 8009d78:	f7f8 f9cc 	bl	8002114 <HAL_GPIO_WritePin>
 8009d7c:	2400      	movs	r4, #0
 8009d7e:	2601      	movs	r6, #1
 8009d80:	2364      	movs	r3, #100	; 0x64
 8009d82:	a905      	add	r1, sp, #20
 8009d84:	4628      	mov	r0, r5
 8009d86:	9305      	str	r3, [sp, #20]
 8009d88:	9606      	str	r6, [sp, #24]
 8009d8a:	f04f 0802 	mov.w	r8, #2
 8009d8e:	9407      	str	r4, [sp, #28]
 8009d90:	9408      	str	r4, [sp, #32]
 8009d92:	f7f8 f87f 	bl	8001e94 <HAL_GPIO_Init>
 8009d96:	2380      	movs	r3, #128	; 0x80
 8009d98:	a905      	add	r1, sp, #20
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	9305      	str	r3, [sp, #20]
 8009d9e:	9606      	str	r6, [sp, #24]
 8009da0:	f8cd 801c 	str.w	r8, [sp, #28]
 8009da4:	9408      	str	r4, [sp, #32]
 8009da6:	f7f8 f875 	bl	8001e94 <HAL_GPIO_Init>
 8009daa:	f248 53d3 	movw	r3, #34259	; 0x85d3
 8009dae:	a905      	add	r1, sp, #20
 8009db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009db4:	9305      	str	r3, [sp, #20]
 8009db6:	9606      	str	r6, [sp, #24]
 8009db8:	9407      	str	r4, [sp, #28]
 8009dba:	9408      	str	r4, [sp, #32]
 8009dbc:	f7f8 f86a 	bl	8001e94 <HAL_GPIO_Init>
 8009dc0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009dc4:	a905      	add	r1, sp, #20
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	9305      	str	r3, [sp, #20]
 8009dca:	9406      	str	r4, [sp, #24]
 8009dcc:	9407      	str	r4, [sp, #28]
 8009dce:	f7f8 f861 	bl	8001e94 <HAL_GPIO_Init>
 8009dd2:	2310      	movs	r3, #16
 8009dd4:	a905      	add	r1, sp, #20
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	9305      	str	r3, [sp, #20]
 8009dda:	9406      	str	r4, [sp, #24]
 8009ddc:	f8cd 801c 	str.w	r8, [sp, #28]
 8009de0:	f7f8 f858 	bl	8001e94 <HAL_GPIO_Init>
 8009de4:	23f6      	movs	r3, #246	; 0xf6
 8009de6:	a905      	add	r1, sp, #20
 8009de8:	4638      	mov	r0, r7
 8009dea:	9305      	str	r3, [sp, #20]
 8009dec:	9606      	str	r6, [sp, #24]
 8009dee:	9407      	str	r4, [sp, #28]
 8009df0:	2603      	movs	r6, #3
 8009df2:	9408      	str	r4, [sp, #32]
 8009df4:	f7f8 f84e 	bl	8001e94 <HAL_GPIO_Init>
 8009df8:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8009dfc:	a905      	add	r1, sp, #20
 8009dfe:	4628      	mov	r0, r5
 8009e00:	9305      	str	r3, [sp, #20]
 8009e02:	9606      	str	r6, [sp, #24]
 8009e04:	9407      	str	r4, [sp, #28]
 8009e06:	f7f8 f845 	bl	8001e94 <HAL_GPIO_Init>
 8009e0a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8009e0e:	a905      	add	r1, sp, #20
 8009e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e14:	9305      	str	r3, [sp, #20]
 8009e16:	9406      	str	r4, [sp, #24]
 8009e18:	9407      	str	r4, [sp, #28]
 8009e1a:	f7f8 f83b 	bl	8001e94 <HAL_GPIO_Init>
 8009e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e22:	a905      	add	r1, sp, #20
 8009e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e28:	9305      	str	r3, [sp, #20]
 8009e2a:	9606      	str	r6, [sp, #24]
 8009e2c:	9407      	str	r4, [sp, #28]
 8009e2e:	f7f8 f831 	bl	8001e94 <HAL_GPIO_Init>
 8009e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e36:	a905      	add	r1, sp, #20
 8009e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e3c:	9305      	str	r3, [sp, #20]
 8009e3e:	9606      	str	r6, [sp, #24]
 8009e40:	9407      	str	r4, [sp, #28]
 8009e42:	f7f8 f827 	bl	8001e94 <HAL_GPIO_Init>
 8009e46:	2308      	movs	r3, #8
 8009e48:	a905      	add	r1, sp, #20
 8009e4a:	4807      	ldr	r0, [pc, #28]	; (8009e68 <MX_GPIO_Init+0x174>)
 8009e4c:	9305      	str	r3, [sp, #20]
 8009e4e:	9606      	str	r6, [sp, #24]
 8009e50:	9407      	str	r4, [sp, #28]
 8009e52:	f7f8 f81f 	bl	8001e94 <HAL_GPIO_Init>
 8009e56:	b00a      	add	sp, #40	; 0x28
 8009e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e5c:	40021000 	.word	0x40021000
 8009e60:	48000800 	.word	0x48000800
 8009e64:	48000400 	.word	0x48000400
 8009e68:	48001c00 	.word	0x48001c00

08009e6c <GPIOInitRadio>:
 8009e6c:	4b52      	ldr	r3, [pc, #328]	; (8009fb8 <GPIOInitRadio+0x14c>)
 8009e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e74:	4f51      	ldr	r7, [pc, #324]	; (8009fbc <GPIOInitRadio+0x150>)
 8009e76:	4d52      	ldr	r5, [pc, #328]	; (8009fc0 <GPIOInitRadio+0x154>)
 8009e78:	f042 0204 	orr.w	r2, r2, #4
 8009e7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8009e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e80:	b08a      	sub	sp, #40	; 0x28
 8009e82:	f002 0204 	and.w	r2, r2, #4
 8009e86:	9200      	str	r2, [sp, #0]
 8009e88:	9a00      	ldr	r2, [sp, #0]
 8009e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e90:	64da      	str	r2, [r3, #76]	; 0x4c
 8009e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e94:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009e98:	9201      	str	r2, [sp, #4]
 8009e9a:	9a01      	ldr	r2, [sp, #4]
 8009e9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e9e:	f042 0201 	orr.w	r2, r2, #1
 8009ea2:	64da      	str	r2, [r3, #76]	; 0x4c
 8009ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ea6:	f002 0201 	and.w	r2, r2, #1
 8009eaa:	9202      	str	r2, [sp, #8]
 8009eac:	9a02      	ldr	r2, [sp, #8]
 8009eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009eb0:	f042 0202 	orr.w	r2, r2, #2
 8009eb4:	64da      	str	r2, [r3, #76]	; 0x4c
 8009eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009eb8:	f002 0202 	and.w	r2, r2, #2
 8009ebc:	9203      	str	r2, [sp, #12]
 8009ebe:	9a03      	ldr	r2, [sp, #12]
 8009ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ec2:	f042 0208 	orr.w	r2, r2, #8
 8009ec6:	64da      	str	r2, [r3, #76]	; 0x4c
 8009ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eca:	f003 0308 	and.w	r3, r3, #8
 8009ece:	9304      	str	r3, [sp, #16]
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	21e4      	movs	r1, #228	; 0xe4
 8009ed6:	9b04      	ldr	r3, [sp, #16]
 8009ed8:	f7f8 f91c 	bl	8002114 <HAL_GPIO_WritePin>
 8009edc:	2200      	movs	r2, #0
 8009ede:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8009ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ee6:	f7f8 f915 	bl	8002114 <HAL_GPIO_WritePin>
 8009eea:	2200      	movs	r2, #0
 8009eec:	4628      	mov	r0, r5
 8009eee:	21f0      	movs	r1, #240	; 0xf0
 8009ef0:	f7f8 f910 	bl	8002114 <HAL_GPIO_WritePin>
 8009ef4:	2400      	movs	r4, #0
 8009ef6:	2601      	movs	r6, #1
 8009ef8:	23e4      	movs	r3, #228	; 0xe4
 8009efa:	a905      	add	r1, sp, #20
 8009efc:	4638      	mov	r0, r7
 8009efe:	9305      	str	r3, [sp, #20]
 8009f00:	9606      	str	r6, [sp, #24]
 8009f02:	9407      	str	r4, [sp, #28]
 8009f04:	9408      	str	r4, [sp, #32]
 8009f06:	f7f7 ffc5 	bl	8001e94 <HAL_GPIO_Init>
 8009f0a:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8009f0e:	a905      	add	r1, sp, #20
 8009f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f14:	9305      	str	r3, [sp, #20]
 8009f16:	9606      	str	r6, [sp, #24]
 8009f18:	9407      	str	r4, [sp, #28]
 8009f1a:	9408      	str	r4, [sp, #32]
 8009f1c:	f7f7 ffba 	bl	8001e94 <HAL_GPIO_Init>
 8009f20:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009f24:	a905      	add	r1, sp, #20
 8009f26:	4628      	mov	r0, r5
 8009f28:	9305      	str	r3, [sp, #20]
 8009f2a:	f04f 0802 	mov.w	r8, #2
 8009f2e:	9406      	str	r4, [sp, #24]
 8009f30:	9407      	str	r4, [sp, #28]
 8009f32:	f7f7 ffaf 	bl	8001e94 <HAL_GPIO_Init>
 8009f36:	2310      	movs	r3, #16
 8009f38:	a905      	add	r1, sp, #20
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	9305      	str	r3, [sp, #20]
 8009f3e:	9406      	str	r4, [sp, #24]
 8009f40:	f8cd 801c 	str.w	r8, [sp, #28]
 8009f44:	f7f7 ffa6 	bl	8001e94 <HAL_GPIO_Init>
 8009f48:	23f0      	movs	r3, #240	; 0xf0
 8009f4a:	a905      	add	r1, sp, #20
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	9305      	str	r3, [sp, #20]
 8009f50:	9606      	str	r6, [sp, #24]
 8009f52:	9407      	str	r4, [sp, #28]
 8009f54:	9408      	str	r4, [sp, #32]
 8009f56:	f7f7 ff9d 	bl	8001e94 <HAL_GPIO_Init>
 8009f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f5e:	a905      	add	r1, sp, #20
 8009f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	9406      	str	r4, [sp, #24]
 8009f68:	9407      	str	r4, [sp, #28]
 8009f6a:	f7f7 ff93 	bl	8001e94 <HAL_GPIO_Init>
 8009f6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f72:	2503      	movs	r5, #3
 8009f74:	9305      	str	r3, [sp, #20]
 8009f76:	a905      	add	r1, sp, #20
 8009f78:	230a      	movs	r3, #10
 8009f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f80:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f84:	9407      	str	r4, [sp, #28]
 8009f86:	9508      	str	r5, [sp, #32]
 8009f88:	f7f7 ff84 	bl	8001e94 <HAL_GPIO_Init>
 8009f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f90:	a905      	add	r1, sp, #20
 8009f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f96:	9305      	str	r3, [sp, #20]
 8009f98:	9506      	str	r5, [sp, #24]
 8009f9a:	9407      	str	r4, [sp, #28]
 8009f9c:	f7f7 ff7a 	bl	8001e94 <HAL_GPIO_Init>
 8009fa0:	2308      	movs	r3, #8
 8009fa2:	a905      	add	r1, sp, #20
 8009fa4:	4807      	ldr	r0, [pc, #28]	; (8009fc4 <GPIOInitRadio+0x158>)
 8009fa6:	9305      	str	r3, [sp, #20]
 8009fa8:	9506      	str	r5, [sp, #24]
 8009faa:	9407      	str	r4, [sp, #28]
 8009fac:	f7f7 ff72 	bl	8001e94 <HAL_GPIO_Init>
 8009fb0:	b00a      	add	sp, #40	; 0x28
 8009fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb6:	bf00      	nop
 8009fb8:	40021000 	.word	0x40021000
 8009fbc:	48000800 	.word	0x48000800
 8009fc0:	48000400 	.word	0x48000400
 8009fc4:	48001c00 	.word	0x48001c00

08009fc8 <GPIOInitSensor>:
 8009fc8:	4b4c      	ldr	r3, [pc, #304]	; (800a0fc <GPIOInitSensor+0x134>)
 8009fca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fce:	4e4c      	ldr	r6, [pc, #304]	; (800a100 <GPIOInitSensor+0x138>)
 8009fd0:	f042 0204 	orr.w	r2, r2, #4
 8009fd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8009fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fd8:	b08b      	sub	sp, #44	; 0x2c
 8009fda:	f002 0204 	and.w	r2, r2, #4
 8009fde:	9200      	str	r2, [sp, #0]
 8009fe0:	9a00      	ldr	r2, [sp, #0]
 8009fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fe4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009fe8:	64da      	str	r2, [r3, #76]	; 0x4c
 8009fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009ff0:	9201      	str	r2, [sp, #4]
 8009ff2:	9a01      	ldr	r2, [sp, #4]
 8009ff4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ff6:	f042 0201 	orr.w	r2, r2, #1
 8009ffa:	64da      	str	r2, [r3, #76]	; 0x4c
 8009ffc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ffe:	f002 0201 	and.w	r2, r2, #1
 800a002:	9202      	str	r2, [sp, #8]
 800a004:	9a02      	ldr	r2, [sp, #8]
 800a006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a008:	f042 0202 	orr.w	r2, r2, #2
 800a00c:	64da      	str	r2, [r3, #76]	; 0x4c
 800a00e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a010:	f002 0202 	and.w	r2, r2, #2
 800a014:	9203      	str	r2, [sp, #12]
 800a016:	9a03      	ldr	r2, [sp, #12]
 800a018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a01a:	f042 0208 	orr.w	r2, r2, #8
 800a01e:	64da      	str	r2, [r3, #76]	; 0x4c
 800a020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a022:	f003 0308 	and.w	r3, r3, #8
 800a026:	9304      	str	r3, [sp, #16]
 800a028:	4630      	mov	r0, r6
 800a02a:	2200      	movs	r2, #0
 800a02c:	21a4      	movs	r1, #164	; 0xa4
 800a02e:	9b04      	ldr	r3, [sp, #16]
 800a030:	f7f8 f870 	bl	8002114 <HAL_GPIO_WritePin>
 800a034:	2200      	movs	r2, #0
 800a036:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 800a03a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a03e:	f7f8 f869 	bl	8002114 <HAL_GPIO_WritePin>
 800a042:	2400      	movs	r4, #0
 800a044:	23a4      	movs	r3, #164	; 0xa4
 800a046:	2501      	movs	r5, #1
 800a048:	a905      	add	r1, sp, #20
 800a04a:	4630      	mov	r0, r6
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	9506      	str	r5, [sp, #24]
 800a050:	9407      	str	r4, [sp, #28]
 800a052:	9408      	str	r4, [sp, #32]
 800a054:	f7f7 ff1e 	bl	8001e94 <HAL_GPIO_Init>
 800a058:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 800a05c:	a905      	add	r1, sp, #20
 800a05e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a062:	9305      	str	r3, [sp, #20]
 800a064:	9506      	str	r5, [sp, #24]
 800a066:	9407      	str	r4, [sp, #28]
 800a068:	9408      	str	r4, [sp, #32]
 800a06a:	f7f7 ff13 	bl	8001e94 <HAL_GPIO_Init>
 800a06e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a072:	a905      	add	r1, sp, #20
 800a074:	4823      	ldr	r0, [pc, #140]	; (800a104 <GPIOInitSensor+0x13c>)
 800a076:	9305      	str	r3, [sp, #20]
 800a078:	2702      	movs	r7, #2
 800a07a:	9406      	str	r4, [sp, #24]
 800a07c:	9407      	str	r4, [sp, #28]
 800a07e:	f7f7 ff09 	bl	8001e94 <HAL_GPIO_Init>
 800a082:	2310      	movs	r3, #16
 800a084:	a905      	add	r1, sp, #20
 800a086:	4630      	mov	r0, r6
 800a088:	2503      	movs	r5, #3
 800a08a:	9305      	str	r3, [sp, #20]
 800a08c:	9406      	str	r4, [sp, #24]
 800a08e:	9707      	str	r7, [sp, #28]
 800a090:	f7f7 ff00 	bl	8001e94 <HAL_GPIO_Init>
 800a094:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800a098:	a905      	add	r1, sp, #20
 800a09a:	4630      	mov	r0, r6
 800a09c:	9305      	str	r3, [sp, #20]
 800a09e:	9506      	str	r5, [sp, #24]
 800a0a0:	9407      	str	r4, [sp, #28]
 800a0a2:	f7f7 fef7 	bl	8001e94 <HAL_GPIO_Init>
 800a0a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0aa:	a905      	add	r1, sp, #20
 800a0ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0b0:	9305      	str	r3, [sp, #20]
 800a0b2:	9406      	str	r4, [sp, #24]
 800a0b4:	9407      	str	r4, [sp, #28]
 800a0b6:	f7f7 feed 	bl	8001e94 <HAL_GPIO_Init>
 800a0ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0be:	9305      	str	r3, [sp, #20]
 800a0c0:	a905      	add	r1, sp, #20
 800a0c2:	230a      	movs	r3, #10
 800a0c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ca:	9706      	str	r7, [sp, #24]
 800a0cc:	9407      	str	r4, [sp, #28]
 800a0ce:	9508      	str	r5, [sp, #32]
 800a0d0:	f7f7 fee0 	bl	8001e94 <HAL_GPIO_Init>
 800a0d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0d8:	a905      	add	r1, sp, #20
 800a0da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0de:	9305      	str	r3, [sp, #20]
 800a0e0:	9506      	str	r5, [sp, #24]
 800a0e2:	9407      	str	r4, [sp, #28]
 800a0e4:	f7f7 fed6 	bl	8001e94 <HAL_GPIO_Init>
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	a905      	add	r1, sp, #20
 800a0ec:	4806      	ldr	r0, [pc, #24]	; (800a108 <GPIOInitSensor+0x140>)
 800a0ee:	9305      	str	r3, [sp, #20]
 800a0f0:	9506      	str	r5, [sp, #24]
 800a0f2:	9407      	str	r4, [sp, #28]
 800a0f4:	f7f7 fece 	bl	8001e94 <HAL_GPIO_Init>
 800a0f8:	b00b      	add	sp, #44	; 0x2c
 800a0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0fc:	40021000 	.word	0x40021000
 800a100:	48000800 	.word	0x48000800
 800a104:	48000400 	.word	0x48000400
 800a108:	48001c00 	.word	0x48001c00

0800a10c <DisEnableSensorPins>:
 800a10c:	b510      	push	{r4, lr}
 800a10e:	4604      	mov	r4, r0
 800a110:	b198      	cbz	r0, 800a13a <DisEnableSensorPins+0x2e>
 800a112:	2201      	movs	r2, #1
 800a114:	2140      	movs	r1, #64	; 0x40
 800a116:	480f      	ldr	r0, [pc, #60]	; (800a154 <DisEnableSensorPins+0x48>)
 800a118:	f7f7 fffc 	bl	8002114 <HAL_GPIO_WritePin>
 800a11c:	2201      	movs	r2, #1
 800a11e:	2120      	movs	r1, #32
 800a120:	480c      	ldr	r0, [pc, #48]	; (800a154 <DisEnableSensorPins+0x48>)
 800a122:	f7f7 fff7 	bl	8002114 <HAL_GPIO_WritePin>
 800a126:	2201      	movs	r2, #1
 800a128:	480b      	ldr	r0, [pc, #44]	; (800a158 <DisEnableSensorPins+0x4c>)
 800a12a:	2104      	movs	r1, #4
 800a12c:	f7f7 fff2 	bl	8002114 <HAL_GPIO_WritePin>
 800a130:	200a      	movs	r0, #10
 800a132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a136:	f7f6 bead 	b.w	8000e94 <HAL_Delay>
 800a13a:	4602      	mov	r2, r0
 800a13c:	2140      	movs	r1, #64	; 0x40
 800a13e:	4805      	ldr	r0, [pc, #20]	; (800a154 <DisEnableSensorPins+0x48>)
 800a140:	f7f7 ffe8 	bl	8002114 <HAL_GPIO_WritePin>
 800a144:	4622      	mov	r2, r4
 800a146:	2120      	movs	r1, #32
 800a148:	4802      	ldr	r0, [pc, #8]	; (800a154 <DisEnableSensorPins+0x48>)
 800a14a:	f7f7 ffe3 	bl	8002114 <HAL_GPIO_WritePin>
 800a14e:	4622      	mov	r2, r4
 800a150:	e7ea      	b.n	800a128 <DisEnableSensorPins+0x1c>
 800a152:	bf00      	nop
 800a154:	48000400 	.word	0x48000400
 800a158:	48000800 	.word	0x48000800

0800a15c <DisEnableBatteryPin>:
 800a15c:	b508      	push	{r3, lr}
 800a15e:	4602      	mov	r2, r0
 800a160:	b100      	cbz	r0, 800a164 <DisEnableBatteryPin+0x8>
 800a162:	2201      	movs	r2, #1
 800a164:	4804      	ldr	r0, [pc, #16]	; (800a178 <DisEnableBatteryPin+0x1c>)
 800a166:	2120      	movs	r1, #32
 800a168:	f7f7 ffd4 	bl	8002114 <HAL_GPIO_WritePin>
 800a16c:	200a      	movs	r0, #10
 800a16e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a172:	f7f6 be8f 	b.w	8000e94 <HAL_Delay>
 800a176:	bf00      	nop
 800a178:	48000400 	.word	0x48000400

0800a17c <DisEnableRadioPin>:
 800a17c:	b508      	push	{r3, lr}
 800a17e:	4602      	mov	r2, r0
 800a180:	b100      	cbz	r0, 800a184 <DisEnableRadioPin+0x8>
 800a182:	2201      	movs	r2, #1
 800a184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a188:	2102      	movs	r1, #2
 800a18a:	f7f7 ffc3 	bl	8002114 <HAL_GPIO_WritePin>
 800a18e:	200a      	movs	r0, #10
 800a190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a194:	f7f6 be7e 	b.w	8000e94 <HAL_Delay>

0800a198 <DisEnableSDPin>:
 800a198:	b530      	push	{r4, r5, lr}
 800a19a:	4602      	mov	r2, r0
 800a19c:	b087      	sub	sp, #28
 800a19e:	b1a8      	cbz	r0, 800a1cc <DisEnableSDPin+0x34>
 800a1a0:	4b0f      	ldr	r3, [pc, #60]	; (800a1e0 <DisEnableSDPin+0x48>)
 800a1a2:	4810      	ldr	r0, [pc, #64]	; (800a1e4 <DisEnableSDPin+0x4c>)
 800a1a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1a6:	f042 0204 	orr.w	r2, r2, #4
 800a1aa:	64da      	str	r2, [r3, #76]	; 0x4c
 800a1ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ae:	f003 0304 	and.w	r3, r3, #4
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	9b00      	ldr	r3, [sp, #0]
 800a1b6:	2501      	movs	r5, #1
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2480      	movs	r4, #128	; 0x80
 800a1bc:	a901      	add	r1, sp, #4
 800a1be:	9401      	str	r4, [sp, #4]
 800a1c0:	9502      	str	r5, [sp, #8]
 800a1c2:	9303      	str	r3, [sp, #12]
 800a1c4:	9304      	str	r3, [sp, #16]
 800a1c6:	f7f7 fe65 	bl	8001e94 <HAL_GPIO_Init>
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	2180      	movs	r1, #128	; 0x80
 800a1ce:	4805      	ldr	r0, [pc, #20]	; (800a1e4 <DisEnableSDPin+0x4c>)
 800a1d0:	f7f7 ffa0 	bl	8002114 <HAL_GPIO_WritePin>
 800a1d4:	200a      	movs	r0, #10
 800a1d6:	f7f6 fe5d 	bl	8000e94 <HAL_Delay>
 800a1da:	b007      	add	sp, #28
 800a1dc:	bd30      	pop	{r4, r5, pc}
 800a1de:	bf00      	nop
 800a1e0:	40021000 	.word	0x40021000
 800a1e4:	48000800 	.word	0x48000800

0800a1e8 <DisEnableSaraPin>:
 800a1e8:	b508      	push	{r3, lr}
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	b100      	cbz	r0, 800a1f0 <DisEnableSaraPin+0x8>
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a1f4:	2140      	movs	r1, #64	; 0x40
 800a1f6:	f7f7 ff8d 	bl	8002114 <HAL_GPIO_WritePin>
 800a1fa:	200a      	movs	r0, #10
 800a1fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a200:	f7f6 be48 	b.w	8000e94 <HAL_Delay>

0800a204 <MX_I2C1_Init>:
 800a204:	b508      	push	{r3, lr}
 800a206:	4815      	ldr	r0, [pc, #84]	; (800a25c <MX_I2C1_Init+0x58>)
 800a208:	4b15      	ldr	r3, [pc, #84]	; (800a260 <MX_I2C1_Init+0x5c>)
 800a20a:	4916      	ldr	r1, [pc, #88]	; (800a264 <MX_I2C1_Init+0x60>)
 800a20c:	2201      	movs	r2, #1
 800a20e:	e880 000a 	stmia.w	r0, {r1, r3}
 800a212:	2300      	movs	r3, #0
 800a214:	6083      	str	r3, [r0, #8]
 800a216:	60c2      	str	r2, [r0, #12]
 800a218:	6103      	str	r3, [r0, #16]
 800a21a:	6143      	str	r3, [r0, #20]
 800a21c:	6183      	str	r3, [r0, #24]
 800a21e:	61c3      	str	r3, [r0, #28]
 800a220:	6203      	str	r3, [r0, #32]
 800a222:	f7f8 f8c7 	bl	80023b4 <HAL_I2C_Init>
 800a226:	b118      	cbz	r0, 800a230 <MX_I2C1_Init+0x2c>
 800a228:	214d      	movs	r1, #77	; 0x4d
 800a22a:	480f      	ldr	r0, [pc, #60]	; (800a268 <MX_I2C1_Init+0x64>)
 800a22c:	f7ff f94c 	bl	80094c8 <_Error_Handler>
 800a230:	2100      	movs	r1, #0
 800a232:	480a      	ldr	r0, [pc, #40]	; (800a25c <MX_I2C1_Init+0x58>)
 800a234:	f7f8 fb06 	bl	8002844 <HAL_I2CEx_ConfigAnalogFilter>
 800a238:	b118      	cbz	r0, 800a242 <MX_I2C1_Init+0x3e>
 800a23a:	2154      	movs	r1, #84	; 0x54
 800a23c:	480a      	ldr	r0, [pc, #40]	; (800a268 <MX_I2C1_Init+0x64>)
 800a23e:	f7ff f943 	bl	80094c8 <_Error_Handler>
 800a242:	2100      	movs	r1, #0
 800a244:	4805      	ldr	r0, [pc, #20]	; (800a25c <MX_I2C1_Init+0x58>)
 800a246:	f7f8 fb23 	bl	8002890 <HAL_I2CEx_ConfigDigitalFilter>
 800a24a:	b128      	cbz	r0, 800a258 <MX_I2C1_Init+0x54>
 800a24c:	215b      	movs	r1, #91	; 0x5b
 800a24e:	4806      	ldr	r0, [pc, #24]	; (800a268 <MX_I2C1_Init+0x64>)
 800a250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a254:	f7ff b938 	b.w	80094c8 <_Error_Handler>
 800a258:	bd08      	pop	{r3, pc}
 800a25a:	bf00      	nop
 800a25c:	2000c4d4 	.word	0x2000c4d4
 800a260:	00300f38 	.word	0x00300f38
 800a264:	40005400 	.word	0x40005400
 800a268:	0800f942 	.word	0x0800f942

0800a26c <MX_I2C2_Init>:
 800a26c:	b508      	push	{r3, lr}
 800a26e:	4815      	ldr	r0, [pc, #84]	; (800a2c4 <MX_I2C2_Init+0x58>)
 800a270:	4b15      	ldr	r3, [pc, #84]	; (800a2c8 <MX_I2C2_Init+0x5c>)
 800a272:	4916      	ldr	r1, [pc, #88]	; (800a2cc <MX_I2C2_Init+0x60>)
 800a274:	2201      	movs	r2, #1
 800a276:	e880 000a 	stmia.w	r0, {r1, r3}
 800a27a:	2300      	movs	r3, #0
 800a27c:	6083      	str	r3, [r0, #8]
 800a27e:	60c2      	str	r2, [r0, #12]
 800a280:	6103      	str	r3, [r0, #16]
 800a282:	6143      	str	r3, [r0, #20]
 800a284:	6183      	str	r3, [r0, #24]
 800a286:	61c3      	str	r3, [r0, #28]
 800a288:	6203      	str	r3, [r0, #32]
 800a28a:	f7f8 f893 	bl	80023b4 <HAL_I2C_Init>
 800a28e:	b118      	cbz	r0, 800a298 <MX_I2C2_Init+0x2c>
 800a290:	216e      	movs	r1, #110	; 0x6e
 800a292:	480f      	ldr	r0, [pc, #60]	; (800a2d0 <MX_I2C2_Init+0x64>)
 800a294:	f7ff f918 	bl	80094c8 <_Error_Handler>
 800a298:	2100      	movs	r1, #0
 800a29a:	480a      	ldr	r0, [pc, #40]	; (800a2c4 <MX_I2C2_Init+0x58>)
 800a29c:	f7f8 fad2 	bl	8002844 <HAL_I2CEx_ConfigAnalogFilter>
 800a2a0:	b118      	cbz	r0, 800a2aa <MX_I2C2_Init+0x3e>
 800a2a2:	2175      	movs	r1, #117	; 0x75
 800a2a4:	480a      	ldr	r0, [pc, #40]	; (800a2d0 <MX_I2C2_Init+0x64>)
 800a2a6:	f7ff f90f 	bl	80094c8 <_Error_Handler>
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	4805      	ldr	r0, [pc, #20]	; (800a2c4 <MX_I2C2_Init+0x58>)
 800a2ae:	f7f8 faef 	bl	8002890 <HAL_I2CEx_ConfigDigitalFilter>
 800a2b2:	b128      	cbz	r0, 800a2c0 <MX_I2C2_Init+0x54>
 800a2b4:	217c      	movs	r1, #124	; 0x7c
 800a2b6:	4806      	ldr	r0, [pc, #24]	; (800a2d0 <MX_I2C2_Init+0x64>)
 800a2b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a2bc:	f7ff b904 	b.w	80094c8 <_Error_Handler>
 800a2c0:	bd08      	pop	{r3, pc}
 800a2c2:	bf00      	nop
 800a2c4:	2000c520 	.word	0x2000c520
 800a2c8:	00300f38 	.word	0x00300f38
 800a2cc:	40005800 	.word	0x40005800
 800a2d0:	0800f942 	.word	0x0800f942

0800a2d4 <HAL_I2C_MspInit>:
 800a2d4:	b500      	push	{lr}
 800a2d6:	6803      	ldr	r3, [r0, #0]
 800a2d8:	4a1e      	ldr	r2, [pc, #120]	; (800a354 <HAL_I2C_MspInit+0x80>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	b089      	sub	sp, #36	; 0x24
 800a2de:	d11b      	bne.n	800a318 <HAL_I2C_MspInit+0x44>
 800a2e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a2e4:	9303      	str	r3, [sp, #12]
 800a2e6:	2312      	movs	r3, #18
 800a2e8:	9304      	str	r3, [sp, #16]
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	9305      	str	r3, [sp, #20]
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	9306      	str	r3, [sp, #24]
 800a2f2:	a903      	add	r1, sp, #12
 800a2f4:	2304      	movs	r3, #4
 800a2f6:	4818      	ldr	r0, [pc, #96]	; (800a358 <HAL_I2C_MspInit+0x84>)
 800a2f8:	9307      	str	r3, [sp, #28]
 800a2fa:	f7f7 fdcb 	bl	8001e94 <HAL_GPIO_Init>
 800a2fe:	4b17      	ldr	r3, [pc, #92]	; (800a35c <HAL_I2C_MspInit+0x88>)
 800a300:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a302:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800a306:	659a      	str	r2, [r3, #88]	; 0x58
 800a308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a30a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	9b01      	ldr	r3, [sp, #4]
 800a312:	b009      	add	sp, #36	; 0x24
 800a314:	f85d fb04 	ldr.w	pc, [sp], #4
 800a318:	4a11      	ldr	r2, [pc, #68]	; (800a360 <HAL_I2C_MspInit+0x8c>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d1f9      	bne.n	800a312 <HAL_I2C_MspInit+0x3e>
 800a31e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a322:	9303      	str	r3, [sp, #12]
 800a324:	2312      	movs	r3, #18
 800a326:	9304      	str	r3, [sp, #16]
 800a328:	2301      	movs	r3, #1
 800a32a:	9305      	str	r3, [sp, #20]
 800a32c:	2303      	movs	r3, #3
 800a32e:	9306      	str	r3, [sp, #24]
 800a330:	a903      	add	r1, sp, #12
 800a332:	2304      	movs	r3, #4
 800a334:	4808      	ldr	r0, [pc, #32]	; (800a358 <HAL_I2C_MspInit+0x84>)
 800a336:	9307      	str	r3, [sp, #28]
 800a338:	f7f7 fdac 	bl	8001e94 <HAL_GPIO_Init>
 800a33c:	4b07      	ldr	r3, [pc, #28]	; (800a35c <HAL_I2C_MspInit+0x88>)
 800a33e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a340:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800a344:	659a      	str	r2, [r3, #88]	; 0x58
 800a346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a34c:	9302      	str	r3, [sp, #8]
 800a34e:	9b02      	ldr	r3, [sp, #8]
 800a350:	e7df      	b.n	800a312 <HAL_I2C_MspInit+0x3e>
 800a352:	bf00      	nop
 800a354:	40005400 	.word	0x40005400
 800a358:	48000400 	.word	0x48000400
 800a35c:	40021000 	.word	0x40021000
 800a360:	40005800 	.word	0x40005800

0800a364 <HAL_I2C_MspDeInit>:
 800a364:	6803      	ldr	r3, [r0, #0]
 800a366:	4a0d      	ldr	r2, [pc, #52]	; (800a39c <HAL_I2C_MspDeInit+0x38>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d10a      	bne.n	800a382 <HAL_I2C_MspDeInit+0x1e>
 800a36c:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800a370:	f44f 7140 	mov.w	r1, #768	; 0x300
 800a374:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a37a:	6593      	str	r3, [r2, #88]	; 0x58
 800a37c:	4808      	ldr	r0, [pc, #32]	; (800a3a0 <HAL_I2C_MspDeInit+0x3c>)
 800a37e:	f7f7 be4b 	b.w	8002018 <HAL_GPIO_DeInit>
 800a382:	4a08      	ldr	r2, [pc, #32]	; (800a3a4 <HAL_I2C_MspDeInit+0x40>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d108      	bne.n	800a39a <HAL_I2C_MspDeInit+0x36>
 800a388:	f502 32dc 	add.w	r2, r2, #112640	; 0x1b800
 800a38c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800a390:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a392:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a396:	6593      	str	r3, [r2, #88]	; 0x58
 800a398:	e7f0      	b.n	800a37c <HAL_I2C_MspDeInit+0x18>
 800a39a:	4770      	bx	lr
 800a39c:	40005400 	.word	0x40005400
 800a3a0:	48000400 	.word	0x48000400
 800a3a4:	40005800 	.word	0x40005800

0800a3a8 <MX_I2C1_DeInit>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	; (800a3b0 <MX_I2C1_DeInit+0x8>)
 800a3aa:	f7f8 b853 	b.w	8002454 <HAL_I2C_DeInit>
 800a3ae:	bf00      	nop
 800a3b0:	2000c4d4 	.word	0x2000c4d4

0800a3b4 <MX_I2C2_DeInit>:
 800a3b4:	4801      	ldr	r0, [pc, #4]	; (800a3bc <MX_I2C2_DeInit+0x8>)
 800a3b6:	f7f8 b84d 	b.w	8002454 <HAL_I2C_DeInit>
 800a3ba:	bf00      	nop
 800a3bc:	2000c520 	.word	0x2000c520

0800a3c0 <MX_IWDG_Init>:
 800a3c0:	4809      	ldr	r0, [pc, #36]	; (800a3e8 <MX_IWDG_Init+0x28>)
 800a3c2:	4a0a      	ldr	r2, [pc, #40]	; (800a3ec <MX_IWDG_Init+0x2c>)
 800a3c4:	b508      	push	{r3, lr}
 800a3c6:	2306      	movs	r3, #6
 800a3c8:	e880 000c 	stmia.w	r0, {r2, r3}
 800a3cc:	f640 73ff 	movw	r3, #4095	; 0xfff
 800a3d0:	60c3      	str	r3, [r0, #12]
 800a3d2:	6083      	str	r3, [r0, #8]
 800a3d4:	f7f8 fa81 	bl	80028da <HAL_IWDG_Init>
 800a3d8:	b128      	cbz	r0, 800a3e6 <MX_IWDG_Init+0x26>
 800a3da:	2148      	movs	r1, #72	; 0x48
 800a3dc:	4804      	ldr	r0, [pc, #16]	; (800a3f0 <MX_IWDG_Init+0x30>)
 800a3de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a3e2:	f7ff b871 	b.w	80094c8 <_Error_Handler>
 800a3e6:	bd08      	pop	{r3, pc}
 800a3e8:	2000c56c 	.word	0x2000c56c
 800a3ec:	40003000 	.word	0x40003000
 800a3f0:	0800f958 	.word	0x0800f958

0800a3f4 <ResetIWDG>:
 800a3f4:	4b02      	ldr	r3, [pc, #8]	; (800a400 <ResetIWDG+0xc>)
 800a3f6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	40003000 	.word	0x40003000

0800a404 <Program_IWDG_Freeze_Shutdown>:
 800a404:	b500      	push	{lr}
 800a406:	b08b      	sub	sp, #44	; 0x2c
 800a408:	2304      	movs	r3, #4
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	2310      	movs	r3, #16
 800a40e:	9305      	str	r3, [sp, #20]
 800a410:	2300      	movs	r3, #0
 800a412:	9306      	str	r3, [sp, #24]
 800a414:	4811      	ldr	r0, [pc, #68]	; (800a45c <Program_IWDG_Freeze_Shutdown+0x58>)
 800a416:	23aa      	movs	r3, #170	; 0xaa
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	f002 fff7 	bl	800d40c <puts>
 800a41e:	f7f7 fbad 	bl	8001b7c <HAL_FLASH_Unlock>
 800a422:	b910      	cbnz	r0, 800a42a <Program_IWDG_Freeze_Shutdown+0x26>
 800a424:	480e      	ldr	r0, [pc, #56]	; (800a460 <Program_IWDG_Freeze_Shutdown+0x5c>)
 800a426:	f002 fff1 	bl	800d40c <puts>
 800a42a:	f7f7 fbc3 	bl	8001bb4 <HAL_FLASH_OB_Unlock>
 800a42e:	b910      	cbnz	r0, 800a436 <Program_IWDG_Freeze_Shutdown+0x32>
 800a430:	480c      	ldr	r0, [pc, #48]	; (800a464 <Program_IWDG_Freeze_Shutdown+0x60>)
 800a432:	f002 ffeb 	bl	800d40c <puts>
 800a436:	4668      	mov	r0, sp
 800a438:	f7f7 fc0c 	bl	8001c54 <HAL_FLASHEx_OBProgram>
 800a43c:	b910      	cbnz	r0, 800a444 <Program_IWDG_Freeze_Shutdown+0x40>
 800a43e:	480a      	ldr	r0, [pc, #40]	; (800a468 <Program_IWDG_Freeze_Shutdown+0x64>)
 800a440:	f002 ffe4 	bl	800d40c <puts>
 800a444:	f7f7 fbac 	bl	8001ba0 <HAL_FLASH_Lock>
 800a448:	4808      	ldr	r0, [pc, #32]	; (800a46c <Program_IWDG_Freeze_Shutdown+0x68>)
 800a44a:	f002 ffdf 	bl	800d40c <puts>
 800a44e:	4808      	ldr	r0, [pc, #32]	; (800a470 <Program_IWDG_Freeze_Shutdown+0x6c>)
 800a450:	f002 ffdc 	bl	800d40c <puts>
 800a454:	b00b      	add	sp, #44	; 0x2c
 800a456:	f85d fb04 	ldr.w	pc, [sp], #4
 800a45a:	bf00      	nop
 800a45c:	0800f96f 	.word	0x0800f96f
 800a460:	0800f998 	.word	0x0800f998
 800a464:	0800f9a8 	.word	0x0800f9a8
 800a468:	0800f9ba 	.word	0x0800f9ba
 800a46c:	0800f9cd 	.word	0x0800f9cd
 800a470:	0800f9db 	.word	0x0800f9db

0800a474 <MX_LPTIM1_Init>:
 800a474:	480c      	ldr	r0, [pc, #48]	; (800a4a8 <MX_LPTIM1_Init+0x34>)
 800a476:	b508      	push	{r3, lr}
 800a478:	4b0c      	ldr	r3, [pc, #48]	; (800a4ac <MX_LPTIM1_Init+0x38>)
 800a47a:	6003      	str	r3, [r0, #0]
 800a47c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a480:	2300      	movs	r3, #0
 800a482:	6043      	str	r3, [r0, #4]
 800a484:	6083      	str	r3, [r0, #8]
 800a486:	6142      	str	r2, [r0, #20]
 800a488:	6203      	str	r3, [r0, #32]
 800a48a:	6243      	str	r3, [r0, #36]	; 0x24
 800a48c:	6283      	str	r3, [r0, #40]	; 0x28
 800a48e:	62c3      	str	r3, [r0, #44]	; 0x2c
 800a490:	6303      	str	r3, [r0, #48]	; 0x30
 800a492:	f7f8 fa49 	bl	8002928 <HAL_LPTIM_Init>
 800a496:	b128      	cbz	r0, 800a4a4 <MX_LPTIM1_Init+0x30>
 800a498:	214a      	movs	r1, #74	; 0x4a
 800a49a:	4805      	ldr	r0, [pc, #20]	; (800a4b0 <MX_LPTIM1_Init+0x3c>)
 800a49c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a4a0:	f7ff b812 	b.w	80094c8 <_Error_Handler>
 800a4a4:	bd08      	pop	{r3, pc}
 800a4a6:	bf00      	nop
 800a4a8:	2000c57c 	.word	0x2000c57c
 800a4ac:	40007c00 	.word	0x40007c00
 800a4b0:	0800f9f6 	.word	0x0800f9f6

0800a4b4 <HAL_LPTIM_MspInit>:
 800a4b4:	b507      	push	{r0, r1, r2, lr}
 800a4b6:	4b0d      	ldr	r3, [pc, #52]	; (800a4ec <HAL_LPTIM_MspInit+0x38>)
 800a4b8:	6802      	ldr	r2, [r0, #0]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d112      	bne.n	800a4e4 <HAL_LPTIM_MspInit+0x30>
 800a4be:	f503 33ca 	add.w	r3, r3, #103424	; 0x19400
 800a4c2:	2041      	movs	r0, #65	; 0x41
 800a4c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a4c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a4ca:	659a      	str	r2, [r3, #88]	; 0x58
 800a4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4d4:	9301      	str	r3, [sp, #4]
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	9b01      	ldr	r3, [sp, #4]
 800a4da:	f7f7 fa15 	bl	8001908 <HAL_NVIC_SetPriority>
 800a4de:	2041      	movs	r0, #65	; 0x41
 800a4e0:	f7f7 fa46 	bl	8001970 <HAL_NVIC_EnableIRQ>
 800a4e4:	b003      	add	sp, #12
 800a4e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4ea:	bf00      	nop
 800a4ec:	40007c00 	.word	0x40007c00

0800a4f0 <MX_RTC_Init>:
 800a4f0:	b510      	push	{r4, lr}
 800a4f2:	483d      	ldr	r0, [pc, #244]	; (800a5e8 <MX_RTC_Init+0xf8>)
 800a4f4:	4b3d      	ldr	r3, [pc, #244]	; (800a5ec <MX_RTC_Init+0xfc>)
 800a4f6:	6003      	str	r3, [r0, #0]
 800a4f8:	227f      	movs	r2, #127	; 0x7f
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	b09a      	sub	sp, #104	; 0x68
 800a4fe:	6082      	str	r2, [r0, #8]
 800a500:	22ff      	movs	r2, #255	; 0xff
 800a502:	6043      	str	r3, [r0, #4]
 800a504:	60c2      	str	r2, [r0, #12]
 800a506:	6103      	str	r3, [r0, #16]
 800a508:	6143      	str	r3, [r0, #20]
 800a50a:	6183      	str	r3, [r0, #24]
 800a50c:	61c3      	str	r3, [r0, #28]
 800a50e:	f7f9 f989 	bl	8003824 <HAL_RTC_Init>
 800a512:	b118      	cbz	r0, 800a51c <MX_RTC_Init+0x2c>
 800a514:	2150      	movs	r1, #80	; 0x50
 800a516:	4836      	ldr	r0, [pc, #216]	; (800a5f0 <MX_RTC_Init+0x100>)
 800a518:	f7fe ffd6 	bl	80094c8 <_Error_Handler>
 800a51c:	230d      	movs	r3, #13
 800a51e:	2200      	movs	r2, #0
 800a520:	f88d 3004 	strb.w	r3, [sp, #4]
 800a524:	a901      	add	r1, sp, #4
 800a526:	2325      	movs	r3, #37	; 0x25
 800a528:	482f      	ldr	r0, [pc, #188]	; (800a5e8 <MX_RTC_Init+0xf8>)
 800a52a:	f88d 3005 	strb.w	r3, [sp, #5]
 800a52e:	f88d 2006 	strb.w	r2, [sp, #6]
 800a532:	9204      	str	r2, [sp, #16]
 800a534:	9205      	str	r2, [sp, #20]
 800a536:	f7f9 f9d5 	bl	80038e4 <HAL_RTC_SetTime>
 800a53a:	b118      	cbz	r0, 800a544 <MX_RTC_Init+0x54>
 800a53c:	215f      	movs	r1, #95	; 0x5f
 800a53e:	482c      	ldr	r0, [pc, #176]	; (800a5f0 <MX_RTC_Init+0x100>)
 800a540:	f7fe ffc2 	bl	80094c8 <_Error_Handler>
 800a544:	2301      	movs	r3, #1
 800a546:	f88d 3000 	strb.w	r3, [sp]
 800a54a:	2302      	movs	r3, #2
 800a54c:	f88d 3001 	strb.w	r3, [sp, #1]
 800a550:	230d      	movs	r3, #13
 800a552:	f88d 3002 	strb.w	r3, [sp, #2]
 800a556:	2200      	movs	r2, #0
 800a558:	2313      	movs	r3, #19
 800a55a:	4669      	mov	r1, sp
 800a55c:	4822      	ldr	r0, [pc, #136]	; (800a5e8 <MX_RTC_Init+0xf8>)
 800a55e:	f88d 3003 	strb.w	r3, [sp, #3]
 800a562:	f7f9 fa39 	bl	80039d8 <HAL_RTC_SetDate>
 800a566:	b118      	cbz	r0, 800a570 <MX_RTC_Init+0x80>
 800a568:	216c      	movs	r1, #108	; 0x6c
 800a56a:	4821      	ldr	r0, [pc, #132]	; (800a5f0 <MX_RTC_Init+0x100>)
 800a56c:	f7fe ffac 	bl	80094c8 <_Error_Handler>
 800a570:	2400      	movs	r4, #0
 800a572:	2301      	movs	r3, #1
 800a574:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 800a578:	4622      	mov	r2, r4
 800a57a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a57e:	a906      	add	r1, sp, #24
 800a580:	4819      	ldr	r0, [pc, #100]	; (800a5e8 <MX_RTC_Init+0xf8>)
 800a582:	f88d 4018 	strb.w	r4, [sp, #24]
 800a586:	f88d 4019 	strb.w	r4, [sp, #25]
 800a58a:	f88d 401a 	strb.w	r4, [sp, #26]
 800a58e:	9407      	str	r4, [sp, #28]
 800a590:	9409      	str	r4, [sp, #36]	; 0x24
 800a592:	940a      	str	r4, [sp, #40]	; 0x28
 800a594:	940b      	str	r4, [sp, #44]	; 0x2c
 800a596:	940c      	str	r4, [sp, #48]	; 0x30
 800a598:	940d      	str	r4, [sp, #52]	; 0x34
 800a59a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a59c:	f7f9 fa82 	bl	8003aa4 <HAL_RTC_SetAlarm_IT>
 800a5a0:	b118      	cbz	r0, 800a5aa <MX_RTC_Init+0xba>
 800a5a2:	2181      	movs	r1, #129	; 0x81
 800a5a4:	4812      	ldr	r0, [pc, #72]	; (800a5f0 <MX_RTC_Init+0x100>)
 800a5a6:	f7fe ff8f 	bl	80094c8 <_Error_Handler>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5b6:	a910      	add	r1, sp, #64	; 0x40
 800a5b8:	480b      	ldr	r0, [pc, #44]	; (800a5e8 <MX_RTC_Init+0xf8>)
 800a5ba:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
 800a5be:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
 800a5c2:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
 800a5c6:	9411      	str	r4, [sp, #68]	; 0x44
 800a5c8:	9413      	str	r4, [sp, #76]	; 0x4c
 800a5ca:	9414      	str	r4, [sp, #80]	; 0x50
 800a5cc:	9415      	str	r4, [sp, #84]	; 0x54
 800a5ce:	9416      	str	r4, [sp, #88]	; 0x58
 800a5d0:	9417      	str	r4, [sp, #92]	; 0x5c
 800a5d2:	9319      	str	r3, [sp, #100]	; 0x64
 800a5d4:	f7f9 fa66 	bl	8003aa4 <HAL_RTC_SetAlarm_IT>
 800a5d8:	b118      	cbz	r0, 800a5e2 <MX_RTC_Init+0xf2>
 800a5da:	2191      	movs	r1, #145	; 0x91
 800a5dc:	4804      	ldr	r0, [pc, #16]	; (800a5f0 <MX_RTC_Init+0x100>)
 800a5de:	f7fe ff73 	bl	80094c8 <_Error_Handler>
 800a5e2:	b01a      	add	sp, #104	; 0x68
 800a5e4:	bd10      	pop	{r4, pc}
 800a5e6:	bf00      	nop
 800a5e8:	2000c5b4 	.word	0x2000c5b4
 800a5ec:	40002800 	.word	0x40002800
 800a5f0:	0800fa0e 	.word	0x0800fa0e

0800a5f4 <HAL_RTC_MspInit>:
 800a5f4:	b508      	push	{r3, lr}
 800a5f6:	6802      	ldr	r2, [r0, #0]
 800a5f8:	4b0a      	ldr	r3, [pc, #40]	; (800a624 <HAL_RTC_MspInit+0x30>)
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d110      	bne.n	800a620 <HAL_RTC_MspInit+0x2c>
 800a5fe:	4a0a      	ldr	r2, [pc, #40]	; (800a628 <HAL_RTC_MspInit+0x34>)
 800a600:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a60c:	2200      	movs	r2, #0
 800a60e:	2029      	movs	r0, #41	; 0x29
 800a610:	4611      	mov	r1, r2
 800a612:	f7f7 f979 	bl	8001908 <HAL_NVIC_SetPriority>
 800a616:	2029      	movs	r0, #41	; 0x29
 800a618:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a61c:	f7f7 b9a8 	b.w	8001970 <HAL_NVIC_EnableIRQ>
 800a620:	bd08      	pop	{r3, pc}
 800a622:	bf00      	nop
 800a624:	40002800 	.word	0x40002800
 800a628:	40021000 	.word	0x40021000

0800a62c <RTC_Get_DateTime_Comp>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	4c17      	ldr	r4, [pc, #92]	; (800a68c <RTC_Get_DateTime_Comp+0x60>)
 800a630:	b086      	sub	sp, #24
 800a632:	a901      	add	r1, sp, #4
 800a634:	2200      	movs	r2, #0
 800a636:	4620      	mov	r0, r4
 800a638:	f7f9 faf5 	bl	8003c26 <HAL_RTC_GetTime>
 800a63c:	2200      	movs	r2, #0
 800a63e:	4669      	mov	r1, sp
 800a640:	4620      	mov	r0, r4
 800a642:	f7f9 fb17 	bl	8003c74 <HAL_RTC_GetDate>
 800a646:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a64a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800a64e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a652:	ea43 6380 	orr.w	r3, r3, r0, lsl #26
 800a656:	f89d 0001 	ldrb.w	r0, [sp, #1]
 800a65a:	0580      	lsls	r0, r0, #22
 800a65c:	f000 7070 	and.w	r0, r0, #62914560	; 0x3c00000
 800a660:	4303      	orrs	r3, r0
 800a662:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800a666:	0440      	lsls	r0, r0, #17
 800a668:	f400 1078 	and.w	r0, r0, #4063232	; 0x3e0000
 800a66c:	4303      	orrs	r3, r0
 800a66e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800a672:	0300      	lsls	r0, r0, #12
 800a674:	f400 30f8 	and.w	r0, r0, #126976	; 0x1f000
 800a678:	4303      	orrs	r3, r0
 800a67a:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800a67e:	0180      	lsls	r0, r0, #6
 800a680:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
 800a684:	4318      	orrs	r0, r3
 800a686:	b006      	add	sp, #24
 800a688:	bd10      	pop	{r4, pc}
 800a68a:	bf00      	nop
 800a68c:	2000c5b4 	.word	0x2000c5b4

0800a690 <RTC_SetAlarm>:
 800a690:	b530      	push	{r4, r5, lr}
 800a692:	4c21      	ldr	r4, [pc, #132]	; (800a718 <RTC_SetAlarm+0x88>)
 800a694:	b09b      	sub	sp, #108	; 0x6c
 800a696:	4605      	mov	r5, r0
 800a698:	a902      	add	r1, sp, #8
 800a69a:	2200      	movs	r2, #0
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7f9 fac2 	bl	8003c26 <HAL_RTC_GetTime>
 800a6a2:	a901      	add	r1, sp, #4
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f7f9 fae4 	bl	8003c74 <HAL_RTC_GetDate>
 800a6ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a6b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a6b4:	930a      	str	r3, [sp, #40]	; 0x28
 800a6b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a6bc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800a6c0:	9308      	str	r3, [sp, #32]
 800a6c2:	3264      	adds	r2, #100	; 0x64
 800a6c4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800a6c8:	920c      	str	r2, [sp, #48]	; 0x30
 800a6ca:	a81a      	add	r0, sp, #104	; 0x68
 800a6cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a6d0:	442b      	add	r3, r5
 800a6d2:	3a01      	subs	r2, #1
 800a6d4:	f840 3d4c 	str.w	r3, [r0, #-76]!
 800a6d8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6da:	f002 fbad 	bl	800ce38 <mktime>
 800a6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800a6e4:	9b08      	ldr	r3, [sp, #32]
 800a6e6:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 800a6ea:	9b07      	ldr	r3, [sp, #28]
 800a6ec:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 800a6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6fc:	a910      	add	r1, sp, #64	; 0x40
 800a6fe:	4620      	mov	r0, r4
 800a700:	9211      	str	r2, [sp, #68]	; 0x44
 800a702:	9213      	str	r2, [sp, #76]	; 0x4c
 800a704:	9214      	str	r2, [sp, #80]	; 0x50
 800a706:	9215      	str	r2, [sp, #84]	; 0x54
 800a708:	9216      	str	r2, [sp, #88]	; 0x58
 800a70a:	9217      	str	r2, [sp, #92]	; 0x5c
 800a70c:	9319      	str	r3, [sp, #100]	; 0x64
 800a70e:	f7f9 f9c9 	bl	8003aa4 <HAL_RTC_SetAlarm_IT>
 800a712:	b01b      	add	sp, #108	; 0x6c
 800a714:	bd30      	pop	{r4, r5, pc}
 800a716:	bf00      	nop
 800a718:	2000c5b4 	.word	0x2000c5b4

0800a71c <RTC_SetAlarmB>:
 800a71c:	b530      	push	{r4, r5, lr}
 800a71e:	4c21      	ldr	r4, [pc, #132]	; (800a7a4 <RTC_SetAlarmB+0x88>)
 800a720:	b09b      	sub	sp, #108	; 0x6c
 800a722:	4605      	mov	r5, r0
 800a724:	a902      	add	r1, sp, #8
 800a726:	2200      	movs	r2, #0
 800a728:	4620      	mov	r0, r4
 800a72a:	f7f9 fa7c 	bl	8003c26 <HAL_RTC_GetTime>
 800a72e:	a901      	add	r1, sp, #4
 800a730:	2200      	movs	r2, #0
 800a732:	4620      	mov	r0, r4
 800a734:	f7f9 fa9e 	bl	8003c74 <HAL_RTC_GetDate>
 800a738:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a73c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a740:	930a      	str	r3, [sp, #40]	; 0x28
 800a742:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a746:	9309      	str	r3, [sp, #36]	; 0x24
 800a748:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800a74c:	9308      	str	r3, [sp, #32]
 800a74e:	3264      	adds	r2, #100	; 0x64
 800a750:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800a754:	920c      	str	r2, [sp, #48]	; 0x30
 800a756:	a81a      	add	r0, sp, #104	; 0x68
 800a758:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a75c:	442b      	add	r3, r5
 800a75e:	3a01      	subs	r2, #1
 800a760:	f840 3d4c 	str.w	r3, [r0, #-76]!
 800a764:	920b      	str	r2, [sp, #44]	; 0x2c
 800a766:	f002 fb67 	bl	800ce38 <mktime>
 800a76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800a770:	9b08      	ldr	r3, [sp, #32]
 800a772:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 800a776:	9b07      	ldr	r3, [sp, #28]
 800a778:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 800a77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a77e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800a782:	2200      	movs	r2, #0
 800a784:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a788:	a910      	add	r1, sp, #64	; 0x40
 800a78a:	4620      	mov	r0, r4
 800a78c:	9211      	str	r2, [sp, #68]	; 0x44
 800a78e:	9213      	str	r2, [sp, #76]	; 0x4c
 800a790:	9214      	str	r2, [sp, #80]	; 0x50
 800a792:	9215      	str	r2, [sp, #84]	; 0x54
 800a794:	9216      	str	r2, [sp, #88]	; 0x58
 800a796:	9217      	str	r2, [sp, #92]	; 0x5c
 800a798:	9319      	str	r3, [sp, #100]	; 0x64
 800a79a:	f7f9 f983 	bl	8003aa4 <HAL_RTC_SetAlarm_IT>
 800a79e:	b01b      	add	sp, #108	; 0x6c
 800a7a0:	bd30      	pop	{r4, r5, pc}
 800a7a2:	bf00      	nop
 800a7a4:	2000c5b4 	.word	0x2000c5b4

0800a7a8 <HAL_MspInit>:
 800a7a8:	4b21      	ldr	r3, [pc, #132]	; (800a830 <HAL_MspInit+0x88>)
 800a7aa:	b507      	push	{r0, r1, r2, lr}
 800a7ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a7ae:	f042 0201 	orr.w	r2, r2, #1
 800a7b2:	661a      	str	r2, [r3, #96]	; 0x60
 800a7b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a7b6:	f002 0201 	and.w	r2, r2, #1
 800a7ba:	9200      	str	r2, [sp, #0]
 800a7bc:	9a00      	ldr	r2, [sp, #0]
 800a7be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a7c4:	659a      	str	r2, [r3, #88]	; 0x58
 800a7c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	2003      	movs	r0, #3
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	f7f7 f887 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	4611      	mov	r1, r2
 800a7da:	f06f 000b 	mvn.w	r0, #11
 800a7de:	f7f7 f893 	bl	8001908 <HAL_NVIC_SetPriority>
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	f06f 000a 	mvn.w	r0, #10
 800a7ea:	f7f7 f88d 	bl	8001908 <HAL_NVIC_SetPriority>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	f06f 0009 	mvn.w	r0, #9
 800a7f6:	f7f7 f887 	bl	8001908 <HAL_NVIC_SetPriority>
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	f06f 0004 	mvn.w	r0, #4
 800a802:	f7f7 f881 	bl	8001908 <HAL_NVIC_SetPriority>
 800a806:	2200      	movs	r2, #0
 800a808:	4611      	mov	r1, r2
 800a80a:	f06f 0003 	mvn.w	r0, #3
 800a80e:	f7f7 f87b 	bl	8001908 <HAL_NVIC_SetPriority>
 800a812:	2200      	movs	r2, #0
 800a814:	4611      	mov	r1, r2
 800a816:	f06f 0001 	mvn.w	r0, #1
 800a81a:	f7f7 f875 	bl	8001908 <HAL_NVIC_SetPriority>
 800a81e:	2200      	movs	r2, #0
 800a820:	4611      	mov	r1, r2
 800a822:	f04f 30ff 	mov.w	r0, #4294967295
 800a826:	f7f7 f86f 	bl	8001908 <HAL_NVIC_SetPriority>
 800a82a:	b003      	add	sp, #12
 800a82c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a830:	40021000 	.word	0x40021000

0800a834 <SysTick_Handler>:
 800a834:	b508      	push	{r3, lr}
 800a836:	f7f6 fb1f 	bl	8000e78 <HAL_IncTick>
 800a83a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a83e:	f7f7 b8c6 	b.w	80019ce <HAL_SYSTICK_IRQHandler>

0800a842 <USART2_IRQHandler>:
 800a842:	f001 ba45 	b.w	800bcd0 <USART2_Callback>
	...

0800a848 <RTC_Alarm_IRQHandler>:
 800a848:	4801      	ldr	r0, [pc, #4]	; (800a850 <RTC_Alarm_IRQHandler+0x8>)
 800a84a:	f7f8 bf81 	b.w	8003750 <HAL_RTC_AlarmIRQHandler>
 800a84e:	bf00      	nop
 800a850:	2000c5b4 	.word	0x2000c5b4

0800a854 <LPTIM1_IRQHandler>:
 800a854:	4801      	ldr	r0, [pc, #4]	; (800a85c <LPTIM1_IRQHandler+0x8>)
 800a856:	f7f8 b8f1 	b.w	8002a3c <HAL_LPTIM_IRQHandler>
 800a85a:	bf00      	nop
 800a85c:	2000c57c 	.word	0x2000c57c

0800a860 <HAL_RTC_AlarmAEventCallback>:
 800a860:	b508      	push	{r3, lr}
 800a862:	f7fe fc09 	bl	8009078 <GetSaraConfigurationStruct>
 800a866:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800a86a:	f7ff ff11 	bl	800a690 <RTC_SetAlarm>
 800a86e:	2001      	movs	r0, #1
 800a870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a874:	f000 b926 	b.w	800aac4 <SetSensorState>

0800a878 <HAL_RTCEx_AlarmBEventCallback>:
 800a878:	4770      	bx	lr
	...

0800a87c <SystemInit>:
 800a87c:	490f      	ldr	r1, [pc, #60]	; (800a8bc <SystemInit+0x40>)
 800a87e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a882:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a88a:	4b0d      	ldr	r3, [pc, #52]	; (800a8c0 <SystemInit+0x44>)
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	2000      	movs	r0, #0
 800a890:	f042 0201 	orr.w	r2, r2, #1
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	6098      	str	r0, [r3, #8]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800a89e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a8a8:	60da      	str	r2, [r3, #12]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	6198      	str	r0, [r3, #24]
 800a8b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8b8:	608b      	str	r3, [r1, #8]
 800a8ba:	4770      	bx	lr
 800a8bc:	e000ed00 	.word	0xe000ed00
 800a8c0:	40021000 	.word	0x40021000

0800a8c4 <MX_LPUART1_UART_Init>:
 800a8c4:	b508      	push	{r3, lr}
 800a8c6:	480c      	ldr	r0, [pc, #48]	; (800a8f8 <MX_LPUART1_UART_Init+0x34>)
 800a8c8:	4b0c      	ldr	r3, [pc, #48]	; (800a8fc <MX_LPUART1_UART_Init+0x38>)
 800a8ca:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800a8ce:	e880 4008 	stmia.w	r0, {r3, lr}
 800a8d2:	220c      	movs	r2, #12
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	6083      	str	r3, [r0, #8]
 800a8d8:	60c3      	str	r3, [r0, #12]
 800a8da:	6103      	str	r3, [r0, #16]
 800a8dc:	6142      	str	r2, [r0, #20]
 800a8de:	6183      	str	r3, [r0, #24]
 800a8e0:	6203      	str	r3, [r0, #32]
 800a8e2:	6243      	str	r3, [r0, #36]	; 0x24
 800a8e4:	f7fa f899 	bl	8004a1a <HAL_UART_Init>
 800a8e8:	b128      	cbz	r0, 800a8f6 <MX_LPUART1_UART_Init+0x32>
 800a8ea:	214d      	movs	r1, #77	; 0x4d
 800a8ec:	4804      	ldr	r0, [pc, #16]	; (800a900 <MX_LPUART1_UART_Init+0x3c>)
 800a8ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a8f2:	f7fe bde9 	b.w	80094c8 <_Error_Handler>
 800a8f6:	bd08      	pop	{r3, pc}
 800a8f8:	2000c5d8 	.word	0x2000c5d8
 800a8fc:	40008000 	.word	0x40008000
 800a900:	0800fa6c 	.word	0x0800fa6c

0800a904 <MX_USART2_UART_Init>:
 800a904:	4b1f      	ldr	r3, [pc, #124]	; (800a984 <MX_USART2_UART_Init+0x80>)
 800a906:	b530      	push	{r4, r5, lr}
 800a908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a90a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a90e:	659a      	str	r2, [r3, #88]	; 0x58
 800a910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a912:	b08f      	sub	sp, #60	; 0x3c
 800a914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	9b00      	ldr	r3, [sp, #0]
 800a91c:	2302      	movs	r3, #2
 800a91e:	9302      	str	r3, [sp, #8]
 800a920:	2303      	movs	r3, #3
 800a922:	2400      	movs	r4, #0
 800a924:	250c      	movs	r5, #12
 800a926:	9303      	str	r3, [sp, #12]
 800a928:	a901      	add	r1, sp, #4
 800a92a:	2307      	movs	r3, #7
 800a92c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a930:	9404      	str	r4, [sp, #16]
 800a932:	9405      	str	r4, [sp, #20]
 800a934:	9306      	str	r3, [sp, #24]
 800a936:	9501      	str	r5, [sp, #4]
 800a938:	f7fa f8a1 	bl	8004a7e <LL_GPIO_Init>
 800a93c:	4b12      	ldr	r3, [pc, #72]	; (800a988 <MX_USART2_UART_Init+0x84>)
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	4b12      	ldr	r3, [pc, #72]	; (800a98c <MX_USART2_UART_Init+0x88>)
 800a942:	2240      	movs	r2, #64	; 0x40
 800a944:	f883 4326 	strb.w	r4, [r3, #806]	; 0x326
 800a948:	605a      	str	r2, [r3, #4]
 800a94a:	9408      	str	r4, [sp, #32]
 800a94c:	9409      	str	r4, [sp, #36]	; 0x24
 800a94e:	940a      	str	r4, [sp, #40]	; 0x28
 800a950:	940c      	str	r4, [sp, #48]	; 0x30
 800a952:	940d      	str	r4, [sp, #52]	; 0x34
 800a954:	4c0e      	ldr	r4, [pc, #56]	; (800a990 <MX_USART2_UART_Init+0x8c>)
 800a956:	950b      	str	r5, [sp, #44]	; 0x2c
 800a958:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800a95c:	a907      	add	r1, sp, #28
 800a95e:	4620      	mov	r0, r4
 800a960:	9307      	str	r3, [sp, #28]
 800a962:	f7fa fd7f 	bl	8005464 <LL_USART_Init>
 800a966:	6863      	ldr	r3, [r4, #4]
 800a968:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a96c:	6063      	str	r3, [r4, #4]
 800a96e:	68a3      	ldr	r3, [r4, #8]
 800a970:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a974:	60a3      	str	r3, [r4, #8]
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	f043 0301 	orr.w	r3, r3, #1
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	b00f      	add	sp, #60	; 0x3c
 800a980:	bd30      	pop	{r4, r5, pc}
 800a982:	bf00      	nop
 800a984:	40021000 	.word	0x40021000
 800a988:	e000ed00 	.word	0xe000ed00
 800a98c:	e000e100 	.word	0xe000e100
 800a990:	40004400 	.word	0x40004400

0800a994 <HAL_UART_MspInit>:
 800a994:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a996:	6802      	ldr	r2, [r0, #0]
 800a998:	4b0e      	ldr	r3, [pc, #56]	; (800a9d4 <HAL_UART_MspInit+0x40>)
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d117      	bne.n	800a9ce <HAL_UART_MspInit+0x3a>
 800a99e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800a9a2:	a901      	add	r1, sp, #4
 800a9a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9a6:	480c      	ldr	r0, [pc, #48]	; (800a9d8 <HAL_UART_MspInit+0x44>)
 800a9a8:	f042 0201 	orr.w	r2, r2, #1
 800a9ac:	65da      	str	r2, [r3, #92]	; 0x5c
 800a9ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	9b00      	ldr	r3, [sp, #0]
 800a9ba:	9202      	str	r2, [sp, #8]
 800a9bc:	2303      	movs	r3, #3
 800a9be:	9301      	str	r3, [sp, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	9304      	str	r3, [sp, #16]
 800a9c4:	2308      	movs	r3, #8
 800a9c6:	9203      	str	r2, [sp, #12]
 800a9c8:	9305      	str	r3, [sp, #20]
 800a9ca:	f7f7 fa63 	bl	8001e94 <HAL_GPIO_Init>
 800a9ce:	b007      	add	sp, #28
 800a9d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9d4:	40008000 	.word	0x40008000
 800a9d8:	48000800 	.word	0x48000800

0800a9dc <HAL_UART_MspDeInit>:
 800a9dc:	6802      	ldr	r2, [r0, #0]
 800a9de:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <HAL_UART_MspDeInit+0x1c>)
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d108      	bne.n	800a9f6 <HAL_UART_MspDeInit+0x1a>
 800a9e4:	4a05      	ldr	r2, [pc, #20]	; (800a9fc <HAL_UART_MspDeInit+0x20>)
 800a9e6:	4806      	ldr	r0, [pc, #24]	; (800aa00 <HAL_UART_MspDeInit+0x24>)
 800a9e8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800a9ea:	f023 0301 	bic.w	r3, r3, #1
 800a9ee:	65d3      	str	r3, [r2, #92]	; 0x5c
 800a9f0:	2103      	movs	r1, #3
 800a9f2:	f7f7 bb11 	b.w	8002018 <HAL_GPIO_DeInit>
 800a9f6:	4770      	bx	lr
 800a9f8:	40008000 	.word	0x40008000
 800a9fc:	40021000 	.word	0x40021000
 800aa00:	48000800 	.word	0x48000800

0800aa04 <_write>:
 800aa04:	3801      	subs	r0, #1
 800aa06:	2801      	cmp	r0, #1
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	4614      	mov	r4, r2
 800aa0c:	d907      	bls.n	800aa1e <_write+0x1a>
 800aa0e:	f002 f8dd 	bl	800cbcc <__errno>
 800aa12:	2309      	movs	r3, #9
 800aa14:	6003      	str	r3, [r0, #0]
 800aa16:	f04f 34ff 	mov.w	r4, #4294967295
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	bd10      	pop	{r4, pc}
 800aa1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aa22:	b292      	uxth	r2, r2
 800aa24:	4803      	ldr	r0, [pc, #12]	; (800aa34 <_write+0x30>)
 800aa26:	f7f9 ff6f 	bl	8004908 <HAL_UART_Transmit>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	bf18      	it	ne
 800aa2e:	2400      	movne	r4, #0
 800aa30:	e7f3      	b.n	800aa1a <_write+0x16>
 800aa32:	bf00      	nop
 800aa34:	2000c5d8 	.word	0x2000c5d8

0800aa38 <debugPrint>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	4608      	mov	r0, r1
 800aa3e:	460c      	mov	r4, r1
 800aa40:	f7f5 fbd8 	bl	80001f4 <strlen>
 800aa44:	4621      	mov	r1, r4
 800aa46:	b282      	uxth	r2, r0
 800aa48:	230a      	movs	r3, #10
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa50:	f7f9 bf5a 	b.w	8004908 <HAL_UART_Transmit>

0800aa54 <MX_LPUART1_UART_DeInit>:
 800aa54:	4801      	ldr	r0, [pc, #4]	; (800aa5c <MX_LPUART1_UART_DeInit+0x8>)
 800aa56:	f7f9 bd37 	b.w	80044c8 <HAL_UART_DeInit>
 800aa5a:	bf00      	nop
 800aa5c:	2000c5d8 	.word	0x2000c5d8

0800aa60 <StartTurnOffCounter>:
 800aa60:	b508      	push	{r3, lr}
 800aa62:	2006      	movs	r0, #6
 800aa64:	f7fe fae0 	bl	8009028 <GetTimeStruct>
 800aa68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aa6c:	f001 bff8 	b.w	800ca60 <GetTime>

0800aa70 <CompareTurnOffTimers>:
 800aa70:	b510      	push	{r4, lr}
 800aa72:	2007      	movs	r0, #7
 800aa74:	f7fe fad8 	bl	8009028 <GetTimeStruct>
 800aa78:	f001 fff2 	bl	800ca60 <GetTime>
 800aa7c:	2006      	movs	r0, #6
 800aa7e:	f7fe fad3 	bl	8009028 <GetTimeStruct>
 800aa82:	4604      	mov	r4, r0
 800aa84:	2007      	movs	r0, #7
 800aa86:	f7fe facf 	bl	8009028 <GetTimeStruct>
 800aa8a:	4601      	mov	r1, r0
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f001 ffa1 	bl	800c9d4 <RTC_GetElapsedSeconds>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	bfb8      	it	lt
 800aa96:	4240      	neglt	r0, r0
 800aa98:	2805      	cmp	r0, #5
 800aa9a:	bfd4      	ite	le
 800aa9c:	2000      	movle	r0, #0
 800aa9e:	2001      	movgt	r0, #1
 800aaa0:	bd10      	pop	{r4, pc}

0800aaa2 <ResetRadio>:
 800aaa2:	b508      	push	{r3, lr}
 800aaa4:	f001 f9d6 	bl	800be54 <StartUpSara>
 800aaa8:	b908      	cbnz	r0, 800aaae <ResetRadio+0xc>
 800aaaa:	2000      	movs	r0, #0
 800aaac:	bd08      	pop	{r3, pc}
 800aaae:	f001 fa37 	bl	800bf20 <SaraInitAtCommands>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d0f9      	beq.n	800aaaa <ResetRadio+0x8>
 800aab6:	f001 fa07 	bl	800bec8 <SaraPowerDown>
 800aaba:	3000      	adds	r0, #0
 800aabc:	bf18      	it	ne
 800aabe:	2001      	movne	r0, #1
 800aac0:	bd08      	pop	{r3, pc}
	...

0800aac4 <SetSensorState>:
 800aac4:	4b01      	ldr	r3, [pc, #4]	; (800aacc <SetSensorState+0x8>)
 800aac6:	7018      	strb	r0, [r3, #0]
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	200002b3 	.word	0x200002b3

0800aad0 <SetRadioState>:
 800aad0:	4b01      	ldr	r3, [pc, #4]	; (800aad8 <SetRadioState+0x8>)
 800aad2:	7018      	strb	r0, [r3, #0]
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	20000028 	.word	0x20000028

0800aadc <RadioResetState>:
 800aadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aade:	b085      	sub	sp, #20
 800aae0:	4605      	mov	r5, r0
 800aae2:	f7ff fc87 	bl	800a3f4 <ResetIWDG>
 800aae6:	f001 fcc3 	bl	800c470 <CopyTempToInfo>
 800aaea:	f7ff ffb9 	bl	800aa60 <StartTurnOffCounter>
 800aaee:	2000      	movs	r0, #0
 800aaf0:	f7fe faca 	bl	8009088 <GetErrorTimerStruct>
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	f7fe fac3 	bl	8009080 <GetErrorFlagsStruct>
 800aafa:	4601      	mov	r1, r0
 800aafc:	4620      	mov	r0, r4
 800aafe:	f001 fd75 	bl	800c5ec <ErrorTimerHourly>
 800ab02:	f001 f9e1 	bl	800bec8 <SaraPowerDown>
 800ab06:	b938      	cbnz	r0, 800ab18 <RadioResetState+0x3c>
 800ab08:	f7ff ffb2 	bl	800aa70 <CompareTurnOffTimers>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d0f8      	beq.n	800ab02 <RadioResetState+0x26>
 800ab10:	f7ff ffc7 	bl	800aaa2 <ResetRadio>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d0f4      	beq.n	800ab02 <RadioResetState+0x26>
 800ab18:	f7fe fab2 	bl	8009080 <GetErrorFlagsStruct>
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	f7fe fa7b 	bl	8009018 <GetInfoStruct>
 800ab22:	2400      	movs	r4, #0
 800ab24:	76bc      	strb	r4, [r7, #26]
 800ab26:	773c      	strb	r4, [r7, #28]
 800ab28:	4606      	mov	r6, r0
 800ab2a:	f7fc ffa5 	bl	8007a78 <EnableSD_Card>
 800ab2e:	f8b5 3258 	ldrh.w	r3, [r5, #600]	; 0x258
 800ab32:	b12b      	cbz	r3, 800ab40 <RadioResetState+0x64>
 800ab34:	4628      	mov	r0, r5
 800ab36:	f7fd f8b7 	bl	8007ca8 <SDwriteErrorLog>
 800ab3a:	b9c0      	cbnz	r0, 800ab6e <RadioResetState+0x92>
 800ab3c:	f8a5 0258 	strh.w	r0, [r5, #600]	; 0x258
 800ab40:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800ab44:	5af3      	ldrh	r3, [r6, r3]
 800ab46:	b15b      	cbz	r3, 800ab60 <RadioResetState+0x84>
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f7fd f847 	bl	8007bdc <SD_WriteInfoLog>
 800ab4e:	b938      	cbnz	r0, 800ab60 <RadioResetState+0x84>
 800ab50:	f7fe fa62 	bl	8009018 <GetInfoStruct>
 800ab54:	f001 fc1a 	bl	800c38c <ResetInfoStruct>
 800ab58:	f7fe fa62 	bl	8009020 <GetTempInfoStruct>
 800ab5c:	f001 fc16 	bl	800c38c <ResetInfoStruct>
 800ab60:	f7fe fcb4 	bl	80094cc <DisableSD_Card>
 800ab64:	4b08      	ldr	r3, [pc, #32]	; (800ab88 <RadioResetState+0xac>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	701a      	strb	r2, [r3, #0]
 800ab6a:	b005      	add	sp, #20
 800ab6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab6e:	f7fe fa4f 	bl	8009010 <GetErrorStruct>
 800ab72:	9402      	str	r4, [sp, #8]
 800ab74:	9003      	str	r0, [sp, #12]
 800ab76:	9401      	str	r4, [sp, #4]
 800ab78:	9400      	str	r4, [sp, #0]
 800ab7a:	2311      	movs	r3, #17
 800ab7c:	2215      	movs	r2, #21
 800ab7e:	2120      	movs	r1, #32
 800ab80:	201a      	movs	r0, #26
 800ab82:	f001 fbca 	bl	800c31a <ErrorAddLog>
 800ab86:	e7db      	b.n	800ab40 <RadioResetState+0x64>
 800ab88:	20000028 	.word	0x20000028

0800ab8c <RadioFirstRunFinished>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	f7fe fa73 	bl	8009078 <GetSaraConfigurationStruct>
 800ab92:	4605      	mov	r5, r0
 800ab94:	f7fe fa74 	bl	8009080 <GetErrorFlagsStruct>
 800ab98:	4604      	mov	r4, r0
 800ab9a:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 800ab9e:	f7ff fd77 	bl	800a690 <RTC_SetAlarm>
 800aba2:	4b06      	ldr	r3, [pc, #24]	; (800abbc <RadioFirstRunFinished+0x30>)
 800aba4:	4906      	ldr	r1, [pc, #24]	; (800abc0 <RadioFirstRunFinished+0x34>)
 800aba6:	4807      	ldr	r0, [pc, #28]	; (800abc4 <RadioFirstRunFinished+0x38>)
 800aba8:	220e      	movs	r2, #14
 800abaa:	701a      	strb	r2, [r3, #0]
 800abac:	4b06      	ldr	r3, [pc, #24]	; (800abc8 <RadioFirstRunFinished+0x3c>)
 800abae:	2201      	movs	r2, #1
 800abb0:	701a      	strb	r2, [r3, #0]
 800abb2:	f7ff ff41 	bl	800aa38 <debugPrint>
 800abb6:	2300      	movs	r3, #0
 800abb8:	74e3      	strb	r3, [r4, #19]
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	20000028 	.word	0x20000028
 800abc0:	0801001d 	.word	0x0801001d
 800abc4:	2000c5d8 	.word	0x2000c5d8
 800abc8:	200002b3 	.word	0x200002b3

0800abcc <RadioStateMachine>:
 800abcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd0:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 800aec8 <RadioStateMachine+0x2fc>
 800abd4:	f898 4000 	ldrb.w	r4, [r8]
 800abd8:	b0c6      	sub	sp, #280	; 0x118
 800abda:	4607      	mov	r7, r0
 800abdc:	460e      	mov	r6, r1
 800abde:	4645      	mov	r5, r8
 800abe0:	b9cc      	cbnz	r4, 800ac16 <RadioStateMachine+0x4a>
 800abe2:	48b3      	ldr	r0, [pc, #716]	; (800aeb0 <RadioStateMachine+0x2e4>)
 800abe4:	f002 fc12 	bl	800d40c <puts>
 800abe8:	4620      	mov	r0, r4
 800abea:	f7fe fa1d 	bl	8009028 <GetTimeStruct>
 800abee:	463a      	mov	r2, r7
 800abf0:	a906      	add	r1, sp, #24
 800abf2:	f001 ff5d 	bl	800cab0 <TimeToSend>
 800abf6:	f7fe fa13 	bl	8009020 <GetTempInfoStruct>
 800abfa:	2311      	movs	r3, #17
 800abfc:	9004      	str	r0, [sp, #16]
 800abfe:	2012      	movs	r0, #18
 800ac00:	9403      	str	r4, [sp, #12]
 800ac02:	9402      	str	r4, [sp, #8]
 800ac04:	9401      	str	r4, [sp, #4]
 800ac06:	9000      	str	r0, [sp, #0]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	211b      	movs	r1, #27
 800ac0c:	f001 fbd5 	bl	800c3ba <InfoLogAdd>
 800ac10:	b046      	add	sp, #280	; 0x118
 800ac12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac16:	2c01      	cmp	r4, #1
 800ac18:	d119      	bne.n	800ac4e <RadioStateMachine+0x82>
 800ac1a:	f7ff fe73 	bl	800a904 <MX_USART2_UART_Init>
 800ac1e:	f7ff fc29 	bl	800a474 <MX_LPTIM1_Init>
 800ac22:	f7fc ff29 	bl	8007a78 <EnableSD_Card>
 800ac26:	4638      	mov	r0, r7
 800ac28:	f7fc ff5a 	bl	8007ae0 <SDWriteSensorData>
 800ac2c:	f7fe fc4e 	bl	80094cc <DisableSD_Card>
 800ac30:	2302      	movs	r3, #2
 800ac32:	f888 3000 	strb.w	r3, [r8]
 800ac36:	f7fe f9f3 	bl	8009020 <GetTempInfoStruct>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	9004      	str	r0, [sp, #16]
 800ac3e:	2012      	movs	r0, #18
 800ac40:	9303      	str	r3, [sp, #12]
 800ac42:	9302      	str	r3, [sp, #8]
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	9000      	str	r0, [sp, #0]
 800ac48:	2311      	movs	r3, #17
 800ac4a:	2238      	movs	r2, #56	; 0x38
 800ac4c:	e7dd      	b.n	800ac0a <RadioStateMachine+0x3e>
 800ac4e:	2c02      	cmp	r4, #2
 800ac50:	d15f      	bne.n	800ad12 <RadioStateMachine+0x146>
 800ac52:	f7fe fa15 	bl	8009080 <GetErrorFlagsStruct>
 800ac56:	4605      	mov	r5, r0
 800ac58:	f001 f8fc 	bl	800be54 <StartUpSara>
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	b198      	cbz	r0, 800ac88 <RadioStateMachine+0xbc>
 800ac60:	2303      	movs	r3, #3
 800ac62:	2400      	movs	r4, #0
 800ac64:	4993      	ldr	r1, [pc, #588]	; (800aeb4 <RadioStateMachine+0x2e8>)
 800ac66:	4894      	ldr	r0, [pc, #592]	; (800aeb8 <RadioStateMachine+0x2ec>)
 800ac68:	f888 3000 	strb.w	r3, [r8]
 800ac6c:	f7ff fee4 	bl	800aa38 <debugPrint>
 800ac70:	736c      	strb	r4, [r5, #13]
 800ac72:	f7fe f9d5 	bl	8009020 <GetTempInfoStruct>
 800ac76:	9004      	str	r0, [sp, #16]
 800ac78:	2012      	movs	r0, #18
 800ac7a:	9403      	str	r4, [sp, #12]
 800ac7c:	9402      	str	r4, [sp, #8]
 800ac7e:	9401      	str	r4, [sp, #4]
 800ac80:	9000      	str	r0, [sp, #0]
 800ac82:	2316      	movs	r3, #22
 800ac84:	2227      	movs	r2, #39	; 0x27
 800ac86:	e7c0      	b.n	800ac0a <RadioStateMachine+0x3e>
 800ac88:	7b6b      	ldrb	r3, [r5, #13]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	736b      	strb	r3, [r5, #13]
 800ac8e:	f7fe f9c7 	bl	8009020 <GetTempInfoStruct>
 800ac92:	f04f 0811 	mov.w	r8, #17
 800ac96:	9004      	str	r0, [sp, #16]
 800ac98:	2316      	movs	r3, #22
 800ac9a:	9403      	str	r4, [sp, #12]
 800ac9c:	9402      	str	r4, [sp, #8]
 800ac9e:	9401      	str	r4, [sp, #4]
 800aca0:	f8cd 8000 	str.w	r8, [sp]
 800aca4:	2227      	movs	r2, #39	; 0x27
 800aca6:	211b      	movs	r1, #27
 800aca8:	2012      	movs	r0, #18
 800acaa:	f001 fb86 	bl	800c3ba <InfoLogAdd>
 800acae:	7b6b      	ldrb	r3, [r5, #13]
 800acb0:	2b03      	cmp	r3, #3
 800acb2:	d1ad      	bne.n	800ac10 <RadioStateMachine+0x44>
 800acb4:	f7fe f9b4 	bl	8009020 <GetTempInfoStruct>
 800acb8:	2316      	movs	r3, #22
 800acba:	2227      	movs	r2, #39	; 0x27
 800acbc:	211b      	movs	r1, #27
 800acbe:	9004      	str	r0, [sp, #16]
 800acc0:	9403      	str	r4, [sp, #12]
 800acc2:	4618      	mov	r0, r3
 800acc4:	9402      	str	r4, [sp, #8]
 800acc6:	9401      	str	r4, [sp, #4]
 800acc8:	f8cd 8000 	str.w	r8, [sp]
 800accc:	f001 fb75 	bl	800c3ba <InfoLogAdd>
 800acd0:	f7fe f99e 	bl	8009010 <GetErrorStruct>
 800acd4:	4643      	mov	r3, r8
 800acd6:	9003      	str	r0, [sp, #12]
 800acd8:	9402      	str	r4, [sp, #8]
 800acda:	9401      	str	r4, [sp, #4]
 800acdc:	9400      	str	r4, [sp, #0]
 800acde:	2216      	movs	r2, #22
 800ace0:	2127      	movs	r1, #39	; 0x27
 800ace2:	201b      	movs	r0, #27
 800ace4:	f001 fb19 	bl	800c31a <ErrorAddLog>
 800ace8:	7ceb      	ldrb	r3, [r5, #19]
 800acea:	b953      	cbnz	r3, 800ad02 <RadioStateMachine+0x136>
 800acec:	4639      	mov	r1, r7
 800acee:	4630      	mov	r0, r6
 800acf0:	f7ff fef4 	bl	800aadc <RadioResetState>
 800acf4:	2300      	movs	r3, #0
 800acf6:	736b      	strb	r3, [r5, #13]
 800acf8:	4970      	ldr	r1, [pc, #448]	; (800aebc <RadioStateMachine+0x2f0>)
 800acfa:	486f      	ldr	r0, [pc, #444]	; (800aeb8 <RadioStateMachine+0x2ec>)
 800acfc:	f7ff fe9c 	bl	800aa38 <debugPrint>
 800ad00:	e786      	b.n	800ac10 <RadioStateMachine+0x44>
 800ad02:	4620      	mov	r0, r4
 800ad04:	f7fe f990 	bl	8009028 <GetTimeStruct>
 800ad08:	f001 fae2 	bl	800c2d0 <InitTimeStruct>
 800ad0c:	f7ff ff3e 	bl	800ab8c <RadioFirstRunFinished>
 800ad10:	e7f0      	b.n	800acf4 <RadioStateMachine+0x128>
 800ad12:	2c03      	cmp	r4, #3
 800ad14:	d164      	bne.n	800ade0 <RadioStateMachine+0x214>
 800ad16:	f7fe f9b3 	bl	8009080 <GetErrorFlagsStruct>
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	f001 f900 	bl	800bf20 <SaraInitAtCommands>
 800ad20:	4604      	mov	r4, r0
 800ad22:	b1d8      	cbz	r0, 800ad5c <RadioStateMachine+0x190>
 800ad24:	2400      	movs	r4, #0
 800ad26:	4963      	ldr	r1, [pc, #396]	; (800aeb4 <RadioStateMachine+0x2e8>)
 800ad28:	4863      	ldr	r0, [pc, #396]	; (800aeb8 <RadioStateMachine+0x2ec>)
 800ad2a:	f7ff fe85 	bl	800aa38 <debugPrint>
 800ad2e:	2304      	movs	r3, #4
 800ad30:	73ac      	strb	r4, [r5, #14]
 800ad32:	f888 3000 	strb.w	r3, [r8]
 800ad36:	f7fe f973 	bl	8009020 <GetTempInfoStruct>
 800ad3a:	9004      	str	r0, [sp, #16]
 800ad3c:	2012      	movs	r0, #18
 800ad3e:	9000      	str	r0, [sp, #0]
 800ad40:	2320      	movs	r3, #32
 800ad42:	2227      	movs	r2, #39	; 0x27
 800ad44:	211b      	movs	r1, #27
 800ad46:	9403      	str	r4, [sp, #12]
 800ad48:	9402      	str	r4, [sp, #8]
 800ad4a:	9401      	str	r4, [sp, #4]
 800ad4c:	f001 fb35 	bl	800c3ba <InfoLogAdd>
 800ad50:	2002      	movs	r0, #2
 800ad52:	f7fe f969 	bl	8009028 <GetTimeStruct>
 800ad56:	f001 fe83 	bl	800ca60 <GetTime>
 800ad5a:	e759      	b.n	800ac10 <RadioStateMachine+0x44>
 800ad5c:	7bab      	ldrb	r3, [r5, #14]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	73ab      	strb	r3, [r5, #14]
 800ad62:	f7fe f95d 	bl	8009020 <GetTempInfoStruct>
 800ad66:	f04f 0811 	mov.w	r8, #17
 800ad6a:	9004      	str	r0, [sp, #16]
 800ad6c:	2320      	movs	r3, #32
 800ad6e:	9403      	str	r4, [sp, #12]
 800ad70:	9402      	str	r4, [sp, #8]
 800ad72:	9401      	str	r4, [sp, #4]
 800ad74:	f8cd 8000 	str.w	r8, [sp]
 800ad78:	2227      	movs	r2, #39	; 0x27
 800ad7a:	211b      	movs	r1, #27
 800ad7c:	2012      	movs	r0, #18
 800ad7e:	f001 fb1c 	bl	800c3ba <InfoLogAdd>
 800ad82:	7bab      	ldrb	r3, [r5, #14]
 800ad84:	2b03      	cmp	r3, #3
 800ad86:	f47f af43 	bne.w	800ac10 <RadioStateMachine+0x44>
 800ad8a:	f7fe f949 	bl	8009020 <GetTempInfoStruct>
 800ad8e:	2320      	movs	r3, #32
 800ad90:	9004      	str	r0, [sp, #16]
 800ad92:	9403      	str	r4, [sp, #12]
 800ad94:	9402      	str	r4, [sp, #8]
 800ad96:	9401      	str	r4, [sp, #4]
 800ad98:	f8cd 8000 	str.w	r8, [sp]
 800ad9c:	2227      	movs	r2, #39	; 0x27
 800ad9e:	211b      	movs	r1, #27
 800ada0:	2016      	movs	r0, #22
 800ada2:	f001 fb0a 	bl	800c3ba <InfoLogAdd>
 800ada6:	7ceb      	ldrb	r3, [r5, #19]
 800ada8:	b993      	cbnz	r3, 800add0 <RadioStateMachine+0x204>
 800adaa:	4639      	mov	r1, r7
 800adac:	4630      	mov	r0, r6
 800adae:	f7ff fe95 	bl	800aadc <RadioResetState>
 800adb2:	f7fe f92d 	bl	8009010 <GetErrorStruct>
 800adb6:	2400      	movs	r4, #0
 800adb8:	9003      	str	r0, [sp, #12]
 800adba:	9402      	str	r4, [sp, #8]
 800adbc:	9401      	str	r4, [sp, #4]
 800adbe:	9400      	str	r4, [sp, #0]
 800adc0:	2311      	movs	r3, #17
 800adc2:	2220      	movs	r2, #32
 800adc4:	2127      	movs	r1, #39	; 0x27
 800adc6:	201b      	movs	r0, #27
 800adc8:	f001 faa7 	bl	800c31a <ErrorAddLog>
 800adcc:	73ac      	strb	r4, [r5, #14]
 800adce:	e793      	b.n	800acf8 <RadioStateMachine+0x12c>
 800add0:	4620      	mov	r0, r4
 800add2:	f7fe f929 	bl	8009028 <GetTimeStruct>
 800add6:	f001 fa7b 	bl	800c2d0 <InitTimeStruct>
 800adda:	f7ff fed7 	bl	800ab8c <RadioFirstRunFinished>
 800adde:	e7e8      	b.n	800adb2 <RadioStateMachine+0x1e6>
 800ade0:	2c04      	cmp	r4, #4
 800ade2:	d173      	bne.n	800aecc <RadioStateMachine+0x300>
 800ade4:	f7fe f94c 	bl	8009080 <GetErrorFlagsStruct>
 800ade8:	220a      	movs	r2, #10
 800adea:	4681      	mov	r9, r0
 800adec:	4934      	ldr	r1, [pc, #208]	; (800aec0 <RadioStateMachine+0x2f4>)
 800adee:	4835      	ldr	r0, [pc, #212]	; (800aec4 <RadioStateMachine+0x2f8>)
 800adf0:	f001 f802 	bl	800bdf8 <SaraCheckCommand>
 800adf4:	4604      	mov	r4, r0
 800adf6:	b1a8      	cbz	r0, 800ae24 <RadioStateMachine+0x258>
 800adf8:	492e      	ldr	r1, [pc, #184]	; (800aeb4 <RadioStateMachine+0x2e8>)
 800adfa:	482f      	ldr	r0, [pc, #188]	; (800aeb8 <RadioStateMachine+0x2ec>)
 800adfc:	f7ff fe1c 	bl	800aa38 <debugPrint>
 800ae00:	f7fe f90e 	bl	8009020 <GetTempInfoStruct>
 800ae04:	2300      	movs	r3, #0
 800ae06:	9004      	str	r0, [sp, #16]
 800ae08:	2012      	movs	r0, #18
 800ae0a:	9303      	str	r3, [sp, #12]
 800ae0c:	9302      	str	r3, [sp, #8]
 800ae0e:	9301      	str	r3, [sp, #4]
 800ae10:	9000      	str	r0, [sp, #0]
 800ae12:	2326      	movs	r3, #38	; 0x26
 800ae14:	2229      	movs	r2, #41	; 0x29
 800ae16:	211b      	movs	r1, #27
 800ae18:	f001 facf 	bl	800c3ba <InfoLogAdd>
 800ae1c:	2305      	movs	r3, #5
 800ae1e:	f888 3000 	strb.w	r3, [r8]
 800ae22:	e6f5      	b.n	800ac10 <RadioStateMachine+0x44>
 800ae24:	2003      	movs	r0, #3
 800ae26:	f7fe f8ff 	bl	8009028 <GetTimeStruct>
 800ae2a:	f001 fe19 	bl	800ca60 <GetTime>
 800ae2e:	2002      	movs	r0, #2
 800ae30:	f7fe f8fa 	bl	8009028 <GetTimeStruct>
 800ae34:	4605      	mov	r5, r0
 800ae36:	2003      	movs	r0, #3
 800ae38:	f7fe f8f6 	bl	8009028 <GetTimeStruct>
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	4628      	mov	r0, r5
 800ae40:	f001 fdc8 	bl	800c9d4 <RTC_GetElapsedSeconds>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	bfb8      	it	lt
 800ae48:	4240      	neglt	r0, r0
 800ae4a:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 800ae4e:	f77f aedf 	ble.w	800ac10 <RadioStateMachine+0x44>
 800ae52:	f7fe f8e5 	bl	8009020 <GetTempInfoStruct>
 800ae56:	2511      	movs	r5, #17
 800ae58:	2326      	movs	r3, #38	; 0x26
 800ae5a:	2229      	movs	r2, #41	; 0x29
 800ae5c:	211b      	movs	r1, #27
 800ae5e:	9004      	str	r0, [sp, #16]
 800ae60:	9403      	str	r4, [sp, #12]
 800ae62:	2016      	movs	r0, #22
 800ae64:	9402      	str	r4, [sp, #8]
 800ae66:	9401      	str	r4, [sp, #4]
 800ae68:	9500      	str	r5, [sp, #0]
 800ae6a:	f001 faa6 	bl	800c3ba <InfoLogAdd>
 800ae6e:	f7fe f8cf 	bl	8009010 <GetErrorStruct>
 800ae72:	462b      	mov	r3, r5
 800ae74:	9003      	str	r0, [sp, #12]
 800ae76:	2217      	movs	r2, #23
 800ae78:	2129      	movs	r1, #41	; 0x29
 800ae7a:	201b      	movs	r0, #27
 800ae7c:	9402      	str	r4, [sp, #8]
 800ae7e:	9401      	str	r4, [sp, #4]
 800ae80:	9400      	str	r4, [sp, #0]
 800ae82:	f001 fa4a 	bl	800c31a <ErrorAddLog>
 800ae86:	490d      	ldr	r1, [pc, #52]	; (800aebc <RadioStateMachine+0x2f0>)
 800ae88:	480b      	ldr	r0, [pc, #44]	; (800aeb8 <RadioStateMachine+0x2ec>)
 800ae8a:	f7ff fdd5 	bl	800aa38 <debugPrint>
 800ae8e:	f899 3013 	ldrb.w	r3, [r9, #19]
 800ae92:	b923      	cbnz	r3, 800ae9e <RadioStateMachine+0x2d2>
 800ae94:	4639      	mov	r1, r7
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7ff fe20 	bl	800aadc <RadioResetState>
 800ae9c:	e6b8      	b.n	800ac10 <RadioStateMachine+0x44>
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f7fe f8c2 	bl	8009028 <GetTimeStruct>
 800aea4:	f001 fa14 	bl	800c2d0 <InitTimeStruct>
 800aea8:	f7ff fe70 	bl	800ab8c <RadioFirstRunFinished>
 800aeac:	e6b0      	b.n	800ac10 <RadioStateMachine+0x44>
 800aeae:	bf00      	nop
 800aeb0:	0800fa84 	.word	0x0800fa84
 800aeb4:	0800fa8f 	.word	0x0800fa8f
 800aeb8:	2000c5d8 	.word	0x2000c5d8
 800aebc:	0800f7ec 	.word	0x0800f7ec
 800aec0:	0800fa91 	.word	0x0800fa91
 800aec4:	0800fa9f 	.word	0x0800fa9f
 800aec8:	20000028 	.word	0x20000028
 800aecc:	2c05      	cmp	r4, #5
 800aece:	d15e      	bne.n	800af8e <RadioStateMachine+0x3c2>
 800aed0:	f7fe f8d6 	bl	8009080 <GetErrorFlagsStruct>
 800aed4:	4681      	mov	r9, r0
 800aed6:	f001 f8fb 	bl	800c0d0 <SaraGetSignalStrength>
 800aeda:	4605      	mov	r5, r0
 800aedc:	b1d8      	cbz	r0, 800af16 <RadioStateMachine+0x34a>
 800aede:	f001 f961 	bl	800c1a4 <SaraGetRSSI>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	f43f ae94 	beq.w	800ac10 <RadioStateMachine+0x44>
 800aee8:	f7fe f89a 	bl	8009020 <GetTempInfoStruct>
 800aeec:	2500      	movs	r5, #0
 800aeee:	9004      	str	r0, [sp, #16]
 800aef0:	2012      	movs	r0, #18
 800aef2:	9000      	str	r0, [sp, #0]
 800aef4:	2319      	movs	r3, #25
 800aef6:	2231      	movs	r2, #49	; 0x31
 800aef8:	211b      	movs	r1, #27
 800aefa:	9503      	str	r5, [sp, #12]
 800aefc:	9502      	str	r5, [sp, #8]
 800aefe:	9501      	str	r5, [sp, #4]
 800af00:	f001 fa5b 	bl	800c3ba <InfoLogAdd>
 800af04:	49a8      	ldr	r1, [pc, #672]	; (800b1a8 <RadioStateMachine+0x5dc>)
 800af06:	48a9      	ldr	r0, [pc, #676]	; (800b1ac <RadioStateMachine+0x5e0>)
 800af08:	f7ff fd96 	bl	800aa38 <debugPrint>
 800af0c:	f888 4000 	strb.w	r4, [r8]
 800af10:	f889 5005 	strb.w	r5, [r9, #5]
 800af14:	e67c      	b.n	800ac10 <RadioStateMachine+0x44>
 800af16:	f7fe f883 	bl	8009020 <GetTempInfoStruct>
 800af1a:	2411      	movs	r4, #17
 800af1c:	9004      	str	r0, [sp, #16]
 800af1e:	2319      	movs	r3, #25
 800af20:	2231      	movs	r2, #49	; 0x31
 800af22:	211b      	movs	r1, #27
 800af24:	2012      	movs	r0, #18
 800af26:	9503      	str	r5, [sp, #12]
 800af28:	9502      	str	r5, [sp, #8]
 800af2a:	9501      	str	r5, [sp, #4]
 800af2c:	9400      	str	r4, [sp, #0]
 800af2e:	f001 fa44 	bl	800c3ba <InfoLogAdd>
 800af32:	f899 3005 	ldrb.w	r3, [r9, #5]
 800af36:	3301      	adds	r3, #1
 800af38:	f889 3005 	strb.w	r3, [r9, #5]
 800af3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800af40:	f7f5 ffa8 	bl	8000e94 <HAL_Delay>
 800af44:	f899 3005 	ldrb.w	r3, [r9, #5]
 800af48:	2b0f      	cmp	r3, #15
 800af4a:	f47f ae61 	bne.w	800ac10 <RadioStateMachine+0x44>
 800af4e:	f7fe f867 	bl	8009020 <GetTempInfoStruct>
 800af52:	2319      	movs	r3, #25
 800af54:	9004      	str	r0, [sp, #16]
 800af56:	2231      	movs	r2, #49	; 0x31
 800af58:	211b      	movs	r1, #27
 800af5a:	9503      	str	r5, [sp, #12]
 800af5c:	9502      	str	r5, [sp, #8]
 800af5e:	e88d 0030 	stmia.w	sp, {r4, r5}
 800af62:	2016      	movs	r0, #22
 800af64:	f001 fa29 	bl	800c3ba <InfoLogAdd>
 800af68:	f7fe f852 	bl	8009010 <GetErrorStruct>
 800af6c:	9502      	str	r5, [sp, #8]
 800af6e:	9003      	str	r0, [sp, #12]
 800af70:	9501      	str	r5, [sp, #4]
 800af72:	9500      	str	r5, [sp, #0]
 800af74:	4623      	mov	r3, r4
 800af76:	2217      	movs	r2, #23
 800af78:	2131      	movs	r1, #49	; 0x31
 800af7a:	201b      	movs	r0, #27
 800af7c:	f001 f9cd 	bl	800c31a <ErrorAddLog>
 800af80:	f889 5005 	strb.w	r5, [r9, #5]
 800af84:	498a      	ldr	r1, [pc, #552]	; (800b1b0 <RadioStateMachine+0x5e4>)
 800af86:	4889      	ldr	r0, [pc, #548]	; (800b1ac <RadioStateMachine+0x5e0>)
 800af88:	f7ff fd56 	bl	800aa38 <debugPrint>
 800af8c:	e782      	b.n	800ae94 <RadioStateMachine+0x2c8>
 800af8e:	2c06      	cmp	r4, #6
 800af90:	d17b      	bne.n	800b08a <RadioStateMachine+0x4be>
 800af92:	f7fe f875 	bl	8009080 <GetErrorFlagsStruct>
 800af96:	2240      	movs	r2, #64	; 0x40
 800af98:	2100      	movs	r1, #0
 800af9a:	4604      	mov	r4, r0
 800af9c:	a806      	add	r0, sp, #24
 800af9e:	f001 fe69 	bl	800cc74 <memset>
 800afa2:	a806      	add	r0, sp, #24
 800afa4:	f000 ffd4 	bl	800bf50 <SARA_getRealTimeClock>
 800afa8:	2000      	movs	r0, #0
 800afaa:	f7fe f83d 	bl	8009028 <GetTimeStruct>
 800afae:	4605      	mov	r5, r0
 800afb0:	2001      	movs	r0, #1
 800afb2:	f7fe f839 	bl	8009028 <GetTimeStruct>
 800afb6:	4629      	mov	r1, r5
 800afb8:	4602      	mov	r2, r0
 800afba:	a806      	add	r0, sp, #24
 800afbc:	f001 f826 	bl	800c00c <SaraCompareRealTimeClock>
 800afc0:	4605      	mov	r5, r0
 800afc2:	b1c8      	cbz	r0, 800aff8 <RadioStateMachine+0x42c>
 800afc4:	f7fe f82c 	bl	8009020 <GetTempInfoStruct>
 800afc8:	2500      	movs	r5, #0
 800afca:	9004      	str	r0, [sp, #16]
 800afcc:	2012      	movs	r0, #18
 800afce:	9000      	str	r0, [sp, #0]
 800afd0:	2317      	movs	r3, #23
 800afd2:	2232      	movs	r2, #50	; 0x32
 800afd4:	211b      	movs	r1, #27
 800afd6:	9503      	str	r5, [sp, #12]
 800afd8:	9502      	str	r5, [sp, #8]
 800afda:	9501      	str	r5, [sp, #4]
 800afdc:	f001 f9ed 	bl	800c3ba <InfoLogAdd>
 800afe0:	2307      	movs	r3, #7
 800afe2:	202e      	movs	r0, #46	; 0x2e
 800afe4:	f888 3000 	strb.w	r3, [r8]
 800afe8:	f002 f9a0 	bl	800d32c <putchar>
 800afec:	7ce3      	ldrb	r3, [r4, #19]
 800afee:	71e5      	strb	r5, [r4, #7]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	f47f ae0d 	bne.w	800ac10 <RadioStateMachine+0x44>
 800aff6:	e757      	b.n	800aea8 <RadioStateMachine+0x2dc>
 800aff8:	20c8      	movs	r0, #200	; 0xc8
 800affa:	f7f5 ff4b 	bl	8000e94 <HAL_Delay>
 800affe:	79e3      	ldrb	r3, [r4, #7]
 800b000:	3301      	adds	r3, #1
 800b002:	71e3      	strb	r3, [r4, #7]
 800b004:	f7fe f80c 	bl	8009020 <GetTempInfoStruct>
 800b008:	f04f 0811 	mov.w	r8, #17
 800b00c:	9004      	str	r0, [sp, #16]
 800b00e:	2317      	movs	r3, #23
 800b010:	9503      	str	r5, [sp, #12]
 800b012:	9502      	str	r5, [sp, #8]
 800b014:	9501      	str	r5, [sp, #4]
 800b016:	f8cd 8000 	str.w	r8, [sp]
 800b01a:	2232      	movs	r2, #50	; 0x32
 800b01c:	211b      	movs	r1, #27
 800b01e:	2012      	movs	r0, #18
 800b020:	f001 f9cb 	bl	800c3ba <InfoLogAdd>
 800b024:	79e3      	ldrb	r3, [r4, #7]
 800b026:	2b03      	cmp	r3, #3
 800b028:	f47f adf2 	bne.w	800ac10 <RadioStateMachine+0x44>
 800b02c:	f7fd fff8 	bl	8009020 <GetTempInfoStruct>
 800b030:	2317      	movs	r3, #23
 800b032:	9004      	str	r0, [sp, #16]
 800b034:	9503      	str	r5, [sp, #12]
 800b036:	9502      	str	r5, [sp, #8]
 800b038:	9501      	str	r5, [sp, #4]
 800b03a:	f8cd 8000 	str.w	r8, [sp]
 800b03e:	2232      	movs	r2, #50	; 0x32
 800b040:	211b      	movs	r1, #27
 800b042:	2016      	movs	r0, #22
 800b044:	f001 f9b9 	bl	800c3ba <InfoLogAdd>
 800b048:	7ce3      	ldrb	r3, [r4, #19]
 800b04a:	b9b3      	cbnz	r3, 800b07a <RadioStateMachine+0x4ae>
 800b04c:	4639      	mov	r1, r7
 800b04e:	4630      	mov	r0, r6
 800b050:	f7ff fd44 	bl	800aadc <RadioResetState>
 800b054:	f7fd ffdc 	bl	8009010 <GetErrorStruct>
 800b058:	2500      	movs	r5, #0
 800b05a:	9003      	str	r0, [sp, #12]
 800b05c:	2311      	movs	r3, #17
 800b05e:	2225      	movs	r2, #37	; 0x25
 800b060:	2132      	movs	r1, #50	; 0x32
 800b062:	201b      	movs	r0, #27
 800b064:	9502      	str	r5, [sp, #8]
 800b066:	9501      	str	r5, [sp, #4]
 800b068:	9500      	str	r5, [sp, #0]
 800b06a:	f001 f956 	bl	800c31a <ErrorAddLog>
 800b06e:	4950      	ldr	r1, [pc, #320]	; (800b1b0 <RadioStateMachine+0x5e4>)
 800b070:	484e      	ldr	r0, [pc, #312]	; (800b1ac <RadioStateMachine+0x5e0>)
 800b072:	f7ff fce1 	bl	800aa38 <debugPrint>
 800b076:	71e5      	strb	r5, [r4, #7]
 800b078:	e5ca      	b.n	800ac10 <RadioStateMachine+0x44>
 800b07a:	2000      	movs	r0, #0
 800b07c:	f7fd ffd4 	bl	8009028 <GetTimeStruct>
 800b080:	f001 f926 	bl	800c2d0 <InitTimeStruct>
 800b084:	f7ff fd82 	bl	800ab8c <RadioFirstRunFinished>
 800b088:	e7e4      	b.n	800b054 <RadioStateMachine+0x488>
 800b08a:	2c07      	cmp	r4, #7
 800b08c:	d158      	bne.n	800b140 <RadioStateMachine+0x574>
 800b08e:	f7fd fff7 	bl	8009080 <GetErrorFlagsStruct>
 800b092:	4605      	mov	r5, r0
 800b094:	f7fd fff0 	bl	8009078 <GetSaraConfigurationStruct>
 800b098:	3085      	adds	r0, #133	; 0x85
 800b09a:	f000 fce9 	bl	800ba70 <MqttSetHttp>
 800b09e:	4604      	mov	r4, r0
 800b0a0:	b1b0      	cbz	r0, 800b0d0 <RadioStateMachine+0x504>
 800b0a2:	f7fd ffbd 	bl	8009020 <GetTempInfoStruct>
 800b0a6:	2400      	movs	r4, #0
 800b0a8:	9004      	str	r0, [sp, #16]
 800b0aa:	2012      	movs	r0, #18
 800b0ac:	2317      	movs	r3, #23
 800b0ae:	9000      	str	r0, [sp, #0]
 800b0b0:	2233      	movs	r2, #51	; 0x33
 800b0b2:	211b      	movs	r1, #27
 800b0b4:	9403      	str	r4, [sp, #12]
 800b0b6:	9402      	str	r4, [sp, #8]
 800b0b8:	9401      	str	r4, [sp, #4]
 800b0ba:	f001 f97e 	bl	800c3ba <InfoLogAdd>
 800b0be:	493a      	ldr	r1, [pc, #232]	; (800b1a8 <RadioStateMachine+0x5dc>)
 800b0c0:	483a      	ldr	r0, [pc, #232]	; (800b1ac <RadioStateMachine+0x5e0>)
 800b0c2:	f7ff fcb9 	bl	800aa38 <debugPrint>
 800b0c6:	2308      	movs	r3, #8
 800b0c8:	f888 3000 	strb.w	r3, [r8]
 800b0cc:	73ec      	strb	r4, [r5, #15]
 800b0ce:	e59f      	b.n	800ac10 <RadioStateMachine+0x44>
 800b0d0:	7beb      	ldrb	r3, [r5, #15]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	73eb      	strb	r3, [r5, #15]
 800b0d6:	f7fd ffa3 	bl	8009020 <GetTempInfoStruct>
 800b0da:	2311      	movs	r3, #17
 800b0dc:	9004      	str	r0, [sp, #16]
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	9403      	str	r4, [sp, #12]
 800b0e2:	2317      	movs	r3, #23
 800b0e4:	9402      	str	r4, [sp, #8]
 800b0e6:	9401      	str	r4, [sp, #4]
 800b0e8:	2233      	movs	r2, #51	; 0x33
 800b0ea:	211b      	movs	r1, #27
 800b0ec:	2012      	movs	r0, #18
 800b0ee:	f001 f964 	bl	800c3ba <InfoLogAdd>
 800b0f2:	7beb      	ldrb	r3, [r5, #15]
 800b0f4:	2b03      	cmp	r3, #3
 800b0f6:	f47f ad8b 	bne.w	800ac10 <RadioStateMachine+0x44>
 800b0fa:	f7fd ff91 	bl	8009020 <GetTempInfoStruct>
 800b0fe:	2400      	movs	r4, #0
 800b100:	f04f 0811 	mov.w	r8, #17
 800b104:	2317      	movs	r3, #23
 800b106:	2233      	movs	r2, #51	; 0x33
 800b108:	211b      	movs	r1, #27
 800b10a:	9004      	str	r0, [sp, #16]
 800b10c:	9403      	str	r4, [sp, #12]
 800b10e:	2016      	movs	r0, #22
 800b110:	9402      	str	r4, [sp, #8]
 800b112:	9401      	str	r4, [sp, #4]
 800b114:	f8cd 8000 	str.w	r8, [sp]
 800b118:	f001 f94f 	bl	800c3ba <InfoLogAdd>
 800b11c:	f7fd ff78 	bl	8009010 <GetErrorStruct>
 800b120:	4643      	mov	r3, r8
 800b122:	9003      	str	r0, [sp, #12]
 800b124:	2217      	movs	r2, #23
 800b126:	2133      	movs	r1, #51	; 0x33
 800b128:	201b      	movs	r0, #27
 800b12a:	9402      	str	r4, [sp, #8]
 800b12c:	9401      	str	r4, [sp, #4]
 800b12e:	9400      	str	r4, [sp, #0]
 800b130:	f001 f8f3 	bl	800c31a <ErrorAddLog>
 800b134:	491e      	ldr	r1, [pc, #120]	; (800b1b0 <RadioStateMachine+0x5e4>)
 800b136:	481d      	ldr	r0, [pc, #116]	; (800b1ac <RadioStateMachine+0x5e0>)
 800b138:	f7ff fc7e 	bl	800aa38 <debugPrint>
 800b13c:	73ec      	strb	r4, [r5, #15]
 800b13e:	e6a9      	b.n	800ae94 <RadioStateMachine+0x2c8>
 800b140:	2c08      	cmp	r4, #8
 800b142:	d170      	bne.n	800b226 <RadioStateMachine+0x65a>
 800b144:	f7fd ff9c 	bl	8009080 <GetErrorFlagsStruct>
 800b148:	4680      	mov	r8, r0
 800b14a:	f000 fc87 	bl	800ba5c <MqttConnect>
 800b14e:	b388      	cbz	r0, 800b1b4 <RadioStateMachine+0x5e8>
 800b150:	f7fd ff66 	bl	8009020 <GetTempInfoStruct>
 800b154:	2400      	movs	r4, #0
 800b156:	9004      	str	r0, [sp, #16]
 800b158:	2012      	movs	r0, #18
 800b15a:	2326      	movs	r3, #38	; 0x26
 800b15c:	2233      	movs	r2, #51	; 0x33
 800b15e:	9000      	str	r0, [sp, #0]
 800b160:	211b      	movs	r1, #27
 800b162:	9403      	str	r4, [sp, #12]
 800b164:	9402      	str	r4, [sp, #8]
 800b166:	9401      	str	r4, [sp, #4]
 800b168:	f001 f927 	bl	800c3ba <InfoLogAdd>
 800b16c:	490e      	ldr	r1, [pc, #56]	; (800b1a8 <RadioStateMachine+0x5dc>)
 800b16e:	480f      	ldr	r0, [pc, #60]	; (800b1ac <RadioStateMachine+0x5e0>)
 800b170:	f7ff fc62 	bl	800aa38 <debugPrint>
 800b174:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b178:	4621      	mov	r1, r4
 800b17a:	a806      	add	r0, sp, #24
 800b17c:	f001 fd7a 	bl	800cc74 <memset>
 800b180:	22c8      	movs	r2, #200	; 0xc8
 800b182:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b186:	a806      	add	r0, sp, #24
 800b188:	f000 fdbe 	bl	800bd08 <SaraWaitForResponse>
 800b18c:	2309      	movs	r3, #9
 800b18e:	702b      	strb	r3, [r5, #0]
 800b190:	f898 301c 	ldrb.w	r3, [r8, #28]
 800b194:	f888 4006 	strb.w	r4, [r8, #6]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	f47f ad39 	bne.w	800ac10 <RadioStateMachine+0x44>
 800b19e:	230a      	movs	r3, #10
 800b1a0:	702b      	strb	r3, [r5, #0]
 800b1a2:	f888 401c 	strb.w	r4, [r8, #28]
 800b1a6:	e533      	b.n	800ac10 <RadioStateMachine+0x44>
 800b1a8:	0800fa8f 	.word	0x0800fa8f
 800b1ac:	2000c5d8 	.word	0x2000c5d8
 800b1b0:	0800f7ec 	.word	0x0800f7ec
 800b1b4:	f898 3006 	ldrb.w	r3, [r8, #6]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	f888 3006 	strb.w	r3, [r8, #6]
 800b1be:	f7fd ff2f 	bl	8009020 <GetTempInfoStruct>
 800b1c2:	2400      	movs	r4, #0
 800b1c4:	2511      	movs	r5, #17
 800b1c6:	9004      	str	r0, [sp, #16]
 800b1c8:	2326      	movs	r3, #38	; 0x26
 800b1ca:	9403      	str	r4, [sp, #12]
 800b1cc:	9402      	str	r4, [sp, #8]
 800b1ce:	9401      	str	r4, [sp, #4]
 800b1d0:	9500      	str	r5, [sp, #0]
 800b1d2:	2233      	movs	r2, #51	; 0x33
 800b1d4:	211b      	movs	r1, #27
 800b1d6:	2012      	movs	r0, #18
 800b1d8:	f001 f8ef 	bl	800c3ba <InfoLogAdd>
 800b1dc:	f898 3006 	ldrb.w	r3, [r8, #6]
 800b1e0:	2b03      	cmp	r3, #3
 800b1e2:	f47f ad15 	bne.w	800ac10 <RadioStateMachine+0x44>
 800b1e6:	f7fd ff1b 	bl	8009020 <GetTempInfoStruct>
 800b1ea:	2326      	movs	r3, #38	; 0x26
 800b1ec:	2233      	movs	r2, #51	; 0x33
 800b1ee:	211b      	movs	r1, #27
 800b1f0:	9004      	str	r0, [sp, #16]
 800b1f2:	9403      	str	r4, [sp, #12]
 800b1f4:	2016      	movs	r0, #22
 800b1f6:	9402      	str	r4, [sp, #8]
 800b1f8:	9401      	str	r4, [sp, #4]
 800b1fa:	9500      	str	r5, [sp, #0]
 800b1fc:	f001 f8dd 	bl	800c3ba <InfoLogAdd>
 800b200:	f7fd ff06 	bl	8009010 <GetErrorStruct>
 800b204:	462b      	mov	r3, r5
 800b206:	9003      	str	r0, [sp, #12]
 800b208:	2226      	movs	r2, #38	; 0x26
 800b20a:	2133      	movs	r1, #51	; 0x33
 800b20c:	201b      	movs	r0, #27
 800b20e:	9402      	str	r4, [sp, #8]
 800b210:	9401      	str	r4, [sp, #4]
 800b212:	9400      	str	r4, [sp, #0]
 800b214:	f001 f881 	bl	800c31a <ErrorAddLog>
 800b218:	49b1      	ldr	r1, [pc, #708]	; (800b4e0 <RadioStateMachine+0x914>)
 800b21a:	48b2      	ldr	r0, [pc, #712]	; (800b4e4 <RadioStateMachine+0x918>)
 800b21c:	f7ff fc0c 	bl	800aa38 <debugPrint>
 800b220:	f888 4006 	strb.w	r4, [r8, #6]
 800b224:	e636      	b.n	800ae94 <RadioStateMachine+0x2c8>
 800b226:	2c09      	cmp	r4, #9
 800b228:	d166      	bne.n	800b2f8 <RadioStateMachine+0x72c>
 800b22a:	f7fd ff29 	bl	8009080 <GetErrorFlagsStruct>
 800b22e:	4680      	mov	r8, r0
 800b230:	f7fc fc22 	bl	8007a78 <EnableSD_Card>
 800b234:	f7fc f8a0 	bl	8007378 <SD_Init>
 800b238:	4604      	mov	r4, r0
 800b23a:	bb28      	cbnz	r0, 800b288 <RadioStateMachine+0x6bc>
 800b23c:	f7fc fa3a 	bl	80076b4 <FindFile>
 800b240:	2800      	cmp	r0, #0
 800b242:	f43f ace5 	beq.w	800ac10 <RadioStateMachine+0x44>
 800b246:	f7fc fb4b 	bl	80078e0 <FindAndSendFile>
 800b24a:	f7fe f93f 	bl	80094cc <DisableSD_Card>
 800b24e:	f7fd fee7 	bl	8009020 <GetTempInfoStruct>
 800b252:	9004      	str	r0, [sp, #16]
 800b254:	2012      	movs	r0, #18
 800b256:	2315      	movs	r3, #21
 800b258:	9000      	str	r0, [sp, #0]
 800b25a:	2233      	movs	r2, #51	; 0x33
 800b25c:	211b      	movs	r1, #27
 800b25e:	9403      	str	r4, [sp, #12]
 800b260:	9402      	str	r4, [sp, #8]
 800b262:	9401      	str	r4, [sp, #4]
 800b264:	f001 f8a9 	bl	800c3ba <InfoLogAdd>
 800b268:	499f      	ldr	r1, [pc, #636]	; (800b4e8 <RadioStateMachine+0x91c>)
 800b26a:	489e      	ldr	r0, [pc, #632]	; (800b4e4 <RadioStateMachine+0x918>)
 800b26c:	f7ff fbe4 	bl	800aa38 <debugPrint>
 800b270:	230a      	movs	r3, #10
 800b272:	702b      	strb	r3, [r5, #0]
 800b274:	f898 301a 	ldrb.w	r3, [r8, #26]
 800b278:	f888 4008 	strb.w	r4, [r8, #8]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	f47f acc7 	bne.w	800ac10 <RadioStateMachine+0x44>
 800b282:	230b      	movs	r3, #11
 800b284:	702b      	strb	r3, [r5, #0]
 800b286:	e4c3      	b.n	800ac10 <RadioStateMachine+0x44>
 800b288:	f7fd feca 	bl	8009020 <GetTempInfoStruct>
 800b28c:	2400      	movs	r4, #0
 800b28e:	2511      	movs	r5, #17
 800b290:	9004      	str	r0, [sp, #16]
 800b292:	2315      	movs	r3, #21
 800b294:	9403      	str	r4, [sp, #12]
 800b296:	9402      	str	r4, [sp, #8]
 800b298:	9401      	str	r4, [sp, #4]
 800b29a:	9500      	str	r5, [sp, #0]
 800b29c:	2233      	movs	r2, #51	; 0x33
 800b29e:	211b      	movs	r1, #27
 800b2a0:	2012      	movs	r0, #18
 800b2a2:	f001 f88a 	bl	800c3ba <InfoLogAdd>
 800b2a6:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	f888 3008 	strb.w	r3, [r8, #8]
 800b2b4:	f47f acac 	bne.w	800ac10 <RadioStateMachine+0x44>
 800b2b8:	f7fd feb2 	bl	8009020 <GetTempInfoStruct>
 800b2bc:	2315      	movs	r3, #21
 800b2be:	2233      	movs	r2, #51	; 0x33
 800b2c0:	211b      	movs	r1, #27
 800b2c2:	9004      	str	r0, [sp, #16]
 800b2c4:	9403      	str	r4, [sp, #12]
 800b2c6:	2016      	movs	r0, #22
 800b2c8:	9402      	str	r4, [sp, #8]
 800b2ca:	9401      	str	r4, [sp, #4]
 800b2cc:	9500      	str	r5, [sp, #0]
 800b2ce:	f001 f874 	bl	800c3ba <InfoLogAdd>
 800b2d2:	f7fd fe9d 	bl	8009010 <GetErrorStruct>
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	9003      	str	r0, [sp, #12]
 800b2da:	2215      	movs	r2, #21
 800b2dc:	2133      	movs	r1, #51	; 0x33
 800b2de:	201b      	movs	r0, #27
 800b2e0:	9402      	str	r4, [sp, #8]
 800b2e2:	9401      	str	r4, [sp, #4]
 800b2e4:	9400      	str	r4, [sp, #0]
 800b2e6:	f001 f818 	bl	800c31a <ErrorAddLog>
 800b2ea:	497d      	ldr	r1, [pc, #500]	; (800b4e0 <RadioStateMachine+0x914>)
 800b2ec:	487d      	ldr	r0, [pc, #500]	; (800b4e4 <RadioStateMachine+0x918>)
 800b2ee:	f7ff fba3 	bl	800aa38 <debugPrint>
 800b2f2:	f888 4008 	strb.w	r4, [r8, #8]
 800b2f6:	e5cd      	b.n	800ae94 <RadioStateMachine+0x2c8>
 800b2f8:	2c0a      	cmp	r4, #10
 800b2fa:	f040 8085 	bne.w	800b408 <RadioStateMachine+0x83c>
 800b2fe:	f7fd febf 	bl	8009080 <GetErrorFlagsStruct>
 800b302:	4681      	mov	r9, r0
 800b304:	f7fd feb8 	bl	8009078 <GetSaraConfigurationStruct>
 800b308:	f100 0850 	add.w	r8, r0, #80	; 0x50
 800b30c:	2100      	movs	r1, #0
 800b30e:	4640      	mov	r0, r8
 800b310:	f000 fbe8 	bl	800bae4 <MqttSubscribe>
 800b314:	b318      	cbz	r0, 800b35e <RadioStateMachine+0x792>
 800b316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b31a:	2100      	movs	r1, #0
 800b31c:	a806      	add	r0, sp, #24
 800b31e:	f001 fca9 	bl	800cc74 <memset>
 800b322:	2202      	movs	r2, #2
 800b324:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b328:	a806      	add	r0, sp, #24
 800b32a:	f000 fced 	bl	800bd08 <SaraWaitForResponse>
 800b32e:	f7fd fe77 	bl	8009020 <GetTempInfoStruct>
 800b332:	2400      	movs	r4, #0
 800b334:	9004      	str	r0, [sp, #16]
 800b336:	2012      	movs	r0, #18
 800b338:	2327      	movs	r3, #39	; 0x27
 800b33a:	9403      	str	r4, [sp, #12]
 800b33c:	9402      	str	r4, [sp, #8]
 800b33e:	9401      	str	r4, [sp, #4]
 800b340:	9000      	str	r0, [sp, #0]
 800b342:	2233      	movs	r2, #51	; 0x33
 800b344:	211b      	movs	r1, #27
 800b346:	f001 f838 	bl	800c3ba <InfoLogAdd>
 800b34a:	2301      	movs	r3, #1
 800b34c:	f889 301a 	strb.w	r3, [r9, #26]
 800b350:	230b      	movs	r3, #11
 800b352:	702b      	strb	r3, [r5, #0]
 800b354:	f889 4009 	strb.w	r4, [r9, #9]
 800b358:	f889 401d 	strb.w	r4, [r9, #29]
 800b35c:	e458      	b.n	800ac10 <RadioStateMachine+0x44>
 800b35e:	4640      	mov	r0, r8
 800b360:	f000 fbe6 	bl	800bb30 <MqttUnSubscribe>
 800b364:	4680      	mov	r8, r0
 800b366:	b108      	cbz	r0, 800b36c <RadioStateMachine+0x7a0>
 800b368:	702c      	strb	r4, [r5, #0]
 800b36a:	e451      	b.n	800ac10 <RadioStateMachine+0x44>
 800b36c:	f7fd fe58 	bl	8009020 <GetTempInfoStruct>
 800b370:	2411      	movs	r4, #17
 800b372:	2327      	movs	r3, #39	; 0x27
 800b374:	2233      	movs	r2, #51	; 0x33
 800b376:	211b      	movs	r1, #27
 800b378:	9004      	str	r0, [sp, #16]
 800b37a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b37e:	2012      	movs	r0, #18
 800b380:	f8cd 8008 	str.w	r8, [sp, #8]
 800b384:	f8cd 8004 	str.w	r8, [sp, #4]
 800b388:	9400      	str	r4, [sp, #0]
 800b38a:	f001 f816 	bl	800c3ba <InfoLogAdd>
 800b38e:	f7fd fe3f 	bl	8009010 <GetErrorStruct>
 800b392:	4623      	mov	r3, r4
 800b394:	9003      	str	r0, [sp, #12]
 800b396:	f8cd 8008 	str.w	r8, [sp, #8]
 800b39a:	f8cd 8004 	str.w	r8, [sp, #4]
 800b39e:	f8cd 8000 	str.w	r8, [sp]
 800b3a2:	2227      	movs	r2, #39	; 0x27
 800b3a4:	2133      	movs	r1, #51	; 0x33
 800b3a6:	201b      	movs	r0, #27
 800b3a8:	f000 ffb7 	bl	800c31a <ErrorAddLog>
 800b3ac:	f899 3009 	ldrb.w	r3, [r9, #9]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d002      	beq.n	800b3be <RadioStateMachine+0x7f2>
 800b3b8:	f889 3009 	strb.w	r3, [r9, #9]
 800b3bc:	e428      	b.n	800ac10 <RadioStateMachine+0x44>
 800b3be:	f899 301d 	ldrb.w	r3, [r9, #29]
 800b3c2:	f889 8009 	strb.w	r8, [r9, #9]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	f889 301d 	strb.w	r3, [r9, #29]
 800b3cc:	f000 fbca 	bl	800bb64 <MqttDisconnect>
 800b3d0:	2307      	movs	r3, #7
 800b3d2:	702b      	strb	r3, [r5, #0]
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f889 301c 	strb.w	r3, [r9, #28]
 800b3da:	f899 301d 	ldrb.w	r3, [r9, #29]
 800b3de:	2b03      	cmp	r3, #3
 800b3e0:	f47f ac16 	bne.w	800ac10 <RadioStateMachine+0x44>
 800b3e4:	f7fd fe1c 	bl	8009020 <GetTempInfoStruct>
 800b3e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3ec:	9004      	str	r0, [sp, #16]
 800b3ee:	f8cd 8008 	str.w	r8, [sp, #8]
 800b3f2:	e88d 0110 	stmia.w	sp, {r4, r8}
 800b3f6:	2327      	movs	r3, #39	; 0x27
 800b3f8:	2233      	movs	r2, #51	; 0x33
 800b3fa:	211b      	movs	r1, #27
 800b3fc:	2016      	movs	r0, #22
 800b3fe:	f000 ffdc 	bl	800c3ba <InfoLogAdd>
 800b402:	f889 801d 	strb.w	r8, [r9, #29]
 800b406:	e545      	b.n	800ae94 <RadioStateMachine+0x2c8>
 800b408:	2c0b      	cmp	r4, #11
 800b40a:	d16f      	bne.n	800b4ec <RadioStateMachine+0x920>
 800b40c:	f7fd fe38 	bl	8009080 <GetErrorFlagsStruct>
 800b410:	4680      	mov	r8, r0
 800b412:	f7fd fe31 	bl	8009078 <GetSaraConfigurationStruct>
 800b416:	4682      	mov	sl, r0
 800b418:	3060      	adds	r0, #96	; 0x60
 800b41a:	f000 fae1 	bl	800b9e0 <ServerDo>
 800b41e:	4604      	mov	r4, r0
 800b420:	b198      	cbz	r0, 800b44a <RadioStateMachine+0x87e>
 800b422:	f7fd fdfd 	bl	8009020 <GetTempInfoStruct>
 800b426:	2400      	movs	r4, #0
 800b428:	9004      	str	r0, [sp, #16]
 800b42a:	2012      	movs	r0, #18
 800b42c:	2314      	movs	r3, #20
 800b42e:	9403      	str	r4, [sp, #12]
 800b430:	9402      	str	r4, [sp, #8]
 800b432:	9401      	str	r4, [sp, #4]
 800b434:	9000      	str	r0, [sp, #0]
 800b436:	2233      	movs	r2, #51	; 0x33
 800b438:	211b      	movs	r1, #27
 800b43a:	f000 ffbe 	bl	800c3ba <InfoLogAdd>
 800b43e:	230c      	movs	r3, #12
 800b440:	702b      	strb	r3, [r5, #0]
 800b442:	f888 400c 	strb.w	r4, [r8, #12]
 800b446:	f7ff bbe3 	b.w	800ac10 <RadioStateMachine+0x44>
 800b44a:	f898 300c 	ldrb.w	r3, [r8, #12]
 800b44e:	3301      	adds	r3, #1
 800b450:	f888 300c 	strb.w	r3, [r8, #12]
 800b454:	f7fd fde4 	bl	8009020 <GetTempInfoStruct>
 800b458:	f04f 0911 	mov.w	r9, #17
 800b45c:	9004      	str	r0, [sp, #16]
 800b45e:	2314      	movs	r3, #20
 800b460:	9403      	str	r4, [sp, #12]
 800b462:	9402      	str	r4, [sp, #8]
 800b464:	9401      	str	r4, [sp, #4]
 800b466:	f8cd 9000 	str.w	r9, [sp]
 800b46a:	2233      	movs	r2, #51	; 0x33
 800b46c:	211b      	movs	r1, #27
 800b46e:	2012      	movs	r0, #18
 800b470:	f000 ffa3 	bl	800c3ba <InfoLogAdd>
 800b474:	f898 300c 	ldrb.w	r3, [r8, #12]
 800b478:	2b09      	cmp	r3, #9
 800b47a:	f67f abc9 	bls.w	800ac10 <RadioStateMachine+0x44>
 800b47e:	f888 400c 	strb.w	r4, [r8, #12]
 800b482:	f888 401a 	strb.w	r4, [r8, #26]
 800b486:	f10a 0050 	add.w	r0, sl, #80	; 0x50
 800b48a:	f000 fb51 	bl	800bb30 <MqttUnSubscribe>
 800b48e:	2309      	movs	r3, #9
 800b490:	702b      	strb	r3, [r5, #0]
 800b492:	f898 301b 	ldrb.w	r3, [r8, #27]
 800b496:	3301      	adds	r3, #1
 800b498:	f888 301b 	strb.w	r3, [r8, #27]
 800b49c:	f7fd fdc0 	bl	8009020 <GetTempInfoStruct>
 800b4a0:	2314      	movs	r3, #20
 800b4a2:	2233      	movs	r2, #51	; 0x33
 800b4a4:	211b      	movs	r1, #27
 800b4a6:	9004      	str	r0, [sp, #16]
 800b4a8:	9403      	str	r4, [sp, #12]
 800b4aa:	2016      	movs	r0, #22
 800b4ac:	9402      	str	r4, [sp, #8]
 800b4ae:	9401      	str	r4, [sp, #4]
 800b4b0:	f8cd 9000 	str.w	r9, [sp]
 800b4b4:	f000 ff81 	bl	800c3ba <InfoLogAdd>
 800b4b8:	f7fd fdaa 	bl	8009010 <GetErrorStruct>
 800b4bc:	464b      	mov	r3, r9
 800b4be:	9003      	str	r0, [sp, #12]
 800b4c0:	9402      	str	r4, [sp, #8]
 800b4c2:	9401      	str	r4, [sp, #4]
 800b4c4:	9400      	str	r4, [sp, #0]
 800b4c6:	2214      	movs	r2, #20
 800b4c8:	2133      	movs	r1, #51	; 0x33
 800b4ca:	201b      	movs	r0, #27
 800b4cc:	f000 ff25 	bl	800c31a <ErrorAddLog>
 800b4d0:	f898 301b 	ldrb.w	r3, [r8, #27]
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	f67f ab9b 	bls.w	800ac10 <RadioStateMachine+0x44>
 800b4da:	f888 401b 	strb.w	r4, [r8, #27]
 800b4de:	e4d9      	b.n	800ae94 <RadioStateMachine+0x2c8>
 800b4e0:	0800f7ec 	.word	0x0800f7ec
 800b4e4:	2000c5d8 	.word	0x2000c5d8
 800b4e8:	0800faab 	.word	0x0800faab
 800b4ec:	2c0c      	cmp	r4, #12
 800b4ee:	f040 808d 	bne.w	800b60c <RadioStateMachine+0xa40>
 800b4f2:	f7fd fdc5 	bl	8009080 <GetErrorFlagsStruct>
 800b4f6:	4680      	mov	r8, r0
 800b4f8:	f7fd fdbe 	bl	8009078 <GetSaraConfigurationStruct>
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	f7fc fabb 	bl	8007a78 <EnableSD_Card>
 800b502:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b504:	2b03      	cmp	r3, #3
 800b506:	d158      	bne.n	800b5ba <RadioStateMachine+0x9ee>
 800b508:	f7fb ff36 	bl	8007378 <SD_Init>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	f47f ab7f 	bne.w	800ac10 <RadioStateMachine+0x44>
 800b512:	f7fc f8cf 	bl	80076b4 <FindFile>
 800b516:	b108      	cbz	r0, 800b51c <RadioStateMachine+0x950>
 800b518:	f7fc f8f6 	bl	8007708 <ArchiveFiles>
 800b51c:	2064      	movs	r0, #100	; 0x64
 800b51e:	f7f5 fcb9 	bl	8000e94 <HAL_Delay>
 800b522:	f7fc f8c7 	bl	80076b4 <FindFile>
 800b526:	4604      	mov	r4, r0
 800b528:	2800      	cmp	r0, #0
 800b52a:	d13f      	bne.n	800b5ac <RadioStateMachine+0x9e0>
 800b52c:	4866      	ldr	r0, [pc, #408]	; (800b6c8 <RadioStateMachine+0xafc>)
 800b52e:	f001 ff6d 	bl	800d40c <puts>
 800b532:	f7fd fd75 	bl	8009020 <GetTempInfoStruct>
 800b536:	9004      	str	r0, [sp, #16]
 800b538:	2012      	movs	r0, #18
 800b53a:	2314      	movs	r3, #20
 800b53c:	9403      	str	r4, [sp, #12]
 800b53e:	9402      	str	r4, [sp, #8]
 800b540:	9401      	str	r4, [sp, #4]
 800b542:	9000      	str	r0, [sp, #0]
 800b544:	2233      	movs	r2, #51	; 0x33
 800b546:	211b      	movs	r1, #27
 800b548:	f000 ff37 	bl	800c3ba <InfoLogAdd>
 800b54c:	2301      	movs	r3, #1
 800b54e:	f888 3015 	strb.w	r3, [r8, #21]
 800b552:	f888 401f 	strb.w	r4, [r8, #31]
 800b556:	f8b6 3258 	ldrh.w	r3, [r6, #600]	; 0x258
 800b55a:	2711      	movs	r7, #17
 800b55c:	702f      	strb	r7, [r5, #0]
 800b55e:	b12b      	cbz	r3, 800b56c <RadioStateMachine+0x9a0>
 800b560:	4630      	mov	r0, r6
 800b562:	f7fc fba1 	bl	8007ca8 <SDwriteErrorLog>
 800b566:	b9a0      	cbnz	r0, 800b592 <RadioStateMachine+0x9c6>
 800b568:	f8a6 0258 	strh.w	r0, [r6, #600]	; 0x258
 800b56c:	f7fd fd54 	bl	8009018 <GetInfoStruct>
 800b570:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800b574:	5ac3      	ldrh	r3, [r0, r3]
 800b576:	b143      	cbz	r3, 800b58a <RadioStateMachine+0x9be>
 800b578:	f7fd fd4e 	bl	8009018 <GetInfoStruct>
 800b57c:	f7fc fb2e 	bl	8007bdc <SD_WriteInfoLog>
 800b580:	b918      	cbnz	r0, 800b58a <RadioStateMachine+0x9be>
 800b582:	f7fd fd49 	bl	8009018 <GetInfoStruct>
 800b586:	f000 ff01 	bl	800c38c <ResetInfoStruct>
 800b58a:	f7fd ff9f 	bl	80094cc <DisableSD_Card>
 800b58e:	f7ff bb3f 	b.w	800ac10 <RadioStateMachine+0x44>
 800b592:	f7fd fd3d 	bl	8009010 <GetErrorStruct>
 800b596:	9402      	str	r4, [sp, #8]
 800b598:	9003      	str	r0, [sp, #12]
 800b59a:	9401      	str	r4, [sp, #4]
 800b59c:	9400      	str	r4, [sp, #0]
 800b59e:	463b      	mov	r3, r7
 800b5a0:	2215      	movs	r2, #21
 800b5a2:	2120      	movs	r1, #32
 800b5a4:	201b      	movs	r0, #27
 800b5a6:	f000 feb8 	bl	800c31a <ErrorAddLog>
 800b5aa:	e7df      	b.n	800b56c <RadioStateMachine+0x9a0>
 800b5ac:	2309      	movs	r3, #9
 800b5ae:	702b      	strb	r3, [r5, #0]
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f888 301f 	strb.w	r3, [r8, #31]
 800b5b6:	f7ff bb2b 	b.w	800ac10 <RadioStateMachine+0x44>
 800b5ba:	4844      	ldr	r0, [pc, #272]	; (800b6cc <RadioStateMachine+0xb00>)
 800b5bc:	f001 ff26 	bl	800d40c <puts>
 800b5c0:	2309      	movs	r3, #9
 800b5c2:	702b      	strb	r3, [r5, #0]
 800b5c4:	f898 301f 	ldrb.w	r3, [r8, #31]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d9f0      	bls.n	800b5b2 <RadioStateMachine+0x9e6>
 800b5d0:	2400      	movs	r4, #0
 800b5d2:	f888 401f 	strb.w	r4, [r8, #31]
 800b5d6:	f7fd fd23 	bl	8009020 <GetTempInfoStruct>
 800b5da:	2313      	movs	r3, #19
 800b5dc:	9004      	str	r0, [sp, #16]
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	2233      	movs	r2, #51	; 0x33
 800b5e2:	2314      	movs	r3, #20
 800b5e4:	211b      	movs	r1, #27
 800b5e6:	9403      	str	r4, [sp, #12]
 800b5e8:	9402      	str	r4, [sp, #8]
 800b5ea:	9401      	str	r4, [sp, #4]
 800b5ec:	2016      	movs	r0, #22
 800b5ee:	f000 fee4 	bl	800c3ba <InfoLogAdd>
 800b5f2:	f7fd fd0d 	bl	8009010 <GetErrorStruct>
 800b5f6:	9402      	str	r4, [sp, #8]
 800b5f8:	9003      	str	r0, [sp, #12]
 800b5fa:	9401      	str	r4, [sp, #4]
 800b5fc:	9400      	str	r4, [sp, #0]
 800b5fe:	2311      	movs	r3, #17
 800b600:	2214      	movs	r2, #20
 800b602:	2133      	movs	r1, #51	; 0x33
 800b604:	201b      	movs	r0, #27
 800b606:	f000 fe88 	bl	800c31a <ErrorAddLog>
 800b60a:	e443      	b.n	800ae94 <RadioStateMachine+0x2c8>
 800b60c:	2c11      	cmp	r4, #17
 800b60e:	d11c      	bne.n	800b64a <RadioStateMachine+0xa7e>
 800b610:	f7fd fd36 	bl	8009080 <GetErrorFlagsStruct>
 800b614:	4604      	mov	r4, r0
 800b616:	f000 faa5 	bl	800bb64 <MqttDisconnect>
 800b61a:	230e      	movs	r3, #14
 800b61c:	4606      	mov	r6, r0
 800b61e:	f888 3000 	strb.w	r3, [r8]
 800b622:	b148      	cbz	r0, 800b638 <RadioStateMachine+0xa6c>
 800b624:	482a      	ldr	r0, [pc, #168]	; (800b6d0 <RadioStateMachine+0xb04>)
 800b626:	f001 fef1 	bl	800d40c <puts>
 800b62a:	2300      	movs	r3, #0
 800b62c:	76a3      	strb	r3, [r4, #26]
 800b62e:	7123      	strb	r3, [r4, #4]
 800b630:	70e3      	strb	r3, [r4, #3]
 800b632:	7563      	strb	r3, [r4, #21]
 800b634:	f7ff baec 	b.w	800ac10 <RadioStateMachine+0x44>
 800b638:	4826      	ldr	r0, [pc, #152]	; (800b6d4 <RadioStateMachine+0xb08>)
 800b63a:	f001 fee7 	bl	800d40c <puts>
 800b63e:	76a6      	strb	r6, [r4, #26]
 800b640:	7126      	strb	r6, [r4, #4]
 800b642:	70e6      	strb	r6, [r4, #3]
 800b644:	7566      	strb	r6, [r4, #21]
 800b646:	f7ff bae3 	b.w	800ac10 <RadioStateMachine+0x44>
 800b64a:	2c0e      	cmp	r4, #14
 800b64c:	d120      	bne.n	800b690 <RadioStateMachine+0xac4>
 800b64e:	f7fd fd17 	bl	8009080 <GetErrorFlagsStruct>
 800b652:	4921      	ldr	r1, [pc, #132]	; (800b6d8 <RadioStateMachine+0xb0c>)
 800b654:	4604      	mov	r4, r0
 800b656:	4821      	ldr	r0, [pc, #132]	; (800b6dc <RadioStateMachine+0xb10>)
 800b658:	f7ff f9ee 	bl	800aa38 <debugPrint>
 800b65c:	2300      	movs	r3, #0
 800b65e:	76a3      	strb	r3, [r4, #26]
 800b660:	7723      	strb	r3, [r4, #28]
 800b662:	f7ff f9fd 	bl	800aa60 <StartTurnOffCounter>
 800b666:	f000 fc2f 	bl	800bec8 <SaraPowerDown>
 800b66a:	b938      	cbnz	r0, 800b67c <RadioStateMachine+0xab0>
 800b66c:	f7ff fa00 	bl	800aa70 <CompareTurnOffTimers>
 800b670:	2800      	cmp	r0, #0
 800b672:	d0f8      	beq.n	800b666 <RadioStateMachine+0xa9a>
 800b674:	f7ff fa15 	bl	800aaa2 <ResetRadio>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d0f4      	beq.n	800b666 <RadioStateMachine+0xa9a>
 800b67c:	4918      	ldr	r1, [pc, #96]	; (800b6e0 <RadioStateMachine+0xb14>)
 800b67e:	4817      	ldr	r0, [pc, #92]	; (800b6dc <RadioStateMachine+0xb10>)
 800b680:	f7ff f9da 	bl	800aa38 <debugPrint>
 800b684:	2310      	movs	r3, #16
 800b686:	702b      	strb	r3, [r5, #0]
 800b688:	f7ff f9ea 	bl	800aa60 <StartTurnOffCounter>
 800b68c:	f7ff bac0 	b.w	800ac10 <RadioStateMachine+0x44>
 800b690:	2c10      	cmp	r4, #16
 800b692:	f47f aabd 	bne.w	800ac10 <RadioStateMachine+0x44>
 800b696:	4621      	mov	r1, r4
 800b698:	4812      	ldr	r0, [pc, #72]	; (800b6e4 <RadioStateMachine+0xb18>)
 800b69a:	f7f6 fd35 	bl	8002108 <HAL_GPIO_ReadPin>
 800b69e:	2801      	cmp	r0, #1
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	d109      	bne.n	800b6b8 <RadioStateMachine+0xaec>
 800b6a4:	4810      	ldr	r0, [pc, #64]	; (800b6e8 <RadioStateMachine+0xb1c>)
 800b6a6:	f001 feb1 	bl	800d40c <puts>
 800b6aa:	f7ff f9e1 	bl	800aa70 <CompareTurnOffTimers>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	f43f aaae 	beq.w	800ac10 <RadioStateMachine+0x44>
 800b6b4:	230e      	movs	r3, #14
 800b6b6:	e5e5      	b.n	800b284 <RadioStateMachine+0x6b8>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	f47f aaa9 	bne.w	800ac10 <RadioStateMachine+0x44>
 800b6be:	480b      	ldr	r0, [pc, #44]	; (800b6ec <RadioStateMachine+0xb20>)
 800b6c0:	f001 fea4 	bl	800d40c <puts>
 800b6c4:	e650      	b.n	800b368 <RadioStateMachine+0x79c>
 800b6c6:	bf00      	nop
 800b6c8:	0800faaf 	.word	0x0800faaf
 800b6cc:	0800fabe 	.word	0x0800fabe
 800b6d0:	0800fad1 	.word	0x0800fad1
 800b6d4:	0800faeb 	.word	0x0800faeb
 800b6d8:	0800fafa 	.word	0x0800fafa
 800b6dc:	2000c5d8 	.word	0x2000c5d8
 800b6e0:	0800faff 	.word	0x0800faff
 800b6e4:	48000800 	.word	0x48000800
 800b6e8:	0800fb05 	.word	0x0800fb05
 800b6ec:	0800fb0f 	.word	0x0800fb0f

0800b6f0 <SensorStateMachine>:
 800b6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6f2:	4d7d      	ldr	r5, [pc, #500]	; (800b8e8 <SensorStateMachine+0x1f8>)
 800b6f4:	782b      	ldrb	r3, [r5, #0]
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	462e      	mov	r6, r5
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f000 80c5 	beq.w	800b88c <SensorStateMachine+0x19c>
 800b702:	2b01      	cmp	r3, #1
 800b704:	d116      	bne.n	800b734 <SensorStateMachine+0x44>
 800b706:	f7fe fa51 	bl	8009bac <MX_ADC1_Init>
 800b70a:	f7fe feb3 	bl	800a474 <MX_LPTIM1_Init>
 800b70e:	f7fe fd79 	bl	800a204 <MX_I2C1_Init>
 800b712:	f7fe fdab 	bl	800a26c <MX_I2C2_Init>
 800b716:	2302      	movs	r3, #2
 800b718:	702b      	strb	r3, [r5, #0]
 800b71a:	f7fd fc81 	bl	8009020 <GetTempInfoStruct>
 800b71e:	2300      	movs	r3, #0
 800b720:	9004      	str	r0, [sp, #16]
 800b722:	2012      	movs	r0, #18
 800b724:	9303      	str	r3, [sp, #12]
 800b726:	9302      	str	r3, [sp, #8]
 800b728:	9301      	str	r3, [sp, #4]
 800b72a:	9000      	str	r0, [sp, #0]
 800b72c:	2339      	movs	r3, #57	; 0x39
 800b72e:	2239      	movs	r2, #57	; 0x39
 800b730:	211b      	movs	r1, #27
 800b732:	e0a9      	b.n	800b888 <SensorStateMachine+0x198>
 800b734:	2b02      	cmp	r3, #2
 800b736:	d133      	bne.n	800b7a0 <SensorStateMachine+0xb0>
 800b738:	f645 2308 	movw	r3, #23048	; 0x5a08
 800b73c:	5ac3      	ldrh	r3, [r0, r3]
 800b73e:	b9fb      	cbnz	r3, 800b780 <SensorStateMachine+0x90>
 800b740:	2001      	movs	r0, #1
 800b742:	f7fe fce3 	bl	800a10c <DisEnableSensorPins>
 800b746:	f7fb fd9b 	bl	8007280 <Battery_init>
 800b74a:	f7fd f8c5 	bl	80088d8 <TMP112_Init>
 800b74e:	f7fc fee0 	bl	8008512 <HDC1080_Init>
 800b752:	f7fd fa13 	bl	8008b7c <VEML7700_Initialize>
 800b756:	4965      	ldr	r1, [pc, #404]	; (800b8ec <SensorStateMachine+0x1fc>)
 800b758:	4865      	ldr	r0, [pc, #404]	; (800b8f0 <SensorStateMachine+0x200>)
 800b75a:	f7ff f96d 	bl	800aa38 <debugPrint>
 800b75e:	f645 2308 	movw	r3, #23048	; 0x5a08
 800b762:	5ae3      	ldrh	r3, [r4, r3]
 800b764:	b9d3      	cbnz	r3, 800b79c <SensorStateMachine+0xac>
 800b766:	2303      	movs	r3, #3
 800b768:	7033      	strb	r3, [r6, #0]
 800b76a:	f7fd fc59 	bl	8009020 <GetTempInfoStruct>
 800b76e:	2300      	movs	r3, #0
 800b770:	9004      	str	r0, [sp, #16]
 800b772:	2012      	movs	r0, #18
 800b774:	9303      	str	r3, [sp, #12]
 800b776:	9302      	str	r3, [sp, #8]
 800b778:	9301      	str	r3, [sp, #4]
 800b77a:	9000      	str	r0, [sp, #0]
 800b77c:	2320      	movs	r3, #32
 800b77e:	e7d6      	b.n	800b72e <SensorStateMachine+0x3e>
 800b780:	2201      	movs	r2, #1
 800b782:	2140      	movs	r1, #64	; 0x40
 800b784:	485b      	ldr	r0, [pc, #364]	; (800b8f4 <SensorStateMachine+0x204>)
 800b786:	f7f6 fcc5 	bl	8002114 <HAL_GPIO_WritePin>
 800b78a:	2201      	movs	r2, #1
 800b78c:	2120      	movs	r1, #32
 800b78e:	4859      	ldr	r0, [pc, #356]	; (800b8f4 <SensorStateMachine+0x204>)
 800b790:	f7f6 fcc0 	bl	8002114 <HAL_GPIO_WritePin>
 800b794:	200a      	movs	r0, #10
 800b796:	f7f5 fb7d 	bl	8000e94 <HAL_Delay>
 800b79a:	e7d6      	b.n	800b74a <SensorStateMachine+0x5a>
 800b79c:	2305      	movs	r3, #5
 800b79e:	e7e3      	b.n	800b768 <SensorStateMachine+0x78>
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	d11b      	bne.n	800b7dc <SensorStateMachine+0xec>
 800b7a4:	f7fe ff42 	bl	800a62c <RTC_Get_DateTime_Comp>
 800b7a8:	6020      	str	r0, [r4, #0]
 800b7aa:	f7fb fd33 	bl	8007214 <Battery_GetLevel>
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	7120      	strb	r0, [r4, #4]
 800b7b2:	2104      	movs	r1, #4
 800b7b4:	4850      	ldr	r0, [pc, #320]	; (800b8f8 <SensorStateMachine+0x208>)
 800b7b6:	f7f6 fcad 	bl	8002114 <HAL_GPIO_WritePin>
 800b7ba:	2305      	movs	r3, #5
 800b7bc:	494b      	ldr	r1, [pc, #300]	; (800b8ec <SensorStateMachine+0x1fc>)
 800b7be:	484c      	ldr	r0, [pc, #304]	; (800b8f0 <SensorStateMachine+0x200>)
 800b7c0:	702b      	strb	r3, [r5, #0]
 800b7c2:	f7ff f939 	bl	800aa38 <debugPrint>
 800b7c6:	f7fd fc2b 	bl	8009020 <GetTempInfoStruct>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	9004      	str	r0, [sp, #16]
 800b7ce:	2012      	movs	r0, #18
 800b7d0:	9303      	str	r3, [sp, #12]
 800b7d2:	9302      	str	r3, [sp, #8]
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	9000      	str	r0, [sp, #0]
 800b7d8:	2316      	movs	r3, #22
 800b7da:	e7a8      	b.n	800b72e <SensorStateMachine+0x3e>
 800b7dc:	2b05      	cmp	r3, #5
 800b7de:	d157      	bne.n	800b890 <SensorStateMachine+0x1a0>
 800b7e0:	f7fd fc1e 	bl	8009020 <GetTempInfoStruct>
 800b7e4:	2400      	movs	r4, #0
 800b7e6:	2612      	movs	r6, #18
 800b7e8:	211b      	movs	r1, #27
 800b7ea:	2334      	movs	r3, #52	; 0x34
 800b7ec:	2239      	movs	r2, #57	; 0x39
 800b7ee:	4f43      	ldr	r7, [pc, #268]	; (800b8fc <SensorStateMachine+0x20c>)
 800b7f0:	9004      	str	r0, [sp, #16]
 800b7f2:	9403      	str	r4, [sp, #12]
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	9402      	str	r4, [sp, #8]
 800b7f8:	9401      	str	r4, [sp, #4]
 800b7fa:	9600      	str	r6, [sp, #0]
 800b7fc:	f000 fddd 	bl	800c3ba <InfoLogAdd>
 800b800:	2001      	movs	r0, #1
 800b802:	f7fe ff8b 	bl	800a71c <RTC_SetAlarmB>
 800b806:	f7fc fbbd 	bl	8007f84 <SD_DeInitTest>
 800b80a:	f7fe fdcd 	bl	800a3a8 <MX_I2C1_DeInit>
 800b80e:	f7fe fdd1 	bl	800a3b4 <MX_I2C2_DeInit>
 800b812:	f7ff f91f 	bl	800aa54 <MX_LPUART1_UART_DeInit>
 800b816:	f7fb fd79 	bl	800730c <MX_ADC_DeInit>
 800b81a:	f7fd fe81 	bl	8009520 <GPIOSetAnalogSensor>
 800b81e:	4638      	mov	r0, r7
 800b820:	f7f8 fa47 	bl	8003cb2 <HAL_RTCEx_DeactivateWakeUpTimer>
 800b824:	2001      	movs	r0, #1
 800b826:	f7f7 f9a3 	bl	8002b70 <HAL_PWREx_EnterSTOP2Mode>
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	68d3      	ldr	r3, [r2, #12]
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	f463 6390 	orn	r3, r3, #1152	; 0x480
 800b834:	60d3      	str	r3, [r2, #12]
 800b836:	4b32      	ldr	r3, [pc, #200]	; (800b900 <SensorStateMachine+0x210>)
 800b838:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b83c:	615a      	str	r2, [r3, #20]
 800b83e:	4638      	mov	r0, r7
 800b840:	f7f8 fa37 	bl	8003cb2 <HAL_RTCEx_DeactivateWakeUpTimer>
 800b844:	f7fd ff34 	bl	80096b0 <SystemClock_Config>
 800b848:	f7fe fbbe 	bl	8009fc8 <GPIOInitSensor>
 800b84c:	f7ff f83a 	bl	800a8c4 <MX_LPUART1_UART_Init>
 800b850:	f7ff f858 	bl	800a904 <MX_USART2_UART_Init>
 800b854:	f7fe f9aa 	bl	8009bac <MX_ADC1_Init>
 800b858:	f7fe fe0c 	bl	800a474 <MX_LPTIM1_Init>
 800b85c:	f7fc fad6 	bl	8007e0c <MX_FATFS_Init>
 800b860:	4828      	ldr	r0, [pc, #160]	; (800b904 <SensorStateMachine+0x214>)
 800b862:	f001 fdd3 	bl	800d40c <puts>
 800b866:	f7fe fccd 	bl	800a204 <MX_I2C1_Init>
 800b86a:	f7fe fcff 	bl	800a26c <MX_I2C2_Init>
 800b86e:	2304      	movs	r3, #4
 800b870:	702b      	strb	r3, [r5, #0]
 800b872:	f7fd fbd5 	bl	8009020 <GetTempInfoStruct>
 800b876:	9403      	str	r4, [sp, #12]
 800b878:	9004      	str	r0, [sp, #16]
 800b87a:	9402      	str	r4, [sp, #8]
 800b87c:	9401      	str	r4, [sp, #4]
 800b87e:	9600      	str	r6, [sp, #0]
 800b880:	2317      	movs	r3, #23
 800b882:	2239      	movs	r2, #57	; 0x39
 800b884:	211b      	movs	r1, #27
 800b886:	4630      	mov	r0, r6
 800b888:	f000 fd97 	bl	800c3ba <InfoLogAdd>
 800b88c:	b007      	add	sp, #28
 800b88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b890:	2b04      	cmp	r3, #4
 800b892:	d1fb      	bne.n	800b88c <SensorStateMachine+0x19c>
 800b894:	f645 2508 	movw	r5, #23048	; 0x5a08
 800b898:	5b40      	ldrh	r0, [r0, r5]
 800b89a:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 800b89e:	3008      	adds	r0, #8
 800b8a0:	f7fc ff14 	bl	80086cc <MultiSensor_takeMeasurements>
 800b8a4:	5b63      	ldrh	r3, [r4, r5]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800b8ae:	5363      	strh	r3, [r4, r5]
 800b8b0:	d306      	bcc.n	800b8c0 <SensorStateMachine+0x1d0>
 800b8b2:	f7fc f8e1 	bl	8007a78 <EnableSD_Card>
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f7fc f912 	bl	8007ae0 <SDWriteSensorData>
 800b8bc:	f7fd fe06 	bl	80094cc <DisableSD_Card>
 800b8c0:	2500      	movs	r5, #0
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	7035      	strb	r5, [r6, #0]
 800b8c6:	f7fc ff39 	bl	800873c <PrintSensorData>
 800b8ca:	4908      	ldr	r1, [pc, #32]	; (800b8ec <SensorStateMachine+0x1fc>)
 800b8cc:	4808      	ldr	r0, [pc, #32]	; (800b8f0 <SensorStateMachine+0x200>)
 800b8ce:	f7ff f8b3 	bl	800aa38 <debugPrint>
 800b8d2:	f7fd fba5 	bl	8009020 <GetTempInfoStruct>
 800b8d6:	9004      	str	r0, [sp, #16]
 800b8d8:	2012      	movs	r0, #18
 800b8da:	9503      	str	r5, [sp, #12]
 800b8dc:	9502      	str	r5, [sp, #8]
 800b8de:	9501      	str	r5, [sp, #4]
 800b8e0:	9000      	str	r0, [sp, #0]
 800b8e2:	2314      	movs	r3, #20
 800b8e4:	e723      	b.n	800b72e <SensorStateMachine+0x3e>
 800b8e6:	bf00      	nop
 800b8e8:	200002b3 	.word	0x200002b3
 800b8ec:	08010032 	.word	0x08010032
 800b8f0:	2000c5d8 	.word	0x2000c5d8
 800b8f4:	48000400 	.word	0x48000400
 800b8f8:	48000800 	.word	0x48000800
 800b8fc:	2000c5b4 	.word	0x2000c5b4
 800b900:	40010400 	.word	0x40010400
 800b904:	0800fb1a 	.word	0x0800fb1a

0800b908 <SleepStateMachine>:
 800b908:	b508      	push	{r3, lr}
 800b90a:	4b20      	ldr	r3, [pc, #128]	; (800b98c <SleepStateMachine+0x84>)
 800b90c:	781a      	ldrb	r2, [r3, #0]
 800b90e:	4b20      	ldr	r3, [pc, #128]	; (800b990 <SleepStateMachine+0x88>)
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	bb8a      	cbnz	r2, 800b978 <SleepStateMachine+0x70>
 800b914:	bbcb      	cbnz	r3, 800b98a <SleepStateMachine+0x82>
 800b916:	491f      	ldr	r1, [pc, #124]	; (800b994 <SleepStateMachine+0x8c>)
 800b918:	481f      	ldr	r0, [pc, #124]	; (800b998 <SleepStateMachine+0x90>)
 800b91a:	f7ff f88d 	bl	800aa38 <debugPrint>
 800b91e:	f7fb fdf7 	bl	8007510 <SD_DeInit>
 800b922:	f7fd fb7d 	bl	8009020 <GetTempInfoStruct>
 800b926:	f642 63e2 	movw	r3, #12002	; 0x2ee2
 800b92a:	5cc3      	ldrb	r3, [r0, r3]
 800b92c:	2b13      	cmp	r3, #19
 800b92e:	d901      	bls.n	800b934 <SleepStateMachine+0x2c>
 800b930:	f000 fd9e 	bl	800c470 <CopyTempToInfo>
 800b934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b938:	4818      	ldr	r0, [pc, #96]	; (800b99c <SleepStateMachine+0x94>)
 800b93a:	f7f6 fbe5 	bl	8002108 <HAL_GPIO_ReadPin>
 800b93e:	b998      	cbnz	r0, 800b968 <SleepStateMachine+0x60>
 800b940:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b948:	f7f6 fbde 	bl	8002108 <HAL_GPIO_ReadPin>
 800b94c:	2801      	cmp	r0, #1
 800b94e:	d10b      	bne.n	800b968 <SleepStateMachine+0x60>
 800b950:	f7fc f892 	bl	8007a78 <EnableSD_Card>
 800b954:	f7fd fb60 	bl	8009018 <GetInfoStruct>
 800b958:	f7fc f940 	bl	8007bdc <SD_WriteInfoLog>
 800b95c:	f7fd fb5c 	bl	8009018 <GetInfoStruct>
 800b960:	f000 fd14 	bl	800c38c <ResetInfoStruct>
 800b964:	f7fd fdb2 	bl	80094cc <DisableSD_Card>
 800b968:	f7fd fb5a 	bl	8009020 <GetTempInfoStruct>
 800b96c:	f000 fd0e 	bl	800c38c <ResetInfoStruct>
 800b970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b974:	f7fd bf22 	b.w	80097bc <SystemSleepAndWakeUp>
 800b978:	2a04      	cmp	r2, #4
 800b97a:	d106      	bne.n	800b98a <SleepStateMachine+0x82>
 800b97c:	b92b      	cbnz	r3, 800b98a <SleepStateMachine+0x82>
 800b97e:	f7fb fdc7 	bl	8007510 <SD_DeInit>
 800b982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b986:	f7fe b807 	b.w	8009998 <EnterStopRadioNetwork>
 800b98a:	bd08      	pop	{r3, pc}
 800b98c:	20000028 	.word	0x20000028
 800b990:	200002b3 	.word	0x200002b3
 800b994:	0800fb28 	.word	0x0800fb28
 800b998:	2000c5d8 	.word	0x2000c5d8
 800b99c:	48000400 	.word	0x48000400

0800b9a0 <CopySettings>:
 800b9a0:	b508      	push	{r3, lr}
 800b9a2:	b128      	cbz	r0, 800b9b0 <CopySettings+0x10>
 800b9a4:	b129      	cbz	r1, 800b9b2 <CopySettings+0x12>
 800b9a6:	22b0      	movs	r2, #176	; 0xb0
 800b9a8:	f001 f959 	bl	800cc5e <memcpy>
 800b9ac:	2001      	movs	r0, #1
 800b9ae:	bd08      	pop	{r3, pc}
 800b9b0:	bd08      	pop	{r3, pc}
 800b9b2:	4608      	mov	r0, r1
 800b9b4:	bd08      	pop	{r3, pc}
	...

0800b9b8 <ServerMessage>:
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4807      	ldr	r0, [pc, #28]	; (800b9dc <ServerMessage+0x24>)
 800b9be:	f000 fa03 	bl	800bdc8 <SaraSendCommand>
 800b9c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b9c6:	21ff      	movs	r1, #255	; 0xff
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 f99d 	bl	800bd08 <SaraWaitForResponse>
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 f8d2 	bl	800bb78 <MqttCheckRxData>
 800b9d4:	3000      	adds	r0, #0
 800b9d6:	bf18      	it	ne
 800b9d8:	2001      	movne	r0, #1
 800b9da:	bd10      	pop	{r4, pc}
 800b9dc:	0800fb2a 	.word	0x0800fb2a

0800b9e0 <ServerDo>:
 800b9e0:	b530      	push	{r4, r5, lr}
 800b9e2:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	f7fd fb46 	bl	8009078 <GetSaraConfigurationStruct>
 800b9ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	a82c      	add	r0, sp, #176	; 0xb0
 800b9f6:	f001 f93d 	bl	800cc74 <memset>
 800b9fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9fe:	2100      	movs	r1, #0
 800ba00:	a86c      	add	r0, sp, #432	; 0x1b0
 800ba02:	f001 f937 	bl	800cc74 <memset>
 800ba06:	f7fd fb37 	bl	8009078 <GetSaraConfigurationStruct>
 800ba0a:	4601      	mov	r1, r0
 800ba0c:	4668      	mov	r0, sp
 800ba0e:	f7ff ffc7 	bl	800b9a0 <CopySettings>
 800ba12:	2300      	movs	r3, #0
 800ba14:	461a      	mov	r2, r3
 800ba16:	4621      	mov	r1, r4
 800ba18:	4628      	mov	r0, r5
 800ba1a:	f000 f843 	bl	800baa4 <MqttPublish>
 800ba1e:	b918      	cbnz	r0, 800ba28 <ServerDo+0x48>
 800ba20:	2000      	movs	r0, #0
 800ba22:	f50d 7d2d 	add.w	sp, sp, #692	; 0x2b4
 800ba26:	bd30      	pop	{r4, r5, pc}
 800ba28:	a82c      	add	r0, sp, #176	; 0xb0
 800ba2a:	f7ff ffc5 	bl	800b9b8 <ServerMessage>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d0f6      	beq.n	800ba20 <ServerDo+0x40>
 800ba32:	466a      	mov	r2, sp
 800ba34:	a96c      	add	r1, sp, #432	; 0x1b0
 800ba36:	a82c      	add	r0, sp, #176	; 0xb0
 800ba38:	f000 f8e2 	bl	800bc00 <FetchVerifyParseJSON>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d0ef      	beq.n	800ba20 <ServerDo+0x40>
 800ba40:	4621      	mov	r1, r4
 800ba42:	4668      	mov	r0, sp
 800ba44:	f7f4 fbcc 	bl	80001e0 <strcmp>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d1e9      	bne.n	800ba20 <ServerDo+0x40>
 800ba4c:	f7fd fb14 	bl	8009078 <GetSaraConfigurationStruct>
 800ba50:	4669      	mov	r1, sp
 800ba52:	f7ff ffa5 	bl	800b9a0 <CopySettings>
 800ba56:	2001      	movs	r0, #1
 800ba58:	e7e3      	b.n	800ba22 <ServerDo+0x42>
	...

0800ba5c <MqttConnect>:
 800ba5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba60:	4901      	ldr	r1, [pc, #4]	; (800ba68 <MqttConnect+0xc>)
 800ba62:	4802      	ldr	r0, [pc, #8]	; (800ba6c <MqttConnect+0x10>)
 800ba64:	f000 b9c8 	b.w	800bdf8 <SaraCheckCommand>
 800ba68:	0800fb5a 	.word	0x0800fb5a
 800ba6c:	0800fb76 	.word	0x0800fb76

0800ba70 <MqttSetHttp>:
 800ba70:	b510      	push	{r4, lr}
 800ba72:	b0c0      	sub	sp, #256	; 0x100
 800ba74:	4604      	mov	r4, r0
 800ba76:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	4668      	mov	r0, sp
 800ba7e:	f001 f8f9 	bl	800cc74 <memset>
 800ba82:	4622      	mov	r2, r4
 800ba84:	4905      	ldr	r1, [pc, #20]	; (800ba9c <MqttSetHttp+0x2c>)
 800ba86:	4668      	mov	r0, sp
 800ba88:	f001 fcd8 	bl	800d43c <siprintf>
 800ba8c:	220a      	movs	r2, #10
 800ba8e:	4904      	ldr	r1, [pc, #16]	; (800baa0 <MqttSetHttp+0x30>)
 800ba90:	4668      	mov	r0, sp
 800ba92:	f000 f9b1 	bl	800bdf8 <SaraCheckCommand>
 800ba96:	b040      	add	sp, #256	; 0x100
 800ba98:	bd10      	pop	{r4, pc}
 800ba9a:	bf00      	nop
 800ba9c:	0800fc0d 	.word	0x0800fc0d
 800baa0:	0800fc1f 	.word	0x0800fc1f

0800baa4 <MqttPublish>:
 800baa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa6:	b0c3      	sub	sp, #268	; 0x10c
 800baa8:	4606      	mov	r6, r0
 800baaa:	460f      	mov	r7, r1
 800baac:	4614      	mov	r4, r2
 800baae:	461d      	mov	r5, r3
 800bab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bab4:	2100      	movs	r1, #0
 800bab6:	a802      	add	r0, sp, #8
 800bab8:	f001 f8dc 	bl	800cc74 <memset>
 800babc:	462b      	mov	r3, r5
 800babe:	4622      	mov	r2, r4
 800bac0:	e88d 00c0 	stmia.w	sp, {r6, r7}
 800bac4:	4905      	ldr	r1, [pc, #20]	; (800badc <MqttPublish+0x38>)
 800bac6:	a802      	add	r0, sp, #8
 800bac8:	f001 fcb8 	bl	800d43c <siprintf>
 800bacc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bad0:	4903      	ldr	r1, [pc, #12]	; (800bae0 <MqttPublish+0x3c>)
 800bad2:	a802      	add	r0, sp, #8
 800bad4:	f000 f990 	bl	800bdf8 <SaraCheckCommand>
 800bad8:	b043      	add	sp, #268	; 0x10c
 800bada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800badc:	0800fba1 	.word	0x0800fba1
 800bae0:	0800fbbf 	.word	0x0800fbbf

0800bae4 <MqttSubscribe>:
 800bae4:	b530      	push	{r4, r5, lr}
 800bae6:	b0d1      	sub	sp, #324	; 0x144
 800bae8:	4605      	mov	r5, r0
 800baea:	460c      	mov	r4, r1
 800baec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800baf0:	2100      	movs	r1, #0
 800baf2:	a810      	add	r0, sp, #64	; 0x40
 800baf4:	f001 f8be 	bl	800cc74 <memset>
 800baf8:	2240      	movs	r2, #64	; 0x40
 800bafa:	2100      	movs	r1, #0
 800bafc:	4668      	mov	r0, sp
 800bafe:	f001 f8b9 	bl	800cc74 <memset>
 800bb02:	4909      	ldr	r1, [pc, #36]	; (800bb28 <MqttSubscribe+0x44>)
 800bb04:	4668      	mov	r0, sp
 800bb06:	f001 fd44 	bl	800d592 <strcpy>
 800bb0a:	462b      	mov	r3, r5
 800bb0c:	4622      	mov	r2, r4
 800bb0e:	4907      	ldr	r1, [pc, #28]	; (800bb2c <MqttSubscribe+0x48>)
 800bb10:	a810      	add	r0, sp, #64	; 0x40
 800bb12:	f001 fc93 	bl	800d43c <siprintf>
 800bb16:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb1a:	4669      	mov	r1, sp
 800bb1c:	a810      	add	r0, sp, #64	; 0x40
 800bb1e:	f000 f96b 	bl	800bdf8 <SaraCheckCommand>
 800bb22:	b051      	add	sp, #324	; 0x144
 800bb24:	bd30      	pop	{r4, r5, pc}
 800bb26:	bf00      	nop
 800bb28:	0800fc2d 	.word	0x0800fc2d
 800bb2c:	0800fc3c 	.word	0x0800fc3c

0800bb30 <MqttUnSubscribe>:
 800bb30:	b510      	push	{r4, lr}
 800bb32:	b0c0      	sub	sp, #256	; 0x100
 800bb34:	4604      	mov	r4, r0
 800bb36:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	4668      	mov	r0, sp
 800bb3e:	f001 f899 	bl	800cc74 <memset>
 800bb42:	4622      	mov	r2, r4
 800bb44:	4905      	ldr	r1, [pc, #20]	; (800bb5c <MqttUnSubscribe+0x2c>)
 800bb46:	4668      	mov	r0, sp
 800bb48:	f001 fc78 	bl	800d43c <siprintf>
 800bb4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb50:	4903      	ldr	r1, [pc, #12]	; (800bb60 <MqttUnSubscribe+0x30>)
 800bb52:	4668      	mov	r0, sp
 800bb54:	f000 f950 	bl	800bdf8 <SaraCheckCommand>
 800bb58:	b040      	add	sp, #256	; 0x100
 800bb5a:	bd10      	pop	{r4, pc}
 800bb5c:	0800fc52 	.word	0x0800fc52
 800bb60:	0800fc65 	.word	0x0800fc65

0800bb64 <MqttDisconnect>:
 800bb64:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb68:	4901      	ldr	r1, [pc, #4]	; (800bb70 <MqttDisconnect+0xc>)
 800bb6a:	4802      	ldr	r0, [pc, #8]	; (800bb74 <MqttDisconnect+0x10>)
 800bb6c:	f000 b944 	b.w	800bdf8 <SaraCheckCommand>
 800bb70:	0800fb84 	.word	0x0800fb84
 800bb74:	0800fb93 	.word	0x0800fb93

0800bb78 <MqttCheckRxData>:
 800bb78:	b510      	push	{r4, lr}
 800bb7a:	4601      	mov	r1, r0
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	4805      	ldr	r0, [pc, #20]	; (800bb94 <MqttCheckRxData+0x1c>)
 800bb80:	f001 fbbc 	bl	800d2fc <iprintf>
 800bb84:	4904      	ldr	r1, [pc, #16]	; (800bb98 <MqttCheckRxData+0x20>)
 800bb86:	4620      	mov	r0, r4
 800bb88:	f001 fd20 	bl	800d5cc <strstr>
 800bb8c:	3000      	adds	r0, #0
 800bb8e:	bf18      	it	ne
 800bb90:	2001      	movne	r0, #1
 800bb92:	bd10      	pop	{r4, pc}
 800bb94:	0800fb3e 	.word	0x0800fb3e
 800bb98:	0800fb4f 	.word	0x0800fb4f

0800bb9c <MqttParseJSONMessage>:
 800bb9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	4690      	mov	r8, r2
 800bba4:	461e      	mov	r6, r3
 800bba6:	f001 fd11 	bl	800d5cc <strstr>
 800bbaa:	4605      	mov	r5, r0
 800bbac:	b330      	cbz	r0, 800bbfc <MqttParseJSONMessage+0x60>
 800bbae:	4640      	mov	r0, r8
 800bbb0:	f7f4 fb20 	bl	80001f4 <strlen>
 800bbb4:	4641      	mov	r1, r8
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4628      	mov	r0, r5
 800bbba:	f001 fd07 	bl	800d5cc <strstr>
 800bbbe:	b1a8      	cbz	r0, 800bbec <MqttParseJSONMessage+0x50>
 800bbc0:	4420      	add	r0, r4
 800bbc2:	1b44      	subs	r4, r0, r5
 800bbc4:	f104 0308 	add.w	r3, r4, #8
 800bbc8:	f023 0307 	bic.w	r3, r3, #7
 800bbcc:	46e8      	mov	r8, sp
 800bbce:	ebad 0d03 	sub.w	sp, sp, r3
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	4668      	mov	r0, sp
 800bbd8:	f001 f841 	bl	800cc5e <memcpy>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f80d 3004 	strb.w	r3, [sp, r4]
 800bbe2:	46e9      	mov	r9, sp
 800bbe4:	42a3      	cmp	r3, r4
 800bbe6:	d104      	bne.n	800bbf2 <MqttParseJSONMessage+0x56>
 800bbe8:	2001      	movs	r0, #1
 800bbea:	46c5      	mov	sp, r8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf2:	f819 2003 	ldrb.w	r2, [r9, r3]
 800bbf6:	54f2      	strb	r2, [r6, r3]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	e7f3      	b.n	800bbe4 <MqttParseJSONMessage+0x48>
 800bbfc:	e7f6      	b.n	800bbec <MqttParseJSONMessage+0x50>
	...

0800bc00 <FetchVerifyParseJSON>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	460c      	mov	r4, r1
 800bc04:	4615      	mov	r5, r2
 800bc06:	460b      	mov	r3, r1
 800bc08:	4a06      	ldr	r2, [pc, #24]	; (800bc24 <FetchVerifyParseJSON+0x24>)
 800bc0a:	4907      	ldr	r1, [pc, #28]	; (800bc28 <FetchVerifyParseJSON+0x28>)
 800bc0c:	f7ff ffc6 	bl	800bb9c <MqttParseJSONMessage>
 800bc10:	b130      	cbz	r0, 800bc20 <FetchVerifyParseJSON+0x20>
 800bc12:	4629      	mov	r1, r5
 800bc14:	4620      	mov	r0, r4
 800bc16:	f7fd fae1 	bl	80091dc <ParseSettingsString>
 800bc1a:	3000      	adds	r0, #0
 800bc1c:	bf18      	it	ne
 800bc1e:	2001      	movne	r0, #1
 800bc20:	bd38      	pop	{r3, r4, r5, pc}
 800bc22:	bf00      	nop
 800bc24:	0800fb38 	.word	0x0800fb38
 800bc28:	0800fb3b 	.word	0x0800fb3b

0800bc2c <GetCRC>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	4c09      	ldr	r4, [pc, #36]	; (800bc54 <GetCRC+0x28>)
 800bc30:	6822      	ldr	r2, [r4, #0]
 800bc32:	6893      	ldr	r3, [r2, #8]
 800bc34:	f043 0301 	orr.w	r3, r3, #1
 800bc38:	6093      	str	r3, [r2, #8]
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	f7f4 fad9 	bl	80001f4 <strlen>
 800bc42:	4631      	mov	r1, r6
 800bc44:	4602      	mov	r2, r0
 800bc46:	4620      	mov	r0, r4
 800bc48:	f7f5 ff4c 	bl	8001ae4 <HAL_CRC_Accumulate>
 800bc4c:	6028      	str	r0, [r5, #0]
 800bc4e:	2001      	movs	r0, #1
 800bc50:	bd70      	pop	{r4, r5, r6, pc}
 800bc52:	bf00      	nop
 800bc54:	2000c4b0 	.word	0x2000c4b0

0800bc58 <MqttPushPublishSD>:
 800bc58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc5c:	b0c9      	sub	sp, #292	; 0x124
 800bc5e:	460c      	mov	r4, r1
 800bc60:	461e      	mov	r6, r3
 800bc62:	4615      	mov	r5, r2
 800bc64:	4607      	mov	r7, r0
 800bc66:	f7fd fa07 	bl	8009078 <GetSaraConfigurationStruct>
 800bc6a:	4680      	mov	r8, r0
 800bc6c:	f7fd fa08 	bl	8009080 <GetErrorFlagsStruct>
 800bc70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc74:	4681      	mov	r9, r0
 800bc76:	2100      	movs	r1, #0
 800bc78:	a808      	add	r0, sp, #32
 800bc7a:	f000 fffb 	bl	800cc74 <memset>
 800bc7e:	a907      	add	r1, sp, #28
 800bc80:	4620      	mov	r0, r4
 800bc82:	f7ff ffd3 	bl	800bc2c <GetCRC>
 800bc86:	9b07      	ldr	r3, [sp, #28]
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	9403      	str	r4, [sp, #12]
 800bc8c:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 800bc90:	9302      	str	r3, [sp, #8]
 800bc92:	462a      	mov	r2, r5
 800bc94:	4633      	mov	r3, r6
 800bc96:	e88d 0180 	stmia.w	sp, {r7, r8}
 800bc9a:	490a      	ldr	r1, [pc, #40]	; (800bcc4 <MqttPushPublishSD+0x6c>)
 800bc9c:	a808      	add	r0, sp, #32
 800bc9e:	f001 fbcd 	bl	800d43c <siprintf>
 800bca2:	4621      	mov	r1, r4
 800bca4:	4808      	ldr	r0, [pc, #32]	; (800bcc8 <MqttPushPublishSD+0x70>)
 800bca6:	f001 fb29 	bl	800d2fc <iprintf>
 800bcaa:	220a      	movs	r2, #10
 800bcac:	4907      	ldr	r1, [pc, #28]	; (800bccc <MqttPushPublishSD+0x74>)
 800bcae:	a808      	add	r0, sp, #32
 800bcb0:	f000 f8a2 	bl	800bdf8 <SaraCheckCommand>
 800bcb4:	2032      	movs	r0, #50	; 0x32
 800bcb6:	f7f5 f8ed 	bl	8000e94 <HAL_Delay>
 800bcba:	2001      	movs	r0, #1
 800bcbc:	b049      	add	sp, #292	; 0x124
 800bcbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcc2:	bf00      	nop
 800bcc4:	0800fbce 	.word	0x0800fbce
 800bcc8:	0800fbf8 	.word	0x0800fbf8
 800bccc:	0800fbbf 	.word	0x0800fbbf

0800bcd0 <USART2_Callback>:
 800bcd0:	4b0a      	ldr	r3, [pc, #40]	; (800bcfc <USART2_Callback+0x2c>)
 800bcd2:	69da      	ldr	r2, [r3, #28]
 800bcd4:	0692      	lsls	r2, r2, #26
 800bcd6:	d510      	bpl.n	800bcfa <USART2_Callback+0x2a>
 800bcd8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bcda:	4a09      	ldr	r2, [pc, #36]	; (800bd00 <USART2_Callback+0x30>)
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	2b0d      	cmp	r3, #13
 800bce0:	d006      	beq.n	800bcf0 <USART2_Callback+0x20>
 800bce2:	2b0a      	cmp	r3, #10
 800bce4:	d004      	beq.n	800bcf0 <USART2_Callback+0x20>
 800bce6:	8811      	ldrh	r1, [r2, #0]
 800bce8:	4806      	ldr	r0, [pc, #24]	; (800bd04 <USART2_Callback+0x34>)
 800bcea:	5443      	strb	r3, [r0, r1]
 800bcec:	3101      	adds	r1, #1
 800bcee:	8011      	strh	r1, [r2, #0]
 800bcf0:	8813      	ldrh	r3, [r2, #0]
 800bcf2:	2bff      	cmp	r3, #255	; 0xff
 800bcf4:	bf84      	itt	hi
 800bcf6:	2300      	movhi	r3, #0
 800bcf8:	8013      	strhhi	r3, [r2, #0]
 800bcfa:	4770      	bx	lr
 800bcfc:	40004400 	.word	0x40004400
 800bd00:	2000c650 	.word	0x2000c650
 800bd04:	200002b4 	.word	0x200002b4

0800bd08 <SaraWaitForResponse>:
 800bd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd0c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800bdc4 <SaraWaitForResponse+0xbc>
 800bd10:	4605      	mov	r5, r0
 800bd12:	460e      	mov	r6, r1
 800bd14:	4692      	mov	sl, r2
 800bd16:	f04f 0800 	mov.w	r8, #0
 800bd1a:	464f      	mov	r7, r9
 800bd1c:	f8b9 4000 	ldrh.w	r4, [r9]
 800bd20:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 800bd24:	429c      	cmp	r4, r3
 800bd26:	bf38      	it	cc
 800bd28:	f504 7480 	addcc.w	r4, r4, #256	; 0x100
 800bd2c:	1ae4      	subs	r4, r4, r3
 800bd2e:	b2a4      	uxth	r4, r4
 800bd30:	42b4      	cmp	r4, r6
 800bd32:	d119      	bne.n	800bd68 <SaraWaitForResponse+0x60>
 800bd34:	4920      	ldr	r1, [pc, #128]	; (800bdb8 <SaraWaitForResponse+0xb0>)
 800bd36:	462a      	mov	r2, r5
 800bd38:	2000      	movs	r0, #0
 800bd3a:	1b53      	subs	r3, r2, r5
 800bd3c:	42a3      	cmp	r3, r4
 800bd3e:	db07      	blt.n	800bd50 <SaraWaitForResponse+0x48>
 800bd40:	883b      	ldrh	r3, [r7, #0]
 800bd42:	481e      	ldr	r0, [pc, #120]	; (800bdbc <SaraWaitForResponse+0xb4>)
 800bd44:	807b      	strh	r3, [r7, #2]
 800bd46:	f001 fb61 	bl	800d40c <puts>
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd50:	887b      	ldrh	r3, [r7, #2]
 800bd52:	5ccb      	ldrb	r3, [r1, r3]
 800bd54:	f802 3b01 	strb.w	r3, [r2], #1
 800bd58:	887b      	ldrh	r3, [r7, #2]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	2bff      	cmp	r3, #255	; 0xff
 800bd60:	bf94      	ite	ls
 800bd62:	807b      	strhls	r3, [r7, #2]
 800bd64:	8078      	strhhi	r0, [r7, #2]
 800bd66:	e7e8      	b.n	800bd3a <SaraWaitForResponse+0x32>
 800bd68:	2001      	movs	r0, #1
 800bd6a:	f108 0801 	add.w	r8, r8, #1
 800bd6e:	f7f5 f891 	bl	8000e94 <HAL_Delay>
 800bd72:	45c2      	cmp	sl, r8
 800bd74:	d2d2      	bcs.n	800bd1c <SaraWaitForResponse+0x14>
 800bd76:	883c      	ldrh	r4, [r7, #0]
 800bd78:	887b      	ldrh	r3, [r7, #2]
 800bd7a:	490f      	ldr	r1, [pc, #60]	; (800bdb8 <SaraWaitForResponse+0xb0>)
 800bd7c:	429c      	cmp	r4, r3
 800bd7e:	bf38      	it	cc
 800bd80:	f504 7480 	addcc.w	r4, r4, #256	; 0x100
 800bd84:	1ae4      	subs	r4, r4, r3
 800bd86:	b2a4      	uxth	r4, r4
 800bd88:	42b4      	cmp	r4, r6
 800bd8a:	bf28      	it	cs
 800bd8c:	4634      	movcs	r4, r6
 800bd8e:	462a      	mov	r2, r5
 800bd90:	2000      	movs	r0, #0
 800bd92:	1b53      	subs	r3, r2, r5
 800bd94:	429c      	cmp	r4, r3
 800bd96:	dc03      	bgt.n	800bda0 <SaraWaitForResponse+0x98>
 800bd98:	883b      	ldrh	r3, [r7, #0]
 800bd9a:	807b      	strh	r3, [r7, #2]
 800bd9c:	4808      	ldr	r0, [pc, #32]	; (800bdc0 <SaraWaitForResponse+0xb8>)
 800bd9e:	e7d2      	b.n	800bd46 <SaraWaitForResponse+0x3e>
 800bda0:	887b      	ldrh	r3, [r7, #2]
 800bda2:	5ccb      	ldrb	r3, [r1, r3]
 800bda4:	f802 3b01 	strb.w	r3, [r2], #1
 800bda8:	887b      	ldrh	r3, [r7, #2]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	2bff      	cmp	r3, #255	; 0xff
 800bdb0:	bf94      	ite	ls
 800bdb2:	807b      	strhls	r3, [r7, #2]
 800bdb4:	8078      	strhhi	r0, [r7, #2]
 800bdb6:	e7ec      	b.n	800bd92 <SaraWaitForResponse+0x8a>
 800bdb8:	200002b4 	.word	0x200002b4
 800bdbc:	0800fdb5 	.word	0x0800fdb5
 800bdc0:	0800fdc7 	.word	0x0800fdc7
 800bdc4:	2000c650 	.word	0x2000c650

0800bdc8 <SaraSendCommand>:
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	4604      	mov	r4, r0
 800bdcc:	f7f4 fa12 	bl	80001f4 <strlen>
 800bdd0:	4b08      	ldr	r3, [pc, #32]	; (800bdf4 <SaraSendCommand+0x2c>)
 800bdd2:	b2c0      	uxtb	r0, r0
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	1b0a      	subs	r2, r1, r4
 800bdd8:	b2d2      	uxtb	r2, r2
 800bdda:	4282      	cmp	r2, r0
 800bddc:	d303      	bcc.n	800bde6 <SaraSendCommand+0x1e>
 800bdde:	69da      	ldr	r2, [r3, #28]
 800bde0:	0652      	lsls	r2, r2, #25
 800bde2:	d5fc      	bpl.n	800bdde <SaraSendCommand+0x16>
 800bde4:	bd10      	pop	{r4, pc}
 800bde6:	69da      	ldr	r2, [r3, #28]
 800bde8:	0612      	lsls	r2, r2, #24
 800bdea:	d5fc      	bpl.n	800bde6 <SaraSendCommand+0x1e>
 800bdec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdf0:	851a      	strh	r2, [r3, #40]	; 0x28
 800bdf2:	e7f0      	b.n	800bdd6 <SaraSendCommand+0xe>
 800bdf4:	40004400 	.word	0x40004400

0800bdf8 <SaraCheckCommand>:
 800bdf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	b0c1      	sub	sp, #260	; 0x104
 800bdfe:	4608      	mov	r0, r1
 800be00:	460d      	mov	r5, r1
 800be02:	4616      	mov	r6, r2
 800be04:	f7f4 f9f6 	bl	80001f4 <strlen>
 800be08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be0c:	2100      	movs	r1, #0
 800be0e:	4604      	mov	r4, r0
 800be10:	4668      	mov	r0, sp
 800be12:	f000 ff2f 	bl	800cc74 <memset>
 800be16:	b2e4      	uxtb	r4, r4
 800be18:	4638      	mov	r0, r7
 800be1a:	f7ff ffd5 	bl	800bdc8 <SaraSendCommand>
 800be1e:	4632      	mov	r2, r6
 800be20:	4621      	mov	r1, r4
 800be22:	4668      	mov	r0, sp
 800be24:	f7ff ff70 	bl	800bd08 <SaraWaitForResponse>
 800be28:	462a      	mov	r2, r5
 800be2a:	4669      	mov	r1, sp
 800be2c:	4808      	ldr	r0, [pc, #32]	; (800be50 <SaraCheckCommand+0x58>)
 800be2e:	f001 fa65 	bl	800d2fc <iprintf>
 800be32:	2300      	movs	r3, #0
 800be34:	42a3      	cmp	r3, r4
 800be36:	db02      	blt.n	800be3e <SaraCheckCommand+0x46>
 800be38:	2001      	movs	r0, #1
 800be3a:	b041      	add	sp, #260	; 0x104
 800be3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be3e:	f81d 1003 	ldrb.w	r1, [sp, r3]
 800be42:	5cea      	ldrb	r2, [r5, r3]
 800be44:	4291      	cmp	r1, r2
 800be46:	d101      	bne.n	800be4c <SaraCheckCommand+0x54>
 800be48:	3301      	adds	r3, #1
 800be4a:	e7f3      	b.n	800be34 <SaraCheckCommand+0x3c>
 800be4c:	2000      	movs	r0, #0
 800be4e:	e7f4      	b.n	800be3a <SaraCheckCommand+0x42>
 800be50:	0800fce3 	.word	0x0800fce3

0800be54 <StartUpSara>:
 800be54:	b510      	push	{r4, lr}
 800be56:	f7fd fab3 	bl	80093c0 <LED_Blink>
 800be5a:	2001      	movs	r0, #1
 800be5c:	f7fe f98e 	bl	800a17c <DisEnableRadioPin>
 800be60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800be64:	f7f5 f816 	bl	8000e94 <HAL_Delay>
 800be68:	220a      	movs	r2, #10
 800be6a:	4912      	ldr	r1, [pc, #72]	; (800beb4 <StartUpSara+0x60>)
 800be6c:	4812      	ldr	r0, [pc, #72]	; (800beb8 <StartUpSara+0x64>)
 800be6e:	f7ff ffc3 	bl	800bdf8 <SaraCheckCommand>
 800be72:	4604      	mov	r4, r0
 800be74:	2001      	movs	r0, #1
 800be76:	b9e4      	cbnz	r4, 800beb2 <StartUpSara+0x5e>
 800be78:	f7fe f9b6 	bl	800a1e8 <DisEnableSaraPin>
 800be7c:	f240 401a 	movw	r0, #1050	; 0x41a
 800be80:	f7f5 f808 	bl	8000e94 <HAL_Delay>
 800be84:	4620      	mov	r0, r4
 800be86:	f7fe f9af 	bl	800a1e8 <DisEnableSaraPin>
 800be8a:	f241 3088 	movw	r0, #5000	; 0x1388
 800be8e:	f7f5 f801 	bl	8000e94 <HAL_Delay>
 800be92:	f7fd fa95 	bl	80093c0 <LED_Blink>
 800be96:	4b09      	ldr	r3, [pc, #36]	; (800bebc <StartUpSara+0x68>)
 800be98:	4909      	ldr	r1, [pc, #36]	; (800bec0 <StartUpSara+0x6c>)
 800be9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be9c:	4b09      	ldr	r3, [pc, #36]	; (800bec4 <StartUpSara+0x70>)
 800be9e:	4806      	ldr	r0, [pc, #24]	; (800beb8 <StartUpSara+0x64>)
 800bea0:	801c      	strh	r4, [r3, #0]
 800bea2:	220a      	movs	r2, #10
 800bea4:	805c      	strh	r4, [r3, #2]
 800bea6:	f7ff ffa7 	bl	800bdf8 <SaraCheckCommand>
 800beaa:	3000      	adds	r0, #0
 800beac:	bf18      	it	ne
 800beae:	2001      	movne	r0, #1
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	bd10      	pop	{r4, pc}
 800beb4:	0800fd3d 	.word	0x0800fd3d
 800beb8:	0800fda3 	.word	0x0800fda3
 800bebc:	40004400 	.word	0x40004400
 800bec0:	0800fdd9 	.word	0x0800fdd9
 800bec4:	2000c650 	.word	0x2000c650

0800bec8 <SaraPowerDown>:
 800bec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800becc:	4901      	ldr	r1, [pc, #4]	; (800bed4 <SaraPowerDown+0xc>)
 800bece:	4802      	ldr	r0, [pc, #8]	; (800bed8 <SaraPowerDown+0x10>)
 800bed0:	f7ff bf92 	b.w	800bdf8 <SaraCheckCommand>
 800bed4:	0800fd3d 	.word	0x0800fd3d
 800bed8:	0800fda8 	.word	0x0800fda8

0800bedc <SaraDisableEchoMode>:
 800bedc:	b508      	push	{r3, lr}
 800bede:	220a      	movs	r2, #10
 800bee0:	4907      	ldr	r1, [pc, #28]	; (800bf00 <SaraDisableEchoMode+0x24>)
 800bee2:	4808      	ldr	r0, [pc, #32]	; (800bf04 <SaraDisableEchoMode+0x28>)
 800bee4:	f7ff ff88 	bl	800bdf8 <SaraCheckCommand>
 800bee8:	b940      	cbnz	r0, 800befc <SaraDisableEchoMode+0x20>
 800beea:	220a      	movs	r2, #10
 800beec:	4906      	ldr	r1, [pc, #24]	; (800bf08 <SaraDisableEchoMode+0x2c>)
 800beee:	4805      	ldr	r0, [pc, #20]	; (800bf04 <SaraDisableEchoMode+0x28>)
 800bef0:	f7ff ff82 	bl	800bdf8 <SaraCheckCommand>
 800bef4:	3000      	adds	r0, #0
 800bef6:	bf18      	it	ne
 800bef8:	2001      	movne	r0, #1
 800befa:	bd08      	pop	{r3, pc}
 800befc:	2001      	movs	r0, #1
 800befe:	bd08      	pop	{r3, pc}
 800bf00:	0800fd39 	.word	0x0800fd39
 800bf04:	0800fd40 	.word	0x0800fd40
 800bf08:	0800fd3d 	.word	0x0800fd3d

0800bf0c <SaraCheckSimStatus>:
 800bf0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf10:	4901      	ldr	r1, [pc, #4]	; (800bf18 <SaraCheckSimStatus+0xc>)
 800bf12:	4802      	ldr	r0, [pc, #8]	; (800bf1c <SaraCheckSimStatus+0x10>)
 800bf14:	f7ff bf70 	b.w	800bdf8 <SaraCheckCommand>
 800bf18:	0800fd0a 	.word	0x0800fd0a
 800bf1c:	0800fd19 	.word	0x0800fd19

0800bf20 <SaraInitAtCommands>:
 800bf20:	b508      	push	{r3, lr}
 800bf22:	f7ff ffdb 	bl	800bedc <SaraDisableEchoMode>
 800bf26:	b908      	cbnz	r0, 800bf2c <SaraInitAtCommands+0xc>
 800bf28:	2000      	movs	r0, #0
 800bf2a:	bd08      	pop	{r3, pc}
 800bf2c:	220a      	movs	r2, #10
 800bf2e:	4906      	ldr	r1, [pc, #24]	; (800bf48 <SaraInitAtCommands+0x28>)
 800bf30:	4806      	ldr	r0, [pc, #24]	; (800bf4c <SaraInitAtCommands+0x2c>)
 800bf32:	f7ff ff61 	bl	800bdf8 <SaraCheckCommand>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d0f6      	beq.n	800bf28 <SaraInitAtCommands+0x8>
 800bf3a:	f7ff ffe7 	bl	800bf0c <SaraCheckSimStatus>
 800bf3e:	3000      	adds	r0, #0
 800bf40:	bf18      	it	ne
 800bf42:	2001      	movne	r0, #1
 800bf44:	bd08      	pop	{r3, pc}
 800bf46:	bf00      	nop
 800bf48:	0800fd3d 	.word	0x0800fd3d
 800bf4c:	0800fd92 	.word	0x0800fd92

0800bf50 <SARA_getRealTimeClock>:
 800bf50:	b510      	push	{r4, lr}
 800bf52:	b090      	sub	sp, #64	; 0x40
 800bf54:	2240      	movs	r2, #64	; 0x40
 800bf56:	2100      	movs	r1, #0
 800bf58:	4604      	mov	r4, r0
 800bf5a:	4668      	mov	r0, sp
 800bf5c:	f000 fe8a 	bl	800cc74 <memset>
 800bf60:	480b      	ldr	r0, [pc, #44]	; (800bf90 <SARA_getRealTimeClock+0x40>)
 800bf62:	f7ff ff31 	bl	800bdc8 <SaraSendCommand>
 800bf66:	213f      	movs	r1, #63	; 0x3f
 800bf68:	2264      	movs	r2, #100	; 0x64
 800bf6a:	4668      	mov	r0, sp
 800bf6c:	f7ff fecc 	bl	800bd08 <SaraWaitForResponse>
 800bf70:	4908      	ldr	r1, [pc, #32]	; (800bf94 <SARA_getRealTimeClock+0x44>)
 800bf72:	4668      	mov	r0, sp
 800bf74:	f001 fb2a 	bl	800d5cc <strstr>
 800bf78:	b128      	cbz	r0, 800bf86 <SARA_getRealTimeClock+0x36>
 800bf7a:	3007      	adds	r0, #7
 800bf7c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800bf80:	2b22      	cmp	r3, #34	; 0x22
 800bf82:	d000      	beq.n	800bf86 <SARA_getRealTimeClock+0x36>
 800bf84:	b90b      	cbnz	r3, 800bf8a <SARA_getRealTimeClock+0x3a>
 800bf86:	b010      	add	sp, #64	; 0x40
 800bf88:	bd10      	pop	{r4, pc}
 800bf8a:	f804 3b01 	strb.w	r3, [r4], #1
 800bf8e:	e7f5      	b.n	800bf7c <SARA_getRealTimeClock+0x2c>
 800bf90:	0800fcd2 	.word	0x0800fcd2
 800bf94:	0800fcdc 	.word	0x0800fcdc

0800bf98 <GMTcalculator>:
 800bf98:	b530      	push	{r4, r5, lr}
 800bf9a:	b08b      	sub	sp, #44	; 0x2c
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bfa0:	9303      	str	r3, [sp, #12]
 800bfa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfa4:	682d      	ldr	r5, [r5, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	6800      	ldr	r0, [r0, #0]
 800bfaa:	6809      	ldr	r1, [r1, #0]
 800bfac:	6812      	ldr	r2, [r2, #0]
 800bfae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800bfb0:	9204      	str	r2, [sp, #16]
 800bfb2:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800bfb6:	441d      	add	r5, r3
 800bfb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfba:	9502      	str	r5, [sp, #8]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	3064      	adds	r0, #100	; 0x64
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	3901      	subs	r1, #1
 800bfc6:	9006      	str	r0, [sp, #24]
 800bfc8:	a801      	add	r0, sp, #4
 800bfca:	9105      	str	r1, [sp, #20]
 800bfcc:	9309      	str	r3, [sp, #36]	; 0x24
 800bfce:	9307      	str	r3, [sp, #28]
 800bfd0:	9308      	str	r3, [sp, #32]
 800bfd2:	f000 ff31 	bl	800ce38 <mktime>
 800bfd6:	9b06      	ldr	r3, [sp, #24]
 800bfd8:	3b64      	subs	r3, #100	; 0x64
 800bfda:	7023      	strb	r3, [r4, #0]
 800bfdc:	9b05      	ldr	r3, [sp, #20]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	7063      	strb	r3, [r4, #1]
 800bfe2:	9b04      	ldr	r3, [sp, #16]
 800bfe4:	70a3      	strb	r3, [r4, #2]
 800bfe6:	9b03      	ldr	r3, [sp, #12]
 800bfe8:	70e3      	strb	r3, [r4, #3]
 800bfea:	9b02      	ldr	r3, [sp, #8]
 800bfec:	7123      	strb	r3, [r4, #4]
 800bfee:	9b01      	ldr	r3, [sp, #4]
 800bff0:	7163      	strb	r3, [r4, #5]
 800bff2:	a801      	add	r0, sp, #4
 800bff4:	f000 fdaa 	bl	800cb4c <asctime>
 800bff8:	4601      	mov	r1, r0
 800bffa:	4803      	ldr	r0, [pc, #12]	; (800c008 <GMTcalculator+0x70>)
 800bffc:	f001 f97e 	bl	800d2fc <iprintf>
 800c000:	2001      	movs	r0, #1
 800c002:	b00b      	add	sp, #44	; 0x2c
 800c004:	bd30      	pop	{r4, r5, pc}
 800c006:	bf00      	nop
 800c008:	0800fc74 	.word	0x0800fc74

0800c00c <SaraCompareRealTimeClock>:
 800c00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c010:	b08f      	sub	sp, #60	; 0x3c
 800c012:	af0d      	add	r7, sp, #52	; 0x34
 800c014:	ae0c      	add	r6, sp, #48	; 0x30
 800c016:	ad0b      	add	r5, sp, #44	; 0x2c
 800c018:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 800c01c:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 800c020:	4688      	mov	r8, r1
 800c022:	4691      	mov	r9, r2
 800c024:	2400      	movs	r4, #0
 800c026:	9704      	str	r7, [sp, #16]
 800c028:	9603      	str	r6, [sp, #12]
 800c02a:	9502      	str	r5, [sp, #8]
 800c02c:	f8cd b004 	str.w	fp, [sp, #4]
 800c030:	f8cd a000 	str.w	sl, [sp]
 800c034:	ab08      	add	r3, sp, #32
 800c036:	aa07      	add	r2, sp, #28
 800c038:	4921      	ldr	r1, [pc, #132]	; (800c0c0 <SaraCompareRealTimeClock+0xb4>)
 800c03a:	940d      	str	r4, [sp, #52]	; 0x34
 800c03c:	f001 fa1e 	bl	800d47c <siscanf>
 800c040:	2805      	cmp	r0, #5
 800c042:	dd38      	ble.n	800c0b6 <SaraCompareRealTimeClock+0xaa>
 800c044:	9b07      	ldr	r3, [sp, #28]
 800c046:	2b3c      	cmp	r3, #60	; 0x3c
 800c048:	dc35      	bgt.n	800c0b6 <SaraCompareRealTimeClock+0xaa>
 800c04a:	465b      	mov	r3, fp
 800c04c:	4652      	mov	r2, sl
 800c04e:	a908      	add	r1, sp, #32
 800c050:	e88d 01e0 	stmia.w	sp, {r5, r6, r7, r8}
 800c054:	a807      	add	r0, sp, #28
 800c056:	f7ff ff9f 	bl	800bf98 <GMTcalculator>
 800c05a:	4648      	mov	r0, r9
 800c05c:	f000 fd00 	bl	800ca60 <GetTime>
 800c060:	4648      	mov	r0, r9
 800c062:	f000 fca5 	bl	800c9b0 <printTime>
 800c066:	4649      	mov	r1, r9
 800c068:	4640      	mov	r0, r8
 800c06a:	f000 fcb3 	bl	800c9d4 <RTC_GetElapsedSeconds>
 800c06e:	2800      	cmp	r0, #0
 800c070:	bfb8      	it	lt
 800c072:	4240      	neglt	r0, r0
 800c074:	280f      	cmp	r0, #15
 800c076:	dd1c      	ble.n	800c0b2 <SaraCompareRealTimeClock+0xa6>
 800c078:	4d12      	ldr	r5, [pc, #72]	; (800c0c4 <SaraCompareRealTimeClock+0xb8>)
 800c07a:	f898 3000 	ldrb.w	r3, [r8]
 800c07e:	70eb      	strb	r3, [r5, #3]
 800c080:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c084:	4910      	ldr	r1, [pc, #64]	; (800c0c8 <SaraCompareRealTimeClock+0xbc>)
 800c086:	706b      	strb	r3, [r5, #1]
 800c088:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c08c:	70ab      	strb	r3, [r5, #2]
 800c08e:	f898 3003 	ldrb.w	r3, [r8, #3]
 800c092:	700b      	strb	r3, [r1, #0]
 800c094:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c098:	704b      	strb	r3, [r1, #1]
 800c09a:	4622      	mov	r2, r4
 800c09c:	f898 3005 	ldrb.w	r3, [r8, #5]
 800c0a0:	480a      	ldr	r0, [pc, #40]	; (800c0cc <SaraCompareRealTimeClock+0xc0>)
 800c0a2:	708b      	strb	r3, [r1, #2]
 800c0a4:	f7f7 fc1e 	bl	80038e4 <HAL_RTC_SetTime>
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	4807      	ldr	r0, [pc, #28]	; (800c0cc <SaraCompareRealTimeClock+0xc0>)
 800c0ae:	f7f7 fc93 	bl	80039d8 <HAL_RTC_SetDate>
 800c0b2:	2001      	movs	r0, #1
 800c0b4:	e000      	b.n	800c0b8 <SaraCompareRealTimeClock+0xac>
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	b00f      	add	sp, #60	; 0x3c
 800c0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0be:	bf00      	nop
 800c0c0:	0800fd24 	.word	0x0800fd24
 800c0c4:	2000380e 	.word	0x2000380e
 800c0c8:	200008e8 	.word	0x200008e8
 800c0cc:	2000c5b4 	.word	0x2000c5b4

0800c0d0 <SaraGetSignalStrength>:
 800c0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d4:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 800c0d8:	af06      	add	r7, sp, #24
 800c0da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0de:	2100      	movs	r1, #0
 800c0e0:	4638      	mov	r0, r7
 800c0e2:	f000 fdc7 	bl	800cc74 <memset>
 800c0e6:	4824      	ldr	r0, [pc, #144]	; (800c178 <SaraGetSignalStrength+0xa8>)
 800c0e8:	f7ff fe6e 	bl	800bdc8 <SaraSendCommand>
 800c0ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c0f0:	220a      	movs	r2, #10
 800c0f2:	4638      	mov	r0, r7
 800c0f4:	f7ff fe08 	bl	800bd08 <SaraWaitForResponse>
 800c0f8:	4920      	ldr	r1, [pc, #128]	; (800c17c <SaraGetSignalStrength+0xac>)
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	f001 fa66 	bl	800d5cc <strstr>
 800c100:	b390      	cbz	r0, 800c168 <SaraGetSignalStrength+0x98>
 800c102:	1c84      	adds	r4, r0, #2
 800c104:	212c      	movs	r1, #44	; 0x2c
 800c106:	4620      	mov	r0, r4
 800c108:	f001 fa36 	bl	800d578 <strchr>
 800c10c:	b360      	cbz	r0, 800c168 <SaraGetSignalStrength+0x98>
 800c10e:	1b06      	subs	r6, r0, r4
 800c110:	00b3      	lsls	r3, r6, #2
 800c112:	330a      	adds	r3, #10
 800c114:	f023 0307 	bic.w	r3, r3, #7
 800c118:	466d      	mov	r5, sp
 800c11a:	ebad 0d03 	sub.w	sp, sp, r3
 800c11e:	ab06      	add	r3, sp, #24
 800c120:	4632      	mov	r2, r6
 800c122:	4621      	mov	r1, r4
 800c124:	4618      	mov	r0, r3
 800c126:	f000 fd9a 	bl	800cc5e <memcpy>
 800c12a:	2400      	movs	r4, #0
 800c12c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 800c130:	f000 fd48 	bl	800cbc4 <atoi>
 800c134:	b286      	uxth	r6, r0
 800c136:	f7fc ff73 	bl	8009020 <GetTempInfoStruct>
 800c13a:	2312      	movs	r3, #18
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	2314      	movs	r3, #20
 800c140:	9004      	str	r0, [sp, #16]
 800c142:	2231      	movs	r2, #49	; 0x31
 800c144:	4618      	mov	r0, r3
 800c146:	211b      	movs	r1, #27
 800c148:	9403      	str	r4, [sp, #12]
 800c14a:	9602      	str	r6, [sp, #8]
 800c14c:	9401      	str	r4, [sp, #4]
 800c14e:	f000 f934 	bl	800c3ba <InfoLogAdd>
 800c152:	4631      	mov	r1, r6
 800c154:	480a      	ldr	r0, [pc, #40]	; (800c180 <SaraGetSignalStrength+0xb0>)
 800c156:	f001 f8d1 	bl	800d2fc <iprintf>
 800c15a:	2e04      	cmp	r6, #4
 800c15c:	d909      	bls.n	800c172 <SaraGetSignalStrength+0xa2>
 800c15e:	f1b6 0063 	subs.w	r0, r6, #99	; 0x63
 800c162:	bf18      	it	ne
 800c164:	2001      	movne	r0, #1
 800c166:	46ad      	mov	sp, r5
 800c168:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800c16c:	46bd      	mov	sp, r7
 800c16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c172:	4620      	mov	r0, r4
 800c174:	e7f7      	b.n	800c166 <SaraGetSignalStrength+0x96>
 800c176:	bf00      	nop
 800c178:	0800fd6c 	.word	0x0800fd6c
 800c17c:	0800fd75 	.word	0x0800fd75
 800c180:	0800fd78 	.word	0x0800fd78

0800c184 <SaraClearBuffer>:
 800c184:	4905      	ldr	r1, [pc, #20]	; (800c19c <SaraClearBuffer+0x18>)
 800c186:	23ff      	movs	r3, #255	; 0xff
 800c188:	2200      	movs	r2, #0
 800c18a:	54ca      	strb	r2, [r1, r3]
 800c18c:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c190:	d2fb      	bcs.n	800c18a <SaraClearBuffer+0x6>
 800c192:	4b03      	ldr	r3, [pc, #12]	; (800c1a0 <SaraClearBuffer+0x1c>)
 800c194:	801a      	strh	r2, [r3, #0]
 800c196:	805a      	strh	r2, [r3, #2]
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	200002b4 	.word	0x200002b4
 800c1a0:	2000c650 	.word	0x2000c650

0800c1a4 <SaraGetRSSI>:
 800c1a4:	b510      	push	{r4, lr}
 800c1a6:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800c1aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	a80a      	add	r0, sp, #40	; 0x28
 800c1b2:	f000 fd5f 	bl	800cc74 <memset>
 800c1b6:	f7ff ffe5 	bl	800c184 <SaraClearBuffer>
 800c1ba:	4811      	ldr	r0, [pc, #68]	; (800c200 <SaraGetRSSI+0x5c>)
 800c1bc:	f7ff fe04 	bl	800bdc8 <SaraSendCommand>
 800c1c0:	220a      	movs	r2, #10
 800c1c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c1c6:	a80a      	add	r0, sp, #40	; 0x28
 800c1c8:	f7ff fd9e 	bl	800bd08 <SaraWaitForResponse>
 800c1cc:	ab08      	add	r3, sp, #32
 800c1ce:	9302      	str	r3, [sp, #8]
 800c1d0:	ab07      	add	r3, sp, #28
 800c1d2:	9301      	str	r3, [sp, #4]
 800c1d4:	ac09      	add	r4, sp, #36	; 0x24
 800c1d6:	ab06      	add	r3, sp, #24
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	9403      	str	r4, [sp, #12]
 800c1dc:	ab05      	add	r3, sp, #20
 800c1de:	aa04      	add	r2, sp, #16
 800c1e0:	4908      	ldr	r1, [pc, #32]	; (800c204 <SaraGetRSSI+0x60>)
 800c1e2:	a80a      	add	r0, sp, #40	; 0x28
 800c1e4:	f001 f94a 	bl	800d47c <siscanf>
 800c1e8:	2806      	cmp	r0, #6
 800c1ea:	d106      	bne.n	800c1fa <SaraGetRSSI+0x56>
 800c1ec:	6820      	ldr	r0, [r4, #0]
 800c1ee:	38ff      	subs	r0, #255	; 0xff
 800c1f0:	bf18      	it	ne
 800c1f2:	2001      	movne	r0, #1
 800c1f4:	f50d 6d85 	add.w	sp, sp, #1064	; 0x428
 800c1f8:	bd10      	pop	{r4, pc}
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	e7fa      	b.n	800c1f4 <SaraGetRSSI+0x50>
 800c1fe:	bf00      	nop
 800c200:	0800fd47 	.word	0x0800fd47
 800c204:	0800fd51 	.word	0x0800fd51

0800c208 <InitErrorStruct>:
 800c208:	2301      	movs	r3, #1
 800c20a:	7083      	strb	r3, [r0, #2]
 800c20c:	74c3      	strb	r3, [r0, #19]
 800c20e:	7583      	strb	r3, [r0, #22]
 800c210:	8303      	strh	r3, [r0, #24]
 800c212:	2300      	movs	r3, #0
 800c214:	7103      	strb	r3, [r0, #4]
 800c216:	7043      	strb	r3, [r0, #1]
 800c218:	70c3      	strb	r3, [r0, #3]
 800c21a:	7003      	strb	r3, [r0, #0]
 800c21c:	72c3      	strb	r3, [r0, #11]
 800c21e:	7203      	strb	r3, [r0, #8]
 800c220:	7303      	strb	r3, [r0, #12]
 800c222:	7343      	strb	r3, [r0, #13]
 800c224:	7243      	strb	r3, [r0, #9]
 800c226:	7183      	strb	r3, [r0, #6]
 800c228:	7143      	strb	r3, [r0, #5]
 800c22a:	71c3      	strb	r3, [r0, #7]
 800c22c:	7283      	strb	r3, [r0, #10]
 800c22e:	7383      	strb	r3, [r0, #14]
 800c230:	73c3      	strb	r3, [r0, #15]
 800c232:	7403      	strb	r3, [r0, #16]
 800c234:	7443      	strb	r3, [r0, #17]
 800c236:	7483      	strb	r3, [r0, #18]
 800c238:	7503      	strb	r3, [r0, #20]
 800c23a:	7543      	strb	r3, [r0, #21]
 800c23c:	7683      	strb	r3, [r0, #26]
 800c23e:	76c3      	strb	r3, [r0, #27]
 800c240:	7703      	strb	r3, [r0, #28]
 800c242:	7743      	strb	r3, [r0, #29]
 800c244:	7783      	strb	r3, [r0, #30]
 800c246:	77c3      	strb	r3, [r0, #31]
 800c248:	4770      	bx	lr
	...

0800c24c <InitSaraStruct>:
 800c24c:	b510      	push	{r4, lr}
 800c24e:	4919      	ldr	r1, [pc, #100]	; (800c2b4 <InitSaraStruct+0x68>)
 800c250:	4604      	mov	r4, r0
 800c252:	f001 f99e 	bl	800d592 <strcpy>
 800c256:	4918      	ldr	r1, [pc, #96]	; (800c2b8 <InitSaraStruct+0x6c>)
 800c258:	f104 0020 	add.w	r0, r4, #32
 800c25c:	f001 f999 	bl	800d592 <strcpy>
 800c260:	4916      	ldr	r1, [pc, #88]	; (800c2bc <InitSaraStruct+0x70>)
 800c262:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800c266:	f001 f994 	bl	800d592 <strcpy>
 800c26a:	4915      	ldr	r1, [pc, #84]	; (800c2c0 <InitSaraStruct+0x74>)
 800c26c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c270:	f001 f98f 	bl	800d592 <strcpy>
 800c274:	4913      	ldr	r1, [pc, #76]	; (800c2c4 <InitSaraStruct+0x78>)
 800c276:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c27a:	f001 f98a 	bl	800d592 <strcpy>
 800c27e:	4912      	ldr	r1, [pc, #72]	; (800c2c8 <InitSaraStruct+0x7c>)
 800c280:	f104 0070 	add.w	r0, r4, #112	; 0x70
 800c284:	f001 f985 	bl	800d592 <strcpy>
 800c288:	f240 735b 	movw	r3, #1883	; 0x75b
 800c28c:	6423      	str	r3, [r4, #64]	; 0x40
 800c28e:	2300      	movs	r3, #0
 800c290:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c292:	2378      	movs	r3, #120	; 0x78
 800c294:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800c298:	2303      	movs	r3, #3
 800c29a:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 800c29e:	490b      	ldr	r1, [pc, #44]	; (800c2cc <InitSaraStruct+0x80>)
 800c2a0:	f104 0085 	add.w	r0, r4, #133	; 0x85
 800c2a4:	f001 f975 	bl	800d592 <strcpy>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800c2ae:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 800c2b2:	bd10      	pop	{r4, pc}
 800c2b4:	0800fc91 	.word	0x0800fc91
 800c2b8:	0800fc96 	.word	0x0800fc96
 800c2bc:	0800fca4 	.word	0x0800fca4
 800c2c0:	0800fca9 	.word	0x0800fca9
 800c2c4:	0800fcb1 	.word	0x0800fcb1
 800c2c8:	0800fcb9 	.word	0x0800fcb9
 800c2cc:	0800fcc1 	.word	0x0800fcc1

0800c2d0 <InitTimeStruct>:
 800c2d0:	b513      	push	{r0, r1, r4, lr}
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4668      	mov	r0, sp
 800c2d6:	f000 fbc3 	bl	800ca60 <GetTime>
 800c2da:	f89d 3000 	ldrb.w	r3, [sp]
 800c2de:	7023      	strb	r3, [r4, #0]
 800c2e0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c2e4:	7063      	strb	r3, [r4, #1]
 800c2e6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c2ea:	70a3      	strb	r3, [r4, #2]
 800c2ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c2f0:	70e3      	strb	r3, [r4, #3]
 800c2f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c2f6:	7123      	strb	r3, [r4, #4]
 800c2f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c2fc:	7163      	strb	r3, [r4, #5]
 800c2fe:	b002      	add	sp, #8
 800c300:	bd10      	pop	{r4, pc}

0800c302 <ErrorStruct_init>:
 800c302:	2300      	movs	r3, #0
 800c304:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
 800c308:	7103      	strb	r3, [r0, #4]
 800c30a:	7143      	strb	r3, [r0, #5]
 800c30c:	7183      	strb	r3, [r0, #6]
 800c30e:	71c3      	strb	r3, [r0, #7]
 800c310:	6083      	str	r3, [r0, #8]
 800c312:	60c3      	str	r3, [r0, #12]
 800c314:	6003      	str	r3, [r0, #0]
 800c316:	7403      	strb	r3, [r0, #16]
 800c318:	4770      	bx	lr

0800c31a <ErrorAddLog>:
 800c31a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c31e:	f8b4 6258 	ldrh.w	r6, [r4, #600]	; 0x258
 800c322:	2e1d      	cmp	r6, #29
 800c324:	d919      	bls.n	800c35a <ErrorAddLog+0x40>
 800c326:	231d      	movs	r3, #29
 800c328:	f8a4 3258 	strh.w	r3, [r4, #600]	; 0x258
 800c32c:	2317      	movs	r3, #23
 800c32e:	f884 3248 	strb.w	r3, [r4, #584]	; 0x248
 800c332:	231e      	movs	r3, #30
 800c334:	f884 3249 	strb.w	r3, [r4, #585]	; 0x249
 800c338:	f884 324a 	strb.w	r3, [r4, #586]	; 0x24a
 800c33c:	2311      	movs	r3, #17
 800c33e:	f884 324b 	strb.w	r3, [r4, #587]	; 0x24b
 800c342:	2300      	movs	r3, #0
 800c344:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
 800c348:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
 800c34c:	f884 3254 	strb.w	r3, [r4, #596]	; 0x254
 800c350:	f7fe f96c 	bl	800a62c <RTC_Get_DateTime_Comp>
 800c354:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
 800c358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c35a:	2714      	movs	r7, #20
 800c35c:	437e      	muls	r6, r7
 800c35e:	19a5      	adds	r5, r4, r6
 800c360:	71eb      	strb	r3, [r5, #7]
 800c362:	9b06      	ldr	r3, [sp, #24]
 800c364:	60ab      	str	r3, [r5, #8]
 800c366:	9b07      	ldr	r3, [sp, #28]
 800c368:	71aa      	strb	r2, [r5, #6]
 800c36a:	60eb      	str	r3, [r5, #12]
 800c36c:	7128      	strb	r0, [r5, #4]
 800c36e:	7169      	strb	r1, [r5, #5]
 800c370:	f7fe f95c 	bl	800a62c <RTC_Get_DateTime_Comp>
 800c374:	51a0      	str	r0, [r4, r6]
 800c376:	f8b4 3258 	ldrh.w	r3, [r4, #600]	; 0x258
 800c37a:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800c37e:	fb07 4703 	mla	r7, r7, r3, r4
 800c382:	3301      	adds	r3, #1
 800c384:	743a      	strb	r2, [r7, #16]
 800c386:	f8a4 3258 	strh.w	r3, [r4, #600]	; 0x258
 800c38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c38c <ResetInfoStruct>:
 800c38c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800c390:	2300      	movs	r3, #0
 800c392:	5283      	strh	r3, [r0, r2]
 800c394:	1881      	adds	r1, r0, r2
 800c396:	f642 62e2 	movw	r2, #12002	; 0x2ee2
 800c39a:	5483      	strb	r3, [r0, r2]
 800c39c:	7243      	strb	r3, [r0, #9]
 800c39e:	7283      	strb	r3, [r0, #10]
 800c3a0:	72c3      	strb	r3, [r0, #11]
 800c3a2:	7303      	strb	r3, [r0, #12]
 800c3a4:	6043      	str	r3, [r0, #4]
 800c3a6:	7203      	strb	r3, [r0, #8]
 800c3a8:	7343      	strb	r3, [r0, #13]
 800c3aa:	81c3      	strh	r3, [r0, #14]
 800c3ac:	6103      	str	r3, [r0, #16]
 800c3ae:	3018      	adds	r0, #24
 800c3b0:	4288      	cmp	r0, r1
 800c3b2:	d1f3      	bne.n	800c39c <ResetInfoStruct+0x10>
 800c3b4:	4770      	bx	lr

0800c3b6 <InitInfoStruct>:
 800c3b6:	f7ff bfe9 	b.w	800c38c <ResetInfoStruct>

0800c3ba <InfoLogAdd>:
 800c3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c3c0:	f642 67e0 	movw	r7, #12000	; 0x2ee0
 800c3c4:	4680      	mov	r8, r0
 800c3c6:	5be5      	ldrh	r5, [r4, r7]
 800c3c8:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 800c3cc:	d325      	bcc.n	800c41a <InfoLogAdd+0x60>
 800c3ce:	f240 13f3 	movw	r3, #499	; 0x1f3
 800c3d2:	53e3      	strh	r3, [r4, r7]
 800c3d4:	f642 63d1 	movw	r3, #11985	; 0x2ed1
 800c3d8:	2217      	movs	r2, #23
 800c3da:	54e2      	strb	r2, [r4, r3]
 800c3dc:	f642 62d2 	movw	r2, #11986	; 0x2ed2
 800c3e0:	231e      	movs	r3, #30
 800c3e2:	54a3      	strb	r3, [r4, r2]
 800c3e4:	f642 62d3 	movw	r2, #11987	; 0x2ed3
 800c3e8:	54a3      	strb	r3, [r4, r2]
 800c3ea:	f642 63d4 	movw	r3, #11988	; 0x2ed4
 800c3ee:	2211      	movs	r2, #17
 800c3f0:	54e2      	strb	r2, [r4, r3]
 800c3f2:	f642 62d0 	movw	r2, #11984	; 0x2ed0
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	54a3      	strb	r3, [r4, r2]
 800c3fa:	f642 62d5 	movw	r2, #11989	; 0x2ed5
 800c3fe:	54a3      	strb	r3, [r4, r2]
 800c400:	f642 62d6 	movw	r2, #11990	; 0x2ed6
 800c404:	52a3      	strh	r3, [r4, r2]
 800c406:	f642 62d8 	movw	r2, #11992	; 0x2ed8
 800c40a:	50a3      	str	r3, [r4, r2]
 800c40c:	f7fe f90e 	bl	800a62c <RTC_Get_DateTime_Comp>
 800c410:	f642 63cc 	movw	r3, #11980	; 0x2ecc
 800c414:	50e0      	str	r0, [r4, r3]
 800c416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c41a:	2618      	movs	r6, #24
 800c41c:	fb06 4505 	mla	r5, r6, r5, r4
 800c420:	72eb      	strb	r3, [r5, #11]
 800c422:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c426:	7269      	strb	r1, [r5, #9]
 800c428:	72aa      	strb	r2, [r5, #10]
 800c42a:	732b      	strb	r3, [r5, #12]
 800c42c:	f7fe f8fe 	bl	800a62c <RTC_Get_DateTime_Comp>
 800c430:	5be2      	ldrh	r2, [r4, r7]
 800c432:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800c436:	6068      	str	r0, [r5, #4]
 800c438:	fb06 4302 	mla	r3, r6, r2, r4
 800c43c:	3201      	adds	r2, #1
 800c43e:	7359      	strb	r1, [r3, #13]
 800c440:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 800c444:	81d9      	strh	r1, [r3, #14]
 800c446:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c448:	f883 8008 	strb.w	r8, [r3, #8]
 800c44c:	6119      	str	r1, [r3, #16]
 800c44e:	53e2      	strh	r2, [r4, r7]
 800c450:	f642 63e2 	movw	r3, #12002	; 0x2ee2
 800c454:	5ce2      	ldrb	r2, [r4, r3]
 800c456:	4542      	cmp	r2, r8
 800c458:	bf38      	it	cc
 800c45a:	f804 8003 	strbcc.w	r8, [r4, r3]
 800c45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c462 <InfoGetSize>:
 800c462:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800c466:	5ac3      	ldrh	r3, [r0, r3]
 800c468:	2018      	movs	r0, #24
 800c46a:	4358      	muls	r0, r3
 800c46c:	4770      	bx	lr
	...

0800c470 <CopyTempToInfo>:
 800c470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c474:	f8df 8160 	ldr.w	r8, [pc, #352]	; 800c5d8 <CopyTempToInfo+0x168>
 800c478:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800c5dc <CopyTempToInfo+0x16c>
 800c47c:	2700      	movs	r7, #0
 800c47e:	f642 64e0 	movw	r4, #12000	; 0x2ee0
 800c482:	f7fc fdcd 	bl	8009020 <GetTempInfoStruct>
 800c486:	5b03      	ldrh	r3, [r0, r4]
 800c488:	429f      	cmp	r7, r3
 800c48a:	db01      	blt.n	800c490 <CopyTempToInfo+0x20>
 800c48c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c490:	f7fc fdc2 	bl	8009018 <GetInfoStruct>
 800c494:	4606      	mov	r6, r0
 800c496:	f7fc fdbf 	bl	8009018 <GetInfoStruct>
 800c49a:	5b03      	ldrh	r3, [r0, r4]
 800c49c:	2518      	movs	r5, #24
 800c49e:	436b      	muls	r3, r5
 800c4a0:	f846 8003 	str.w	r8, [r6, r3]
 800c4a4:	f7fc fdb8 	bl	8009018 <GetInfoStruct>
 800c4a8:	4683      	mov	fp, r0
 800c4aa:	f7fc fdb5 	bl	8009018 <GetInfoStruct>
 800c4ae:	f830 a004 	ldrh.w	sl, [r0, r4]
 800c4b2:	f7fc fdb5 	bl	8009020 <GetTempInfoStruct>
 800c4b6:	fb05 f607 	mul.w	r6, r5, r7
 800c4ba:	4430      	add	r0, r6
 800c4bc:	fb05 ba0a 	mla	sl, r5, sl, fp
 800c4c0:	6843      	ldr	r3, [r0, #4]
 800c4c2:	f8ca 3004 	str.w	r3, [sl, #4]
 800c4c6:	f7fc fda7 	bl	8009018 <GetInfoStruct>
 800c4ca:	4683      	mov	fp, r0
 800c4cc:	f7fc fda4 	bl	8009018 <GetInfoStruct>
 800c4d0:	f830 a004 	ldrh.w	sl, [r0, r4]
 800c4d4:	f7fc fda4 	bl	8009020 <GetTempInfoStruct>
 800c4d8:	4430      	add	r0, r6
 800c4da:	fb05 ba0a 	mla	sl, r5, sl, fp
 800c4de:	7a03      	ldrb	r3, [r0, #8]
 800c4e0:	f88a 3008 	strb.w	r3, [sl, #8]
 800c4e4:	f7fc fd98 	bl	8009018 <GetInfoStruct>
 800c4e8:	4683      	mov	fp, r0
 800c4ea:	f7fc fd95 	bl	8009018 <GetInfoStruct>
 800c4ee:	f830 a004 	ldrh.w	sl, [r0, r4]
 800c4f2:	f7fc fd95 	bl	8009020 <GetTempInfoStruct>
 800c4f6:	4430      	add	r0, r6
 800c4f8:	fb05 ba0a 	mla	sl, r5, sl, fp
 800c4fc:	7a43      	ldrb	r3, [r0, #9]
 800c4fe:	f88a 3009 	strb.w	r3, [sl, #9]
 800c502:	f7fc fd89 	bl	8009018 <GetInfoStruct>
 800c506:	4683      	mov	fp, r0
 800c508:	f7fc fd86 	bl	8009018 <GetInfoStruct>
 800c50c:	f830 a004 	ldrh.w	sl, [r0, r4]
 800c510:	f7fc fd86 	bl	8009020 <GetTempInfoStruct>
 800c514:	4430      	add	r0, r6
 800c516:	fb05 ba0a 	mla	sl, r5, sl, fp
 800c51a:	7a83      	ldrb	r3, [r0, #10]
 800c51c:	f88a 300a 	strb.w	r3, [sl, #10]
 800c520:	f7fc fd7a 	bl	8009018 <GetInfoStruct>
 800c524:	4683      	mov	fp, r0
 800c526:	f7fc fd77 	bl	8009018 <GetInfoStruct>
 800c52a:	f830 a004 	ldrh.w	sl, [r0, r4]
 800c52e:	f7fc fd77 	bl	8009020 <GetTempInfoStruct>
 800c532:	4430      	add	r0, r6
 800c534:	fb05 ba0a 	mla	sl, r5, sl, fp
 800c538:	7ac3      	ldrb	r3, [r0, #11]
 800c53a:	f88a 300b 	strb.w	r3, [sl, #11]
 800c53e:	f7fc fd6b 	bl	8009018 <GetInfoStruct>
 800c542:	4683      	mov	fp, r0
 800c544:	f7fc fd68 	bl	8009018 <GetInfoStruct>
 800c548:	f830 a004 	ldrh.w	sl, [r0, r4]
 800c54c:	f7fc fd68 	bl	8009020 <GetTempInfoStruct>
 800c550:	4430      	add	r0, r6
 800c552:	fb05 ba0a 	mla	sl, r5, sl, fp
 800c556:	7b03      	ldrb	r3, [r0, #12]
 800c558:	f88a 300c 	strb.w	r3, [sl, #12]
 800c55c:	f7fc fd5c 	bl	8009018 <GetInfoStruct>
 800c560:	4683      	mov	fp, r0
 800c562:	f7fc fd59 	bl	8009018 <GetInfoStruct>
 800c566:	f830 a004 	ldrh.w	sl, [r0, r4]
 800c56a:	f7fc fd59 	bl	8009020 <GetTempInfoStruct>
 800c56e:	4430      	add	r0, r6
 800c570:	fb05 ba0a 	mla	sl, r5, sl, fp
 800c574:	7b43      	ldrb	r3, [r0, #13]
 800c576:	f88a 300d 	strb.w	r3, [sl, #13]
 800c57a:	f7fc fd4d 	bl	8009018 <GetInfoStruct>
 800c57e:	4683      	mov	fp, r0
 800c580:	f7fc fd4a 	bl	8009018 <GetInfoStruct>
 800c584:	f830 a004 	ldrh.w	sl, [r0, r4]
 800c588:	f7fc fd4a 	bl	8009020 <GetTempInfoStruct>
 800c58c:	4430      	add	r0, r6
 800c58e:	fb05 ba0a 	mla	sl, r5, sl, fp
 800c592:	89c3      	ldrh	r3, [r0, #14]
 800c594:	f8aa 300e 	strh.w	r3, [sl, #14]
 800c598:	f7fc fd3e 	bl	8009018 <GetInfoStruct>
 800c59c:	4683      	mov	fp, r0
 800c59e:	f7fc fd3b 	bl	8009018 <GetInfoStruct>
 800c5a2:	f830 a004 	ldrh.w	sl, [r0, r4]
 800c5a6:	f7fc fd3b 	bl	8009020 <GetTempInfoStruct>
 800c5aa:	4430      	add	r0, r6
 800c5ac:	fb05 ba0a 	mla	sl, r5, sl, fp
 800c5b0:	6903      	ldr	r3, [r0, #16]
 800c5b2:	f8ca 3010 	str.w	r3, [sl, #16]
 800c5b6:	f7fc fd2f 	bl	8009018 <GetInfoStruct>
 800c5ba:	4606      	mov	r6, r0
 800c5bc:	f7fc fd2c 	bl	8009018 <GetInfoStruct>
 800c5c0:	5b03      	ldrh	r3, [r0, r4]
 800c5c2:	fb05 6503 	mla	r5, r5, r3, r6
 800c5c6:	3701      	adds	r7, #1
 800c5c8:	f8c5 9014 	str.w	r9, [r5, #20]
 800c5cc:	f7fc fd24 	bl	8009018 <GetInfoStruct>
 800c5d0:	5b03      	ldrh	r3, [r0, r4]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	5303      	strh	r3, [r0, r4]
 800c5d6:	e754      	b.n	800c482 <CopyTempToInfo+0x12>
 800c5d8:	abbababe 	.word	0xabbababe
 800c5dc:	deadbeef 	.word	0xdeadbeef

0800c5e0 <ErrorGetSize>:
 800c5e0:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
 800c5e4:	2014      	movs	r0, #20
 800c5e6:	4358      	muls	r0, r3
 800c5e8:	4770      	bx	lr
	...

0800c5ec <ErrorTimerHourly>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	4e13      	ldr	r6, [pc, #76]	; (800c63c <ErrorTimerHourly+0x50>)
 800c5f0:	b086      	sub	sp, #24
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	460d      	mov	r5, r1
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	a901      	add	r1, sp, #4
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	f7f7 fb13 	bl	8003c26 <HAL_RTC_GetTime>
 800c600:	2200      	movs	r2, #0
 800c602:	4669      	mov	r1, sp
 800c604:	4630      	mov	r0, r6
 800c606:	f7f7 fb35 	bl	8003c74 <HAL_RTC_GetDate>
 800c60a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c60e:	7023      	strb	r3, [r4, #0]
 800c610:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c614:	7063      	strb	r3, [r4, #1]
 800c616:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c61a:	70a3      	strb	r3, [r4, #2]
 800c61c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c620:	70e3      	strb	r3, [r4, #3]
 800c622:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c626:	7123      	strb	r3, [r4, #4]
 800c628:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c62c:	7163      	strb	r3, [r4, #5]
 800c62e:	2300      	movs	r3, #0
 800c630:	70ab      	strb	r3, [r5, #2]
 800c632:	2301      	movs	r3, #1
 800c634:	702b      	strb	r3, [r5, #0]
 800c636:	b006      	add	sp, #24
 800c638:	bd70      	pop	{r4, r5, r6, pc}
 800c63a:	bf00      	nop
 800c63c:	2000c5b4 	.word	0x2000c5b4

0800c640 <ErrorTimerHourlyCheck>:
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	b08c      	sub	sp, #48	; 0x30
 800c644:	460d      	mov	r5, r1
 800c646:	4606      	mov	r6, r0
 800c648:	a907      	add	r1, sp, #28
 800c64a:	4614      	mov	r4, r2
 800c64c:	4843      	ldr	r0, [pc, #268]	; (800c75c <ErrorTimerHourlyCheck+0x11c>)
 800c64e:	2200      	movs	r2, #0
 800c650:	f7f7 fae9 	bl	8003c26 <HAL_RTC_GetTime>
 800c654:	2200      	movs	r2, #0
 800c656:	a906      	add	r1, sp, #24
 800c658:	4840      	ldr	r0, [pc, #256]	; (800c75c <ErrorTimerHourlyCheck+0x11c>)
 800c65a:	f7f7 fb0b 	bl	8003c74 <HAL_RTC_GetDate>
 800c65e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c662:	702b      	strb	r3, [r5, #0]
 800c664:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c668:	706b      	strb	r3, [r5, #1]
 800c66a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800c66e:	70ab      	strb	r3, [r5, #2]
 800c670:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c674:	70eb      	strb	r3, [r5, #3]
 800c676:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c67a:	712b      	strb	r3, [r5, #4]
 800c67c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c680:	716b      	strb	r3, [r5, #5]
 800c682:	4837      	ldr	r0, [pc, #220]	; (800c760 <ErrorTimerHourlyCheck+0x120>)
 800c684:	f000 fec2 	bl	800d40c <puts>
 800c688:	4629      	mov	r1, r5
 800c68a:	4630      	mov	r0, r6
 800c68c:	f000 f9a2 	bl	800c9d4 <RTC_GetElapsedSeconds>
 800c690:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
 800c694:	dd0d      	ble.n	800c6b2 <ErrorTimerHourlyCheck+0x72>
 800c696:	2300      	movs	r3, #0
 800c698:	7023      	strb	r3, [r4, #0]
 800c69a:	2301      	movs	r3, #1
 800c69c:	70a3      	strb	r3, [r4, #2]
 800c69e:	78e3      	ldrb	r3, [r4, #3]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	70e3      	strb	r3, [r4, #3]
 800c6a4:	f7fe f92e 	bl	800a904 <MX_USART2_UART_Init>
 800c6a8:	f7fd fee4 	bl	800a474 <MX_LPTIM1_Init>
 800c6ac:	2002      	movs	r0, #2
 800c6ae:	f7fe fa0f 	bl	800aad0 <SetRadioState>
 800c6b2:	78e3      	ldrb	r3, [r4, #3]
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d945      	bls.n	800c744 <ErrorTimerHourlyCheck+0x104>
 800c6b8:	7923      	ldrb	r3, [r4, #4]
 800c6ba:	2500      	movs	r5, #0
 800c6bc:	3301      	adds	r3, #1
 800c6be:	7123      	strb	r3, [r4, #4]
 800c6c0:	70e5      	strb	r5, [r4, #3]
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f7fe fa04 	bl	800aad0 <SetRadioState>
 800c6c8:	f7fc fcaa 	bl	8009020 <GetTempInfoStruct>
 800c6cc:	2611      	movs	r6, #17
 800c6ce:	2317      	movs	r3, #23
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	2236      	movs	r2, #54	; 0x36
 800c6d4:	9004      	str	r0, [sp, #16]
 800c6d6:	9503      	str	r5, [sp, #12]
 800c6d8:	2015      	movs	r0, #21
 800c6da:	9502      	str	r5, [sp, #8]
 800c6dc:	9501      	str	r5, [sp, #4]
 800c6de:	9600      	str	r6, [sp, #0]
 800c6e0:	f7ff fe6b 	bl	800c3ba <InfoLogAdd>
 800c6e4:	f7fc fc94 	bl	8009010 <GetErrorStruct>
 800c6e8:	2217      	movs	r2, #23
 800c6ea:	9003      	str	r0, [sp, #12]
 800c6ec:	4633      	mov	r3, r6
 800c6ee:	9502      	str	r5, [sp, #8]
 800c6f0:	9501      	str	r5, [sp, #4]
 800c6f2:	9500      	str	r5, [sp, #0]
 800c6f4:	2136      	movs	r1, #54	; 0x36
 800c6f6:	4610      	mov	r0, r2
 800c6f8:	f7ff fe0f 	bl	800c31a <ErrorAddLog>
 800c6fc:	7923      	ldrb	r3, [r4, #4]
 800c6fe:	2b05      	cmp	r3, #5
 800c700:	d120      	bne.n	800c744 <ErrorTimerHourlyCheck+0x104>
 800c702:	4e18      	ldr	r6, [pc, #96]	; (800c764 <ErrorTimerHourlyCheck+0x124>)
 800c704:	250a      	movs	r5, #10
 800c706:	f115 35ff 	adds.w	r5, r5, #4294967295
 800c70a:	d21d      	bcs.n	800c748 <ErrorTimerHourlyCheck+0x108>
 800c70c:	f7fc fc88 	bl	8009020 <GetTempInfoStruct>
 800c710:	2500      	movs	r5, #0
 800c712:	2317      	movs	r3, #23
 800c714:	2611      	movs	r6, #17
 800c716:	4619      	mov	r1, r3
 800c718:	2237      	movs	r2, #55	; 0x37
 800c71a:	9004      	str	r0, [sp, #16]
 800c71c:	9503      	str	r5, [sp, #12]
 800c71e:	4618      	mov	r0, r3
 800c720:	9502      	str	r5, [sp, #8]
 800c722:	9501      	str	r5, [sp, #4]
 800c724:	9600      	str	r6, [sp, #0]
 800c726:	f7ff fe48 	bl	800c3ba <InfoLogAdd>
 800c72a:	f7fc fc71 	bl	8009010 <GetErrorStruct>
 800c72e:	2217      	movs	r2, #23
 800c730:	9003      	str	r0, [sp, #12]
 800c732:	9502      	str	r5, [sp, #8]
 800c734:	9501      	str	r5, [sp, #4]
 800c736:	9500      	str	r5, [sp, #0]
 800c738:	4633      	mov	r3, r6
 800c73a:	2137      	movs	r1, #55	; 0x37
 800c73c:	4610      	mov	r0, r2
 800c73e:	f7ff fdec 	bl	800c31a <ErrorAddLog>
 800c742:	7125      	strb	r5, [r4, #4]
 800c744:	b00c      	add	sp, #48	; 0x30
 800c746:	bd70      	pop	{r4, r5, r6, pc}
 800c748:	4629      	mov	r1, r5
 800c74a:	4630      	mov	r0, r6
 800c74c:	f000 fdd6 	bl	800d2fc <iprintf>
 800c750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c754:	f7f4 fb9e 	bl	8000e94 <HAL_Delay>
 800c758:	e7d5      	b.n	800c706 <ErrorTimerHourlyCheck+0xc6>
 800c75a:	bf00      	nop
 800c75c:	2000c5b4 	.word	0x2000c5b4
 800c760:	0800fdde 	.word	0x0800fdde
 800c764:	0800fdf0 	.word	0x0800fdf0

0800c768 <JsmnParse>:
 800c768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76c:	f04f 0c03 	mov.w	ip, #3
 800c770:	2600      	movs	r6, #0
 800c772:	f04f 3eff 	mov.w	lr, #4294967295
 800c776:	6805      	ldr	r5, [r0, #0]
 800c778:	5d4c      	ldrb	r4, [r1, r5]
 800c77a:	b94c      	cbnz	r4, 800c790 <JsmnParse+0x28>
 800c77c:	6841      	ldr	r1, [r0, #4]
 800c77e:	1e4b      	subs	r3, r1, #1
 800c780:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c784:	2b00      	cmp	r3, #0
 800c786:	f280 80fb 	bge.w	800c980 <JsmnParse+0x218>
 800c78a:	2000      	movs	r0, #0
 800c78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c790:	2c2c      	cmp	r4, #44	; 0x2c
 800c792:	d006      	beq.n	800c7a2 <JsmnParse+0x3a>
 800c794:	d828      	bhi.n	800c7e8 <JsmnParse+0x80>
 800c796:	2c0d      	cmp	r4, #13
 800c798:	d003      	beq.n	800c7a2 <JsmnParse+0x3a>
 800c79a:	d806      	bhi.n	800c7aa <JsmnParse+0x42>
 800c79c:	3c09      	subs	r4, #9
 800c79e:	2c01      	cmp	r4, #1
 800c7a0:	d808      	bhi.n	800c7b4 <JsmnParse+0x4c>
 800c7a2:	6804      	ldr	r4, [r0, #0]
 800c7a4:	3401      	adds	r4, #1
 800c7a6:	6004      	str	r4, [r0, #0]
 800c7a8:	e7e5      	b.n	800c776 <JsmnParse+0xe>
 800c7aa:	2c20      	cmp	r4, #32
 800c7ac:	d0f9      	beq.n	800c7a2 <JsmnParse+0x3a>
 800c7ae:	2c22      	cmp	r4, #34	; 0x22
 800c7b0:	f000 8086 	beq.w	800c8c0 <JsmnParse+0x158>
 800c7b4:	6807      	ldr	r7, [r0, #0]
 800c7b6:	5dcc      	ldrb	r4, [r1, r7]
 800c7b8:	2c00      	cmp	r4, #0
 800c7ba:	f040 80c4 	bne.w	800c946 <JsmnParse+0x1de>
 800c7be:	6844      	ldr	r4, [r0, #4]
 800c7c0:	429c      	cmp	r4, r3
 800c7c2:	f280 80e8 	bge.w	800c996 <JsmnParse+0x22e>
 800c7c6:	f104 0801 	add.w	r8, r4, #1
 800c7ca:	0124      	lsls	r4, r4, #4
 800c7cc:	f8c0 8004 	str.w	r8, [r0, #4]
 800c7d0:	eb02 0804 	add.w	r8, r2, r4
 800c7d4:	5516      	strb	r6, [r2, r4]
 800c7d6:	f8c8 7008 	str.w	r7, [r8, #8]
 800c7da:	3f01      	subs	r7, #1
 800c7dc:	f8c8 5004 	str.w	r5, [r8, #4]
 800c7e0:	f8c8 600c 	str.w	r6, [r8, #12]
 800c7e4:	6007      	str	r7, [r0, #0]
 800c7e6:	e086      	b.n	800c8f6 <JsmnParse+0x18e>
 800c7e8:	2c5d      	cmp	r4, #93	; 0x5d
 800c7ea:	d036      	beq.n	800c85a <JsmnParse+0xf2>
 800c7ec:	d82e      	bhi.n	800c84c <JsmnParse+0xe4>
 800c7ee:	2c3a      	cmp	r4, #58	; 0x3a
 800c7f0:	d0d7      	beq.n	800c7a2 <JsmnParse+0x3a>
 800c7f2:	2c5b      	cmp	r4, #91	; 0x5b
 800c7f4:	d1de      	bne.n	800c7b4 <JsmnParse+0x4c>
 800c7f6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800c7fa:	4599      	cmp	r9, r3
 800c7fc:	f280 80cc 	bge.w	800c998 <JsmnParse+0x230>
 800c800:	f109 0701 	add.w	r7, r9, #1
 800c804:	6047      	str	r7, [r0, #4]
 800c806:	6887      	ldr	r7, [r0, #8]
 800c808:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 800c80c:	f1b7 3fff 	cmp.w	r7, #4294967295
 800c810:	eb02 0a0b 	add.w	sl, r2, fp
 800c814:	bf18      	it	ne
 800c816:	eb02 1807 	addne.w	r8, r2, r7, lsl #4
 800c81a:	f8ca 600c 	str.w	r6, [sl, #12]
 800c81e:	bf18      	it	ne
 800c820:	f8d8 700c 	ldrne.w	r7, [r8, #12]
 800c824:	f8ca e004 	str.w	lr, [sl, #4]
 800c828:	bf18      	it	ne
 800c82a:	3701      	addne	r7, #1
 800c82c:	f8ca e008 	str.w	lr, [sl, #8]
 800c830:	bf18      	it	ne
 800c832:	f8c8 700c 	strne.w	r7, [r8, #12]
 800c836:	2c7b      	cmp	r4, #123	; 0x7b
 800c838:	bf14      	ite	ne
 800c83a:	2402      	movne	r4, #2
 800c83c:	2401      	moveq	r4, #1
 800c83e:	f802 400b 	strb.w	r4, [r2, fp]
 800c842:	f8ca 5004 	str.w	r5, [sl, #4]
 800c846:	f8c0 9008 	str.w	r9, [r0, #8]
 800c84a:	e7aa      	b.n	800c7a2 <JsmnParse+0x3a>
 800c84c:	2c7b      	cmp	r4, #123	; 0x7b
 800c84e:	d0d2      	beq.n	800c7f6 <JsmnParse+0x8e>
 800c850:	2c7d      	cmp	r4, #125	; 0x7d
 800c852:	d1af      	bne.n	800c7b4 <JsmnParse+0x4c>
 800c854:	f04f 0901 	mov.w	r9, #1
 800c858:	e001      	b.n	800c85e <JsmnParse+0xf6>
 800c85a:	f04f 0902 	mov.w	r9, #2
 800c85e:	6844      	ldr	r4, [r0, #4]
 800c860:	3c01      	subs	r4, #1
 800c862:	eb02 1804 	add.w	r8, r2, r4, lsl #4
 800c866:	2c00      	cmp	r4, #0
 800c868:	da05      	bge.n	800c876 <JsmnParse+0x10e>
 800c86a:	3401      	adds	r4, #1
 800c86c:	d199      	bne.n	800c7a2 <JsmnParse+0x3a>
 800c86e:	f06f 0001 	mvn.w	r0, #1
 800c872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c876:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c87a:	3701      	adds	r7, #1
 800c87c:	d016      	beq.n	800c8ac <JsmnParse+0x144>
 800c87e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800c882:	f1b7 3fff 	cmp.w	r7, #4294967295
 800c886:	d111      	bne.n	800c8ac <JsmnParse+0x144>
 800c888:	f898 a000 	ldrb.w	sl, [r8]
 800c88c:	45ca      	cmp	sl, r9
 800c88e:	d1ee      	bne.n	800c86e <JsmnParse+0x106>
 800c890:	3501      	adds	r5, #1
 800c892:	6087      	str	r7, [r0, #8]
 800c894:	f8c8 5008 	str.w	r5, [r8, #8]
 800c898:	eb02 1704 	add.w	r7, r2, r4, lsl #4
 800c89c:	687d      	ldr	r5, [r7, #4]
 800c89e:	3501      	adds	r5, #1
 800c8a0:	d008      	beq.n	800c8b4 <JsmnParse+0x14c>
 800c8a2:	68bd      	ldr	r5, [r7, #8]
 800c8a4:	3501      	adds	r5, #1
 800c8a6:	d105      	bne.n	800c8b4 <JsmnParse+0x14c>
 800c8a8:	6084      	str	r4, [r0, #8]
 800c8aa:	e77a      	b.n	800c7a2 <JsmnParse+0x3a>
 800c8ac:	3c01      	subs	r4, #1
 800c8ae:	f1a8 0810 	sub.w	r8, r8, #16
 800c8b2:	e7d8      	b.n	800c866 <JsmnParse+0xfe>
 800c8b4:	3c01      	subs	r4, #1
 800c8b6:	1c65      	adds	r5, r4, #1
 800c8b8:	f1a7 0710 	sub.w	r7, r7, #16
 800c8bc:	d1ee      	bne.n	800c89c <JsmnParse+0x134>
 800c8be:	e770      	b.n	800c7a2 <JsmnParse+0x3a>
 800c8c0:	f105 0801 	add.w	r8, r5, #1
 800c8c4:	f8c0 8000 	str.w	r8, [r0]
 800c8c8:	6804      	ldr	r4, [r0, #0]
 800c8ca:	5d0f      	ldrb	r7, [r1, r4]
 800c8cc:	b927      	cbnz	r7, 800c8d8 <JsmnParse+0x170>
 800c8ce:	6005      	str	r5, [r0, #0]
 800c8d0:	f06f 0002 	mvn.w	r0, #2
 800c8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d8:	2f22      	cmp	r7, #34	; 0x22
 800c8da:	d115      	bne.n	800c908 <JsmnParse+0x1a0>
 800c8dc:	6847      	ldr	r7, [r0, #4]
 800c8de:	429f      	cmp	r7, r3
 800c8e0:	da59      	bge.n	800c996 <JsmnParse+0x22e>
 800c8e2:	1c7d      	adds	r5, r7, #1
 800c8e4:	013f      	lsls	r7, r7, #4
 800c8e6:	6045      	str	r5, [r0, #4]
 800c8e8:	19d5      	adds	r5, r2, r7
 800c8ea:	f802 c007 	strb.w	ip, [r2, r7]
 800c8ee:	f8c5 8004 	str.w	r8, [r5, #4]
 800c8f2:	60ac      	str	r4, [r5, #8]
 800c8f4:	60ee      	str	r6, [r5, #12]
 800c8f6:	6885      	ldr	r5, [r0, #8]
 800c8f8:	1c6c      	adds	r4, r5, #1
 800c8fa:	bf1f      	itttt	ne
 800c8fc:	eb02 1505 	addne.w	r5, r2, r5, lsl #4
 800c900:	68ec      	ldrne	r4, [r5, #12]
 800c902:	3401      	addne	r4, #1
 800c904:	60ec      	strne	r4, [r5, #12]
 800c906:	e74c      	b.n	800c7a2 <JsmnParse+0x3a>
 800c908:	2f5c      	cmp	r7, #92	; 0x5c
 800c90a:	d118      	bne.n	800c93e <JsmnParse+0x1d6>
 800c90c:	3401      	adds	r4, #1
 800c90e:	6004      	str	r4, [r0, #0]
 800c910:	5d0c      	ldrb	r4, [r1, r4]
 800c912:	2c66      	cmp	r4, #102	; 0x66
 800c914:	d013      	beq.n	800c93e <JsmnParse+0x1d6>
 800c916:	d80a      	bhi.n	800c92e <JsmnParse+0x1c6>
 800c918:	2c2f      	cmp	r4, #47	; 0x2f
 800c91a:	d010      	beq.n	800c93e <JsmnParse+0x1d6>
 800c91c:	d803      	bhi.n	800c926 <JsmnParse+0x1be>
 800c91e:	2c22      	cmp	r4, #34	; 0x22
 800c920:	d00d      	beq.n	800c93e <JsmnParse+0x1d6>
 800c922:	6005      	str	r5, [r0, #0]
 800c924:	e7a3      	b.n	800c86e <JsmnParse+0x106>
 800c926:	2c5c      	cmp	r4, #92	; 0x5c
 800c928:	d009      	beq.n	800c93e <JsmnParse+0x1d6>
 800c92a:	2c62      	cmp	r4, #98	; 0x62
 800c92c:	e7f8      	b.n	800c920 <JsmnParse+0x1b8>
 800c92e:	2c72      	cmp	r4, #114	; 0x72
 800c930:	d005      	beq.n	800c93e <JsmnParse+0x1d6>
 800c932:	d801      	bhi.n	800c938 <JsmnParse+0x1d0>
 800c934:	2c6e      	cmp	r4, #110	; 0x6e
 800c936:	e7f3      	b.n	800c920 <JsmnParse+0x1b8>
 800c938:	3c74      	subs	r4, #116	; 0x74
 800c93a:	2c01      	cmp	r4, #1
 800c93c:	d8f1      	bhi.n	800c922 <JsmnParse+0x1ba>
 800c93e:	6804      	ldr	r4, [r0, #0]
 800c940:	3401      	adds	r4, #1
 800c942:	6004      	str	r4, [r0, #0]
 800c944:	e7c0      	b.n	800c8c8 <JsmnParse+0x160>
 800c946:	2c20      	cmp	r4, #32
 800c948:	f43f af39 	beq.w	800c7be <JsmnParse+0x56>
 800c94c:	d80d      	bhi.n	800c96a <JsmnParse+0x202>
 800c94e:	2c09      	cmp	r4, #9
 800c950:	d305      	bcc.n	800c95e <JsmnParse+0x1f6>
 800c952:	2c0a      	cmp	r4, #10
 800c954:	f67f af33 	bls.w	800c7be <JsmnParse+0x56>
 800c958:	2c0d      	cmp	r4, #13
 800c95a:	f43f af30 	beq.w	800c7be <JsmnParse+0x56>
 800c95e:	3c20      	subs	r4, #32
 800c960:	2c5e      	cmp	r4, #94	; 0x5e
 800c962:	d8de      	bhi.n	800c922 <JsmnParse+0x1ba>
 800c964:	3701      	adds	r7, #1
 800c966:	6007      	str	r7, [r0, #0]
 800c968:	e724      	b.n	800c7b4 <JsmnParse+0x4c>
 800c96a:	2c3a      	cmp	r4, #58	; 0x3a
 800c96c:	f43f af27 	beq.w	800c7be <JsmnParse+0x56>
 800c970:	d801      	bhi.n	800c976 <JsmnParse+0x20e>
 800c972:	2c2c      	cmp	r4, #44	; 0x2c
 800c974:	e7f1      	b.n	800c95a <JsmnParse+0x1f2>
 800c976:	2c5d      	cmp	r4, #93	; 0x5d
 800c978:	f43f af21 	beq.w	800c7be <JsmnParse+0x56>
 800c97c:	2c7d      	cmp	r4, #125	; 0x7d
 800c97e:	e7ec      	b.n	800c95a <JsmnParse+0x1f2>
 800c980:	f852 1c0c 	ldr.w	r1, [r2, #-12]
 800c984:	3101      	adds	r1, #1
 800c986:	d003      	beq.n	800c990 <JsmnParse+0x228>
 800c988:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800c98c:	3101      	adds	r1, #1
 800c98e:	d09f      	beq.n	800c8d0 <JsmnParse+0x168>
 800c990:	3b01      	subs	r3, #1
 800c992:	3a10      	subs	r2, #16
 800c994:	e6f6      	b.n	800c784 <JsmnParse+0x1c>
 800c996:	6005      	str	r5, [r0, #0]
 800c998:	f04f 30ff 	mov.w	r0, #4294967295
 800c99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9a0 <JsmnInitialize>:
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	6003      	str	r3, [r0, #0]
 800c9a4:	6043      	str	r3, [r0, #4]
 800c9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9aa:	6083      	str	r3, [r0, #8]
 800c9ac:	4770      	bx	lr
	...

0800c9b0 <printTime>:
 800c9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9b2:	7944      	ldrb	r4, [r0, #5]
 800c9b4:	7883      	ldrb	r3, [r0, #2]
 800c9b6:	7842      	ldrb	r2, [r0, #1]
 800c9b8:	7801      	ldrb	r1, [r0, #0]
 800c9ba:	9402      	str	r4, [sp, #8]
 800c9bc:	7904      	ldrb	r4, [r0, #4]
 800c9be:	9401      	str	r4, [sp, #4]
 800c9c0:	78c0      	ldrb	r0, [r0, #3]
 800c9c2:	9000      	str	r0, [sp, #0]
 800c9c4:	4802      	ldr	r0, [pc, #8]	; (800c9d0 <printTime+0x20>)
 800c9c6:	f000 fc99 	bl	800d2fc <iprintf>
 800c9ca:	b004      	add	sp, #16
 800c9cc:	bd10      	pop	{r4, pc}
 800c9ce:	bf00      	nop
 800c9d0:	0800fe12 	.word	0x0800fe12

0800c9d4 <RTC_GetElapsedSeconds>:
 800c9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d6:	4e1e      	ldr	r6, [pc, #120]	; (800ca50 <RTC_GetElapsedSeconds+0x7c>)
 800c9d8:	4604      	mov	r4, r0
 800c9da:	4630      	mov	r0, r6
 800c9dc:	460d      	mov	r5, r1
 800c9de:	f000 fd15 	bl	800d40c <puts>
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	f7ff ffe4 	bl	800c9b0 <printTime>
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	f000 fd0f 	bl	800d40c <puts>
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	f7ff ffde 	bl	800c9b0 <printTime>
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	f000 fd09 	bl	800d40c <puts>
 800c9fa:	7861      	ldrb	r1, [r4, #1]
 800c9fc:	4a15      	ldr	r2, [pc, #84]	; (800ca54 <RTC_GetElapsedSeconds+0x80>)
 800c9fe:	4816      	ldr	r0, [pc, #88]	; (800ca58 <RTC_GetElapsedSeconds+0x84>)
 800ca00:	7826      	ldrb	r6, [r4, #0]
 800ca02:	f8df e058 	ldr.w	lr, [pc, #88]	; 800ca5c <RTC_GetElapsedSeconds+0x88>
 800ca06:	f895 c001 	ldrb.w	ip, [r5, #1]
 800ca0a:	4351      	muls	r1, r2
 800ca0c:	fb00 1606 	mla	r6, r0, r6, r1
 800ca10:	78a1      	ldrb	r1, [r4, #2]
 800ca12:	fb0e 6601 	mla	r6, lr, r1, r6
 800ca16:	78e1      	ldrb	r1, [r4, #3]
 800ca18:	f44f 6761 	mov.w	r7, #3600	; 0xe10
 800ca1c:	fb07 6101 	mla	r1, r7, r1, r6
 800ca20:	7926      	ldrb	r6, [r4, #4]
 800ca22:	233c      	movs	r3, #60	; 0x3c
 800ca24:	fb13 1106 	smlabb	r1, r3, r6, r1
 800ca28:	782e      	ldrb	r6, [r5, #0]
 800ca2a:	fb02 f20c 	mul.w	r2, r2, ip
 800ca2e:	fb00 2206 	mla	r2, r0, r6, r2
 800ca32:	78a8      	ldrb	r0, [r5, #2]
 800ca34:	fb0e 2200 	mla	r2, lr, r0, r2
 800ca38:	78e8      	ldrb	r0, [r5, #3]
 800ca3a:	fb07 2000 	mla	r0, r7, r0, r2
 800ca3e:	792a      	ldrb	r2, [r5, #4]
 800ca40:	fb13 0302 	smlabb	r3, r3, r2, r0
 800ca44:	7968      	ldrb	r0, [r5, #5]
 800ca46:	7962      	ldrb	r2, [r4, #5]
 800ca48:	4418      	add	r0, r3
 800ca4a:	440a      	add	r2, r1
 800ca4c:	1a80      	subs	r0, r0, r2
 800ca4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca50:	0800f9e3 	.word	0x0800f9e3
 800ca54:	00278d00 	.word	0x00278d00
 800ca58:	01e13380 	.word	0x01e13380
 800ca5c:	00015180 	.word	0x00015180

0800ca60 <GetTime>:
 800ca60:	b530      	push	{r4, r5, lr}
 800ca62:	4d12      	ldr	r5, [pc, #72]	; (800caac <GetTime+0x4c>)
 800ca64:	b087      	sub	sp, #28
 800ca66:	4604      	mov	r4, r0
 800ca68:	a901      	add	r1, sp, #4
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	f7f7 f8da 	bl	8003c26 <HAL_RTC_GetTime>
 800ca72:	2200      	movs	r2, #0
 800ca74:	4669      	mov	r1, sp
 800ca76:	4628      	mov	r0, r5
 800ca78:	f7f7 f8fc 	bl	8003c74 <HAL_RTC_GetDate>
 800ca7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ca80:	7023      	strb	r3, [r4, #0]
 800ca82:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ca86:	7063      	strb	r3, [r4, #1]
 800ca88:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ca8c:	70a3      	strb	r3, [r4, #2]
 800ca8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ca92:	70e3      	strb	r3, [r4, #3]
 800ca94:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ca98:	7123      	strb	r3, [r4, #4]
 800ca9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca9e:	7163      	strb	r3, [r4, #5]
 800caa0:	4620      	mov	r0, r4
 800caa2:	f7ff ff85 	bl	800c9b0 <printTime>
 800caa6:	b007      	add	sp, #28
 800caa8:	bd30      	pop	{r4, r5, pc}
 800caaa:	bf00      	nop
 800caac:	2000c5b4 	.word	0x2000c5b4

0800cab0 <TimeToSend>:
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	460c      	mov	r4, r1
 800cab4:	4606      	mov	r6, r0
 800cab6:	f7fc fadf 	bl	8009078 <GetSaraConfigurationStruct>
 800caba:	4605      	mov	r5, r0
 800cabc:	4620      	mov	r0, r4
 800cabe:	f7ff ffcf 	bl	800ca60 <GetTime>
 800cac2:	4621      	mov	r1, r4
 800cac4:	4630      	mov	r0, r6
 800cac6:	f7ff ff85 	bl	800c9d4 <RTC_GetElapsedSeconds>
 800caca:	78e2      	ldrb	r2, [r4, #3]
 800cacc:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d10b      	bne.n	800caec <TimeToSend+0x3c>
 800cad4:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
 800cad8:	dd08      	ble.n	800caec <TimeToSend+0x3c>
 800cada:	4805      	ldr	r0, [pc, #20]	; (800caf0 <TimeToSend+0x40>)
 800cadc:	4905      	ldr	r1, [pc, #20]	; (800caf4 <TimeToSend+0x44>)
 800cade:	f7fd ffab 	bl	800aa38 <debugPrint>
 800cae2:	2001      	movs	r0, #1
 800cae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cae8:	f7fd bff2 	b.w	800aad0 <SetRadioState>
 800caec:	2000      	movs	r0, #0
 800caee:	bd70      	pop	{r4, r5, r6, pc}
 800caf0:	2000c5d8 	.word	0x2000c5d8
 800caf4:	0800fe0f 	.word	0x0800fe0f

0800caf8 <Reset_Handler>:
 800caf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cb30 <LoopForever+0x2>
 800cafc:	2100      	movs	r1, #0
 800cafe:	e003      	b.n	800cb08 <LoopCopyDataInit>

0800cb00 <CopyDataInit>:
 800cb00:	4b0c      	ldr	r3, [pc, #48]	; (800cb34 <LoopForever+0x6>)
 800cb02:	585b      	ldr	r3, [r3, r1]
 800cb04:	5043      	str	r3, [r0, r1]
 800cb06:	3104      	adds	r1, #4

0800cb08 <LoopCopyDataInit>:
 800cb08:	480b      	ldr	r0, [pc, #44]	; (800cb38 <LoopForever+0xa>)
 800cb0a:	4b0c      	ldr	r3, [pc, #48]	; (800cb3c <LoopForever+0xe>)
 800cb0c:	1842      	adds	r2, r0, r1
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d3f6      	bcc.n	800cb00 <CopyDataInit>
 800cb12:	4a0b      	ldr	r2, [pc, #44]	; (800cb40 <LoopForever+0x12>)
 800cb14:	e002      	b.n	800cb1c <LoopFillZerobss>

0800cb16 <FillZerobss>:
 800cb16:	2300      	movs	r3, #0
 800cb18:	f842 3b04 	str.w	r3, [r2], #4

0800cb1c <LoopFillZerobss>:
 800cb1c:	4b09      	ldr	r3, [pc, #36]	; (800cb44 <LoopForever+0x16>)
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d3f9      	bcc.n	800cb16 <FillZerobss>
 800cb22:	f7fd feab 	bl	800a87c <SystemInit>
 800cb26:	f000 f857 	bl	800cbd8 <__libc_init_array>
 800cb2a:	f7fc fc4f 	bl	80093cc <main>

0800cb2e <LoopForever>:
 800cb2e:	e7fe      	b.n	800cb2e <LoopForever>
 800cb30:	20028000 	.word	0x20028000
 800cb34:	0801014c 	.word	0x0801014c
 800cb38:	20000000 	.word	0x20000000
 800cb3c:	20000260 	.word	0x20000260
 800cb40:	20000260 	.word	0x20000260
 800cb44:	2000c658 	.word	0x2000c658

0800cb48 <ADC1_IRQHandler>:
 800cb48:	e7fe      	b.n	800cb48 <ADC1_IRQHandler>
	...

0800cb4c <asctime>:
 800cb4c:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <asctime+0x28>)
 800cb4e:	b570      	push	{r4, r5, r6, lr}
 800cb50:	681c      	ldr	r4, [r3, #0]
 800cb52:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800cb54:	4606      	mov	r6, r0
 800cb56:	b93d      	cbnz	r5, 800cb68 <asctime+0x1c>
 800cb58:	201a      	movs	r0, #26
 800cb5a:	f000 f861 	bl	800cc20 <malloc>
 800cb5e:	221a      	movs	r2, #26
 800cb60:	6420      	str	r0, [r4, #64]	; 0x40
 800cb62:	4629      	mov	r1, r5
 800cb64:	f000 f886 	bl	800cc74 <memset>
 800cb68:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb70:	f000 b802 	b.w	800cb78 <asctime_r>
 800cb74:	2000002c 	.word	0x2000002c

0800cb78 <asctime_r>:
 800cb78:	b510      	push	{r4, lr}
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	6941      	ldr	r1, [r0, #20]
 800cb7e:	6903      	ldr	r3, [r0, #16]
 800cb80:	6982      	ldr	r2, [r0, #24]
 800cb82:	b086      	sub	sp, #24
 800cb84:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800cb88:	9104      	str	r1, [sp, #16]
 800cb8a:	6801      	ldr	r1, [r0, #0]
 800cb8c:	9103      	str	r1, [sp, #12]
 800cb8e:	6841      	ldr	r1, [r0, #4]
 800cb90:	9102      	str	r1, [sp, #8]
 800cb92:	6881      	ldr	r1, [r0, #8]
 800cb94:	9101      	str	r1, [sp, #4]
 800cb96:	68c1      	ldr	r1, [r0, #12]
 800cb98:	9100      	str	r1, [sp, #0]
 800cb9a:	4907      	ldr	r1, [pc, #28]	; (800cbb8 <asctime_r+0x40>)
 800cb9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cba0:	440b      	add	r3, r1
 800cba2:	4906      	ldr	r1, [pc, #24]	; (800cbbc <asctime_r+0x44>)
 800cba4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cba8:	440a      	add	r2, r1
 800cbaa:	4620      	mov	r0, r4
 800cbac:	4904      	ldr	r1, [pc, #16]	; (800cbc0 <asctime_r+0x48>)
 800cbae:	f000 fc45 	bl	800d43c <siprintf>
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	b006      	add	sp, #24
 800cbb6:	bd10      	pop	{r4, pc}
 800cbb8:	0800fe5d 	.word	0x0800fe5d
 800cbbc:	0800fe48 	.word	0x0800fe48
 800cbc0:	0800fe28 	.word	0x0800fe28

0800cbc4 <atoi>:
 800cbc4:	220a      	movs	r2, #10
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	f000 bda8 	b.w	800d71c <strtol>

0800cbcc <__errno>:
 800cbcc:	4b01      	ldr	r3, [pc, #4]	; (800cbd4 <__errno+0x8>)
 800cbce:	6818      	ldr	r0, [r3, #0]
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	2000002c 	.word	0x2000002c

0800cbd8 <__libc_init_array>:
 800cbd8:	b570      	push	{r4, r5, r6, lr}
 800cbda:	4e0d      	ldr	r6, [pc, #52]	; (800cc10 <__libc_init_array+0x38>)
 800cbdc:	4c0d      	ldr	r4, [pc, #52]	; (800cc14 <__libc_init_array+0x3c>)
 800cbde:	1ba4      	subs	r4, r4, r6
 800cbe0:	10a4      	asrs	r4, r4, #2
 800cbe2:	2500      	movs	r5, #0
 800cbe4:	42a5      	cmp	r5, r4
 800cbe6:	d109      	bne.n	800cbfc <__libc_init_array+0x24>
 800cbe8:	4e0b      	ldr	r6, [pc, #44]	; (800cc18 <__libc_init_array+0x40>)
 800cbea:	4c0c      	ldr	r4, [pc, #48]	; (800cc1c <__libc_init_array+0x44>)
 800cbec:	f002 fc62 	bl	800f4b4 <_init>
 800cbf0:	1ba4      	subs	r4, r4, r6
 800cbf2:	10a4      	asrs	r4, r4, #2
 800cbf4:	2500      	movs	r5, #0
 800cbf6:	42a5      	cmp	r5, r4
 800cbf8:	d105      	bne.n	800cc06 <__libc_init_array+0x2e>
 800cbfa:	bd70      	pop	{r4, r5, r6, pc}
 800cbfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc00:	4798      	blx	r3
 800cc02:	3501      	adds	r5, #1
 800cc04:	e7ee      	b.n	800cbe4 <__libc_init_array+0xc>
 800cc06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc0a:	4798      	blx	r3
 800cc0c:	3501      	adds	r5, #1
 800cc0e:	e7f2      	b.n	800cbf6 <__libc_init_array+0x1e>
 800cc10:	08010144 	.word	0x08010144
 800cc14:	08010144 	.word	0x08010144
 800cc18:	08010144 	.word	0x08010144
 800cc1c:	08010148 	.word	0x08010148

0800cc20 <malloc>:
 800cc20:	4b02      	ldr	r3, [pc, #8]	; (800cc2c <malloc+0xc>)
 800cc22:	4601      	mov	r1, r0
 800cc24:	6818      	ldr	r0, [r3, #0]
 800cc26:	f000 bb0f 	b.w	800d248 <_malloc_r>
 800cc2a:	bf00      	nop
 800cc2c:	2000002c 	.word	0x2000002c

0800cc30 <free>:
 800cc30:	4b02      	ldr	r3, [pc, #8]	; (800cc3c <free+0xc>)
 800cc32:	4601      	mov	r1, r0
 800cc34:	6818      	ldr	r0, [r3, #0]
 800cc36:	f000 bab9 	b.w	800d1ac <_free_r>
 800cc3a:	bf00      	nop
 800cc3c:	2000002c 	.word	0x2000002c

0800cc40 <memcmp>:
 800cc40:	b530      	push	{r4, r5, lr}
 800cc42:	2400      	movs	r4, #0
 800cc44:	42a2      	cmp	r2, r4
 800cc46:	d101      	bne.n	800cc4c <memcmp+0xc>
 800cc48:	2000      	movs	r0, #0
 800cc4a:	e007      	b.n	800cc5c <memcmp+0x1c>
 800cc4c:	5d03      	ldrb	r3, [r0, r4]
 800cc4e:	3401      	adds	r4, #1
 800cc50:	190d      	adds	r5, r1, r4
 800cc52:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800cc56:	42ab      	cmp	r3, r5
 800cc58:	d0f4      	beq.n	800cc44 <memcmp+0x4>
 800cc5a:	1b58      	subs	r0, r3, r5
 800cc5c:	bd30      	pop	{r4, r5, pc}

0800cc5e <memcpy>:
 800cc5e:	b510      	push	{r4, lr}
 800cc60:	1e43      	subs	r3, r0, #1
 800cc62:	440a      	add	r2, r1
 800cc64:	4291      	cmp	r1, r2
 800cc66:	d100      	bne.n	800cc6a <memcpy+0xc>
 800cc68:	bd10      	pop	{r4, pc}
 800cc6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc72:	e7f7      	b.n	800cc64 <memcpy+0x6>

0800cc74 <memset>:
 800cc74:	4402      	add	r2, r0
 800cc76:	4603      	mov	r3, r0
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d100      	bne.n	800cc7e <memset+0xa>
 800cc7c:	4770      	bx	lr
 800cc7e:	f803 1b01 	strb.w	r1, [r3], #1
 800cc82:	e7f9      	b.n	800cc78 <memset+0x4>

0800cc84 <validate_structure>:
 800cc84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc86:	6801      	ldr	r1, [r0, #0]
 800cc88:	293b      	cmp	r1, #59	; 0x3b
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	d911      	bls.n	800ccb2 <validate_structure+0x2e>
 800cc8e:	223c      	movs	r2, #60	; 0x3c
 800cc90:	4668      	mov	r0, sp
 800cc92:	f001 f869 	bl	800dd68 <div>
 800cc96:	9a01      	ldr	r2, [sp, #4]
 800cc98:	6863      	ldr	r3, [r4, #4]
 800cc9a:	9900      	ldr	r1, [sp, #0]
 800cc9c:	2a00      	cmp	r2, #0
 800cc9e:	440b      	add	r3, r1
 800cca0:	6063      	str	r3, [r4, #4]
 800cca2:	bfbb      	ittet	lt
 800cca4:	323c      	addlt	r2, #60	; 0x3c
 800cca6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ccaa:	6022      	strge	r2, [r4, #0]
 800ccac:	6022      	strlt	r2, [r4, #0]
 800ccae:	bfb8      	it	lt
 800ccb0:	6063      	strlt	r3, [r4, #4]
 800ccb2:	6861      	ldr	r1, [r4, #4]
 800ccb4:	293b      	cmp	r1, #59	; 0x3b
 800ccb6:	d911      	bls.n	800ccdc <validate_structure+0x58>
 800ccb8:	223c      	movs	r2, #60	; 0x3c
 800ccba:	4668      	mov	r0, sp
 800ccbc:	f001 f854 	bl	800dd68 <div>
 800ccc0:	9a01      	ldr	r2, [sp, #4]
 800ccc2:	68a3      	ldr	r3, [r4, #8]
 800ccc4:	9900      	ldr	r1, [sp, #0]
 800ccc6:	2a00      	cmp	r2, #0
 800ccc8:	440b      	add	r3, r1
 800ccca:	60a3      	str	r3, [r4, #8]
 800cccc:	bfbb      	ittet	lt
 800ccce:	323c      	addlt	r2, #60	; 0x3c
 800ccd0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ccd4:	6062      	strge	r2, [r4, #4]
 800ccd6:	6062      	strlt	r2, [r4, #4]
 800ccd8:	bfb8      	it	lt
 800ccda:	60a3      	strlt	r3, [r4, #8]
 800ccdc:	68a1      	ldr	r1, [r4, #8]
 800ccde:	2917      	cmp	r1, #23
 800cce0:	d911      	bls.n	800cd06 <validate_structure+0x82>
 800cce2:	2218      	movs	r2, #24
 800cce4:	4668      	mov	r0, sp
 800cce6:	f001 f83f 	bl	800dd68 <div>
 800ccea:	9a01      	ldr	r2, [sp, #4]
 800ccec:	68e3      	ldr	r3, [r4, #12]
 800ccee:	9900      	ldr	r1, [sp, #0]
 800ccf0:	2a00      	cmp	r2, #0
 800ccf2:	440b      	add	r3, r1
 800ccf4:	60e3      	str	r3, [r4, #12]
 800ccf6:	bfbb      	ittet	lt
 800ccf8:	3218      	addlt	r2, #24
 800ccfa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ccfe:	60a2      	strge	r2, [r4, #8]
 800cd00:	60a2      	strlt	r2, [r4, #8]
 800cd02:	bfb8      	it	lt
 800cd04:	60e3      	strlt	r3, [r4, #12]
 800cd06:	6921      	ldr	r1, [r4, #16]
 800cd08:	290b      	cmp	r1, #11
 800cd0a:	d911      	bls.n	800cd30 <validate_structure+0xac>
 800cd0c:	220c      	movs	r2, #12
 800cd0e:	4668      	mov	r0, sp
 800cd10:	f001 f82a 	bl	800dd68 <div>
 800cd14:	9a01      	ldr	r2, [sp, #4]
 800cd16:	6963      	ldr	r3, [r4, #20]
 800cd18:	9900      	ldr	r1, [sp, #0]
 800cd1a:	2a00      	cmp	r2, #0
 800cd1c:	440b      	add	r3, r1
 800cd1e:	6163      	str	r3, [r4, #20]
 800cd20:	bfbb      	ittet	lt
 800cd22:	320c      	addlt	r2, #12
 800cd24:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800cd28:	6122      	strge	r2, [r4, #16]
 800cd2a:	6122      	strlt	r2, [r4, #16]
 800cd2c:	bfb8      	it	lt
 800cd2e:	6163      	strlt	r3, [r4, #20]
 800cd30:	6963      	ldr	r3, [r4, #20]
 800cd32:	0799      	lsls	r1, r3, #30
 800cd34:	d120      	bne.n	800cd78 <validate_structure+0xf4>
 800cd36:	2164      	movs	r1, #100	; 0x64
 800cd38:	fb93 f2f1 	sdiv	r2, r3, r1
 800cd3c:	fb01 3212 	mls	r2, r1, r2, r3
 800cd40:	b9e2      	cbnz	r2, 800cd7c <validate_structure+0xf8>
 800cd42:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800cd46:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800cd4a:	fb93 f2f1 	sdiv	r2, r3, r1
 800cd4e:	fb01 3312 	mls	r3, r1, r2, r3
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	bf14      	ite	ne
 800cd56:	231c      	movne	r3, #28
 800cd58:	231d      	moveq	r3, #29
 800cd5a:	68e2      	ldr	r2, [r4, #12]
 800cd5c:	2a00      	cmp	r2, #0
 800cd5e:	dc0f      	bgt.n	800cd80 <validate_structure+0xfc>
 800cd60:	4f34      	ldr	r7, [pc, #208]	; (800ce34 <validate_structure+0x1b0>)
 800cd62:	260b      	movs	r6, #11
 800cd64:	2064      	movs	r0, #100	; 0x64
 800cd66:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800cd6a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800cd6e:	f1bc 0f00 	cmp.w	ip, #0
 800cd72:	dd14      	ble.n	800cd9e <validate_structure+0x11a>
 800cd74:	b003      	add	sp, #12
 800cd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd78:	231c      	movs	r3, #28
 800cd7a:	e7ee      	b.n	800cd5a <validate_structure+0xd6>
 800cd7c:	231d      	movs	r3, #29
 800cd7e:	e7ec      	b.n	800cd5a <validate_structure+0xd6>
 800cd80:	4f2c      	ldr	r7, [pc, #176]	; (800ce34 <validate_structure+0x1b0>)
 800cd82:	f04f 0c00 	mov.w	ip, #0
 800cd86:	2564      	movs	r5, #100	; 0x64
 800cd88:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800cd8c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800cd90:	2a01      	cmp	r2, #1
 800cd92:	d02f      	beq.n	800cdf4 <validate_structure+0x170>
 800cd94:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 800cd98:	4281      	cmp	r1, r0
 800cd9a:	dc2e      	bgt.n	800cdfa <validate_structure+0x176>
 800cd9c:	e7ea      	b.n	800cd74 <validate_structure+0xf0>
 800cd9e:	6921      	ldr	r1, [r4, #16]
 800cda0:	3901      	subs	r1, #1
 800cda2:	6121      	str	r1, [r4, #16]
 800cda4:	3101      	adds	r1, #1
 800cda6:	d114      	bne.n	800cdd2 <validate_structure+0x14e>
 800cda8:	6963      	ldr	r3, [r4, #20]
 800cdaa:	1e59      	subs	r1, r3, #1
 800cdac:	078a      	lsls	r2, r1, #30
 800cdae:	e9c4 6104 	strd	r6, r1, [r4, #16]
 800cdb2:	d117      	bne.n	800cde4 <validate_structure+0x160>
 800cdb4:	fb91 f2f0 	sdiv	r2, r1, r0
 800cdb8:	fb00 1112 	mls	r1, r0, r2, r1
 800cdbc:	b9a1      	cbnz	r1, 800cde8 <validate_structure+0x164>
 800cdbe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800cdc2:	fb93 f2f5 	sdiv	r2, r3, r5
 800cdc6:	fb05 3312 	mls	r3, r5, r2, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	bf14      	ite	ne
 800cdce:	231c      	movne	r3, #28
 800cdd0:	231d      	moveq	r3, #29
 800cdd2:	6922      	ldr	r2, [r4, #16]
 800cdd4:	2a01      	cmp	r2, #1
 800cdd6:	bf14      	ite	ne
 800cdd8:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800cddc:	461a      	moveq	r2, r3
 800cdde:	4462      	add	r2, ip
 800cde0:	60e2      	str	r2, [r4, #12]
 800cde2:	e7c2      	b.n	800cd6a <validate_structure+0xe6>
 800cde4:	231c      	movs	r3, #28
 800cde6:	e7f4      	b.n	800cdd2 <validate_structure+0x14e>
 800cde8:	231d      	movs	r3, #29
 800cdea:	e7f2      	b.n	800cdd2 <validate_structure+0x14e>
 800cdec:	231c      	movs	r3, #28
 800cdee:	e7cd      	b.n	800cd8c <validate_structure+0x108>
 800cdf0:	231d      	movs	r3, #29
 800cdf2:	e7cb      	b.n	800cd8c <validate_structure+0x108>
 800cdf4:	428b      	cmp	r3, r1
 800cdf6:	dabd      	bge.n	800cd74 <validate_structure+0xf0>
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3201      	adds	r2, #1
 800cdfc:	1a09      	subs	r1, r1, r0
 800cdfe:	2a0c      	cmp	r2, #12
 800ce00:	60e1      	str	r1, [r4, #12]
 800ce02:	6122      	str	r2, [r4, #16]
 800ce04:	d1c2      	bne.n	800cd8c <validate_structure+0x108>
 800ce06:	6963      	ldr	r3, [r4, #20]
 800ce08:	1c5a      	adds	r2, r3, #1
 800ce0a:	0791      	lsls	r1, r2, #30
 800ce0c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 800ce10:	d1ec      	bne.n	800cdec <validate_structure+0x168>
 800ce12:	fb92 f1f5 	sdiv	r1, r2, r5
 800ce16:	fb05 2211 	mls	r2, r5, r1, r2
 800ce1a:	2a00      	cmp	r2, #0
 800ce1c:	d1e8      	bne.n	800cdf0 <validate_structure+0x16c>
 800ce1e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800ce22:	fb93 f2f6 	sdiv	r2, r3, r6
 800ce26:	fb06 3312 	mls	r3, r6, r2, r3
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	bf14      	ite	ne
 800ce2e:	231c      	movne	r3, #28
 800ce30:	231d      	moveq	r3, #29
 800ce32:	e7ab      	b.n	800cd8c <validate_structure+0x108>
 800ce34:	0800fe88 	.word	0x0800fe88

0800ce38 <mktime>:
 800ce38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce3c:	b089      	sub	sp, #36	; 0x24
 800ce3e:	4606      	mov	r6, r0
 800ce40:	f001 f964 	bl	800e10c <__gettzinfo>
 800ce44:	4680      	mov	r8, r0
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7ff ff1c 	bl	800cc84 <validate_structure>
 800ce4c:	e9d6 3000 	ldrd	r3, r0, [r6]
 800ce50:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 800ce54:	fb0a 3a00 	mla	sl, sl, r0, r3
 800ce58:	68b0      	ldr	r0, [r6, #8]
 800ce5a:	4abe      	ldr	r2, [pc, #760]	; (800d154 <mktime+0x31c>)
 800ce5c:	6975      	ldr	r5, [r6, #20]
 800ce5e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ce62:	fb03 aa00 	mla	sl, r3, r0, sl
 800ce66:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 800ce6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ce6e:	3c01      	subs	r4, #1
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	ea4f 7bea 	mov.w	fp, sl, asr #31
 800ce76:	4414      	add	r4, r2
 800ce78:	dd11      	ble.n	800ce9e <mktime+0x66>
 800ce7a:	07a9      	lsls	r1, r5, #30
 800ce7c:	d10f      	bne.n	800ce9e <mktime+0x66>
 800ce7e:	2264      	movs	r2, #100	; 0x64
 800ce80:	fb95 f3f2 	sdiv	r3, r5, r2
 800ce84:	fb02 5313 	mls	r3, r2, r3, r5
 800ce88:	b943      	cbnz	r3, 800ce9c <mktime+0x64>
 800ce8a:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 800ce8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ce92:	fb91 f3f2 	sdiv	r3, r1, r2
 800ce96:	fb02 1313 	mls	r3, r2, r3, r1
 800ce9a:	b903      	cbnz	r3, 800ce9e <mktime+0x66>
 800ce9c:	3401      	adds	r4, #1
 800ce9e:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 800cea2:	3310      	adds	r3, #16
 800cea4:	f644 6220 	movw	r2, #20000	; 0x4e20
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	61f4      	str	r4, [r6, #28]
 800ceac:	f200 8179 	bhi.w	800d1a2 <mktime+0x36a>
 800ceb0:	2d46      	cmp	r5, #70	; 0x46
 800ceb2:	f340 8084 	ble.w	800cfbe <mktime+0x186>
 800ceb6:	2346      	movs	r3, #70	; 0x46
 800ceb8:	f240 176d 	movw	r7, #365	; 0x16d
 800cebc:	2164      	movs	r1, #100	; 0x64
 800cebe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800cec2:	079a      	lsls	r2, r3, #30
 800cec4:	d175      	bne.n	800cfb2 <mktime+0x17a>
 800cec6:	fb93 f2f1 	sdiv	r2, r3, r1
 800ceca:	fb01 3212 	mls	r2, r1, r2, r3
 800cece:	2a00      	cmp	r2, #0
 800ced0:	d172      	bne.n	800cfb8 <mktime+0x180>
 800ced2:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800ced6:	fb9c f2f0 	sdiv	r2, ip, r0
 800ceda:	fb00 c212 	mls	r2, r0, r2, ip
 800cede:	2a00      	cmp	r2, #0
 800cee0:	bf14      	ite	ne
 800cee2:	463a      	movne	r2, r7
 800cee4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800cee8:	3301      	adds	r3, #1
 800ceea:	429d      	cmp	r5, r3
 800ceec:	4414      	add	r4, r2
 800ceee:	d1e8      	bne.n	800cec2 <mktime+0x8a>
 800cef0:	4b99      	ldr	r3, [pc, #612]	; (800d158 <mktime+0x320>)
 800cef2:	4363      	muls	r3, r4
 800cef4:	eb1a 0103 	adds.w	r1, sl, r3
 800cef8:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 800cefc:	e9cd 1200 	strd	r1, r2, [sp]
 800cf00:	f000 fcca 	bl	800d898 <__tz_lock>
 800cf04:	f000 fcca 	bl	800d89c <_tzset_unlocked>
 800cf08:	4b94      	ldr	r3, [pc, #592]	; (800d15c <mktime+0x324>)
 800cf0a:	f8d3 9000 	ldr.w	r9, [r3]
 800cf0e:	f1b9 0f00 	cmp.w	r9, #0
 800cf12:	d045      	beq.n	800cfa0 <mktime+0x168>
 800cf14:	f8d6 9020 	ldr.w	r9, [r6, #32]
 800cf18:	6970      	ldr	r0, [r6, #20]
 800cf1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf1e:	464f      	mov	r7, r9
 800cf20:	2f01      	cmp	r7, #1
 800cf22:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800cf26:	bfa8      	it	ge
 800cf28:	2701      	movge	r7, #1
 800cf2a:	4283      	cmp	r3, r0
 800cf2c:	f040 8089 	bne.w	800d042 <mktime+0x20a>
 800cf30:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 800cf34:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 800cf38:	460a      	mov	r2, r1
 800cf3a:	17cb      	asrs	r3, r1, #31
 800cf3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cf40:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 800cf44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cf48:	1a12      	subs	r2, r2, r0
 800cf4a:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 800cf4e:	4692      	mov	sl, r2
 800cf50:	469b      	mov	fp, r3
 800cf52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf56:	4552      	cmp	r2, sl
 800cf58:	eb73 0c0b 	sbcs.w	ip, r3, fp
 800cf5c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800cf60:	da76      	bge.n	800d050 <mktime+0x218>
 800cf62:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800cf66:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cf6a:	ebb2 0a0a 	subs.w	sl, r2, sl
 800cf6e:	eb63 0b0b 	sbc.w	fp, r3, fp
 800cf72:	f8d8 3000 	ldr.w	r3, [r8]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d079      	beq.n	800d06e <mktime+0x236>
 800cf7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf7e:	4552      	cmp	r2, sl
 800cf80:	eb73 030b 	sbcs.w	r3, r3, fp
 800cf84:	db07      	blt.n	800cf96 <mktime+0x15e>
 800cf86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf8a:	e9dd ab00 	ldrd	sl, fp, [sp]
 800cf8e:	4592      	cmp	sl, r2
 800cf90:	eb7b 0303 	sbcs.w	r3, fp, r3
 800cf94:	db71      	blt.n	800d07a <mktime+0x242>
 800cf96:	f1b9 0f00 	cmp.w	r9, #0
 800cf9a:	f04f 0900 	mov.w	r9, #0
 800cf9e:	da71      	bge.n	800d084 <mktime+0x24c>
 800cfa0:	e9dd ab00 	ldrd	sl, fp, [sp]
 800cfa4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800cfa8:	eb1a 0a03 	adds.w	sl, sl, r3
 800cfac:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800cfb0:	e0b4      	b.n	800d11c <mktime+0x2e4>
 800cfb2:	f240 126d 	movw	r2, #365	; 0x16d
 800cfb6:	e797      	b.n	800cee8 <mktime+0xb0>
 800cfb8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800cfbc:	e794      	b.n	800cee8 <mktime+0xb0>
 800cfbe:	d097      	beq.n	800cef0 <mktime+0xb8>
 800cfc0:	2345      	movs	r3, #69	; 0x45
 800cfc2:	f240 176d 	movw	r7, #365	; 0x16d
 800cfc6:	2164      	movs	r1, #100	; 0x64
 800cfc8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800cfcc:	e012      	b.n	800cff4 <mktime+0x1bc>
 800cfce:	bb62      	cbnz	r2, 800d02a <mktime+0x1f2>
 800cfd0:	fb93 f2f1 	sdiv	r2, r3, r1
 800cfd4:	fb01 3212 	mls	r2, r1, r2, r3
 800cfd8:	bb52      	cbnz	r2, 800d030 <mktime+0x1f8>
 800cfda:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800cfde:	fb9c f2f0 	sdiv	r2, ip, r0
 800cfe2:	fb00 c212 	mls	r2, r0, r2, ip
 800cfe6:	2a00      	cmp	r2, #0
 800cfe8:	bf14      	ite	ne
 800cfea:	463a      	movne	r2, r7
 800cfec:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800cff0:	1aa4      	subs	r4, r4, r2
 800cff2:	3b01      	subs	r3, #1
 800cff4:	429d      	cmp	r5, r3
 800cff6:	f003 0203 	and.w	r2, r3, #3
 800cffa:	dbe8      	blt.n	800cfce <mktime+0x196>
 800cffc:	b9da      	cbnz	r2, 800d036 <mktime+0x1fe>
 800cffe:	2264      	movs	r2, #100	; 0x64
 800d000:	fb95 f3f2 	sdiv	r3, r5, r2
 800d004:	fb02 5313 	mls	r3, r2, r3, r5
 800d008:	b9c3      	cbnz	r3, 800d03c <mktime+0x204>
 800d00a:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 800d00e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d012:	fb91 f3f2 	sdiv	r3, r1, r2
 800d016:	fb02 1313 	mls	r3, r2, r3, r1
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f240 136d 	movw	r3, #365	; 0x16d
 800d020:	bf08      	it	eq
 800d022:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800d026:	1ae4      	subs	r4, r4, r3
 800d028:	e762      	b.n	800cef0 <mktime+0xb8>
 800d02a:	f240 126d 	movw	r2, #365	; 0x16d
 800d02e:	e7df      	b.n	800cff0 <mktime+0x1b8>
 800d030:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800d034:	e7dc      	b.n	800cff0 <mktime+0x1b8>
 800d036:	f240 136d 	movw	r3, #365	; 0x16d
 800d03a:	e7f4      	b.n	800d026 <mktime+0x1ee>
 800d03c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800d040:	e7f1      	b.n	800d026 <mktime+0x1ee>
 800d042:	f000 fb81 	bl	800d748 <__tzcalc_limits>
 800d046:	2800      	cmp	r0, #0
 800d048:	f47f af72 	bne.w	800cf30 <mktime+0xf8>
 800d04c:	46b9      	mov	r9, r7
 800d04e:	e057      	b.n	800d100 <mktime+0x2c8>
 800d050:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d054:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d058:	ebb2 020a 	subs.w	r2, r2, sl
 800d05c:	eb63 030b 	sbc.w	r3, r3, fp
 800d060:	e9dd ab00 	ldrd	sl, fp, [sp]
 800d064:	4592      	cmp	sl, r2
 800d066:	eb7b 0303 	sbcs.w	r3, fp, r3
 800d06a:	dbef      	blt.n	800d04c <mktime+0x214>
 800d06c:	e779      	b.n	800cf62 <mktime+0x12a>
 800d06e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d072:	4552      	cmp	r2, sl
 800d074:	eb73 030b 	sbcs.w	r3, r3, fp
 800d078:	db85      	blt.n	800cf86 <mktime+0x14e>
 800d07a:	f1b9 0f00 	cmp.w	r9, #0
 800d07e:	db43      	blt.n	800d108 <mktime+0x2d0>
 800d080:	f04f 0901 	mov.w	r9, #1
 800d084:	ea87 0709 	eor.w	r7, r7, r9
 800d088:	2f01      	cmp	r7, #1
 800d08a:	d139      	bne.n	800d100 <mktime+0x2c8>
 800d08c:	1a40      	subs	r0, r0, r1
 800d08e:	f1b9 0f00 	cmp.w	r9, #0
 800d092:	d100      	bne.n	800d096 <mktime+0x25e>
 800d094:	4240      	negs	r0, r0
 800d096:	6833      	ldr	r3, [r6, #0]
 800d098:	4403      	add	r3, r0
 800d09a:	6033      	str	r3, [r6, #0]
 800d09c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0a0:	1812      	adds	r2, r2, r0
 800d0a2:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 800d0a6:	e9cd 2300 	strd	r2, r3, [sp]
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	68f2      	ldr	r2, [r6, #12]
 800d0ae:	9202      	str	r2, [sp, #8]
 800d0b0:	f7ff fde8 	bl	800cc84 <validate_structure>
 800d0b4:	68f3      	ldr	r3, [r6, #12]
 800d0b6:	9a02      	ldr	r2, [sp, #8]
 800d0b8:	1a9b      	subs	r3, r3, r2
 800d0ba:	d021      	beq.n	800d100 <mktime+0x2c8>
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	dc40      	bgt.n	800d142 <mktime+0x30a>
 800d0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c4:	bfa8      	it	ge
 800d0c6:	461f      	movge	r7, r3
 800d0c8:	69f3      	ldr	r3, [r6, #28]
 800d0ca:	443c      	add	r4, r7
 800d0cc:	18ff      	adds	r7, r7, r3
 800d0ce:	d547      	bpl.n	800d160 <mktime+0x328>
 800d0d0:	1e6a      	subs	r2, r5, #1
 800d0d2:	0791      	lsls	r1, r2, #30
 800d0d4:	d138      	bne.n	800d148 <mktime+0x310>
 800d0d6:	2164      	movs	r1, #100	; 0x64
 800d0d8:	fb92 f3f1 	sdiv	r3, r2, r1
 800d0dc:	fb01 2313 	mls	r3, r1, r3, r2
 800d0e0:	bbab      	cbnz	r3, 800d14e <mktime+0x316>
 800d0e2:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 800d0e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d0ea:	fb95 f3f2 	sdiv	r3, r5, r2
 800d0ee:	fb02 5513 	mls	r5, r2, r3, r5
 800d0f2:	2d00      	cmp	r5, #0
 800d0f4:	f240 136d 	movw	r3, #365	; 0x16d
 800d0f8:	bf18      	it	ne
 800d0fa:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800d0fe:	61f3      	str	r3, [r6, #28]
 800d100:	f1b9 0f01 	cmp.w	r9, #1
 800d104:	f47f af4c 	bne.w	800cfa0 <mktime+0x168>
 800d108:	e9dd ab00 	ldrd	sl, fp, [sp]
 800d10c:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 800d110:	eb1a 0a03 	adds.w	sl, sl, r3
 800d114:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800d118:	f04f 0901 	mov.w	r9, #1
 800d11c:	f000 fbbd 	bl	800d89a <__tz_unlock>
 800d120:	3404      	adds	r4, #4
 800d122:	2307      	movs	r3, #7
 800d124:	fb94 f3f3 	sdiv	r3, r4, r3
 800d128:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d12c:	1ae4      	subs	r4, r4, r3
 800d12e:	bf48      	it	mi
 800d130:	3407      	addmi	r4, #7
 800d132:	f8c6 9020 	str.w	r9, [r6, #32]
 800d136:	61b4      	str	r4, [r6, #24]
 800d138:	4650      	mov	r0, sl
 800d13a:	4659      	mov	r1, fp
 800d13c:	b009      	add	sp, #36	; 0x24
 800d13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d142:	f04f 37ff 	mov.w	r7, #4294967295
 800d146:	e7bf      	b.n	800d0c8 <mktime+0x290>
 800d148:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800d14c:	e7d7      	b.n	800d0fe <mktime+0x2c6>
 800d14e:	f240 136d 	movw	r3, #365	; 0x16d
 800d152:	e7d4      	b.n	800d0fe <mktime+0x2c6>
 800d154:	0800feb8 	.word	0x0800feb8
 800d158:	00015180 	.word	0x00015180
 800d15c:	200003d8 	.word	0x200003d8
 800d160:	07ab      	lsls	r3, r5, #30
 800d162:	d118      	bne.n	800d196 <mktime+0x35e>
 800d164:	2264      	movs	r2, #100	; 0x64
 800d166:	fb95 f3f2 	sdiv	r3, r5, r2
 800d16a:	fb02 5313 	mls	r3, r2, r3, r5
 800d16e:	b9ab      	cbnz	r3, 800d19c <mktime+0x364>
 800d170:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 800d174:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d178:	fb95 f3f2 	sdiv	r3, r5, r2
 800d17c:	fb02 5513 	mls	r5, r2, r3, r5
 800d180:	2d00      	cmp	r5, #0
 800d182:	f240 136d 	movw	r3, #365	; 0x16d
 800d186:	bf08      	it	eq
 800d188:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800d18c:	429f      	cmp	r7, r3
 800d18e:	bfa8      	it	ge
 800d190:	1aff      	subge	r7, r7, r3
 800d192:	61f7      	str	r7, [r6, #28]
 800d194:	e7b4      	b.n	800d100 <mktime+0x2c8>
 800d196:	f240 136d 	movw	r3, #365	; 0x16d
 800d19a:	e7f7      	b.n	800d18c <mktime+0x354>
 800d19c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800d1a0:	e7f4      	b.n	800d18c <mktime+0x354>
 800d1a2:	f04f 3aff 	mov.w	sl, #4294967295
 800d1a6:	f04f 3bff 	mov.w	fp, #4294967295
 800d1aa:	e7c5      	b.n	800d138 <mktime+0x300>

0800d1ac <_free_r>:
 800d1ac:	b538      	push	{r3, r4, r5, lr}
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	2900      	cmp	r1, #0
 800d1b2:	d045      	beq.n	800d240 <_free_r+0x94>
 800d1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1b8:	1f0c      	subs	r4, r1, #4
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	bfb8      	it	lt
 800d1be:	18e4      	addlt	r4, r4, r3
 800d1c0:	f001 f842 	bl	800e248 <__malloc_lock>
 800d1c4:	4a1f      	ldr	r2, [pc, #124]	; (800d244 <_free_r+0x98>)
 800d1c6:	6813      	ldr	r3, [r2, #0]
 800d1c8:	4610      	mov	r0, r2
 800d1ca:	b933      	cbnz	r3, 800d1da <_free_r+0x2e>
 800d1cc:	6063      	str	r3, [r4, #4]
 800d1ce:	6014      	str	r4, [r2, #0]
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1d6:	f001 b838 	b.w	800e24a <__malloc_unlock>
 800d1da:	42a3      	cmp	r3, r4
 800d1dc:	d90c      	bls.n	800d1f8 <_free_r+0x4c>
 800d1de:	6821      	ldr	r1, [r4, #0]
 800d1e0:	1862      	adds	r2, r4, r1
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	bf04      	itt	eq
 800d1e6:	681a      	ldreq	r2, [r3, #0]
 800d1e8:	685b      	ldreq	r3, [r3, #4]
 800d1ea:	6063      	str	r3, [r4, #4]
 800d1ec:	bf04      	itt	eq
 800d1ee:	1852      	addeq	r2, r2, r1
 800d1f0:	6022      	streq	r2, [r4, #0]
 800d1f2:	6004      	str	r4, [r0, #0]
 800d1f4:	e7ec      	b.n	800d1d0 <_free_r+0x24>
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	685a      	ldr	r2, [r3, #4]
 800d1fa:	b10a      	cbz	r2, 800d200 <_free_r+0x54>
 800d1fc:	42a2      	cmp	r2, r4
 800d1fe:	d9fa      	bls.n	800d1f6 <_free_r+0x4a>
 800d200:	6819      	ldr	r1, [r3, #0]
 800d202:	1858      	adds	r0, r3, r1
 800d204:	42a0      	cmp	r0, r4
 800d206:	d10b      	bne.n	800d220 <_free_r+0x74>
 800d208:	6820      	ldr	r0, [r4, #0]
 800d20a:	4401      	add	r1, r0
 800d20c:	1858      	adds	r0, r3, r1
 800d20e:	4282      	cmp	r2, r0
 800d210:	6019      	str	r1, [r3, #0]
 800d212:	d1dd      	bne.n	800d1d0 <_free_r+0x24>
 800d214:	6810      	ldr	r0, [r2, #0]
 800d216:	6852      	ldr	r2, [r2, #4]
 800d218:	605a      	str	r2, [r3, #4]
 800d21a:	4401      	add	r1, r0
 800d21c:	6019      	str	r1, [r3, #0]
 800d21e:	e7d7      	b.n	800d1d0 <_free_r+0x24>
 800d220:	d902      	bls.n	800d228 <_free_r+0x7c>
 800d222:	230c      	movs	r3, #12
 800d224:	602b      	str	r3, [r5, #0]
 800d226:	e7d3      	b.n	800d1d0 <_free_r+0x24>
 800d228:	6820      	ldr	r0, [r4, #0]
 800d22a:	1821      	adds	r1, r4, r0
 800d22c:	428a      	cmp	r2, r1
 800d22e:	bf04      	itt	eq
 800d230:	6811      	ldreq	r1, [r2, #0]
 800d232:	6852      	ldreq	r2, [r2, #4]
 800d234:	6062      	str	r2, [r4, #4]
 800d236:	bf04      	itt	eq
 800d238:	1809      	addeq	r1, r1, r0
 800d23a:	6021      	streq	r1, [r4, #0]
 800d23c:	605c      	str	r4, [r3, #4]
 800d23e:	e7c7      	b.n	800d1d0 <_free_r+0x24>
 800d240:	bd38      	pop	{r3, r4, r5, pc}
 800d242:	bf00      	nop
 800d244:	200003b4 	.word	0x200003b4

0800d248 <_malloc_r>:
 800d248:	b570      	push	{r4, r5, r6, lr}
 800d24a:	1ccd      	adds	r5, r1, #3
 800d24c:	f025 0503 	bic.w	r5, r5, #3
 800d250:	3508      	adds	r5, #8
 800d252:	2d0c      	cmp	r5, #12
 800d254:	bf38      	it	cc
 800d256:	250c      	movcc	r5, #12
 800d258:	2d00      	cmp	r5, #0
 800d25a:	4606      	mov	r6, r0
 800d25c:	db01      	blt.n	800d262 <_malloc_r+0x1a>
 800d25e:	42a9      	cmp	r1, r5
 800d260:	d903      	bls.n	800d26a <_malloc_r+0x22>
 800d262:	230c      	movs	r3, #12
 800d264:	6033      	str	r3, [r6, #0]
 800d266:	2000      	movs	r0, #0
 800d268:	bd70      	pop	{r4, r5, r6, pc}
 800d26a:	f000 ffed 	bl	800e248 <__malloc_lock>
 800d26e:	4a21      	ldr	r2, [pc, #132]	; (800d2f4 <_malloc_r+0xac>)
 800d270:	6814      	ldr	r4, [r2, #0]
 800d272:	4621      	mov	r1, r4
 800d274:	b991      	cbnz	r1, 800d29c <_malloc_r+0x54>
 800d276:	4c20      	ldr	r4, [pc, #128]	; (800d2f8 <_malloc_r+0xb0>)
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	b91b      	cbnz	r3, 800d284 <_malloc_r+0x3c>
 800d27c:	4630      	mov	r0, r6
 800d27e:	f000 f8cd 	bl	800d41c <_sbrk_r>
 800d282:	6020      	str	r0, [r4, #0]
 800d284:	4629      	mov	r1, r5
 800d286:	4630      	mov	r0, r6
 800d288:	f000 f8c8 	bl	800d41c <_sbrk_r>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d124      	bne.n	800d2da <_malloc_r+0x92>
 800d290:	230c      	movs	r3, #12
 800d292:	6033      	str	r3, [r6, #0]
 800d294:	4630      	mov	r0, r6
 800d296:	f000 ffd8 	bl	800e24a <__malloc_unlock>
 800d29a:	e7e4      	b.n	800d266 <_malloc_r+0x1e>
 800d29c:	680b      	ldr	r3, [r1, #0]
 800d29e:	1b5b      	subs	r3, r3, r5
 800d2a0:	d418      	bmi.n	800d2d4 <_malloc_r+0x8c>
 800d2a2:	2b0b      	cmp	r3, #11
 800d2a4:	d90f      	bls.n	800d2c6 <_malloc_r+0x7e>
 800d2a6:	600b      	str	r3, [r1, #0]
 800d2a8:	50cd      	str	r5, [r1, r3]
 800d2aa:	18cc      	adds	r4, r1, r3
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f000 ffcc 	bl	800e24a <__malloc_unlock>
 800d2b2:	f104 000b 	add.w	r0, r4, #11
 800d2b6:	1d23      	adds	r3, r4, #4
 800d2b8:	f020 0007 	bic.w	r0, r0, #7
 800d2bc:	1ac3      	subs	r3, r0, r3
 800d2be:	d0d3      	beq.n	800d268 <_malloc_r+0x20>
 800d2c0:	425a      	negs	r2, r3
 800d2c2:	50e2      	str	r2, [r4, r3]
 800d2c4:	e7d0      	b.n	800d268 <_malloc_r+0x20>
 800d2c6:	428c      	cmp	r4, r1
 800d2c8:	684b      	ldr	r3, [r1, #4]
 800d2ca:	bf16      	itet	ne
 800d2cc:	6063      	strne	r3, [r4, #4]
 800d2ce:	6013      	streq	r3, [r2, #0]
 800d2d0:	460c      	movne	r4, r1
 800d2d2:	e7eb      	b.n	800d2ac <_malloc_r+0x64>
 800d2d4:	460c      	mov	r4, r1
 800d2d6:	6849      	ldr	r1, [r1, #4]
 800d2d8:	e7cc      	b.n	800d274 <_malloc_r+0x2c>
 800d2da:	1cc4      	adds	r4, r0, #3
 800d2dc:	f024 0403 	bic.w	r4, r4, #3
 800d2e0:	42a0      	cmp	r0, r4
 800d2e2:	d005      	beq.n	800d2f0 <_malloc_r+0xa8>
 800d2e4:	1a21      	subs	r1, r4, r0
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	f000 f898 	bl	800d41c <_sbrk_r>
 800d2ec:	3001      	adds	r0, #1
 800d2ee:	d0cf      	beq.n	800d290 <_malloc_r+0x48>
 800d2f0:	6025      	str	r5, [r4, #0]
 800d2f2:	e7db      	b.n	800d2ac <_malloc_r+0x64>
 800d2f4:	200003b4 	.word	0x200003b4
 800d2f8:	200003b8 	.word	0x200003b8

0800d2fc <iprintf>:
 800d2fc:	b40f      	push	{r0, r1, r2, r3}
 800d2fe:	4b0a      	ldr	r3, [pc, #40]	; (800d328 <iprintf+0x2c>)
 800d300:	b513      	push	{r0, r1, r4, lr}
 800d302:	681c      	ldr	r4, [r3, #0]
 800d304:	b124      	cbz	r4, 800d310 <iprintf+0x14>
 800d306:	69a3      	ldr	r3, [r4, #24]
 800d308:	b913      	cbnz	r3, 800d310 <iprintf+0x14>
 800d30a:	4620      	mov	r0, r4
 800d30c:	f000 fe30 	bl	800df70 <__sinit>
 800d310:	ab05      	add	r3, sp, #20
 800d312:	9a04      	ldr	r2, [sp, #16]
 800d314:	68a1      	ldr	r1, [r4, #8]
 800d316:	9301      	str	r3, [sp, #4]
 800d318:	4620      	mov	r0, r4
 800d31a:	f001 fabd 	bl	800e898 <_vfiprintf_r>
 800d31e:	b002      	add	sp, #8
 800d320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d324:	b004      	add	sp, #16
 800d326:	4770      	bx	lr
 800d328:	2000002c 	.word	0x2000002c

0800d32c <putchar>:
 800d32c:	b538      	push	{r3, r4, r5, lr}
 800d32e:	4b08      	ldr	r3, [pc, #32]	; (800d350 <putchar+0x24>)
 800d330:	681c      	ldr	r4, [r3, #0]
 800d332:	4605      	mov	r5, r0
 800d334:	b124      	cbz	r4, 800d340 <putchar+0x14>
 800d336:	69a3      	ldr	r3, [r4, #24]
 800d338:	b913      	cbnz	r3, 800d340 <putchar+0x14>
 800d33a:	4620      	mov	r0, r4
 800d33c:	f000 fe18 	bl	800df70 <__sinit>
 800d340:	68a2      	ldr	r2, [r4, #8]
 800d342:	4629      	mov	r1, r5
 800d344:	4620      	mov	r0, r4
 800d346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d34a:	f001 be9b 	b.w	800f084 <_putc_r>
 800d34e:	bf00      	nop
 800d350:	2000002c 	.word	0x2000002c

0800d354 <_puts_r>:
 800d354:	b570      	push	{r4, r5, r6, lr}
 800d356:	460e      	mov	r6, r1
 800d358:	4605      	mov	r5, r0
 800d35a:	b118      	cbz	r0, 800d364 <_puts_r+0x10>
 800d35c:	6983      	ldr	r3, [r0, #24]
 800d35e:	b90b      	cbnz	r3, 800d364 <_puts_r+0x10>
 800d360:	f000 fe06 	bl	800df70 <__sinit>
 800d364:	69ab      	ldr	r3, [r5, #24]
 800d366:	68ac      	ldr	r4, [r5, #8]
 800d368:	b913      	cbnz	r3, 800d370 <_puts_r+0x1c>
 800d36a:	4628      	mov	r0, r5
 800d36c:	f000 fe00 	bl	800df70 <__sinit>
 800d370:	4b23      	ldr	r3, [pc, #140]	; (800d400 <_puts_r+0xac>)
 800d372:	429c      	cmp	r4, r3
 800d374:	d117      	bne.n	800d3a6 <_puts_r+0x52>
 800d376:	686c      	ldr	r4, [r5, #4]
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	071b      	lsls	r3, r3, #28
 800d37c:	d51d      	bpl.n	800d3ba <_puts_r+0x66>
 800d37e:	6923      	ldr	r3, [r4, #16]
 800d380:	b1db      	cbz	r3, 800d3ba <_puts_r+0x66>
 800d382:	3e01      	subs	r6, #1
 800d384:	68a3      	ldr	r3, [r4, #8]
 800d386:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d38a:	3b01      	subs	r3, #1
 800d38c:	60a3      	str	r3, [r4, #8]
 800d38e:	b9e9      	cbnz	r1, 800d3cc <_puts_r+0x78>
 800d390:	2b00      	cmp	r3, #0
 800d392:	da2e      	bge.n	800d3f2 <_puts_r+0x9e>
 800d394:	4622      	mov	r2, r4
 800d396:	210a      	movs	r1, #10
 800d398:	4628      	mov	r0, r5
 800d39a:	f000 fc03 	bl	800dba4 <__swbuf_r>
 800d39e:	3001      	adds	r0, #1
 800d3a0:	d011      	beq.n	800d3c6 <_puts_r+0x72>
 800d3a2:	200a      	movs	r0, #10
 800d3a4:	e011      	b.n	800d3ca <_puts_r+0x76>
 800d3a6:	4b17      	ldr	r3, [pc, #92]	; (800d404 <_puts_r+0xb0>)
 800d3a8:	429c      	cmp	r4, r3
 800d3aa:	d101      	bne.n	800d3b0 <_puts_r+0x5c>
 800d3ac:	68ac      	ldr	r4, [r5, #8]
 800d3ae:	e7e3      	b.n	800d378 <_puts_r+0x24>
 800d3b0:	4b15      	ldr	r3, [pc, #84]	; (800d408 <_puts_r+0xb4>)
 800d3b2:	429c      	cmp	r4, r3
 800d3b4:	bf08      	it	eq
 800d3b6:	68ec      	ldreq	r4, [r5, #12]
 800d3b8:	e7de      	b.n	800d378 <_puts_r+0x24>
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4628      	mov	r0, r5
 800d3be:	f000 fc55 	bl	800dc6c <__swsetup_r>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d0dd      	beq.n	800d382 <_puts_r+0x2e>
 800d3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ca:	bd70      	pop	{r4, r5, r6, pc}
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	da04      	bge.n	800d3da <_puts_r+0x86>
 800d3d0:	69a2      	ldr	r2, [r4, #24]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	dc06      	bgt.n	800d3e4 <_puts_r+0x90>
 800d3d6:	290a      	cmp	r1, #10
 800d3d8:	d004      	beq.n	800d3e4 <_puts_r+0x90>
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	1c5a      	adds	r2, r3, #1
 800d3de:	6022      	str	r2, [r4, #0]
 800d3e0:	7019      	strb	r1, [r3, #0]
 800d3e2:	e7cf      	b.n	800d384 <_puts_r+0x30>
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	f000 fbdc 	bl	800dba4 <__swbuf_r>
 800d3ec:	3001      	adds	r0, #1
 800d3ee:	d1c9      	bne.n	800d384 <_puts_r+0x30>
 800d3f0:	e7e9      	b.n	800d3c6 <_puts_r+0x72>
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	200a      	movs	r0, #10
 800d3f6:	1c5a      	adds	r2, r3, #1
 800d3f8:	6022      	str	r2, [r4, #0]
 800d3fa:	7018      	strb	r0, [r3, #0]
 800d3fc:	e7e5      	b.n	800d3ca <_puts_r+0x76>
 800d3fe:	bf00      	nop
 800d400:	0800ff44 	.word	0x0800ff44
 800d404:	0800ff64 	.word	0x0800ff64
 800d408:	0800ff24 	.word	0x0800ff24

0800d40c <puts>:
 800d40c:	4b02      	ldr	r3, [pc, #8]	; (800d418 <puts+0xc>)
 800d40e:	4601      	mov	r1, r0
 800d410:	6818      	ldr	r0, [r3, #0]
 800d412:	f7ff bf9f 	b.w	800d354 <_puts_r>
 800d416:	bf00      	nop
 800d418:	2000002c 	.word	0x2000002c

0800d41c <_sbrk_r>:
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4c06      	ldr	r4, [pc, #24]	; (800d438 <_sbrk_r+0x1c>)
 800d420:	2300      	movs	r3, #0
 800d422:	4605      	mov	r5, r0
 800d424:	4608      	mov	r0, r1
 800d426:	6023      	str	r3, [r4, #0]
 800d428:	f002 f836 	bl	800f498 <_sbrk>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_sbrk_r+0x1a>
 800d430:	6823      	ldr	r3, [r4, #0]
 800d432:	b103      	cbz	r3, 800d436 <_sbrk_r+0x1a>
 800d434:	602b      	str	r3, [r5, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	2000c654 	.word	0x2000c654

0800d43c <siprintf>:
 800d43c:	b40e      	push	{r1, r2, r3}
 800d43e:	b500      	push	{lr}
 800d440:	b09c      	sub	sp, #112	; 0x70
 800d442:	ab1d      	add	r3, sp, #116	; 0x74
 800d444:	9002      	str	r0, [sp, #8]
 800d446:	9006      	str	r0, [sp, #24]
 800d448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d44c:	4809      	ldr	r0, [pc, #36]	; (800d474 <siprintf+0x38>)
 800d44e:	9107      	str	r1, [sp, #28]
 800d450:	9104      	str	r1, [sp, #16]
 800d452:	4909      	ldr	r1, [pc, #36]	; (800d478 <siprintf+0x3c>)
 800d454:	f853 2b04 	ldr.w	r2, [r3], #4
 800d458:	9105      	str	r1, [sp, #20]
 800d45a:	6800      	ldr	r0, [r0, #0]
 800d45c:	9301      	str	r3, [sp, #4]
 800d45e:	a902      	add	r1, sp, #8
 800d460:	f000 ff4e 	bl	800e300 <_svfiprintf_r>
 800d464:	9b02      	ldr	r3, [sp, #8]
 800d466:	2200      	movs	r2, #0
 800d468:	701a      	strb	r2, [r3, #0]
 800d46a:	b01c      	add	sp, #112	; 0x70
 800d46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d470:	b003      	add	sp, #12
 800d472:	4770      	bx	lr
 800d474:	2000002c 	.word	0x2000002c
 800d478:	ffff0208 	.word	0xffff0208

0800d47c <siscanf>:
 800d47c:	b40e      	push	{r1, r2, r3}
 800d47e:	b530      	push	{r4, r5, lr}
 800d480:	b09c      	sub	sp, #112	; 0x70
 800d482:	ac1f      	add	r4, sp, #124	; 0x7c
 800d484:	f44f 7201 	mov.w	r2, #516	; 0x204
 800d488:	f854 5b04 	ldr.w	r5, [r4], #4
 800d48c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d490:	9002      	str	r0, [sp, #8]
 800d492:	9006      	str	r0, [sp, #24]
 800d494:	f7f2 feae 	bl	80001f4 <strlen>
 800d498:	4b0b      	ldr	r3, [pc, #44]	; (800d4c8 <siscanf+0x4c>)
 800d49a:	9003      	str	r0, [sp, #12]
 800d49c:	9007      	str	r0, [sp, #28]
 800d49e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4a0:	480a      	ldr	r0, [pc, #40]	; (800d4cc <siscanf+0x50>)
 800d4a2:	9401      	str	r4, [sp, #4]
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4a8:	9314      	str	r3, [sp, #80]	; 0x50
 800d4aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	4623      	mov	r3, r4
 800d4b6:	a902      	add	r1, sp, #8
 800d4b8:	6800      	ldr	r0, [r0, #0]
 800d4ba:	f001 f873 	bl	800e5a4 <__ssvfiscanf_r>
 800d4be:	b01c      	add	sp, #112	; 0x70
 800d4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4c4:	b003      	add	sp, #12
 800d4c6:	4770      	bx	lr
 800d4c8:	0800d4f3 	.word	0x0800d4f3
 800d4cc:	2000002c 	.word	0x2000002c

0800d4d0 <__sread>:
 800d4d0:	b510      	push	{r4, lr}
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4d8:	f001 fe0a 	bl	800f0f0 <_read_r>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	bfab      	itete	ge
 800d4e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4e2:	89a3      	ldrhlt	r3, [r4, #12]
 800d4e4:	181b      	addge	r3, r3, r0
 800d4e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4ea:	bfac      	ite	ge
 800d4ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4ee:	81a3      	strhlt	r3, [r4, #12]
 800d4f0:	bd10      	pop	{r4, pc}

0800d4f2 <__seofread>:
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	4770      	bx	lr

0800d4f6 <__swrite>:
 800d4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fa:	461f      	mov	r7, r3
 800d4fc:	898b      	ldrh	r3, [r1, #12]
 800d4fe:	05db      	lsls	r3, r3, #23
 800d500:	4605      	mov	r5, r0
 800d502:	460c      	mov	r4, r1
 800d504:	4616      	mov	r6, r2
 800d506:	d505      	bpl.n	800d514 <__swrite+0x1e>
 800d508:	2302      	movs	r3, #2
 800d50a:	2200      	movs	r2, #0
 800d50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d510:	f000 fe12 	bl	800e138 <_lseek_r>
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d51a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d51e:	81a3      	strh	r3, [r4, #12]
 800d520:	4632      	mov	r2, r6
 800d522:	463b      	mov	r3, r7
 800d524:	4628      	mov	r0, r5
 800d526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d52a:	f000 bb8d 	b.w	800dc48 <_write_r>

0800d52e <__sseek>:
 800d52e:	b510      	push	{r4, lr}
 800d530:	460c      	mov	r4, r1
 800d532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d536:	f000 fdff 	bl	800e138 <_lseek_r>
 800d53a:	1c43      	adds	r3, r0, #1
 800d53c:	89a3      	ldrh	r3, [r4, #12]
 800d53e:	bf15      	itete	ne
 800d540:	6560      	strne	r0, [r4, #84]	; 0x54
 800d542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d54a:	81a3      	strheq	r3, [r4, #12]
 800d54c:	bf18      	it	ne
 800d54e:	81a3      	strhne	r3, [r4, #12]
 800d550:	bd10      	pop	{r4, pc}

0800d552 <__sclose>:
 800d552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d556:	f000 bbf7 	b.w	800dd48 <_close_r>

0800d55a <strcat>:
 800d55a:	b510      	push	{r4, lr}
 800d55c:	4603      	mov	r3, r0
 800d55e:	781a      	ldrb	r2, [r3, #0]
 800d560:	1c5c      	adds	r4, r3, #1
 800d562:	b93a      	cbnz	r2, 800d574 <strcat+0x1a>
 800d564:	3b01      	subs	r3, #1
 800d566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d56a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d56e:	2a00      	cmp	r2, #0
 800d570:	d1f9      	bne.n	800d566 <strcat+0xc>
 800d572:	bd10      	pop	{r4, pc}
 800d574:	4623      	mov	r3, r4
 800d576:	e7f2      	b.n	800d55e <strcat+0x4>

0800d578 <strchr>:
 800d578:	b2c9      	uxtb	r1, r1
 800d57a:	4603      	mov	r3, r0
 800d57c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d580:	b11a      	cbz	r2, 800d58a <strchr+0x12>
 800d582:	428a      	cmp	r2, r1
 800d584:	d1f9      	bne.n	800d57a <strchr+0x2>
 800d586:	4618      	mov	r0, r3
 800d588:	4770      	bx	lr
 800d58a:	2900      	cmp	r1, #0
 800d58c:	bf18      	it	ne
 800d58e:	2300      	movne	r3, #0
 800d590:	e7f9      	b.n	800d586 <strchr+0xe>

0800d592 <strcpy>:
 800d592:	4603      	mov	r3, r0
 800d594:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d598:	f803 2b01 	strb.w	r2, [r3], #1
 800d59c:	2a00      	cmp	r2, #0
 800d59e:	d1f9      	bne.n	800d594 <strcpy+0x2>
 800d5a0:	4770      	bx	lr

0800d5a2 <strncpy>:
 800d5a2:	b570      	push	{r4, r5, r6, lr}
 800d5a4:	3901      	subs	r1, #1
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	b902      	cbnz	r2, 800d5ac <strncpy+0xa>
 800d5aa:	bd70      	pop	{r4, r5, r6, pc}
 800d5ac:	4623      	mov	r3, r4
 800d5ae:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800d5b2:	f803 5b01 	strb.w	r5, [r3], #1
 800d5b6:	1e56      	subs	r6, r2, #1
 800d5b8:	b92d      	cbnz	r5, 800d5c6 <strncpy+0x24>
 800d5ba:	4414      	add	r4, r2
 800d5bc:	42a3      	cmp	r3, r4
 800d5be:	d0f4      	beq.n	800d5aa <strncpy+0x8>
 800d5c0:	f803 5b01 	strb.w	r5, [r3], #1
 800d5c4:	e7fa      	b.n	800d5bc <strncpy+0x1a>
 800d5c6:	461c      	mov	r4, r3
 800d5c8:	4632      	mov	r2, r6
 800d5ca:	e7ed      	b.n	800d5a8 <strncpy+0x6>

0800d5cc <strstr>:
 800d5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ce:	7803      	ldrb	r3, [r0, #0]
 800d5d0:	b17b      	cbz	r3, 800d5f2 <strstr+0x26>
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	7823      	ldrb	r3, [r4, #0]
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	1c66      	adds	r6, r4, #1
 800d5da:	b17b      	cbz	r3, 800d5fc <strstr+0x30>
 800d5dc:	1e4a      	subs	r2, r1, #1
 800d5de:	1e63      	subs	r3, r4, #1
 800d5e0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800d5e4:	b14d      	cbz	r5, 800d5fa <strstr+0x2e>
 800d5e6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800d5ea:	42af      	cmp	r7, r5
 800d5ec:	4634      	mov	r4, r6
 800d5ee:	d0f7      	beq.n	800d5e0 <strstr+0x14>
 800d5f0:	e7f0      	b.n	800d5d4 <strstr+0x8>
 800d5f2:	780b      	ldrb	r3, [r1, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	bf18      	it	ne
 800d5f8:	2000      	movne	r0, #0
 800d5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	e7fc      	b.n	800d5fa <strstr+0x2e>

0800d600 <_strtol_l.isra.0>:
 800d600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d604:	4680      	mov	r8, r0
 800d606:	4689      	mov	r9, r1
 800d608:	4692      	mov	sl, r2
 800d60a:	461e      	mov	r6, r3
 800d60c:	460f      	mov	r7, r1
 800d60e:	463d      	mov	r5, r7
 800d610:	9808      	ldr	r0, [sp, #32]
 800d612:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d616:	f000 fd7d 	bl	800e114 <__locale_ctype_ptr_l>
 800d61a:	4420      	add	r0, r4
 800d61c:	7843      	ldrb	r3, [r0, #1]
 800d61e:	f013 0308 	ands.w	r3, r3, #8
 800d622:	d132      	bne.n	800d68a <_strtol_l.isra.0+0x8a>
 800d624:	2c2d      	cmp	r4, #45	; 0x2d
 800d626:	d132      	bne.n	800d68e <_strtol_l.isra.0+0x8e>
 800d628:	787c      	ldrb	r4, [r7, #1]
 800d62a:	1cbd      	adds	r5, r7, #2
 800d62c:	2201      	movs	r2, #1
 800d62e:	2e00      	cmp	r6, #0
 800d630:	d05d      	beq.n	800d6ee <_strtol_l.isra.0+0xee>
 800d632:	2e10      	cmp	r6, #16
 800d634:	d109      	bne.n	800d64a <_strtol_l.isra.0+0x4a>
 800d636:	2c30      	cmp	r4, #48	; 0x30
 800d638:	d107      	bne.n	800d64a <_strtol_l.isra.0+0x4a>
 800d63a:	782b      	ldrb	r3, [r5, #0]
 800d63c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d640:	2b58      	cmp	r3, #88	; 0x58
 800d642:	d14f      	bne.n	800d6e4 <_strtol_l.isra.0+0xe4>
 800d644:	786c      	ldrb	r4, [r5, #1]
 800d646:	2610      	movs	r6, #16
 800d648:	3502      	adds	r5, #2
 800d64a:	2a00      	cmp	r2, #0
 800d64c:	bf14      	ite	ne
 800d64e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d652:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d656:	2700      	movs	r7, #0
 800d658:	fbb1 fcf6 	udiv	ip, r1, r6
 800d65c:	4638      	mov	r0, r7
 800d65e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800d662:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d666:	2b09      	cmp	r3, #9
 800d668:	d817      	bhi.n	800d69a <_strtol_l.isra.0+0x9a>
 800d66a:	461c      	mov	r4, r3
 800d66c:	42a6      	cmp	r6, r4
 800d66e:	dd23      	ble.n	800d6b8 <_strtol_l.isra.0+0xb8>
 800d670:	1c7b      	adds	r3, r7, #1
 800d672:	d007      	beq.n	800d684 <_strtol_l.isra.0+0x84>
 800d674:	4584      	cmp	ip, r0
 800d676:	d31c      	bcc.n	800d6b2 <_strtol_l.isra.0+0xb2>
 800d678:	d101      	bne.n	800d67e <_strtol_l.isra.0+0x7e>
 800d67a:	45a6      	cmp	lr, r4
 800d67c:	db19      	blt.n	800d6b2 <_strtol_l.isra.0+0xb2>
 800d67e:	fb00 4006 	mla	r0, r0, r6, r4
 800d682:	2701      	movs	r7, #1
 800d684:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d688:	e7eb      	b.n	800d662 <_strtol_l.isra.0+0x62>
 800d68a:	462f      	mov	r7, r5
 800d68c:	e7bf      	b.n	800d60e <_strtol_l.isra.0+0xe>
 800d68e:	2c2b      	cmp	r4, #43	; 0x2b
 800d690:	bf04      	itt	eq
 800d692:	1cbd      	addeq	r5, r7, #2
 800d694:	787c      	ldrbeq	r4, [r7, #1]
 800d696:	461a      	mov	r2, r3
 800d698:	e7c9      	b.n	800d62e <_strtol_l.isra.0+0x2e>
 800d69a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d69e:	2b19      	cmp	r3, #25
 800d6a0:	d801      	bhi.n	800d6a6 <_strtol_l.isra.0+0xa6>
 800d6a2:	3c37      	subs	r4, #55	; 0x37
 800d6a4:	e7e2      	b.n	800d66c <_strtol_l.isra.0+0x6c>
 800d6a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d6aa:	2b19      	cmp	r3, #25
 800d6ac:	d804      	bhi.n	800d6b8 <_strtol_l.isra.0+0xb8>
 800d6ae:	3c57      	subs	r4, #87	; 0x57
 800d6b0:	e7dc      	b.n	800d66c <_strtol_l.isra.0+0x6c>
 800d6b2:	f04f 37ff 	mov.w	r7, #4294967295
 800d6b6:	e7e5      	b.n	800d684 <_strtol_l.isra.0+0x84>
 800d6b8:	1c7b      	adds	r3, r7, #1
 800d6ba:	d108      	bne.n	800d6ce <_strtol_l.isra.0+0xce>
 800d6bc:	2322      	movs	r3, #34	; 0x22
 800d6be:	f8c8 3000 	str.w	r3, [r8]
 800d6c2:	4608      	mov	r0, r1
 800d6c4:	f1ba 0f00 	cmp.w	sl, #0
 800d6c8:	d107      	bne.n	800d6da <_strtol_l.isra.0+0xda>
 800d6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ce:	b102      	cbz	r2, 800d6d2 <_strtol_l.isra.0+0xd2>
 800d6d0:	4240      	negs	r0, r0
 800d6d2:	f1ba 0f00 	cmp.w	sl, #0
 800d6d6:	d0f8      	beq.n	800d6ca <_strtol_l.isra.0+0xca>
 800d6d8:	b10f      	cbz	r7, 800d6de <_strtol_l.isra.0+0xde>
 800d6da:	f105 39ff 	add.w	r9, r5, #4294967295
 800d6de:	f8ca 9000 	str.w	r9, [sl]
 800d6e2:	e7f2      	b.n	800d6ca <_strtol_l.isra.0+0xca>
 800d6e4:	2430      	movs	r4, #48	; 0x30
 800d6e6:	2e00      	cmp	r6, #0
 800d6e8:	d1af      	bne.n	800d64a <_strtol_l.isra.0+0x4a>
 800d6ea:	2608      	movs	r6, #8
 800d6ec:	e7ad      	b.n	800d64a <_strtol_l.isra.0+0x4a>
 800d6ee:	2c30      	cmp	r4, #48	; 0x30
 800d6f0:	d0a3      	beq.n	800d63a <_strtol_l.isra.0+0x3a>
 800d6f2:	260a      	movs	r6, #10
 800d6f4:	e7a9      	b.n	800d64a <_strtol_l.isra.0+0x4a>
	...

0800d6f8 <_strtol_r>:
 800d6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6fa:	4c06      	ldr	r4, [pc, #24]	; (800d714 <_strtol_r+0x1c>)
 800d6fc:	4d06      	ldr	r5, [pc, #24]	; (800d718 <_strtol_r+0x20>)
 800d6fe:	6824      	ldr	r4, [r4, #0]
 800d700:	6a24      	ldr	r4, [r4, #32]
 800d702:	2c00      	cmp	r4, #0
 800d704:	bf08      	it	eq
 800d706:	462c      	moveq	r4, r5
 800d708:	9400      	str	r4, [sp, #0]
 800d70a:	f7ff ff79 	bl	800d600 <_strtol_l.isra.0>
 800d70e:	b003      	add	sp, #12
 800d710:	bd30      	pop	{r4, r5, pc}
 800d712:	bf00      	nop
 800d714:	2000002c 	.word	0x2000002c
 800d718:	200000f0 	.word	0x200000f0

0800d71c <strtol>:
 800d71c:	4b08      	ldr	r3, [pc, #32]	; (800d740 <strtol+0x24>)
 800d71e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d720:	681c      	ldr	r4, [r3, #0]
 800d722:	4d08      	ldr	r5, [pc, #32]	; (800d744 <strtol+0x28>)
 800d724:	6a23      	ldr	r3, [r4, #32]
 800d726:	2b00      	cmp	r3, #0
 800d728:	bf08      	it	eq
 800d72a:	462b      	moveq	r3, r5
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	4613      	mov	r3, r2
 800d730:	460a      	mov	r2, r1
 800d732:	4601      	mov	r1, r0
 800d734:	4620      	mov	r0, r4
 800d736:	f7ff ff63 	bl	800d600 <_strtol_l.isra.0>
 800d73a:	b003      	add	sp, #12
 800d73c:	bd30      	pop	{r4, r5, pc}
 800d73e:	bf00      	nop
 800d740:	2000002c 	.word	0x2000002c
 800d744:	200000f0 	.word	0x200000f0

0800d748 <__tzcalc_limits>:
 800d748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d74c:	4680      	mov	r8, r0
 800d74e:	f000 fcdd 	bl	800e10c <__gettzinfo>
 800d752:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800d756:	4598      	cmp	r8, r3
 800d758:	f340 8098 	ble.w	800d88c <__tzcalc_limits+0x144>
 800d75c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800d760:	4443      	add	r3, r8
 800d762:	109b      	asrs	r3, r3, #2
 800d764:	f240 126d 	movw	r2, #365	; 0x16d
 800d768:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800d76c:	fb02 3505 	mla	r5, r2, r5, r3
 800d770:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800d774:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800d778:	fb93 f3f2 	sdiv	r3, r3, r2
 800d77c:	441d      	add	r5, r3
 800d77e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800d782:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800d786:	fb98 f7f3 	sdiv	r7, r8, r3
 800d78a:	fb03 8717 	mls	r7, r3, r7, r8
 800d78e:	4442      	add	r2, r8
 800d790:	fab7 fc87 	clz	ip, r7
 800d794:	fb92 f2f3 	sdiv	r2, r2, r3
 800d798:	f008 0303 	and.w	r3, r8, #3
 800d79c:	4415      	add	r5, r2
 800d79e:	2264      	movs	r2, #100	; 0x64
 800d7a0:	f8c0 8004 	str.w	r8, [r0, #4]
 800d7a4:	fb98 f6f2 	sdiv	r6, r8, r2
 800d7a8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d7ac:	fb02 8616 	mls	r6, r2, r6, r8
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	f04f 0e07 	mov.w	lr, #7
 800d7bc:	7a22      	ldrb	r2, [r4, #8]
 800d7be:	6963      	ldr	r3, [r4, #20]
 800d7c0:	2a4a      	cmp	r2, #74	; 0x4a
 800d7c2:	d128      	bne.n	800d816 <__tzcalc_limits+0xce>
 800d7c4:	9900      	ldr	r1, [sp, #0]
 800d7c6:	18ea      	adds	r2, r5, r3
 800d7c8:	b901      	cbnz	r1, 800d7cc <__tzcalc_limits+0x84>
 800d7ca:	b906      	cbnz	r6, 800d7ce <__tzcalc_limits+0x86>
 800d7cc:	bb0f      	cbnz	r7, 800d812 <__tzcalc_limits+0xca>
 800d7ce:	2b3b      	cmp	r3, #59	; 0x3b
 800d7d0:	bfd4      	ite	le
 800d7d2:	2300      	movle	r3, #0
 800d7d4:	2301      	movgt	r3, #1
 800d7d6:	4413      	add	r3, r2
 800d7d8:	1e5a      	subs	r2, r3, #1
 800d7da:	69a3      	ldr	r3, [r4, #24]
 800d7dc:	492c      	ldr	r1, [pc, #176]	; (800d890 <__tzcalc_limits+0x148>)
 800d7de:	fb01 3202 	mla	r2, r1, r2, r3
 800d7e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d7e4:	4413      	add	r3, r2
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	17db      	asrs	r3, r3, #31
 800d7ea:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800d7ee:	3428      	adds	r4, #40	; 0x28
 800d7f0:	45a3      	cmp	fp, r4
 800d7f2:	d1e3      	bne.n	800d7bc <__tzcalc_limits+0x74>
 800d7f4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 800d7f8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800d7fc:	4294      	cmp	r4, r2
 800d7fe:	eb75 0303 	sbcs.w	r3, r5, r3
 800d802:	bfb4      	ite	lt
 800d804:	2301      	movlt	r3, #1
 800d806:	2300      	movge	r3, #0
 800d808:	6003      	str	r3, [r0, #0]
 800d80a:	2001      	movs	r0, #1
 800d80c:	b003      	add	sp, #12
 800d80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d812:	2300      	movs	r3, #0
 800d814:	e7df      	b.n	800d7d6 <__tzcalc_limits+0x8e>
 800d816:	2a44      	cmp	r2, #68	; 0x44
 800d818:	d101      	bne.n	800d81e <__tzcalc_limits+0xd6>
 800d81a:	18ea      	adds	r2, r5, r3
 800d81c:	e7dd      	b.n	800d7da <__tzcalc_limits+0x92>
 800d81e:	9a00      	ldr	r2, [sp, #0]
 800d820:	bb72      	cbnz	r2, 800d880 <__tzcalc_limits+0x138>
 800d822:	2e00      	cmp	r6, #0
 800d824:	bf0c      	ite	eq
 800d826:	46e1      	moveq	r9, ip
 800d828:	f04f 0901 	movne.w	r9, #1
 800d82c:	2230      	movs	r2, #48	; 0x30
 800d82e:	fb02 f909 	mul.w	r9, r2, r9
 800d832:	68e2      	ldr	r2, [r4, #12]
 800d834:	9201      	str	r2, [sp, #4]
 800d836:	f04f 0800 	mov.w	r8, #0
 800d83a:	462a      	mov	r2, r5
 800d83c:	f108 0801 	add.w	r8, r8, #1
 800d840:	4914      	ldr	r1, [pc, #80]	; (800d894 <__tzcalc_limits+0x14c>)
 800d842:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 800d846:	448a      	add	sl, r1
 800d848:	9901      	ldr	r1, [sp, #4]
 800d84a:	f85a ac04 	ldr.w	sl, [sl, #-4]
 800d84e:	4541      	cmp	r1, r8
 800d850:	dc18      	bgt.n	800d884 <__tzcalc_limits+0x13c>
 800d852:	f102 0804 	add.w	r8, r2, #4
 800d856:	fb98 f9fe 	sdiv	r9, r8, lr
 800d85a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800d85e:	eba8 0909 	sub.w	r9, r8, r9
 800d862:	ebb3 0909 	subs.w	r9, r3, r9
 800d866:	6923      	ldr	r3, [r4, #16]
 800d868:	f103 33ff 	add.w	r3, r3, #4294967295
 800d86c:	bf48      	it	mi
 800d86e:	f109 0907 	addmi.w	r9, r9, #7
 800d872:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d876:	444b      	add	r3, r9
 800d878:	4553      	cmp	r3, sl
 800d87a:	da05      	bge.n	800d888 <__tzcalc_limits+0x140>
 800d87c:	441a      	add	r2, r3
 800d87e:	e7ac      	b.n	800d7da <__tzcalc_limits+0x92>
 800d880:	46e1      	mov	r9, ip
 800d882:	e7d3      	b.n	800d82c <__tzcalc_limits+0xe4>
 800d884:	4452      	add	r2, sl
 800d886:	e7d9      	b.n	800d83c <__tzcalc_limits+0xf4>
 800d888:	3b07      	subs	r3, #7
 800d88a:	e7f5      	b.n	800d878 <__tzcalc_limits+0x130>
 800d88c:	2000      	movs	r0, #0
 800d88e:	e7bd      	b.n	800d80c <__tzcalc_limits+0xc4>
 800d890:	00015180 	.word	0x00015180
 800d894:	0800ff8c 	.word	0x0800ff8c

0800d898 <__tz_lock>:
 800d898:	4770      	bx	lr

0800d89a <__tz_unlock>:
 800d89a:	4770      	bx	lr

0800d89c <_tzset_unlocked>:
 800d89c:	4b01      	ldr	r3, [pc, #4]	; (800d8a4 <_tzset_unlocked+0x8>)
 800d89e:	6818      	ldr	r0, [r3, #0]
 800d8a0:	f000 b802 	b.w	800d8a8 <_tzset_unlocked_r>
 800d8a4:	2000002c 	.word	0x2000002c

0800d8a8 <_tzset_unlocked_r>:
 800d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ac:	b08d      	sub	sp, #52	; 0x34
 800d8ae:	4607      	mov	r7, r0
 800d8b0:	f000 fc2c 	bl	800e10c <__gettzinfo>
 800d8b4:	49af      	ldr	r1, [pc, #700]	; (800db74 <_tzset_unlocked_r+0x2cc>)
 800d8b6:	4eb0      	ldr	r6, [pc, #704]	; (800db78 <_tzset_unlocked_r+0x2d0>)
 800d8b8:	4605      	mov	r5, r0
 800d8ba:	4638      	mov	r0, r7
 800d8bc:	f000 fc1e 	bl	800e0fc <_getenv_r>
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	b970      	cbnz	r0, 800d8e2 <_tzset_unlocked_r+0x3a>
 800d8c4:	4bad      	ldr	r3, [pc, #692]	; (800db7c <_tzset_unlocked_r+0x2d4>)
 800d8c6:	4aae      	ldr	r2, [pc, #696]	; (800db80 <_tzset_unlocked_r+0x2d8>)
 800d8c8:	6018      	str	r0, [r3, #0]
 800d8ca:	4bae      	ldr	r3, [pc, #696]	; (800db84 <_tzset_unlocked_r+0x2dc>)
 800d8cc:	6018      	str	r0, [r3, #0]
 800d8ce:	4bae      	ldr	r3, [pc, #696]	; (800db88 <_tzset_unlocked_r+0x2e0>)
 800d8d0:	6830      	ldr	r0, [r6, #0]
 800d8d2:	e9c3 2200 	strd	r2, r2, [r3]
 800d8d6:	f7ff f9ab 	bl	800cc30 <free>
 800d8da:	6034      	str	r4, [r6, #0]
 800d8dc:	b00d      	add	sp, #52	; 0x34
 800d8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e2:	6831      	ldr	r1, [r6, #0]
 800d8e4:	2900      	cmp	r1, #0
 800d8e6:	d15f      	bne.n	800d9a8 <_tzset_unlocked_r+0x100>
 800d8e8:	6830      	ldr	r0, [r6, #0]
 800d8ea:	f7ff f9a1 	bl	800cc30 <free>
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f7f2 fc80 	bl	80001f4 <strlen>
 800d8f4:	1c41      	adds	r1, r0, #1
 800d8f6:	4638      	mov	r0, r7
 800d8f8:	f7ff fca6 	bl	800d248 <_malloc_r>
 800d8fc:	6030      	str	r0, [r6, #0]
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d157      	bne.n	800d9b2 <_tzset_unlocked_r+0x10a>
 800d902:	7823      	ldrb	r3, [r4, #0]
 800d904:	4aa1      	ldr	r2, [pc, #644]	; (800db8c <_tzset_unlocked_r+0x2e4>)
 800d906:	49a2      	ldr	r1, [pc, #648]	; (800db90 <_tzset_unlocked_r+0x2e8>)
 800d908:	2b3a      	cmp	r3, #58	; 0x3a
 800d90a:	bf08      	it	eq
 800d90c:	3401      	addeq	r4, #1
 800d90e:	ae0a      	add	r6, sp, #40	; 0x28
 800d910:	4633      	mov	r3, r6
 800d912:	4620      	mov	r0, r4
 800d914:	f7ff fdb2 	bl	800d47c <siscanf>
 800d918:	2800      	cmp	r0, #0
 800d91a:	dddf      	ble.n	800d8dc <_tzset_unlocked_r+0x34>
 800d91c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d91e:	18e7      	adds	r7, r4, r3
 800d920:	5ce3      	ldrb	r3, [r4, r3]
 800d922:	2b2d      	cmp	r3, #45	; 0x2d
 800d924:	d149      	bne.n	800d9ba <_tzset_unlocked_r+0x112>
 800d926:	3701      	adds	r7, #1
 800d928:	f04f 34ff 	mov.w	r4, #4294967295
 800d92c:	f10d 0a20 	add.w	sl, sp, #32
 800d930:	f10d 0b1e 	add.w	fp, sp, #30
 800d934:	f04f 0800 	mov.w	r8, #0
 800d938:	9603      	str	r6, [sp, #12]
 800d93a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800d93e:	f8cd b000 	str.w	fp, [sp]
 800d942:	4633      	mov	r3, r6
 800d944:	aa07      	add	r2, sp, #28
 800d946:	4993      	ldr	r1, [pc, #588]	; (800db94 <_tzset_unlocked_r+0x2ec>)
 800d948:	f8ad 801e 	strh.w	r8, [sp, #30]
 800d94c:	4638      	mov	r0, r7
 800d94e:	f8ad 8020 	strh.w	r8, [sp, #32]
 800d952:	f7ff fd93 	bl	800d47c <siscanf>
 800d956:	4540      	cmp	r0, r8
 800d958:	ddc0      	ble.n	800d8dc <_tzset_unlocked_r+0x34>
 800d95a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d95e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d962:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800dba0 <_tzset_unlocked_r+0x2f8>
 800d966:	213c      	movs	r1, #60	; 0x3c
 800d968:	fb01 2203 	mla	r2, r1, r3, r2
 800d96c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d970:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d974:	fb01 2303 	mla	r3, r1, r3, r2
 800d978:	435c      	muls	r4, r3
 800d97a:	62ac      	str	r4, [r5, #40]	; 0x28
 800d97c:	4c82      	ldr	r4, [pc, #520]	; (800db88 <_tzset_unlocked_r+0x2e0>)
 800d97e:	4b83      	ldr	r3, [pc, #524]	; (800db8c <_tzset_unlocked_r+0x2e4>)
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d984:	4982      	ldr	r1, [pc, #520]	; (800db90 <_tzset_unlocked_r+0x2e8>)
 800d986:	441f      	add	r7, r3
 800d988:	464a      	mov	r2, r9
 800d98a:	4633      	mov	r3, r6
 800d98c:	4638      	mov	r0, r7
 800d98e:	f7ff fd75 	bl	800d47c <siscanf>
 800d992:	4540      	cmp	r0, r8
 800d994:	dc16      	bgt.n	800d9c4 <_tzset_unlocked_r+0x11c>
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	6063      	str	r3, [r4, #4]
 800d99a:	4b78      	ldr	r3, [pc, #480]	; (800db7c <_tzset_unlocked_r+0x2d4>)
 800d99c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	4b78      	ldr	r3, [pc, #480]	; (800db84 <_tzset_unlocked_r+0x2dc>)
 800d9a2:	f8c3 8000 	str.w	r8, [r3]
 800d9a6:	e799      	b.n	800d8dc <_tzset_unlocked_r+0x34>
 800d9a8:	f7f2 fc1a 	bl	80001e0 <strcmp>
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	d095      	beq.n	800d8dc <_tzset_unlocked_r+0x34>
 800d9b0:	e79a      	b.n	800d8e8 <_tzset_unlocked_r+0x40>
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	f7ff fded 	bl	800d592 <strcpy>
 800d9b8:	e7a3      	b.n	800d902 <_tzset_unlocked_r+0x5a>
 800d9ba:	2b2b      	cmp	r3, #43	; 0x2b
 800d9bc:	bf08      	it	eq
 800d9be:	3701      	addeq	r7, #1
 800d9c0:	2401      	movs	r4, #1
 800d9c2:	e7b3      	b.n	800d92c <_tzset_unlocked_r+0x84>
 800d9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9c6:	f8c4 9004 	str.w	r9, [r4, #4]
 800d9ca:	18fc      	adds	r4, r7, r3
 800d9cc:	5cfb      	ldrb	r3, [r7, r3]
 800d9ce:	2b2d      	cmp	r3, #45	; 0x2d
 800d9d0:	f040 808b 	bne.w	800daea <_tzset_unlocked_r+0x242>
 800d9d4:	3401      	adds	r4, #1
 800d9d6:	f04f 37ff 	mov.w	r7, #4294967295
 800d9da:	2300      	movs	r3, #0
 800d9dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d9e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d9e4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d9e8:	930a      	str	r3, [sp, #40]	; 0x28
 800d9ea:	e9cd a602 	strd	sl, r6, [sp, #8]
 800d9ee:	e9cd b600 	strd	fp, r6, [sp]
 800d9f2:	4633      	mov	r3, r6
 800d9f4:	aa07      	add	r2, sp, #28
 800d9f6:	4967      	ldr	r1, [pc, #412]	; (800db94 <_tzset_unlocked_r+0x2ec>)
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f7ff fd3f 	bl	800d47c <siscanf>
 800d9fe:	2800      	cmp	r0, #0
 800da00:	dc78      	bgt.n	800daf4 <_tzset_unlocked_r+0x24c>
 800da02:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800da04:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800da08:	652b      	str	r3, [r5, #80]	; 0x50
 800da0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da0c:	462f      	mov	r7, r5
 800da0e:	441c      	add	r4, r3
 800da10:	f04f 0900 	mov.w	r9, #0
 800da14:	7823      	ldrb	r3, [r4, #0]
 800da16:	2b2c      	cmp	r3, #44	; 0x2c
 800da18:	bf08      	it	eq
 800da1a:	3401      	addeq	r4, #1
 800da1c:	f894 8000 	ldrb.w	r8, [r4]
 800da20:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800da24:	d179      	bne.n	800db1a <_tzset_unlocked_r+0x272>
 800da26:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800da2a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800da2e:	ab09      	add	r3, sp, #36	; 0x24
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	9603      	str	r6, [sp, #12]
 800da34:	4633      	mov	r3, r6
 800da36:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800da3a:	4957      	ldr	r1, [pc, #348]	; (800db98 <_tzset_unlocked_r+0x2f0>)
 800da3c:	4620      	mov	r0, r4
 800da3e:	f7ff fd1d 	bl	800d47c <siscanf>
 800da42:	2803      	cmp	r0, #3
 800da44:	f47f af4a 	bne.w	800d8dc <_tzset_unlocked_r+0x34>
 800da48:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800da4c:	1e4b      	subs	r3, r1, #1
 800da4e:	2b0b      	cmp	r3, #11
 800da50:	f63f af44 	bhi.w	800d8dc <_tzset_unlocked_r+0x34>
 800da54:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800da58:	1e53      	subs	r3, r2, #1
 800da5a:	2b04      	cmp	r3, #4
 800da5c:	f63f af3e 	bhi.w	800d8dc <_tzset_unlocked_r+0x34>
 800da60:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800da64:	2b06      	cmp	r3, #6
 800da66:	f63f af39 	bhi.w	800d8dc <_tzset_unlocked_r+0x34>
 800da6a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800da6e:	f887 8008 	strb.w	r8, [r7, #8]
 800da72:	617b      	str	r3, [r7, #20]
 800da74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da76:	eb04 0803 	add.w	r8, r4, r3
 800da7a:	2302      	movs	r3, #2
 800da7c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800da80:	2300      	movs	r3, #0
 800da82:	f8ad 301e 	strh.w	r3, [sp, #30]
 800da86:	f8ad 3020 	strh.w	r3, [sp, #32]
 800da8a:	930a      	str	r3, [sp, #40]	; 0x28
 800da8c:	f898 3000 	ldrb.w	r3, [r8]
 800da90:	2b2f      	cmp	r3, #47	; 0x2f
 800da92:	d109      	bne.n	800daa8 <_tzset_unlocked_r+0x200>
 800da94:	e9cd a602 	strd	sl, r6, [sp, #8]
 800da98:	e9cd b600 	strd	fp, r6, [sp]
 800da9c:	4633      	mov	r3, r6
 800da9e:	aa07      	add	r2, sp, #28
 800daa0:	493e      	ldr	r1, [pc, #248]	; (800db9c <_tzset_unlocked_r+0x2f4>)
 800daa2:	4640      	mov	r0, r8
 800daa4:	f7ff fcea 	bl	800d47c <siscanf>
 800daa8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800daac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800dab0:	213c      	movs	r1, #60	; 0x3c
 800dab2:	fb01 2203 	mla	r2, r1, r3, r2
 800dab6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800daba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800dabe:	fb01 2303 	mla	r3, r1, r3, r2
 800dac2:	61bb      	str	r3, [r7, #24]
 800dac4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dac6:	3728      	adds	r7, #40	; 0x28
 800dac8:	4444      	add	r4, r8
 800daca:	f1b9 0f00 	cmp.w	r9, #0
 800dace:	d021      	beq.n	800db14 <_tzset_unlocked_r+0x26c>
 800dad0:	6868      	ldr	r0, [r5, #4]
 800dad2:	f7ff fe39 	bl	800d748 <__tzcalc_limits>
 800dad6:	4b29      	ldr	r3, [pc, #164]	; (800db7c <_tzset_unlocked_r+0x2d4>)
 800dad8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800dade:	1a9b      	subs	r3, r3, r2
 800dae0:	4a28      	ldr	r2, [pc, #160]	; (800db84 <_tzset_unlocked_r+0x2dc>)
 800dae2:	bf18      	it	ne
 800dae4:	2301      	movne	r3, #1
 800dae6:	6013      	str	r3, [r2, #0]
 800dae8:	e6f8      	b.n	800d8dc <_tzset_unlocked_r+0x34>
 800daea:	2b2b      	cmp	r3, #43	; 0x2b
 800daec:	bf08      	it	eq
 800daee:	3401      	addeq	r4, #1
 800daf0:	2701      	movs	r7, #1
 800daf2:	e772      	b.n	800d9da <_tzset_unlocked_r+0x132>
 800daf4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800daf8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800dafc:	213c      	movs	r1, #60	; 0x3c
 800dafe:	fb01 2203 	mla	r2, r1, r3, r2
 800db02:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800db06:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800db0a:	fb01 2303 	mla	r3, r1, r3, r2
 800db0e:	435f      	muls	r7, r3
 800db10:	652f      	str	r7, [r5, #80]	; 0x50
 800db12:	e77a      	b.n	800da0a <_tzset_unlocked_r+0x162>
 800db14:	f04f 0901 	mov.w	r9, #1
 800db18:	e77c      	b.n	800da14 <_tzset_unlocked_r+0x16c>
 800db1a:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800db1e:	bf06      	itte	eq
 800db20:	3401      	addeq	r4, #1
 800db22:	4643      	moveq	r3, r8
 800db24:	2344      	movne	r3, #68	; 0x44
 800db26:	220a      	movs	r2, #10
 800db28:	a90b      	add	r1, sp, #44	; 0x2c
 800db2a:	4620      	mov	r0, r4
 800db2c:	9305      	str	r3, [sp, #20]
 800db2e:	f001 fbc1 	bl	800f2b4 <strtoul>
 800db32:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800db36:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800db3a:	45a0      	cmp	r8, r4
 800db3c:	9b05      	ldr	r3, [sp, #20]
 800db3e:	d114      	bne.n	800db6a <_tzset_unlocked_r+0x2c2>
 800db40:	234d      	movs	r3, #77	; 0x4d
 800db42:	f1b9 0f00 	cmp.w	r9, #0
 800db46:	d107      	bne.n	800db58 <_tzset_unlocked_r+0x2b0>
 800db48:	722b      	strb	r3, [r5, #8]
 800db4a:	2103      	movs	r1, #3
 800db4c:	2302      	movs	r3, #2
 800db4e:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800db52:	f8c5 9014 	str.w	r9, [r5, #20]
 800db56:	e790      	b.n	800da7a <_tzset_unlocked_r+0x1d2>
 800db58:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800db5c:	220b      	movs	r2, #11
 800db5e:	2301      	movs	r3, #1
 800db60:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800db64:	2300      	movs	r3, #0
 800db66:	63eb      	str	r3, [r5, #60]	; 0x3c
 800db68:	e787      	b.n	800da7a <_tzset_unlocked_r+0x1d2>
 800db6a:	b280      	uxth	r0, r0
 800db6c:	723b      	strb	r3, [r7, #8]
 800db6e:	6178      	str	r0, [r7, #20]
 800db70:	e783      	b.n	800da7a <_tzset_unlocked_r+0x1d2>
 800db72:	bf00      	nop
 800db74:	0800fee8 	.word	0x0800fee8
 800db78:	200003d4 	.word	0x200003d4
 800db7c:	200003dc 	.word	0x200003dc
 800db80:	0800feeb 	.word	0x0800feeb
 800db84:	200003d8 	.word	0x200003d8
 800db88:	20000090 	.word	0x20000090
 800db8c:	200003c7 	.word	0x200003c7
 800db90:	0800feef 	.word	0x0800feef
 800db94:	0800ff12 	.word	0x0800ff12
 800db98:	0800fefe 	.word	0x0800fefe
 800db9c:	0800ff11 	.word	0x0800ff11
 800dba0:	200003bc 	.word	0x200003bc

0800dba4 <__swbuf_r>:
 800dba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba6:	460e      	mov	r6, r1
 800dba8:	4614      	mov	r4, r2
 800dbaa:	4605      	mov	r5, r0
 800dbac:	b118      	cbz	r0, 800dbb6 <__swbuf_r+0x12>
 800dbae:	6983      	ldr	r3, [r0, #24]
 800dbb0:	b90b      	cbnz	r3, 800dbb6 <__swbuf_r+0x12>
 800dbb2:	f000 f9dd 	bl	800df70 <__sinit>
 800dbb6:	4b21      	ldr	r3, [pc, #132]	; (800dc3c <__swbuf_r+0x98>)
 800dbb8:	429c      	cmp	r4, r3
 800dbba:	d12a      	bne.n	800dc12 <__swbuf_r+0x6e>
 800dbbc:	686c      	ldr	r4, [r5, #4]
 800dbbe:	69a3      	ldr	r3, [r4, #24]
 800dbc0:	60a3      	str	r3, [r4, #8]
 800dbc2:	89a3      	ldrh	r3, [r4, #12]
 800dbc4:	071a      	lsls	r2, r3, #28
 800dbc6:	d52e      	bpl.n	800dc26 <__swbuf_r+0x82>
 800dbc8:	6923      	ldr	r3, [r4, #16]
 800dbca:	b363      	cbz	r3, 800dc26 <__swbuf_r+0x82>
 800dbcc:	6923      	ldr	r3, [r4, #16]
 800dbce:	6820      	ldr	r0, [r4, #0]
 800dbd0:	1ac0      	subs	r0, r0, r3
 800dbd2:	6963      	ldr	r3, [r4, #20]
 800dbd4:	b2f6      	uxtb	r6, r6
 800dbd6:	4283      	cmp	r3, r0
 800dbd8:	4637      	mov	r7, r6
 800dbda:	dc04      	bgt.n	800dbe6 <__swbuf_r+0x42>
 800dbdc:	4621      	mov	r1, r4
 800dbde:	4628      	mov	r0, r5
 800dbe0:	f000 f95c 	bl	800de9c <_fflush_r>
 800dbe4:	bb28      	cbnz	r0, 800dc32 <__swbuf_r+0x8e>
 800dbe6:	68a3      	ldr	r3, [r4, #8]
 800dbe8:	3b01      	subs	r3, #1
 800dbea:	60a3      	str	r3, [r4, #8]
 800dbec:	6823      	ldr	r3, [r4, #0]
 800dbee:	1c5a      	adds	r2, r3, #1
 800dbf0:	6022      	str	r2, [r4, #0]
 800dbf2:	701e      	strb	r6, [r3, #0]
 800dbf4:	6963      	ldr	r3, [r4, #20]
 800dbf6:	3001      	adds	r0, #1
 800dbf8:	4283      	cmp	r3, r0
 800dbfa:	d004      	beq.n	800dc06 <__swbuf_r+0x62>
 800dbfc:	89a3      	ldrh	r3, [r4, #12]
 800dbfe:	07db      	lsls	r3, r3, #31
 800dc00:	d519      	bpl.n	800dc36 <__swbuf_r+0x92>
 800dc02:	2e0a      	cmp	r6, #10
 800dc04:	d117      	bne.n	800dc36 <__swbuf_r+0x92>
 800dc06:	4621      	mov	r1, r4
 800dc08:	4628      	mov	r0, r5
 800dc0a:	f000 f947 	bl	800de9c <_fflush_r>
 800dc0e:	b190      	cbz	r0, 800dc36 <__swbuf_r+0x92>
 800dc10:	e00f      	b.n	800dc32 <__swbuf_r+0x8e>
 800dc12:	4b0b      	ldr	r3, [pc, #44]	; (800dc40 <__swbuf_r+0x9c>)
 800dc14:	429c      	cmp	r4, r3
 800dc16:	d101      	bne.n	800dc1c <__swbuf_r+0x78>
 800dc18:	68ac      	ldr	r4, [r5, #8]
 800dc1a:	e7d0      	b.n	800dbbe <__swbuf_r+0x1a>
 800dc1c:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <__swbuf_r+0xa0>)
 800dc1e:	429c      	cmp	r4, r3
 800dc20:	bf08      	it	eq
 800dc22:	68ec      	ldreq	r4, [r5, #12]
 800dc24:	e7cb      	b.n	800dbbe <__swbuf_r+0x1a>
 800dc26:	4621      	mov	r1, r4
 800dc28:	4628      	mov	r0, r5
 800dc2a:	f000 f81f 	bl	800dc6c <__swsetup_r>
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d0cc      	beq.n	800dbcc <__swbuf_r+0x28>
 800dc32:	f04f 37ff 	mov.w	r7, #4294967295
 800dc36:	4638      	mov	r0, r7
 800dc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	0800ff44 	.word	0x0800ff44
 800dc40:	0800ff64 	.word	0x0800ff64
 800dc44:	0800ff24 	.word	0x0800ff24

0800dc48 <_write_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4c07      	ldr	r4, [pc, #28]	; (800dc68 <_write_r+0x20>)
 800dc4c:	4605      	mov	r5, r0
 800dc4e:	4608      	mov	r0, r1
 800dc50:	4611      	mov	r1, r2
 800dc52:	2200      	movs	r2, #0
 800dc54:	6022      	str	r2, [r4, #0]
 800dc56:	461a      	mov	r2, r3
 800dc58:	f7fc fed4 	bl	800aa04 <_write>
 800dc5c:	1c43      	adds	r3, r0, #1
 800dc5e:	d102      	bne.n	800dc66 <_write_r+0x1e>
 800dc60:	6823      	ldr	r3, [r4, #0]
 800dc62:	b103      	cbz	r3, 800dc66 <_write_r+0x1e>
 800dc64:	602b      	str	r3, [r5, #0]
 800dc66:	bd38      	pop	{r3, r4, r5, pc}
 800dc68:	2000c654 	.word	0x2000c654

0800dc6c <__swsetup_r>:
 800dc6c:	4b32      	ldr	r3, [pc, #200]	; (800dd38 <__swsetup_r+0xcc>)
 800dc6e:	b570      	push	{r4, r5, r6, lr}
 800dc70:	681d      	ldr	r5, [r3, #0]
 800dc72:	4606      	mov	r6, r0
 800dc74:	460c      	mov	r4, r1
 800dc76:	b125      	cbz	r5, 800dc82 <__swsetup_r+0x16>
 800dc78:	69ab      	ldr	r3, [r5, #24]
 800dc7a:	b913      	cbnz	r3, 800dc82 <__swsetup_r+0x16>
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f000 f977 	bl	800df70 <__sinit>
 800dc82:	4b2e      	ldr	r3, [pc, #184]	; (800dd3c <__swsetup_r+0xd0>)
 800dc84:	429c      	cmp	r4, r3
 800dc86:	d10f      	bne.n	800dca8 <__swsetup_r+0x3c>
 800dc88:	686c      	ldr	r4, [r5, #4]
 800dc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	0715      	lsls	r5, r2, #28
 800dc92:	d42c      	bmi.n	800dcee <__swsetup_r+0x82>
 800dc94:	06d0      	lsls	r0, r2, #27
 800dc96:	d411      	bmi.n	800dcbc <__swsetup_r+0x50>
 800dc98:	2209      	movs	r2, #9
 800dc9a:	6032      	str	r2, [r6, #0]
 800dc9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dca0:	81a3      	strh	r3, [r4, #12]
 800dca2:	f04f 30ff 	mov.w	r0, #4294967295
 800dca6:	e03e      	b.n	800dd26 <__swsetup_r+0xba>
 800dca8:	4b25      	ldr	r3, [pc, #148]	; (800dd40 <__swsetup_r+0xd4>)
 800dcaa:	429c      	cmp	r4, r3
 800dcac:	d101      	bne.n	800dcb2 <__swsetup_r+0x46>
 800dcae:	68ac      	ldr	r4, [r5, #8]
 800dcb0:	e7eb      	b.n	800dc8a <__swsetup_r+0x1e>
 800dcb2:	4b24      	ldr	r3, [pc, #144]	; (800dd44 <__swsetup_r+0xd8>)
 800dcb4:	429c      	cmp	r4, r3
 800dcb6:	bf08      	it	eq
 800dcb8:	68ec      	ldreq	r4, [r5, #12]
 800dcba:	e7e6      	b.n	800dc8a <__swsetup_r+0x1e>
 800dcbc:	0751      	lsls	r1, r2, #29
 800dcbe:	d512      	bpl.n	800dce6 <__swsetup_r+0x7a>
 800dcc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcc2:	b141      	cbz	r1, 800dcd6 <__swsetup_r+0x6a>
 800dcc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcc8:	4299      	cmp	r1, r3
 800dcca:	d002      	beq.n	800dcd2 <__swsetup_r+0x66>
 800dccc:	4630      	mov	r0, r6
 800dcce:	f7ff fa6d 	bl	800d1ac <_free_r>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	6363      	str	r3, [r4, #52]	; 0x34
 800dcd6:	89a3      	ldrh	r3, [r4, #12]
 800dcd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dcdc:	81a3      	strh	r3, [r4, #12]
 800dcde:	2300      	movs	r3, #0
 800dce0:	6063      	str	r3, [r4, #4]
 800dce2:	6923      	ldr	r3, [r4, #16]
 800dce4:	6023      	str	r3, [r4, #0]
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	f043 0308 	orr.w	r3, r3, #8
 800dcec:	81a3      	strh	r3, [r4, #12]
 800dcee:	6923      	ldr	r3, [r4, #16]
 800dcf0:	b94b      	cbnz	r3, 800dd06 <__swsetup_r+0x9a>
 800dcf2:	89a3      	ldrh	r3, [r4, #12]
 800dcf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dcf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcfc:	d003      	beq.n	800dd06 <__swsetup_r+0x9a>
 800dcfe:	4621      	mov	r1, r4
 800dd00:	4630      	mov	r0, r6
 800dd02:	f000 fa4f 	bl	800e1a4 <__smakebuf_r>
 800dd06:	89a2      	ldrh	r2, [r4, #12]
 800dd08:	f012 0301 	ands.w	r3, r2, #1
 800dd0c:	d00c      	beq.n	800dd28 <__swsetup_r+0xbc>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	60a3      	str	r3, [r4, #8]
 800dd12:	6963      	ldr	r3, [r4, #20]
 800dd14:	425b      	negs	r3, r3
 800dd16:	61a3      	str	r3, [r4, #24]
 800dd18:	6923      	ldr	r3, [r4, #16]
 800dd1a:	b953      	cbnz	r3, 800dd32 <__swsetup_r+0xc6>
 800dd1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800dd24:	d1ba      	bne.n	800dc9c <__swsetup_r+0x30>
 800dd26:	bd70      	pop	{r4, r5, r6, pc}
 800dd28:	0792      	lsls	r2, r2, #30
 800dd2a:	bf58      	it	pl
 800dd2c:	6963      	ldrpl	r3, [r4, #20]
 800dd2e:	60a3      	str	r3, [r4, #8]
 800dd30:	e7f2      	b.n	800dd18 <__swsetup_r+0xac>
 800dd32:	2000      	movs	r0, #0
 800dd34:	e7f7      	b.n	800dd26 <__swsetup_r+0xba>
 800dd36:	bf00      	nop
 800dd38:	2000002c 	.word	0x2000002c
 800dd3c:	0800ff44 	.word	0x0800ff44
 800dd40:	0800ff64 	.word	0x0800ff64
 800dd44:	0800ff24 	.word	0x0800ff24

0800dd48 <_close_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4c06      	ldr	r4, [pc, #24]	; (800dd64 <_close_r+0x1c>)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4605      	mov	r5, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	6023      	str	r3, [r4, #0]
 800dd54:	f001 fb78 	bl	800f448 <_close>
 800dd58:	1c43      	adds	r3, r0, #1
 800dd5a:	d102      	bne.n	800dd62 <_close_r+0x1a>
 800dd5c:	6823      	ldr	r3, [r4, #0]
 800dd5e:	b103      	cbz	r3, 800dd62 <_close_r+0x1a>
 800dd60:	602b      	str	r3, [r5, #0]
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	2000c654 	.word	0x2000c654

0800dd68 <div>:
 800dd68:	2900      	cmp	r1, #0
 800dd6a:	b510      	push	{r4, lr}
 800dd6c:	fb91 f4f2 	sdiv	r4, r1, r2
 800dd70:	fb02 1314 	mls	r3, r2, r4, r1
 800dd74:	db06      	blt.n	800dd84 <div+0x1c>
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	da01      	bge.n	800dd7e <div+0x16>
 800dd7a:	3401      	adds	r4, #1
 800dd7c:	1a9b      	subs	r3, r3, r2
 800dd7e:	e9c0 4300 	strd	r4, r3, [r0]
 800dd82:	bd10      	pop	{r4, pc}
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	bfc4      	itt	gt
 800dd88:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800dd8c:	189b      	addgt	r3, r3, r2
 800dd8e:	e7f6      	b.n	800dd7e <div+0x16>

0800dd90 <__sflush_r>:
 800dd90:	898a      	ldrh	r2, [r1, #12]
 800dd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd96:	4605      	mov	r5, r0
 800dd98:	0710      	lsls	r0, r2, #28
 800dd9a:	460c      	mov	r4, r1
 800dd9c:	d458      	bmi.n	800de50 <__sflush_r+0xc0>
 800dd9e:	684b      	ldr	r3, [r1, #4]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	dc05      	bgt.n	800ddb0 <__sflush_r+0x20>
 800dda4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	dc02      	bgt.n	800ddb0 <__sflush_r+0x20>
 800ddaa:	2000      	movs	r0, #0
 800ddac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddb2:	2e00      	cmp	r6, #0
 800ddb4:	d0f9      	beq.n	800ddaa <__sflush_r+0x1a>
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ddbc:	682f      	ldr	r7, [r5, #0]
 800ddbe:	6a21      	ldr	r1, [r4, #32]
 800ddc0:	602b      	str	r3, [r5, #0]
 800ddc2:	d032      	beq.n	800de2a <__sflush_r+0x9a>
 800ddc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ddc6:	89a3      	ldrh	r3, [r4, #12]
 800ddc8:	075a      	lsls	r2, r3, #29
 800ddca:	d505      	bpl.n	800ddd8 <__sflush_r+0x48>
 800ddcc:	6863      	ldr	r3, [r4, #4]
 800ddce:	1ac0      	subs	r0, r0, r3
 800ddd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddd2:	b10b      	cbz	r3, 800ddd8 <__sflush_r+0x48>
 800ddd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddd6:	1ac0      	subs	r0, r0, r3
 800ddd8:	2300      	movs	r3, #0
 800ddda:	4602      	mov	r2, r0
 800dddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddde:	6a21      	ldr	r1, [r4, #32]
 800dde0:	4628      	mov	r0, r5
 800dde2:	47b0      	blx	r6
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	89a3      	ldrh	r3, [r4, #12]
 800dde8:	d106      	bne.n	800ddf8 <__sflush_r+0x68>
 800ddea:	6829      	ldr	r1, [r5, #0]
 800ddec:	291d      	cmp	r1, #29
 800ddee:	d848      	bhi.n	800de82 <__sflush_r+0xf2>
 800ddf0:	4a29      	ldr	r2, [pc, #164]	; (800de98 <__sflush_r+0x108>)
 800ddf2:	40ca      	lsrs	r2, r1
 800ddf4:	07d6      	lsls	r6, r2, #31
 800ddf6:	d544      	bpl.n	800de82 <__sflush_r+0xf2>
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	6062      	str	r2, [r4, #4]
 800ddfc:	04d9      	lsls	r1, r3, #19
 800ddfe:	6922      	ldr	r2, [r4, #16]
 800de00:	6022      	str	r2, [r4, #0]
 800de02:	d504      	bpl.n	800de0e <__sflush_r+0x7e>
 800de04:	1c42      	adds	r2, r0, #1
 800de06:	d101      	bne.n	800de0c <__sflush_r+0x7c>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b903      	cbnz	r3, 800de0e <__sflush_r+0x7e>
 800de0c:	6560      	str	r0, [r4, #84]	; 0x54
 800de0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de10:	602f      	str	r7, [r5, #0]
 800de12:	2900      	cmp	r1, #0
 800de14:	d0c9      	beq.n	800ddaa <__sflush_r+0x1a>
 800de16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de1a:	4299      	cmp	r1, r3
 800de1c:	d002      	beq.n	800de24 <__sflush_r+0x94>
 800de1e:	4628      	mov	r0, r5
 800de20:	f7ff f9c4 	bl	800d1ac <_free_r>
 800de24:	2000      	movs	r0, #0
 800de26:	6360      	str	r0, [r4, #52]	; 0x34
 800de28:	e7c0      	b.n	800ddac <__sflush_r+0x1c>
 800de2a:	2301      	movs	r3, #1
 800de2c:	4628      	mov	r0, r5
 800de2e:	47b0      	blx	r6
 800de30:	1c41      	adds	r1, r0, #1
 800de32:	d1c8      	bne.n	800ddc6 <__sflush_r+0x36>
 800de34:	682b      	ldr	r3, [r5, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d0c5      	beq.n	800ddc6 <__sflush_r+0x36>
 800de3a:	2b1d      	cmp	r3, #29
 800de3c:	d001      	beq.n	800de42 <__sflush_r+0xb2>
 800de3e:	2b16      	cmp	r3, #22
 800de40:	d101      	bne.n	800de46 <__sflush_r+0xb6>
 800de42:	602f      	str	r7, [r5, #0]
 800de44:	e7b1      	b.n	800ddaa <__sflush_r+0x1a>
 800de46:	89a3      	ldrh	r3, [r4, #12]
 800de48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de4c:	81a3      	strh	r3, [r4, #12]
 800de4e:	e7ad      	b.n	800ddac <__sflush_r+0x1c>
 800de50:	690f      	ldr	r7, [r1, #16]
 800de52:	2f00      	cmp	r7, #0
 800de54:	d0a9      	beq.n	800ddaa <__sflush_r+0x1a>
 800de56:	0793      	lsls	r3, r2, #30
 800de58:	680e      	ldr	r6, [r1, #0]
 800de5a:	bf08      	it	eq
 800de5c:	694b      	ldreq	r3, [r1, #20]
 800de5e:	600f      	str	r7, [r1, #0]
 800de60:	bf18      	it	ne
 800de62:	2300      	movne	r3, #0
 800de64:	eba6 0807 	sub.w	r8, r6, r7
 800de68:	608b      	str	r3, [r1, #8]
 800de6a:	f1b8 0f00 	cmp.w	r8, #0
 800de6e:	dd9c      	ble.n	800ddaa <__sflush_r+0x1a>
 800de70:	4643      	mov	r3, r8
 800de72:	463a      	mov	r2, r7
 800de74:	6a21      	ldr	r1, [r4, #32]
 800de76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de78:	4628      	mov	r0, r5
 800de7a:	47b0      	blx	r6
 800de7c:	2800      	cmp	r0, #0
 800de7e:	dc06      	bgt.n	800de8e <__sflush_r+0xfe>
 800de80:	89a3      	ldrh	r3, [r4, #12]
 800de82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de86:	81a3      	strh	r3, [r4, #12]
 800de88:	f04f 30ff 	mov.w	r0, #4294967295
 800de8c:	e78e      	b.n	800ddac <__sflush_r+0x1c>
 800de8e:	4407      	add	r7, r0
 800de90:	eba8 0800 	sub.w	r8, r8, r0
 800de94:	e7e9      	b.n	800de6a <__sflush_r+0xda>
 800de96:	bf00      	nop
 800de98:	20400001 	.word	0x20400001

0800de9c <_fflush_r>:
 800de9c:	b538      	push	{r3, r4, r5, lr}
 800de9e:	690b      	ldr	r3, [r1, #16]
 800dea0:	4605      	mov	r5, r0
 800dea2:	460c      	mov	r4, r1
 800dea4:	b1db      	cbz	r3, 800dede <_fflush_r+0x42>
 800dea6:	b118      	cbz	r0, 800deb0 <_fflush_r+0x14>
 800dea8:	6983      	ldr	r3, [r0, #24]
 800deaa:	b90b      	cbnz	r3, 800deb0 <_fflush_r+0x14>
 800deac:	f000 f860 	bl	800df70 <__sinit>
 800deb0:	4b0c      	ldr	r3, [pc, #48]	; (800dee4 <_fflush_r+0x48>)
 800deb2:	429c      	cmp	r4, r3
 800deb4:	d109      	bne.n	800deca <_fflush_r+0x2e>
 800deb6:	686c      	ldr	r4, [r5, #4]
 800deb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800debc:	b17b      	cbz	r3, 800dede <_fflush_r+0x42>
 800debe:	4621      	mov	r1, r4
 800dec0:	4628      	mov	r0, r5
 800dec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dec6:	f7ff bf63 	b.w	800dd90 <__sflush_r>
 800deca:	4b07      	ldr	r3, [pc, #28]	; (800dee8 <_fflush_r+0x4c>)
 800decc:	429c      	cmp	r4, r3
 800dece:	d101      	bne.n	800ded4 <_fflush_r+0x38>
 800ded0:	68ac      	ldr	r4, [r5, #8]
 800ded2:	e7f1      	b.n	800deb8 <_fflush_r+0x1c>
 800ded4:	4b05      	ldr	r3, [pc, #20]	; (800deec <_fflush_r+0x50>)
 800ded6:	429c      	cmp	r4, r3
 800ded8:	bf08      	it	eq
 800deda:	68ec      	ldreq	r4, [r5, #12]
 800dedc:	e7ec      	b.n	800deb8 <_fflush_r+0x1c>
 800dede:	2000      	movs	r0, #0
 800dee0:	bd38      	pop	{r3, r4, r5, pc}
 800dee2:	bf00      	nop
 800dee4:	0800ff44 	.word	0x0800ff44
 800dee8:	0800ff64 	.word	0x0800ff64
 800deec:	0800ff24 	.word	0x0800ff24

0800def0 <std>:
 800def0:	2300      	movs	r3, #0
 800def2:	b510      	push	{r4, lr}
 800def4:	4604      	mov	r4, r0
 800def6:	e9c0 3300 	strd	r3, r3, [r0]
 800defa:	6083      	str	r3, [r0, #8]
 800defc:	8181      	strh	r1, [r0, #12]
 800defe:	6643      	str	r3, [r0, #100]	; 0x64
 800df00:	81c2      	strh	r2, [r0, #14]
 800df02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df06:	6183      	str	r3, [r0, #24]
 800df08:	4619      	mov	r1, r3
 800df0a:	2208      	movs	r2, #8
 800df0c:	305c      	adds	r0, #92	; 0x5c
 800df0e:	f7fe feb1 	bl	800cc74 <memset>
 800df12:	4b05      	ldr	r3, [pc, #20]	; (800df28 <std+0x38>)
 800df14:	6263      	str	r3, [r4, #36]	; 0x24
 800df16:	4b05      	ldr	r3, [pc, #20]	; (800df2c <std+0x3c>)
 800df18:	62a3      	str	r3, [r4, #40]	; 0x28
 800df1a:	4b05      	ldr	r3, [pc, #20]	; (800df30 <std+0x40>)
 800df1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df1e:	4b05      	ldr	r3, [pc, #20]	; (800df34 <std+0x44>)
 800df20:	6224      	str	r4, [r4, #32]
 800df22:	6323      	str	r3, [r4, #48]	; 0x30
 800df24:	bd10      	pop	{r4, pc}
 800df26:	bf00      	nop
 800df28:	0800d4d1 	.word	0x0800d4d1
 800df2c:	0800d4f7 	.word	0x0800d4f7
 800df30:	0800d52f 	.word	0x0800d52f
 800df34:	0800d553 	.word	0x0800d553

0800df38 <_cleanup_r>:
 800df38:	4901      	ldr	r1, [pc, #4]	; (800df40 <_cleanup_r+0x8>)
 800df3a:	f000 b885 	b.w	800e048 <_fwalk_reent>
 800df3e:	bf00      	nop
 800df40:	0800de9d 	.word	0x0800de9d

0800df44 <__sfmoreglue>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	1e4a      	subs	r2, r1, #1
 800df48:	2568      	movs	r5, #104	; 0x68
 800df4a:	4355      	muls	r5, r2
 800df4c:	460e      	mov	r6, r1
 800df4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df52:	f7ff f979 	bl	800d248 <_malloc_r>
 800df56:	4604      	mov	r4, r0
 800df58:	b140      	cbz	r0, 800df6c <__sfmoreglue+0x28>
 800df5a:	2100      	movs	r1, #0
 800df5c:	e9c0 1600 	strd	r1, r6, [r0]
 800df60:	300c      	adds	r0, #12
 800df62:	60a0      	str	r0, [r4, #8]
 800df64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df68:	f7fe fe84 	bl	800cc74 <memset>
 800df6c:	4620      	mov	r0, r4
 800df6e:	bd70      	pop	{r4, r5, r6, pc}

0800df70 <__sinit>:
 800df70:	6983      	ldr	r3, [r0, #24]
 800df72:	b510      	push	{r4, lr}
 800df74:	4604      	mov	r4, r0
 800df76:	bb33      	cbnz	r3, 800dfc6 <__sinit+0x56>
 800df78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800df7c:	6503      	str	r3, [r0, #80]	; 0x50
 800df7e:	4b12      	ldr	r3, [pc, #72]	; (800dfc8 <__sinit+0x58>)
 800df80:	4a12      	ldr	r2, [pc, #72]	; (800dfcc <__sinit+0x5c>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6282      	str	r2, [r0, #40]	; 0x28
 800df86:	4298      	cmp	r0, r3
 800df88:	bf04      	itt	eq
 800df8a:	2301      	moveq	r3, #1
 800df8c:	6183      	streq	r3, [r0, #24]
 800df8e:	f000 f81f 	bl	800dfd0 <__sfp>
 800df92:	6060      	str	r0, [r4, #4]
 800df94:	4620      	mov	r0, r4
 800df96:	f000 f81b 	bl	800dfd0 <__sfp>
 800df9a:	60a0      	str	r0, [r4, #8]
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 f817 	bl	800dfd0 <__sfp>
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	60e0      	str	r0, [r4, #12]
 800dfa6:	2104      	movs	r1, #4
 800dfa8:	6860      	ldr	r0, [r4, #4]
 800dfaa:	f7ff ffa1 	bl	800def0 <std>
 800dfae:	2201      	movs	r2, #1
 800dfb0:	2109      	movs	r1, #9
 800dfb2:	68a0      	ldr	r0, [r4, #8]
 800dfb4:	f7ff ff9c 	bl	800def0 <std>
 800dfb8:	2202      	movs	r2, #2
 800dfba:	2112      	movs	r1, #18
 800dfbc:	68e0      	ldr	r0, [r4, #12]
 800dfbe:	f7ff ff97 	bl	800def0 <std>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	61a3      	str	r3, [r4, #24]
 800dfc6:	bd10      	pop	{r4, pc}
 800dfc8:	0800fe84 	.word	0x0800fe84
 800dfcc:	0800df39 	.word	0x0800df39

0800dfd0 <__sfp>:
 800dfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfd2:	4b1b      	ldr	r3, [pc, #108]	; (800e040 <__sfp+0x70>)
 800dfd4:	681e      	ldr	r6, [r3, #0]
 800dfd6:	69b3      	ldr	r3, [r6, #24]
 800dfd8:	4607      	mov	r7, r0
 800dfda:	b913      	cbnz	r3, 800dfe2 <__sfp+0x12>
 800dfdc:	4630      	mov	r0, r6
 800dfde:	f7ff ffc7 	bl	800df70 <__sinit>
 800dfe2:	3648      	adds	r6, #72	; 0x48
 800dfe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	d503      	bpl.n	800dff4 <__sfp+0x24>
 800dfec:	6833      	ldr	r3, [r6, #0]
 800dfee:	b133      	cbz	r3, 800dffe <__sfp+0x2e>
 800dff0:	6836      	ldr	r6, [r6, #0]
 800dff2:	e7f7      	b.n	800dfe4 <__sfp+0x14>
 800dff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dff8:	b16d      	cbz	r5, 800e016 <__sfp+0x46>
 800dffa:	3468      	adds	r4, #104	; 0x68
 800dffc:	e7f4      	b.n	800dfe8 <__sfp+0x18>
 800dffe:	2104      	movs	r1, #4
 800e000:	4638      	mov	r0, r7
 800e002:	f7ff ff9f 	bl	800df44 <__sfmoreglue>
 800e006:	6030      	str	r0, [r6, #0]
 800e008:	2800      	cmp	r0, #0
 800e00a:	d1f1      	bne.n	800dff0 <__sfp+0x20>
 800e00c:	230c      	movs	r3, #12
 800e00e:	603b      	str	r3, [r7, #0]
 800e010:	4604      	mov	r4, r0
 800e012:	4620      	mov	r0, r4
 800e014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e016:	4b0b      	ldr	r3, [pc, #44]	; (800e044 <__sfp+0x74>)
 800e018:	6665      	str	r5, [r4, #100]	; 0x64
 800e01a:	e9c4 5500 	strd	r5, r5, [r4]
 800e01e:	60a5      	str	r5, [r4, #8]
 800e020:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e024:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e028:	2208      	movs	r2, #8
 800e02a:	4629      	mov	r1, r5
 800e02c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e030:	f7fe fe20 	bl	800cc74 <memset>
 800e034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e03c:	e7e9      	b.n	800e012 <__sfp+0x42>
 800e03e:	bf00      	nop
 800e040:	0800fe84 	.word	0x0800fe84
 800e044:	ffff0001 	.word	0xffff0001

0800e048 <_fwalk_reent>:
 800e048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e04c:	4680      	mov	r8, r0
 800e04e:	4689      	mov	r9, r1
 800e050:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e054:	2600      	movs	r6, #0
 800e056:	b914      	cbnz	r4, 800e05e <_fwalk_reent+0x16>
 800e058:	4630      	mov	r0, r6
 800e05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e05e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e062:	3f01      	subs	r7, #1
 800e064:	d501      	bpl.n	800e06a <_fwalk_reent+0x22>
 800e066:	6824      	ldr	r4, [r4, #0]
 800e068:	e7f5      	b.n	800e056 <_fwalk_reent+0xe>
 800e06a:	89ab      	ldrh	r3, [r5, #12]
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d907      	bls.n	800e080 <_fwalk_reent+0x38>
 800e070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e074:	3301      	adds	r3, #1
 800e076:	d003      	beq.n	800e080 <_fwalk_reent+0x38>
 800e078:	4629      	mov	r1, r5
 800e07a:	4640      	mov	r0, r8
 800e07c:	47c8      	blx	r9
 800e07e:	4306      	orrs	r6, r0
 800e080:	3568      	adds	r5, #104	; 0x68
 800e082:	e7ee      	b.n	800e062 <_fwalk_reent+0x1a>

0800e084 <_findenv_r>:
 800e084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e088:	4607      	mov	r7, r0
 800e08a:	468b      	mov	fp, r1
 800e08c:	4690      	mov	r8, r2
 800e08e:	f001 f96e 	bl	800f36e <__env_lock>
 800e092:	4b19      	ldr	r3, [pc, #100]	; (800e0f8 <_findenv_r+0x74>)
 800e094:	681d      	ldr	r5, [r3, #0]
 800e096:	469a      	mov	sl, r3
 800e098:	b13d      	cbz	r5, 800e0aa <_findenv_r+0x26>
 800e09a:	465c      	mov	r4, fp
 800e09c:	4623      	mov	r3, r4
 800e09e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0a2:	b32a      	cbz	r2, 800e0f0 <_findenv_r+0x6c>
 800e0a4:	2a3d      	cmp	r2, #61	; 0x3d
 800e0a6:	461c      	mov	r4, r3
 800e0a8:	d1f8      	bne.n	800e09c <_findenv_r+0x18>
 800e0aa:	4638      	mov	r0, r7
 800e0ac:	f001 f960 	bl	800f370 <__env_unlock>
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b6:	464d      	mov	r5, r9
 800e0b8:	46a9      	mov	r9, r5
 800e0ba:	f859 0b04 	ldr.w	r0, [r9], #4
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	d0f3      	beq.n	800e0aa <_findenv_r+0x26>
 800e0c2:	4622      	mov	r2, r4
 800e0c4:	4659      	mov	r1, fp
 800e0c6:	f001 f857 	bl	800f178 <strncmp>
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d1f3      	bne.n	800e0b6 <_findenv_r+0x32>
 800e0ce:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800e0d2:	191e      	adds	r6, r3, r4
 800e0d4:	5d1b      	ldrb	r3, [r3, r4]
 800e0d6:	2b3d      	cmp	r3, #61	; 0x3d
 800e0d8:	d1ed      	bne.n	800e0b6 <_findenv_r+0x32>
 800e0da:	f8da 3000 	ldr.w	r3, [sl]
 800e0de:	1aed      	subs	r5, r5, r3
 800e0e0:	10ad      	asrs	r5, r5, #2
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	f8c8 5000 	str.w	r5, [r8]
 800e0e8:	f001 f942 	bl	800f370 <__env_unlock>
 800e0ec:	1c70      	adds	r0, r6, #1
 800e0ee:	e7e0      	b.n	800e0b2 <_findenv_r+0x2e>
 800e0f0:	eba4 040b 	sub.w	r4, r4, fp
 800e0f4:	e7e0      	b.n	800e0b8 <_findenv_r+0x34>
 800e0f6:	bf00      	nop
 800e0f8:	2000025c 	.word	0x2000025c

0800e0fc <_getenv_r>:
 800e0fc:	b507      	push	{r0, r1, r2, lr}
 800e0fe:	aa01      	add	r2, sp, #4
 800e100:	f7ff ffc0 	bl	800e084 <_findenv_r>
 800e104:	b003      	add	sp, #12
 800e106:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e10c <__gettzinfo>:
 800e10c:	4800      	ldr	r0, [pc, #0]	; (800e110 <__gettzinfo+0x4>)
 800e10e:	4770      	bx	lr
 800e110:	20000098 	.word	0x20000098

0800e114 <__locale_ctype_ptr_l>:
 800e114:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e118:	4770      	bx	lr
	...

0800e11c <__locale_ctype_ptr>:
 800e11c:	4b04      	ldr	r3, [pc, #16]	; (800e130 <__locale_ctype_ptr+0x14>)
 800e11e:	4a05      	ldr	r2, [pc, #20]	; (800e134 <__locale_ctype_ptr+0x18>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	6a1b      	ldr	r3, [r3, #32]
 800e124:	2b00      	cmp	r3, #0
 800e126:	bf08      	it	eq
 800e128:	4613      	moveq	r3, r2
 800e12a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800e12e:	4770      	bx	lr
 800e130:	2000002c 	.word	0x2000002c
 800e134:	200000f0 	.word	0x200000f0

0800e138 <_lseek_r>:
 800e138:	b538      	push	{r3, r4, r5, lr}
 800e13a:	4c07      	ldr	r4, [pc, #28]	; (800e158 <_lseek_r+0x20>)
 800e13c:	4605      	mov	r5, r0
 800e13e:	4608      	mov	r0, r1
 800e140:	4611      	mov	r1, r2
 800e142:	2200      	movs	r2, #0
 800e144:	6022      	str	r2, [r4, #0]
 800e146:	461a      	mov	r2, r3
 800e148:	f001 f996 	bl	800f478 <_lseek>
 800e14c:	1c43      	adds	r3, r0, #1
 800e14e:	d102      	bne.n	800e156 <_lseek_r+0x1e>
 800e150:	6823      	ldr	r3, [r4, #0]
 800e152:	b103      	cbz	r3, 800e156 <_lseek_r+0x1e>
 800e154:	602b      	str	r3, [r5, #0]
 800e156:	bd38      	pop	{r3, r4, r5, pc}
 800e158:	2000c654 	.word	0x2000c654

0800e15c <__swhatbuf_r>:
 800e15c:	b570      	push	{r4, r5, r6, lr}
 800e15e:	460e      	mov	r6, r1
 800e160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e164:	2900      	cmp	r1, #0
 800e166:	b096      	sub	sp, #88	; 0x58
 800e168:	4614      	mov	r4, r2
 800e16a:	461d      	mov	r5, r3
 800e16c:	da07      	bge.n	800e17e <__swhatbuf_r+0x22>
 800e16e:	2300      	movs	r3, #0
 800e170:	602b      	str	r3, [r5, #0]
 800e172:	89b3      	ldrh	r3, [r6, #12]
 800e174:	061a      	lsls	r2, r3, #24
 800e176:	d410      	bmi.n	800e19a <__swhatbuf_r+0x3e>
 800e178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e17c:	e00e      	b.n	800e19c <__swhatbuf_r+0x40>
 800e17e:	466a      	mov	r2, sp
 800e180:	f001 f8f8 	bl	800f374 <_fstat_r>
 800e184:	2800      	cmp	r0, #0
 800e186:	dbf2      	blt.n	800e16e <__swhatbuf_r+0x12>
 800e188:	9a01      	ldr	r2, [sp, #4]
 800e18a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e18e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e192:	425a      	negs	r2, r3
 800e194:	415a      	adcs	r2, r3
 800e196:	602a      	str	r2, [r5, #0]
 800e198:	e7ee      	b.n	800e178 <__swhatbuf_r+0x1c>
 800e19a:	2340      	movs	r3, #64	; 0x40
 800e19c:	2000      	movs	r0, #0
 800e19e:	6023      	str	r3, [r4, #0]
 800e1a0:	b016      	add	sp, #88	; 0x58
 800e1a2:	bd70      	pop	{r4, r5, r6, pc}

0800e1a4 <__smakebuf_r>:
 800e1a4:	898b      	ldrh	r3, [r1, #12]
 800e1a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1a8:	079d      	lsls	r5, r3, #30
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	460c      	mov	r4, r1
 800e1ae:	d507      	bpl.n	800e1c0 <__smakebuf_r+0x1c>
 800e1b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1b4:	6023      	str	r3, [r4, #0]
 800e1b6:	6123      	str	r3, [r4, #16]
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	6163      	str	r3, [r4, #20]
 800e1bc:	b002      	add	sp, #8
 800e1be:	bd70      	pop	{r4, r5, r6, pc}
 800e1c0:	ab01      	add	r3, sp, #4
 800e1c2:	466a      	mov	r2, sp
 800e1c4:	f7ff ffca 	bl	800e15c <__swhatbuf_r>
 800e1c8:	9900      	ldr	r1, [sp, #0]
 800e1ca:	4605      	mov	r5, r0
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f7ff f83b 	bl	800d248 <_malloc_r>
 800e1d2:	b948      	cbnz	r0, 800e1e8 <__smakebuf_r+0x44>
 800e1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1d8:	059a      	lsls	r2, r3, #22
 800e1da:	d4ef      	bmi.n	800e1bc <__smakebuf_r+0x18>
 800e1dc:	f023 0303 	bic.w	r3, r3, #3
 800e1e0:	f043 0302 	orr.w	r3, r3, #2
 800e1e4:	81a3      	strh	r3, [r4, #12]
 800e1e6:	e7e3      	b.n	800e1b0 <__smakebuf_r+0xc>
 800e1e8:	4b0d      	ldr	r3, [pc, #52]	; (800e220 <__smakebuf_r+0x7c>)
 800e1ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800e1ec:	89a3      	ldrh	r3, [r4, #12]
 800e1ee:	6020      	str	r0, [r4, #0]
 800e1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f4:	81a3      	strh	r3, [r4, #12]
 800e1f6:	9b00      	ldr	r3, [sp, #0]
 800e1f8:	6163      	str	r3, [r4, #20]
 800e1fa:	9b01      	ldr	r3, [sp, #4]
 800e1fc:	6120      	str	r0, [r4, #16]
 800e1fe:	b15b      	cbz	r3, 800e218 <__smakebuf_r+0x74>
 800e200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e204:	4630      	mov	r0, r6
 800e206:	f001 f8c7 	bl	800f398 <_isatty_r>
 800e20a:	b128      	cbz	r0, 800e218 <__smakebuf_r+0x74>
 800e20c:	89a3      	ldrh	r3, [r4, #12]
 800e20e:	f023 0303 	bic.w	r3, r3, #3
 800e212:	f043 0301 	orr.w	r3, r3, #1
 800e216:	81a3      	strh	r3, [r4, #12]
 800e218:	89a3      	ldrh	r3, [r4, #12]
 800e21a:	431d      	orrs	r5, r3
 800e21c:	81a5      	strh	r5, [r4, #12]
 800e21e:	e7cd      	b.n	800e1bc <__smakebuf_r+0x18>
 800e220:	0800df39 	.word	0x0800df39

0800e224 <__ascii_mbtowc>:
 800e224:	b082      	sub	sp, #8
 800e226:	b901      	cbnz	r1, 800e22a <__ascii_mbtowc+0x6>
 800e228:	a901      	add	r1, sp, #4
 800e22a:	b142      	cbz	r2, 800e23e <__ascii_mbtowc+0x1a>
 800e22c:	b14b      	cbz	r3, 800e242 <__ascii_mbtowc+0x1e>
 800e22e:	7813      	ldrb	r3, [r2, #0]
 800e230:	600b      	str	r3, [r1, #0]
 800e232:	7812      	ldrb	r2, [r2, #0]
 800e234:	1c10      	adds	r0, r2, #0
 800e236:	bf18      	it	ne
 800e238:	2001      	movne	r0, #1
 800e23a:	b002      	add	sp, #8
 800e23c:	4770      	bx	lr
 800e23e:	4610      	mov	r0, r2
 800e240:	e7fb      	b.n	800e23a <__ascii_mbtowc+0x16>
 800e242:	f06f 0001 	mvn.w	r0, #1
 800e246:	e7f8      	b.n	800e23a <__ascii_mbtowc+0x16>

0800e248 <__malloc_lock>:
 800e248:	4770      	bx	lr

0800e24a <__malloc_unlock>:
 800e24a:	4770      	bx	lr

0800e24c <__ssputs_r>:
 800e24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e250:	688e      	ldr	r6, [r1, #8]
 800e252:	429e      	cmp	r6, r3
 800e254:	4682      	mov	sl, r0
 800e256:	460c      	mov	r4, r1
 800e258:	4690      	mov	r8, r2
 800e25a:	4699      	mov	r9, r3
 800e25c:	d837      	bhi.n	800e2ce <__ssputs_r+0x82>
 800e25e:	898a      	ldrh	r2, [r1, #12]
 800e260:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e264:	d031      	beq.n	800e2ca <__ssputs_r+0x7e>
 800e266:	6825      	ldr	r5, [r4, #0]
 800e268:	6909      	ldr	r1, [r1, #16]
 800e26a:	1a6f      	subs	r7, r5, r1
 800e26c:	6965      	ldr	r5, [r4, #20]
 800e26e:	2302      	movs	r3, #2
 800e270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e274:	fb95 f5f3 	sdiv	r5, r5, r3
 800e278:	f109 0301 	add.w	r3, r9, #1
 800e27c:	443b      	add	r3, r7
 800e27e:	429d      	cmp	r5, r3
 800e280:	bf38      	it	cc
 800e282:	461d      	movcc	r5, r3
 800e284:	0553      	lsls	r3, r2, #21
 800e286:	d530      	bpl.n	800e2ea <__ssputs_r+0x9e>
 800e288:	4629      	mov	r1, r5
 800e28a:	f7fe ffdd 	bl	800d248 <_malloc_r>
 800e28e:	4606      	mov	r6, r0
 800e290:	b950      	cbnz	r0, 800e2a8 <__ssputs_r+0x5c>
 800e292:	230c      	movs	r3, #12
 800e294:	f8ca 3000 	str.w	r3, [sl]
 800e298:	89a3      	ldrh	r3, [r4, #12]
 800e29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e29e:	81a3      	strh	r3, [r4, #12]
 800e2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2a8:	463a      	mov	r2, r7
 800e2aa:	6921      	ldr	r1, [r4, #16]
 800e2ac:	f7fe fcd7 	bl	800cc5e <memcpy>
 800e2b0:	89a3      	ldrh	r3, [r4, #12]
 800e2b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2ba:	81a3      	strh	r3, [r4, #12]
 800e2bc:	6126      	str	r6, [r4, #16]
 800e2be:	6165      	str	r5, [r4, #20]
 800e2c0:	443e      	add	r6, r7
 800e2c2:	1bed      	subs	r5, r5, r7
 800e2c4:	6026      	str	r6, [r4, #0]
 800e2c6:	60a5      	str	r5, [r4, #8]
 800e2c8:	464e      	mov	r6, r9
 800e2ca:	454e      	cmp	r6, r9
 800e2cc:	d900      	bls.n	800e2d0 <__ssputs_r+0x84>
 800e2ce:	464e      	mov	r6, r9
 800e2d0:	4632      	mov	r2, r6
 800e2d2:	4641      	mov	r1, r8
 800e2d4:	6820      	ldr	r0, [r4, #0]
 800e2d6:	f001 f86f 	bl	800f3b8 <memmove>
 800e2da:	68a3      	ldr	r3, [r4, #8]
 800e2dc:	1b9b      	subs	r3, r3, r6
 800e2de:	60a3      	str	r3, [r4, #8]
 800e2e0:	6823      	ldr	r3, [r4, #0]
 800e2e2:	441e      	add	r6, r3
 800e2e4:	6026      	str	r6, [r4, #0]
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	e7dc      	b.n	800e2a4 <__ssputs_r+0x58>
 800e2ea:	462a      	mov	r2, r5
 800e2ec:	f001 f87d 	bl	800f3ea <_realloc_r>
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	d1e2      	bne.n	800e2bc <__ssputs_r+0x70>
 800e2f6:	6921      	ldr	r1, [r4, #16]
 800e2f8:	4650      	mov	r0, sl
 800e2fa:	f7fe ff57 	bl	800d1ac <_free_r>
 800e2fe:	e7c8      	b.n	800e292 <__ssputs_r+0x46>

0800e300 <_svfiprintf_r>:
 800e300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e304:	461d      	mov	r5, r3
 800e306:	898b      	ldrh	r3, [r1, #12]
 800e308:	061f      	lsls	r7, r3, #24
 800e30a:	b09d      	sub	sp, #116	; 0x74
 800e30c:	4680      	mov	r8, r0
 800e30e:	460c      	mov	r4, r1
 800e310:	4616      	mov	r6, r2
 800e312:	d50f      	bpl.n	800e334 <_svfiprintf_r+0x34>
 800e314:	690b      	ldr	r3, [r1, #16]
 800e316:	b96b      	cbnz	r3, 800e334 <_svfiprintf_r+0x34>
 800e318:	2140      	movs	r1, #64	; 0x40
 800e31a:	f7fe ff95 	bl	800d248 <_malloc_r>
 800e31e:	6020      	str	r0, [r4, #0]
 800e320:	6120      	str	r0, [r4, #16]
 800e322:	b928      	cbnz	r0, 800e330 <_svfiprintf_r+0x30>
 800e324:	230c      	movs	r3, #12
 800e326:	f8c8 3000 	str.w	r3, [r8]
 800e32a:	f04f 30ff 	mov.w	r0, #4294967295
 800e32e:	e0c8      	b.n	800e4c2 <_svfiprintf_r+0x1c2>
 800e330:	2340      	movs	r3, #64	; 0x40
 800e332:	6163      	str	r3, [r4, #20]
 800e334:	2300      	movs	r3, #0
 800e336:	9309      	str	r3, [sp, #36]	; 0x24
 800e338:	2320      	movs	r3, #32
 800e33a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e33e:	2330      	movs	r3, #48	; 0x30
 800e340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e344:	9503      	str	r5, [sp, #12]
 800e346:	f04f 0b01 	mov.w	fp, #1
 800e34a:	4637      	mov	r7, r6
 800e34c:	463d      	mov	r5, r7
 800e34e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e352:	b10b      	cbz	r3, 800e358 <_svfiprintf_r+0x58>
 800e354:	2b25      	cmp	r3, #37	; 0x25
 800e356:	d13e      	bne.n	800e3d6 <_svfiprintf_r+0xd6>
 800e358:	ebb7 0a06 	subs.w	sl, r7, r6
 800e35c:	d00b      	beq.n	800e376 <_svfiprintf_r+0x76>
 800e35e:	4653      	mov	r3, sl
 800e360:	4632      	mov	r2, r6
 800e362:	4621      	mov	r1, r4
 800e364:	4640      	mov	r0, r8
 800e366:	f7ff ff71 	bl	800e24c <__ssputs_r>
 800e36a:	3001      	adds	r0, #1
 800e36c:	f000 80a4 	beq.w	800e4b8 <_svfiprintf_r+0x1b8>
 800e370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e372:	4453      	add	r3, sl
 800e374:	9309      	str	r3, [sp, #36]	; 0x24
 800e376:	783b      	ldrb	r3, [r7, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	f000 809d 	beq.w	800e4b8 <_svfiprintf_r+0x1b8>
 800e37e:	2300      	movs	r3, #0
 800e380:	f04f 32ff 	mov.w	r2, #4294967295
 800e384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e388:	9304      	str	r3, [sp, #16]
 800e38a:	9307      	str	r3, [sp, #28]
 800e38c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e390:	931a      	str	r3, [sp, #104]	; 0x68
 800e392:	462f      	mov	r7, r5
 800e394:	2205      	movs	r2, #5
 800e396:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e39a:	4850      	ldr	r0, [pc, #320]	; (800e4dc <_svfiprintf_r+0x1dc>)
 800e39c:	f7f1 ff38 	bl	8000210 <memchr>
 800e3a0:	9b04      	ldr	r3, [sp, #16]
 800e3a2:	b9d0      	cbnz	r0, 800e3da <_svfiprintf_r+0xda>
 800e3a4:	06d9      	lsls	r1, r3, #27
 800e3a6:	bf44      	itt	mi
 800e3a8:	2220      	movmi	r2, #32
 800e3aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e3ae:	071a      	lsls	r2, r3, #28
 800e3b0:	bf44      	itt	mi
 800e3b2:	222b      	movmi	r2, #43	; 0x2b
 800e3b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e3b8:	782a      	ldrb	r2, [r5, #0]
 800e3ba:	2a2a      	cmp	r2, #42	; 0x2a
 800e3bc:	d015      	beq.n	800e3ea <_svfiprintf_r+0xea>
 800e3be:	9a07      	ldr	r2, [sp, #28]
 800e3c0:	462f      	mov	r7, r5
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	250a      	movs	r5, #10
 800e3c6:	4639      	mov	r1, r7
 800e3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3cc:	3b30      	subs	r3, #48	; 0x30
 800e3ce:	2b09      	cmp	r3, #9
 800e3d0:	d94d      	bls.n	800e46e <_svfiprintf_r+0x16e>
 800e3d2:	b1b8      	cbz	r0, 800e404 <_svfiprintf_r+0x104>
 800e3d4:	e00f      	b.n	800e3f6 <_svfiprintf_r+0xf6>
 800e3d6:	462f      	mov	r7, r5
 800e3d8:	e7b8      	b.n	800e34c <_svfiprintf_r+0x4c>
 800e3da:	4a40      	ldr	r2, [pc, #256]	; (800e4dc <_svfiprintf_r+0x1dc>)
 800e3dc:	1a80      	subs	r0, r0, r2
 800e3de:	fa0b f000 	lsl.w	r0, fp, r0
 800e3e2:	4318      	orrs	r0, r3
 800e3e4:	9004      	str	r0, [sp, #16]
 800e3e6:	463d      	mov	r5, r7
 800e3e8:	e7d3      	b.n	800e392 <_svfiprintf_r+0x92>
 800e3ea:	9a03      	ldr	r2, [sp, #12]
 800e3ec:	1d11      	adds	r1, r2, #4
 800e3ee:	6812      	ldr	r2, [r2, #0]
 800e3f0:	9103      	str	r1, [sp, #12]
 800e3f2:	2a00      	cmp	r2, #0
 800e3f4:	db01      	blt.n	800e3fa <_svfiprintf_r+0xfa>
 800e3f6:	9207      	str	r2, [sp, #28]
 800e3f8:	e004      	b.n	800e404 <_svfiprintf_r+0x104>
 800e3fa:	4252      	negs	r2, r2
 800e3fc:	f043 0302 	orr.w	r3, r3, #2
 800e400:	9207      	str	r2, [sp, #28]
 800e402:	9304      	str	r3, [sp, #16]
 800e404:	783b      	ldrb	r3, [r7, #0]
 800e406:	2b2e      	cmp	r3, #46	; 0x2e
 800e408:	d10c      	bne.n	800e424 <_svfiprintf_r+0x124>
 800e40a:	787b      	ldrb	r3, [r7, #1]
 800e40c:	2b2a      	cmp	r3, #42	; 0x2a
 800e40e:	d133      	bne.n	800e478 <_svfiprintf_r+0x178>
 800e410:	9b03      	ldr	r3, [sp, #12]
 800e412:	1d1a      	adds	r2, r3, #4
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	9203      	str	r2, [sp, #12]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	bfb8      	it	lt
 800e41c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e420:	3702      	adds	r7, #2
 800e422:	9305      	str	r3, [sp, #20]
 800e424:	4d2e      	ldr	r5, [pc, #184]	; (800e4e0 <_svfiprintf_r+0x1e0>)
 800e426:	7839      	ldrb	r1, [r7, #0]
 800e428:	2203      	movs	r2, #3
 800e42a:	4628      	mov	r0, r5
 800e42c:	f7f1 fef0 	bl	8000210 <memchr>
 800e430:	b138      	cbz	r0, 800e442 <_svfiprintf_r+0x142>
 800e432:	2340      	movs	r3, #64	; 0x40
 800e434:	1b40      	subs	r0, r0, r5
 800e436:	fa03 f000 	lsl.w	r0, r3, r0
 800e43a:	9b04      	ldr	r3, [sp, #16]
 800e43c:	4303      	orrs	r3, r0
 800e43e:	3701      	adds	r7, #1
 800e440:	9304      	str	r3, [sp, #16]
 800e442:	7839      	ldrb	r1, [r7, #0]
 800e444:	4827      	ldr	r0, [pc, #156]	; (800e4e4 <_svfiprintf_r+0x1e4>)
 800e446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e44a:	2206      	movs	r2, #6
 800e44c:	1c7e      	adds	r6, r7, #1
 800e44e:	f7f1 fedf 	bl	8000210 <memchr>
 800e452:	2800      	cmp	r0, #0
 800e454:	d038      	beq.n	800e4c8 <_svfiprintf_r+0x1c8>
 800e456:	4b24      	ldr	r3, [pc, #144]	; (800e4e8 <_svfiprintf_r+0x1e8>)
 800e458:	bb13      	cbnz	r3, 800e4a0 <_svfiprintf_r+0x1a0>
 800e45a:	9b03      	ldr	r3, [sp, #12]
 800e45c:	3307      	adds	r3, #7
 800e45e:	f023 0307 	bic.w	r3, r3, #7
 800e462:	3308      	adds	r3, #8
 800e464:	9303      	str	r3, [sp, #12]
 800e466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e468:	444b      	add	r3, r9
 800e46a:	9309      	str	r3, [sp, #36]	; 0x24
 800e46c:	e76d      	b.n	800e34a <_svfiprintf_r+0x4a>
 800e46e:	fb05 3202 	mla	r2, r5, r2, r3
 800e472:	2001      	movs	r0, #1
 800e474:	460f      	mov	r7, r1
 800e476:	e7a6      	b.n	800e3c6 <_svfiprintf_r+0xc6>
 800e478:	2300      	movs	r3, #0
 800e47a:	3701      	adds	r7, #1
 800e47c:	9305      	str	r3, [sp, #20]
 800e47e:	4619      	mov	r1, r3
 800e480:	250a      	movs	r5, #10
 800e482:	4638      	mov	r0, r7
 800e484:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e488:	3a30      	subs	r2, #48	; 0x30
 800e48a:	2a09      	cmp	r2, #9
 800e48c:	d903      	bls.n	800e496 <_svfiprintf_r+0x196>
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d0c8      	beq.n	800e424 <_svfiprintf_r+0x124>
 800e492:	9105      	str	r1, [sp, #20]
 800e494:	e7c6      	b.n	800e424 <_svfiprintf_r+0x124>
 800e496:	fb05 2101 	mla	r1, r5, r1, r2
 800e49a:	2301      	movs	r3, #1
 800e49c:	4607      	mov	r7, r0
 800e49e:	e7f0      	b.n	800e482 <_svfiprintf_r+0x182>
 800e4a0:	ab03      	add	r3, sp, #12
 800e4a2:	9300      	str	r3, [sp, #0]
 800e4a4:	4622      	mov	r2, r4
 800e4a6:	4b11      	ldr	r3, [pc, #68]	; (800e4ec <_svfiprintf_r+0x1ec>)
 800e4a8:	a904      	add	r1, sp, #16
 800e4aa:	4640      	mov	r0, r8
 800e4ac:	f3af 8000 	nop.w
 800e4b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e4b4:	4681      	mov	r9, r0
 800e4b6:	d1d6      	bne.n	800e466 <_svfiprintf_r+0x166>
 800e4b8:	89a3      	ldrh	r3, [r4, #12]
 800e4ba:	065b      	lsls	r3, r3, #25
 800e4bc:	f53f af35 	bmi.w	800e32a <_svfiprintf_r+0x2a>
 800e4c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4c2:	b01d      	add	sp, #116	; 0x74
 800e4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c8:	ab03      	add	r3, sp, #12
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	4b07      	ldr	r3, [pc, #28]	; (800e4ec <_svfiprintf_r+0x1ec>)
 800e4d0:	a904      	add	r1, sp, #16
 800e4d2:	4640      	mov	r0, r8
 800e4d4:	f000 fb6c 	bl	800ebb0 <_printf_i>
 800e4d8:	e7ea      	b.n	800e4b0 <_svfiprintf_r+0x1b0>
 800e4da:	bf00      	nop
 800e4dc:	0800ffec 	.word	0x0800ffec
 800e4e0:	0800fff2 	.word	0x0800fff2
 800e4e4:	0800fff6 	.word	0x0800fff6
 800e4e8:	00000000 	.word	0x00000000
 800e4ec:	0800e24d 	.word	0x0800e24d

0800e4f0 <_sungetc_r>:
 800e4f0:	b538      	push	{r3, r4, r5, lr}
 800e4f2:	1c4b      	adds	r3, r1, #1
 800e4f4:	4614      	mov	r4, r2
 800e4f6:	d103      	bne.n	800e500 <_sungetc_r+0x10>
 800e4f8:	f04f 35ff 	mov.w	r5, #4294967295
 800e4fc:	4628      	mov	r0, r5
 800e4fe:	bd38      	pop	{r3, r4, r5, pc}
 800e500:	8993      	ldrh	r3, [r2, #12]
 800e502:	f023 0320 	bic.w	r3, r3, #32
 800e506:	8193      	strh	r3, [r2, #12]
 800e508:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e50a:	6852      	ldr	r2, [r2, #4]
 800e50c:	b2cd      	uxtb	r5, r1
 800e50e:	b18b      	cbz	r3, 800e534 <_sungetc_r+0x44>
 800e510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e512:	4293      	cmp	r3, r2
 800e514:	dd08      	ble.n	800e528 <_sungetc_r+0x38>
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	1e5a      	subs	r2, r3, #1
 800e51a:	6022      	str	r2, [r4, #0]
 800e51c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e520:	6863      	ldr	r3, [r4, #4]
 800e522:	3301      	adds	r3, #1
 800e524:	6063      	str	r3, [r4, #4]
 800e526:	e7e9      	b.n	800e4fc <_sungetc_r+0xc>
 800e528:	4621      	mov	r1, r4
 800e52a:	f000 fed9 	bl	800f2e0 <__submore>
 800e52e:	2800      	cmp	r0, #0
 800e530:	d0f1      	beq.n	800e516 <_sungetc_r+0x26>
 800e532:	e7e1      	b.n	800e4f8 <_sungetc_r+0x8>
 800e534:	6921      	ldr	r1, [r4, #16]
 800e536:	6823      	ldr	r3, [r4, #0]
 800e538:	b151      	cbz	r1, 800e550 <_sungetc_r+0x60>
 800e53a:	4299      	cmp	r1, r3
 800e53c:	d208      	bcs.n	800e550 <_sungetc_r+0x60>
 800e53e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e542:	42a9      	cmp	r1, r5
 800e544:	d104      	bne.n	800e550 <_sungetc_r+0x60>
 800e546:	3b01      	subs	r3, #1
 800e548:	3201      	adds	r2, #1
 800e54a:	6023      	str	r3, [r4, #0]
 800e54c:	6062      	str	r2, [r4, #4]
 800e54e:	e7d5      	b.n	800e4fc <_sungetc_r+0xc>
 800e550:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e558:	6363      	str	r3, [r4, #52]	; 0x34
 800e55a:	2303      	movs	r3, #3
 800e55c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e55e:	4623      	mov	r3, r4
 800e560:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e564:	6023      	str	r3, [r4, #0]
 800e566:	2301      	movs	r3, #1
 800e568:	e7dc      	b.n	800e524 <_sungetc_r+0x34>

0800e56a <__ssrefill_r>:
 800e56a:	b510      	push	{r4, lr}
 800e56c:	460c      	mov	r4, r1
 800e56e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e570:	b169      	cbz	r1, 800e58e <__ssrefill_r+0x24>
 800e572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e576:	4299      	cmp	r1, r3
 800e578:	d001      	beq.n	800e57e <__ssrefill_r+0x14>
 800e57a:	f7fe fe17 	bl	800d1ac <_free_r>
 800e57e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e580:	6063      	str	r3, [r4, #4]
 800e582:	2000      	movs	r0, #0
 800e584:	6360      	str	r0, [r4, #52]	; 0x34
 800e586:	b113      	cbz	r3, 800e58e <__ssrefill_r+0x24>
 800e588:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e58a:	6023      	str	r3, [r4, #0]
 800e58c:	bd10      	pop	{r4, pc}
 800e58e:	6923      	ldr	r3, [r4, #16]
 800e590:	6023      	str	r3, [r4, #0]
 800e592:	2300      	movs	r3, #0
 800e594:	6063      	str	r3, [r4, #4]
 800e596:	89a3      	ldrh	r3, [r4, #12]
 800e598:	f043 0320 	orr.w	r3, r3, #32
 800e59c:	81a3      	strh	r3, [r4, #12]
 800e59e:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a2:	e7f3      	b.n	800e58c <__ssrefill_r+0x22>

0800e5a4 <__ssvfiscanf_r>:
 800e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800e5ac:	460c      	mov	r4, r1
 800e5ae:	2100      	movs	r1, #0
 800e5b0:	9144      	str	r1, [sp, #272]	; 0x110
 800e5b2:	9145      	str	r1, [sp, #276]	; 0x114
 800e5b4:	499f      	ldr	r1, [pc, #636]	; (800e834 <__ssvfiscanf_r+0x290>)
 800e5b6:	91a0      	str	r1, [sp, #640]	; 0x280
 800e5b8:	f10d 0804 	add.w	r8, sp, #4
 800e5bc:	499e      	ldr	r1, [pc, #632]	; (800e838 <__ssvfiscanf_r+0x294>)
 800e5be:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800e83c <__ssvfiscanf_r+0x298>
 800e5c2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e5c6:	4606      	mov	r6, r0
 800e5c8:	4692      	mov	sl, r2
 800e5ca:	91a1      	str	r1, [sp, #644]	; 0x284
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	270a      	movs	r7, #10
 800e5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	f000 812a 	beq.w	800e82e <__ssvfiscanf_r+0x28a>
 800e5da:	4655      	mov	r5, sl
 800e5dc:	f7ff fd9e 	bl	800e11c <__locale_ctype_ptr>
 800e5e0:	f815 bb01 	ldrb.w	fp, [r5], #1
 800e5e4:	4458      	add	r0, fp
 800e5e6:	7843      	ldrb	r3, [r0, #1]
 800e5e8:	f013 0308 	ands.w	r3, r3, #8
 800e5ec:	d01c      	beq.n	800e628 <__ssvfiscanf_r+0x84>
 800e5ee:	6863      	ldr	r3, [r4, #4]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	dd12      	ble.n	800e61a <__ssvfiscanf_r+0x76>
 800e5f4:	f7ff fd92 	bl	800e11c <__locale_ctype_ptr>
 800e5f8:	6823      	ldr	r3, [r4, #0]
 800e5fa:	781a      	ldrb	r2, [r3, #0]
 800e5fc:	4410      	add	r0, r2
 800e5fe:	7842      	ldrb	r2, [r0, #1]
 800e600:	0712      	lsls	r2, r2, #28
 800e602:	d401      	bmi.n	800e608 <__ssvfiscanf_r+0x64>
 800e604:	46aa      	mov	sl, r5
 800e606:	e7e3      	b.n	800e5d0 <__ssvfiscanf_r+0x2c>
 800e608:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e60a:	3201      	adds	r2, #1
 800e60c:	9245      	str	r2, [sp, #276]	; 0x114
 800e60e:	6862      	ldr	r2, [r4, #4]
 800e610:	3301      	adds	r3, #1
 800e612:	3a01      	subs	r2, #1
 800e614:	6062      	str	r2, [r4, #4]
 800e616:	6023      	str	r3, [r4, #0]
 800e618:	e7e9      	b.n	800e5ee <__ssvfiscanf_r+0x4a>
 800e61a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e61c:	4621      	mov	r1, r4
 800e61e:	4630      	mov	r0, r6
 800e620:	4798      	blx	r3
 800e622:	2800      	cmp	r0, #0
 800e624:	d0e6      	beq.n	800e5f4 <__ssvfiscanf_r+0x50>
 800e626:	e7ed      	b.n	800e604 <__ssvfiscanf_r+0x60>
 800e628:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800e62c:	f040 8082 	bne.w	800e734 <__ssvfiscanf_r+0x190>
 800e630:	9343      	str	r3, [sp, #268]	; 0x10c
 800e632:	9341      	str	r3, [sp, #260]	; 0x104
 800e634:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800e638:	2b2a      	cmp	r3, #42	; 0x2a
 800e63a:	d103      	bne.n	800e644 <__ssvfiscanf_r+0xa0>
 800e63c:	2310      	movs	r3, #16
 800e63e:	9341      	str	r3, [sp, #260]	; 0x104
 800e640:	f10a 0502 	add.w	r5, sl, #2
 800e644:	46aa      	mov	sl, r5
 800e646:	f815 1b01 	ldrb.w	r1, [r5], #1
 800e64a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e64e:	2a09      	cmp	r2, #9
 800e650:	d922      	bls.n	800e698 <__ssvfiscanf_r+0xf4>
 800e652:	2203      	movs	r2, #3
 800e654:	4879      	ldr	r0, [pc, #484]	; (800e83c <__ssvfiscanf_r+0x298>)
 800e656:	f7f1 fddb 	bl	8000210 <memchr>
 800e65a:	b138      	cbz	r0, 800e66c <__ssvfiscanf_r+0xc8>
 800e65c:	eba0 0309 	sub.w	r3, r0, r9
 800e660:	2001      	movs	r0, #1
 800e662:	4098      	lsls	r0, r3
 800e664:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e666:	4318      	orrs	r0, r3
 800e668:	9041      	str	r0, [sp, #260]	; 0x104
 800e66a:	46aa      	mov	sl, r5
 800e66c:	f89a 3000 	ldrb.w	r3, [sl]
 800e670:	2b67      	cmp	r3, #103	; 0x67
 800e672:	f10a 0501 	add.w	r5, sl, #1
 800e676:	d82b      	bhi.n	800e6d0 <__ssvfiscanf_r+0x12c>
 800e678:	2b65      	cmp	r3, #101	; 0x65
 800e67a:	f080 809f 	bcs.w	800e7bc <__ssvfiscanf_r+0x218>
 800e67e:	2b47      	cmp	r3, #71	; 0x47
 800e680:	d810      	bhi.n	800e6a4 <__ssvfiscanf_r+0x100>
 800e682:	2b45      	cmp	r3, #69	; 0x45
 800e684:	f080 809a 	bcs.w	800e7bc <__ssvfiscanf_r+0x218>
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d06c      	beq.n	800e766 <__ssvfiscanf_r+0x1c2>
 800e68c:	2b25      	cmp	r3, #37	; 0x25
 800e68e:	d051      	beq.n	800e734 <__ssvfiscanf_r+0x190>
 800e690:	2303      	movs	r3, #3
 800e692:	9347      	str	r3, [sp, #284]	; 0x11c
 800e694:	9742      	str	r7, [sp, #264]	; 0x108
 800e696:	e027      	b.n	800e6e8 <__ssvfiscanf_r+0x144>
 800e698:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e69a:	fb07 1303 	mla	r3, r7, r3, r1
 800e69e:	3b30      	subs	r3, #48	; 0x30
 800e6a0:	9343      	str	r3, [sp, #268]	; 0x10c
 800e6a2:	e7cf      	b.n	800e644 <__ssvfiscanf_r+0xa0>
 800e6a4:	2b5b      	cmp	r3, #91	; 0x5b
 800e6a6:	d06a      	beq.n	800e77e <__ssvfiscanf_r+0x1da>
 800e6a8:	d80c      	bhi.n	800e6c4 <__ssvfiscanf_r+0x120>
 800e6aa:	2b58      	cmp	r3, #88	; 0x58
 800e6ac:	d1f0      	bne.n	800e690 <__ssvfiscanf_r+0xec>
 800e6ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e6b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e6b4:	9241      	str	r2, [sp, #260]	; 0x104
 800e6b6:	2210      	movs	r2, #16
 800e6b8:	9242      	str	r2, [sp, #264]	; 0x108
 800e6ba:	2b6e      	cmp	r3, #110	; 0x6e
 800e6bc:	bf8c      	ite	hi
 800e6be:	2304      	movhi	r3, #4
 800e6c0:	2303      	movls	r3, #3
 800e6c2:	e010      	b.n	800e6e6 <__ssvfiscanf_r+0x142>
 800e6c4:	2b63      	cmp	r3, #99	; 0x63
 800e6c6:	d065      	beq.n	800e794 <__ssvfiscanf_r+0x1f0>
 800e6c8:	2b64      	cmp	r3, #100	; 0x64
 800e6ca:	d1e1      	bne.n	800e690 <__ssvfiscanf_r+0xec>
 800e6cc:	9742      	str	r7, [sp, #264]	; 0x108
 800e6ce:	e7f4      	b.n	800e6ba <__ssvfiscanf_r+0x116>
 800e6d0:	2b70      	cmp	r3, #112	; 0x70
 800e6d2:	d04b      	beq.n	800e76c <__ssvfiscanf_r+0x1c8>
 800e6d4:	d826      	bhi.n	800e724 <__ssvfiscanf_r+0x180>
 800e6d6:	2b6e      	cmp	r3, #110	; 0x6e
 800e6d8:	d062      	beq.n	800e7a0 <__ssvfiscanf_r+0x1fc>
 800e6da:	d84c      	bhi.n	800e776 <__ssvfiscanf_r+0x1d2>
 800e6dc:	2b69      	cmp	r3, #105	; 0x69
 800e6de:	d1d7      	bne.n	800e690 <__ssvfiscanf_r+0xec>
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	9342      	str	r3, [sp, #264]	; 0x108
 800e6e4:	2303      	movs	r3, #3
 800e6e6:	9347      	str	r3, [sp, #284]	; 0x11c
 800e6e8:	6863      	ldr	r3, [r4, #4]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	dd68      	ble.n	800e7c0 <__ssvfiscanf_r+0x21c>
 800e6ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e6f0:	0659      	lsls	r1, r3, #25
 800e6f2:	d407      	bmi.n	800e704 <__ssvfiscanf_r+0x160>
 800e6f4:	f7ff fd12 	bl	800e11c <__locale_ctype_ptr>
 800e6f8:	6823      	ldr	r3, [r4, #0]
 800e6fa:	781a      	ldrb	r2, [r3, #0]
 800e6fc:	4410      	add	r0, r2
 800e6fe:	7842      	ldrb	r2, [r0, #1]
 800e700:	0712      	lsls	r2, r2, #28
 800e702:	d464      	bmi.n	800e7ce <__ssvfiscanf_r+0x22a>
 800e704:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e706:	2b02      	cmp	r3, #2
 800e708:	dc73      	bgt.n	800e7f2 <__ssvfiscanf_r+0x24e>
 800e70a:	466b      	mov	r3, sp
 800e70c:	4622      	mov	r2, r4
 800e70e:	a941      	add	r1, sp, #260	; 0x104
 800e710:	4630      	mov	r0, r6
 800e712:	f000 fb5f 	bl	800edd4 <_scanf_chars>
 800e716:	2801      	cmp	r0, #1
 800e718:	f000 8089 	beq.w	800e82e <__ssvfiscanf_r+0x28a>
 800e71c:	2802      	cmp	r0, #2
 800e71e:	f47f af71 	bne.w	800e604 <__ssvfiscanf_r+0x60>
 800e722:	e01d      	b.n	800e760 <__ssvfiscanf_r+0x1bc>
 800e724:	2b75      	cmp	r3, #117	; 0x75
 800e726:	d0d1      	beq.n	800e6cc <__ssvfiscanf_r+0x128>
 800e728:	2b78      	cmp	r3, #120	; 0x78
 800e72a:	d0c0      	beq.n	800e6ae <__ssvfiscanf_r+0x10a>
 800e72c:	2b73      	cmp	r3, #115	; 0x73
 800e72e:	d1af      	bne.n	800e690 <__ssvfiscanf_r+0xec>
 800e730:	2302      	movs	r3, #2
 800e732:	e7d8      	b.n	800e6e6 <__ssvfiscanf_r+0x142>
 800e734:	6863      	ldr	r3, [r4, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	dd0c      	ble.n	800e754 <__ssvfiscanf_r+0x1b0>
 800e73a:	6823      	ldr	r3, [r4, #0]
 800e73c:	781a      	ldrb	r2, [r3, #0]
 800e73e:	455a      	cmp	r2, fp
 800e740:	d175      	bne.n	800e82e <__ssvfiscanf_r+0x28a>
 800e742:	3301      	adds	r3, #1
 800e744:	6862      	ldr	r2, [r4, #4]
 800e746:	6023      	str	r3, [r4, #0]
 800e748:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e74a:	3a01      	subs	r2, #1
 800e74c:	3301      	adds	r3, #1
 800e74e:	6062      	str	r2, [r4, #4]
 800e750:	9345      	str	r3, [sp, #276]	; 0x114
 800e752:	e757      	b.n	800e604 <__ssvfiscanf_r+0x60>
 800e754:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e756:	4621      	mov	r1, r4
 800e758:	4630      	mov	r0, r6
 800e75a:	4798      	blx	r3
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d0ec      	beq.n	800e73a <__ssvfiscanf_r+0x196>
 800e760:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e762:	2800      	cmp	r0, #0
 800e764:	d159      	bne.n	800e81a <__ssvfiscanf_r+0x276>
 800e766:	f04f 30ff 	mov.w	r0, #4294967295
 800e76a:	e05c      	b.n	800e826 <__ssvfiscanf_r+0x282>
 800e76c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e76e:	f042 0220 	orr.w	r2, r2, #32
 800e772:	9241      	str	r2, [sp, #260]	; 0x104
 800e774:	e79b      	b.n	800e6ae <__ssvfiscanf_r+0x10a>
 800e776:	2308      	movs	r3, #8
 800e778:	9342      	str	r3, [sp, #264]	; 0x108
 800e77a:	2304      	movs	r3, #4
 800e77c:	e7b3      	b.n	800e6e6 <__ssvfiscanf_r+0x142>
 800e77e:	4629      	mov	r1, r5
 800e780:	4640      	mov	r0, r8
 800e782:	f000 fcc7 	bl	800f114 <__sccl>
 800e786:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e78c:	9341      	str	r3, [sp, #260]	; 0x104
 800e78e:	4605      	mov	r5, r0
 800e790:	2301      	movs	r3, #1
 800e792:	e7a8      	b.n	800e6e6 <__ssvfiscanf_r+0x142>
 800e794:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e79a:	9341      	str	r3, [sp, #260]	; 0x104
 800e79c:	2300      	movs	r3, #0
 800e79e:	e7a2      	b.n	800e6e6 <__ssvfiscanf_r+0x142>
 800e7a0:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e7a2:	06c3      	lsls	r3, r0, #27
 800e7a4:	f53f af2e 	bmi.w	800e604 <__ssvfiscanf_r+0x60>
 800e7a8:	9b00      	ldr	r3, [sp, #0]
 800e7aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e7ac:	1d19      	adds	r1, r3, #4
 800e7ae:	9100      	str	r1, [sp, #0]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	07c0      	lsls	r0, r0, #31
 800e7b4:	bf4c      	ite	mi
 800e7b6:	801a      	strhmi	r2, [r3, #0]
 800e7b8:	601a      	strpl	r2, [r3, #0]
 800e7ba:	e723      	b.n	800e604 <__ssvfiscanf_r+0x60>
 800e7bc:	2305      	movs	r3, #5
 800e7be:	e792      	b.n	800e6e6 <__ssvfiscanf_r+0x142>
 800e7c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7c2:	4621      	mov	r1, r4
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	4798      	blx	r3
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d090      	beq.n	800e6ee <__ssvfiscanf_r+0x14a>
 800e7cc:	e7c8      	b.n	800e760 <__ssvfiscanf_r+0x1bc>
 800e7ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e7d0:	3201      	adds	r2, #1
 800e7d2:	9245      	str	r2, [sp, #276]	; 0x114
 800e7d4:	6862      	ldr	r2, [r4, #4]
 800e7d6:	3a01      	subs	r2, #1
 800e7d8:	2a00      	cmp	r2, #0
 800e7da:	6062      	str	r2, [r4, #4]
 800e7dc:	dd02      	ble.n	800e7e4 <__ssvfiscanf_r+0x240>
 800e7de:	3301      	adds	r3, #1
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	e787      	b.n	800e6f4 <__ssvfiscanf_r+0x150>
 800e7e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	4798      	blx	r3
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d081      	beq.n	800e6f4 <__ssvfiscanf_r+0x150>
 800e7f0:	e7b6      	b.n	800e760 <__ssvfiscanf_r+0x1bc>
 800e7f2:	2b04      	cmp	r3, #4
 800e7f4:	dc06      	bgt.n	800e804 <__ssvfiscanf_r+0x260>
 800e7f6:	466b      	mov	r3, sp
 800e7f8:	4622      	mov	r2, r4
 800e7fa:	a941      	add	r1, sp, #260	; 0x104
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	f000 fb4d 	bl	800ee9c <_scanf_i>
 800e802:	e788      	b.n	800e716 <__ssvfiscanf_r+0x172>
 800e804:	4b0e      	ldr	r3, [pc, #56]	; (800e840 <__ssvfiscanf_r+0x29c>)
 800e806:	2b00      	cmp	r3, #0
 800e808:	f43f aefc 	beq.w	800e604 <__ssvfiscanf_r+0x60>
 800e80c:	466b      	mov	r3, sp
 800e80e:	4622      	mov	r2, r4
 800e810:	a941      	add	r1, sp, #260	; 0x104
 800e812:	4630      	mov	r0, r6
 800e814:	f3af 8000 	nop.w
 800e818:	e77d      	b.n	800e716 <__ssvfiscanf_r+0x172>
 800e81a:	89a3      	ldrh	r3, [r4, #12]
 800e81c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e820:	bf18      	it	ne
 800e822:	f04f 30ff 	movne.w	r0, #4294967295
 800e826:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800e82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e82e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e830:	e7f9      	b.n	800e826 <__ssvfiscanf_r+0x282>
 800e832:	bf00      	nop
 800e834:	0800e4f1 	.word	0x0800e4f1
 800e838:	0800e56b 	.word	0x0800e56b
 800e83c:	0800fff2 	.word	0x0800fff2
 800e840:	00000000 	.word	0x00000000

0800e844 <__sfputc_r>:
 800e844:	6893      	ldr	r3, [r2, #8]
 800e846:	3b01      	subs	r3, #1
 800e848:	2b00      	cmp	r3, #0
 800e84a:	b410      	push	{r4}
 800e84c:	6093      	str	r3, [r2, #8]
 800e84e:	da08      	bge.n	800e862 <__sfputc_r+0x1e>
 800e850:	6994      	ldr	r4, [r2, #24]
 800e852:	42a3      	cmp	r3, r4
 800e854:	db01      	blt.n	800e85a <__sfputc_r+0x16>
 800e856:	290a      	cmp	r1, #10
 800e858:	d103      	bne.n	800e862 <__sfputc_r+0x1e>
 800e85a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e85e:	f7ff b9a1 	b.w	800dba4 <__swbuf_r>
 800e862:	6813      	ldr	r3, [r2, #0]
 800e864:	1c58      	adds	r0, r3, #1
 800e866:	6010      	str	r0, [r2, #0]
 800e868:	7019      	strb	r1, [r3, #0]
 800e86a:	4608      	mov	r0, r1
 800e86c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e870:	4770      	bx	lr

0800e872 <__sfputs_r>:
 800e872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e874:	4606      	mov	r6, r0
 800e876:	460f      	mov	r7, r1
 800e878:	4614      	mov	r4, r2
 800e87a:	18d5      	adds	r5, r2, r3
 800e87c:	42ac      	cmp	r4, r5
 800e87e:	d101      	bne.n	800e884 <__sfputs_r+0x12>
 800e880:	2000      	movs	r0, #0
 800e882:	e007      	b.n	800e894 <__sfputs_r+0x22>
 800e884:	463a      	mov	r2, r7
 800e886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e88a:	4630      	mov	r0, r6
 800e88c:	f7ff ffda 	bl	800e844 <__sfputc_r>
 800e890:	1c43      	adds	r3, r0, #1
 800e892:	d1f3      	bne.n	800e87c <__sfputs_r+0xa>
 800e894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e898 <_vfiprintf_r>:
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	460c      	mov	r4, r1
 800e89e:	b09d      	sub	sp, #116	; 0x74
 800e8a0:	4617      	mov	r7, r2
 800e8a2:	461d      	mov	r5, r3
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	b118      	cbz	r0, 800e8b0 <_vfiprintf_r+0x18>
 800e8a8:	6983      	ldr	r3, [r0, #24]
 800e8aa:	b90b      	cbnz	r3, 800e8b0 <_vfiprintf_r+0x18>
 800e8ac:	f7ff fb60 	bl	800df70 <__sinit>
 800e8b0:	4b7c      	ldr	r3, [pc, #496]	; (800eaa4 <_vfiprintf_r+0x20c>)
 800e8b2:	429c      	cmp	r4, r3
 800e8b4:	d158      	bne.n	800e968 <_vfiprintf_r+0xd0>
 800e8b6:	6874      	ldr	r4, [r6, #4]
 800e8b8:	89a3      	ldrh	r3, [r4, #12]
 800e8ba:	0718      	lsls	r0, r3, #28
 800e8bc:	d55e      	bpl.n	800e97c <_vfiprintf_r+0xe4>
 800e8be:	6923      	ldr	r3, [r4, #16]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d05b      	beq.n	800e97c <_vfiprintf_r+0xe4>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c8:	2320      	movs	r3, #32
 800e8ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8ce:	2330      	movs	r3, #48	; 0x30
 800e8d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8d4:	9503      	str	r5, [sp, #12]
 800e8d6:	f04f 0b01 	mov.w	fp, #1
 800e8da:	46b8      	mov	r8, r7
 800e8dc:	4645      	mov	r5, r8
 800e8de:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e8e2:	b10b      	cbz	r3, 800e8e8 <_vfiprintf_r+0x50>
 800e8e4:	2b25      	cmp	r3, #37	; 0x25
 800e8e6:	d154      	bne.n	800e992 <_vfiprintf_r+0xfa>
 800e8e8:	ebb8 0a07 	subs.w	sl, r8, r7
 800e8ec:	d00b      	beq.n	800e906 <_vfiprintf_r+0x6e>
 800e8ee:	4653      	mov	r3, sl
 800e8f0:	463a      	mov	r2, r7
 800e8f2:	4621      	mov	r1, r4
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7ff ffbc 	bl	800e872 <__sfputs_r>
 800e8fa:	3001      	adds	r0, #1
 800e8fc:	f000 80c2 	beq.w	800ea84 <_vfiprintf_r+0x1ec>
 800e900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e902:	4453      	add	r3, sl
 800e904:	9309      	str	r3, [sp, #36]	; 0x24
 800e906:	f898 3000 	ldrb.w	r3, [r8]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f000 80ba 	beq.w	800ea84 <_vfiprintf_r+0x1ec>
 800e910:	2300      	movs	r3, #0
 800e912:	f04f 32ff 	mov.w	r2, #4294967295
 800e916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e91a:	9304      	str	r3, [sp, #16]
 800e91c:	9307      	str	r3, [sp, #28]
 800e91e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e922:	931a      	str	r3, [sp, #104]	; 0x68
 800e924:	46a8      	mov	r8, r5
 800e926:	2205      	movs	r2, #5
 800e928:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e92c:	485e      	ldr	r0, [pc, #376]	; (800eaa8 <_vfiprintf_r+0x210>)
 800e92e:	f7f1 fc6f 	bl	8000210 <memchr>
 800e932:	9b04      	ldr	r3, [sp, #16]
 800e934:	bb78      	cbnz	r0, 800e996 <_vfiprintf_r+0xfe>
 800e936:	06d9      	lsls	r1, r3, #27
 800e938:	bf44      	itt	mi
 800e93a:	2220      	movmi	r2, #32
 800e93c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e940:	071a      	lsls	r2, r3, #28
 800e942:	bf44      	itt	mi
 800e944:	222b      	movmi	r2, #43	; 0x2b
 800e946:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e94a:	782a      	ldrb	r2, [r5, #0]
 800e94c:	2a2a      	cmp	r2, #42	; 0x2a
 800e94e:	d02a      	beq.n	800e9a6 <_vfiprintf_r+0x10e>
 800e950:	9a07      	ldr	r2, [sp, #28]
 800e952:	46a8      	mov	r8, r5
 800e954:	2000      	movs	r0, #0
 800e956:	250a      	movs	r5, #10
 800e958:	4641      	mov	r1, r8
 800e95a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e95e:	3b30      	subs	r3, #48	; 0x30
 800e960:	2b09      	cmp	r3, #9
 800e962:	d969      	bls.n	800ea38 <_vfiprintf_r+0x1a0>
 800e964:	b360      	cbz	r0, 800e9c0 <_vfiprintf_r+0x128>
 800e966:	e024      	b.n	800e9b2 <_vfiprintf_r+0x11a>
 800e968:	4b50      	ldr	r3, [pc, #320]	; (800eaac <_vfiprintf_r+0x214>)
 800e96a:	429c      	cmp	r4, r3
 800e96c:	d101      	bne.n	800e972 <_vfiprintf_r+0xda>
 800e96e:	68b4      	ldr	r4, [r6, #8]
 800e970:	e7a2      	b.n	800e8b8 <_vfiprintf_r+0x20>
 800e972:	4b4f      	ldr	r3, [pc, #316]	; (800eab0 <_vfiprintf_r+0x218>)
 800e974:	429c      	cmp	r4, r3
 800e976:	bf08      	it	eq
 800e978:	68f4      	ldreq	r4, [r6, #12]
 800e97a:	e79d      	b.n	800e8b8 <_vfiprintf_r+0x20>
 800e97c:	4621      	mov	r1, r4
 800e97e:	4630      	mov	r0, r6
 800e980:	f7ff f974 	bl	800dc6c <__swsetup_r>
 800e984:	2800      	cmp	r0, #0
 800e986:	d09d      	beq.n	800e8c4 <_vfiprintf_r+0x2c>
 800e988:	f04f 30ff 	mov.w	r0, #4294967295
 800e98c:	b01d      	add	sp, #116	; 0x74
 800e98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e992:	46a8      	mov	r8, r5
 800e994:	e7a2      	b.n	800e8dc <_vfiprintf_r+0x44>
 800e996:	4a44      	ldr	r2, [pc, #272]	; (800eaa8 <_vfiprintf_r+0x210>)
 800e998:	1a80      	subs	r0, r0, r2
 800e99a:	fa0b f000 	lsl.w	r0, fp, r0
 800e99e:	4318      	orrs	r0, r3
 800e9a0:	9004      	str	r0, [sp, #16]
 800e9a2:	4645      	mov	r5, r8
 800e9a4:	e7be      	b.n	800e924 <_vfiprintf_r+0x8c>
 800e9a6:	9a03      	ldr	r2, [sp, #12]
 800e9a8:	1d11      	adds	r1, r2, #4
 800e9aa:	6812      	ldr	r2, [r2, #0]
 800e9ac:	9103      	str	r1, [sp, #12]
 800e9ae:	2a00      	cmp	r2, #0
 800e9b0:	db01      	blt.n	800e9b6 <_vfiprintf_r+0x11e>
 800e9b2:	9207      	str	r2, [sp, #28]
 800e9b4:	e004      	b.n	800e9c0 <_vfiprintf_r+0x128>
 800e9b6:	4252      	negs	r2, r2
 800e9b8:	f043 0302 	orr.w	r3, r3, #2
 800e9bc:	9207      	str	r2, [sp, #28]
 800e9be:	9304      	str	r3, [sp, #16]
 800e9c0:	f898 3000 	ldrb.w	r3, [r8]
 800e9c4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9c6:	d10e      	bne.n	800e9e6 <_vfiprintf_r+0x14e>
 800e9c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e9cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e9ce:	d138      	bne.n	800ea42 <_vfiprintf_r+0x1aa>
 800e9d0:	9b03      	ldr	r3, [sp, #12]
 800e9d2:	1d1a      	adds	r2, r3, #4
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	9203      	str	r2, [sp, #12]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	bfb8      	it	lt
 800e9dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9e0:	f108 0802 	add.w	r8, r8, #2
 800e9e4:	9305      	str	r3, [sp, #20]
 800e9e6:	4d33      	ldr	r5, [pc, #204]	; (800eab4 <_vfiprintf_r+0x21c>)
 800e9e8:	f898 1000 	ldrb.w	r1, [r8]
 800e9ec:	2203      	movs	r2, #3
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	f7f1 fc0e 	bl	8000210 <memchr>
 800e9f4:	b140      	cbz	r0, 800ea08 <_vfiprintf_r+0x170>
 800e9f6:	2340      	movs	r3, #64	; 0x40
 800e9f8:	1b40      	subs	r0, r0, r5
 800e9fa:	fa03 f000 	lsl.w	r0, r3, r0
 800e9fe:	9b04      	ldr	r3, [sp, #16]
 800ea00:	4303      	orrs	r3, r0
 800ea02:	f108 0801 	add.w	r8, r8, #1
 800ea06:	9304      	str	r3, [sp, #16]
 800ea08:	f898 1000 	ldrb.w	r1, [r8]
 800ea0c:	482a      	ldr	r0, [pc, #168]	; (800eab8 <_vfiprintf_r+0x220>)
 800ea0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea12:	2206      	movs	r2, #6
 800ea14:	f108 0701 	add.w	r7, r8, #1
 800ea18:	f7f1 fbfa 	bl	8000210 <memchr>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	d037      	beq.n	800ea90 <_vfiprintf_r+0x1f8>
 800ea20:	4b26      	ldr	r3, [pc, #152]	; (800eabc <_vfiprintf_r+0x224>)
 800ea22:	bb1b      	cbnz	r3, 800ea6c <_vfiprintf_r+0x1d4>
 800ea24:	9b03      	ldr	r3, [sp, #12]
 800ea26:	3307      	adds	r3, #7
 800ea28:	f023 0307 	bic.w	r3, r3, #7
 800ea2c:	3308      	adds	r3, #8
 800ea2e:	9303      	str	r3, [sp, #12]
 800ea30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea32:	444b      	add	r3, r9
 800ea34:	9309      	str	r3, [sp, #36]	; 0x24
 800ea36:	e750      	b.n	800e8da <_vfiprintf_r+0x42>
 800ea38:	fb05 3202 	mla	r2, r5, r2, r3
 800ea3c:	2001      	movs	r0, #1
 800ea3e:	4688      	mov	r8, r1
 800ea40:	e78a      	b.n	800e958 <_vfiprintf_r+0xc0>
 800ea42:	2300      	movs	r3, #0
 800ea44:	f108 0801 	add.w	r8, r8, #1
 800ea48:	9305      	str	r3, [sp, #20]
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	250a      	movs	r5, #10
 800ea4e:	4640      	mov	r0, r8
 800ea50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea54:	3a30      	subs	r2, #48	; 0x30
 800ea56:	2a09      	cmp	r2, #9
 800ea58:	d903      	bls.n	800ea62 <_vfiprintf_r+0x1ca>
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d0c3      	beq.n	800e9e6 <_vfiprintf_r+0x14e>
 800ea5e:	9105      	str	r1, [sp, #20]
 800ea60:	e7c1      	b.n	800e9e6 <_vfiprintf_r+0x14e>
 800ea62:	fb05 2101 	mla	r1, r5, r1, r2
 800ea66:	2301      	movs	r3, #1
 800ea68:	4680      	mov	r8, r0
 800ea6a:	e7f0      	b.n	800ea4e <_vfiprintf_r+0x1b6>
 800ea6c:	ab03      	add	r3, sp, #12
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	4622      	mov	r2, r4
 800ea72:	4b13      	ldr	r3, [pc, #76]	; (800eac0 <_vfiprintf_r+0x228>)
 800ea74:	a904      	add	r1, sp, #16
 800ea76:	4630      	mov	r0, r6
 800ea78:	f3af 8000 	nop.w
 800ea7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ea80:	4681      	mov	r9, r0
 800ea82:	d1d5      	bne.n	800ea30 <_vfiprintf_r+0x198>
 800ea84:	89a3      	ldrh	r3, [r4, #12]
 800ea86:	065b      	lsls	r3, r3, #25
 800ea88:	f53f af7e 	bmi.w	800e988 <_vfiprintf_r+0xf0>
 800ea8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea8e:	e77d      	b.n	800e98c <_vfiprintf_r+0xf4>
 800ea90:	ab03      	add	r3, sp, #12
 800ea92:	9300      	str	r3, [sp, #0]
 800ea94:	4622      	mov	r2, r4
 800ea96:	4b0a      	ldr	r3, [pc, #40]	; (800eac0 <_vfiprintf_r+0x228>)
 800ea98:	a904      	add	r1, sp, #16
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	f000 f888 	bl	800ebb0 <_printf_i>
 800eaa0:	e7ec      	b.n	800ea7c <_vfiprintf_r+0x1e4>
 800eaa2:	bf00      	nop
 800eaa4:	0800ff44 	.word	0x0800ff44
 800eaa8:	0800ffec 	.word	0x0800ffec
 800eaac:	0800ff64 	.word	0x0800ff64
 800eab0:	0800ff24 	.word	0x0800ff24
 800eab4:	0800fff2 	.word	0x0800fff2
 800eab8:	0800fff6 	.word	0x0800fff6
 800eabc:	00000000 	.word	0x00000000
 800eac0:	0800e873 	.word	0x0800e873

0800eac4 <_printf_common>:
 800eac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eac8:	4691      	mov	r9, r2
 800eaca:	461f      	mov	r7, r3
 800eacc:	688a      	ldr	r2, [r1, #8]
 800eace:	690b      	ldr	r3, [r1, #16]
 800ead0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ead4:	4293      	cmp	r3, r2
 800ead6:	bfb8      	it	lt
 800ead8:	4613      	movlt	r3, r2
 800eada:	f8c9 3000 	str.w	r3, [r9]
 800eade:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eae2:	4606      	mov	r6, r0
 800eae4:	460c      	mov	r4, r1
 800eae6:	b112      	cbz	r2, 800eaee <_printf_common+0x2a>
 800eae8:	3301      	adds	r3, #1
 800eaea:	f8c9 3000 	str.w	r3, [r9]
 800eaee:	6823      	ldr	r3, [r4, #0]
 800eaf0:	0699      	lsls	r1, r3, #26
 800eaf2:	bf42      	ittt	mi
 800eaf4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eaf8:	3302      	addmi	r3, #2
 800eafa:	f8c9 3000 	strmi.w	r3, [r9]
 800eafe:	6825      	ldr	r5, [r4, #0]
 800eb00:	f015 0506 	ands.w	r5, r5, #6
 800eb04:	d107      	bne.n	800eb16 <_printf_common+0x52>
 800eb06:	f104 0a19 	add.w	sl, r4, #25
 800eb0a:	68e3      	ldr	r3, [r4, #12]
 800eb0c:	f8d9 2000 	ldr.w	r2, [r9]
 800eb10:	1a9b      	subs	r3, r3, r2
 800eb12:	42ab      	cmp	r3, r5
 800eb14:	dc28      	bgt.n	800eb68 <_printf_common+0xa4>
 800eb16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eb1a:	6822      	ldr	r2, [r4, #0]
 800eb1c:	3300      	adds	r3, #0
 800eb1e:	bf18      	it	ne
 800eb20:	2301      	movne	r3, #1
 800eb22:	0692      	lsls	r2, r2, #26
 800eb24:	d42d      	bmi.n	800eb82 <_printf_common+0xbe>
 800eb26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb2a:	4639      	mov	r1, r7
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	47c0      	blx	r8
 800eb30:	3001      	adds	r0, #1
 800eb32:	d020      	beq.n	800eb76 <_printf_common+0xb2>
 800eb34:	6823      	ldr	r3, [r4, #0]
 800eb36:	68e5      	ldr	r5, [r4, #12]
 800eb38:	f8d9 2000 	ldr.w	r2, [r9]
 800eb3c:	f003 0306 	and.w	r3, r3, #6
 800eb40:	2b04      	cmp	r3, #4
 800eb42:	bf08      	it	eq
 800eb44:	1aad      	subeq	r5, r5, r2
 800eb46:	68a3      	ldr	r3, [r4, #8]
 800eb48:	6922      	ldr	r2, [r4, #16]
 800eb4a:	bf0c      	ite	eq
 800eb4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb50:	2500      	movne	r5, #0
 800eb52:	4293      	cmp	r3, r2
 800eb54:	bfc4      	itt	gt
 800eb56:	1a9b      	subgt	r3, r3, r2
 800eb58:	18ed      	addgt	r5, r5, r3
 800eb5a:	f04f 0900 	mov.w	r9, #0
 800eb5e:	341a      	adds	r4, #26
 800eb60:	454d      	cmp	r5, r9
 800eb62:	d11a      	bne.n	800eb9a <_printf_common+0xd6>
 800eb64:	2000      	movs	r0, #0
 800eb66:	e008      	b.n	800eb7a <_printf_common+0xb6>
 800eb68:	2301      	movs	r3, #1
 800eb6a:	4652      	mov	r2, sl
 800eb6c:	4639      	mov	r1, r7
 800eb6e:	4630      	mov	r0, r6
 800eb70:	47c0      	blx	r8
 800eb72:	3001      	adds	r0, #1
 800eb74:	d103      	bne.n	800eb7e <_printf_common+0xba>
 800eb76:	f04f 30ff 	mov.w	r0, #4294967295
 800eb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb7e:	3501      	adds	r5, #1
 800eb80:	e7c3      	b.n	800eb0a <_printf_common+0x46>
 800eb82:	18e1      	adds	r1, r4, r3
 800eb84:	1c5a      	adds	r2, r3, #1
 800eb86:	2030      	movs	r0, #48	; 0x30
 800eb88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb8c:	4422      	add	r2, r4
 800eb8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb96:	3302      	adds	r3, #2
 800eb98:	e7c5      	b.n	800eb26 <_printf_common+0x62>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	4622      	mov	r2, r4
 800eb9e:	4639      	mov	r1, r7
 800eba0:	4630      	mov	r0, r6
 800eba2:	47c0      	blx	r8
 800eba4:	3001      	adds	r0, #1
 800eba6:	d0e6      	beq.n	800eb76 <_printf_common+0xb2>
 800eba8:	f109 0901 	add.w	r9, r9, #1
 800ebac:	e7d8      	b.n	800eb60 <_printf_common+0x9c>
	...

0800ebb0 <_printf_i>:
 800ebb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ebb8:	460c      	mov	r4, r1
 800ebba:	7e09      	ldrb	r1, [r1, #24]
 800ebbc:	b085      	sub	sp, #20
 800ebbe:	296e      	cmp	r1, #110	; 0x6e
 800ebc0:	4617      	mov	r7, r2
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	4698      	mov	r8, r3
 800ebc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebc8:	f000 80b3 	beq.w	800ed32 <_printf_i+0x182>
 800ebcc:	d822      	bhi.n	800ec14 <_printf_i+0x64>
 800ebce:	2963      	cmp	r1, #99	; 0x63
 800ebd0:	d036      	beq.n	800ec40 <_printf_i+0x90>
 800ebd2:	d80a      	bhi.n	800ebea <_printf_i+0x3a>
 800ebd4:	2900      	cmp	r1, #0
 800ebd6:	f000 80b9 	beq.w	800ed4c <_printf_i+0x19c>
 800ebda:	2958      	cmp	r1, #88	; 0x58
 800ebdc:	f000 8083 	beq.w	800ece6 <_printf_i+0x136>
 800ebe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebe4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ebe8:	e032      	b.n	800ec50 <_printf_i+0xa0>
 800ebea:	2964      	cmp	r1, #100	; 0x64
 800ebec:	d001      	beq.n	800ebf2 <_printf_i+0x42>
 800ebee:	2969      	cmp	r1, #105	; 0x69
 800ebf0:	d1f6      	bne.n	800ebe0 <_printf_i+0x30>
 800ebf2:	6820      	ldr	r0, [r4, #0]
 800ebf4:	6813      	ldr	r3, [r2, #0]
 800ebf6:	0605      	lsls	r5, r0, #24
 800ebf8:	f103 0104 	add.w	r1, r3, #4
 800ebfc:	d52a      	bpl.n	800ec54 <_printf_i+0xa4>
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	6011      	str	r1, [r2, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	da03      	bge.n	800ec0e <_printf_i+0x5e>
 800ec06:	222d      	movs	r2, #45	; 0x2d
 800ec08:	425b      	negs	r3, r3
 800ec0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ec0e:	486f      	ldr	r0, [pc, #444]	; (800edcc <_printf_i+0x21c>)
 800ec10:	220a      	movs	r2, #10
 800ec12:	e039      	b.n	800ec88 <_printf_i+0xd8>
 800ec14:	2973      	cmp	r1, #115	; 0x73
 800ec16:	f000 809d 	beq.w	800ed54 <_printf_i+0x1a4>
 800ec1a:	d808      	bhi.n	800ec2e <_printf_i+0x7e>
 800ec1c:	296f      	cmp	r1, #111	; 0x6f
 800ec1e:	d020      	beq.n	800ec62 <_printf_i+0xb2>
 800ec20:	2970      	cmp	r1, #112	; 0x70
 800ec22:	d1dd      	bne.n	800ebe0 <_printf_i+0x30>
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	f043 0320 	orr.w	r3, r3, #32
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	e003      	b.n	800ec36 <_printf_i+0x86>
 800ec2e:	2975      	cmp	r1, #117	; 0x75
 800ec30:	d017      	beq.n	800ec62 <_printf_i+0xb2>
 800ec32:	2978      	cmp	r1, #120	; 0x78
 800ec34:	d1d4      	bne.n	800ebe0 <_printf_i+0x30>
 800ec36:	2378      	movs	r3, #120	; 0x78
 800ec38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec3c:	4864      	ldr	r0, [pc, #400]	; (800edd0 <_printf_i+0x220>)
 800ec3e:	e055      	b.n	800ecec <_printf_i+0x13c>
 800ec40:	6813      	ldr	r3, [r2, #0]
 800ec42:	1d19      	adds	r1, r3, #4
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	6011      	str	r1, [r2, #0]
 800ec48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec50:	2301      	movs	r3, #1
 800ec52:	e08c      	b.n	800ed6e <_printf_i+0x1be>
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	6011      	str	r1, [r2, #0]
 800ec58:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec5c:	bf18      	it	ne
 800ec5e:	b21b      	sxthne	r3, r3
 800ec60:	e7cf      	b.n	800ec02 <_printf_i+0x52>
 800ec62:	6813      	ldr	r3, [r2, #0]
 800ec64:	6825      	ldr	r5, [r4, #0]
 800ec66:	1d18      	adds	r0, r3, #4
 800ec68:	6010      	str	r0, [r2, #0]
 800ec6a:	0628      	lsls	r0, r5, #24
 800ec6c:	d501      	bpl.n	800ec72 <_printf_i+0xc2>
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	e002      	b.n	800ec78 <_printf_i+0xc8>
 800ec72:	0668      	lsls	r0, r5, #25
 800ec74:	d5fb      	bpl.n	800ec6e <_printf_i+0xbe>
 800ec76:	881b      	ldrh	r3, [r3, #0]
 800ec78:	4854      	ldr	r0, [pc, #336]	; (800edcc <_printf_i+0x21c>)
 800ec7a:	296f      	cmp	r1, #111	; 0x6f
 800ec7c:	bf14      	ite	ne
 800ec7e:	220a      	movne	r2, #10
 800ec80:	2208      	moveq	r2, #8
 800ec82:	2100      	movs	r1, #0
 800ec84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec88:	6865      	ldr	r5, [r4, #4]
 800ec8a:	60a5      	str	r5, [r4, #8]
 800ec8c:	2d00      	cmp	r5, #0
 800ec8e:	f2c0 8095 	blt.w	800edbc <_printf_i+0x20c>
 800ec92:	6821      	ldr	r1, [r4, #0]
 800ec94:	f021 0104 	bic.w	r1, r1, #4
 800ec98:	6021      	str	r1, [r4, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d13d      	bne.n	800ed1a <_printf_i+0x16a>
 800ec9e:	2d00      	cmp	r5, #0
 800eca0:	f040 808e 	bne.w	800edc0 <_printf_i+0x210>
 800eca4:	4665      	mov	r5, ip
 800eca6:	2a08      	cmp	r2, #8
 800eca8:	d10b      	bne.n	800ecc2 <_printf_i+0x112>
 800ecaa:	6823      	ldr	r3, [r4, #0]
 800ecac:	07db      	lsls	r3, r3, #31
 800ecae:	d508      	bpl.n	800ecc2 <_printf_i+0x112>
 800ecb0:	6923      	ldr	r3, [r4, #16]
 800ecb2:	6862      	ldr	r2, [r4, #4]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	bfde      	ittt	le
 800ecb8:	2330      	movle	r3, #48	; 0x30
 800ecba:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ecbe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ecc2:	ebac 0305 	sub.w	r3, ip, r5
 800ecc6:	6123      	str	r3, [r4, #16]
 800ecc8:	f8cd 8000 	str.w	r8, [sp]
 800eccc:	463b      	mov	r3, r7
 800ecce:	aa03      	add	r2, sp, #12
 800ecd0:	4621      	mov	r1, r4
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	f7ff fef6 	bl	800eac4 <_printf_common>
 800ecd8:	3001      	adds	r0, #1
 800ecda:	d14d      	bne.n	800ed78 <_printf_i+0x1c8>
 800ecdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ece0:	b005      	add	sp, #20
 800ece2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ece6:	4839      	ldr	r0, [pc, #228]	; (800edcc <_printf_i+0x21c>)
 800ece8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ecec:	6813      	ldr	r3, [r2, #0]
 800ecee:	6821      	ldr	r1, [r4, #0]
 800ecf0:	1d1d      	adds	r5, r3, #4
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	6015      	str	r5, [r2, #0]
 800ecf6:	060a      	lsls	r2, r1, #24
 800ecf8:	d50b      	bpl.n	800ed12 <_printf_i+0x162>
 800ecfa:	07ca      	lsls	r2, r1, #31
 800ecfc:	bf44      	itt	mi
 800ecfe:	f041 0120 	orrmi.w	r1, r1, #32
 800ed02:	6021      	strmi	r1, [r4, #0]
 800ed04:	b91b      	cbnz	r3, 800ed0e <_printf_i+0x15e>
 800ed06:	6822      	ldr	r2, [r4, #0]
 800ed08:	f022 0220 	bic.w	r2, r2, #32
 800ed0c:	6022      	str	r2, [r4, #0]
 800ed0e:	2210      	movs	r2, #16
 800ed10:	e7b7      	b.n	800ec82 <_printf_i+0xd2>
 800ed12:	064d      	lsls	r5, r1, #25
 800ed14:	bf48      	it	mi
 800ed16:	b29b      	uxthmi	r3, r3
 800ed18:	e7ef      	b.n	800ecfa <_printf_i+0x14a>
 800ed1a:	4665      	mov	r5, ip
 800ed1c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed20:	fb02 3311 	mls	r3, r2, r1, r3
 800ed24:	5cc3      	ldrb	r3, [r0, r3]
 800ed26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	2900      	cmp	r1, #0
 800ed2e:	d1f5      	bne.n	800ed1c <_printf_i+0x16c>
 800ed30:	e7b9      	b.n	800eca6 <_printf_i+0xf6>
 800ed32:	6813      	ldr	r3, [r2, #0]
 800ed34:	6825      	ldr	r5, [r4, #0]
 800ed36:	6961      	ldr	r1, [r4, #20]
 800ed38:	1d18      	adds	r0, r3, #4
 800ed3a:	6010      	str	r0, [r2, #0]
 800ed3c:	0628      	lsls	r0, r5, #24
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	d501      	bpl.n	800ed46 <_printf_i+0x196>
 800ed42:	6019      	str	r1, [r3, #0]
 800ed44:	e002      	b.n	800ed4c <_printf_i+0x19c>
 800ed46:	066a      	lsls	r2, r5, #25
 800ed48:	d5fb      	bpl.n	800ed42 <_printf_i+0x192>
 800ed4a:	8019      	strh	r1, [r3, #0]
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	6123      	str	r3, [r4, #16]
 800ed50:	4665      	mov	r5, ip
 800ed52:	e7b9      	b.n	800ecc8 <_printf_i+0x118>
 800ed54:	6813      	ldr	r3, [r2, #0]
 800ed56:	1d19      	adds	r1, r3, #4
 800ed58:	6011      	str	r1, [r2, #0]
 800ed5a:	681d      	ldr	r5, [r3, #0]
 800ed5c:	6862      	ldr	r2, [r4, #4]
 800ed5e:	2100      	movs	r1, #0
 800ed60:	4628      	mov	r0, r5
 800ed62:	f7f1 fa55 	bl	8000210 <memchr>
 800ed66:	b108      	cbz	r0, 800ed6c <_printf_i+0x1bc>
 800ed68:	1b40      	subs	r0, r0, r5
 800ed6a:	6060      	str	r0, [r4, #4]
 800ed6c:	6863      	ldr	r3, [r4, #4]
 800ed6e:	6123      	str	r3, [r4, #16]
 800ed70:	2300      	movs	r3, #0
 800ed72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed76:	e7a7      	b.n	800ecc8 <_printf_i+0x118>
 800ed78:	6923      	ldr	r3, [r4, #16]
 800ed7a:	462a      	mov	r2, r5
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	4630      	mov	r0, r6
 800ed80:	47c0      	blx	r8
 800ed82:	3001      	adds	r0, #1
 800ed84:	d0aa      	beq.n	800ecdc <_printf_i+0x12c>
 800ed86:	6823      	ldr	r3, [r4, #0]
 800ed88:	079b      	lsls	r3, r3, #30
 800ed8a:	d413      	bmi.n	800edb4 <_printf_i+0x204>
 800ed8c:	68e0      	ldr	r0, [r4, #12]
 800ed8e:	9b03      	ldr	r3, [sp, #12]
 800ed90:	4298      	cmp	r0, r3
 800ed92:	bfb8      	it	lt
 800ed94:	4618      	movlt	r0, r3
 800ed96:	e7a3      	b.n	800ece0 <_printf_i+0x130>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	464a      	mov	r2, r9
 800ed9c:	4639      	mov	r1, r7
 800ed9e:	4630      	mov	r0, r6
 800eda0:	47c0      	blx	r8
 800eda2:	3001      	adds	r0, #1
 800eda4:	d09a      	beq.n	800ecdc <_printf_i+0x12c>
 800eda6:	3501      	adds	r5, #1
 800eda8:	68e3      	ldr	r3, [r4, #12]
 800edaa:	9a03      	ldr	r2, [sp, #12]
 800edac:	1a9b      	subs	r3, r3, r2
 800edae:	42ab      	cmp	r3, r5
 800edb0:	dcf2      	bgt.n	800ed98 <_printf_i+0x1e8>
 800edb2:	e7eb      	b.n	800ed8c <_printf_i+0x1dc>
 800edb4:	2500      	movs	r5, #0
 800edb6:	f104 0919 	add.w	r9, r4, #25
 800edba:	e7f5      	b.n	800eda8 <_printf_i+0x1f8>
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d1ac      	bne.n	800ed1a <_printf_i+0x16a>
 800edc0:	7803      	ldrb	r3, [r0, #0]
 800edc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800edc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edca:	e76c      	b.n	800eca6 <_printf_i+0xf6>
 800edcc:	0800fffd 	.word	0x0800fffd
 800edd0:	0801000e 	.word	0x0801000e

0800edd4 <_scanf_chars>:
 800edd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd8:	4615      	mov	r5, r2
 800edda:	688a      	ldr	r2, [r1, #8]
 800eddc:	4680      	mov	r8, r0
 800edde:	460c      	mov	r4, r1
 800ede0:	b932      	cbnz	r2, 800edf0 <_scanf_chars+0x1c>
 800ede2:	698a      	ldr	r2, [r1, #24]
 800ede4:	2a00      	cmp	r2, #0
 800ede6:	bf14      	ite	ne
 800ede8:	f04f 32ff 	movne.w	r2, #4294967295
 800edec:	2201      	moveq	r2, #1
 800edee:	608a      	str	r2, [r1, #8]
 800edf0:	6822      	ldr	r2, [r4, #0]
 800edf2:	06d1      	lsls	r1, r2, #27
 800edf4:	bf5f      	itttt	pl
 800edf6:	681a      	ldrpl	r2, [r3, #0]
 800edf8:	1d11      	addpl	r1, r2, #4
 800edfa:	6019      	strpl	r1, [r3, #0]
 800edfc:	6817      	ldrpl	r7, [r2, #0]
 800edfe:	2600      	movs	r6, #0
 800ee00:	69a3      	ldr	r3, [r4, #24]
 800ee02:	b1db      	cbz	r3, 800ee3c <_scanf_chars+0x68>
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d107      	bne.n	800ee18 <_scanf_chars+0x44>
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	6962      	ldr	r2, [r4, #20]
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	5cd3      	ldrb	r3, [r2, r3]
 800ee10:	b9a3      	cbnz	r3, 800ee3c <_scanf_chars+0x68>
 800ee12:	2e00      	cmp	r6, #0
 800ee14:	d132      	bne.n	800ee7c <_scanf_chars+0xa8>
 800ee16:	e006      	b.n	800ee26 <_scanf_chars+0x52>
 800ee18:	2b02      	cmp	r3, #2
 800ee1a:	d007      	beq.n	800ee2c <_scanf_chars+0x58>
 800ee1c:	2e00      	cmp	r6, #0
 800ee1e:	d12d      	bne.n	800ee7c <_scanf_chars+0xa8>
 800ee20:	69a3      	ldr	r3, [r4, #24]
 800ee22:	2b01      	cmp	r3, #1
 800ee24:	d12a      	bne.n	800ee7c <_scanf_chars+0xa8>
 800ee26:	2001      	movs	r0, #1
 800ee28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2c:	f7ff f976 	bl	800e11c <__locale_ctype_ptr>
 800ee30:	682b      	ldr	r3, [r5, #0]
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	4418      	add	r0, r3
 800ee36:	7843      	ldrb	r3, [r0, #1]
 800ee38:	071b      	lsls	r3, r3, #28
 800ee3a:	d4ef      	bmi.n	800ee1c <_scanf_chars+0x48>
 800ee3c:	6823      	ldr	r3, [r4, #0]
 800ee3e:	06da      	lsls	r2, r3, #27
 800ee40:	bf5e      	ittt	pl
 800ee42:	682b      	ldrpl	r3, [r5, #0]
 800ee44:	781b      	ldrbpl	r3, [r3, #0]
 800ee46:	703b      	strbpl	r3, [r7, #0]
 800ee48:	682a      	ldr	r2, [r5, #0]
 800ee4a:	686b      	ldr	r3, [r5, #4]
 800ee4c:	f102 0201 	add.w	r2, r2, #1
 800ee50:	602a      	str	r2, [r5, #0]
 800ee52:	68a2      	ldr	r2, [r4, #8]
 800ee54:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee58:	f102 32ff 	add.w	r2, r2, #4294967295
 800ee5c:	606b      	str	r3, [r5, #4]
 800ee5e:	f106 0601 	add.w	r6, r6, #1
 800ee62:	bf58      	it	pl
 800ee64:	3701      	addpl	r7, #1
 800ee66:	60a2      	str	r2, [r4, #8]
 800ee68:	b142      	cbz	r2, 800ee7c <_scanf_chars+0xa8>
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	dcc8      	bgt.n	800ee00 <_scanf_chars+0x2c>
 800ee6e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ee72:	4629      	mov	r1, r5
 800ee74:	4640      	mov	r0, r8
 800ee76:	4798      	blx	r3
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d0c1      	beq.n	800ee00 <_scanf_chars+0x2c>
 800ee7c:	6823      	ldr	r3, [r4, #0]
 800ee7e:	f013 0310 	ands.w	r3, r3, #16
 800ee82:	d105      	bne.n	800ee90 <_scanf_chars+0xbc>
 800ee84:	68e2      	ldr	r2, [r4, #12]
 800ee86:	3201      	adds	r2, #1
 800ee88:	60e2      	str	r2, [r4, #12]
 800ee8a:	69a2      	ldr	r2, [r4, #24]
 800ee8c:	b102      	cbz	r2, 800ee90 <_scanf_chars+0xbc>
 800ee8e:	703b      	strb	r3, [r7, #0]
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	441e      	add	r6, r3
 800ee94:	6126      	str	r6, [r4, #16]
 800ee96:	2000      	movs	r0, #0
 800ee98:	e7c6      	b.n	800ee28 <_scanf_chars+0x54>
	...

0800ee9c <_scanf_i>:
 800ee9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea0:	469a      	mov	sl, r3
 800eea2:	4b74      	ldr	r3, [pc, #464]	; (800f074 <_scanf_i+0x1d8>)
 800eea4:	460c      	mov	r4, r1
 800eea6:	4683      	mov	fp, r0
 800eea8:	4616      	mov	r6, r2
 800eeaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eeae:	b087      	sub	sp, #28
 800eeb0:	ab03      	add	r3, sp, #12
 800eeb2:	68a7      	ldr	r7, [r4, #8]
 800eeb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800eeb8:	4b6f      	ldr	r3, [pc, #444]	; (800f078 <_scanf_i+0x1dc>)
 800eeba:	69a1      	ldr	r1, [r4, #24]
 800eebc:	4a6f      	ldr	r2, [pc, #444]	; (800f07c <_scanf_i+0x1e0>)
 800eebe:	2903      	cmp	r1, #3
 800eec0:	bf08      	it	eq
 800eec2:	461a      	moveq	r2, r3
 800eec4:	1e7b      	subs	r3, r7, #1
 800eec6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800eeca:	bf84      	itt	hi
 800eecc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800eed0:	60a3      	strhi	r3, [r4, #8]
 800eed2:	6823      	ldr	r3, [r4, #0]
 800eed4:	9200      	str	r2, [sp, #0]
 800eed6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800eeda:	bf88      	it	hi
 800eedc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800eee0:	f104 091c 	add.w	r9, r4, #28
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	bf8c      	ite	hi
 800eee8:	197f      	addhi	r7, r7, r5
 800eeea:	2700      	movls	r7, #0
 800eeec:	464b      	mov	r3, r9
 800eeee:	f04f 0800 	mov.w	r8, #0
 800eef2:	9301      	str	r3, [sp, #4]
 800eef4:	6831      	ldr	r1, [r6, #0]
 800eef6:	ab03      	add	r3, sp, #12
 800eef8:	2202      	movs	r2, #2
 800eefa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800eefe:	7809      	ldrb	r1, [r1, #0]
 800ef00:	f7f1 f986 	bl	8000210 <memchr>
 800ef04:	9b01      	ldr	r3, [sp, #4]
 800ef06:	b330      	cbz	r0, 800ef56 <_scanf_i+0xba>
 800ef08:	f1b8 0f01 	cmp.w	r8, #1
 800ef0c:	d15a      	bne.n	800efc4 <_scanf_i+0x128>
 800ef0e:	6862      	ldr	r2, [r4, #4]
 800ef10:	b92a      	cbnz	r2, 800ef1e <_scanf_i+0x82>
 800ef12:	6822      	ldr	r2, [r4, #0]
 800ef14:	2108      	movs	r1, #8
 800ef16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef1a:	6061      	str	r1, [r4, #4]
 800ef1c:	6022      	str	r2, [r4, #0]
 800ef1e:	6822      	ldr	r2, [r4, #0]
 800ef20:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ef24:	6022      	str	r2, [r4, #0]
 800ef26:	68a2      	ldr	r2, [r4, #8]
 800ef28:	1e51      	subs	r1, r2, #1
 800ef2a:	60a1      	str	r1, [r4, #8]
 800ef2c:	b19a      	cbz	r2, 800ef56 <_scanf_i+0xba>
 800ef2e:	6832      	ldr	r2, [r6, #0]
 800ef30:	1c51      	adds	r1, r2, #1
 800ef32:	6031      	str	r1, [r6, #0]
 800ef34:	7812      	ldrb	r2, [r2, #0]
 800ef36:	701a      	strb	r2, [r3, #0]
 800ef38:	1c5d      	adds	r5, r3, #1
 800ef3a:	6873      	ldr	r3, [r6, #4]
 800ef3c:	3b01      	subs	r3, #1
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	6073      	str	r3, [r6, #4]
 800ef42:	dc07      	bgt.n	800ef54 <_scanf_i+0xb8>
 800ef44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ef48:	4631      	mov	r1, r6
 800ef4a:	4658      	mov	r0, fp
 800ef4c:	4798      	blx	r3
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	f040 8086 	bne.w	800f060 <_scanf_i+0x1c4>
 800ef54:	462b      	mov	r3, r5
 800ef56:	f108 0801 	add.w	r8, r8, #1
 800ef5a:	f1b8 0f03 	cmp.w	r8, #3
 800ef5e:	d1c8      	bne.n	800eef2 <_scanf_i+0x56>
 800ef60:	6862      	ldr	r2, [r4, #4]
 800ef62:	b90a      	cbnz	r2, 800ef68 <_scanf_i+0xcc>
 800ef64:	220a      	movs	r2, #10
 800ef66:	6062      	str	r2, [r4, #4]
 800ef68:	6862      	ldr	r2, [r4, #4]
 800ef6a:	4945      	ldr	r1, [pc, #276]	; (800f080 <_scanf_i+0x1e4>)
 800ef6c:	6960      	ldr	r0, [r4, #20]
 800ef6e:	9301      	str	r3, [sp, #4]
 800ef70:	1a89      	subs	r1, r1, r2
 800ef72:	f000 f8cf 	bl	800f114 <__sccl>
 800ef76:	9b01      	ldr	r3, [sp, #4]
 800ef78:	f04f 0800 	mov.w	r8, #0
 800ef7c:	461d      	mov	r5, r3
 800ef7e:	68a3      	ldr	r3, [r4, #8]
 800ef80:	6822      	ldr	r2, [r4, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d03a      	beq.n	800effc <_scanf_i+0x160>
 800ef86:	6831      	ldr	r1, [r6, #0]
 800ef88:	6960      	ldr	r0, [r4, #20]
 800ef8a:	f891 c000 	ldrb.w	ip, [r1]
 800ef8e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ef92:	2800      	cmp	r0, #0
 800ef94:	d032      	beq.n	800effc <_scanf_i+0x160>
 800ef96:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ef9a:	d121      	bne.n	800efe0 <_scanf_i+0x144>
 800ef9c:	0510      	lsls	r0, r2, #20
 800ef9e:	d51f      	bpl.n	800efe0 <_scanf_i+0x144>
 800efa0:	f108 0801 	add.w	r8, r8, #1
 800efa4:	b117      	cbz	r7, 800efac <_scanf_i+0x110>
 800efa6:	3301      	adds	r3, #1
 800efa8:	3f01      	subs	r7, #1
 800efaa:	60a3      	str	r3, [r4, #8]
 800efac:	6873      	ldr	r3, [r6, #4]
 800efae:	3b01      	subs	r3, #1
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	6073      	str	r3, [r6, #4]
 800efb4:	dd1b      	ble.n	800efee <_scanf_i+0x152>
 800efb6:	6833      	ldr	r3, [r6, #0]
 800efb8:	3301      	adds	r3, #1
 800efba:	6033      	str	r3, [r6, #0]
 800efbc:	68a3      	ldr	r3, [r4, #8]
 800efbe:	3b01      	subs	r3, #1
 800efc0:	60a3      	str	r3, [r4, #8]
 800efc2:	e7dc      	b.n	800ef7e <_scanf_i+0xe2>
 800efc4:	f1b8 0f02 	cmp.w	r8, #2
 800efc8:	d1ad      	bne.n	800ef26 <_scanf_i+0x8a>
 800efca:	6822      	ldr	r2, [r4, #0]
 800efcc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800efd0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800efd4:	d1bf      	bne.n	800ef56 <_scanf_i+0xba>
 800efd6:	2110      	movs	r1, #16
 800efd8:	6061      	str	r1, [r4, #4]
 800efda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800efde:	e7a1      	b.n	800ef24 <_scanf_i+0x88>
 800efe0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800efe4:	6022      	str	r2, [r4, #0]
 800efe6:	780b      	ldrb	r3, [r1, #0]
 800efe8:	702b      	strb	r3, [r5, #0]
 800efea:	3501      	adds	r5, #1
 800efec:	e7de      	b.n	800efac <_scanf_i+0x110>
 800efee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eff2:	4631      	mov	r1, r6
 800eff4:	4658      	mov	r0, fp
 800eff6:	4798      	blx	r3
 800eff8:	2800      	cmp	r0, #0
 800effa:	d0df      	beq.n	800efbc <_scanf_i+0x120>
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	05d9      	lsls	r1, r3, #23
 800f000:	d50c      	bpl.n	800f01c <_scanf_i+0x180>
 800f002:	454d      	cmp	r5, r9
 800f004:	d908      	bls.n	800f018 <_scanf_i+0x17c>
 800f006:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f00a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f00e:	4632      	mov	r2, r6
 800f010:	4658      	mov	r0, fp
 800f012:	4798      	blx	r3
 800f014:	1e6f      	subs	r7, r5, #1
 800f016:	463d      	mov	r5, r7
 800f018:	454d      	cmp	r5, r9
 800f01a:	d029      	beq.n	800f070 <_scanf_i+0x1d4>
 800f01c:	6822      	ldr	r2, [r4, #0]
 800f01e:	f012 0210 	ands.w	r2, r2, #16
 800f022:	d113      	bne.n	800f04c <_scanf_i+0x1b0>
 800f024:	702a      	strb	r2, [r5, #0]
 800f026:	6863      	ldr	r3, [r4, #4]
 800f028:	9e00      	ldr	r6, [sp, #0]
 800f02a:	4649      	mov	r1, r9
 800f02c:	4658      	mov	r0, fp
 800f02e:	47b0      	blx	r6
 800f030:	f8da 3000 	ldr.w	r3, [sl]
 800f034:	6821      	ldr	r1, [r4, #0]
 800f036:	1d1a      	adds	r2, r3, #4
 800f038:	f8ca 2000 	str.w	r2, [sl]
 800f03c:	f011 0f20 	tst.w	r1, #32
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	d010      	beq.n	800f066 <_scanf_i+0x1ca>
 800f044:	6018      	str	r0, [r3, #0]
 800f046:	68e3      	ldr	r3, [r4, #12]
 800f048:	3301      	adds	r3, #1
 800f04a:	60e3      	str	r3, [r4, #12]
 800f04c:	eba5 0509 	sub.w	r5, r5, r9
 800f050:	44a8      	add	r8, r5
 800f052:	6925      	ldr	r5, [r4, #16]
 800f054:	4445      	add	r5, r8
 800f056:	6125      	str	r5, [r4, #16]
 800f058:	2000      	movs	r0, #0
 800f05a:	b007      	add	sp, #28
 800f05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f060:	f04f 0800 	mov.w	r8, #0
 800f064:	e7ca      	b.n	800effc <_scanf_i+0x160>
 800f066:	07ca      	lsls	r2, r1, #31
 800f068:	bf4c      	ite	mi
 800f06a:	8018      	strhmi	r0, [r3, #0]
 800f06c:	6018      	strpl	r0, [r3, #0]
 800f06e:	e7ea      	b.n	800f046 <_scanf_i+0x1aa>
 800f070:	2001      	movs	r0, #1
 800f072:	e7f2      	b.n	800f05a <_scanf_i+0x1be>
 800f074:	0800f4dc 	.word	0x0800f4dc
 800f078:	0800d6f9 	.word	0x0800d6f9
 800f07c:	0800f291 	.word	0x0800f291
 800f080:	0801002f 	.word	0x0801002f

0800f084 <_putc_r>:
 800f084:	b570      	push	{r4, r5, r6, lr}
 800f086:	460d      	mov	r5, r1
 800f088:	4614      	mov	r4, r2
 800f08a:	4606      	mov	r6, r0
 800f08c:	b118      	cbz	r0, 800f096 <_putc_r+0x12>
 800f08e:	6983      	ldr	r3, [r0, #24]
 800f090:	b90b      	cbnz	r3, 800f096 <_putc_r+0x12>
 800f092:	f7fe ff6d 	bl	800df70 <__sinit>
 800f096:	4b13      	ldr	r3, [pc, #76]	; (800f0e4 <_putc_r+0x60>)
 800f098:	429c      	cmp	r4, r3
 800f09a:	d112      	bne.n	800f0c2 <_putc_r+0x3e>
 800f09c:	6874      	ldr	r4, [r6, #4]
 800f09e:	68a3      	ldr	r3, [r4, #8]
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	60a3      	str	r3, [r4, #8]
 800f0a6:	da16      	bge.n	800f0d6 <_putc_r+0x52>
 800f0a8:	69a2      	ldr	r2, [r4, #24]
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	db02      	blt.n	800f0b4 <_putc_r+0x30>
 800f0ae:	b2eb      	uxtb	r3, r5
 800f0b0:	2b0a      	cmp	r3, #10
 800f0b2:	d110      	bne.n	800f0d6 <_putc_r+0x52>
 800f0b4:	4622      	mov	r2, r4
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f0be:	f7fe bd71 	b.w	800dba4 <__swbuf_r>
 800f0c2:	4b09      	ldr	r3, [pc, #36]	; (800f0e8 <_putc_r+0x64>)
 800f0c4:	429c      	cmp	r4, r3
 800f0c6:	d101      	bne.n	800f0cc <_putc_r+0x48>
 800f0c8:	68b4      	ldr	r4, [r6, #8]
 800f0ca:	e7e8      	b.n	800f09e <_putc_r+0x1a>
 800f0cc:	4b07      	ldr	r3, [pc, #28]	; (800f0ec <_putc_r+0x68>)
 800f0ce:	429c      	cmp	r4, r3
 800f0d0:	bf08      	it	eq
 800f0d2:	68f4      	ldreq	r4, [r6, #12]
 800f0d4:	e7e3      	b.n	800f09e <_putc_r+0x1a>
 800f0d6:	6823      	ldr	r3, [r4, #0]
 800f0d8:	1c5a      	adds	r2, r3, #1
 800f0da:	6022      	str	r2, [r4, #0]
 800f0dc:	701d      	strb	r5, [r3, #0]
 800f0de:	b2e8      	uxtb	r0, r5
 800f0e0:	bd70      	pop	{r4, r5, r6, pc}
 800f0e2:	bf00      	nop
 800f0e4:	0800ff44 	.word	0x0800ff44
 800f0e8:	0800ff64 	.word	0x0800ff64
 800f0ec:	0800ff24 	.word	0x0800ff24

0800f0f0 <_read_r>:
 800f0f0:	b538      	push	{r3, r4, r5, lr}
 800f0f2:	4c07      	ldr	r4, [pc, #28]	; (800f110 <_read_r+0x20>)
 800f0f4:	4605      	mov	r5, r0
 800f0f6:	4608      	mov	r0, r1
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	6022      	str	r2, [r4, #0]
 800f0fe:	461a      	mov	r2, r3
 800f100:	f000 f9c2 	bl	800f488 <_read>
 800f104:	1c43      	adds	r3, r0, #1
 800f106:	d102      	bne.n	800f10e <_read_r+0x1e>
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	b103      	cbz	r3, 800f10e <_read_r+0x1e>
 800f10c:	602b      	str	r3, [r5, #0]
 800f10e:	bd38      	pop	{r3, r4, r5, pc}
 800f110:	2000c654 	.word	0x2000c654

0800f114 <__sccl>:
 800f114:	b570      	push	{r4, r5, r6, lr}
 800f116:	780b      	ldrb	r3, [r1, #0]
 800f118:	2b5e      	cmp	r3, #94	; 0x5e
 800f11a:	bf13      	iteet	ne
 800f11c:	1c4a      	addne	r2, r1, #1
 800f11e:	1c8a      	addeq	r2, r1, #2
 800f120:	784b      	ldrbeq	r3, [r1, #1]
 800f122:	2100      	movne	r1, #0
 800f124:	bf08      	it	eq
 800f126:	2101      	moveq	r1, #1
 800f128:	1e44      	subs	r4, r0, #1
 800f12a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800f12e:	f804 1f01 	strb.w	r1, [r4, #1]!
 800f132:	42ac      	cmp	r4, r5
 800f134:	d1fb      	bne.n	800f12e <__sccl+0x1a>
 800f136:	b913      	cbnz	r3, 800f13e <__sccl+0x2a>
 800f138:	3a01      	subs	r2, #1
 800f13a:	4610      	mov	r0, r2
 800f13c:	bd70      	pop	{r4, r5, r6, pc}
 800f13e:	f081 0401 	eor.w	r4, r1, #1
 800f142:	54c4      	strb	r4, [r0, r3]
 800f144:	1c51      	adds	r1, r2, #1
 800f146:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800f14a:	2d2d      	cmp	r5, #45	; 0x2d
 800f14c:	f101 36ff 	add.w	r6, r1, #4294967295
 800f150:	460a      	mov	r2, r1
 800f152:	d006      	beq.n	800f162 <__sccl+0x4e>
 800f154:	2d5d      	cmp	r5, #93	; 0x5d
 800f156:	d0f0      	beq.n	800f13a <__sccl+0x26>
 800f158:	b90d      	cbnz	r5, 800f15e <__sccl+0x4a>
 800f15a:	4632      	mov	r2, r6
 800f15c:	e7ed      	b.n	800f13a <__sccl+0x26>
 800f15e:	462b      	mov	r3, r5
 800f160:	e7ef      	b.n	800f142 <__sccl+0x2e>
 800f162:	780e      	ldrb	r6, [r1, #0]
 800f164:	2e5d      	cmp	r6, #93	; 0x5d
 800f166:	d0fa      	beq.n	800f15e <__sccl+0x4a>
 800f168:	42b3      	cmp	r3, r6
 800f16a:	dcf8      	bgt.n	800f15e <__sccl+0x4a>
 800f16c:	3301      	adds	r3, #1
 800f16e:	429e      	cmp	r6, r3
 800f170:	54c4      	strb	r4, [r0, r3]
 800f172:	dcfb      	bgt.n	800f16c <__sccl+0x58>
 800f174:	3102      	adds	r1, #2
 800f176:	e7e6      	b.n	800f146 <__sccl+0x32>

0800f178 <strncmp>:
 800f178:	b510      	push	{r4, lr}
 800f17a:	b16a      	cbz	r2, 800f198 <strncmp+0x20>
 800f17c:	3901      	subs	r1, #1
 800f17e:	1884      	adds	r4, r0, r2
 800f180:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f184:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f188:	4293      	cmp	r3, r2
 800f18a:	d103      	bne.n	800f194 <strncmp+0x1c>
 800f18c:	42a0      	cmp	r0, r4
 800f18e:	d001      	beq.n	800f194 <strncmp+0x1c>
 800f190:	2b00      	cmp	r3, #0
 800f192:	d1f5      	bne.n	800f180 <strncmp+0x8>
 800f194:	1a98      	subs	r0, r3, r2
 800f196:	bd10      	pop	{r4, pc}
 800f198:	4610      	mov	r0, r2
 800f19a:	e7fc      	b.n	800f196 <strncmp+0x1e>

0800f19c <_strtoul_l.isra.0>:
 800f19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1a0:	4680      	mov	r8, r0
 800f1a2:	4689      	mov	r9, r1
 800f1a4:	4692      	mov	sl, r2
 800f1a6:	461e      	mov	r6, r3
 800f1a8:	460f      	mov	r7, r1
 800f1aa:	463d      	mov	r5, r7
 800f1ac:	9808      	ldr	r0, [sp, #32]
 800f1ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1b2:	f7fe ffaf 	bl	800e114 <__locale_ctype_ptr_l>
 800f1b6:	4420      	add	r0, r4
 800f1b8:	7843      	ldrb	r3, [r0, #1]
 800f1ba:	f013 0308 	ands.w	r3, r3, #8
 800f1be:	d130      	bne.n	800f222 <_strtoul_l.isra.0+0x86>
 800f1c0:	2c2d      	cmp	r4, #45	; 0x2d
 800f1c2:	d130      	bne.n	800f226 <_strtoul_l.isra.0+0x8a>
 800f1c4:	787c      	ldrb	r4, [r7, #1]
 800f1c6:	1cbd      	adds	r5, r7, #2
 800f1c8:	2101      	movs	r1, #1
 800f1ca:	2e00      	cmp	r6, #0
 800f1cc:	d05c      	beq.n	800f288 <_strtoul_l.isra.0+0xec>
 800f1ce:	2e10      	cmp	r6, #16
 800f1d0:	d109      	bne.n	800f1e6 <_strtoul_l.isra.0+0x4a>
 800f1d2:	2c30      	cmp	r4, #48	; 0x30
 800f1d4:	d107      	bne.n	800f1e6 <_strtoul_l.isra.0+0x4a>
 800f1d6:	782b      	ldrb	r3, [r5, #0]
 800f1d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f1dc:	2b58      	cmp	r3, #88	; 0x58
 800f1de:	d14e      	bne.n	800f27e <_strtoul_l.isra.0+0xe2>
 800f1e0:	786c      	ldrb	r4, [r5, #1]
 800f1e2:	2610      	movs	r6, #16
 800f1e4:	3502      	adds	r5, #2
 800f1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	fbb2 f2f6 	udiv	r2, r2, r6
 800f1f0:	fb06 fc02 	mul.w	ip, r6, r2
 800f1f4:	ea6f 0c0c 	mvn.w	ip, ip
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f1fe:	2f09      	cmp	r7, #9
 800f200:	d817      	bhi.n	800f232 <_strtoul_l.isra.0+0x96>
 800f202:	463c      	mov	r4, r7
 800f204:	42a6      	cmp	r6, r4
 800f206:	dd23      	ble.n	800f250 <_strtoul_l.isra.0+0xb4>
 800f208:	2b00      	cmp	r3, #0
 800f20a:	db1e      	blt.n	800f24a <_strtoul_l.isra.0+0xae>
 800f20c:	4282      	cmp	r2, r0
 800f20e:	d31c      	bcc.n	800f24a <_strtoul_l.isra.0+0xae>
 800f210:	d101      	bne.n	800f216 <_strtoul_l.isra.0+0x7a>
 800f212:	45a4      	cmp	ip, r4
 800f214:	db19      	blt.n	800f24a <_strtoul_l.isra.0+0xae>
 800f216:	fb00 4006 	mla	r0, r0, r6, r4
 800f21a:	2301      	movs	r3, #1
 800f21c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f220:	e7eb      	b.n	800f1fa <_strtoul_l.isra.0+0x5e>
 800f222:	462f      	mov	r7, r5
 800f224:	e7c1      	b.n	800f1aa <_strtoul_l.isra.0+0xe>
 800f226:	2c2b      	cmp	r4, #43	; 0x2b
 800f228:	bf04      	itt	eq
 800f22a:	1cbd      	addeq	r5, r7, #2
 800f22c:	787c      	ldrbeq	r4, [r7, #1]
 800f22e:	4619      	mov	r1, r3
 800f230:	e7cb      	b.n	800f1ca <_strtoul_l.isra.0+0x2e>
 800f232:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f236:	2f19      	cmp	r7, #25
 800f238:	d801      	bhi.n	800f23e <_strtoul_l.isra.0+0xa2>
 800f23a:	3c37      	subs	r4, #55	; 0x37
 800f23c:	e7e2      	b.n	800f204 <_strtoul_l.isra.0+0x68>
 800f23e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f242:	2f19      	cmp	r7, #25
 800f244:	d804      	bhi.n	800f250 <_strtoul_l.isra.0+0xb4>
 800f246:	3c57      	subs	r4, #87	; 0x57
 800f248:	e7dc      	b.n	800f204 <_strtoul_l.isra.0+0x68>
 800f24a:	f04f 33ff 	mov.w	r3, #4294967295
 800f24e:	e7e5      	b.n	800f21c <_strtoul_l.isra.0+0x80>
 800f250:	2b00      	cmp	r3, #0
 800f252:	da09      	bge.n	800f268 <_strtoul_l.isra.0+0xcc>
 800f254:	2322      	movs	r3, #34	; 0x22
 800f256:	f8c8 3000 	str.w	r3, [r8]
 800f25a:	f04f 30ff 	mov.w	r0, #4294967295
 800f25e:	f1ba 0f00 	cmp.w	sl, #0
 800f262:	d107      	bne.n	800f274 <_strtoul_l.isra.0+0xd8>
 800f264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f268:	b101      	cbz	r1, 800f26c <_strtoul_l.isra.0+0xd0>
 800f26a:	4240      	negs	r0, r0
 800f26c:	f1ba 0f00 	cmp.w	sl, #0
 800f270:	d0f8      	beq.n	800f264 <_strtoul_l.isra.0+0xc8>
 800f272:	b10b      	cbz	r3, 800f278 <_strtoul_l.isra.0+0xdc>
 800f274:	f105 39ff 	add.w	r9, r5, #4294967295
 800f278:	f8ca 9000 	str.w	r9, [sl]
 800f27c:	e7f2      	b.n	800f264 <_strtoul_l.isra.0+0xc8>
 800f27e:	2430      	movs	r4, #48	; 0x30
 800f280:	2e00      	cmp	r6, #0
 800f282:	d1b0      	bne.n	800f1e6 <_strtoul_l.isra.0+0x4a>
 800f284:	2608      	movs	r6, #8
 800f286:	e7ae      	b.n	800f1e6 <_strtoul_l.isra.0+0x4a>
 800f288:	2c30      	cmp	r4, #48	; 0x30
 800f28a:	d0a4      	beq.n	800f1d6 <_strtoul_l.isra.0+0x3a>
 800f28c:	260a      	movs	r6, #10
 800f28e:	e7aa      	b.n	800f1e6 <_strtoul_l.isra.0+0x4a>

0800f290 <_strtoul_r>:
 800f290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f292:	4c06      	ldr	r4, [pc, #24]	; (800f2ac <_strtoul_r+0x1c>)
 800f294:	4d06      	ldr	r5, [pc, #24]	; (800f2b0 <_strtoul_r+0x20>)
 800f296:	6824      	ldr	r4, [r4, #0]
 800f298:	6a24      	ldr	r4, [r4, #32]
 800f29a:	2c00      	cmp	r4, #0
 800f29c:	bf08      	it	eq
 800f29e:	462c      	moveq	r4, r5
 800f2a0:	9400      	str	r4, [sp, #0]
 800f2a2:	f7ff ff7b 	bl	800f19c <_strtoul_l.isra.0>
 800f2a6:	b003      	add	sp, #12
 800f2a8:	bd30      	pop	{r4, r5, pc}
 800f2aa:	bf00      	nop
 800f2ac:	2000002c 	.word	0x2000002c
 800f2b0:	200000f0 	.word	0x200000f0

0800f2b4 <strtoul>:
 800f2b4:	4b08      	ldr	r3, [pc, #32]	; (800f2d8 <strtoul+0x24>)
 800f2b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2b8:	681c      	ldr	r4, [r3, #0]
 800f2ba:	4d08      	ldr	r5, [pc, #32]	; (800f2dc <strtoul+0x28>)
 800f2bc:	6a23      	ldr	r3, [r4, #32]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	bf08      	it	eq
 800f2c2:	462b      	moveq	r3, r5
 800f2c4:	9300      	str	r3, [sp, #0]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	460a      	mov	r2, r1
 800f2ca:	4601      	mov	r1, r0
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f7ff ff65 	bl	800f19c <_strtoul_l.isra.0>
 800f2d2:	b003      	add	sp, #12
 800f2d4:	bd30      	pop	{r4, r5, pc}
 800f2d6:	bf00      	nop
 800f2d8:	2000002c 	.word	0x2000002c
 800f2dc:	200000f0 	.word	0x200000f0

0800f2e0 <__submore>:
 800f2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e4:	460c      	mov	r4, r1
 800f2e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f2e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2ec:	4299      	cmp	r1, r3
 800f2ee:	d11d      	bne.n	800f32c <__submore+0x4c>
 800f2f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f2f4:	f7fd ffa8 	bl	800d248 <_malloc_r>
 800f2f8:	b918      	cbnz	r0, 800f302 <__submore+0x22>
 800f2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f306:	63a3      	str	r3, [r4, #56]	; 0x38
 800f308:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f30c:	6360      	str	r0, [r4, #52]	; 0x34
 800f30e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f312:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f316:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f31a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f31e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f322:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f326:	6020      	str	r0, [r4, #0]
 800f328:	2000      	movs	r0, #0
 800f32a:	e7e8      	b.n	800f2fe <__submore+0x1e>
 800f32c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f32e:	0077      	lsls	r7, r6, #1
 800f330:	463a      	mov	r2, r7
 800f332:	f000 f85a 	bl	800f3ea <_realloc_r>
 800f336:	4605      	mov	r5, r0
 800f338:	2800      	cmp	r0, #0
 800f33a:	d0de      	beq.n	800f2fa <__submore+0x1a>
 800f33c:	eb00 0806 	add.w	r8, r0, r6
 800f340:	4601      	mov	r1, r0
 800f342:	4632      	mov	r2, r6
 800f344:	4640      	mov	r0, r8
 800f346:	f7fd fc8a 	bl	800cc5e <memcpy>
 800f34a:	f8c4 8000 	str.w	r8, [r4]
 800f34e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800f352:	e7e9      	b.n	800f328 <__submore+0x48>

0800f354 <__ascii_wctomb>:
 800f354:	b149      	cbz	r1, 800f36a <__ascii_wctomb+0x16>
 800f356:	2aff      	cmp	r2, #255	; 0xff
 800f358:	bf85      	ittet	hi
 800f35a:	238a      	movhi	r3, #138	; 0x8a
 800f35c:	6003      	strhi	r3, [r0, #0]
 800f35e:	700a      	strbls	r2, [r1, #0]
 800f360:	f04f 30ff 	movhi.w	r0, #4294967295
 800f364:	bf98      	it	ls
 800f366:	2001      	movls	r0, #1
 800f368:	4770      	bx	lr
 800f36a:	4608      	mov	r0, r1
 800f36c:	4770      	bx	lr

0800f36e <__env_lock>:
 800f36e:	4770      	bx	lr

0800f370 <__env_unlock>:
 800f370:	4770      	bx	lr
	...

0800f374 <_fstat_r>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4c07      	ldr	r4, [pc, #28]	; (800f394 <_fstat_r+0x20>)
 800f378:	2300      	movs	r3, #0
 800f37a:	4605      	mov	r5, r0
 800f37c:	4608      	mov	r0, r1
 800f37e:	4611      	mov	r1, r2
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	f000 f869 	bl	800f458 <_fstat>
 800f386:	1c43      	adds	r3, r0, #1
 800f388:	d102      	bne.n	800f390 <_fstat_r+0x1c>
 800f38a:	6823      	ldr	r3, [r4, #0]
 800f38c:	b103      	cbz	r3, 800f390 <_fstat_r+0x1c>
 800f38e:	602b      	str	r3, [r5, #0]
 800f390:	bd38      	pop	{r3, r4, r5, pc}
 800f392:	bf00      	nop
 800f394:	2000c654 	.word	0x2000c654

0800f398 <_isatty_r>:
 800f398:	b538      	push	{r3, r4, r5, lr}
 800f39a:	4c06      	ldr	r4, [pc, #24]	; (800f3b4 <_isatty_r+0x1c>)
 800f39c:	2300      	movs	r3, #0
 800f39e:	4605      	mov	r5, r0
 800f3a0:	4608      	mov	r0, r1
 800f3a2:	6023      	str	r3, [r4, #0]
 800f3a4:	f000 f860 	bl	800f468 <_isatty>
 800f3a8:	1c43      	adds	r3, r0, #1
 800f3aa:	d102      	bne.n	800f3b2 <_isatty_r+0x1a>
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	b103      	cbz	r3, 800f3b2 <_isatty_r+0x1a>
 800f3b0:	602b      	str	r3, [r5, #0]
 800f3b2:	bd38      	pop	{r3, r4, r5, pc}
 800f3b4:	2000c654 	.word	0x2000c654

0800f3b8 <memmove>:
 800f3b8:	4288      	cmp	r0, r1
 800f3ba:	b510      	push	{r4, lr}
 800f3bc:	eb01 0302 	add.w	r3, r1, r2
 800f3c0:	d807      	bhi.n	800f3d2 <memmove+0x1a>
 800f3c2:	1e42      	subs	r2, r0, #1
 800f3c4:	4299      	cmp	r1, r3
 800f3c6:	d00a      	beq.n	800f3de <memmove+0x26>
 800f3c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f3d0:	e7f8      	b.n	800f3c4 <memmove+0xc>
 800f3d2:	4283      	cmp	r3, r0
 800f3d4:	d9f5      	bls.n	800f3c2 <memmove+0xa>
 800f3d6:	1881      	adds	r1, r0, r2
 800f3d8:	1ad2      	subs	r2, r2, r3
 800f3da:	42d3      	cmn	r3, r2
 800f3dc:	d100      	bne.n	800f3e0 <memmove+0x28>
 800f3de:	bd10      	pop	{r4, pc}
 800f3e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f3e8:	e7f7      	b.n	800f3da <memmove+0x22>

0800f3ea <_realloc_r>:
 800f3ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ec:	4607      	mov	r7, r0
 800f3ee:	4614      	mov	r4, r2
 800f3f0:	460e      	mov	r6, r1
 800f3f2:	b921      	cbnz	r1, 800f3fe <_realloc_r+0x14>
 800f3f4:	4611      	mov	r1, r2
 800f3f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f3fa:	f7fd bf25 	b.w	800d248 <_malloc_r>
 800f3fe:	b922      	cbnz	r2, 800f40a <_realloc_r+0x20>
 800f400:	f7fd fed4 	bl	800d1ac <_free_r>
 800f404:	4625      	mov	r5, r4
 800f406:	4628      	mov	r0, r5
 800f408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f40a:	f000 f814 	bl	800f436 <_malloc_usable_size_r>
 800f40e:	42a0      	cmp	r0, r4
 800f410:	d20f      	bcs.n	800f432 <_realloc_r+0x48>
 800f412:	4621      	mov	r1, r4
 800f414:	4638      	mov	r0, r7
 800f416:	f7fd ff17 	bl	800d248 <_malloc_r>
 800f41a:	4605      	mov	r5, r0
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d0f2      	beq.n	800f406 <_realloc_r+0x1c>
 800f420:	4631      	mov	r1, r6
 800f422:	4622      	mov	r2, r4
 800f424:	f7fd fc1b 	bl	800cc5e <memcpy>
 800f428:	4631      	mov	r1, r6
 800f42a:	4638      	mov	r0, r7
 800f42c:	f7fd febe 	bl	800d1ac <_free_r>
 800f430:	e7e9      	b.n	800f406 <_realloc_r+0x1c>
 800f432:	4635      	mov	r5, r6
 800f434:	e7e7      	b.n	800f406 <_realloc_r+0x1c>

0800f436 <_malloc_usable_size_r>:
 800f436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f43a:	1f18      	subs	r0, r3, #4
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	bfbc      	itt	lt
 800f440:	580b      	ldrlt	r3, [r1, r0]
 800f442:	18c0      	addlt	r0, r0, r3
 800f444:	4770      	bx	lr
	...

0800f448 <_close>:
 800f448:	4b02      	ldr	r3, [pc, #8]	; (800f454 <_close+0xc>)
 800f44a:	2258      	movs	r2, #88	; 0x58
 800f44c:	601a      	str	r2, [r3, #0]
 800f44e:	f04f 30ff 	mov.w	r0, #4294967295
 800f452:	4770      	bx	lr
 800f454:	2000c654 	.word	0x2000c654

0800f458 <_fstat>:
 800f458:	4b02      	ldr	r3, [pc, #8]	; (800f464 <_fstat+0xc>)
 800f45a:	2258      	movs	r2, #88	; 0x58
 800f45c:	601a      	str	r2, [r3, #0]
 800f45e:	f04f 30ff 	mov.w	r0, #4294967295
 800f462:	4770      	bx	lr
 800f464:	2000c654 	.word	0x2000c654

0800f468 <_isatty>:
 800f468:	4b02      	ldr	r3, [pc, #8]	; (800f474 <_isatty+0xc>)
 800f46a:	2258      	movs	r2, #88	; 0x58
 800f46c:	601a      	str	r2, [r3, #0]
 800f46e:	2000      	movs	r0, #0
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop
 800f474:	2000c654 	.word	0x2000c654

0800f478 <_lseek>:
 800f478:	4b02      	ldr	r3, [pc, #8]	; (800f484 <_lseek+0xc>)
 800f47a:	2258      	movs	r2, #88	; 0x58
 800f47c:	601a      	str	r2, [r3, #0]
 800f47e:	f04f 30ff 	mov.w	r0, #4294967295
 800f482:	4770      	bx	lr
 800f484:	2000c654 	.word	0x2000c654

0800f488 <_read>:
 800f488:	4b02      	ldr	r3, [pc, #8]	; (800f494 <_read+0xc>)
 800f48a:	2258      	movs	r2, #88	; 0x58
 800f48c:	601a      	str	r2, [r3, #0]
 800f48e:	f04f 30ff 	mov.w	r0, #4294967295
 800f492:	4770      	bx	lr
 800f494:	2000c654 	.word	0x2000c654

0800f498 <_sbrk>:
 800f498:	4b04      	ldr	r3, [pc, #16]	; (800f4ac <_sbrk+0x14>)
 800f49a:	6819      	ldr	r1, [r3, #0]
 800f49c:	4602      	mov	r2, r0
 800f49e:	b909      	cbnz	r1, 800f4a4 <_sbrk+0xc>
 800f4a0:	4903      	ldr	r1, [pc, #12]	; (800f4b0 <_sbrk+0x18>)
 800f4a2:	6019      	str	r1, [r3, #0]
 800f4a4:	6818      	ldr	r0, [r3, #0]
 800f4a6:	4402      	add	r2, r0
 800f4a8:	601a      	str	r2, [r3, #0]
 800f4aa:	4770      	bx	lr
 800f4ac:	200003e4 	.word	0x200003e4
 800f4b0:	2000c658 	.word	0x2000c658

0800f4b4 <_init>:
 800f4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4b6:	bf00      	nop
 800f4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ba:	bc08      	pop	{r3}
 800f4bc:	469e      	mov	lr, r3
 800f4be:	4770      	bx	lr

0800f4c0 <_fini>:
 800f4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c2:	bf00      	nop
 800f4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4c6:	bc08      	pop	{r3}
 800f4c8:	469e      	mov	lr, r3
 800f4ca:	4770      	bx	lr
