
_BalconyLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800753c  0800753c  0001753c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800754c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000031c  20000010  0800755c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000032c  0800755c  0002032c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000199fa  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003380  00000000  00000000  00039a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001590  00000000  00000000  0003cdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013f8  00000000  00000000  0003e350  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000098d3  00000000  00000000  0003f748  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005c3d  00000000  00000000  0004901b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004ec58  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005c64  00000000  00000000  0004ecd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007428 	.word	0x08007428

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08007428 	.word	0x08007428

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f092 0f00 	teq	r2, #0
 80004d6:	bf14      	ite	ne
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e720      	b.n	8000330 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aedc 	beq.w	80002de <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6c1      	b.n	80002de <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__gedf2>:
 800055c:	f04f 3cff 	mov.w	ip, #4294967295
 8000560:	e006      	b.n	8000570 <__cmpdf2+0x4>
 8000562:	bf00      	nop

08000564 <__ledf2>:
 8000564:	f04f 0c01 	mov.w	ip, #1
 8000568:	e002      	b.n	8000570 <__cmpdf2+0x4>
 800056a:	bf00      	nop

0800056c <__cmpdf2>:
 800056c:	f04f 0c01 	mov.w	ip, #1
 8000570:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000574:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	bf18      	it	ne
 8000582:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000586:	d01b      	beq.n	80005c0 <__cmpdf2+0x54>
 8000588:	b001      	add	sp, #4
 800058a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800058e:	bf0c      	ite	eq
 8000590:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000594:	ea91 0f03 	teqne	r1, r3
 8000598:	bf02      	ittt	eq
 800059a:	ea90 0f02 	teqeq	r0, r2
 800059e:	2000      	moveq	r0, #0
 80005a0:	4770      	bxeq	lr
 80005a2:	f110 0f00 	cmn.w	r0, #0
 80005a6:	ea91 0f03 	teq	r1, r3
 80005aa:	bf58      	it	pl
 80005ac:	4299      	cmppl	r1, r3
 80005ae:	bf08      	it	eq
 80005b0:	4290      	cmpeq	r0, r2
 80005b2:	bf2c      	ite	cs
 80005b4:	17d8      	asrcs	r0, r3, #31
 80005b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ba:	f040 0001 	orr.w	r0, r0, #1
 80005be:	4770      	bx	lr
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	d102      	bne.n	80005d0 <__cmpdf2+0x64>
 80005ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ce:	d107      	bne.n	80005e0 <__cmpdf2+0x74>
 80005d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005d8:	d1d6      	bne.n	8000588 <__cmpdf2+0x1c>
 80005da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005de:	d0d3      	beq.n	8000588 <__cmpdf2+0x1c>
 80005e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <__aeabi_cdrcmple>:
 80005e8:	4684      	mov	ip, r0
 80005ea:	4610      	mov	r0, r2
 80005ec:	4662      	mov	r2, ip
 80005ee:	468c      	mov	ip, r1
 80005f0:	4619      	mov	r1, r3
 80005f2:	4663      	mov	r3, ip
 80005f4:	e000      	b.n	80005f8 <__aeabi_cdcmpeq>
 80005f6:	bf00      	nop

080005f8 <__aeabi_cdcmpeq>:
 80005f8:	b501      	push	{r0, lr}
 80005fa:	f7ff ffb7 	bl	800056c <__cmpdf2>
 80005fe:	2800      	cmp	r0, #0
 8000600:	bf48      	it	mi
 8000602:	f110 0f00 	cmnmi.w	r0, #0
 8000606:	bd01      	pop	{r0, pc}

08000608 <__aeabi_dcmpeq>:
 8000608:	f84d ed08 	str.w	lr, [sp, #-8]!
 800060c:	f7ff fff4 	bl	80005f8 <__aeabi_cdcmpeq>
 8000610:	bf0c      	ite	eq
 8000612:	2001      	moveq	r0, #1
 8000614:	2000      	movne	r0, #0
 8000616:	f85d fb08 	ldr.w	pc, [sp], #8
 800061a:	bf00      	nop

0800061c <__aeabi_dcmplt>:
 800061c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000620:	f7ff ffea 	bl	80005f8 <__aeabi_cdcmpeq>
 8000624:	bf34      	ite	cc
 8000626:	2001      	movcc	r0, #1
 8000628:	2000      	movcs	r0, #0
 800062a:	f85d fb08 	ldr.w	pc, [sp], #8
 800062e:	bf00      	nop

08000630 <__aeabi_dcmple>:
 8000630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000634:	f7ff ffe0 	bl	80005f8 <__aeabi_cdcmpeq>
 8000638:	bf94      	ite	ls
 800063a:	2001      	movls	r0, #1
 800063c:	2000      	movhi	r0, #0
 800063e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000642:	bf00      	nop

08000644 <__aeabi_dcmpge>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff ffce 	bl	80005e8 <__aeabi_cdrcmple>
 800064c:	bf94      	ite	ls
 800064e:	2001      	movls	r0, #1
 8000650:	2000      	movhi	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_dcmpgt>:
 8000658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800065c:	f7ff ffc4 	bl	80005e8 <__aeabi_cdrcmple>
 8000660:	bf34      	ite	cc
 8000662:	2001      	movcc	r0, #1
 8000664:	2000      	movcs	r0, #0
 8000666:	f85d fb08 	ldr.w	pc, [sp], #8
 800066a:	bf00      	nop

0800066c <__aeabi_d2uiz>:
 800066c:	004a      	lsls	r2, r1, #1
 800066e:	d211      	bcs.n	8000694 <__aeabi_d2uiz+0x28>
 8000670:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000674:	d211      	bcs.n	800069a <__aeabi_d2uiz+0x2e>
 8000676:	d50d      	bpl.n	8000694 <__aeabi_d2uiz+0x28>
 8000678:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800067c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000680:	d40e      	bmi.n	80006a0 <__aeabi_d2uiz+0x34>
 8000682:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000686:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800068a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800068e:	fa23 f002 	lsr.w	r0, r3, r2
 8000692:	4770      	bx	lr
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	4770      	bx	lr
 800069a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800069e:	d102      	bne.n	80006a6 <__aeabi_d2uiz+0x3a>
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	4770      	bx	lr
 80006a6:	f04f 0000 	mov.w	r0, #0
 80006aa:	4770      	bx	lr

080006ac <__aeabi_uldivmod>:
 80006ac:	b953      	cbnz	r3, 80006c4 <__aeabi_uldivmod+0x18>
 80006ae:	b94a      	cbnz	r2, 80006c4 <__aeabi_uldivmod+0x18>
 80006b0:	2900      	cmp	r1, #0
 80006b2:	bf08      	it	eq
 80006b4:	2800      	cmpeq	r0, #0
 80006b6:	bf1c      	itt	ne
 80006b8:	f04f 31ff 	movne.w	r1, #4294967295
 80006bc:	f04f 30ff 	movne.w	r0, #4294967295
 80006c0:	f000 b97a 	b.w	80009b8 <__aeabi_idiv0>
 80006c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006cc:	f000 f806 	bl	80006dc <__udivmoddi4>
 80006d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d8:	b004      	add	sp, #16
 80006da:	4770      	bx	lr

080006dc <__udivmoddi4>:
 80006dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006e0:	468c      	mov	ip, r1
 80006e2:	460d      	mov	r5, r1
 80006e4:	4604      	mov	r4, r0
 80006e6:	9e08      	ldr	r6, [sp, #32]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d151      	bne.n	8000790 <__udivmoddi4+0xb4>
 80006ec:	428a      	cmp	r2, r1
 80006ee:	4617      	mov	r7, r2
 80006f0:	d96d      	bls.n	80007ce <__udivmoddi4+0xf2>
 80006f2:	fab2 fe82 	clz	lr, r2
 80006f6:	f1be 0f00 	cmp.w	lr, #0
 80006fa:	d00b      	beq.n	8000714 <__udivmoddi4+0x38>
 80006fc:	f1ce 0c20 	rsb	ip, lr, #32
 8000700:	fa01 f50e 	lsl.w	r5, r1, lr
 8000704:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000708:	fa02 f70e 	lsl.w	r7, r2, lr
 800070c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000710:	fa00 f40e 	lsl.w	r4, r0, lr
 8000714:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000718:	0c25      	lsrs	r5, r4, #16
 800071a:	fbbc f8fa 	udiv	r8, ip, sl
 800071e:	fa1f f987 	uxth.w	r9, r7
 8000722:	fb0a cc18 	mls	ip, sl, r8, ip
 8000726:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800072a:	fb08 f309 	mul.w	r3, r8, r9
 800072e:	42ab      	cmp	r3, r5
 8000730:	d90a      	bls.n	8000748 <__udivmoddi4+0x6c>
 8000732:	19ed      	adds	r5, r5, r7
 8000734:	f108 32ff 	add.w	r2, r8, #4294967295
 8000738:	f080 8123 	bcs.w	8000982 <__udivmoddi4+0x2a6>
 800073c:	42ab      	cmp	r3, r5
 800073e:	f240 8120 	bls.w	8000982 <__udivmoddi4+0x2a6>
 8000742:	f1a8 0802 	sub.w	r8, r8, #2
 8000746:	443d      	add	r5, r7
 8000748:	1aed      	subs	r5, r5, r3
 800074a:	b2a4      	uxth	r4, r4
 800074c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000750:	fb0a 5510 	mls	r5, sl, r0, r5
 8000754:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000758:	fb00 f909 	mul.w	r9, r0, r9
 800075c:	45a1      	cmp	r9, r4
 800075e:	d909      	bls.n	8000774 <__udivmoddi4+0x98>
 8000760:	19e4      	adds	r4, r4, r7
 8000762:	f100 33ff 	add.w	r3, r0, #4294967295
 8000766:	f080 810a 	bcs.w	800097e <__udivmoddi4+0x2a2>
 800076a:	45a1      	cmp	r9, r4
 800076c:	f240 8107 	bls.w	800097e <__udivmoddi4+0x2a2>
 8000770:	3802      	subs	r0, #2
 8000772:	443c      	add	r4, r7
 8000774:	eba4 0409 	sub.w	r4, r4, r9
 8000778:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800077c:	2100      	movs	r1, #0
 800077e:	2e00      	cmp	r6, #0
 8000780:	d061      	beq.n	8000846 <__udivmoddi4+0x16a>
 8000782:	fa24 f40e 	lsr.w	r4, r4, lr
 8000786:	2300      	movs	r3, #0
 8000788:	6034      	str	r4, [r6, #0]
 800078a:	6073      	str	r3, [r6, #4]
 800078c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000790:	428b      	cmp	r3, r1
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0xc8>
 8000794:	2e00      	cmp	r6, #0
 8000796:	d054      	beq.n	8000842 <__udivmoddi4+0x166>
 8000798:	2100      	movs	r1, #0
 800079a:	e886 0021 	stmia.w	r6, {r0, r5}
 800079e:	4608      	mov	r0, r1
 80007a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a4:	fab3 f183 	clz	r1, r3
 80007a8:	2900      	cmp	r1, #0
 80007aa:	f040 808e 	bne.w	80008ca <__udivmoddi4+0x1ee>
 80007ae:	42ab      	cmp	r3, r5
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0xdc>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80fa 	bhi.w	80009ac <__udivmoddi4+0x2d0>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb65 0503 	sbc.w	r5, r5, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	46ac      	mov	ip, r5
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d03f      	beq.n	8000846 <__udivmoddi4+0x16a>
 80007c6:	e886 1010 	stmia.w	r6, {r4, ip}
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b912      	cbnz	r2, 80007d6 <__udivmoddi4+0xfa>
 80007d0:	2701      	movs	r7, #1
 80007d2:	fbb7 f7f2 	udiv	r7, r7, r2
 80007d6:	fab7 fe87 	clz	lr, r7
 80007da:	f1be 0f00 	cmp.w	lr, #0
 80007de:	d134      	bne.n	800084a <__udivmoddi4+0x16e>
 80007e0:	1beb      	subs	r3, r5, r7
 80007e2:	0c3a      	lsrs	r2, r7, #16
 80007e4:	fa1f fc87 	uxth.w	ip, r7
 80007e8:	2101      	movs	r1, #1
 80007ea:	fbb3 f8f2 	udiv	r8, r3, r2
 80007ee:	0c25      	lsrs	r5, r4, #16
 80007f0:	fb02 3318 	mls	r3, r2, r8, r3
 80007f4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80007f8:	fb0c f308 	mul.w	r3, ip, r8
 80007fc:	42ab      	cmp	r3, r5
 80007fe:	d907      	bls.n	8000810 <__udivmoddi4+0x134>
 8000800:	19ed      	adds	r5, r5, r7
 8000802:	f108 30ff 	add.w	r0, r8, #4294967295
 8000806:	d202      	bcs.n	800080e <__udivmoddi4+0x132>
 8000808:	42ab      	cmp	r3, r5
 800080a:	f200 80d1 	bhi.w	80009b0 <__udivmoddi4+0x2d4>
 800080e:	4680      	mov	r8, r0
 8000810:	1aed      	subs	r5, r5, r3
 8000812:	b2a3      	uxth	r3, r4
 8000814:	fbb5 f0f2 	udiv	r0, r5, r2
 8000818:	fb02 5510 	mls	r5, r2, r0, r5
 800081c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000820:	fb0c fc00 	mul.w	ip, ip, r0
 8000824:	45a4      	cmp	ip, r4
 8000826:	d907      	bls.n	8000838 <__udivmoddi4+0x15c>
 8000828:	19e4      	adds	r4, r4, r7
 800082a:	f100 33ff 	add.w	r3, r0, #4294967295
 800082e:	d202      	bcs.n	8000836 <__udivmoddi4+0x15a>
 8000830:	45a4      	cmp	ip, r4
 8000832:	f200 80b8 	bhi.w	80009a6 <__udivmoddi4+0x2ca>
 8000836:	4618      	mov	r0, r3
 8000838:	eba4 040c 	sub.w	r4, r4, ip
 800083c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000840:	e79d      	b.n	800077e <__udivmoddi4+0xa2>
 8000842:	4631      	mov	r1, r6
 8000844:	4630      	mov	r0, r6
 8000846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084a:	f1ce 0420 	rsb	r4, lr, #32
 800084e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000852:	fa07 f70e 	lsl.w	r7, r7, lr
 8000856:	fa20 f804 	lsr.w	r8, r0, r4
 800085a:	0c3a      	lsrs	r2, r7, #16
 800085c:	fa25 f404 	lsr.w	r4, r5, r4
 8000860:	ea48 0803 	orr.w	r8, r8, r3
 8000864:	fbb4 f1f2 	udiv	r1, r4, r2
 8000868:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800086c:	fb02 4411 	mls	r4, r2, r1, r4
 8000870:	fa1f fc87 	uxth.w	ip, r7
 8000874:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000878:	fb01 f30c 	mul.w	r3, r1, ip
 800087c:	42ab      	cmp	r3, r5
 800087e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000882:	d909      	bls.n	8000898 <__udivmoddi4+0x1bc>
 8000884:	19ed      	adds	r5, r5, r7
 8000886:	f101 30ff 	add.w	r0, r1, #4294967295
 800088a:	f080 808a 	bcs.w	80009a2 <__udivmoddi4+0x2c6>
 800088e:	42ab      	cmp	r3, r5
 8000890:	f240 8087 	bls.w	80009a2 <__udivmoddi4+0x2c6>
 8000894:	3902      	subs	r1, #2
 8000896:	443d      	add	r5, r7
 8000898:	1aeb      	subs	r3, r5, r3
 800089a:	fa1f f588 	uxth.w	r5, r8
 800089e:	fbb3 f0f2 	udiv	r0, r3, r2
 80008a2:	fb02 3310 	mls	r3, r2, r0, r3
 80008a6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80008aa:	fb00 f30c 	mul.w	r3, r0, ip
 80008ae:	42ab      	cmp	r3, r5
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x1e6>
 80008b2:	19ed      	adds	r5, r5, r7
 80008b4:	f100 38ff 	add.w	r8, r0, #4294967295
 80008b8:	d26f      	bcs.n	800099a <__udivmoddi4+0x2be>
 80008ba:	42ab      	cmp	r3, r5
 80008bc:	d96d      	bls.n	800099a <__udivmoddi4+0x2be>
 80008be:	3802      	subs	r0, #2
 80008c0:	443d      	add	r5, r7
 80008c2:	1aeb      	subs	r3, r5, r3
 80008c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008c8:	e78f      	b.n	80007ea <__udivmoddi4+0x10e>
 80008ca:	f1c1 0720 	rsb	r7, r1, #32
 80008ce:	fa22 f807 	lsr.w	r8, r2, r7
 80008d2:	408b      	lsls	r3, r1
 80008d4:	fa05 f401 	lsl.w	r4, r5, r1
 80008d8:	ea48 0303 	orr.w	r3, r8, r3
 80008dc:	fa20 fe07 	lsr.w	lr, r0, r7
 80008e0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80008e4:	40fd      	lsrs	r5, r7
 80008e6:	ea4e 0e04 	orr.w	lr, lr, r4
 80008ea:	fbb5 f9fc 	udiv	r9, r5, ip
 80008ee:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80008f2:	fb0c 5519 	mls	r5, ip, r9, r5
 80008f6:	fa1f f883 	uxth.w	r8, r3
 80008fa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80008fe:	fb09 f408 	mul.w	r4, r9, r8
 8000902:	42ac      	cmp	r4, r5
 8000904:	fa02 f201 	lsl.w	r2, r2, r1
 8000908:	fa00 fa01 	lsl.w	sl, r0, r1
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x244>
 800090e:	18ed      	adds	r5, r5, r3
 8000910:	f109 30ff 	add.w	r0, r9, #4294967295
 8000914:	d243      	bcs.n	800099e <__udivmoddi4+0x2c2>
 8000916:	42ac      	cmp	r4, r5
 8000918:	d941      	bls.n	800099e <__udivmoddi4+0x2c2>
 800091a:	f1a9 0902 	sub.w	r9, r9, #2
 800091e:	441d      	add	r5, r3
 8000920:	1b2d      	subs	r5, r5, r4
 8000922:	fa1f fe8e 	uxth.w	lr, lr
 8000926:	fbb5 f0fc 	udiv	r0, r5, ip
 800092a:	fb0c 5510 	mls	r5, ip, r0, r5
 800092e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000932:	fb00 f808 	mul.w	r8, r0, r8
 8000936:	45a0      	cmp	r8, r4
 8000938:	d907      	bls.n	800094a <__udivmoddi4+0x26e>
 800093a:	18e4      	adds	r4, r4, r3
 800093c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000940:	d229      	bcs.n	8000996 <__udivmoddi4+0x2ba>
 8000942:	45a0      	cmp	r8, r4
 8000944:	d927      	bls.n	8000996 <__udivmoddi4+0x2ba>
 8000946:	3802      	subs	r0, #2
 8000948:	441c      	add	r4, r3
 800094a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800094e:	eba4 0408 	sub.w	r4, r4, r8
 8000952:	fba0 8902 	umull	r8, r9, r0, r2
 8000956:	454c      	cmp	r4, r9
 8000958:	46c6      	mov	lr, r8
 800095a:	464d      	mov	r5, r9
 800095c:	d315      	bcc.n	800098a <__udivmoddi4+0x2ae>
 800095e:	d012      	beq.n	8000986 <__udivmoddi4+0x2aa>
 8000960:	b156      	cbz	r6, 8000978 <__udivmoddi4+0x29c>
 8000962:	ebba 030e 	subs.w	r3, sl, lr
 8000966:	eb64 0405 	sbc.w	r4, r4, r5
 800096a:	fa04 f707 	lsl.w	r7, r4, r7
 800096e:	40cb      	lsrs	r3, r1
 8000970:	431f      	orrs	r7, r3
 8000972:	40cc      	lsrs	r4, r1
 8000974:	6037      	str	r7, [r6, #0]
 8000976:	6074      	str	r4, [r6, #4]
 8000978:	2100      	movs	r1, #0
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	4618      	mov	r0, r3
 8000980:	e6f8      	b.n	8000774 <__udivmoddi4+0x98>
 8000982:	4690      	mov	r8, r2
 8000984:	e6e0      	b.n	8000748 <__udivmoddi4+0x6c>
 8000986:	45c2      	cmp	sl, r8
 8000988:	d2ea      	bcs.n	8000960 <__udivmoddi4+0x284>
 800098a:	ebb8 0e02 	subs.w	lr, r8, r2
 800098e:	eb69 0503 	sbc.w	r5, r9, r3
 8000992:	3801      	subs	r0, #1
 8000994:	e7e4      	b.n	8000960 <__udivmoddi4+0x284>
 8000996:	4628      	mov	r0, r5
 8000998:	e7d7      	b.n	800094a <__udivmoddi4+0x26e>
 800099a:	4640      	mov	r0, r8
 800099c:	e791      	b.n	80008c2 <__udivmoddi4+0x1e6>
 800099e:	4681      	mov	r9, r0
 80009a0:	e7be      	b.n	8000920 <__udivmoddi4+0x244>
 80009a2:	4601      	mov	r1, r0
 80009a4:	e778      	b.n	8000898 <__udivmoddi4+0x1bc>
 80009a6:	3802      	subs	r0, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	e745      	b.n	8000838 <__udivmoddi4+0x15c>
 80009ac:	4608      	mov	r0, r1
 80009ae:	e708      	b.n	80007c2 <__udivmoddi4+0xe6>
 80009b0:	f1a8 0802 	sub.w	r8, r8, #2
 80009b4:	443d      	add	r5, r7
 80009b6:	e72b      	b.n	8000810 <__udivmoddi4+0x134>

080009b8 <__aeabi_idiv0>:
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f001 fa48 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 f80d 	bl	80009ec <HAL_InitTick>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	e001      	b.n	80009e2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009de:	f005 fe97 	bl	8006710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e2:	79fb      	ldrb	r3, [r7, #7]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_InitTick+0x68>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d022      	beq.n	8000a46 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_InitTick+0x6c>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <HAL_InitTick+0x68>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fa56 	bl	8001ec6 <HAL_SYSTICK_Config>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10f      	bne.n	8000a40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b0f      	cmp	r3, #15
 8000a24:	d809      	bhi.n	8000a3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a26:	2200      	movs	r2, #0
 8000a28:	6879      	ldr	r1, [r7, #4]
 8000a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2e:	f001 fa20 	bl	8001e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_InitTick+0x70>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	e007      	b.n	8000a4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	73fb      	strb	r3, [r7, #15]
 8000a3e:	e004      	b.n	8000a4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e001      	b.n	8000a4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000004 	.word	0x20000004
 8000a58:	2000000c 	.word	0x2000000c
 8000a5c:	20000000 	.word	0x20000000

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a03      	ldr	r2, [pc, #12]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a70:	6013      	str	r3, [r2, #0]
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	20000220 	.word	0x20000220
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000220 	.word	0x20000220

08000a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff ffee 	bl	8000a84 <HAL_GetTick>
 8000aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab4:	d004      	beq.n	8000ac0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_Delay+0x40>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	4413      	add	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ac0:	bf00      	nop
 8000ac2:	f7ff ffdf 	bl	8000a84 <HAL_GetTick>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1ad2      	subs	r2, r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d3f7      	bcc.n	8000ac2 <HAL_Delay+0x26>
  {
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000004 	.word	0x20000004

08000ae0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	609a      	str	r2, [r3, #8]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b48:	b490      	push	{r4, r7}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	3360      	adds	r3, #96	; 0x60
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000b64:	6822      	ldr	r2, [r4, #0]
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <LL_ADC_SetOffset+0x40>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	4313      	orrs	r3, r2
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc90      	pop	{r4, r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	03fff000 	.word	0x03fff000

08000b8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b8c:	b490      	push	{r4, r7}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3360      	adds	r3, #96	; 0x60
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc90      	pop	{r4, r7}
 8000bb2:	4770      	bx	lr

08000bb4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000bb4:	b490      	push	{r4, r7}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3360      	adds	r3, #96	; 0x60
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc90      	pop	{r4, r7}
 8000be2:	4770      	bx	lr

08000be4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	615a      	str	r2, [r3, #20]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c30:	b490      	push	{r4, r7}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3330      	adds	r3, #48	; 0x30
 8000c40:	461a      	mov	r2, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	f003 030c 	and.w	r3, r3, #12
 8000c4c:	4413      	add	r3, r2
 8000c4e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000c50:	6822      	ldr	r2, [r4, #0]
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	f003 031f 	and.w	r3, r3, #31
 8000c58:	211f      	movs	r1, #31
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	401a      	ands	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0e9b      	lsrs	r3, r3, #26
 8000c66:	f003 011f 	and.w	r1, r3, #31
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	f003 031f 	and.w	r3, r3, #31
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc90      	pop	{r4, r7}
 8000c80:	4770      	bx	lr

08000c82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c82:	b490      	push	{r4, r7}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3314      	adds	r3, #20
 8000c92:	461a      	mov	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	0e5b      	lsrs	r3, r3, #25
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	4413      	add	r3, r2
 8000ca0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000ca2:	6822      	ldr	r2, [r4, #0]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	0d1b      	lsrs	r3, r3, #20
 8000ca8:	f003 031f 	and.w	r3, r3, #31
 8000cac:	2107      	movs	r1, #7
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	0d1b      	lsrs	r3, r3, #20
 8000cba:	f003 031f 	and.w	r3, r3, #31
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000cc8:	bf00      	nop
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc90      	pop	{r4, r7}
 8000cd0:	4770      	bx	lr
	...

08000cd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cec:	43db      	mvns	r3, r3
 8000cee:	401a      	ands	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0318 	and.w	r3, r3, #24
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000cf8:	40d9      	lsrs	r1, r3
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	400b      	ands	r3, r1
 8000cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d02:	431a      	orrs	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	0007ffff 	.word	0x0007ffff

08000d1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	6093      	str	r3, [r2, #8]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d54:	d101      	bne.n	8000d5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000da4:	d101      	bne.n	8000daa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dcc:	f043 0201 	orr.w	r2, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000df4:	f043 0202 	orr.w	r2, r3, #2
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <LL_ADC_IsEnabled+0x18>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <LL_ADC_IsEnabled+0x1a>
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d101      	bne.n	8000e46 <LL_ADC_IsDisableOngoing+0x18>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <LL_ADC_IsDisableOngoing+0x1a>
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e68:	f043 0204 	orr.w	r2, r3, #4
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d101      	bne.n	8000e94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d101      	bne.n	8000eba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e12d      	b.n	800113e <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d109      	bne.n	8000f04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f004 fed9 	bl	8005ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff19 	bl	8000d40 <LL_ADC_IsDeepPowerDownEnabled>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff feff 	bl	8000d1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff34 	bl	8000d90 <LL_ADC_IsInternalRegulatorEnabled>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d113      	bne.n	8000f56 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff18 	bl	8000d68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000f38:	4b83      	ldr	r3, [pc, #524]	; (8001148 <HAL_ADC_Init+0x280>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	099b      	lsrs	r3, r3, #6
 8000f3e:	4a83      	ldr	r2, [pc, #524]	; (800114c <HAL_ADC_Init+0x284>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	099b      	lsrs	r3, r3, #6
 8000f46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f48:	e002      	b.n	8000f50 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f9      	bne.n	8000f4a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff18 	bl	8000d90 <LL_ADC_IsInternalRegulatorEnabled>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10d      	bne.n	8000f82 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f043 0210 	orr.w	r2, r3, #16
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f76:	f043 0201 	orr.w	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff78 	bl	8000e7c <LL_ADC_REG_IsConversionOngoing>
 8000f8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f040 80c8 	bne.w	800112c <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f040 80c4 	bne.w	800112c <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000fac:	f043 0202 	orr.w	r2, r3, #2
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff25 	bl	8000e08 <LL_ADC_IsEnabled>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10b      	bne.n	8000fdc <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000fc4:	4862      	ldr	r0, [pc, #392]	; (8001150 <HAL_ADC_Init+0x288>)
 8000fc6:	f7ff ff1f 	bl	8000e08 <LL_ADC_IsEnabled>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d105      	bne.n	8000fdc <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	485f      	ldr	r0, [pc, #380]	; (8001154 <HAL_ADC_Init+0x28c>)
 8000fd8:	f7ff fd82 	bl	8000ae0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7e5b      	ldrb	r3, [r3, #25]
 8000fe0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fe6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000fec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000ff2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ffa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d106      	bne.n	8001018 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	3b01      	subs	r3, #1
 8001010:	045b      	lsls	r3, r3, #17
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	2b00      	cmp	r3, #0
 800101e:	d009      	beq.n	8001034 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68d9      	ldr	r1, [r3, #12]
 800103e:	4b46      	ldr	r3, [pc, #280]	; (8001158 <HAL_ADC_Init+0x290>)
 8001040:	400b      	ands	r3, r1
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	430b      	orrs	r3, r1
 8001046:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff15 	bl	8000e7c <LL_ADC_REG_IsConversionOngoing>
 8001052:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff22 	bl	8000ea2 <LL_ADC_INJ_IsConversionOngoing>
 800105e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d140      	bne.n	80010e8 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d13d      	bne.n	80010e8 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7e1b      	ldrb	r3, [r3, #24]
 8001074:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001076:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800107e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001092:	f023 0306 	bic.w	r3, r3, #6
 8001096:	69b9      	ldr	r1, [r7, #24]
 8001098:	430b      	orrs	r3, r1
 800109a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d118      	bne.n	80010d8 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80010b4:	f023 0304 	bic.w	r3, r3, #4
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80010c0:	4308      	orrs	r0, r1
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80010c6:	4308      	orrs	r0, r1
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	6c89      	ldr	r1, [r1, #72]	; 0x48
 80010cc:	4301      	orrs	r1, r0
 80010ce:	430b      	orrs	r3, r1
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6113      	str	r3, [r2, #16]
 80010d6:	e007      	b.n	80010e8 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	6912      	ldr	r2, [r2, #16]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d10c      	bne.n	800110a <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010fa:	f022 010f 	bic.w	r1, r2, #15
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	69d2      	ldr	r2, [r2, #28]
 8001102:	3a01      	subs	r2, #1
 8001104:	430a      	orrs	r2, r1
 8001106:	631a      	str	r2, [r3, #48]	; 0x30
 8001108:	e007      	b.n	800111a <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001114:	f022 020f 	bic.w	r2, r2, #15
 8001118:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	659a      	str	r2, [r3, #88]	; 0x58
 800112a:	e007      	b.n	800113c <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001130:	f043 0210 	orr.w	r2, r3, #16
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800113c:	7ffb      	ldrb	r3, [r7, #31]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000000c 	.word	0x2000000c
 800114c:	053e2d63 	.word	0x053e2d63
 8001150:	50040000 	.word	0x50040000
 8001154:	50040300 	.word	0x50040300
 8001158:	fff0c007 	.word	0xfff0c007

0800115c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fe87 	bl	8000e7c <LL_ADC_REG_IsConversionOngoing>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d14f      	bne.n	8001214 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_ADC_Start+0x26>
 800117e:	2302      	movs	r3, #2
 8001180:	e04b      	b.n	800121a <HAL_ADC_Start+0xbe>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fc58 	bl	8001a40 <ADC_Enable>
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d137      	bne.n	800120a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ba:	d106      	bne.n	80011ca <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c0:	f023 0206 	bic.w	r2, r3, #6
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	221c      	movs	r2, #28
 80011d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fe26 	bl	8000e54 <LL_ADC_REG_StartConversion>
 8001208:	e006      	b.n	8001218 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001212:	e001      	b.n	8001218 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001214:	2302      	movs	r3, #2
 8001216:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	2b08      	cmp	r3, #8
 8001232:	d102      	bne.n	800123a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001234:	2308      	movs	r3, #8
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e010      	b.n	800125c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	f043 0220 	orr.w	r2, r3, #32
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e068      	b.n	800132a <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001258:	2304      	movs	r3, #4
 800125a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800125c:	f7ff fc12 	bl	8000a84 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001262:	e01a      	b.n	800129a <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126a:	d016      	beq.n	800129a <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800126c:	f7ff fc0a 	bl	8000a84 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad2      	subs	r2, r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d802      	bhi.n	8001282 <HAL_ADC_PollForConversion+0x60>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10b      	bne.n	800129a <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	f043 0204 	orr.w	r2, r3, #4
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e047      	b.n	800132a <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0dd      	beq.n	8001264 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fca6 	bl	8000c0a <LL_ADC_REG_IsTriggerSourceSWStart>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d01c      	beq.n	80012fe <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e5b      	ldrb	r3, [r3, #25]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d118      	bne.n	80012fe <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d111      	bne.n	80012fe <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	f043 0201 	orr.w	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2b08      	cmp	r3, #8
 800130a:	d104      	bne.n	8001316 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2208      	movs	r2, #8
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e008      	b.n	8001328 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d103      	bne.n	8001328 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	220c      	movs	r2, #12
 8001326:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0a6      	sub	sp, #152	; 0x98
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_ADC_ConfigChannel+0x22>
 800136a:	2302      	movs	r3, #2
 800136c:	e352      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x6c8>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fd7e 	bl	8000e7c <LL_ADC_REG_IsConversionOngoing>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 8337 	bne.w	80019f6 <HAL_ADC_ConfigChannel+0x6aa>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b05      	cmp	r3, #5
 800138e:	d824      	bhi.n	80013da <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	3b02      	subs	r3, #2
 8001396:	2b03      	cmp	r3, #3
 8001398:	d81b      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0x86>
 800139a:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <HAL_ADC_ConfigChannel+0x54>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	080013b1 	.word	0x080013b1
 80013a4:	080013b9 	.word	0x080013b9
 80013a8:	080013c1 	.word	0x080013c1
 80013ac:	080013c9 	.word	0x080013c9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	220c      	movs	r2, #12
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	e010      	b.n	80013da <HAL_ADC_ConfigChannel+0x8e>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2212      	movs	r2, #18
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	e00c      	b.n	80013da <HAL_ADC_ConfigChannel+0x8e>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2218      	movs	r2, #24
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	e008      	b.n	80013da <HAL_ADC_ConfigChannel+0x8e>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	e003      	b.n	80013da <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2206      	movs	r2, #6
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	bf00      	nop
      }
    }
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	6859      	ldr	r1, [r3, #4]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	f7ff fc22 	bl	8000c30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fd43 	bl	8000e7c <LL_ADC_REG_IsConversionOngoing>
 80013f6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fd4f 	bl	8000ea2 <LL_ADC_INJ_IsConversionOngoing>
 8001404:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 8163 	bne.w	80016d8 <HAL_ADC_ConfigChannel+0x38c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 815e 	bne.w	80016d8 <HAL_ADC_ConfigChannel+0x38c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001424:	d10f      	bne.n	8001446 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fc26 	bl	8000c82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fbd0 	bl	8000be4 <LL_ADC_SetSamplingTimeCommonConfig>
 8001444:	e00e      	b.n	8001464 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	6819      	ldr	r1, [r3, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	461a      	mov	r2, r3
 8001454:	f7ff fc15 	bl	8000c82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fbc0 	bl	8000be4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	08db      	lsrs	r3, r3, #3
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	2b04      	cmp	r3, #4
 8001484:	d00a      	beq.n	800149c <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	6919      	ldr	r1, [r3, #16]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001496:	f7ff fb57 	bl	8000b48 <LL_ADC_SetOffset>
 800149a:	e11d      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x38c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fb72 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10a      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x17c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fb67 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	0e9b      	lsrs	r3, r3, #26
 80014c2:	f003 021f 	and.w	r2, r3, #31
 80014c6:	e012      	b.n	80014ee <HAL_ADC_ConfigChannel+0x1a2>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fb5c 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x1ba>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	0e9b      	lsrs	r3, r3, #26
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	e00a      	b.n	800151c <HAL_ADC_ConfigChannel+0x1d0>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001516:	fab3 f383 	clz	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	429a      	cmp	r2, r3
 800151e:	d106      	bne.n	800152e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fb43 	bl	8000bb4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2101      	movs	r1, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fb29 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10a      	bne.n	800155a <HAL_ADC_ConfigChannel+0x20e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fb1e 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	0e9b      	lsrs	r3, r3, #26
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	e010      	b.n	800157c <HAL_ADC_ConfigChannel+0x230>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2101      	movs	r1, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fb13 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001574:	fab3 f383 	clz	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001584:	2b00      	cmp	r3, #0
 8001586:	d105      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x248>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0e9b      	lsrs	r3, r3, #26
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	e00a      	b.n	80015aa <HAL_ADC_ConfigChannel+0x25e>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80015a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d106      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	2101      	movs	r1, #1
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fafc 	bl	8000bb4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2102      	movs	r1, #2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fae2 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10a      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x29c>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2102      	movs	r1, #2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fad7 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	0e9b      	lsrs	r3, r3, #26
 80015e2:	f003 021f 	and.w	r2, r3, #31
 80015e6:	e010      	b.n	800160a <HAL_ADC_ConfigChannel+0x2be>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2102      	movs	r1, #2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff facc 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001602:	fab3 f383 	clz	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001612:	2b00      	cmp	r3, #0
 8001614:	d105      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x2d6>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	0e9b      	lsrs	r3, r3, #26
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	e00a      	b.n	8001638 <HAL_ADC_ConfigChannel+0x2ec>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001632:	fab3 f383 	clz	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	429a      	cmp	r2, r3
 800163a:	d106      	bne.n	800164a <HAL_ADC_ConfigChannel+0x2fe>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	2102      	movs	r1, #2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fab5 	bl	8000bb4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2103      	movs	r1, #3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fa9b 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10a      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x32a>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2103      	movs	r1, #3
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fa90 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	0e9b      	lsrs	r3, r3, #26
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	e010      	b.n	8001698 <HAL_ADC_ConfigChannel+0x34c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2103      	movs	r1, #3
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fa85 	bl	8000b8c <LL_ADC_GetOffsetChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800168e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	461a      	mov	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x364>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0e9b      	lsrs	r3, r3, #26
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	e00a      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x37a>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80016be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d106      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x38c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	2103      	movs	r1, #3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fa6e 	bl	8000bb4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fb93 	bl	8000e08 <LL_ADC_IsEnabled>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f040 810c 	bne.w	8001902 <HAL_ADC_ConfigChannel+0x5b6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	461a      	mov	r2, r3
 80016f8:	f7ff faec 	bl	8000cd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4aa8      	ldr	r2, [pc, #672]	; (80019a4 <HAL_ADC_ConfigChannel+0x658>)
 8001702:	4293      	cmp	r3, r2
 8001704:	f040 80fd 	bne.w	8001902 <HAL_ADC_ConfigChannel+0x5b6>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10b      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x3e4>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0e9b      	lsrs	r3, r3, #26
 800171e:	3301      	adds	r3, #1
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	2b09      	cmp	r3, #9
 8001726:	bf94      	ite	ls
 8001728:	2301      	movls	r3, #1
 800172a:	2300      	movhi	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	e012      	b.n	8001756 <HAL_ADC_ConfigChannel+0x40a>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800173e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	3301      	adds	r3, #1
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	2b09      	cmp	r3, #9
 800174e:	bf94      	ite	ls
 8001750:	2301      	movls	r3, #1
 8001752:	2300      	movhi	r3, #0
 8001754:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001756:	2b00      	cmp	r3, #0
 8001758:	d064      	beq.n	8001824 <HAL_ADC_ConfigChannel+0x4d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001762:	2b00      	cmp	r3, #0
 8001764:	d107      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x42a>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0e9b      	lsrs	r3, r3, #26
 800176c:	3301      	adds	r3, #1
 800176e:	069b      	lsls	r3, r3, #26
 8001770:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001774:	e00e      	b.n	8001794 <HAL_ADC_ConfigChannel+0x448>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800177e:	fa93 f3a3 	rbit	r3, r3
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001786:	fab3 f383 	clz	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	3301      	adds	r3, #1
 800178e:	069b      	lsls	r3, r3, #26
 8001790:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x468>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0e9b      	lsrs	r3, r3, #26
 80017a6:	3301      	adds	r3, #1
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	e010      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x48a>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80017c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	2101      	movs	r1, #1
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	ea42 0103 	orr.w	r1, r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10a      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x4b0>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	0e9b      	lsrs	r3, r3, #26
 80017ec:	3301      	adds	r3, #1
 80017ee:	f003 021f 	and.w	r2, r3, #31
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	051b      	lsls	r3, r3, #20
 80017fa:	e011      	b.n	8001820 <HAL_ADC_ConfigChannel+0x4d4>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	fa93 f3a3 	rbit	r3, r3
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	3301      	adds	r3, #1
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001820:	430b      	orrs	r3, r1
 8001822:	e069      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800182c:	2b00      	cmp	r3, #0
 800182e:	d107      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x4f4>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0e9b      	lsrs	r3, r3, #26
 8001836:	3301      	adds	r3, #1
 8001838:	069b      	lsls	r3, r3, #26
 800183a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800183e:	e00e      	b.n	800185e <HAL_ADC_ConfigChannel+0x512>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	61fb      	str	r3, [r7, #28]
  return result;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	3301      	adds	r3, #1
 8001858:	069b      	lsls	r3, r3, #26
 800185a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_ADC_ConfigChannel+0x532>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0e9b      	lsrs	r3, r3, #26
 8001870:	3301      	adds	r3, #1
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	e010      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x554>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	617b      	str	r3, [r7, #20]
  return result;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	3301      	adds	r3, #1
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	2101      	movs	r1, #1
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	ea42 0103 	orr.w	r1, r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10d      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x580>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0e9b      	lsrs	r3, r3, #26
 80018b6:	3301      	adds	r3, #1
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	3b1e      	subs	r3, #30
 80018c4:	051b      	lsls	r3, r3, #20
 80018c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ca:	e014      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x5aa>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	fa93 f3a3 	rbit	r3, r3
 80018d8:	60fb      	str	r3, [r7, #12]
  return result;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	3b1e      	subs	r3, #30
 80018f0:	051b      	lsls	r3, r3, #20
 80018f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018f6:	430b      	orrs	r3, r1
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	6892      	ldr	r2, [r2, #8]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f9c0 	bl	8000c82 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <HAL_ADC_ConfigChannel+0x65c>)
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d07c      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0x6bc>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800190e:	4827      	ldr	r0, [pc, #156]	; (80019ac <HAL_ADC_ConfigChannel+0x660>)
 8001910:	f7ff f90c 	bl	8000b2c <LL_ADC_GetCommonPathInternalCh>
 8001914:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <HAL_ADC_ConfigChannel+0x664>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d126      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x624>
 8001922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001926:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d120      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x624>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a20      	ldr	r2, [pc, #128]	; (80019b4 <HAL_ADC_ConfigChannel+0x668>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d167      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800193c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001940:	4619      	mov	r1, r3
 8001942:	481a      	ldr	r0, [pc, #104]	; (80019ac <HAL_ADC_ConfigChannel+0x660>)
 8001944:	f7ff f8df 	bl	8000b06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_ADC_ConfigChannel+0x66c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	099b      	lsrs	r3, r3, #6
 800194e:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <HAL_ADC_ConfigChannel+0x670>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	099a      	lsrs	r2, r3, #6
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001960:	e002      	b.n	8001968 <HAL_ADC_ConfigChannel+0x61c>
          {
            wait_loop_index--;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3b01      	subs	r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f9      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x616>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800196e:	e04b      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x6bc>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <HAL_ADC_ConfigChannel+0x674>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d124      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x678>
 800197a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800197e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11e      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_ADC_ConfigChannel+0x668>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d13b      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001998:	4619      	mov	r1, r3
 800199a:	4804      	ldr	r0, [pc, #16]	; (80019ac <HAL_ADC_ConfigChannel+0x660>)
 800199c:	f7ff f8b3 	bl	8000b06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019a0:	e032      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x6bc>
 80019a2:	bf00      	nop
 80019a4:	407f0000 	.word	0x407f0000
 80019a8:	80080000 	.word	0x80080000
 80019ac:	50040300 	.word	0x50040300
 80019b0:	c7520000 	.word	0xc7520000
 80019b4:	50040000 	.word	0x50040000
 80019b8:	2000000c 	.word	0x2000000c
 80019bc:	053e2d63 	.word	0x053e2d63
 80019c0:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_ADC_ConfigChannel+0x6d0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d11c      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x6bc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x6bc>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <HAL_ADC_ConfigChannel+0x6d4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d111      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ec:	4619      	mov	r1, r3
 80019ee:	480d      	ldr	r0, [pc, #52]	; (8001a24 <HAL_ADC_ConfigChannel+0x6d8>)
 80019f0:	f7ff f889 	bl	8000b06 <LL_ADC_SetCommonPathInternalCh>
 80019f4:	e008      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x6bc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	f043 0220 	orr.w	r2, r3, #32
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001a10:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3798      	adds	r7, #152	; 0x98
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	80000001 	.word	0x80000001
 8001a20:	50040000 	.word	0x50040000
 8001a24:	50040300 	.word	0x50040300

08001a28 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9db 	bl	8000e08 <LL_ADC_IsEnabled>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d146      	bne.n	8001ae6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <ADC_Enable+0xb0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00d      	beq.n	8001a82 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	f043 0210 	orr.w	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e032      	b.n	8001ae8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f996 	bl	8000db8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001a8c:	f7fe fffa 	bl	8000a84 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a92:	e021      	b.n	8001ad8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f9b5 	bl	8000e08 <LL_ADC_IsEnabled>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d104      	bne.n	8001aae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f985 	bl	8000db8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001aae:	f7fe ffe9 	bl	8000a84 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d90d      	bls.n	8001ad8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	f043 0210 	orr.w	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e007      	b.n	8001ae8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d1d6      	bne.n	8001a94 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	8000003f 	.word	0x8000003f

08001af4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f994 	bl	8000e2e <LL_ADC_IsDisableOngoing>
 8001b06:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f97b 	bl	8000e08 <LL_ADC_IsEnabled>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d040      	beq.n	8001b9a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d13d      	bne.n	8001b9a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 030d 	and.w	r3, r3, #13
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d10c      	bne.n	8001b46 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff f955 	bl	8000de0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b3e:	f7fe ffa1 	bl	8000a84 <HAL_GetTick>
 8001b42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001b44:	e022      	b.n	8001b8c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	f043 0210 	orr.w	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b56:	f043 0201 	orr.w	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e01c      	b.n	8001b9c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b62:	f7fe ff8f 	bl	8000a84 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d90d      	bls.n	8001b8c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	f043 0210 	orr.w	r2, r3, #16
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b80:	f043 0201 	orr.w	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e007      	b.n	8001b9c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1e3      	bne.n	8001b62 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <LL_ADC_StartCalibration>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001bb6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_ADC_IsCalibrationOnGoing>:
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bea:	d101      	bne.n	8001bf0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_ADCEx_Calibration_Start+0x1c>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e04d      	b.n	8001cb6 <HAL_ADCEx_Calibration_Start+0xb8>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ff66 	bl	8001af4 <ADC_Disable>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d136      	bne.n	8001ca0 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c3a:	f023 0302 	bic.w	r3, r3, #2
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6839      	ldr	r1, [r7, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ffa9 	bl	8001ba4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001c52:	e014      	b.n	8001c7e <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	3301      	adds	r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8001c60:	d30d      	bcc.n	8001c7e <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f023 0312 	bic.w	r3, r3, #18
 8001c6a:	f043 0210 	orr.w	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e01b      	b.n	8001cb6 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ffa7 	bl	8001bd6 <LL_ADC_IsCalibrationOnGoing>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e2      	bne.n	8001c54 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	f023 0303 	bic.w	r3, r3, #3
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	659a      	str	r2, [r3, #88]	; 0x58
 8001c9e:	e005      	b.n	8001cac <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f043 0210 	orr.w	r2, r3, #16
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	4909      	ldr	r1, [pc, #36]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	095b      	lsrs	r3, r3, #5
 8001d3e:	79fa      	ldrb	r2, [r7, #7]
 8001d40:	f002 021f 	and.w	r2, r2, #31
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	490d      	ldr	r1, [pc, #52]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	4909      	ldr	r1, [pc, #36]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	2201      	movs	r2, #1
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	1e5a      	subs	r2, r3, #1
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	401a      	ands	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	1e59      	subs	r1, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff90 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff2b 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff40 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff90 	bl	8001db4 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5f 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff33 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffa2 	bl	8001e18 <SysTick_Config>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eee:	e154      	b.n	800219a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8146 	beq.w	8002194 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d00b      	beq.n	8001f28 <HAL_GPIO_Init+0x48>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1c:	2b11      	cmp	r3, #17
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b12      	cmp	r3, #18
 8001f26:	d130      	bne.n	8001f8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f5e:	2201      	movs	r2, #1
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	f003 0201 	and.w	r2, r3, #1
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0xea>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d123      	bne.n	8002012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	6939      	ldr	r1, [r7, #16]
 800200e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0203 	and.w	r2, r3, #3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80a0 	beq.w	8002194 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002054:	4a58      	ldr	r2, [pc, #352]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 8002056:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6613      	str	r3, [r2, #96]	; 0x60
 8002060:	4b55      	ldr	r3, [pc, #340]	; (80021b8 <HAL_GPIO_Init+0x2d8>)
 8002062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800206c:	4a53      	ldr	r2, [pc, #332]	; (80021bc <HAL_GPIO_Init+0x2dc>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002096:	d019      	beq.n	80020cc <HAL_GPIO_Init+0x1ec>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <HAL_GPIO_Init+0x2e0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d013      	beq.n	80020c8 <HAL_GPIO_Init+0x1e8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a48      	ldr	r2, [pc, #288]	; (80021c4 <HAL_GPIO_Init+0x2e4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00d      	beq.n	80020c4 <HAL_GPIO_Init+0x1e4>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a47      	ldr	r2, [pc, #284]	; (80021c8 <HAL_GPIO_Init+0x2e8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d007      	beq.n	80020c0 <HAL_GPIO_Init+0x1e0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a46      	ldr	r2, [pc, #280]	; (80021cc <HAL_GPIO_Init+0x2ec>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <HAL_GPIO_Init+0x1dc>
 80020b8:	2304      	movs	r3, #4
 80020ba:	e008      	b.n	80020ce <HAL_GPIO_Init+0x1ee>
 80020bc:	2307      	movs	r3, #7
 80020be:	e006      	b.n	80020ce <HAL_GPIO_Init+0x1ee>
 80020c0:	2303      	movs	r3, #3
 80020c2:	e004      	b.n	80020ce <HAL_GPIO_Init+0x1ee>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e002      	b.n	80020ce <HAL_GPIO_Init+0x1ee>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <HAL_GPIO_Init+0x1ee>
 80020cc:	2300      	movs	r3, #0
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	f002 0203 	and.w	r2, r2, #3
 80020d4:	0092      	lsls	r2, r2, #2
 80020d6:	4093      	lsls	r3, r2
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020de:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_GPIO_Init+0x2dc>)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020ec:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002110:	4a2f      	ldr	r2, [pc, #188]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800213a:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002164:	4a1a      	ldr	r2, [pc, #104]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800218e:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <HAL_GPIO_Init+0x2f0>)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3301      	adds	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f47f aea3 	bne.w	8001ef0 <HAL_GPIO_Init+0x10>
  }
}
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010000 	.word	0x40010000
 80021c0:	48000400 	.word	0x48000400
 80021c4:	48000800 	.word	0x48000800
 80021c8:	48000c00 	.word	0x48000c00
 80021cc:	48001000 	.word	0x48001000
 80021d0:	40010400 	.word	0x40010400

080021d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002220:	e002      	b.n	8002228 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800224c:	887a      	ldrh	r2, [r7, #2]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002252:	e002      	b.n	800225a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002254:	887a      	ldrh	r2, [r7, #2]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	4618      	mov	r0, r3
 8002288:	f004 faae 	bl	80067e8 <HAL_GPIO_EXTI_Callback>
  }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010400 	.word	0x40010400

08002298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a6:	4b3d      	ldr	r3, [pc, #244]	; (800239c <HAL_RCC_GetSysClockFreq+0x104>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b0:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCC_GetSysClockFreq+0x104>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x34>
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d121      	bne.n	800230a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d11e      	bne.n	800230a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022cc:	4b33      	ldr	r3, [pc, #204]	; (800239c <HAL_RCC_GetSysClockFreq+0x104>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022d8:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCC_GetSysClockFreq+0x104>)
 80022da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	e005      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022e8:	4b2c      	ldr	r3, [pc, #176]	; (800239c <HAL_RCC_GetSysClockFreq+0x104>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022f4:	4a2a      	ldr	r2, [pc, #168]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10d      	bne.n	8002320 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b04      	cmp	r3, #4
 800230e:	d102      	bne.n	8002316 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	e004      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d101      	bne.n	8002320 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800231c:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800231e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d133      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_RCC_GetSysClockFreq+0x104>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d002      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0xa4>
 8002336:	2b03      	cmp	r3, #3
 8002338:	d003      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0xaa>
 800233a:	e005      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800233e:	617b      	str	r3, [r7, #20]
      break;
 8002340:	e005      	b.n	800234e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002344:	617b      	str	r3, [r7, #20]
      break;
 8002346:	e002      	b.n	800234e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	617b      	str	r3, [r7, #20]
      break;
 800234c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_RCC_GetSysClockFreq+0x104>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	3301      	adds	r3, #1
 800235a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_RCC_GetSysClockFreq+0x104>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	fb02 f203 	mul.w	r2, r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCC_GetSysClockFreq+0x104>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0e5b      	lsrs	r3, r3, #25
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	3301      	adds	r3, #1
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800238e:	69bb      	ldr	r3, [r7, #24]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3724      	adds	r7, #36	; 0x24
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	40021000 	.word	0x40021000
 80023a0:	080074ec 	.word	0x080074ec
 80023a4:	00f42400 	.word	0x00f42400
 80023a8:	007a1200 	.word	0x007a1200

080023ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	2000000c 	.word	0x2000000c

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023c8:	f7ff fff0 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023cc:	4601      	mov	r1, r0
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80023da:	5cd3      	ldrb	r3, [r2, r3]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	080074e4 	.word	0x080074e4

080023f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023f4:	f7ff ffda 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f8:	4601      	mov	r1, r0
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0adb      	lsrs	r3, r3, #11
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	080074e4 	.word	0x080074e4

0800241c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e040      	b.n	80024b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f004 fed2 	bl	80071e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2224      	movs	r2, #36	; 0x24
 8002448:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	f022 0201 	bic.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f82c 	bl	80024b8 <UART_SetConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e022      	b.n	80024b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fb52 	bl	8002b1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	6852      	ldr	r2, [r2, #4]
 8002482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	6892      	ldr	r2, [r2, #8]
 8002492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fbd9 	bl	8002c60 <UART_CheckIdleState>
 80024ae:	4603      	mov	r3, r0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024bc:	b08a      	sub	sp, #40	; 0x28
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	4baf      	ldr	r3, [pc, #700]	; (80027b0 <UART_SetConfig+0x2f8>)
 80024f2:	400b      	ands	r3, r1
 80024f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f6:	430b      	orrs	r3, r1
 80024f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	6852      	ldr	r2, [r2, #4]
 8002504:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68d2      	ldr	r2, [r2, #12]
 800250c:	430a      	orrs	r2, r1
 800250e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4aa6      	ldr	r2, [pc, #664]	; (80027b4 <UART_SetConfig+0x2fc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d004      	beq.n	800252a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	4313      	orrs	r3, r2
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	6892      	ldr	r2, [r2, #8]
 8002534:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253a:	430a      	orrs	r2, r1
 800253c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a9d      	ldr	r2, [pc, #628]	; (80027b8 <UART_SetConfig+0x300>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d126      	bne.n	8002596 <UART_SetConfig+0xde>
 8002548:	4b9c      	ldr	r3, [pc, #624]	; (80027bc <UART_SetConfig+0x304>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b03      	cmp	r3, #3
 8002554:	d81a      	bhi.n	800258c <UART_SetConfig+0xd4>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <UART_SetConfig+0xa4>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	0800256d 	.word	0x0800256d
 8002560:	0800257d 	.word	0x0800257d
 8002564:	08002575 	.word	0x08002575
 8002568:	08002585 	.word	0x08002585
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002572:	e0d6      	b.n	8002722 <UART_SetConfig+0x26a>
 8002574:	2302      	movs	r3, #2
 8002576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800257a:	e0d2      	b.n	8002722 <UART_SetConfig+0x26a>
 800257c:	2304      	movs	r3, #4
 800257e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002582:	e0ce      	b.n	8002722 <UART_SetConfig+0x26a>
 8002584:	2308      	movs	r3, #8
 8002586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800258a:	e0ca      	b.n	8002722 <UART_SetConfig+0x26a>
 800258c:	2310      	movs	r3, #16
 800258e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002592:	bf00      	nop
 8002594:	e0c5      	b.n	8002722 <UART_SetConfig+0x26a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a89      	ldr	r2, [pc, #548]	; (80027c0 <UART_SetConfig+0x308>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d138      	bne.n	8002612 <UART_SetConfig+0x15a>
 80025a0:	4b86      	ldr	r3, [pc, #536]	; (80027bc <UART_SetConfig+0x304>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b0c      	cmp	r3, #12
 80025ac:	d82c      	bhi.n	8002608 <UART_SetConfig+0x150>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <UART_SetConfig+0xfc>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	080025e9 	.word	0x080025e9
 80025b8:	08002609 	.word	0x08002609
 80025bc:	08002609 	.word	0x08002609
 80025c0:	08002609 	.word	0x08002609
 80025c4:	080025f9 	.word	0x080025f9
 80025c8:	08002609 	.word	0x08002609
 80025cc:	08002609 	.word	0x08002609
 80025d0:	08002609 	.word	0x08002609
 80025d4:	080025f1 	.word	0x080025f1
 80025d8:	08002609 	.word	0x08002609
 80025dc:	08002609 	.word	0x08002609
 80025e0:	08002609 	.word	0x08002609
 80025e4:	08002601 	.word	0x08002601
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025ee:	e098      	b.n	8002722 <UART_SetConfig+0x26a>
 80025f0:	2302      	movs	r3, #2
 80025f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025f6:	e094      	b.n	8002722 <UART_SetConfig+0x26a>
 80025f8:	2304      	movs	r3, #4
 80025fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025fe:	e090      	b.n	8002722 <UART_SetConfig+0x26a>
 8002600:	2308      	movs	r3, #8
 8002602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002606:	e08c      	b.n	8002722 <UART_SetConfig+0x26a>
 8002608:	2310      	movs	r3, #16
 800260a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800260e:	bf00      	nop
 8002610:	e087      	b.n	8002722 <UART_SetConfig+0x26a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6b      	ldr	r2, [pc, #428]	; (80027c4 <UART_SetConfig+0x30c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d125      	bne.n	8002668 <UART_SetConfig+0x1b0>
 800261c:	4b67      	ldr	r3, [pc, #412]	; (80027bc <UART_SetConfig+0x304>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002626:	2b10      	cmp	r3, #16
 8002628:	d011      	beq.n	800264e <UART_SetConfig+0x196>
 800262a:	2b10      	cmp	r3, #16
 800262c:	d802      	bhi.n	8002634 <UART_SetConfig+0x17c>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <UART_SetConfig+0x186>
 8002632:	e014      	b.n	800265e <UART_SetConfig+0x1a6>
 8002634:	2b20      	cmp	r3, #32
 8002636:	d006      	beq.n	8002646 <UART_SetConfig+0x18e>
 8002638:	2b30      	cmp	r3, #48	; 0x30
 800263a:	d00c      	beq.n	8002656 <UART_SetConfig+0x19e>
 800263c:	e00f      	b.n	800265e <UART_SetConfig+0x1a6>
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002644:	e06d      	b.n	8002722 <UART_SetConfig+0x26a>
 8002646:	2302      	movs	r3, #2
 8002648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800264c:	e069      	b.n	8002722 <UART_SetConfig+0x26a>
 800264e:	2304      	movs	r3, #4
 8002650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002654:	e065      	b.n	8002722 <UART_SetConfig+0x26a>
 8002656:	2308      	movs	r3, #8
 8002658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800265c:	e061      	b.n	8002722 <UART_SetConfig+0x26a>
 800265e:	2310      	movs	r3, #16
 8002660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002664:	bf00      	nop
 8002666:	e05c      	b.n	8002722 <UART_SetConfig+0x26a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a56      	ldr	r2, [pc, #344]	; (80027c8 <UART_SetConfig+0x310>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d125      	bne.n	80026be <UART_SetConfig+0x206>
 8002672:	4b52      	ldr	r3, [pc, #328]	; (80027bc <UART_SetConfig+0x304>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d011      	beq.n	80026a4 <UART_SetConfig+0x1ec>
 8002680:	2b40      	cmp	r3, #64	; 0x40
 8002682:	d802      	bhi.n	800268a <UART_SetConfig+0x1d2>
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <UART_SetConfig+0x1dc>
 8002688:	e014      	b.n	80026b4 <UART_SetConfig+0x1fc>
 800268a:	2b80      	cmp	r3, #128	; 0x80
 800268c:	d006      	beq.n	800269c <UART_SetConfig+0x1e4>
 800268e:	2bc0      	cmp	r3, #192	; 0xc0
 8002690:	d00c      	beq.n	80026ac <UART_SetConfig+0x1f4>
 8002692:	e00f      	b.n	80026b4 <UART_SetConfig+0x1fc>
 8002694:	2300      	movs	r3, #0
 8002696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800269a:	e042      	b.n	8002722 <UART_SetConfig+0x26a>
 800269c:	2302      	movs	r3, #2
 800269e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026a2:	e03e      	b.n	8002722 <UART_SetConfig+0x26a>
 80026a4:	2304      	movs	r3, #4
 80026a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026aa:	e03a      	b.n	8002722 <UART_SetConfig+0x26a>
 80026ac:	2308      	movs	r3, #8
 80026ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026b2:	e036      	b.n	8002722 <UART_SetConfig+0x26a>
 80026b4:	2310      	movs	r3, #16
 80026b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ba:	bf00      	nop
 80026bc:	e031      	b.n	8002722 <UART_SetConfig+0x26a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a3c      	ldr	r2, [pc, #240]	; (80027b4 <UART_SetConfig+0x2fc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d129      	bne.n	800271c <UART_SetConfig+0x264>
 80026c8:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <UART_SetConfig+0x304>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d6:	d014      	beq.n	8002702 <UART_SetConfig+0x24a>
 80026d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026dc:	d802      	bhi.n	80026e4 <UART_SetConfig+0x22c>
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <UART_SetConfig+0x23a>
 80026e2:	e016      	b.n	8002712 <UART_SetConfig+0x25a>
 80026e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e8:	d007      	beq.n	80026fa <UART_SetConfig+0x242>
 80026ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026ee:	d00c      	beq.n	800270a <UART_SetConfig+0x252>
 80026f0:	e00f      	b.n	8002712 <UART_SetConfig+0x25a>
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026f8:	e013      	b.n	8002722 <UART_SetConfig+0x26a>
 80026fa:	2302      	movs	r3, #2
 80026fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002700:	e00f      	b.n	8002722 <UART_SetConfig+0x26a>
 8002702:	2304      	movs	r3, #4
 8002704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002708:	e00b      	b.n	8002722 <UART_SetConfig+0x26a>
 800270a:	2308      	movs	r3, #8
 800270c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002710:	e007      	b.n	8002722 <UART_SetConfig+0x26a>
 8002712:	2310      	movs	r3, #16
 8002714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002718:	bf00      	nop
 800271a:	e002      	b.n	8002722 <UART_SetConfig+0x26a>
 800271c:	2310      	movs	r3, #16
 800271e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <UART_SetConfig+0x2fc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	f040 80ee 	bne.w	800290a <UART_SetConfig+0x452>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800272e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002732:	2b08      	cmp	r3, #8
 8002734:	d823      	bhi.n	800277e <UART_SetConfig+0x2c6>
 8002736:	a201      	add	r2, pc, #4	; (adr r2, 800273c <UART_SetConfig+0x284>)
 8002738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273c:	08002761 	.word	0x08002761
 8002740:	0800277f 	.word	0x0800277f
 8002744:	08002769 	.word	0x08002769
 8002748:	0800277f 	.word	0x0800277f
 800274c:	0800276f 	.word	0x0800276f
 8002750:	0800277f 	.word	0x0800277f
 8002754:	0800277f 	.word	0x0800277f
 8002758:	0800277f 	.word	0x0800277f
 800275c:	08002777 	.word	0x08002777
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002760:	f7ff fe30 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8002764:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002766:	e00d      	b.n	8002784 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002768:	4b18      	ldr	r3, [pc, #96]	; (80027cc <UART_SetConfig+0x314>)
 800276a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800276c:	e00a      	b.n	8002784 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800276e:	f7ff fd93 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002772:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002774:	e006      	b.n	8002784 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800277a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800277c:	e002      	b.n	8002784 <UART_SetConfig+0x2cc>
      default:
        ret = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	76fb      	strb	r3, [r7, #27]
        break;
 8002782:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 81bc 	beq.w	8002b04 <UART_SetConfig+0x64c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	441a      	add	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	429a      	cmp	r2, r3
 800279a:	d805      	bhi.n	80027a8 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d213      	bcs.n	80027d0 <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	76fb      	strb	r3, [r7, #27]
 80027ac:	e1aa      	b.n	8002b04 <UART_SetConfig+0x64c>
 80027ae:	bf00      	nop
 80027b0:	efff69f3 	.word	0xefff69f3
 80027b4:	40008000 	.word	0x40008000
 80027b8:	40013800 	.word	0x40013800
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40004400 	.word	0x40004400
 80027c4:	40004800 	.word	0x40004800
 80027c8:	40004c00 	.word	0x40004c00
 80027cc:	00f42400 	.word	0x00f42400
      }
      else
      {
        switch (clocksource)
 80027d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	f200 8085 	bhi.w	80028e4 <UART_SetConfig+0x42c>
 80027da:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <UART_SetConfig+0x328>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	08002805 	.word	0x08002805
 80027e4:	080028e5 	.word	0x080028e5
 80027e8:	08002847 	.word	0x08002847
 80027ec:	080028e5 	.word	0x080028e5
 80027f0:	0800287b 	.word	0x0800287b
 80027f4:	080028e5 	.word	0x080028e5
 80027f8:	080028e5 	.word	0x080028e5
 80027fc:	080028e5 	.word	0x080028e5
 8002800:	080028bb 	.word	0x080028bb
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002804:	f7ff fdde 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8002808:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f04f 0400 	mov.w	r4, #0
 8002810:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8002814:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8002818:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	f04f 0400 	mov.w	r4, #0
 8002826:	eb18 0003 	adds.w	r0, r8, r3
 800282a:	eb49 0104 	adc.w	r1, r9, r4
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f04f 0400 	mov.w	r4, #0
 8002836:	461a      	mov	r2, r3
 8002838:	4623      	mov	r3, r4
 800283a:	f7fd ff37 	bl	80006ac <__aeabi_uldivmod>
 800283e:	4603      	mov	r3, r0
 8002840:	460c      	mov	r4, r1
 8002842:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002844:	e051      	b.n	80028ea <UART_SetConfig+0x432>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	f04f 0400 	mov.w	r4, #0
 8002850:	49aa      	ldr	r1, [pc, #680]	; (8002afc <UART_SetConfig+0x644>)
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	eb13 0801 	adds.w	r8, r3, r1
 800285a:	eb44 0902 	adc.w	r9, r4, r2
 800285e:	4640      	mov	r0, r8
 8002860:	4649      	mov	r1, r9
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f04f 0400 	mov.w	r4, #0
 800286a:	461a      	mov	r2, r3
 800286c:	4623      	mov	r3, r4
 800286e:	f7fd ff1d 	bl	80006ac <__aeabi_uldivmod>
 8002872:	4603      	mov	r3, r0
 8002874:	460c      	mov	r4, r1
 8002876:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002878:	e037      	b.n	80028ea <UART_SetConfig+0x432>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800287a:	f7ff fd0d 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 800287e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	461a      	mov	r2, r3
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	021d      	lsls	r5, r3, #8
 800288a:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800288e:	0214      	lsls	r4, r2, #8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	461a      	mov	r2, r3
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	18a0      	adds	r0, r4, r2
 800289e:	eb45 0103 	adc.w	r1, r5, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f04f 0400 	mov.w	r4, #0
 80028aa:	461a      	mov	r2, r3
 80028ac:	4623      	mov	r3, r4
 80028ae:	f7fd fefd 	bl	80006ac <__aeabi_uldivmod>
 80028b2:	4603      	mov	r3, r0
 80028b4:	460c      	mov	r4, r1
 80028b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80028b8:	e017      	b.n	80028ea <UART_SetConfig+0x432>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	085b      	lsrs	r3, r3, #1
 80028c0:	f04f 0400 	mov.w	r4, #0
 80028c4:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80028c8:	f144 0100 	adc.w	r1, r4, #0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f04f 0400 	mov.w	r4, #0
 80028d4:	461a      	mov	r2, r3
 80028d6:	4623      	mov	r3, r4
 80028d8:	f7fd fee8 	bl	80006ac <__aeabi_uldivmod>
 80028dc:	4603      	mov	r3, r0
 80028de:	460c      	mov	r4, r1
 80028e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80028e2:	e002      	b.n	80028ea <UART_SetConfig+0x432>
          default:
            ret = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	76fb      	strb	r3, [r7, #27]
            break;
 80028e8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f0:	d308      	bcc.n	8002904 <UART_SetConfig+0x44c>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f8:	d204      	bcs.n	8002904 <UART_SetConfig+0x44c>
        {
          huart->Instance->BRR = usartdiv;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	e0ff      	b.n	8002b04 <UART_SetConfig+0x64c>
        }
        else
        {
          ret = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	76fb      	strb	r3, [r7, #27]
 8002908:	e0fc      	b.n	8002b04 <UART_SetConfig+0x64c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002912:	f040 8083 	bne.w	8002a1c <UART_SetConfig+0x564>
  {
    switch (clocksource)
 8002916:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800291a:	2b08      	cmp	r3, #8
 800291c:	d85e      	bhi.n	80029dc <UART_SetConfig+0x524>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <UART_SetConfig+0x46c>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	08002949 	.word	0x08002949
 8002928:	08002969 	.word	0x08002969
 800292c:	08002989 	.word	0x08002989
 8002930:	080029dd 	.word	0x080029dd
 8002934:	080029a5 	.word	0x080029a5
 8002938:	080029dd 	.word	0x080029dd
 800293c:	080029dd 	.word	0x080029dd
 8002940:	080029dd 	.word	0x080029dd
 8002944:	080029c5 	.word	0x080029c5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002948:	f7ff fd3c 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 800294c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	005a      	lsls	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	441a      	add	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	b29b      	uxth	r3, r3
 8002964:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002966:	e03c      	b.n	80029e2 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002968:	f7ff fd42 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 800296c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	005a      	lsls	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	441a      	add	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	b29b      	uxth	r3, r3
 8002984:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002986:	e02c      	b.n	80029e2 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002992:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6852      	ldr	r2, [r2, #4]
 800299a:	fbb3 f3f2 	udiv	r3, r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029a2:	e01e      	b.n	80029e2 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029a4:	f7ff fc78 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 80029a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	005a      	lsls	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	441a      	add	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	b29b      	uxth	r3, r3
 80029c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029c2:	e00e      	b.n	80029e2 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029da:	e002      	b.n	80029e2 <UART_SetConfig+0x52a>
      default:
        ret = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	76fb      	strb	r3, [r7, #27]
        break;
 80029e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2b0f      	cmp	r3, #15
 80029e6:	d916      	bls.n	8002a16 <UART_SetConfig+0x55e>
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ee:	d212      	bcs.n	8002a16 <UART_SetConfig+0x55e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f023 030f 	bic.w	r3, r3, #15
 80029f8:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	89fb      	ldrh	r3, [r7, #14]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	89fa      	ldrh	r2, [r7, #14]
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	e076      	b.n	8002b04 <UART_SetConfig+0x64c>
    }
    else
    {
      ret = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	76fb      	strb	r3, [r7, #27]
 8002a1a:	e073      	b.n	8002b04 <UART_SetConfig+0x64c>
    }
  }
  else
  {
    switch (clocksource)
 8002a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d85c      	bhi.n	8002ade <UART_SetConfig+0x626>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <UART_SetConfig+0x574>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a51 	.word	0x08002a51
 8002a30:	08002a6f 	.word	0x08002a6f
 8002a34:	08002a8d 	.word	0x08002a8d
 8002a38:	08002adf 	.word	0x08002adf
 8002a3c:	08002aa9 	.word	0x08002aa9
 8002a40:	08002adf 	.word	0x08002adf
 8002a44:	08002adf 	.word	0x08002adf
 8002a48:	08002adf 	.word	0x08002adf
 8002a4c:	08002ac7 	.word	0x08002ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a50:	f7ff fcb8 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8002a54:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	085a      	lsrs	r2, r3, #1
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	441a      	add	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a6c:	e03a      	b.n	8002ae4 <UART_SetConfig+0x62c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a6e:	f7ff fcbf 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 8002a72:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	085a      	lsrs	r2, r3, #1
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	441a      	add	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a8a:	e02b      	b.n	8002ae4 <UART_SetConfig+0x62c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002a96:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6852      	ldr	r2, [r2, #4]
 8002a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002aa6:	e01d      	b.n	8002ae4 <UART_SetConfig+0x62c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aa8:	f7ff fbf6 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002aac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	085a      	lsrs	r2, r3, #1
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	441a      	add	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ac4:	e00e      	b.n	8002ae4 <UART_SetConfig+0x62c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002adc:	e002      	b.n	8002ae4 <UART_SetConfig+0x62c>
      default:
        ret = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	76fb      	strb	r3, [r7, #27]
        break;
 8002ae2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	d90a      	bls.n	8002b00 <UART_SetConfig+0x648>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d206      	bcs.n	8002b00 <UART_SetConfig+0x648>
    {
      huart->Instance->BRR = usartdiv;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	e003      	b.n	8002b04 <UART_SetConfig+0x64c>
 8002afc:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002b10:	7efb      	ldrb	r3, [r7, #27]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3728      	adds	r7, #40	; 0x28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	6852      	ldr	r2, [r2, #4]
 8002b3a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	6852      	ldr	r2, [r2, #4]
 8002b5c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	6852      	ldr	r2, [r2, #4]
 8002b7e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	6852      	ldr	r2, [r2, #4]
 8002ba0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	6892      	ldr	r2, [r2, #8]
 8002bc2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	6892      	ldr	r2, [r2, #8]
 8002be4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01a      	beq.n	8002c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	6852      	ldr	r2, [r2, #4]
 8002c06:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c1a:	d10a      	bne.n	8002c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	6852      	ldr	r2, [r2, #4]
 8002c26:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	6852      	ldr	r2, [r2, #4]
 8002c48:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
  }
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c6e:	f7fd ff09 	bl	8000a84 <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d10e      	bne.n	8002ca0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f82a 	bl	8002cea <UART_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e020      	b.n	8002ce2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d10e      	bne.n	8002ccc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f814 	bl	8002cea <UART_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e00a      	b.n	8002ce2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cfa:	e05d      	b.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d059      	beq.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7fd febe 	bl	8000a84 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	1ad2      	subs	r2, r2, r3
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d802      	bhi.n	8002d1a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11b      	bne.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d28:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	6892      	ldr	r2, [r2, #8]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e042      	b.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d02b      	beq.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6e:	d123      	bne.n	8002db8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d78:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d88:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	6892      	ldr	r2, [r2, #8]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e00f      	b.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d092      	beq.n	8002cfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b089      	sub	sp, #36	; 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	613b      	str	r3, [r7, #16]
  return result;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2103      	movs	r1, #3
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	401a      	ands	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	61bb      	str	r3, [r7, #24]
  return result;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	601a      	str	r2, [r3, #0]
}
 8002e32:	bf00      	nop
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	401a      	ands	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	605a      	str	r2, [r3, #4]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b089      	sub	sp, #36	; 0x24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	613b      	str	r3, [r7, #16]
  return result;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	2103      	movs	r1, #3
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	61bb      	str	r3, [r7, #24]
  return result;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002ec0:	bf00      	nop
 8002ec2:	3724      	adds	r7, #36	; 0x24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	; 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	613b      	str	r3, [r7, #16]
  return result;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2103      	movs	r1, #3
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	401a      	ands	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	61bb      	str	r3, [r7, #24]
  return result;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	60da      	str	r2, [r3, #12]
}
 8002f1e:	bf00      	nop
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b089      	sub	sp, #36	; 0x24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1a      	ldr	r2, [r3, #32]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	613b      	str	r3, [r7, #16]
  return result;
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	210f      	movs	r1, #15
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	401a      	ands	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	61bb      	str	r3, [r7, #24]
  return result;
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	431a      	orrs	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002f7c:	bf00      	nop
 8002f7e:	3724      	adds	r7, #36	; 0x24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	; 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	613b      	str	r3, [r7, #16]
  return result;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	210f      	movs	r1, #15
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	401a      	ands	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	61bb      	str	r3, [r7, #24]
  return result;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002fde:	bf00      	nop
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	60bb      	str	r3, [r7, #8]
  return result;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800300c:	e040      	b.n	8003090 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	2101      	movs	r1, #1
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d032      	beq.n	800308a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	461a      	mov	r2, r3
 800302a:	6939      	ldr	r1, [r7, #16]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff fed7 	bl	8002de0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d003      	beq.n	8003042 <LL_GPIO_Init+0x58>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d106      	bne.n	8003050 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	461a      	mov	r2, r3
 8003048:	6939      	ldr	r1, [r7, #16]
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ff0f 	bl	8002e6e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	461a      	mov	r2, r3
 8003056:	6939      	ldr	r1, [r7, #16]
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff37 	bl	8002ecc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d111      	bne.n	800308a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2bff      	cmp	r3, #255	; 0xff
 800306a:	d807      	bhi.n	800307c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	461a      	mov	r2, r3
 8003072:	6939      	ldr	r1, [r7, #16]
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ff58 	bl	8002f2a <LL_GPIO_SetAFPin_0_7>
 800307a:	e006      	b.n	800308a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	461a      	mov	r2, r3
 8003082:	6939      	ldr	r1, [r7, #16]
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff7f 	bl	8002f88 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	3301      	adds	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1b7      	bne.n	800300e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d003      	beq.n	80030ae <LL_GPIO_Init+0xc4>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d107      	bne.n	80030be <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	461a      	mov	r2, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff fec0 	bl	8002e3e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <LL_RCC_HSI_IsReady+0x24>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d8:	d101      	bne.n	80030de <LL_RCC_HSI_IsReady+0x16>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <LL_RCC_HSI_IsReady+0x18>
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000

080030f0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <LL_RCC_LSE_IsReady+0x24>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d101      	bne.n	8003106 <LL_RCC_LSE_IsReady+0x16>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <LL_RCC_LSE_IsReady+0x18>
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000

08003118 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b08      	cmp	r3, #8
 8003126:	d101      	bne.n	800312c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40021000 	.word	0x40021000

0800313c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <LL_RCC_MSI_GetRange+0x18>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000

08003158 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800315e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003162:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003166:	4618      	mov	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40021000 	.word	0x40021000

08003174 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <LL_RCC_GetSysClkSource+0x18>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 030c 	and.w	r3, r3, #12
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000

08003190 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <LL_RCC_GetAHBPrescaler+0x18>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000

080031ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000

080031c8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000

080031e4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <LL_RCC_GetUSARTClockSource+0x24>)
 80031ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	401a      	ands	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	041b      	lsls	r3, r3, #16
 80031fa:	4313      	orrs	r3, r2
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	40021000 	.word	0x40021000

0800320c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <LL_RCC_GetUARTClockSource+0x24>)
 8003216:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	401a      	ands	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	041b      	lsls	r3, r3, #16
 8003222:	4313      	orrs	r3, r2
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40021000 	.word	0x40021000

08003234 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <LL_RCC_PLL_GetMainSource+0x18>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0303 	and.w	r3, r3, #3
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000

08003250 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <LL_RCC_PLL_GetN+0x18>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40021000 	.word	0x40021000

0800326c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <LL_RCC_PLL_GetR+0x18>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000

08003288 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <LL_RCC_PLL_GetDivider+0x18>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000

080032a4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d137      	bne.n	8003326 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ff94 	bl	80031e4 <LL_RCC_GetUSARTClockSource>
 80032bc:	4603      	mov	r3, r0
 80032be:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	f200 80b2 	bhi.w	800342c <LL_RCC_GetUSARTClockFreq+0x188>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	0800330f 	.word	0x0800330f
 80032d4:	080032e1 	.word	0x080032e1
 80032d8:	080032e9 	.word	0x080032e9
 80032dc:	080032fb 	.word	0x080032fb
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80032e0:	f000 f90c 	bl	80034fc <RCC_GetSystemClockFreq>
 80032e4:	60f8      	str	r0, [r7, #12]
        break;
 80032e6:	e0b0      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80032e8:	f7ff feee 	bl	80030c8 <LL_RCC_HSI_IsReady>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 809e 	beq.w	8003430 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 80032f4:	4b57      	ldr	r3, [pc, #348]	; (8003454 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 80032f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80032f8:	e09a      	b.n	8003430 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80032fa:	f7ff fef9 	bl	80030f0 <LL_RCC_LSE_IsReady>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8097 	beq.w	8003434 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8003306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800330c:	e092      	b.n	8003434 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800330e:	f000 f8f5 	bl	80034fc <RCC_GetSystemClockFreq>
 8003312:	4603      	mov	r3, r0
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f981 	bl	800361c <RCC_GetHCLKClockFreq>
 800331a:	4603      	mov	r3, r0
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f9a7 	bl	8003670 <RCC_GetPCLK2ClockFreq>
 8003322:	60f8      	str	r0, [r7, #12]
        break;
 8003324:	e091      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b0c      	cmp	r3, #12
 800332a:	d146      	bne.n	80033ba <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff59 	bl	80031e4 <LL_RCC_GetUSARTClockSource>
 8003332:	4603      	mov	r3, r0
 8003334:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003338:	2b0c      	cmp	r3, #12
 800333a:	d87d      	bhi.n	8003438 <LL_RCC_GetUSARTClockFreq+0x194>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	080033a3 	.word	0x080033a3
 8003348:	08003439 	.word	0x08003439
 800334c:	08003439 	.word	0x08003439
 8003350:	08003439 	.word	0x08003439
 8003354:	08003379 	.word	0x08003379
 8003358:	08003439 	.word	0x08003439
 800335c:	08003439 	.word	0x08003439
 8003360:	08003439 	.word	0x08003439
 8003364:	08003381 	.word	0x08003381
 8003368:	08003439 	.word	0x08003439
 800336c:	08003439 	.word	0x08003439
 8003370:	08003439 	.word	0x08003439
 8003374:	08003391 	.word	0x08003391
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003378:	f000 f8c0 	bl	80034fc <RCC_GetSystemClockFreq>
 800337c:	60f8      	str	r0, [r7, #12]
        break;
 800337e:	e064      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003380:	f7ff fea2 	bl	80030c8 <LL_RCC_HSI_IsReady>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d058      	beq.n	800343c <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 800338a:	4b32      	ldr	r3, [pc, #200]	; (8003454 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800338c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800338e:	e055      	b.n	800343c <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003390:	f7ff feae 	bl	80030f0 <LL_RCC_LSE_IsReady>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d052      	beq.n	8003440 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 800339a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800339e:	60fb      	str	r3, [r7, #12]
        }
        break;
 80033a0:	e04e      	b.n	8003440 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80033a2:	f000 f8ab 	bl	80034fc <RCC_GetSystemClockFreq>
 80033a6:	4603      	mov	r3, r0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f937 	bl	800361c <RCC_GetHCLKClockFreq>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f949 	bl	8003648 <RCC_GetPCLK1ClockFreq>
 80033b6:	60f8      	str	r0, [r7, #12]
        break;
 80033b8:	e047      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b30      	cmp	r3, #48	; 0x30
 80033be:	d144      	bne.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff0f 	bl	80031e4 <LL_RCC_GetUSARTClockSource>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4a23      	ldr	r2, [pc, #140]	; (8003458 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00d      	beq.n	80033ea <LL_RCC_GetUSARTClockFreq+0x146>
 80033ce:	4a22      	ldr	r2, [pc, #136]	; (8003458 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d803      	bhi.n	80033dc <LL_RCC_GetUSARTClockFreq+0x138>
 80033d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033d8:	d01c      	beq.n	8003414 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 80033da:	e036      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80033dc:	4a1f      	ldr	r2, [pc, #124]	; (800345c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <LL_RCC_GetUSARTClockFreq+0x14e>
 80033e2:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80033e6:	d00c      	beq.n	8003402 <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 80033e8:	e02f      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
          usart_frequency = RCC_GetSystemClockFreq();
 80033ea:	f000 f887 	bl	80034fc <RCC_GetSystemClockFreq>
 80033ee:	60f8      	str	r0, [r7, #12]
          break;
 80033f0:	e02b      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
          if (LL_RCC_HSI_IsReady() != 0U)
 80033f2:	f7ff fe69 	bl	80030c8 <LL_RCC_HSI_IsReady>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d023      	beq.n	8003444 <LL_RCC_GetUSARTClockFreq+0x1a0>
            usart_frequency = HSI_VALUE;
 80033fc:	4b15      	ldr	r3, [pc, #84]	; (8003454 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 80033fe:	60fb      	str	r3, [r7, #12]
          break;
 8003400:	e020      	b.n	8003444 <LL_RCC_GetUSARTClockFreq+0x1a0>
          if (LL_RCC_LSE_IsReady() != 0U)
 8003402:	f7ff fe75 	bl	80030f0 <LL_RCC_LSE_IsReady>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01d      	beq.n	8003448 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = LSE_VALUE;
 800340c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003410:	60fb      	str	r3, [r7, #12]
          break;
 8003412:	e019      	b.n	8003448 <LL_RCC_GetUSARTClockFreq+0x1a4>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003414:	f000 f872 	bl	80034fc <RCC_GetSystemClockFreq>
 8003418:	4603      	mov	r3, r0
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f8fe 	bl	800361c <RCC_GetHCLKClockFreq>
 8003420:	4603      	mov	r3, r0
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f910 	bl	8003648 <RCC_GetPCLK1ClockFreq>
 8003428:	60f8      	str	r0, [r7, #12]
          break;
 800342a:	e00e      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
        break;
 800342c:	bf00      	nop
 800342e:	e00c      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
        break;
 8003430:	bf00      	nop
 8003432:	e00a      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
        break;
 8003434:	bf00      	nop
 8003436:	e008      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
        break;
 8003438:	bf00      	nop
 800343a:	e006      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
        break;
 800343c:	bf00      	nop
 800343e:	e004      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
        break;
 8003440:	bf00      	nop
 8003442:	e002      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
          break;
 8003444:	bf00      	nop
 8003446:	e000      	b.n	800344a <LL_RCC_GetUSARTClockFreq+0x1a6>
          break;
 8003448:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	00f42400 	.word	0x00f42400
 8003458:	00300010 	.word	0x00300010
 800345c:	00300020 	.word	0x00300020

08003460 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2bc0      	cmp	r3, #192	; 0xc0
 8003470:	d138      	bne.n	80034e4 <LL_RCC_GetUARTClockFreq+0x84>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff feca 	bl	800320c <LL_RCC_GetUARTClockSource>
 8003478:	4603      	mov	r3, r0
 800347a:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <LL_RCC_GetUARTClockFreq+0x90>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00d      	beq.n	800349c <LL_RCC_GetUARTClockFreq+0x3c>
 8003480:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <LL_RCC_GetUARTClockFreq+0x90>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d803      	bhi.n	800348e <LL_RCC_GetUARTClockFreq+0x2e>
 8003486:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800348a:	d01c      	beq.n	80034c6 <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 800348c:	e02a      	b.n	80034e4 <LL_RCC_GetUARTClockFreq+0x84>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800348e:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <LL_RCC_GetUARTClockFreq+0x94>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d007      	beq.n	80034a4 <LL_RCC_GetUARTClockFreq+0x44>
 8003494:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8003498:	d00c      	beq.n	80034b4 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 800349a:	e023      	b.n	80034e4 <LL_RCC_GetUARTClockFreq+0x84>
        uart_frequency = RCC_GetSystemClockFreq();
 800349c:	f000 f82e 	bl	80034fc <RCC_GetSystemClockFreq>
 80034a0:	60f8      	str	r0, [r7, #12]
        break;
 80034a2:	e01f      	b.n	80034e4 <LL_RCC_GetUARTClockFreq+0x84>
        if (LL_RCC_HSI_IsReady() != 0U)
 80034a4:	f7ff fe10 	bl	80030c8 <LL_RCC_HSI_IsReady>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d017      	beq.n	80034de <LL_RCC_GetUARTClockFreq+0x7e>
          uart_frequency = HSI_VALUE;
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <LL_RCC_GetUARTClockFreq+0x98>)
 80034b0:	60fb      	str	r3, [r7, #12]
        break;
 80034b2:	e014      	b.n	80034de <LL_RCC_GetUARTClockFreq+0x7e>
        if (LL_RCC_LSE_IsReady() != 0U)
 80034b4:	f7ff fe1c 	bl	80030f0 <LL_RCC_LSE_IsReady>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d011      	beq.n	80034e2 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = LSE_VALUE;
 80034be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c2:	60fb      	str	r3, [r7, #12]
        break;
 80034c4:	e00d      	b.n	80034e2 <LL_RCC_GetUARTClockFreq+0x82>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80034c6:	f000 f819 	bl	80034fc <RCC_GetSystemClockFreq>
 80034ca:	4603      	mov	r3, r0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f8a5 	bl	800361c <RCC_GetHCLKClockFreq>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f8b7 	bl	8003648 <RCC_GetPCLK1ClockFreq>
 80034da:	60f8      	str	r0, [r7, #12]
        break;
 80034dc:	e002      	b.n	80034e4 <LL_RCC_GetUARTClockFreq+0x84>
        break;
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <LL_RCC_GetUARTClockFreq+0x84>
        break;
 80034e2:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80034e4:	68fb      	ldr	r3, [r7, #12]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	00c00040 	.word	0x00c00040
 80034f4:	00c00080 	.word	0x00c00080
 80034f8:	00f42400 	.word	0x00f42400

080034fc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003502:	f7ff fe37 	bl	8003174 <LL_RCC_GetSysClkSource>
 8003506:	4603      	mov	r3, r0
 8003508:	2b0c      	cmp	r3, #12
 800350a:	d851      	bhi.n	80035b0 <RCC_GetSystemClockFreq+0xb4>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <RCC_GetSystemClockFreq+0x18>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003549 	.word	0x08003549
 8003518:	080035b1 	.word	0x080035b1
 800351c:	080035b1 	.word	0x080035b1
 8003520:	080035b1 	.word	0x080035b1
 8003524:	0800359d 	.word	0x0800359d
 8003528:	080035b1 	.word	0x080035b1
 800352c:	080035b1 	.word	0x080035b1
 8003530:	080035b1 	.word	0x080035b1
 8003534:	080035a3 	.word	0x080035a3
 8003538:	080035b1 	.word	0x080035b1
 800353c:	080035b1 	.word	0x080035b1
 8003540:	080035b1 	.word	0x080035b1
 8003544:	080035a9 	.word	0x080035a9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003548:	f7ff fde6 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d111      	bne.n	8003576 <RCC_GetSystemClockFreq+0x7a>
 8003552:	f7ff fde1 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <RCC_GetSystemClockFreq+0x6a>
 800355c:	f7ff fdee 	bl	800313c <LL_RCC_MSI_GetRange>
 8003560:	4603      	mov	r3, r0
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	e003      	b.n	800356e <RCC_GetSystemClockFreq+0x72>
 8003566:	f7ff fdf7 	bl	8003158 <LL_RCC_MSI_GetRangeAfterStandby>
 800356a:	4603      	mov	r3, r0
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	4a28      	ldr	r2, [pc, #160]	; (8003610 <RCC_GetSystemClockFreq+0x114>)
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	e010      	b.n	8003598 <RCC_GetSystemClockFreq+0x9c>
 8003576:	f7ff fdcf 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <RCC_GetSystemClockFreq+0x8e>
 8003580:	f7ff fddc 	bl	800313c <LL_RCC_MSI_GetRange>
 8003584:	4603      	mov	r3, r0
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	e003      	b.n	8003592 <RCC_GetSystemClockFreq+0x96>
 800358a:	f7ff fde5 	bl	8003158 <LL_RCC_MSI_GetRangeAfterStandby>
 800358e:	4603      	mov	r3, r0
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <RCC_GetSystemClockFreq+0x114>)
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800359a:	e033      	b.n	8003604 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <RCC_GetSystemClockFreq+0x118>)
 800359e:	607b      	str	r3, [r7, #4]
      break;
 80035a0:	e030      	b.n	8003604 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <RCC_GetSystemClockFreq+0x11c>)
 80035a4:	607b      	str	r3, [r7, #4]
      break;
 80035a6:	e02d      	b.n	8003604 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80035a8:	f000 f876 	bl	8003698 <RCC_PLL_GetFreqDomain_SYS>
 80035ac:	6078      	str	r0, [r7, #4]
      break;
 80035ae:	e029      	b.n	8003604 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80035b0:	f7ff fdb2 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d111      	bne.n	80035de <RCC_GetSystemClockFreq+0xe2>
 80035ba:	f7ff fdad 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <RCC_GetSystemClockFreq+0xd2>
 80035c4:	f7ff fdba 	bl	800313c <LL_RCC_MSI_GetRange>
 80035c8:	4603      	mov	r3, r0
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	e003      	b.n	80035d6 <RCC_GetSystemClockFreq+0xda>
 80035ce:	f7ff fdc3 	bl	8003158 <LL_RCC_MSI_GetRangeAfterStandby>
 80035d2:	4603      	mov	r3, r0
 80035d4:	0a1b      	lsrs	r3, r3, #8
 80035d6:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <RCC_GetSystemClockFreq+0x114>)
 80035d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035dc:	e010      	b.n	8003600 <RCC_GetSystemClockFreq+0x104>
 80035de:	f7ff fd9b 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <RCC_GetSystemClockFreq+0xf6>
 80035e8:	f7ff fda8 	bl	800313c <LL_RCC_MSI_GetRange>
 80035ec:	4603      	mov	r3, r0
 80035ee:	091b      	lsrs	r3, r3, #4
 80035f0:	e003      	b.n	80035fa <RCC_GetSystemClockFreq+0xfe>
 80035f2:	f7ff fdb1 	bl	8003158 <LL_RCC_MSI_GetRangeAfterStandby>
 80035f6:	4603      	mov	r3, r0
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	4a05      	ldr	r2, [pc, #20]	; (8003610 <RCC_GetSystemClockFreq+0x114>)
 80035fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003600:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003602:	bf00      	nop
  }

  return frequency;
 8003604:	687b      	ldr	r3, [r7, #4]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	080074ec 	.word	0x080074ec
 8003614:	00f42400 	.word	0x00f42400
 8003618:	007a1200 	.word	0x007a1200

0800361c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003624:	f7ff fdb4 	bl	8003190 <LL_RCC_GetAHBPrescaler>
 8003628:	4603      	mov	r3, r0
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <RCC_GetHCLKClockFreq+0x28>)
 8003632:	5cd3      	ldrb	r3, [r2, r3]
 8003634:	461a      	mov	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	40d3      	lsrs	r3, r2
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	080074d4 	.word	0x080074d4

08003648 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003650:	f7ff fdac 	bl	80031ac <LL_RCC_GetAPB1Prescaler>
 8003654:	4603      	mov	r3, r0
 8003656:	0a1b      	lsrs	r3, r3, #8
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <RCC_GetPCLK1ClockFreq+0x24>)
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	40d3      	lsrs	r3, r2
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	080074e4 	.word	0x080074e4

08003670 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003678:	f7ff fda6 	bl	80031c8 <LL_RCC_GetAPB2Prescaler>
 800367c:	4603      	mov	r3, r0
 800367e:	0adb      	lsrs	r3, r3, #11
 8003680:	4a04      	ldr	r2, [pc, #16]	; (8003694 <RCC_GetPCLK2ClockFreq+0x24>)
 8003682:	5cd3      	ldrb	r3, [r2, r3]
 8003684:	461a      	mov	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	40d3      	lsrs	r3, r2
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	080074e4 	.word	0x080074e4

08003698 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800369e:	f7ff fdc9 	bl	8003234 <LL_RCC_PLL_GetMainSource>
 80036a2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d02d      	beq.n	8003706 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d02e      	beq.n	800370c <RCC_PLL_GetFreqDomain_SYS+0x74>
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d12f      	bne.n	8003712 <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036b2:	f7ff fd31 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d111      	bne.n	80036e0 <RCC_PLL_GetFreqDomain_SYS+0x48>
 80036bc:	f7ff fd2c 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <RCC_PLL_GetFreqDomain_SYS+0x38>
 80036c6:	f7ff fd39 	bl	800313c <LL_RCC_MSI_GetRange>
 80036ca:	4603      	mov	r3, r0
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	e003      	b.n	80036d8 <RCC_PLL_GetFreqDomain_SYS+0x40>
 80036d0:	f7ff fd42 	bl	8003158 <LL_RCC_MSI_GetRangeAfterStandby>
 80036d4:	4603      	mov	r3, r0
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	4a2f      	ldr	r2, [pc, #188]	; (8003798 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80036da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036de:	e010      	b.n	8003702 <RCC_PLL_GetFreqDomain_SYS+0x6a>
 80036e0:	f7ff fd1a 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 80036ea:	f7ff fd27 	bl	800313c <LL_RCC_MSI_GetRange>
 80036ee:	4603      	mov	r3, r0
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	e003      	b.n	80036fc <RCC_PLL_GetFreqDomain_SYS+0x64>
 80036f4:	f7ff fd30 	bl	8003158 <LL_RCC_MSI_GetRangeAfterStandby>
 80036f8:	4603      	mov	r3, r0
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80036fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003702:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003704:	e02f      	b.n	8003766 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003706:	4b25      	ldr	r3, [pc, #148]	; (800379c <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8003708:	607b      	str	r3, [r7, #4]
      break;
 800370a:	e02c      	b.n	8003766 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 800370e:	607b      	str	r3, [r7, #4]
      break;
 8003710:	e029      	b.n	8003766 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003712:	f7ff fd01 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d111      	bne.n	8003740 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 800371c:	f7ff fcfc 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d004      	beq.n	8003730 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8003726:	f7ff fd09 	bl	800313c <LL_RCC_MSI_GetRange>
 800372a:	4603      	mov	r3, r0
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	e003      	b.n	8003738 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8003730:	f7ff fd12 	bl	8003158 <LL_RCC_MSI_GetRangeAfterStandby>
 8003734:	4603      	mov	r3, r0
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	4a17      	ldr	r2, [pc, #92]	; (8003798 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800373a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373e:	e010      	b.n	8003762 <RCC_PLL_GetFreqDomain_SYS+0xca>
 8003740:	f7ff fcea 	bl	8003118 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 800374a:	f7ff fcf7 	bl	800313c <LL_RCC_MSI_GetRange>
 800374e:	4603      	mov	r3, r0
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	e003      	b.n	800375c <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8003754:	f7ff fd00 	bl	8003158 <LL_RCC_MSI_GetRangeAfterStandby>
 8003758:	4603      	mov	r3, r0
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800375e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003762:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003764:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003766:	f7ff fd8f 	bl	8003288 <LL_RCC_PLL_GetDivider>
 800376a:	4603      	mov	r3, r0
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	3301      	adds	r3, #1
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	fbb2 f4f3 	udiv	r4, r2, r3
 8003776:	f7ff fd6b 	bl	8003250 <LL_RCC_PLL_GetN>
 800377a:	4603      	mov	r3, r0
 800377c:	fb03 f404 	mul.w	r4, r3, r4
 8003780:	f7ff fd74 	bl	800326c <LL_RCC_PLL_GetR>
 8003784:	4603      	mov	r3, r0
 8003786:	0e5b      	lsrs	r3, r3, #25
 8003788:	3301      	adds	r3, #1
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bd90      	pop	{r4, r7, pc}
 8003798:	080074ec 	.word	0x080074ec
 800379c:	00f42400 	.word	0x00f42400
 80037a0:	007a1200 	.word	0x007a1200

080037a4 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f043 0201 	orr.w	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	615a      	str	r2, [r3, #20]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a2b      	ldr	r2, [pc, #172]	; (8003984 <LL_TIM_Init+0xc0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d007      	beq.n	80038ec <LL_TIM_Init+0x28>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e2:	d003      	beq.n	80038ec <LL_TIM_Init+0x28>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a28      	ldr	r2, [pc, #160]	; (8003988 <LL_TIM_Init+0xc4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d106      	bne.n	80038fa <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a21      	ldr	r2, [pc, #132]	; (8003984 <LL_TIM_Init+0xc0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00f      	beq.n	8003922 <LL_TIM_Init+0x5e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d00b      	beq.n	8003922 <LL_TIM_Init+0x5e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1e      	ldr	r2, [pc, #120]	; (8003988 <LL_TIM_Init+0xc4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <LL_TIM_Init+0x5e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a1d      	ldr	r2, [pc, #116]	; (800398c <LL_TIM_Init+0xc8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <LL_TIM_Init+0x5e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1c      	ldr	r2, [pc, #112]	; (8003990 <LL_TIM_Init+0xcc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d106      	bne.n	8003930 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	4619      	mov	r1, r3
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff3f 	bl	80037c0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff2b 	bl	80037a4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <LL_TIM_Init+0xc0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <LL_TIM_Init+0xa2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a0c      	ldr	r2, [pc, #48]	; (800398c <LL_TIM_Init+0xc8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <LL_TIM_Init+0xa2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <LL_TIM_Init+0xcc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d105      	bne.n	8003972 <LL_TIM_Init+0xae>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	7c1b      	ldrb	r3, [r3, #16]
 800396a:	4619      	mov	r1, r3
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff35 	bl	80037dc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ff96 	bl	80038a4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40000400 	.word	0x40000400
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400

08003994 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039aa:	d01f      	beq.n	80039ec <LL_TIM_OC_Init+0x58>
 80039ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b0:	d804      	bhi.n	80039bc <LL_TIM_OC_Init+0x28>
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d00c      	beq.n	80039d0 <LL_TIM_OC_Init+0x3c>
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d011      	beq.n	80039de <LL_TIM_OC_Init+0x4a>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80039ba:	e033      	b.n	8003a24 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c0:	d022      	beq.n	8003a08 <LL_TIM_OC_Init+0x74>
 80039c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c6:	d026      	beq.n	8003a16 <LL_TIM_OC_Init+0x82>
 80039c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039cc:	d015      	beq.n	80039fa <LL_TIM_OC_Init+0x66>
      break;
 80039ce:	e029      	b.n	8003a24 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f82c 	bl	8003a30 <OC1Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]
      break;
 80039dc:	e022      	b.n	8003a24 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f899 	bl	8003b18 <OC2Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ea:	e01b      	b.n	8003a24 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f90a 	bl	8003c08 <OC3Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	75fb      	strb	r3, [r7, #23]
      break;
 80039f8:	e014      	b.n	8003a24 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f97b 	bl	8003cf8 <OC4Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	75fb      	strb	r3, [r7, #23]
      break;
 8003a06:	e00d      	b.n	8003a24 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f9d4 	bl	8003db8 <OC5Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]
      break;
 8003a14:	e006      	b.n	8003a24 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fa25 	bl	8003e68 <OC6Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	75fb      	strb	r3, [r7, #23]
      break;
 8003a22:	bf00      	nop
  }

  return result;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f023 0202 	bic.w	r2, r3, #2
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0201 	bic.w	r2, r3, #1
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <OC1Config+0xdc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <OC1Config+0x76>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a1d      	ldr	r2, [pc, #116]	; (8003b10 <OC1Config+0xe0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <OC1Config+0x76>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <OC1Config+0xe4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d11e      	bne.n	8003ae4 <OC1Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 0208 	bic.w	r2, r3, #8
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f023 0204 	bic.w	r2, r3, #4
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fe7e 	bl	80037f8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40014400 	.word	0x40014400

08003b18 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f023 0210 	bic.w	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	0212      	lsls	r2, r2, #8
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0220 	bic.w	r2, r3, #32
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0210 	bic.w	r2, r3, #16
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <OC2Config+0xe4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d007      	beq.n	8003b94 <OC2Config+0x7c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <OC2Config+0xe8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <OC2Config+0x7c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <OC2Config+0xec>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d11f      	bne.n	8003bd4 <OC2Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	019b      	lsls	r3, r3, #6
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	019b      	lsls	r3, r3, #6
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4619      	mov	r1, r3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff fe14 	bl	8003814 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40014000 	.word	0x40014000
 8003c04:	40014400 	.word	0x40014400

08003c08 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a1f      	ldr	r2, [pc, #124]	; (8003cec <OC3Config+0xe4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d007      	beq.n	8003c82 <OC3Config+0x7a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <OC3Config+0xe8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d003      	beq.n	8003c82 <OC3Config+0x7a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <OC3Config+0xec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d11f      	bne.n	8003cc2 <OC3Config+0xba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	029b      	lsls	r3, r3, #10
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	029b      	lsls	r3, r3, #10
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	015b      	lsls	r3, r3, #5
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fdab 	bl	8003830 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400

08003cf8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	0212      	lsls	r2, r2, #8
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	031b      	lsls	r3, r3, #12
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	031b      	lsls	r3, r3, #12
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a13      	ldr	r2, [pc, #76]	; (8003dac <OC4Config+0xb4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d007      	beq.n	8003d74 <OC4Config+0x7c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a12      	ldr	r2, [pc, #72]	; (8003db0 <OC4Config+0xb8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <OC4Config+0x7c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a11      	ldr	r2, [pc, #68]	; (8003db4 <OC4Config+0xbc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d107      	bne.n	8003d84 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	019b      	lsls	r3, r3, #6
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fd58 	bl	800384c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40014400 	.word	0x40014400

08003db8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	041b      	lsls	r3, r3, #16
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <OC5Config+0xa4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <OC5Config+0x6c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <OC5Config+0xa8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <OC5Config+0x6c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a11      	ldr	r2, [pc, #68]	; (8003e64 <OC5Config+0xac>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d109      	bne.n	8003e38 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff fd0f 	bl	8003868 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400

08003e68 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	0212      	lsls	r2, r2, #8
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	051b      	lsls	r3, r3, #20
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	051b      	lsls	r3, r3, #20
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <OC6Config+0xa4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <OC6Config+0x6e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a11      	ldr	r2, [pc, #68]	; (8003f10 <OC6Config+0xa8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <OC6Config+0x6e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a10      	ldr	r2, [pc, #64]	; (8003f14 <OC6Config+0xac>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d109      	bne.n	8003eea <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	029b      	lsls	r3, r3, #10
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fcc6 	bl	8003888 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40014400 	.word	0x40014400

08003f18 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <LL_USART_IsEnabled+0x18>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <LL_USART_IsEnabled+0x1a>
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	605a      	str	r2, [r3, #4]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8003f8a:	b490      	push	{r4, r7}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	603b      	str	r3, [r7, #0]
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9e:	d116      	bne.n	8003fce <LL_USART_SetBaudRate+0x44>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	005a      	lsls	r2, r3, #1
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	441a      	add	r2, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8003fba:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	60dc      	str	r4, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8003fcc:	e00a      	b.n	8003fe4 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	085a      	lsrs	r2, r3, #1
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	441a      	add	r2, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	60da      	str	r2, [r3, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc90      	pop	{r4, r7}
 8003fec:	4770      	bx	lr
	...

08003ff0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff ff88 	bl	8003f18 <LL_USART_IsEnabled>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d151      	bne.n	80040b2 <LL_USART_Init+0xc2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b2a      	ldr	r3, [pc, #168]	; (80040bc <LL_USART_Init+0xcc>)
 8004014:	4013      	ands	r3, r2
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	6851      	ldr	r1, [r2, #4]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	68d2      	ldr	r2, [r2, #12]
 800401e:	4311      	orrs	r1, r2
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	6912      	ldr	r2, [r2, #16]
 8004024:	4311      	orrs	r1, r2
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	6992      	ldr	r2, [r2, #24]
 800402a:	430a      	orrs	r2, r1
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff80 	bl	8003f3e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff8d 	bl	8003f64 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <LL_USART_Init+0xd0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d104      	bne.n	800405c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004052:	2003      	movs	r0, #3
 8004054:	f7ff f926 	bl	80032a4 <LL_RCC_GetUSARTClockFreq>
 8004058:	60b8      	str	r0, [r7, #8]
 800405a:	e019      	b.n	8004090 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a19      	ldr	r2, [pc, #100]	; (80040c4 <LL_USART_Init+0xd4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d104      	bne.n	800406e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004064:	200c      	movs	r0, #12
 8004066:	f7ff f91d 	bl	80032a4 <LL_RCC_GetUSARTClockFreq>
 800406a:	60b8      	str	r0, [r7, #8]
 800406c:	e010      	b.n	8004090 <LL_USART_Init+0xa0>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <LL_USART_Init+0xd8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d104      	bne.n	8004080 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004076:	2030      	movs	r0, #48	; 0x30
 8004078:	f7ff f914 	bl	80032a4 <LL_RCC_GetUSARTClockFreq>
 800407c:	60b8      	str	r0, [r7, #8]
 800407e:	e007      	b.n	8004090 <LL_USART_Init+0xa0>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a12      	ldr	r2, [pc, #72]	; (80040cc <LL_USART_Init+0xdc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d103      	bne.n	8004090 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8004088:	20c0      	movs	r0, #192	; 0xc0
 800408a:	f7ff f9e9 	bl	8003460 <LL_RCC_GetUARTClockFreq>
 800408e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <LL_USART_Init+0xc2>
        && (USART_InitStruct->BaudRate != 0U))
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <LL_USART_Init+0xc2>
    {
      status = SUCCESS;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff6c 	bl	8003f8a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	efff69f3 	.word	0xefff69f3
 80040c0:	40013800 	.word	0x40013800
 80040c4:	40004400 	.word	0x40004400
 80040c8:	40004800 	.word	0x40004800
 80040cc:	40004c00 	.word	0x40004c00

080040d0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <LL_SetSystemCoreClock+0x1c>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6013      	str	r3, [r2, #0]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	2000000c 	.word	0x2000000c

080040f0 <EnableBatterySensePin>:

#include "Battery.h"
#include "adc.h"

void EnableBatterySensePin(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VBat_Sense_En_GPIO_Port, VBat_Sense_En_Pin, GPIO_PIN_SET);
 80040f4:	2201      	movs	r2, #1
 80040f6:	2180      	movs	r1, #128	; 0x80
 80040f8:	4802      	ldr	r0, [pc, #8]	; (8004104 <EnableBatterySensePin+0x14>)
 80040fa:	f7fe f883 	bl	8002204 <HAL_GPIO_WritePin>
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	48000400 	.word	0x48000400

08004108 <DisableBatterySensePin>:

void DisableBatterySensePin(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VBat_Sense_En_GPIO_Port, VBat_Sense_En_Pin, GPIO_PIN_RESET);
 800410c:	2200      	movs	r2, #0
 800410e:	2180      	movs	r1, #128	; 0x80
 8004110:	4802      	ldr	r0, [pc, #8]	; (800411c <DisableBatterySensePin+0x14>)
 8004112:	f7fe f877 	bl	8002204 <HAL_GPIO_WritePin>
}
 8004116:	bf00      	nop
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	48000400 	.word	0x48000400

08004120 <BatteryMeasure_Init>:

uint8_t BatteryMeasure_Init(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	//Enable the GPIO pin
	EnableBatterySensePin();
 8004124:	f7ff ffe4 	bl	80040f0 <EnableBatterySensePin>

	HAL_Delay(10);
 8004128:	200a      	movs	r0, #10
 800412a:	f7fc fcb7 	bl	8000a9c <HAL_Delay>

	if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) == HAL_OK)
 800412e:	217f      	movs	r1, #127	; 0x7f
 8004130:	4808      	ldr	r0, [pc, #32]	; (8004154 <BatteryMeasure_Init+0x34>)
 8004132:	f7fd fd64 	bl	8001bfe <HAL_ADCEx_Calibration_Start>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d107      	bne.n	800414c <BatteryMeasure_Init+0x2c>
	{
		if(HAL_ADC_Start(&hadc1) == HAL_OK)
 800413c:	4805      	ldr	r0, [pc, #20]	; (8004154 <BatteryMeasure_Init+0x34>)
 800413e:	f7fd f80d 	bl	800115c <HAL_ADC_Start>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <BatteryMeasure_Init+0x2c>
		{
			return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <BatteryMeasure_Init+0x2e>
		}
	}
	return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
}
 800414e:	4618      	mov	r0, r3
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000244 	.word	0x20000244

08004158 <Battery_GetLevel_Raw>:

uint16_t Battery_GetLevel_Raw(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
	__IO uint16_t adc_value = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_PollForConversion(&hadc1, 10);
 8004162:	210a      	movs	r1, #10
 8004164:	480c      	ldr	r0, [pc, #48]	; (8004198 <Battery_GetLevel_Raw+0x40>)
 8004166:	f7fd f85c 	bl	8001222 <HAL_ADC_PollForConversion>

	/* Check if the continuous conversion of regular channel is finished */
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_REG_EOC)
 800416a:	480b      	ldr	r0, [pc, #44]	; (8004198 <Battery_GetLevel_Raw+0x40>)
 800416c:	f7fd fc5c 	bl	8001a28 <HAL_ADC_GetState>
 8004170:	4603      	mov	r3, r0
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800417a:	d108      	bne.n	800418e <Battery_GetLevel_Raw+0x36>
			== HAL_ADC_STATE_REG_EOC)
	{
		/* Get the converted value of regular channel */
		adc_value = HAL_ADC_GetValue(&hadc1);
 800417c:	4806      	ldr	r0, [pc, #24]	; (8004198 <Battery_GetLevel_Raw+0x40>)
 800417e:	f7fd f8d8 	bl	8001332 <HAL_ADC_GetValue>
 8004182:	4603      	mov	r3, r0
 8004184:	b29b      	uxth	r3, r3
 8004186:	80fb      	strh	r3, [r7, #6]
	else
	{
		return 0;
	}

	return adc_value;
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	b29b      	uxth	r3, r3
 800418c:	e000      	b.n	8004190 <Battery_GetLevel_Raw+0x38>
		return 0;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000244 	.word	0x20000244

0800419c <Battery_GetLevel>:

/* Get level of battery */
uint8_t Battery_GetLevel(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
	/* How much is one ADC bit worth in Volt? */
	float ratioBat = V3V3MAX / (ADC_12_BIT * 1.0);
 80041a2:	4b32      	ldr	r3, [pc, #200]	; (800426c <Battery_GetLevel+0xd0>)
 80041a4:	61bb      	str	r3, [r7, #24]

	/* Get Raw value from ADC */
	float bat_raw = (float) Battery_GetLevel_Raw();
 80041a6:	f7ff ffd7 	bl	8004158 <Battery_GetLevel_Raw>
 80041aa:	4603      	mov	r3, r0
 80041ac:	ee07 3a90 	vmov	s15, r3
 80041b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b4:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Min/Max values + how many milliV that is calculated */
	float ADCmax = VBAT_MAX * VOLTAGE_DIVIDER;
 80041b8:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <Battery_GetLevel+0xd4>)
 80041ba:	613b      	str	r3, [r7, #16]
	float ADCmin = VBAT_MIN * VOLTAGE_DIVIDER;
 80041bc:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <Battery_GetLevel+0xd8>)
 80041be:	60fb      	str	r3, [r7, #12]
	float milliV = bat_raw * ratioBat;
 80041c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80041c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80041c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041cc:	edc7 7a02 	vstr	s15, [r7, #8]

	/* Safety check */
	if (bat_raw < ADCmin)
 80041d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80041d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80041d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e0:	d502      	bpl.n	80041e8 <Battery_GetLevel+0x4c>
	{
		bat_raw = ADCmin;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	e00a      	b.n	80041fe <Battery_GetLevel+0x62>
	}

	/* Stafety check */
	else if (bat_raw > ADCmax)
 80041e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80041ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80041f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f8:	dd01      	ble.n	80041fe <Battery_GetLevel+0x62>
	{
		bat_raw = ADCmax;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	617b      	str	r3, [r7, #20]
	}


	uint8_t vBatPercent = (100 * (milliV - ADCmin) / (ADCmax - ADCmin));
 80041fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8004202:	edd7 7a03 	vldr	s15, [r7, #12]
 8004206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004278 <Battery_GetLevel+0xdc>
 800420e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004212:	ed97 7a04 	vldr	s14, [r7, #16]
 8004216:	edd7 7a03 	vldr	s15, [r7, #12]
 800421a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800421e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004226:	edc7 7a01 	vstr	s15, [r7, #4]
 800422a:	793b      	ldrb	r3, [r7, #4]
 800422c:	77fb      	strb	r3, [r7, #31]

	/* Overflow safety, can max be 100% */
	if ((vBatPercent >= 100) && (milliV > ADCmin))
 800422e:	7ffb      	ldrb	r3, [r7, #31]
 8004230:	2b63      	cmp	r3, #99	; 0x63
 8004232:	d90a      	bls.n	800424a <Battery_GetLevel+0xae>
 8004234:	ed97 7a02 	vldr	s14, [r7, #8]
 8004238:	edd7 7a03 	vldr	s15, [r7, #12]
 800423c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004244:	dd01      	ble.n	800424a <Battery_GetLevel+0xae>
	{
		vBatPercent = 100;
 8004246:	2364      	movs	r3, #100	; 0x64
 8004248:	77fb      	strb	r3, [r7, #31]
	}

	/* Underflow safety, can max be 0 % */
	if (milliV < ADCmin)
 800424a:	ed97 7a02 	vldr	s14, [r7, #8]
 800424e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425a:	d501      	bpl.n	8004260 <Battery_GetLevel+0xc4>
	{
		vBatPercent = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	77fb      	strb	r3, [r7, #31]
	}



	return vBatPercent;
 8004260:	7ffb      	ldrb	r3, [r7, #31]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	3f3b8bb9 	.word	0x3f3b8bb9
 8004270:	452f0000 	.word	0x452f0000
 8004274:	450da000 	.word	0x450da000
 8004278:	42c80000 	.word	0x42c80000

0800427c <__NVIC_GetPriorityGrouping>:
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004280:	4b04      	ldr	r3, [pc, #16]	; (8004294 <__NVIC_GetPriorityGrouping+0x18>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	f003 0307 	and.w	r3, r3, #7
}
 800428a:	4618      	mov	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <__NVIC_EnableIRQ>:
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	db0b      	blt.n	80042c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042aa:	4909      	ldr	r1, [pc, #36]	; (80042d0 <__NVIC_EnableIRQ+0x38>)
 80042ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	79fa      	ldrb	r2, [r7, #7]
 80042b4:	f002 021f 	and.w	r2, r2, #31
 80042b8:	2001      	movs	r0, #1
 80042ba:	fa00 f202 	lsl.w	r2, r0, r2
 80042be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000e100 	.word	0xe000e100

080042d4 <__NVIC_SetPriority>:
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	db0a      	blt.n	80042fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e8:	490d      	ldr	r1, [pc, #52]	; (8004320 <__NVIC_SetPriority+0x4c>)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	0112      	lsls	r2, r2, #4
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	440b      	add	r3, r1
 80042f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042fc:	e00a      	b.n	8004314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fe:	4909      	ldr	r1, [pc, #36]	; (8004324 <__NVIC_SetPriority+0x50>)
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	3b04      	subs	r3, #4
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	0112      	lsls	r2, r2, #4
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	440b      	add	r3, r1
 8004312:	761a      	strb	r2, [r3, #24]
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000e100 	.word	0xe000e100
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <NVIC_EncodePriority>:
{
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	; 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f1c3 0307 	rsb	r3, r3, #7
 8004342:	2b04      	cmp	r3, #4
 8004344:	bf28      	it	cs
 8004346:	2304      	movcs	r3, #4
 8004348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3304      	adds	r3, #4
 800434e:	2b06      	cmp	r3, #6
 8004350:	d902      	bls.n	8004358 <NVIC_EncodePriority+0x30>
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3b03      	subs	r3, #3
 8004356:	e000      	b.n	800435a <NVIC_EncodePriority+0x32>
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800435c:	2201      	movs	r2, #1
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	401a      	ands	r2, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800436e:	2101      	movs	r1, #1
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	1e59      	subs	r1, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800437c:	4313      	orrs	r3, r2
}
 800437e:	4618      	mov	r0, r3
 8004380:	3724      	adds	r7, #36	; 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800439a:	4a0c      	ldr	r2, [pc, #48]	; (80043cc <LL_DMA_EnableChannel+0x40>)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	4413      	add	r3, r2
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	4a08      	ldr	r2, [pc, #32]	; (80043cc <LL_DMA_EnableChannel+0x40>)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	600b      	str	r3, [r1, #0]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	080074b4 	.word	0x080074b4

080043d0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80043de:	4a0c      	ldr	r2, [pc, #48]	; (8004410 <LL_DMA_DisableChannel+0x40>)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	4413      	add	r3, r2
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4a08      	ldr	r2, [pc, #32]	; (8004410 <LL_DMA_DisableChannel+0x40>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4413      	add	r3, r2
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	600b      	str	r3, [r1, #0]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	080074b4 	.word	0x080074b4

08004414 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8004424:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <LL_DMA_SetDataTransferDirection+0x4c>)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4413      	add	r3, r2
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4413      	add	r3, r2
 8004432:	4619      	mov	r1, r3
 8004434:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <LL_DMA_SetDataTransferDirection+0x4c>)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4413      	add	r3, r2
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	4413      	add	r3, r2
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004448:	f023 0310 	bic.w	r3, r3, #16
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4313      	orrs	r3, r2
 8004450:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	080074b4 	.word	0x080074b4

08004464 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8004474:	4a0d      	ldr	r2, [pc, #52]	; (80044ac <LL_DMA_SetMode+0x48>)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4413      	add	r3, r2
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4413      	add	r3, r2
 8004482:	4619      	mov	r1, r3
 8004484:	4a09      	ldr	r2, [pc, #36]	; (80044ac <LL_DMA_SetMode+0x48>)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4413      	add	r3, r2
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 0220 	bic.w	r2, r3, #32
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4313      	orrs	r3, r2
 800449c:	600b      	str	r3, [r1, #0]
             Mode);
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	080074b4 	.word	0x080074b4

080044b0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80044c0:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <LL_DMA_SetPeriphIncMode+0x48>)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4413      	add	r3, r2
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	4413      	add	r3, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <LL_DMA_SetPeriphIncMode+0x48>)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	4413      	add	r3, r2
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	4413      	add	r3, r2
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	080074b4 	.word	0x080074b4

080044fc <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800450c:	4a0d      	ldr	r2, [pc, #52]	; (8004544 <LL_DMA_SetMemoryIncMode+0x48>)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4413      	add	r3, r2
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	4413      	add	r3, r2
 800451a:	4619      	mov	r1, r3
 800451c:	4a09      	ldr	r2, [pc, #36]	; (8004544 <LL_DMA_SetMemoryIncMode+0x48>)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4413      	add	r3, r2
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	4413      	add	r3, r2
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4313      	orrs	r3, r2
 8004534:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	080074b4 	.word	0x080074b4

08004548 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 8004558:	4a0d      	ldr	r2, [pc, #52]	; (8004590 <LL_DMA_SetPeriphSize+0x48>)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4413      	add	r3, r2
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	4413      	add	r3, r2
 8004566:	4619      	mov	r1, r3
 8004568:	4a09      	ldr	r2, [pc, #36]	; (8004590 <LL_DMA_SetPeriphSize+0x48>)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4413      	add	r3, r2
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	4413      	add	r3, r2
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	080074b4 	.word	0x080074b4

08004594 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80045a4:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <LL_DMA_SetMemorySize+0x48>)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4413      	add	r3, r2
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4413      	add	r3, r2
 80045b2:	4619      	mov	r1, r3
 80045b4:	4a09      	ldr	r2, [pc, #36]	; (80045dc <LL_DMA_SetMemorySize+0x48>)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4413      	add	r3, r2
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	4413      	add	r3, r2
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	080074b4 	.word	0x080074b4

080045e0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80045f0:	4a0d      	ldr	r2, [pc, #52]	; (8004628 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4413      	add	r3, r2
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	4619      	mov	r1, r3
 8004600:	4a09      	ldr	r2, [pc, #36]	; (8004628 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4413      	add	r3, r2
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	4413      	add	r3, r2
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
             Priority);
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	080074b4 	.word	0x080074b4

0800462c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800463c:	4a0d      	ldr	r2, [pc, #52]	; (8004674 <LL_DMA_SetDataLength+0x48>)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4413      	add	r3, r2
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4413      	add	r3, r2
 800464a:	4619      	mov	r1, r3
 800464c:	4a09      	ldr	r2, [pc, #36]	; (8004674 <LL_DMA_SetDataLength+0x48>)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4413      	add	r3, r2
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	4413      	add	r3, r2
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	4313      	orrs	r3, r2
 8004664:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	080074b4 	.word	0x080074b4

08004678 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8004688:	4a07      	ldr	r2, [pc, #28]	; (80046a8 <LL_DMA_SetMemoryAddress+0x30>)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4413      	add	r3, r2
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	4413      	add	r3, r2
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60d3      	str	r3, [r2, #12]
}
 800469c:	bf00      	nop
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	080074b4 	.word	0x080074b4

080046ac <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80046bc:	4a07      	ldr	r2, [pc, #28]	; (80046dc <LL_DMA_SetPeriphAddress+0x30>)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4413      	add	r3, r2
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4413      	add	r3, r2
 80046ca:	461a      	mov	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6093      	str	r3, [r2, #8]
}
 80046d0:	bf00      	nop
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	080074b4 	.word	0x080074b4

080046e0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	33a8      	adds	r3, #168	; 0xa8
 80046f0:	4618      	mov	r0, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	33a8      	adds	r3, #168	; 0xa8
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	210f      	movs	r1, #15
 80046fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004702:	43db      	mvns	r3, r3
 8004704:	401a      	ands	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	210f      	movs	r1, #15
 800470c:	fa01 f303 	lsl.w	r3, r1, r3
 8004710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	613b      	str	r3, [r7, #16]
  return result;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	4619      	mov	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	408b      	lsls	r3, r1
 8004728:	4313      	orrs	r3, r2
 800472a:	6003      	str	r3, [r0, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll ISR          TCIF5         LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800474c:	d101      	bne.n	8004752 <LL_DMA_IsActiveFlag_TC5+0x1a>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <LL_DMA_IsActiveFlag_TC5+0x1c>
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_DMA_IsActiveFlag_HT5>:
  * @rmtoll ISR          HTIF5         LL_DMA_IsActiveFlag_HT5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004770:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004774:	d101      	bne.n	800477a <LL_DMA_IsActiveFlag_HT5+0x1a>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <LL_DMA_IsActiveFlag_HT5+0x1c>
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <LL_DMA_ClearFlag_TC5>:
  * @rmtoll IFCR         CTCIF5        LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004796:	605a      	str	r2, [r3, #4]
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <LL_DMA_ClearFlag_HT5>:
  * @rmtoll IFCR         CHTIF5        LL_DMA_ClearFlag_HT5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80047b2:	605a      	str	r2, [r3, #4]
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;    
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80047ce:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <LL_DMA_EnableIT_TC+0x40>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	4619      	mov	r1, r3
 80047de:	4a08      	ldr	r2, [pc, #32]	; (8004800 <LL_DMA_EnableIT_TC+0x40>)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f043 0302 	orr.w	r3, r3, #2
 80047f2:	600b      	str	r3, [r1, #0]
}
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	080074b4 	.word	0x080074b4

08004804 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8004812:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <LL_DMA_EnableIT_HT+0x40>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4413      	add	r3, r2
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	4619      	mov	r1, r3
 8004822:	4a08      	ldr	r2, [pc, #32]	; (8004844 <LL_DMA_EnableIT_HT+0x40>)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	4413      	add	r3, r2
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	600b      	str	r3, [r1, #0]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	080074b4 	.word	0x080074b4

08004848 <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8004856:	4a0c      	ldr	r2, [pc, #48]	; (8004888 <LL_DMA_DisableIT_HT+0x40>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4413      	add	r3, r2
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	4619      	mov	r1, r3
 8004866:	4a08      	ldr	r2, [pc, #32]	; (8004888 <LL_DMA_DisableIT_HT+0x40>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4413      	add	r3, r2
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 0304 	bic.w	r3, r3, #4
 800487a:	600b      	str	r3, [r1, #0]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	080074b4 	.word	0x080074b4

0800488c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004894:	4908      	ldr	r1, [pc, #32]	; (80048b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4313      	orrs	r3, r2
 800489e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80048a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4013      	ands	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	40021000 	.word	0x40021000

080048bc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80048c4:	4908      	ldr	r1, [pc, #32]	; (80048e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80048c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80048d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4013      	ands	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80048da:	68fb      	ldr	r3, [r7, #12]
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40021000 	.word	0x40021000

080048ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80048f4:	4908      	ldr	r1, [pc, #32]	; (8004918 <LL_APB1_GRP1_EnableClock+0x2c>)
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <LL_APB1_GRP1_EnableClock+0x2c>)
 80048f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004902:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4013      	ands	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800490a:	68fb      	ldr	r3, [r7, #12]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40021000 	.word	0x40021000

0800491c <LL_TIM_EnableCounter>:
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f043 0201 	orr.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_TIM_GetAutoReload>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_TIM_CC_EnableChannel>:
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1a      	ldr	r2, [r3, #32]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <LL_TIM_CC_DisableChannel>:
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	43db      	mvns	r3, r3
 8004988:	401a      	ands	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <LL_TIM_OC_DisableFast>:
{
 800499c:	b4b0      	push	{r4, r5, r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d028      	beq.n	80049fe <LL_TIM_OC_DisableFast+0x62>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d023      	beq.n	80049fa <LL_TIM_OC_DisableFast+0x5e>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d01e      	beq.n	80049f6 <LL_TIM_OC_DisableFast+0x5a>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d019      	beq.n	80049f2 <LL_TIM_OC_DisableFast+0x56>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c4:	d013      	beq.n	80049ee <LL_TIM_OC_DisableFast+0x52>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049cc:	d00d      	beq.n	80049ea <LL_TIM_OC_DisableFast+0x4e>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d4:	d007      	beq.n	80049e6 <LL_TIM_OC_DisableFast+0x4a>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049dc:	d101      	bne.n	80049e2 <LL_TIM_OC_DisableFast+0x46>
 80049de:	2307      	movs	r3, #7
 80049e0:	e00e      	b.n	8004a00 <LL_TIM_OC_DisableFast+0x64>
 80049e2:	2308      	movs	r3, #8
 80049e4:	e00c      	b.n	8004a00 <LL_TIM_OC_DisableFast+0x64>
 80049e6:	2306      	movs	r3, #6
 80049e8:	e00a      	b.n	8004a00 <LL_TIM_OC_DisableFast+0x64>
 80049ea:	2305      	movs	r3, #5
 80049ec:	e008      	b.n	8004a00 <LL_TIM_OC_DisableFast+0x64>
 80049ee:	2304      	movs	r3, #4
 80049f0:	e006      	b.n	8004a00 <LL_TIM_OC_DisableFast+0x64>
 80049f2:	2303      	movs	r3, #3
 80049f4:	e004      	b.n	8004a00 <LL_TIM_OC_DisableFast+0x64>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e002      	b.n	8004a00 <LL_TIM_OC_DisableFast+0x64>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <LL_TIM_OC_DisableFast+0x64>
 80049fe:	2300      	movs	r3, #0
 8004a00:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3318      	adds	r3, #24
 8004a06:	461a      	mov	r2, r3
 8004a08:	4629      	mov	r1, r5
 8004a0a:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <LL_TIM_OC_DisableFast+0x94>)
 8004a0c:	5c5b      	ldrb	r3, [r3, r1]
 8004a0e:	4413      	add	r3, r2
 8004a10:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004a12:	6822      	ldr	r2, [r4, #0]
 8004a14:	4629      	mov	r1, r5
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <LL_TIM_OC_DisableFast+0x98>)
 8004a18:	5c5b      	ldrb	r3, [r3, r1]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	408b      	lsls	r3, r1
 8004a20:	43db      	mvns	r3, r3
 8004a22:	4013      	ands	r3, r2
 8004a24:	6023      	str	r3, [r4, #0]
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bcb0      	pop	{r4, r5, r7}
 8004a2e:	4770      	bx	lr
 8004a30:	080074bc 	.word	0x080074bc
 8004a34:	080074c8 	.word	0x080074c8

08004a38 <LL_TIM_OC_EnablePreload>:
{
 8004a38:	b4b0      	push	{r4, r5, r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d028      	beq.n	8004a9a <LL_TIM_OC_EnablePreload+0x62>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d023      	beq.n	8004a96 <LL_TIM_OC_EnablePreload+0x5e>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d01e      	beq.n	8004a92 <LL_TIM_OC_EnablePreload+0x5a>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d019      	beq.n	8004a8e <LL_TIM_OC_EnablePreload+0x56>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a60:	d013      	beq.n	8004a8a <LL_TIM_OC_EnablePreload+0x52>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a68:	d00d      	beq.n	8004a86 <LL_TIM_OC_EnablePreload+0x4e>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a70:	d007      	beq.n	8004a82 <LL_TIM_OC_EnablePreload+0x4a>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d101      	bne.n	8004a7e <LL_TIM_OC_EnablePreload+0x46>
 8004a7a:	2307      	movs	r3, #7
 8004a7c:	e00e      	b.n	8004a9c <LL_TIM_OC_EnablePreload+0x64>
 8004a7e:	2308      	movs	r3, #8
 8004a80:	e00c      	b.n	8004a9c <LL_TIM_OC_EnablePreload+0x64>
 8004a82:	2306      	movs	r3, #6
 8004a84:	e00a      	b.n	8004a9c <LL_TIM_OC_EnablePreload+0x64>
 8004a86:	2305      	movs	r3, #5
 8004a88:	e008      	b.n	8004a9c <LL_TIM_OC_EnablePreload+0x64>
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	e006      	b.n	8004a9c <LL_TIM_OC_EnablePreload+0x64>
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e004      	b.n	8004a9c <LL_TIM_OC_EnablePreload+0x64>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e002      	b.n	8004a9c <LL_TIM_OC_EnablePreload+0x64>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <LL_TIM_OC_EnablePreload+0x64>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3318      	adds	r3, #24
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	4b09      	ldr	r3, [pc, #36]	; (8004acc <LL_TIM_OC_EnablePreload+0x94>)
 8004aa8:	5c5b      	ldrb	r3, [r3, r1]
 8004aaa:	4413      	add	r3, r2
 8004aac:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <LL_TIM_OC_EnablePreload+0x98>)
 8004ab4:	5c5b      	ldrb	r3, [r3, r1]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	2308      	movs	r3, #8
 8004aba:	408b      	lsls	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	6023      	str	r3, [r4, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bcb0      	pop	{r4, r5, r7}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	080074bc 	.word	0x080074bc
 8004ad0:	080074c8 	.word	0x080074c8

08004ad4 <LL_TIM_OC_SetCompareCH1>:
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <LL_TIM_SetTriggerOutput>:
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	605a      	str	r2, [r3, #4]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <LL_TIM_DisableMasterSlaveMode>:
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	609a      	str	r2, [r3, #8]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_TIM_EnableDMAReq_CC1>:
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60da      	str	r2, [r3, #12]
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <SetNeoState>:
NeoColors neoColorTracker = NEO_RAINBOWWARM;
NeoRGB neo;
NeoIntensity neoIntensityTracker = NEO_LVL_5;

void SetNeoState(NeoColors nC)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
	neoColorTracker = nC;
 8004b62:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <SetNeoState+0x1c>)
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	7013      	strb	r3, [r2, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	20000008 	.word	0x20000008

08004b78 <GetNeoState>:

NeoColors GetNeoState()
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
	return neoColorTracker;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <GetNeoState+0x14>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000008 	.word	0x20000008

08004b90 <SetNeoIntensityState>:

void SetNeoIntensityState(NeoIntensity nI)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
	neoIntensityTracker = nI;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	; (8004bac <SetNeoIntensityState+0x1c>)
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	7013      	strb	r3, [r2, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	20000009 	.word	0x20000009

08004bb0 <GetNeoIntensityState>:

NeoColors GetNeoIntensityState()
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
	return neoIntensityTracker;
 8004bb4:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <GetNeoIntensityState+0x14>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000009 	.word	0x20000009

08004bc8 <NeoStateFromBLE>:


static void NeoStateFromBLE()
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b0b2      	sub	sp, #200	; 0xc8
 8004bcc:	af00      	add	r7, sp, #0
	uint8_t set[200] = {0};
 8004bce:	463b      	mov	r3, r7
 8004bd0:	22c8      	movs	r2, #200	; 0xc8
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f002 fb99 	bl	800730c <memset>

	GetStringBLE(set);
 8004bda:	463b      	mov	r3, r7
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 ffa9 	bl	8005b34 <GetStringBLE>

	if(strcmp((char*)set, "red") == 0)
 8004be2:	463b      	mov	r3, r7
 8004be4:	4986      	ldr	r1, [pc, #536]	; (8004e00 <NeoStateFromBLE+0x238>)
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fb faf6 	bl	80001d8 <strcmp>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d103      	bne.n	8004bfa <NeoStateFromBLE+0x32>
	{
		SetNeoState(NEO_RED);
 8004bf2:	2004      	movs	r0, #4
 8004bf4:	f7ff ffb0 	bl	8004b58 <SetNeoState>
	{
		SetNeoIntensityState(NEO_LVL_5);
		if(GetNeoState() == NEO_RAINBOWCOLD || GetNeoState() == NEO_RAINBOWWARM)
			InitRainbows();
	}
}
 8004bf8:	e0fd      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "green") == 0)
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	4981      	ldr	r1, [pc, #516]	; (8004e04 <NeoStateFromBLE+0x23c>)
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fb faea 	bl	80001d8 <strcmp>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d103      	bne.n	8004c12 <NeoStateFromBLE+0x4a>
		SetNeoState(NEO_GREEN);
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	f7ff ffa4 	bl	8004b58 <SetNeoState>
}
 8004c10:	e0f1      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "blue") == 0)
 8004c12:	463b      	mov	r3, r7
 8004c14:	497c      	ldr	r1, [pc, #496]	; (8004e08 <NeoStateFromBLE+0x240>)
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fb fade 	bl	80001d8 <strcmp>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <NeoStateFromBLE+0x62>
		SetNeoState(NEO_BLUE);
 8004c22:	2002      	movs	r0, #2
 8004c24:	f7ff ff98 	bl	8004b58 <SetNeoState>
}
 8004c28:	e0e5      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "white") == 0)
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	4977      	ldr	r1, [pc, #476]	; (8004e0c <NeoStateFromBLE+0x244>)
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fb fad2 	bl	80001d8 <strcmp>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <NeoStateFromBLE+0x7a>
		SetNeoState(NEO_WHITE);
 8004c3a:	2007      	movs	r0, #7
 8004c3c:	f7ff ff8c 	bl	8004b58 <SetNeoState>
}
 8004c40:	e0d9      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "cyan") == 0)
 8004c42:	463b      	mov	r3, r7
 8004c44:	4972      	ldr	r1, [pc, #456]	; (8004e10 <NeoStateFromBLE+0x248>)
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fb fac6 	bl	80001d8 <strcmp>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <NeoStateFromBLE+0x92>
		SetNeoState(NEO_CYAN);
 8004c52:	2001      	movs	r0, #1
 8004c54:	f7ff ff80 	bl	8004b58 <SetNeoState>
}
 8004c58:	e0cd      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "yellow") == 0)
 8004c5a:	463b      	mov	r3, r7
 8004c5c:	496d      	ldr	r1, [pc, #436]	; (8004e14 <NeoStateFromBLE+0x24c>)
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fb faba 	bl	80001d8 <strcmp>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d103      	bne.n	8004c72 <NeoStateFromBLE+0xaa>
		SetNeoState(NEO_YELLOW);
 8004c6a:	2006      	movs	r0, #6
 8004c6c:	f7ff ff74 	bl	8004b58 <SetNeoState>
}
 8004c70:	e0c1      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "orange") == 0)
 8004c72:	463b      	mov	r3, r7
 8004c74:	4968      	ldr	r1, [pc, #416]	; (8004e18 <NeoStateFromBLE+0x250>)
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fb faae 	bl	80001d8 <strcmp>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d103      	bne.n	8004c8a <NeoStateFromBLE+0xc2>
		SetNeoState(NEO_ORANGE);
 8004c82:	2005      	movs	r0, #5
 8004c84:	f7ff ff68 	bl	8004b58 <SetNeoState>
}
 8004c88:	e0b5      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "purple") == 0)
 8004c8a:	463b      	mov	r3, r7
 8004c8c:	4963      	ldr	r1, [pc, #396]	; (8004e1c <NeoStateFromBLE+0x254>)
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fb faa2 	bl	80001d8 <strcmp>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <NeoStateFromBLE+0xda>
		SetNeoState(NEO_PURPLE);
 8004c9a:	2003      	movs	r0, #3
 8004c9c:	f7ff ff5c 	bl	8004b58 <SetNeoState>
}
 8004ca0:	e0a9      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "rainbowcold") == 0)
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	495e      	ldr	r1, [pc, #376]	; (8004e20 <NeoStateFromBLE+0x258>)
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fb fa96 	bl	80001d8 <strcmp>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <NeoStateFromBLE+0xf2>
		SetNeoState(NEO_RAINBOWCOLD);
 8004cb2:	2008      	movs	r0, #8
 8004cb4:	f7ff ff50 	bl	8004b58 <SetNeoState>
}
 8004cb8:	e09d      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "rainbowwarm") == 0)
 8004cba:	463b      	mov	r3, r7
 8004cbc:	4959      	ldr	r1, [pc, #356]	; (8004e24 <NeoStateFromBLE+0x25c>)
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fb fa8a 	bl	80001d8 <strcmp>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <NeoStateFromBLE+0x10a>
		SetNeoState(NEO_RAINBOWWARM);
 8004cca:	2009      	movs	r0, #9
 8004ccc:	f7ff ff44 	bl	8004b58 <SetNeoState>
}
 8004cd0:	e091      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "rainbow") == 0)
 8004cd2:	463b      	mov	r3, r7
 8004cd4:	4954      	ldr	r1, [pc, #336]	; (8004e28 <NeoStateFromBLE+0x260>)
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fb fa7e 	bl	80001d8 <strcmp>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <NeoStateFromBLE+0x122>
		SetNeoState(NEO_RAINBOW);
 8004ce2:	200a      	movs	r0, #10
 8004ce4:	f7ff ff38 	bl	8004b58 <SetNeoState>
}
 8004ce8:	e085      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "bat") == 0)
 8004cea:	463b      	mov	r3, r7
 8004cec:	494f      	ldr	r1, [pc, #316]	; (8004e2c <NeoStateFromBLE+0x264>)
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb fa72 	bl	80001d8 <strcmp>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <NeoStateFromBLE+0x140>
		Vbat_Flag = 1;
 8004cfa:	4b4d      	ldr	r3, [pc, #308]	; (8004e30 <NeoStateFromBLE+0x268>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	701a      	strb	r2, [r3, #0]
		SetNeoState(NEO_BATTERY);
 8004d00:	200b      	movs	r0, #11
 8004d02:	f7ff ff29 	bl	8004b58 <SetNeoState>
}
 8004d06:	e076      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "l1") == 0)
 8004d08:	463b      	mov	r3, r7
 8004d0a:	494a      	ldr	r1, [pc, #296]	; (8004e34 <NeoStateFromBLE+0x26c>)
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fb fa63 	bl	80001d8 <strcmp>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10f      	bne.n	8004d38 <NeoStateFromBLE+0x170>
		SetNeoIntensityState(NEO_LVL_1);
 8004d18:	2010      	movs	r0, #16
 8004d1a:	f7ff ff39 	bl	8004b90 <SetNeoIntensityState>
		if(GetNeoState() == NEO_RAINBOWCOLD || GetNeoState() == NEO_RAINBOWWARM)
 8004d1e:	f7ff ff2b 	bl	8004b78 <GetNeoState>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d004      	beq.n	8004d32 <NeoStateFromBLE+0x16a>
 8004d28:	f7ff ff26 	bl	8004b78 <GetNeoState>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b09      	cmp	r3, #9
 8004d30:	d161      	bne.n	8004df6 <NeoStateFromBLE+0x22e>
			InitRainbows();
 8004d32:	f000 f9bf 	bl	80050b4 <InitRainbows>
}
 8004d36:	e05e      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "l2") == 0)
 8004d38:	463b      	mov	r3, r7
 8004d3a:	493f      	ldr	r1, [pc, #252]	; (8004e38 <NeoStateFromBLE+0x270>)
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fb fa4b 	bl	80001d8 <strcmp>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10f      	bne.n	8004d68 <NeoStateFromBLE+0x1a0>
		SetNeoIntensityState(NEO_LVL_2);
 8004d48:	2008      	movs	r0, #8
 8004d4a:	f7ff ff21 	bl	8004b90 <SetNeoIntensityState>
		if(GetNeoState() == NEO_RAINBOWCOLD || GetNeoState() == NEO_RAINBOWWARM)
 8004d4e:	f7ff ff13 	bl	8004b78 <GetNeoState>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d004      	beq.n	8004d62 <NeoStateFromBLE+0x19a>
 8004d58:	f7ff ff0e 	bl	8004b78 <GetNeoState>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b09      	cmp	r3, #9
 8004d60:	d149      	bne.n	8004df6 <NeoStateFromBLE+0x22e>
			InitRainbows();
 8004d62:	f000 f9a7 	bl	80050b4 <InitRainbows>
}
 8004d66:	e046      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "l3") == 0)
 8004d68:	463b      	mov	r3, r7
 8004d6a:	4934      	ldr	r1, [pc, #208]	; (8004e3c <NeoStateFromBLE+0x274>)
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fb fa33 	bl	80001d8 <strcmp>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10f      	bne.n	8004d98 <NeoStateFromBLE+0x1d0>
		SetNeoIntensityState(NEO_LVL_3);
 8004d78:	2004      	movs	r0, #4
 8004d7a:	f7ff ff09 	bl	8004b90 <SetNeoIntensityState>
		if(GetNeoState() == NEO_RAINBOWCOLD || GetNeoState() == NEO_RAINBOWWARM)
 8004d7e:	f7ff fefb 	bl	8004b78 <GetNeoState>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d004      	beq.n	8004d92 <NeoStateFromBLE+0x1ca>
 8004d88:	f7ff fef6 	bl	8004b78 <GetNeoState>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b09      	cmp	r3, #9
 8004d90:	d131      	bne.n	8004df6 <NeoStateFromBLE+0x22e>
			InitRainbows();
 8004d92:	f000 f98f 	bl	80050b4 <InitRainbows>
}
 8004d96:	e02e      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "l4") == 0)
 8004d98:	463b      	mov	r3, r7
 8004d9a:	4929      	ldr	r1, [pc, #164]	; (8004e40 <NeoStateFromBLE+0x278>)
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fb fa1b 	bl	80001d8 <strcmp>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10f      	bne.n	8004dc8 <NeoStateFromBLE+0x200>
		SetNeoIntensityState(NEO_LVL_4);
 8004da8:	2002      	movs	r0, #2
 8004daa:	f7ff fef1 	bl	8004b90 <SetNeoIntensityState>
		if(GetNeoState() == NEO_RAINBOWCOLD || GetNeoState() == NEO_RAINBOWWARM)
 8004dae:	f7ff fee3 	bl	8004b78 <GetNeoState>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d004      	beq.n	8004dc2 <NeoStateFromBLE+0x1fa>
 8004db8:	f7ff fede 	bl	8004b78 <GetNeoState>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b09      	cmp	r3, #9
 8004dc0:	d119      	bne.n	8004df6 <NeoStateFromBLE+0x22e>
			InitRainbows();
 8004dc2:	f000 f977 	bl	80050b4 <InitRainbows>
}
 8004dc6:	e016      	b.n	8004df6 <NeoStateFromBLE+0x22e>
	else if(strcmp((char*)set, "l5") == 0)
 8004dc8:	463b      	mov	r3, r7
 8004dca:	491e      	ldr	r1, [pc, #120]	; (8004e44 <NeoStateFromBLE+0x27c>)
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fb fa03 	bl	80001d8 <strcmp>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10e      	bne.n	8004df6 <NeoStateFromBLE+0x22e>
		SetNeoIntensityState(NEO_LVL_5);
 8004dd8:	2001      	movs	r0, #1
 8004dda:	f7ff fed9 	bl	8004b90 <SetNeoIntensityState>
		if(GetNeoState() == NEO_RAINBOWCOLD || GetNeoState() == NEO_RAINBOWWARM)
 8004dde:	f7ff fecb 	bl	8004b78 <GetNeoState>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d004      	beq.n	8004df2 <NeoStateFromBLE+0x22a>
 8004de8:	f7ff fec6 	bl	8004b78 <GetNeoState>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b09      	cmp	r3, #9
 8004df0:	d101      	bne.n	8004df6 <NeoStateFromBLE+0x22e>
			InitRainbows();
 8004df2:	f000 f95f 	bl	80050b4 <InitRainbows>
}
 8004df6:	bf00      	nop
 8004df8:	37c8      	adds	r7, #200	; 0xc8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	08007440 	.word	0x08007440
 8004e04:	08007444 	.word	0x08007444
 8004e08:	0800744c 	.word	0x0800744c
 8004e0c:	08007454 	.word	0x08007454
 8004e10:	0800745c 	.word	0x0800745c
 8004e14:	08007464 	.word	0x08007464
 8004e18:	0800746c 	.word	0x0800746c
 8004e1c:	08007474 	.word	0x08007474
 8004e20:	0800747c 	.word	0x0800747c
 8004e24:	08007488 	.word	0x08007488
 8004e28:	08007494 	.word	0x08007494
 8004e2c:	0800749c 	.word	0x0800749c
 8004e30:	2000021e 	.word	0x2000021e
 8004e34:	080074a0 	.word	0x080074a0
 8004e38:	080074a4 	.word	0x080074a4
 8004e3c:	080074a8 	.word	0x080074a8
 8004e40:	080074ac 	.word	0x080074ac
 8004e44:	080074b0 	.word	0x080074b0

08004e48 <NeoStateMachine>:

void NeoStateMachine()
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
	NeoStateFromBLE();
 8004e4e:	f7ff febb 	bl	8004bc8 <NeoStateFromBLE>

	NeoColors nC = GetNeoState();
 8004e52:	f7ff fe91 	bl	8004b78 <GetNeoState>
 8004e56:	4603      	mov	r3, r0
 8004e58:	71fb      	strb	r3, [r7, #7]

	if(nC == NEO_GREEN)
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d105      	bne.n	8004e6c <NeoStateMachine+0x24>
	{
		SetNeoColor(0, 0xFF, 0);
 8004e60:	2200      	movs	r2, #0
 8004e62:	21ff      	movs	r1, #255	; 0xff
 8004e64:	2000      	movs	r0, #0
 8004e66:	f000 f845 	bl	8004ef4 <SetNeoColor>
 8004e6a:	e03d      	b.n	8004ee8 <NeoStateMachine+0xa0>
	}
	else if(nC == NEO_CYAN)
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d105      	bne.n	8004e7e <NeoStateMachine+0x36>
	{
		SetNeoColor(0, 0xFF, 0xFF);
 8004e72:	22ff      	movs	r2, #255	; 0xff
 8004e74:	21ff      	movs	r1, #255	; 0xff
 8004e76:	2000      	movs	r0, #0
 8004e78:	f000 f83c 	bl	8004ef4 <SetNeoColor>
 8004e7c:	e034      	b.n	8004ee8 <NeoStateMachine+0xa0>
	}
	else if(nC == NEO_BLUE)
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d105      	bne.n	8004e90 <NeoStateMachine+0x48>
	{
		SetNeoColor(0, 0, 0xFF);
 8004e84:	22ff      	movs	r2, #255	; 0xff
 8004e86:	2100      	movs	r1, #0
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f000 f833 	bl	8004ef4 <SetNeoColor>
 8004e8e:	e02b      	b.n	8004ee8 <NeoStateMachine+0xa0>
	}
	else if(nC == NEO_PURPLE)
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d105      	bne.n	8004ea2 <NeoStateMachine+0x5a>
	{
		SetNeoColor(0xFF, 0, 0xFF);
 8004e96:	22ff      	movs	r2, #255	; 0xff
 8004e98:	2100      	movs	r1, #0
 8004e9a:	20ff      	movs	r0, #255	; 0xff
 8004e9c:	f000 f82a 	bl	8004ef4 <SetNeoColor>
 8004ea0:	e022      	b.n	8004ee8 <NeoStateMachine+0xa0>
	}
	else if(nC == NEO_RED)
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d105      	bne.n	8004eb4 <NeoStateMachine+0x6c>
	{
		SetNeoColor(0xFF, 0, 0);
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2100      	movs	r1, #0
 8004eac:	20ff      	movs	r0, #255	; 0xff
 8004eae:	f000 f821 	bl	8004ef4 <SetNeoColor>
 8004eb2:	e019      	b.n	8004ee8 <NeoStateMachine+0xa0>
	}
	else if(nC == NEO_ORANGE)
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d105      	bne.n	8004ec6 <NeoStateMachine+0x7e>
	{
		SetNeoColor(0xFF, 0x2F, 0);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	212f      	movs	r1, #47	; 0x2f
 8004ebe:	20ff      	movs	r0, #255	; 0xff
 8004ec0:	f000 f818 	bl	8004ef4 <SetNeoColor>
 8004ec4:	e010      	b.n	8004ee8 <NeoStateMachine+0xa0>
	}
	else if(nC == NEO_YELLOW)
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	2b06      	cmp	r3, #6
 8004eca:	d105      	bne.n	8004ed8 <NeoStateMachine+0x90>
	{
		SetNeoColor(0xFF, 0xFF, 0);
 8004ecc:	2200      	movs	r2, #0
 8004ece:	21ff      	movs	r1, #255	; 0xff
 8004ed0:	20ff      	movs	r0, #255	; 0xff
 8004ed2:	f000 f80f 	bl	8004ef4 <SetNeoColor>
 8004ed6:	e007      	b.n	8004ee8 <NeoStateMachine+0xa0>
	}
	else if(nC == NEO_WHITE)
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	2b07      	cmp	r3, #7
 8004edc:	d104      	bne.n	8004ee8 <NeoStateMachine+0xa0>
	{
		SetNeoColor(0xFF, 0xFF, 0xFF);
 8004ede:	22ff      	movs	r2, #255	; 0xff
 8004ee0:	21ff      	movs	r1, #255	; 0xff
 8004ee2:	20ff      	movs	r0, #255	; 0xff
 8004ee4:	f000 f806 	bl	8004ef4 <SetNeoColor>
	}

	UpdateNeoColor();
 8004ee8:	f000 f84c 	bl	8004f84 <UpdateNeoColor>
}
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <SetNeoColor>:

void SetNeoColor(uint8_t Red, uint8_t Green, uint8_t Blue)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	71fb      	strb	r3, [r7, #7]
 8004efe:	460b      	mov	r3, r1
 8004f00:	71bb      	strb	r3, [r7, #6]
 8004f02:	4613      	mov	r3, r2
 8004f04:	717b      	strb	r3, [r7, #5]
	neo.Red = Red;
 8004f06:	4a07      	ldr	r2, [pc, #28]	; (8004f24 <SetNeoColor+0x30>)
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	7013      	strb	r3, [r2, #0]
	neo.Green = Green;
 8004f0c:	4a05      	ldr	r2, [pc, #20]	; (8004f24 <SetNeoColor+0x30>)
 8004f0e:	79bb      	ldrb	r3, [r7, #6]
 8004f10:	7053      	strb	r3, [r2, #1]
	neo.Blue = Blue;
 8004f12:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <SetNeoColor+0x30>)
 8004f14:	797b      	ldrb	r3, [r7, #5]
 8004f16:	7093      	strb	r3, [r2, #2]
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	20000224 	.word	0x20000224

08004f28 <UpdateIntensity>:

void UpdateIntensity(NeoIntensity nI)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
	if(nI == NEO_LVL_1)
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d103      	bne.n	8004f40 <UpdateIntensity+0x18>
	{
		SetNeoIntensityState(NEO_LVL_2);
 8004f38:	2008      	movs	r0, #8
 8004f3a:	f7ff fe29 	bl	8004b90 <SetNeoIntensityState>
 8004f3e:	e01a      	b.n	8004f76 <UpdateIntensity+0x4e>
	}
	else if(nI == NEO_LVL_2)
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d103      	bne.n	8004f4e <UpdateIntensity+0x26>
	{
		SetNeoIntensityState(NEO_LVL_3);
 8004f46:	2004      	movs	r0, #4
 8004f48:	f7ff fe22 	bl	8004b90 <SetNeoIntensityState>
 8004f4c:	e013      	b.n	8004f76 <UpdateIntensity+0x4e>
	}
	else if(nI == NEO_LVL_3)
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d103      	bne.n	8004f5c <UpdateIntensity+0x34>
	{
		SetNeoIntensityState(NEO_LVL_4);
 8004f54:	2002      	movs	r0, #2
 8004f56:	f7ff fe1b 	bl	8004b90 <SetNeoIntensityState>
 8004f5a:	e00c      	b.n	8004f76 <UpdateIntensity+0x4e>
	}
	else if(nI == NEO_LVL_4)
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d103      	bne.n	8004f6a <UpdateIntensity+0x42>
	{
		SetNeoIntensityState(NEO_LVL_5);
 8004f62:	2001      	movs	r0, #1
 8004f64:	f7ff fe14 	bl	8004b90 <SetNeoIntensityState>
 8004f68:	e005      	b.n	8004f76 <UpdateIntensity+0x4e>
	}
	else if(nI == NEO_LVL_5)
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d102      	bne.n	8004f76 <UpdateIntensity+0x4e>
	{
		SetNeoIntensityState(NEO_LVL_1);
 8004f70:	2010      	movs	r0, #16
 8004f72:	f7ff fe0d 	bl	8004b90 <SetNeoIntensityState>
	}
	UpdateNeoColor();
 8004f76:	f000 f805 	bl	8004f84 <UpdateNeoColor>

}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <UpdateNeoColor>:

void UpdateNeoColor(void)
{
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
	NeoIntensity neoI = GetNeoIntensityState();
 8004f8a:	f7ff fe11 	bl	8004bb0 <GetNeoIntensityState>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	70fb      	strb	r3, [r7, #3]

	uint8_t red = (uint8_t)floor(neo.Red / neoI);
 8004f92:	4b2d      	ldr	r3, [pc, #180]	; (8005048 <UpdateNeoColor+0xc4>)
 8004f94:	781a      	ldrb	r2, [r3, #0]
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fb fa76 	bl	8000490 <__aeabi_i2d>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	ec44 3b10 	vmov	d0, r3, r4
 8004fac:	f002 f9b8 	bl	8007320 <floor>
 8004fb0:	ec54 3b10 	vmov	r3, r4, d0
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	f7fb fb58 	bl	800066c <__aeabi_d2uiz>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	70bb      	strb	r3, [r7, #2]
	uint8_t green = (uint8_t)floor(neo.Green / neoI);
 8004fc0:	4b21      	ldr	r3, [pc, #132]	; (8005048 <UpdateNeoColor+0xc4>)
 8004fc2:	785a      	ldrb	r2, [r3, #1]
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fb fa5f 	bl	8000490 <__aeabi_i2d>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	ec44 3b10 	vmov	d0, r3, r4
 8004fda:	f002 f9a1 	bl	8007320 <floor>
 8004fde:	ec54 3b10 	vmov	r3, r4, d0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	f7fb fb41 	bl	800066c <__aeabi_d2uiz>
 8004fea:	4603      	mov	r3, r0
 8004fec:	707b      	strb	r3, [r7, #1]
	uint8_t blue = (uint8_t)floor(neo.Blue / neoI);
 8004fee:	4b16      	ldr	r3, [pc, #88]	; (8005048 <UpdateNeoColor+0xc4>)
 8004ff0:	789a      	ldrb	r2, [r3, #2]
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fb fa48 	bl	8000490 <__aeabi_i2d>
 8005000:	4603      	mov	r3, r0
 8005002:	460c      	mov	r4, r1
 8005004:	ec44 3b10 	vmov	d0, r3, r4
 8005008:	f002 f98a 	bl	8007320 <floor>
 800500c:	ec54 3b10 	vmov	r3, r4, d0
 8005010:	4618      	mov	r0, r3
 8005012:	4621      	mov	r1, r4
 8005014:	f7fb fb2a 	bl	800066c <__aeabi_d2uiz>
 8005018:	4603      	mov	r3, r0
 800501a:	703b      	strb	r3, [r7, #0]

	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800501c:	2300      	movs	r3, #0
 800501e:	607b      	str	r3, [r7, #4]
 8005020:	e008      	b.n	8005034 <UpdateNeoColor+0xb0>
	{
		led_set_color(i, red, green, blue);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	783b      	ldrb	r3, [r7, #0]
 8005026:	787a      	ldrb	r2, [r7, #1]
 8005028:	78b9      	ldrb	r1, [r7, #2]
 800502a:	f000 faf9 	bl	8005620 <led_set_color>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3301      	adds	r3, #1
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b09      	cmp	r3, #9
 8005038:	ddf3      	ble.n	8005022 <UpdateNeoColor+0x9e>
	}
	led_update(1);
 800503a:	2001      	movs	r0, #1
 800503c:	f000 fb66 	bl	800570c <led_update>
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	bd90      	pop	{r4, r7, pc}
 8005048:	20000224 	.word	0x20000224

0800504c <NeoBatteryLevelLight>:

void NeoBatteryLevelLight(uint8_t batteryLevel)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
	if(batteryLevel > 80)
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	2b50      	cmp	r3, #80	; 0x50
 800505a:	d905      	bls.n	8005068 <NeoBatteryLevelLight+0x1c>
		SetNeoColor(0, 0, 0xFF);
 800505c:	22ff      	movs	r2, #255	; 0xff
 800505e:	2100      	movs	r1, #0
 8005060:	2000      	movs	r0, #0
 8005062:	f7ff ff47 	bl	8004ef4 <SetNeoColor>
 8005066:	e01f      	b.n	80050a8 <NeoBatteryLevelLight+0x5c>
	else if (batteryLevel > 60)
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	2b3c      	cmp	r3, #60	; 0x3c
 800506c:	d905      	bls.n	800507a <NeoBatteryLevelLight+0x2e>
		SetNeoColor(0, 0xFF, 0xFF);
 800506e:	22ff      	movs	r2, #255	; 0xff
 8005070:	21ff      	movs	r1, #255	; 0xff
 8005072:	2000      	movs	r0, #0
 8005074:	f7ff ff3e 	bl	8004ef4 <SetNeoColor>
 8005078:	e016      	b.n	80050a8 <NeoBatteryLevelLight+0x5c>
	else if (batteryLevel > 40)
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	2b28      	cmp	r3, #40	; 0x28
 800507e:	d905      	bls.n	800508c <NeoBatteryLevelLight+0x40>
		SetNeoColor(0, 0xFF, 0);
 8005080:	2200      	movs	r2, #0
 8005082:	21ff      	movs	r1, #255	; 0xff
 8005084:	2000      	movs	r0, #0
 8005086:	f7ff ff35 	bl	8004ef4 <SetNeoColor>
 800508a:	e00d      	b.n	80050a8 <NeoBatteryLevelLight+0x5c>
	else if (batteryLevel > 20)
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	2b14      	cmp	r3, #20
 8005090:	d905      	bls.n	800509e <NeoBatteryLevelLight+0x52>
		SetNeoColor(0xFF, 0xFF, 0);
 8005092:	2200      	movs	r2, #0
 8005094:	21ff      	movs	r1, #255	; 0xff
 8005096:	20ff      	movs	r0, #255	; 0xff
 8005098:	f7ff ff2c 	bl	8004ef4 <SetNeoColor>
 800509c:	e004      	b.n	80050a8 <NeoBatteryLevelLight+0x5c>
	else
		SetNeoColor(0xFF, 0, 0);
 800509e:	2200      	movs	r2, #0
 80050a0:	2100      	movs	r1, #0
 80050a2:	20ff      	movs	r0, #255	; 0xff
 80050a4:	f7ff ff26 	bl	8004ef4 <SetNeoColor>

	UpdateNeoColor();
 80050a8:	f7ff ff6c 	bl	8004f84 <UpdateNeoColor>
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <InitRainbows>:

void InitRainbows(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
	RainbowWarm.nrsRed = NEO_RISING;
 80050b8:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <InitRainbows+0x7c>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	705a      	strb	r2, [r3, #1]
	RainbowWarm.nrsBlue = NEO_STOP;
 80050be:	4b1c      	ldr	r3, [pc, #112]	; (8005130 <InitRainbows+0x7c>)
 80050c0:	2204      	movs	r2, #4
 80050c2:	715a      	strb	r2, [r3, #5]
	RainbowWarm.nrsGreen = NEO_NEXTRISE;
 80050c4:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <InitRainbows+0x7c>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	70da      	strb	r2, [r3, #3]
	RainbowWarm.nrRed = 255;
 80050ca:	4b19      	ldr	r3, [pc, #100]	; (8005130 <InitRainbows+0x7c>)
 80050cc:	22ff      	movs	r2, #255	; 0xff
 80050ce:	701a      	strb	r2, [r3, #0]
	RainbowWarm.nrBlue = 0;
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <InitRainbows+0x7c>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	711a      	strb	r2, [r3, #4]
	RainbowWarm.nrGreen = 0;
 80050d6:	4b16      	ldr	r3, [pc, #88]	; (8005130 <InitRainbows+0x7c>)
 80050d8:	2200      	movs	r2, #0
 80050da:	709a      	strb	r2, [r3, #2]
	RainbowCold.nrsRed = NEO_STOP;
 80050dc:	4b15      	ldr	r3, [pc, #84]	; (8005134 <InitRainbows+0x80>)
 80050de:	2204      	movs	r2, #4
 80050e0:	705a      	strb	r2, [r3, #1]
	RainbowCold.nrsBlue = NEO_RISING;
 80050e2:	4b14      	ldr	r3, [pc, #80]	; (8005134 <InitRainbows+0x80>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	715a      	strb	r2, [r3, #5]
	RainbowCold.nrsGreen = NEO_NEXTRISE;
 80050e8:	4b12      	ldr	r3, [pc, #72]	; (8005134 <InitRainbows+0x80>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	70da      	strb	r2, [r3, #3]
	RainbowCold.nrRed = 255;
 80050ee:	4b11      	ldr	r3, [pc, #68]	; (8005134 <InitRainbows+0x80>)
 80050f0:	22ff      	movs	r2, #255	; 0xff
 80050f2:	701a      	strb	r2, [r3, #0]
	RainbowCold.nrBlue = 0;
 80050f4:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <InitRainbows+0x80>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	711a      	strb	r2, [r3, #4]
	RainbowCold.nrGreen = 0;
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <InitRainbows+0x80>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	709a      	strb	r2, [r3, #2]
	Rainbow.nrsRed = NEO_RISING;
 8005100:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <InitRainbows+0x84>)
 8005102:	2200      	movs	r2, #0
 8005104:	705a      	strb	r2, [r3, #1]
	Rainbow.nrsBlue = NEO_STOP;
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <InitRainbows+0x84>)
 8005108:	2204      	movs	r2, #4
 800510a:	715a      	strb	r2, [r3, #5]
	Rainbow.nrsGreen = NEO_NEXTRISE;
 800510c:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <InitRainbows+0x84>)
 800510e:	2201      	movs	r2, #1
 8005110:	70da      	strb	r2, [r3, #3]
	Rainbow.nrRed = 255;
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <InitRainbows+0x84>)
 8005114:	22ff      	movs	r2, #255	; 0xff
 8005116:	701a      	strb	r2, [r3, #0]
	Rainbow.nrBlue = 0;
 8005118:	4b07      	ldr	r3, [pc, #28]	; (8005138 <InitRainbows+0x84>)
 800511a:	2200      	movs	r2, #0
 800511c:	711a      	strb	r2, [r3, #4]
	Rainbow.nrGreen = 0;
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <InitRainbows+0x84>)
 8005120:	2200      	movs	r2, #0
 8005122:	709a      	strb	r2, [r3, #2]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000228 	.word	0x20000228
 8005134:	20000238 	.word	0x20000238
 8005138:	20000230 	.word	0x20000230

0800513c <UpdateRainbowWarm>:

void TestRainbow(uint8_t r, uint8_t g, uint8_t b);

void UpdateRainbowWarm(void)
{
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
	uint8_t maxValueRed = (uint8_t)floor(0xF0/GetNeoIntensityState())/2;
 8005142:	f7ff fd35 	bl	8004bb0 <GetNeoIntensityState>
 8005146:	4603      	mov	r3, r0
 8005148:	461a      	mov	r2, r3
 800514a:	23f0      	movs	r3, #240	; 0xf0
 800514c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005150:	4618      	mov	r0, r3
 8005152:	f7fb f99d 	bl	8000490 <__aeabi_i2d>
 8005156:	4603      	mov	r3, r0
 8005158:	460c      	mov	r4, r1
 800515a:	ec44 3b10 	vmov	d0, r3, r4
 800515e:	f002 f8df 	bl	8007320 <floor>
 8005162:	ec54 3b10 	vmov	r3, r4, d0
 8005166:	4618      	mov	r0, r3
 8005168:	4621      	mov	r1, r4
 800516a:	f7fb fa7f 	bl	800066c <__aeabi_d2uiz>
 800516e:	4603      	mov	r3, r0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	085b      	lsrs	r3, r3, #1
 8005174:	71fb      	strb	r3, [r7, #7]
	uint8_t maxValueGreen = (uint8_t)floor(0xF0/GetNeoIntensityState())/4;
 8005176:	f7ff fd1b 	bl	8004bb0 <GetNeoIntensityState>
 800517a:	4603      	mov	r3, r0
 800517c:	461a      	mov	r2, r3
 800517e:	23f0      	movs	r3, #240	; 0xf0
 8005180:	fb93 f3f2 	sdiv	r3, r3, r2
 8005184:	4618      	mov	r0, r3
 8005186:	f7fb f983 	bl	8000490 <__aeabi_i2d>
 800518a:	4603      	mov	r3, r0
 800518c:	460c      	mov	r4, r1
 800518e:	ec44 3b10 	vmov	d0, r3, r4
 8005192:	f002 f8c5 	bl	8007320 <floor>
 8005196:	ec54 3b10 	vmov	r3, r4, d0
 800519a:	4618      	mov	r0, r3
 800519c:	4621      	mov	r1, r4
 800519e:	f7fb fa65 	bl	800066c <__aeabi_d2uiz>
 80051a2:	4603      	mov	r3, r0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	089b      	lsrs	r3, r3, #2
 80051a8:	71bb      	strb	r3, [r7, #6]
	uint8_t maxValueBlue = (uint8_t)floor(0xF0/GetNeoIntensityState())/4;
 80051aa:	f7ff fd01 	bl	8004bb0 <GetNeoIntensityState>
 80051ae:	4603      	mov	r3, r0
 80051b0:	461a      	mov	r2, r3
 80051b2:	23f0      	movs	r3, #240	; 0xf0
 80051b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fb f969 	bl	8000490 <__aeabi_i2d>
 80051be:	4603      	mov	r3, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	ec44 3b10 	vmov	d0, r3, r4
 80051c6:	f002 f8ab 	bl	8007320 <floor>
 80051ca:	ec54 3b10 	vmov	r3, r4, d0
 80051ce:	4618      	mov	r0, r3
 80051d0:	4621      	mov	r1, r4
 80051d2:	f7fb fa4b 	bl	800066c <__aeabi_d2uiz>
 80051d6:	4603      	mov	r3, r0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	089b      	lsrs	r3, r3, #2
 80051dc:	717b      	strb	r3, [r7, #5]
	//uint8_t maxValueBlue = (uint8_t)floor(0xFF/GetNeoIntensityState())/2;

	if(RainbowWarm.nrsGreen == NEO_NEXTRISE)
 80051de:	4b2d      	ldr	r3, [pc, #180]	; (8005294 <UpdateRainbowWarm+0x158>)
 80051e0:	78db      	ldrb	r3, [r3, #3]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d10e      	bne.n	8005204 <UpdateRainbowWarm+0xc8>
	{
//		SetNeoColor(maxValueRed, RainbowWarm.nrGreen, RainbowWarm.nrBlue);

		RainbowWarm.nrGreen++;
 80051e6:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <UpdateRainbowWarm+0x158>)
 80051e8:	789b      	ldrb	r3, [r3, #2]
 80051ea:	3301      	adds	r3, #1
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	4b29      	ldr	r3, [pc, #164]	; (8005294 <UpdateRainbowWarm+0x158>)
 80051f0:	709a      	strb	r2, [r3, #2]
		if(RainbowWarm.nrGreen >= maxValueGreen)
 80051f2:	4b28      	ldr	r3, [pc, #160]	; (8005294 <UpdateRainbowWarm+0x158>)
 80051f4:	789b      	ldrb	r3, [r3, #2]
 80051f6:	79ba      	ldrb	r2, [r7, #6]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d83f      	bhi.n	800527c <UpdateRainbowWarm+0x140>
		{
			RainbowWarm.nrsGreen = NEO_NEXTFALL;
 80051fc:	4b25      	ldr	r3, [pc, #148]	; (8005294 <UpdateRainbowWarm+0x158>)
 80051fe:	2202      	movs	r2, #2
 8005200:	70da      	strb	r2, [r3, #3]
 8005202:	e03b      	b.n	800527c <UpdateRainbowWarm+0x140>
		}
	}
	else if(RainbowWarm.nrsGreen == NEO_NEXTFALL)
 8005204:	4b23      	ldr	r3, [pc, #140]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005206:	78db      	ldrb	r3, [r3, #3]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d110      	bne.n	800522e <UpdateRainbowWarm+0xf2>
	{
//		SetNeoColor(maxValueRed, RainbowWarm.nrGreen, RainbowWarm.nrBlue);
		RainbowWarm.nrGreen--;
 800520c:	4b21      	ldr	r3, [pc, #132]	; (8005294 <UpdateRainbowWarm+0x158>)
 800520e:	789b      	ldrb	r3, [r3, #2]
 8005210:	3b01      	subs	r3, #1
 8005212:	b2da      	uxtb	r2, r3
 8005214:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005216:	709a      	strb	r2, [r3, #2]
		if(RainbowWarm.nrGreen < 5)
 8005218:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <UpdateRainbowWarm+0x158>)
 800521a:	789b      	ldrb	r3, [r3, #2]
 800521c:	2b04      	cmp	r3, #4
 800521e:	d82d      	bhi.n	800527c <UpdateRainbowWarm+0x140>
		{
			RainbowWarm.nrsGreen = NEO_STOP;
 8005220:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005222:	2204      	movs	r2, #4
 8005224:	70da      	strb	r2, [r3, #3]
			RainbowWarm.nrsBlue = NEO_NEXTRISE;
 8005226:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005228:	2201      	movs	r2, #1
 800522a:	715a      	strb	r2, [r3, #5]
 800522c:	e026      	b.n	800527c <UpdateRainbowWarm+0x140>
		}
	}
	else if(RainbowWarm.nrsBlue == NEO_NEXTRISE)
 800522e:	4b19      	ldr	r3, [pc, #100]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005230:	795b      	ldrb	r3, [r3, #5]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10e      	bne.n	8005254 <UpdateRainbowWarm+0x118>
	{
//		SetNeoColor(maxValueRed, RainbowWarm.nrGreen, RainbowWarm.nrBlue);
		RainbowWarm.nrBlue++;
 8005236:	4b17      	ldr	r3, [pc, #92]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005238:	791b      	ldrb	r3, [r3, #4]
 800523a:	3301      	adds	r3, #1
 800523c:	b2da      	uxtb	r2, r3
 800523e:	4b15      	ldr	r3, [pc, #84]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005240:	711a      	strb	r2, [r3, #4]
		if(RainbowWarm.nrBlue >= maxValueBlue)
 8005242:	4b14      	ldr	r3, [pc, #80]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005244:	791b      	ldrb	r3, [r3, #4]
 8005246:	797a      	ldrb	r2, [r7, #5]
 8005248:	429a      	cmp	r2, r3
 800524a:	d817      	bhi.n	800527c <UpdateRainbowWarm+0x140>
		{
			RainbowWarm.nrsBlue = NEO_NEXTFALL;
 800524c:	4b11      	ldr	r3, [pc, #68]	; (8005294 <UpdateRainbowWarm+0x158>)
 800524e:	2202      	movs	r2, #2
 8005250:	715a      	strb	r2, [r3, #5]
 8005252:	e013      	b.n	800527c <UpdateRainbowWarm+0x140>
		}
	}
	else if(RainbowWarm.nrsBlue == NEO_NEXTFALL)
 8005254:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005256:	795b      	ldrb	r3, [r3, #5]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d10f      	bne.n	800527c <UpdateRainbowWarm+0x140>
	{
		//SetNeoColor(maxValueRed, RainbowWarm.nrGreen, RainbowWarm.nrBlue);
		RainbowWarm.nrBlue--;
 800525c:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <UpdateRainbowWarm+0x158>)
 800525e:	791b      	ldrb	r3, [r3, #4]
 8005260:	3b01      	subs	r3, #1
 8005262:	b2da      	uxtb	r2, r3
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005266:	711a      	strb	r2, [r3, #4]
		if(RainbowWarm.nrBlue < 5)
 8005268:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <UpdateRainbowWarm+0x158>)
 800526a:	791b      	ldrb	r3, [r3, #4]
 800526c:	2b04      	cmp	r3, #4
 800526e:	d805      	bhi.n	800527c <UpdateRainbowWarm+0x140>
		{
			RainbowWarm.nrsBlue = NEO_STOP;
 8005270:	4b08      	ldr	r3, [pc, #32]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005272:	2204      	movs	r2, #4
 8005274:	715a      	strb	r2, [r3, #5]
			RainbowWarm.nrsGreen = NEO_NEXTRISE;
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005278:	2201      	movs	r2, #1
 800527a:	70da      	strb	r2, [r3, #3]
		}
	}
	TestRainbow(maxValueRed, RainbowWarm.nrGreen, RainbowWarm.nrBlue);
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <UpdateRainbowWarm+0x158>)
 800527e:	7899      	ldrb	r1, [r3, #2]
 8005280:	4b04      	ldr	r3, [pc, #16]	; (8005294 <UpdateRainbowWarm+0x158>)
 8005282:	791a      	ldrb	r2, [r3, #4]
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f806 	bl	8005298 <TestRainbow>
	//UpdateNeoColor();

}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	bd90      	pop	{r4, r7, pc}
 8005294:	20000228 	.word	0x20000228

08005298 <TestRainbow>:

void TestRainbow(uint8_t r, uint8_t g, uint8_t b)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	71fb      	strb	r3, [r7, #7]
 80052a2:	460b      	mov	r3, r1
 80052a4:	71bb      	strb	r3, [r7, #6]
 80052a6:	4613      	mov	r3, r2
 80052a8:	717b      	strb	r3, [r7, #5]
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e008      	b.n	80052c2 <TestRainbow+0x2a>
	{
		led_set_color(i, r, g, b);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	797b      	ldrb	r3, [r7, #5]
 80052b4:	79ba      	ldrb	r2, [r7, #6]
 80052b6:	79f9      	ldrb	r1, [r7, #7]
 80052b8:	f000 f9b2 	bl	8005620 <led_set_color>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3301      	adds	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b09      	cmp	r3, #9
 80052c6:	ddf3      	ble.n	80052b0 <TestRainbow+0x18>
	}
	led_update(1);
 80052c8:	2001      	movs	r0, #1
 80052ca:	f000 fa1f 	bl	800570c <led_update>
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <UpdateRainbowCold>:

void UpdateRainbowCold(void)
{
 80052d8:	b590      	push	{r4, r7, lr}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
	uint8_t maxValueRed = (uint8_t)floor(0xF0/GetNeoIntensityState())/4;
 80052de:	f7ff fc67 	bl	8004bb0 <GetNeoIntensityState>
 80052e2:	4603      	mov	r3, r0
 80052e4:	461a      	mov	r2, r3
 80052e6:	23f0      	movs	r3, #240	; 0xf0
 80052e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fb f8cf 	bl	8000490 <__aeabi_i2d>
 80052f2:	4603      	mov	r3, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	ec44 3b10 	vmov	d0, r3, r4
 80052fa:	f002 f811 	bl	8007320 <floor>
 80052fe:	ec54 3b10 	vmov	r3, r4, d0
 8005302:	4618      	mov	r0, r3
 8005304:	4621      	mov	r1, r4
 8005306:	f7fb f9b1 	bl	800066c <__aeabi_d2uiz>
 800530a:	4603      	mov	r3, r0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	089b      	lsrs	r3, r3, #2
 8005310:	71fb      	strb	r3, [r7, #7]
	uint8_t maxValueGreen = (uint8_t)floor(0xF0/GetNeoIntensityState())/4;
 8005312:	f7ff fc4d 	bl	8004bb0 <GetNeoIntensityState>
 8005316:	4603      	mov	r3, r0
 8005318:	461a      	mov	r2, r3
 800531a:	23f0      	movs	r3, #240	; 0xf0
 800531c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005320:	4618      	mov	r0, r3
 8005322:	f7fb f8b5 	bl	8000490 <__aeabi_i2d>
 8005326:	4603      	mov	r3, r0
 8005328:	460c      	mov	r4, r1
 800532a:	ec44 3b10 	vmov	d0, r3, r4
 800532e:	f001 fff7 	bl	8007320 <floor>
 8005332:	ec54 3b10 	vmov	r3, r4, d0
 8005336:	4618      	mov	r0, r3
 8005338:	4621      	mov	r1, r4
 800533a:	f7fb f997 	bl	800066c <__aeabi_d2uiz>
 800533e:	4603      	mov	r3, r0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	089b      	lsrs	r3, r3, #2
 8005344:	71bb      	strb	r3, [r7, #6]
	uint8_t maxValueBlue = (uint8_t)floor(0xF0/GetNeoIntensityState())/2;
 8005346:	f7ff fc33 	bl	8004bb0 <GetNeoIntensityState>
 800534a:	4603      	mov	r3, r0
 800534c:	461a      	mov	r2, r3
 800534e:	23f0      	movs	r3, #240	; 0xf0
 8005350:	fb93 f3f2 	sdiv	r3, r3, r2
 8005354:	4618      	mov	r0, r3
 8005356:	f7fb f89b 	bl	8000490 <__aeabi_i2d>
 800535a:	4603      	mov	r3, r0
 800535c:	460c      	mov	r4, r1
 800535e:	ec44 3b10 	vmov	d0, r3, r4
 8005362:	f001 ffdd 	bl	8007320 <floor>
 8005366:	ec54 3b10 	vmov	r3, r4, d0
 800536a:	4618      	mov	r0, r3
 800536c:	4621      	mov	r1, r4
 800536e:	f7fb f97d 	bl	800066c <__aeabi_d2uiz>
 8005372:	4603      	mov	r3, r0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	717b      	strb	r3, [r7, #5]
	//uint8_t maxValueBlue = (uint8_t)floor(0xFF/GetNeoIntensityState())/2;

	if(RainbowCold.nrsGreen == NEO_NEXTRISE)
 800537a:	4b2d      	ldr	r3, [pc, #180]	; (8005430 <UpdateRainbowCold+0x158>)
 800537c:	78db      	ldrb	r3, [r3, #3]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d10e      	bne.n	80053a0 <UpdateRainbowCold+0xc8>
	{
//		SetNeoColor(maxValueRed, RainbowWarm.nrGreen, RainbowWarm.nrBlue);

		RainbowCold.nrGreen++;
 8005382:	4b2b      	ldr	r3, [pc, #172]	; (8005430 <UpdateRainbowCold+0x158>)
 8005384:	789b      	ldrb	r3, [r3, #2]
 8005386:	3301      	adds	r3, #1
 8005388:	b2da      	uxtb	r2, r3
 800538a:	4b29      	ldr	r3, [pc, #164]	; (8005430 <UpdateRainbowCold+0x158>)
 800538c:	709a      	strb	r2, [r3, #2]
		if(RainbowCold.nrGreen >= maxValueGreen)
 800538e:	4b28      	ldr	r3, [pc, #160]	; (8005430 <UpdateRainbowCold+0x158>)
 8005390:	789b      	ldrb	r3, [r3, #2]
 8005392:	79ba      	ldrb	r2, [r7, #6]
 8005394:	429a      	cmp	r2, r3
 8005396:	d83f      	bhi.n	8005418 <UpdateRainbowCold+0x140>
		{
			RainbowCold.nrsGreen = NEO_NEXTFALL;
 8005398:	4b25      	ldr	r3, [pc, #148]	; (8005430 <UpdateRainbowCold+0x158>)
 800539a:	2202      	movs	r2, #2
 800539c:	70da      	strb	r2, [r3, #3]
 800539e:	e03b      	b.n	8005418 <UpdateRainbowCold+0x140>
		}
	}
	else if(RainbowCold.nrsGreen == NEO_NEXTFALL)
 80053a0:	4b23      	ldr	r3, [pc, #140]	; (8005430 <UpdateRainbowCold+0x158>)
 80053a2:	78db      	ldrb	r3, [r3, #3]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d110      	bne.n	80053ca <UpdateRainbowCold+0xf2>
	{
//		SetNeoColor(maxValueRed, RainbowWarm.nrGreen, RainbowWarm.nrBlue);
		RainbowCold.nrGreen--;
 80053a8:	4b21      	ldr	r3, [pc, #132]	; (8005430 <UpdateRainbowCold+0x158>)
 80053aa:	789b      	ldrb	r3, [r3, #2]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <UpdateRainbowCold+0x158>)
 80053b2:	709a      	strb	r2, [r3, #2]
		if(RainbowCold.nrGreen < 5)
 80053b4:	4b1e      	ldr	r3, [pc, #120]	; (8005430 <UpdateRainbowCold+0x158>)
 80053b6:	789b      	ldrb	r3, [r3, #2]
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d82d      	bhi.n	8005418 <UpdateRainbowCold+0x140>
		{
			RainbowCold.nrsGreen = NEO_STOP;
 80053bc:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <UpdateRainbowCold+0x158>)
 80053be:	2204      	movs	r2, #4
 80053c0:	70da      	strb	r2, [r3, #3]
			RainbowCold.nrsRed = NEO_NEXTRISE;
 80053c2:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <UpdateRainbowCold+0x158>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	705a      	strb	r2, [r3, #1]
 80053c8:	e026      	b.n	8005418 <UpdateRainbowCold+0x140>
		}
	}
	else if(RainbowCold.nrsRed == NEO_NEXTRISE)
 80053ca:	4b19      	ldr	r3, [pc, #100]	; (8005430 <UpdateRainbowCold+0x158>)
 80053cc:	785b      	ldrb	r3, [r3, #1]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d10e      	bne.n	80053f0 <UpdateRainbowCold+0x118>
	{
//		SetNeoColor(maxValueRed, RainbowWarm.nrGreen, RainbowWarm.nrBlue);
		RainbowCold.nrRed++;
 80053d2:	4b17      	ldr	r3, [pc, #92]	; (8005430 <UpdateRainbowCold+0x158>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	3301      	adds	r3, #1
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <UpdateRainbowCold+0x158>)
 80053dc:	701a      	strb	r2, [r3, #0]
		if(RainbowCold.nrRed >= maxValueRed)
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <UpdateRainbowCold+0x158>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	79fa      	ldrb	r2, [r7, #7]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d817      	bhi.n	8005418 <UpdateRainbowCold+0x140>
		{
			RainbowCold.nrsRed = NEO_NEXTFALL;
 80053e8:	4b11      	ldr	r3, [pc, #68]	; (8005430 <UpdateRainbowCold+0x158>)
 80053ea:	2202      	movs	r2, #2
 80053ec:	705a      	strb	r2, [r3, #1]
 80053ee:	e013      	b.n	8005418 <UpdateRainbowCold+0x140>
		}
	}
	else if(RainbowCold.nrsRed == NEO_NEXTFALL)
 80053f0:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <UpdateRainbowCold+0x158>)
 80053f2:	785b      	ldrb	r3, [r3, #1]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d10f      	bne.n	8005418 <UpdateRainbowCold+0x140>
	{
		//SetNeoColor(maxValueRed, RainbowWarm.nrGreen, RainbowWarm.nrBlue);
		RainbowCold.nrRed--;
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <UpdateRainbowCold+0x158>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <UpdateRainbowCold+0x158>)
 8005402:	701a      	strb	r2, [r3, #0]
		if(RainbowCold.nrRed < 5)
 8005404:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <UpdateRainbowCold+0x158>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b04      	cmp	r3, #4
 800540a:	d805      	bhi.n	8005418 <UpdateRainbowCold+0x140>
		{
			RainbowCold.nrsRed = NEO_STOP;
 800540c:	4b08      	ldr	r3, [pc, #32]	; (8005430 <UpdateRainbowCold+0x158>)
 800540e:	2204      	movs	r2, #4
 8005410:	705a      	strb	r2, [r3, #1]
			RainbowCold.nrsGreen = NEO_NEXTRISE;
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <UpdateRainbowCold+0x158>)
 8005414:	2201      	movs	r2, #1
 8005416:	70da      	strb	r2, [r3, #3]
		}
	}
	TestRainbow(RainbowCold.nrRed, RainbowCold.nrGreen, maxValueBlue);
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <UpdateRainbowCold+0x158>)
 800541a:	7818      	ldrb	r0, [r3, #0]
 800541c:	4b04      	ldr	r3, [pc, #16]	; (8005430 <UpdateRainbowCold+0x158>)
 800541e:	789b      	ldrb	r3, [r3, #2]
 8005420:	797a      	ldrb	r2, [r7, #5]
 8005422:	4619      	mov	r1, r3
 8005424:	f7ff ff38 	bl	8005298 <TestRainbow>
	//UpdateNeoColor();
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	bd90      	pop	{r4, r7, pc}
 8005430:	20000238 	.word	0x20000238

08005434 <PowerUpSword>:
	led_update(1);
}


void PowerUpSword(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
//		led_update(1);
//
//		HAL_Delay(50);
//	}

	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800543a:	2300      	movs	r3, #0
 800543c:	607b      	str	r3, [r7, #4]
 800543e:	e019      	b.n	8005474 <PowerUpSword+0x40>
	{
		for(int j = 0; j < 127; j= j+2)
 8005440:	2300      	movs	r3, #0
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	e010      	b.n	8005468 <PowerUpSword+0x34>
		{
			led_set_color(i, 0x0, j, j);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2100      	movs	r1, #0
 8005452:	f000 f8e5 	bl	8005620 <led_set_color>
			led_update(1);
 8005456:	2001      	movs	r0, #1
 8005458:	f000 f958 	bl	800570c <led_update>
			HAL_Delay(1);
 800545c:	2001      	movs	r0, #1
 800545e:	f7fb fb1d 	bl	8000a9c <HAL_Delay>
		for(int j = 0; j < 127; j= j+2)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	3302      	adds	r3, #2
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b7e      	cmp	r3, #126	; 0x7e
 800546c:	ddeb      	ble.n	8005446 <PowerUpSword+0x12>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3301      	adds	r3, #1
 8005472:	607b      	str	r3, [r7, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b09      	cmp	r3, #9
 8005478:	dde2      	ble.n	8005440 <PowerUpSword+0xc>
		}
	}

}
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <led_init>:
	  led_update(1);

}

void
led_init(void) {
 8005484:	b580      	push	{r7, lr}
 8005486:	b094      	sub	sp, #80	; 0x50
 8005488:	af00      	add	r7, sp, #0
    LL_TIM_InitTypeDef TIM_InitStruct;
    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct;
    LL_GPIO_InitTypeDef GPIO_InitStruct;

    /* Peripheral clock enable */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800548a:	2001      	movs	r0, #1
 800548c:	f7ff fa2e 	bl	80048ec <LL_APB1_GRP1_EnableClock>
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8005490:	2001      	movs	r0, #1
 8005492:	f7ff fa13 	bl	80048bc <LL_AHB2_GRP1_EnableClock>
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8005496:	2001      	movs	r0, #1
 8005498:	f7ff f9f8 	bl	800488c <LL_AHB1_GRP1_EnableClock>

    /* TIM2 DMA Init */

    /* TIM2_CH2 Init */
    LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_5, LL_DMA_REQUEST_4);
 800549c:	2204      	movs	r2, #4
 800549e:	2104      	movs	r1, #4
 80054a0:	485c      	ldr	r0, [pc, #368]	; (8005614 <led_init+0x190>)
 80054a2:	f7ff f91d 	bl	80046e0 <LL_DMA_SetPeriphRequest>
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80054a6:	2210      	movs	r2, #16
 80054a8:	2104      	movs	r1, #4
 80054aa:	485a      	ldr	r0, [pc, #360]	; (8005614 <led_init+0x190>)
 80054ac:	f7fe ffb2 	bl	8004414 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 80054b0:	2200      	movs	r2, #0
 80054b2:	2104      	movs	r1, #4
 80054b4:	4857      	ldr	r0, [pc, #348]	; (8005614 <led_init+0x190>)
 80054b6:	f7ff f893 	bl	80045e0 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_CIRCULAR);
 80054ba:	2220      	movs	r2, #32
 80054bc:	2104      	movs	r1, #4
 80054be:	4855      	ldr	r0, [pc, #340]	; (8005614 <led_init+0x190>)
 80054c0:	f7fe ffd0 	bl	8004464 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 80054c4:	2200      	movs	r2, #0
 80054c6:	2104      	movs	r1, #4
 80054c8:	4852      	ldr	r0, [pc, #328]	; (8005614 <led_init+0x190>)
 80054ca:	f7fe fff1 	bl	80044b0 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 80054ce:	2280      	movs	r2, #128	; 0x80
 80054d0:	2104      	movs	r1, #4
 80054d2:	4850      	ldr	r0, [pc, #320]	; (8005614 <led_init+0x190>)
 80054d4:	f7ff f812 	bl	80044fc <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_WORD);
 80054d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054dc:	2104      	movs	r1, #4
 80054de:	484d      	ldr	r0, [pc, #308]	; (8005614 <led_init+0x190>)
 80054e0:	f7ff f832 	bl	8004548 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_WORD);
 80054e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e8:	2104      	movs	r1, #4
 80054ea:	484a      	ldr	r0, [pc, #296]	; (8005614 <led_init+0x190>)
 80054ec:	f7ff f852 	bl	8004594 <LL_DMA_SetMemorySize>
//    LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);

    /* Added by user */
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t)&TIM2->CCR1);
 80054f0:	4a49      	ldr	r2, [pc, #292]	; (8005618 <led_init+0x194>)
 80054f2:	2104      	movs	r1, #4
 80054f4:	4847      	ldr	r0, [pc, #284]	; (8005614 <led_init+0x190>)
 80054f6:	f7ff f8d9 	bl	80046ac <LL_DMA_SetPeriphAddress>
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
 80054fa:	2104      	movs	r1, #4
 80054fc:	4845      	ldr	r0, [pc, #276]	; (8005614 <led_init+0x190>)
 80054fe:	f7ff f95f 	bl	80047c0 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_5);
 8005502:	2104      	movs	r1, #4
 8005504:	4843      	ldr	r0, [pc, #268]	; (8005614 <led_init+0x190>)
 8005506:	f7ff f97d 	bl	8004804 <LL_DMA_EnableIT_HT>

    /* TIM2 interrupt Init */
    NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 800550a:	f7fe feb7 	bl	800427c <__NVIC_GetPriorityGrouping>
 800550e:	4603      	mov	r3, r0
 8005510:	2200      	movs	r2, #0
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe ff07 	bl	8004328 <NVIC_EncodePriority>
 800551a:	4603      	mov	r3, r0
 800551c:	4619      	mov	r1, r3
 800551e:	201c      	movs	r0, #28
 8005520:	f7fe fed8 	bl	80042d4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8005524:	201c      	movs	r0, #28
 8005526:	f7fe feb7 	bl	8004298 <__NVIC_EnableIRQ>

    TIM_InitStruct.Prescaler = 0; // 0
 800552a:	2300      	movs	r3, #0
 800552c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800552e:	2300      	movs	r3, #0
 8005530:	643b      	str	r3, [r7, #64]	; 0x40
    TIM_InitStruct.Autoreload = 47; // 47
 8005532:	232f      	movs	r3, #47	; 0x2f
 8005534:	647b      	str	r3, [r7, #68]	; 0x44
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005536:	2300      	movs	r3, #0
 8005538:	64bb      	str	r3, [r7, #72]	; 0x48
    LL_TIM_Init(TIM2, &TIM_InitStruct);
 800553a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800553e:	4619      	mov	r1, r3
 8005540:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005544:	f7fe f9be 	bl	80038c4 <LL_TIM_Init>
    LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8005548:	2101      	movs	r1, #1
 800554a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800554e:	f7ff fa73 	bl	8004a38 <LL_TIM_OC_EnablePreload>

    TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005552:	2360      	movs	r3, #96	; 0x60
 8005554:	61fb      	str	r3, [r7, #28]
    TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005556:	2300      	movs	r3, #0
 8005558:	623b      	str	r3, [r7, #32]
    TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
    TIM_OC_InitStruct.CompareValue = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
    TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005562:	2300      	movs	r3, #0
 8005564:	62fb      	str	r3, [r7, #44]	; 0x2c
    LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005566:	f107 031c 	add.w	r3, r7, #28
 800556a:	461a      	mov	r2, r3
 800556c:	2101      	movs	r1, #1
 800556e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005572:	f7fe fa0f 	bl	8003994 <LL_TIM_OC_Init>
    LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8005576:	2101      	movs	r1, #1
 8005578:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800557c:	f7ff fa0e 	bl	800499c <LL_TIM_OC_DisableFast>
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8005580:	2100      	movs	r1, #0
 8005582:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005586:	f7ff fab3 	bl	8004af0 <LL_TIM_SetTriggerOutput>
    LL_TIM_DisableMasterSlaveMode(TIM2);
 800558a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800558e:	f7ff fac2 	bl	8004b16 <LL_TIM_DisableMasterSlaveMode>

    /**
     * TIM2 GPIO Configuration
     * PB3     ------> TIM2_CH2
     */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8005592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005596:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005598:	2302      	movs	r3, #2
 800559a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80055a8:	2301      	movs	r3, #1
 80055aa:	61bb      	str	r3, [r7, #24]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ac:	1d3b      	adds	r3, r7, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055b4:	f7fd fd19 	bl	8002fea <LL_GPIO_Init>

    LL_TIM_OC_SetCompareCH1(TIM2, LL_TIM_GetAutoReload(TIM2) * 2 / 3 - 1); /* Set channel 1 compare register */
 80055b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80055bc:	f7ff f9be 	bl	800493c <LL_TIM_GetAutoReload>
 80055c0:	4603      	mov	r3, r0
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <led_init+0x198>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	3b01      	subs	r3, #1
 80055ce:	4619      	mov	r1, r3
 80055d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80055d4:	f7ff fa7e 	bl	8004ad4 <LL_TIM_OC_SetCompareCH1>
    LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);  /* Enable output on channel */
 80055d8:	2101      	movs	r1, #1
 80055da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80055de:	f7ff f9b9 	bl	8004954 <LL_TIM_CC_EnableChannel>
    LL_TIM_EnableDMAReq_CC1(TIM2);              /* Enable DMA requests on channel 1 */
 80055e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80055e6:	f7ff faa6 	bl	8004b36 <LL_TIM_EnableDMAReq_CC1>

    /* DMA interrupt init */
    /* DMA1_Stream6_IRQn interrupt configuration */
    NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 80055ea:	f7fe fe47 	bl	800427c <__NVIC_GetPriorityGrouping>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2200      	movs	r2, #0
 80055f2:	2100      	movs	r1, #0
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fe fe97 	bl	8004328 <NVIC_EncodePriority>
 80055fa:	4603      	mov	r3, r0
 80055fc:	4619      	mov	r1, r3
 80055fe:	200f      	movs	r0, #15
 8005600:	f7fe fe68 	bl	80042d4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005604:	200f      	movs	r0, #15
 8005606:	f7fe fe47 	bl	8004298 <__NVIC_EnableIRQ>
}
 800560a:	bf00      	nop
 800560c:	3750      	adds	r7, #80	; 0x50
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40020000 	.word	0x40020000
 8005618:	40000034 	.word	0x40000034
 800561c:	aaaaaaab 	.word	0xaaaaaaab

08005620 <led_set_color>:
 * \return          `1` on success, `0` otherwise
 */
uint8_t
led_set_color(size_t index, uint8_t r, uint8_t g, uint8_t b

) {
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	4608      	mov	r0, r1
 800562a:	4611      	mov	r1, r2
 800562c:	461a      	mov	r2, r3
 800562e:	4603      	mov	r3, r0
 8005630:	70fb      	strb	r3, [r7, #3]
 8005632:	460b      	mov	r3, r1
 8005634:	70bb      	strb	r3, [r7, #2]
 8005636:	4613      	mov	r3, r2
 8005638:	707b      	strb	r3, [r7, #1]
    if (index < LED_CFG_LEDS_CNT) {
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b09      	cmp	r3, #9
 800563e:	d818      	bhi.n	8005672 <led_set_color+0x52>
        leds_colors[index * LED_CFG_BYTES_PER_LED + 0] = r;
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	4413      	add	r3, r2
 8005648:	490d      	ldr	r1, [pc, #52]	; (8005680 <led_set_color+0x60>)
 800564a:	78fa      	ldrb	r2, [r7, #3]
 800564c:	54ca      	strb	r2, [r1, r3]
        leds_colors[index * LED_CFG_BYTES_PER_LED + 1] = g;
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	4413      	add	r3, r2
 8005656:	3301      	adds	r3, #1
 8005658:	4909      	ldr	r1, [pc, #36]	; (8005680 <led_set_color+0x60>)
 800565a:	78ba      	ldrb	r2, [r7, #2]
 800565c:	54ca      	strb	r2, [r1, r3]
        leds_colors[index * LED_CFG_BYTES_PER_LED + 2] = b;
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	4413      	add	r3, r2
 8005666:	3302      	adds	r3, #2
 8005668:	4905      	ldr	r1, [pc, #20]	; (8005680 <led_set_color+0x60>)
 800566a:	787a      	ldrb	r2, [r7, #1]
 800566c:	54ca      	strb	r2, [r1, r3]

        return 1;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <led_set_color+0x54>
    }
    return 0;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	2000002c 	.word	0x2000002c

08005684 <led_set_color_all>:

uint8_t
led_set_color_all(uint8_t r, uint8_t g, uint8_t b

) {
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	71fb      	strb	r3, [r7, #7]
 800568e:	460b      	mov	r3, r1
 8005690:	71bb      	strb	r3, [r7, #6]
 8005692:	4613      	mov	r3, r2
 8005694:	717b      	strb	r3, [r7, #5]
    size_t index;
    for (index = 0; index < LED_CFG_LEDS_CNT; index++) {
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e019      	b.n	80056d0 <led_set_color_all+0x4c>
        leds_colors[index * LED_CFG_BYTES_PER_LED + 0] = r;
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4613      	mov	r3, r2
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	4413      	add	r3, r2
 80056a4:	490f      	ldr	r1, [pc, #60]	; (80056e4 <led_set_color_all+0x60>)
 80056a6:	79fa      	ldrb	r2, [r7, #7]
 80056a8:	54ca      	strb	r2, [r1, r3]
        leds_colors[index * LED_CFG_BYTES_PER_LED + 1] = g;
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4613      	mov	r3, r2
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4413      	add	r3, r2
 80056b2:	3301      	adds	r3, #1
 80056b4:	490b      	ldr	r1, [pc, #44]	; (80056e4 <led_set_color_all+0x60>)
 80056b6:	79ba      	ldrb	r2, [r7, #6]
 80056b8:	54ca      	strb	r2, [r1, r3]
        leds_colors[index * LED_CFG_BYTES_PER_LED + 2] = b;
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4613      	mov	r3, r2
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	4413      	add	r3, r2
 80056c2:	3302      	adds	r3, #2
 80056c4:	4907      	ldr	r1, [pc, #28]	; (80056e4 <led_set_color_all+0x60>)
 80056c6:	797a      	ldrb	r2, [r7, #5]
 80056c8:	54ca      	strb	r2, [r1, r3]
    for (index = 0; index < LED_CFG_LEDS_CNT; index++) {
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3301      	adds	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b09      	cmp	r3, #9
 80056d4:	d9e2      	bls.n	800569c <led_set_color_all+0x18>

    }
    return 1;
 80056d6:	2301      	movs	r3, #1
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	2000002c 	.word	0x2000002c

080056e8 <led_is_update_finished>:
/**
 * \brief           Check if update procedure is finished
 * \return          `1` if not updating, `0` if updating process is in progress
 */
uint8_t
led_is_update_finished(void) {
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
    return !is_updating;                        /* Return updating flag status */
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <led_is_update_finished+0x20>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bf0c      	ite	eq
 80056f6:	2301      	moveq	r3, #1
 80056f8:	2300      	movne	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	2000010d 	.word	0x2000010d

0800570c <led_update>:
 * \brief           Start LEDs update procedure
 * \param[in]       block: Set to `1` to block for update process until finished
 * \return          `1` if update started, `0` otherwise
 */
uint8_t
led_update(uint8_t block) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
    if (is_updating) {                          /* Check if update in progress already */
 8005716:	4b0d      	ldr	r3, [pc, #52]	; (800574c <led_update+0x40>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <led_update+0x18>
        return 0;
 8005720:	2300      	movs	r3, #0
 8005722:	e00f      	b.n	8005744 <led_update+0x38>
    }
    is_updating = 1;                            /* We are now updating */
 8005724:	4b09      	ldr	r3, [pc, #36]	; (800574c <led_update+0x40>)
 8005726:	2201      	movs	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]

    led_start_reset_pulse(1);                   /* Start reset pulse */
 800572a:	2001      	movs	r0, #1
 800572c:	f000 f946 	bl	80059bc <led_start_reset_pulse>
    if (block) {
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <led_update+0x36>
        while (!led_is_update_finished());      /* Wait to finish */
 8005736:	bf00      	nop
 8005738:	f7ff ffd6 	bl	80056e8 <led_is_update_finished>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0fa      	beq.n	8005738 <led_update+0x2c>
    }
    return 1;
 8005742:	2301      	movs	r3, #1
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	2000010d 	.word	0x2000010d

08005750 <led_fill_led_pwm_data>:
 * \note            Memory is in format R,G,B, while PWM must be configured in G,R,B[,W]
 * \param[in]       ledx: LED index to set the color
 * \param[out]      ptr: Output array with at least LED_CFG_RAW_BYTES_PER_LED-words of memory
 */
static uint8_t
led_fill_led_pwm_data(size_t ledx, uint32_t* ptr) {
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
    size_t i;

    if (ledx < LED_CFG_LEDS_CNT) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b09      	cmp	r3, #9
 800575e:	d87d      	bhi.n	800585c <led_fill_led_pwm_data+0x10c>
        for (i = 0; i < 8; i++) {
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e075      	b.n	8005852 <led_fill_led_pwm_data+0x102>
            ptr[i] =        (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 1] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	18d1      	adds	r1, r2, r3
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	4413      	add	r3, r2
 8005776:	3301      	adds	r3, #1
 8005778:	4a3c      	ldr	r2, [pc, #240]	; (800586c <led_fill_led_pwm_data+0x11c>)
 800577a:	5cd3      	ldrb	r3, [r2, r3]
 800577c:	461a      	mov	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f1c3 0307 	rsb	r3, r3, #7
 8005784:	fa42 f303 	asr.w	r3, r2, r3
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d008      	beq.n	80057a2 <led_fill_led_pwm_data+0x52>
 8005790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	4a35      	ldr	r2, [pc, #212]	; (8005870 <led_fill_led_pwm_data+0x120>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	e006      	b.n	80057b0 <led_fill_led_pwm_data+0x60>
 80057a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	4a31      	ldr	r2, [pc, #196]	; (8005870 <led_fill_led_pwm_data+0x120>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	085b      	lsrs	r3, r3, #1
 80057b0:	600b      	str	r3, [r1, #0]
            ptr[8 + i] =    (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 0] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3308      	adds	r3, #8
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	18d1      	adds	r1, r2, r3
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	4a29      	ldr	r2, [pc, #164]	; (800586c <led_fill_led_pwm_data+0x11c>)
 80057c6:	5cd3      	ldrb	r3, [r2, r3]
 80057c8:	461a      	mov	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f1c3 0307 	rsb	r3, r3, #7
 80057d0:	fa42 f303 	asr.w	r3, r2, r3
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <led_fill_led_pwm_data+0x9e>
 80057dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	4a22      	ldr	r2, [pc, #136]	; (8005870 <led_fill_led_pwm_data+0x120>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	e006      	b.n	80057fc <led_fill_led_pwm_data+0xac>
 80057ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <led_fill_led_pwm_data+0x120>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	600b      	str	r3, [r1, #0]
            ptr[16 + i] =   (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 2] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3310      	adds	r3, #16
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	18d1      	adds	r1, r2, r3
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	4613      	mov	r3, r2
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	4413      	add	r3, r2
 8005810:	3302      	adds	r3, #2
 8005812:	4a16      	ldr	r2, [pc, #88]	; (800586c <led_fill_led_pwm_data+0x11c>)
 8005814:	5cd3      	ldrb	r3, [r2, r3]
 8005816:	461a      	mov	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f1c3 0307 	rsb	r3, r3, #7
 800581e:	fa42 f303 	asr.w	r3, r2, r3
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <led_fill_led_pwm_data+0xec>
 800582a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	4a0f      	ldr	r2, [pc, #60]	; (8005870 <led_fill_led_pwm_data+0x120>)
 8005834:	fba2 2303 	umull	r2, r3, r2, r3
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	e006      	b.n	800584a <led_fill_led_pwm_data+0xfa>
 800583c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	4a0b      	ldr	r2, [pc, #44]	; (8005870 <led_fill_led_pwm_data+0x120>)
 8005844:	fba2 2303 	umull	r2, r3, r2, r3
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	600b      	str	r3, [r1, #0]
        for (i = 0; i < 8; i++) {
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b07      	cmp	r3, #7
 8005856:	d986      	bls.n	8005766 <led_fill_led_pwm_data+0x16>
        }
        return 1;
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <led_fill_led_pwm_data+0x10e>
    }
    return 0;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	2000002c 	.word	0x2000002c
 8005870:	aaaaaaab 	.word	0xaaaaaaab

08005874 <led_update_sequence>:
 *                      TC is called when second LED_CFG_RAW_BYTES_PER_LED elements are transfered.
 *
 * \note            This function must be called from DMA interrupt
 */
static void
led_update_sequence(uint8_t tc) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
    tc = !!tc;                                  /* Convert to 1 or 0 value only */
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	71fb      	strb	r3, [r7, #7]

    /* Check for reset pulse at the end of PWM stream */
    if (is_reset_pulse == 2) {                  /* Check for reset pulse at the end */
 800588c:	4b45      	ldr	r3, [pc, #276]	; (80059a4 <led_update_sequence+0x130>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d10c      	bne.n	80058ae <led_update_sequence+0x3a>
        LL_TIM_CC_DisableChannel(TIM2, LL_TIM_CHANNEL_CH1); /* Disable channel */
 8005894:	2101      	movs	r1, #1
 8005896:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800589a:	f7ff f86c 	bl	8004976 <LL_TIM_CC_DisableChannel>
        LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);    /* Disable DMA stream */
 800589e:	2104      	movs	r1, #4
 80058a0:	4841      	ldr	r0, [pc, #260]	; (80059a8 <led_update_sequence+0x134>)
 80058a2:	f7fe fd95 	bl	80043d0 <LL_DMA_DisableChannel>

        is_updating = 0;                        /* We are not updating anymore */
 80058a6:	4b41      	ldr	r3, [pc, #260]	; (80059ac <led_update_sequence+0x138>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
        return;
 80058ac:	e077      	b.n	800599e <led_update_sequence+0x12a>
    }

    /* Check for reset pulse on beginning of PWM stream */
    if (is_reset_pulse == 1) {                  /* Check if we finished with reset pulse */
 80058ae:	4b3d      	ldr	r3, [pc, #244]	; (80059a4 <led_update_sequence+0x130>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d112      	bne.n	80058dc <led_update_sequence+0x68>
        /*
         * When reset pulse is active, we have to wait full DMA response,
         * before we can start modifying array which is shared with DMA and PWM
         */
        if (!tc) {                              /* We must wait for transfer complete */
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d06f      	beq.n	800599c <led_update_sequence+0x128>
            return;                             /* Return and wait to finish */
        }

        /* Disable timer output and disable DMA stream */
        LL_TIM_CC_DisableChannel(TIM2, LL_TIM_CHANNEL_CH1); /* Disable channel */
 80058bc:	2101      	movs	r1, #1
 80058be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80058c2:	f7ff f858 	bl	8004976 <LL_TIM_CC_DisableChannel>
        LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 80058c6:	2104      	movs	r1, #4
 80058c8:	4837      	ldr	r0, [pc, #220]	; (80059a8 <led_update_sequence+0x134>)
 80058ca:	f7fe fd81 	bl	80043d0 <LL_DMA_DisableChannel>

        is_reset_pulse = 0;                     /* Not in reset pulse anymore */
 80058ce:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <led_update_sequence+0x130>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
        current_led = 0;                        /* Reset current led */
 80058d4:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <led_update_sequence+0x13c>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e004      	b.n	80058e6 <led_update_sequence+0x72>
    } else {
        /*
         * When we are not in reset mode,
         * go to next led and process data for it
         */
        current_led++;                          /* Go to next LED */
 80058dc:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <led_update_sequence+0x13c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a33      	ldr	r2, [pc, #204]	; (80059b0 <led_update_sequence+0x13c>)
 80058e4:	6013      	str	r3, [r2, #0]

    /*
     * This part is used to prepare data for "next" led,
     * for which update will start once current transfer stops in circular mode
     */
    if (current_led < LED_CFG_LEDS_CNT) {
 80058e6:	4b32      	ldr	r3, [pc, #200]	; (80059b0 <led_update_sequence+0x13c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b09      	cmp	r3, #9
 80058ec:	d846      	bhi.n	800597c <led_update_sequence+0x108>
         *  - Prepare first part of array, because either there is no transfer
         *      or second part (from HT to TC) is now in process for PWM transfer
         *
         * In other case (TC = 1)
         */
        if (current_led == 0 || !tc) {
 80058ee:	4b30      	ldr	r3, [pc, #192]	; (80059b0 <led_update_sequence+0x13c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <led_update_sequence+0x88>
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <led_update_sequence+0x96>
            led_fill_led_pwm_data(current_led, &tmp_led_data[0]);
 80058fc:	4b2c      	ldr	r3, [pc, #176]	; (80059b0 <led_update_sequence+0x13c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	492c      	ldr	r1, [pc, #176]	; (80059b4 <led_update_sequence+0x140>)
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff ff24 	bl	8005750 <led_fill_led_pwm_data>
 8005908:	e005      	b.n	8005916 <led_update_sequence+0xa2>
        } else {
            led_fill_led_pwm_data(current_led, &tmp_led_data[LED_CFG_RAW_BYTES_PER_LED]);
 800590a:	4b29      	ldr	r3, [pc, #164]	; (80059b0 <led_update_sequence+0x13c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	492a      	ldr	r1, [pc, #168]	; (80059b8 <led_update_sequence+0x144>)
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff ff1d 	bl	8005750 <led_fill_led_pwm_data>
         *
         *  - We setup first part of array for first led,
         *  - We have to prepare second part for second led to have one led prepared in advance
         *  - Set DMA to circular mode and start the transfer + PWM output
         */
        if (current_led == 0) {
 8005916:	4b26      	ldr	r3, [pc, #152]	; (80059b0 <led_update_sequence+0x13c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d13f      	bne.n	800599e <led_update_sequence+0x12a>
            current_led++;                      /* Go to next LED */
 800591e:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <led_update_sequence+0x13c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3301      	adds	r3, #1
 8005924:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <led_update_sequence+0x13c>)
 8005926:	6013      	str	r3, [r2, #0]
            led_fill_led_pwm_data(current_led, &tmp_led_data[LED_CFG_RAW_BYTES_PER_LED]);   /* Prepare second LED too */
 8005928:	4b21      	ldr	r3, [pc, #132]	; (80059b0 <led_update_sequence+0x13c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4922      	ldr	r1, [pc, #136]	; (80059b8 <led_update_sequence+0x144>)
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff ff0e 	bl	8005750 <led_fill_led_pwm_data>

            /* Set DMA to circular mode and set length to 48 elements for 2 leds */
            LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_CIRCULAR);
 8005934:	2220      	movs	r2, #32
 8005936:	2104      	movs	r1, #4
 8005938:	481b      	ldr	r0, [pc, #108]	; (80059a8 <led_update_sequence+0x134>)
 800593a:	f7fe fd93 	bl	8004464 <LL_DMA_SetMode>
            LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t)tmp_led_data);
 800593e:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <led_update_sequence+0x140>)
 8005940:	461a      	mov	r2, r3
 8005942:	2104      	movs	r1, #4
 8005944:	4818      	ldr	r0, [pc, #96]	; (80059a8 <led_update_sequence+0x134>)
 8005946:	f7fe fe97 	bl	8004678 <LL_DMA_SetMemoryAddress>
            LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, 2 * LED_CFG_RAW_BYTES_PER_LED);
 800594a:	2230      	movs	r2, #48	; 0x30
 800594c:	2104      	movs	r1, #4
 800594e:	4816      	ldr	r0, [pc, #88]	; (80059a8 <led_update_sequence+0x134>)
 8005950:	f7fe fe6c 	bl	800462c <LL_DMA_SetDataLength>

            /* Clear DMA flags */
            LL_DMA_ClearFlag_TC5(DMA1);
 8005954:	4814      	ldr	r0, [pc, #80]	; (80059a8 <led_update_sequence+0x134>)
 8005956:	f7fe ff17 	bl	8004788 <LL_DMA_ClearFlag_TC5>
            LL_DMA_ClearFlag_HT5(DMA1);
 800595a:	4813      	ldr	r0, [pc, #76]	; (80059a8 <led_update_sequence+0x134>)
 800595c:	f7fe ff22 	bl	80047a4 <LL_DMA_ClearFlag_HT5>
            LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_5);
 8005960:	2104      	movs	r1, #4
 8005962:	4811      	ldr	r0, [pc, #68]	; (80059a8 <led_update_sequence+0x134>)
 8005964:	f7fe ff4e 	bl	8004804 <LL_DMA_EnableIT_HT>
//            LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
            LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 8005968:	2104      	movs	r1, #4
 800596a:	480f      	ldr	r0, [pc, #60]	; (80059a8 <led_update_sequence+0x134>)
 800596c:	f7fe fd0e 	bl	800438c <LL_DMA_EnableChannel>
            LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);  /* Enable channel */
 8005970:	2101      	movs	r1, #1
 8005972:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005976:	f7fe ffed 	bl	8004954 <LL_TIM_CC_EnableChannel>
 800597a:	e010      	b.n	800599e <led_update_sequence+0x12a>
     * When we reached all leds, we have to wait to transmit data for all leds before we can disable DMA and PWM:
     *
     *  - If TC event is enabled and we have EVEN number of LEDS (2, 4, 6, ...)
     *  - If HT event is enabled and we have ODD number of LEDS (1, 3, 5, ...)
     */
    } else if ((!tc && (LED_CFG_LEDS_CNT & 0x01)) || (tc && !(LED_CFG_LEDS_CNT & 0x01))) {
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <led_update_sequence+0x12a>
        LL_TIM_CC_DisableChannel(TIM2, LL_TIM_CHANNEL_CH1); /* Disable channel */
 8005982:	2101      	movs	r1, #1
 8005984:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005988:	f7fe fff5 	bl	8004976 <LL_TIM_CC_DisableChannel>
        LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 800598c:	2104      	movs	r1, #4
 800598e:	4806      	ldr	r0, [pc, #24]	; (80059a8 <led_update_sequence+0x134>)
 8005990:	f7fe fd1e 	bl	80043d0 <LL_DMA_DisableChannel>

        /* It is time to send final reset pulse, 50us at least */
        led_start_reset_pulse(2);                /* Start reset pulse at the end */
 8005994:	2002      	movs	r0, #2
 8005996:	f000 f811 	bl	80059bc <led_start_reset_pulse>
 800599a:	e000      	b.n	800599e <led_update_sequence+0x12a>
            return;                             /* Return and wait to finish */
 800599c:	bf00      	nop
    }
}
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	2000010c 	.word	0x2000010c
 80059a8:	40020000 	.word	0x40020000
 80059ac:	2000010d 	.word	0x2000010d
 80059b0:	20000110 	.word	0x20000110
 80059b4:	2000004c 	.word	0x2000004c
 80059b8:	200000ac 	.word	0x200000ac

080059bc <led_start_reset_pulse>:
/**
 * \brief           Start reset pulse sequence
 * \param[in]       num: Number indicating pulse is for beginning (1) or end (2) of PWM data stream
 */
static uint8_t led_start_reset_pulse(uint8_t num)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	71fb      	strb	r3, [r7, #7]
    is_reset_pulse = num;                       /* Set reset pulse flag */
 80059c6:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <led_start_reset_pulse+0x8c>)
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	7013      	strb	r3, [r2, #0]

    memset(tmp_led_data, 0, sizeof(tmp_led_data));   /* Set all bytes to 0 to achieve 50us pulse */
 80059cc:	22c0      	movs	r2, #192	; 0xc0
 80059ce:	2100      	movs	r1, #0
 80059d0:	481e      	ldr	r0, [pc, #120]	; (8005a4c <led_start_reset_pulse+0x90>)
 80059d2:	f001 fc9b 	bl	800730c <memset>

    if (num == 1) {
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d105      	bne.n	80059e8 <led_start_reset_pulse+0x2c>
        tmp_led_data[0] = TIM2->ARR / 2;
 80059dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	085b      	lsrs	r3, r3, #1
 80059e4:	4a19      	ldr	r2, [pc, #100]	; (8005a4c <led_start_reset_pulse+0x90>)
 80059e6:	6013      	str	r3, [r2, #0]
    }

    /* Set DMA to normal mode, set memory to beginning of data and length to 40 elements */
    /* 800kHz PWM x 40 samples = ~50us pulse low */
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);  /* Go to non-circular mode */
 80059e8:	2200      	movs	r2, #0
 80059ea:	2104      	movs	r1, #4
 80059ec:	4818      	ldr	r0, [pc, #96]	; (8005a50 <led_start_reset_pulse+0x94>)
 80059ee:	f7fe fd39 	bl	8004464 <LL_DMA_SetMode>
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t)tmp_led_data);
 80059f2:	4b16      	ldr	r3, [pc, #88]	; (8005a4c <led_start_reset_pulse+0x90>)
 80059f4:	461a      	mov	r2, r3
 80059f6:	2104      	movs	r1, #4
 80059f8:	4815      	ldr	r0, [pc, #84]	; (8005a50 <led_start_reset_pulse+0x94>)
 80059fa:	f7fe fe3d 	bl	8004678 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, 40);
 80059fe:	2228      	movs	r2, #40	; 0x28
 8005a00:	2104      	movs	r1, #4
 8005a02:	4813      	ldr	r0, [pc, #76]	; (8005a50 <led_start_reset_pulse+0x94>)
 8005a04:	f7fe fe12 	bl	800462c <LL_DMA_SetDataLength>

    /* Reset DMA configuration and enable stream */
    LL_DMA_ClearFlag_TC5(DMA1);
 8005a08:	4811      	ldr	r0, [pc, #68]	; (8005a50 <led_start_reset_pulse+0x94>)
 8005a0a:	f7fe febd 	bl	8004788 <LL_DMA_ClearFlag_TC5>
    LL_DMA_ClearFlag_HT5(DMA1);
 8005a0e:	4810      	ldr	r0, [pc, #64]	; (8005a50 <led_start_reset_pulse+0x94>)
 8005a10:	f7fe fec8 	bl	80047a4 <LL_DMA_ClearFlag_HT5>
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_CHANNEL_5);
 8005a14:	2104      	movs	r1, #4
 8005a16:	480e      	ldr	r0, [pc, #56]	; (8005a50 <led_start_reset_pulse+0x94>)
 8005a18:	f7fe ff16 	bl	8004848 <LL_DMA_DisableIT_HT>
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
 8005a1c:	2104      	movs	r1, #4
 8005a1e:	480c      	ldr	r0, [pc, #48]	; (8005a50 <led_start_reset_pulse+0x94>)
 8005a20:	f7fe fece 	bl	80047c0 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 8005a24:	2104      	movs	r1, #4
 8005a26:	480a      	ldr	r0, [pc, #40]	; (8005a50 <led_start_reset_pulse+0x94>)
 8005a28:	f7fe fcb0 	bl	800438c <LL_DMA_EnableChannel>

    LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);  /* Enable channel for timer */
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005a32:	f7fe ff8f 	bl	8004954 <LL_TIM_CC_EnableChannel>
    LL_TIM_EnableCounter(TIM2);                 /* Start timer counter */
 8005a36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005a3a:	f7fe ff6f 	bl	800491c <LL_TIM_EnableCounter>

    return 1;
 8005a3e:	2301      	movs	r3, #1
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	2000010c 	.word	0x2000010c
 8005a4c:	2000004c 	.word	0x2000004c
 8005a50:	40020000 	.word	0x40020000

08005a54 <DMA1_Channel5_IRQHandler>:

void
DMA1_Channel5_IRQHandler(void) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
    if (LL_DMA_IsActiveFlag_HT5(DMA1)) {        /* Check for HT event */
 8005a58:	480d      	ldr	r0, [pc, #52]	; (8005a90 <DMA1_Channel5_IRQHandler+0x3c>)
 8005a5a:	f7fe fe81 	bl	8004760 <LL_DMA_IsActiveFlag_HT5>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d006      	beq.n	8005a72 <DMA1_Channel5_IRQHandler+0x1e>
        LL_DMA_ClearFlag_HT5(DMA1);
 8005a64:	480a      	ldr	r0, [pc, #40]	; (8005a90 <DMA1_Channel5_IRQHandler+0x3c>)
 8005a66:	f7fe fe9d 	bl	80047a4 <LL_DMA_ClearFlag_HT5>
        led_update_sequence(0);                 /* Call update sequence as HT event */
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	f7ff ff02 	bl	8005874 <led_update_sequence>
    } else if (LL_DMA_IsActiveFlag_TC5(DMA1)) { /* Check for TC event */
        LL_DMA_ClearFlag_TC5(DMA1);
        led_update_sequence(1);                 /* Call update sequence as TC event */
    }
}
 8005a70:	e00b      	b.n	8005a8a <DMA1_Channel5_IRQHandler+0x36>
    } else if (LL_DMA_IsActiveFlag_TC5(DMA1)) { /* Check for TC event */
 8005a72:	4807      	ldr	r0, [pc, #28]	; (8005a90 <DMA1_Channel5_IRQHandler+0x3c>)
 8005a74:	f7fe fe60 	bl	8004738 <LL_DMA_IsActiveFlag_TC5>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <DMA1_Channel5_IRQHandler+0x36>
        LL_DMA_ClearFlag_TC5(DMA1);
 8005a7e:	4804      	ldr	r0, [pc, #16]	; (8005a90 <DMA1_Channel5_IRQHandler+0x3c>)
 8005a80:	f7fe fe82 	bl	8004788 <LL_DMA_ClearFlag_TC5>
        led_update_sequence(1);                 /* Call update sequence as TC event */
 8005a84:	2001      	movs	r0, #1
 8005a86:	f7ff fef5 	bl	8005874 <led_update_sequence>
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40020000 	.word	0x40020000

08005a94 <EnableBLE>:

/* UART buffer init */
volatile uint8_t uart_Buffer[TX_BUFF_SIZE] = { 0 };

void EnableBLE(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLE_En_GPIO_Port, BLE_En_Pin, GPIO_PIN_SET);
 8005a98:	2201      	movs	r2, #1
 8005a9a:	2108      	movs	r1, #8
 8005a9c:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <EnableBLE+0x14>)
 8005a9e:	f7fc fbb1 	bl	8002204 <HAL_GPIO_WritePin>
}
 8005aa2:	bf00      	nop
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	48000800 	.word	0x48000800

08005aac <DisableBLE>:

void DisableBLE(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLE_En_GPIO_Port, BLE_En_Pin, GPIO_PIN_RESET);
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2108      	movs	r1, #8
 8005ab4:	4802      	ldr	r0, [pc, #8]	; (8005ac0 <DisableBLE+0x14>)
 8005ab6:	f7fc fba5 	bl	8002204 <HAL_GPIO_WritePin>
}
 8005aba:	bf00      	nop
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	48000800 	.word	0x48000800

08005ac4 <USART_Callback>:

void USART_Callback(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
	/* Check if RXNE flag high */
	if ((USART2->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 8005aca:	4b16      	ldr	r3, [pc, #88]	; (8005b24 <USART_Callback+0x60>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	d120      	bne.n	8005b18 <USART_Callback+0x54>
	{
		/* Read Data Register on USART1 (Sara module) */
		uint8_t data = USART2->RDR;
 8005ad6:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <USART_Callback+0x60>)
 8005ad8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	71fb      	strb	r3, [r7, #7]

		/* Disable \r and \n from buffer */
		if (data != '\r')
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	2b0d      	cmp	r3, #13
 8005ae2:	d012      	beq.n	8005b0a <USART_Callback+0x46>
		{
			if (data != '\n')
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	2b0a      	cmp	r3, #10
 8005ae8:	d00c      	beq.n	8005b04 <USART_Callback+0x40>
			{
				/* Add data to Buffer */
				uart_Buffer[headTail.Head] = data;
 8005aea:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <USART_Callback+0x64>)
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	4619      	mov	r1, r3
 8005af0:	4a0e      	ldr	r2, [pc, #56]	; (8005b2c <USART_Callback+0x68>)
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	5453      	strb	r3, [r2, r1]
				headTail.Head++;
 8005af6:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <USART_Callback+0x64>)
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <USART_Callback+0x64>)
 8005b00:	801a      	strh	r2, [r3, #0]
 8005b02:	e002      	b.n	8005b0a <USART_Callback+0x46>
			}
			else
			{
				checkCommando = 1;
 8005b04:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <USART_Callback+0x6c>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Overflow Safety */
		if (headTail.Head > TX_BUFF_SIZE - 1)
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <USART_Callback+0x64>)
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	2bff      	cmp	r3, #255	; 0xff
 8005b10:	d902      	bls.n	8005b18 <USART_Callback+0x54>
		{
			headTail.Head = 0;
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <USART_Callback+0x64>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	40004400 	.word	0x40004400
 8005b28:	20000240 	.word	0x20000240
 8005b2c:	20000118 	.word	0x20000118
 8005b30:	20000114 	.word	0x20000114

08005b34 <GetStringBLE>:

void GetStringBLE(uint8_t *get)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]

	uint16_t u_counter = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	81fb      	strh	r3, [r7, #14]

	if (headTail.Head < headTail.Tail)
 8005b40:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <GetStringBLE+0x88>)
 8005b42:	881a      	ldrh	r2, [r3, #0]
 8005b44:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <GetStringBLE+0x88>)
 8005b46:	885b      	ldrh	r3, [r3, #2]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d209      	bcs.n	8005b60 <GetStringBLE+0x2c>
	{
		u_counter = TX_BUFF_SIZE - (headTail.Tail - headTail.Head);
 8005b4c:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <GetStringBLE+0x88>)
 8005b4e:	881a      	ldrh	r2, [r3, #0]
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <GetStringBLE+0x88>)
 8005b52:	885b      	ldrh	r3, [r3, #2]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005b5c:	81fb      	strh	r3, [r7, #14]
 8005b5e:	e005      	b.n	8005b6c <GetStringBLE+0x38>
	}

	else
	{
		u_counter = headTail.Head - headTail.Tail;
 8005b60:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <GetStringBLE+0x88>)
 8005b62:	881a      	ldrh	r2, [r3, #0]
 8005b64:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <GetStringBLE+0x88>)
 8005b66:	885b      	ldrh	r3, [r3, #2]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	81fb      	strh	r3, [r7, #14]
	}

	for(int i = 0; i < u_counter; i++)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	e019      	b.n	8005ba6 <GetStringBLE+0x72>
	{
		get[i] = uart_Buffer[headTail.Tail];
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4413      	add	r3, r2
 8005b78:	4a10      	ldr	r2, [pc, #64]	; (8005bbc <GetStringBLE+0x88>)
 8005b7a:	8852      	ldrh	r2, [r2, #2]
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <GetStringBLE+0x8c>)
 8005b80:	5c52      	ldrb	r2, [r2, r1]
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]

		/* Tail jumps one position */
		headTail.Tail++;
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <GetStringBLE+0x88>)
 8005b88:	885b      	ldrh	r3, [r3, #2]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <GetStringBLE+0x88>)
 8005b90:	805a      	strh	r2, [r3, #2]

		/* If tail gets bigger than buffer */
		if (headTail.Tail > TX_BUFF_SIZE - 1)
 8005b92:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <GetStringBLE+0x88>)
 8005b94:	885b      	ldrh	r3, [r3, #2]
 8005b96:	2bff      	cmp	r3, #255	; 0xff
 8005b98:	d902      	bls.n	8005ba0 <GetStringBLE+0x6c>
		{
			/* Jump back to first position */
			headTail.Tail = 0;
 8005b9a:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <GetStringBLE+0x88>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i < u_counter; i++)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	89fa      	ldrh	r2, [r7, #14]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	dce1      	bgt.n	8005b72 <GetStringBLE+0x3e>
		}
	}
}
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20000240 	.word	0x20000240
 8005bc0:	20000118 	.word	0x20000118

08005bc4 <HeartBeatToggle>:
  Name         :  Toggles Heartbeat Led
  Description  :
  Argument(s)  :
--------------------------------------------------------------------------------------------------*/
void HeartBeatToggle(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(HeartBeat_GPIO_Port, HeartBeat_Pin);
 8005bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bcc:	4802      	ldr	r0, [pc, #8]	; (8005bd8 <HeartBeatToggle+0x14>)
 8005bce:	f7fc fb31 	bl	8002234 <HAL_GPIO_TogglePin>
}
 8005bd2:	bf00      	nop
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	48000800 	.word	0x48000800

08005bdc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005be2:	463b      	mov	r3, r7
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	605a      	str	r2, [r3, #4]
 8005bea:	609a      	str	r2, [r3, #8]
 8005bec:	60da      	str	r2, [r3, #12]
 8005bee:	611a      	str	r2, [r3, #16]
 8005bf0:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005bf2:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005bf4:	4a2a      	ldr	r2, [pc, #168]	; (8005ca0 <MX_ADC1_Init+0xc4>)
 8005bf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005bf8:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005bfe:	4b27      	ldr	r3, [pc, #156]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c04:	4b25      	ldr	r3, [pc, #148]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005c0a:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c10:	4b22      	ldr	r3, [pc, #136]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c12:	2204      	movs	r2, #4
 8005c14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005c16:	4b21      	ldr	r3, [pc, #132]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005c1c:	4b1f      	ldr	r3, [pc, #124]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005c22:	4b1e      	ldr	r3, [pc, #120]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c24:	2201      	movs	r2, #1
 8005c26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005c28:	4b1c      	ldr	r3, [pc, #112]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8005c30:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c36:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005c3c:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005c42:	4b16      	ldr	r3, [pc, #88]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005c4a:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005c50:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005c58:	4810      	ldr	r0, [pc, #64]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c5a:	f7fb f935 	bl	8000ec8 <HAL_ADC_Init>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8005c64:	f000 fd4c 	bl	8006700 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005c68:	4b0e      	ldr	r3, [pc, #56]	; (8005ca4 <MX_ADC1_Init+0xc8>)
 8005c6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005c6c:	2306      	movs	r3, #6
 8005c6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005c74:	237f      	movs	r3, #127	; 0x7f
 8005c76:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005c78:	2304      	movs	r3, #4
 8005c7a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c80:	463b      	mov	r3, r7
 8005c82:	4619      	mov	r1, r3
 8005c84:	4805      	ldr	r0, [pc, #20]	; (8005c9c <MX_ADC1_Init+0xc0>)
 8005c86:	f7fb fb61 	bl	800134c <HAL_ADC_ConfigChannel>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8005c90:	f000 fd36 	bl	8006700 <Error_Handler>
  }

}
 8005c94:	bf00      	nop
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20000244 	.word	0x20000244
 8005ca0:	50040000 	.word	0x50040000
 8005ca4:	04300002 	.word	0x04300002

08005ca8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cb0:	f107 0314 	add.w	r3, r7, #20
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	609a      	str	r2, [r3, #8]
 8005cbc:	60da      	str	r2, [r3, #12]
 8005cbe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a15      	ldr	r2, [pc, #84]	; (8005d1c <HAL_ADC_MspInit+0x74>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d123      	bne.n	8005d12 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005cca:	4a15      	ldr	r2, [pc, #84]	; (8005d20 <HAL_ADC_MspInit+0x78>)
 8005ccc:	4b14      	ldr	r3, [pc, #80]	; (8005d20 <HAL_ADC_MspInit+0x78>)
 8005cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cd6:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <HAL_ADC_MspInit+0x78>)
 8005cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ce2:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <HAL_ADC_MspInit+0x78>)
 8005ce4:	4b0e      	ldr	r3, [pc, #56]	; (8005d20 <HAL_ADC_MspInit+0x78>)
 8005ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce8:	f043 0304 	orr.w	r3, r3, #4
 8005cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cee:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <HAL_ADC_MspInit+0x78>)
 8005cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = VBat_ADC_Pin;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8005cfe:	230b      	movs	r3, #11
 8005d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBat_ADC_GPIO_Port, &GPIO_InitStruct);
 8005d06:	f107 0314 	add.w	r3, r7, #20
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4805      	ldr	r0, [pc, #20]	; (8005d24 <HAL_ADC_MspInit+0x7c>)
 8005d0e:	f7fc f8e7 	bl	8001ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005d12:	bf00      	nop
 8005d14:	3728      	adds	r7, #40	; 0x28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	50040000 	.word	0x50040000
 8005d20:	40021000 	.word	0x40021000
 8005d24:	48000800 	.word	0x48000800

08005d28 <__NVIC_GetPriorityGrouping>:
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d2c:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <__NVIC_GetPriorityGrouping+0x18>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	f003 0307 	and.w	r3, r3, #7
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	e000ed00 	.word	0xe000ed00

08005d44 <__NVIC_EnableIRQ>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	db0b      	blt.n	8005d6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d56:	4909      	ldr	r1, [pc, #36]	; (8005d7c <__NVIC_EnableIRQ+0x38>)
 8005d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	79fa      	ldrb	r2, [r7, #7]
 8005d60:	f002 021f 	and.w	r2, r2, #31
 8005d64:	2001      	movs	r0, #1
 8005d66:	fa00 f202 	lsl.w	r2, r0, r2
 8005d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	e000e100 	.word	0xe000e100

08005d80 <__NVIC_SetPriority>:
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4603      	mov	r3, r0
 8005d88:	6039      	str	r1, [r7, #0]
 8005d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db0a      	blt.n	8005daa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d94:	490d      	ldr	r1, [pc, #52]	; (8005dcc <__NVIC_SetPriority+0x4c>)
 8005d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	0112      	lsls	r2, r2, #4
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	440b      	add	r3, r1
 8005da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005da8:	e00a      	b.n	8005dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005daa:	4909      	ldr	r1, [pc, #36]	; (8005dd0 <__NVIC_SetPriority+0x50>)
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	3b04      	subs	r3, #4
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	0112      	lsls	r2, r2, #4
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	761a      	strb	r2, [r3, #24]
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	e000e100 	.word	0xe000e100
 8005dd0:	e000ed00 	.word	0xe000ed00

08005dd4 <NVIC_EncodePriority>:
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b089      	sub	sp, #36	; 0x24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f1c3 0307 	rsb	r3, r3, #7
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	bf28      	it	cs
 8005df2:	2304      	movcs	r3, #4
 8005df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	2b06      	cmp	r3, #6
 8005dfc:	d902      	bls.n	8005e04 <NVIC_EncodePriority+0x30>
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3b03      	subs	r3, #3
 8005e02:	e000      	b.n	8005e06 <NVIC_EncodePriority+0x32>
 8005e04:	2300      	movs	r3, #0
 8005e06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e08:	2201      	movs	r2, #1
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	1e5a      	subs	r2, r3, #1
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	401a      	ands	r2, r3
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e22:	1e59      	subs	r1, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e28:	4313      	orrs	r3, r2
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3724      	adds	r7, #36	; 0x24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <LL_AHB1_GRP1_EnableClock>:
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005e40:	4908      	ldr	r1, [pc, #32]	; (8005e64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005e44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4013      	ands	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005e56:	68fb      	ldr	r3, [r7, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	40021000 	.word	0x40021000

08005e68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	f7ff ffe3 	bl	8005e38 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005e72:	f7ff ff59 	bl	8005d28 <__NVIC_GetPriorityGrouping>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff ffa9 	bl	8005dd4 <NVIC_EncodePriority>
 8005e82:	4603      	mov	r3, r0
 8005e84:	4619      	mov	r1, r3
 8005e86:	200f      	movs	r0, #15
 8005e88:	f7ff ff7a 	bl	8005d80 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005e8c:	200f      	movs	r0, #15
 8005e8e:	f7ff ff59 	bl	8005d44 <__NVIC_EnableIRQ>

}
 8005e92:	bf00      	nop
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	; 0x28
 8005e9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e9e:	f107 0314 	add.w	r3, r7, #20
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	605a      	str	r2, [r3, #4]
 8005ea8:	609a      	str	r2, [r3, #8]
 8005eaa:	60da      	str	r2, [r3, #12]
 8005eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eae:	4a62      	ldr	r2, [pc, #392]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005eb0:	4b61      	ldr	r3, [pc, #388]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb4:	f043 0304 	orr.w	r3, r3, #4
 8005eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eba:	4b5f      	ldr	r3, [pc, #380]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005ec6:	4a5c      	ldr	r2, [pc, #368]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005ec8:	4b5b      	ldr	r3, [pc, #364]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ed2:	4b59      	ldr	r3, [pc, #356]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ede:	4a56      	ldr	r2, [pc, #344]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005ee0:	4b55      	ldr	r3, [pc, #340]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eea:	4b53      	ldr	r3, [pc, #332]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ef6:	4a50      	ldr	r2, [pc, #320]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005ef8:	4b4f      	ldr	r3, [pc, #316]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f02:	4b4d      	ldr	r3, [pc, #308]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f0e:	4a4a      	ldr	r2, [pc, #296]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005f10:	4b49      	ldr	r3, [pc, #292]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f14:	f043 0308 	orr.w	r3, r3, #8
 8005f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f1a:	4b47      	ldr	r3, [pc, #284]	; (8006038 <MX_GPIO_Init+0x1a0>)
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HeartBeat_Pin|BLE_En_Pin, GPIO_PIN_RESET);
 8005f26:	2200      	movs	r2, #0
 8005f28:	f242 0108 	movw	r1, #8200	; 0x2008
 8005f2c:	4843      	ldr	r0, [pc, #268]	; (800603c <MX_GPIO_Init+0x1a4>)
 8005f2e:	f7fc f969 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Neo_En_Pin|VBat_Sense_En_Pin, GPIO_PIN_RESET);
 8005f32:	2200      	movs	r2, #0
 8005f34:	21a0      	movs	r1, #160	; 0xa0
 8005f36:	4842      	ldr	r0, [pc, #264]	; (8006040 <MX_GPIO_Init+0x1a8>)
 8005f38:	f7fc f964 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = HeartBeat_Pin|BLE_En_Pin;
 8005f3c:	f242 0308 	movw	r3, #8200	; 0x2008
 8005f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f42:	2301      	movs	r3, #1
 8005f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f4e:	f107 0314 	add.w	r3, r7, #20
 8005f52:	4619      	mov	r1, r3
 8005f54:	4839      	ldr	r0, [pc, #228]	; (800603c <MX_GPIO_Init+0x1a4>)
 8005f56:	f7fb ffc3 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC1 PC2 
                           PC4 PC5 PC6 PC7 
                           PC8 PC9 PC10 PC11 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2 
 8005f5a:	f64d 73f6 	movw	r3, #57334	; 0xdff6
 8005f5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f60:	2303      	movs	r3, #3
 8005f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f68:	f107 0314 	add.w	r3, r7, #20
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4833      	ldr	r0, [pc, #204]	; (800603c <MX_GPIO_Init+0x1a4>)
 8005f70:	f7fb ffb6 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8005f74:	230b      	movs	r3, #11
 8005f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005f80:	f107 0314 	add.w	r3, r7, #20
 8005f84:	4619      	mov	r1, r3
 8005f86:	482f      	ldr	r0, [pc, #188]	; (8006044 <MX_GPIO_Init+0x1ac>)
 8005f88:	f7fb ffaa 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WKUP_EXTI0_Pin|BLE_EXTI5_Pin|Light_Setting_EXTI6_Pin|VBat_Level_EXTI7_Pin;
 8005f8c:	23e1      	movs	r3, #225	; 0xe1
 8005f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005f90:	4b2d      	ldr	r3, [pc, #180]	; (8006048 <MX_GPIO_Init+0x1b0>)
 8005f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f98:	f107 0314 	add.w	r3, r7, #20
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fa2:	f7fb ff9d 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA8 PA11 
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_11 
 8005fa6:	f641 1312 	movw	r3, #6418	; 0x1912
 8005faa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fac:	2303      	movs	r3, #3
 8005fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fbe:	f7fb ff8f 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB6 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8005fc2:	f64f 7357 	movw	r3, #65367	; 0xff57
 8005fc6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fd0:	f107 0314 	add.w	r3, r7, #20
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	481a      	ldr	r0, [pc, #104]	; (8006040 <MX_GPIO_Init+0x1a8>)
 8005fd8:	f7fb ff82 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005fdc:	2304      	movs	r3, #4
 8005fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fe8:	f107 0314 	add.w	r3, r7, #20
 8005fec:	4619      	mov	r1, r3
 8005fee:	4817      	ldr	r0, [pc, #92]	; (800604c <MX_GPIO_Init+0x1b4>)
 8005ff0:	f7fb ff76 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Neo_En_Pin|VBat_Sense_En_Pin;
 8005ff4:	23a0      	movs	r3, #160	; 0xa0
 8005ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006000:	2300      	movs	r3, #0
 8006002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006004:	f107 0314 	add.w	r3, r7, #20
 8006008:	4619      	mov	r1, r3
 800600a:	480d      	ldr	r0, [pc, #52]	; (8006040 <MX_GPIO_Init+0x1a8>)
 800600c:	f7fb ff68 	bl	8001ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006010:	2200      	movs	r2, #0
 8006012:	2100      	movs	r1, #0
 8006014:	2006      	movs	r0, #6
 8006016:	f7fb ff2c 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800601a:	2006      	movs	r0, #6
 800601c:	f7fb ff45 	bl	8001eaa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006020:	2200      	movs	r2, #0
 8006022:	2100      	movs	r1, #0
 8006024:	2017      	movs	r0, #23
 8006026:	f7fb ff24 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800602a:	2017      	movs	r0, #23
 800602c:	f7fb ff3d 	bl	8001eaa <HAL_NVIC_EnableIRQ>

}
 8006030:	bf00      	nop
 8006032:	3728      	adds	r7, #40	; 0x28
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40021000 	.word	0x40021000
 800603c:	48000800 	.word	0x48000800
 8006040:	48000400 	.word	0x48000400
 8006044:	48001c00 	.word	0x48001c00
 8006048:	10110000 	.word	0x10110000
 800604c:	48000c00 	.word	0x48000c00

08006050 <LL_RCC_MSI_Enable>:
{
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006054:	4a05      	ldr	r2, [pc, #20]	; (800606c <LL_RCC_MSI_Enable+0x1c>)
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <LL_RCC_MSI_Enable+0x1c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	6013      	str	r3, [r2, #0]
}
 8006060:	bf00      	nop
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40021000 	.word	0x40021000

08006070 <LL_RCC_MSI_IsReady>:
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8006074:	4b06      	ldr	r3, [pc, #24]	; (8006090 <LL_RCC_MSI_IsReady+0x20>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d101      	bne.n	8006084 <LL_RCC_MSI_IsReady+0x14>
 8006080:	2301      	movs	r3, #1
 8006082:	e000      	b.n	8006086 <LL_RCC_MSI_IsReady+0x16>
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	40021000 	.word	0x40021000

08006094 <LL_RCC_MSI_EnableRangeSelection>:
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8006098:	4a05      	ldr	r2, [pc, #20]	; (80060b0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f043 0308 	orr.w	r3, r3, #8
 80060a2:	6013      	str	r3, [r2, #0]
}
 80060a4:	bf00      	nop
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40021000 	.word	0x40021000

080060b4 <LL_RCC_MSI_SetRange>:
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80060bc:	4906      	ldr	r1, [pc, #24]	; (80060d8 <LL_RCC_MSI_SetRange+0x24>)
 80060be:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <LL_RCC_MSI_SetRange+0x24>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	600b      	str	r3, [r1, #0]
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	40021000 	.word	0x40021000

080060dc <LL_RCC_MSI_SetCalibTrimming>:
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80060e4:	4907      	ldr	r1, [pc, #28]	; (8006104 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	4313      	orrs	r3, r2
 80060f4:	604b      	str	r3, [r1, #4]
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40021000 	.word	0x40021000

08006108 <LL_RCC_SetSysClkSource>:
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006110:	4906      	ldr	r1, [pc, #24]	; (800612c <LL_RCC_SetSysClkSource+0x24>)
 8006112:	4b06      	ldr	r3, [pc, #24]	; (800612c <LL_RCC_SetSysClkSource+0x24>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f023 0203 	bic.w	r2, r3, #3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4313      	orrs	r3, r2
 800611e:	608b      	str	r3, [r1, #8]
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	40021000 	.word	0x40021000

08006130 <LL_RCC_GetSysClkSource>:
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006134:	4b04      	ldr	r3, [pc, #16]	; (8006148 <LL_RCC_GetSysClkSource+0x18>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 030c 	and.w	r3, r3, #12
}
 800613c:	4618      	mov	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40021000 	.word	0x40021000

0800614c <LL_RCC_SetAHBPrescaler>:
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006154:	4906      	ldr	r1, [pc, #24]	; (8006170 <LL_RCC_SetAHBPrescaler+0x24>)
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <LL_RCC_SetAHBPrescaler+0x24>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4313      	orrs	r3, r2
 8006162:	608b      	str	r3, [r1, #8]
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40021000 	.word	0x40021000

08006174 <LL_RCC_SetAPB1Prescaler>:
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800617c:	4906      	ldr	r1, [pc, #24]	; (8006198 <LL_RCC_SetAPB1Prescaler+0x24>)
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <LL_RCC_SetAPB1Prescaler+0x24>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4313      	orrs	r3, r2
 800618a:	608b      	str	r3, [r1, #8]
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40021000 	.word	0x40021000

0800619c <LL_RCC_SetAPB2Prescaler>:
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80061a4:	4906      	ldr	r1, [pc, #24]	; (80061c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	608b      	str	r3, [r1, #8]
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	40021000 	.word	0x40021000

080061c4 <LL_RCC_SetUSARTClockSource>:
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80061cc:	4909      	ldr	r1, [pc, #36]	; (80061f4 <LL_RCC_SetUSARTClockSource+0x30>)
 80061ce:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <LL_RCC_SetUSARTClockSource+0x30>)
 80061d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	0c1b      	lsrs	r3, r3, #16
 80061d8:	43db      	mvns	r3, r3
 80061da:	401a      	ands	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40021000 	.word	0x40021000

080061f8 <LL_RCC_SetADCClockSource>:
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006200:	4907      	ldr	r1, [pc, #28]	; (8006220 <LL_RCC_SetADCClockSource+0x28>)
 8006202:	4b07      	ldr	r3, [pc, #28]	; (8006220 <LL_RCC_SetADCClockSource+0x28>)
 8006204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006208:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40021000 	.word	0x40021000

08006224 <LL_RCC_PLL_Enable>:
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006228:	4a05      	ldr	r2, [pc, #20]	; (8006240 <LL_RCC_PLL_Enable+0x1c>)
 800622a:	4b05      	ldr	r3, [pc, #20]	; (8006240 <LL_RCC_PLL_Enable+0x1c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006232:	6013      	str	r3, [r2, #0]
}
 8006234:	bf00      	nop
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40021000 	.word	0x40021000

08006244 <LL_RCC_PLL_IsReady>:
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <LL_RCC_PLL_IsReady+0x24>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006254:	d101      	bne.n	800625a <LL_RCC_PLL_IsReady+0x16>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <LL_RCC_PLL_IsReady+0x18>
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40021000 	.word	0x40021000

0800626c <LL_RCC_PLL_ConfigDomain_SYS>:
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800627a:	480a      	ldr	r0, [pc, #40]	; (80062a4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800627c:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8006282:	4013      	ands	r3, r2
 8006284:	68f9      	ldr	r1, [r7, #12]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4311      	orrs	r1, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	0212      	lsls	r2, r2, #8
 800628e:	4311      	orrs	r1, r2
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	4313      	orrs	r3, r2
 8006296:	60c3      	str	r3, [r0, #12]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	40021000 	.word	0x40021000
 80062a8:	f9ff808c 	.word	0xf9ff808c

080062ac <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80062b0:	4a05      	ldr	r2, [pc, #20]	; (80062c8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80062b2:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062ba:	60d3      	str	r3, [r2, #12]
}
 80062bc:	bf00      	nop
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40021000 	.word	0x40021000

080062cc <LL_RCC_PLLSAI1_Enable>:
  * @brief  Enable PLLSAI1
  * @rmtoll CR           PLLSAI1ON     LL_RCC_PLLSAI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_Enable(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80062d0:	4a05      	ldr	r2, [pc, #20]	; (80062e8 <LL_RCC_PLLSAI1_Enable+0x1c>)
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <LL_RCC_PLLSAI1_Enable+0x1c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062da:	6013      	str	r3, [r2, #0]
}
 80062dc:	bf00      	nop
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40021000 	.word	0x40021000

080062ec <LL_RCC_PLLSAI1_IsReady>:
  * @brief  Check if PLLSAI1 Ready
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 80062f0:	4b07      	ldr	r3, [pc, #28]	; (8006310 <LL_RCC_PLLSAI1_IsReady+0x24>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062fc:	d101      	bne.n	8006302 <LL_RCC_PLLSAI1_IsReady+0x16>
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	40021000 	.word	0x40021000

08006314 <LL_RCC_PLLSAI1_ConfigDomain_ADC>:
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_6
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8006322:	480e      	ldr	r0, [pc, #56]	; (800635c <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8006324:	4b0d      	ldr	r3, [pc, #52]	; (800635c <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800632c:	68f9      	ldr	r1, [r7, #12]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	430b      	orrs	r3, r1
 8006332:	4313      	orrs	r3, r2
 8006334:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1R, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLR);
 8006336:	4809      	ldr	r0, [pc, #36]	; (800635c <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8006338:	4b08      	ldr	r3, [pc, #32]	; (800635c <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006340:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	0211      	lsls	r1, r2, #8
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	4313      	orrs	r3, r2
 800634e:	6103      	str	r3, [r0, #16]
}
 8006350:	bf00      	nop
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	40021000 	.word	0x40021000

08006360 <LL_RCC_PLLSAI1_EnableDomain_ADC>:
  * @brief  Enable PLLSAI1 output mapped on ADC domain clock
  * @rmtoll PLLSAI1CFGR  PLLSAI1REN    LL_RCC_PLLSAI1_EnableDomain_ADC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_ADC(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1REN);
 8006364:	4a05      	ldr	r2, [pc, #20]	; (800637c <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 8006366:	4b05      	ldr	r3, [pc, #20]	; (800637c <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800636e:	6113      	str	r3, [r2, #16]
}
 8006370:	bf00      	nop
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40021000 	.word	0x40021000

08006380 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8006388:	4906      	ldr	r1, [pc, #24]	; (80063a4 <LL_FLASH_SetLatency+0x24>)
 800638a:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <LL_FLASH_SetLatency+0x24>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f023 0207 	bic.w	r2, r3, #7
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4313      	orrs	r3, r2
 8006396:	600b      	str	r3, [r1, #0]
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40022000 	.word	0x40022000

080063a8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80063ac:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <LL_FLASH_GetLatency+0x18>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0307 	and.w	r3, r3, #7
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40022000 	.word	0x40022000

080063c4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80063cc:	4906      	ldr	r1, [pc, #24]	; (80063e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4313      	orrs	r3, r2
 80063da:	600b      	str	r3, [r1, #0]
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40007000 	.word	0x40007000

080063ec <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2208      	movs	r2, #8
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f043 0220 	orr.w	r2, r3, #32
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800642c:	f7fa fac6 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006430:	f000 f8f8 	bl	8006624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006434:	f7ff fd30 	bl	8005e98 <MX_GPIO_Init>
  MX_DMA_Init();
 8006438:	f7ff fd16 	bl	8005e68 <MX_DMA_Init>
  MX_ADC1_Init();
 800643c:	f7ff fbce 	bl	8005bdc <MX_ADC1_Init>
  MX_TIM2_Init();
 8006440:	f000 fcb8 	bl	8006db4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8006444:	f000 fe40 	bl	80070c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006448:	f000 fe6e 	bl	8007128 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Enable USART2 IRQ */
	LL_USART_ClearFlag_ORE(USART2);
 800644c:	486c      	ldr	r0, [pc, #432]	; (8006600 <main+0x1d8>)
 800644e:	f7ff ffcd 	bl	80063ec <LL_USART_ClearFlag_ORE>
	LL_USART_EnableIT_RXNE(USART2);
 8006452:	486b      	ldr	r0, [pc, #428]	; (8006600 <main+0x1d8>)
 8006454:	f7ff ffd7 	bl	8006406 <LL_USART_EnableIT_RXNE>

	HAL_GPIO_WritePin(Neo_En_GPIO_Port, Neo_En_Pin, GPIO_PIN_SET);
 8006458:	2201      	movs	r2, #1
 800645a:	2120      	movs	r1, #32
 800645c:	4869      	ldr	r0, [pc, #420]	; (8006604 <main+0x1dc>)
 800645e:	f7fb fed1 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLE_En_GPIO_Port, BLE_En_Pin, GPIO_PIN_SET);
 8006462:	2201      	movs	r2, #1
 8006464:	2108      	movs	r1, #8
 8006466:	4868      	ldr	r0, [pc, #416]	; (8006608 <main+0x1e0>)
 8006468:	f7fb fecc 	bl	8002204 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 800646c:	200a      	movs	r0, #10
 800646e:	f7fa fb15 	bl	8000a9c <HAL_Delay>

  led_init();
 8006472:	f7ff f807 	bl	8005484 <led_init>
  led_set_color_all(0x00, 0x00, 0x00);
 8006476:	2200      	movs	r2, #0
 8006478:	2100      	movs	r1, #0
 800647a:	2000      	movs	r0, #0
 800647c:	f7ff f902 	bl	8005684 <led_set_color_all>
  led_update(1);
 8006480:	2001      	movs	r0, #1
 8006482:	f7ff f943 	bl	800570c <led_update>

  PowerUpSword();
 8006486:	f7fe ffd5 	bl	8005434 <PowerUpSword>

  InitRainbows();
 800648a:	f7fe fe13 	bl	80050b4 <InitRainbows>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(checkCommando)
 800648e:	4b5f      	ldr	r3, [pc, #380]	; (800660c <main+0x1e4>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d004      	beq.n	80064a0 <main+0x78>
	  {
		  checkCommando = 0;
 8006496:	4b5d      	ldr	r3, [pc, #372]	; (800660c <main+0x1e4>)
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]

		  NeoStateMachine();
 800649c:	f7fe fcd4 	bl	8004e48 <NeoStateMachine>
	  }

	if(BLE_Flag)
 80064a0:	4b5b      	ldr	r3, [pc, #364]	; (8006610 <main+0x1e8>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d029      	beq.n	80064fc <main+0xd4>
	{
		BLE_Flag = 0;
 80064a8:	4b59      	ldr	r3, [pc, #356]	; (8006610 <main+0x1e8>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	701a      	strb	r2, [r3, #0]
	    if(BLE_Mode)
 80064ae:	4b59      	ldr	r3, [pc, #356]	; (8006614 <main+0x1ec>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d011      	beq.n	80064da <main+0xb2>
	    {
	    	BLE_Mode = 0;
 80064b6:	4b57      	ldr	r3, [pc, #348]	; (8006614 <main+0x1ec>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
		  //Enable BLE
	    	while(HAL_GPIO_ReadPin(BLE_EXTI5_GPIO_Port, BLE_EXTI5_Pin) == GPIO_PIN_SET)
 80064bc:	e002      	b.n	80064c4 <main+0x9c>
	    	{
	    		HAL_Delay(1);
 80064be:	2001      	movs	r0, #1
 80064c0:	f7fa faec 	bl	8000a9c <HAL_Delay>
	    	while(HAL_GPIO_ReadPin(BLE_EXTI5_GPIO_Port, BLE_EXTI5_Pin) == GPIO_PIN_SET)
 80064c4:	2120      	movs	r1, #32
 80064c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064ca:	f7fb fe83 	bl	80021d4 <HAL_GPIO_ReadPin>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d0f4      	beq.n	80064be <main+0x96>
	    	}
	    	EnableBLE();
 80064d4:	f7ff fade 	bl	8005a94 <EnableBLE>
 80064d8:	e010      	b.n	80064fc <main+0xd4>
	    }
	    else
	    {
	    	BLE_Mode = 1;
 80064da:	4b4e      	ldr	r3, [pc, #312]	; (8006614 <main+0x1ec>)
 80064dc:	2201      	movs	r2, #1
 80064de:	701a      	strb	r2, [r3, #0]
	    	while(HAL_GPIO_ReadPin(BLE_EXTI5_GPIO_Port, BLE_EXTI5_Pin) == GPIO_PIN_SET)
 80064e0:	e002      	b.n	80064e8 <main+0xc0>
			{
	    		HAL_Delay(1);
 80064e2:	2001      	movs	r0, #1
 80064e4:	f7fa fada 	bl	8000a9c <HAL_Delay>
	    	while(HAL_GPIO_ReadPin(BLE_EXTI5_GPIO_Port, BLE_EXTI5_Pin) == GPIO_PIN_SET)
 80064e8:	2120      	movs	r1, #32
 80064ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064ee:	f7fb fe71 	bl	80021d4 <HAL_GPIO_ReadPin>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d0f4      	beq.n	80064e2 <main+0xba>
			}
	    	DisableBLE();
 80064f8:	f7ff fad8 	bl	8005aac <DisableBLE>
	    }

	  }
	  if(Setting_Flag)
 80064fc:	4b46      	ldr	r3, [pc, #280]	; (8006618 <main+0x1f0>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d014      	beq.n	800652e <main+0x106>
	  {
		  //Move up 1 light level
		  while(HAL_GPIO_ReadPin(Light_Setting_EXTI6_GPIO_Port, Light_Setting_EXTI6_Pin) == GPIO_PIN_SET)
 8006504:	e002      	b.n	800650c <main+0xe4>
			{
			  HAL_Delay(1);
 8006506:	2001      	movs	r0, #1
 8006508:	f7fa fac8 	bl	8000a9c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(Light_Setting_EXTI6_GPIO_Port, Light_Setting_EXTI6_Pin) == GPIO_PIN_SET)
 800650c:	2140      	movs	r1, #64	; 0x40
 800650e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006512:	f7fb fe5f 	bl	80021d4 <HAL_GPIO_ReadPin>
 8006516:	4603      	mov	r3, r0
 8006518:	2b01      	cmp	r3, #1
 800651a:	d0f4      	beq.n	8006506 <main+0xde>
			}
		  UpdateIntensity(GetNeoIntensityState());
 800651c:	f7fe fb48 	bl	8004bb0 <GetNeoIntensityState>
 8006520:	4603      	mov	r3, r0
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fd00 	bl	8004f28 <UpdateIntensity>
		  Setting_Flag = 0;
 8006528:	4b3b      	ldr	r3, [pc, #236]	; (8006618 <main+0x1f0>)
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]

	  }
	  if(Vbat_Flag)
 800652e:	4b3b      	ldr	r3, [pc, #236]	; (800661c <main+0x1f4>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00e      	beq.n	8006554 <main+0x12c>
	  {
		  while(HAL_GPIO_ReadPin(VBat_Level_EXTI7_GPIO_Port, VBat_Level_EXTI7_Pin) == GPIO_PIN_SET)
 8006536:	e002      	b.n	800653e <main+0x116>
			{
			  HAL_Delay(1);
 8006538:	2001      	movs	r0, #1
 800653a:	f7fa faaf 	bl	8000a9c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(VBat_Level_EXTI7_GPIO_Port, VBat_Level_EXTI7_Pin) == GPIO_PIN_SET)
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006544:	f7fb fe46 	bl	80021d4 <HAL_GPIO_ReadPin>
 8006548:	4603      	mov	r3, r0
 800654a:	2b01      	cmp	r3, #1
 800654c:	d0f4      	beq.n	8006538 <main+0x110>
			}

		  SetNeoState(NEO_BATTERY);
 800654e:	200b      	movs	r0, #11
 8006550:	f7fe fb02 	bl	8004b58 <SetNeoState>
	  }
	  if(GetNeoState() == NEO_BATTERY && Vbat_Flag == 1)
 8006554:	f7fe fb10 	bl	8004b78 <GetNeoState>
 8006558:	4603      	mov	r3, r0
 800655a:	2b0b      	cmp	r3, #11
 800655c:	d111      	bne.n	8006582 <main+0x15a>
 800655e:	4b2f      	ldr	r3, [pc, #188]	; (800661c <main+0x1f4>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d10d      	bne.n	8006582 <main+0x15a>
	  {
		  BatteryMeasure_Init();
 8006566:	f7fd fddb 	bl	8004120 <BatteryMeasure_Init>

		  NeoBatteryLevelLight(Battery_GetLevel());
 800656a:	f7fd fe17 	bl	800419c <Battery_GetLevel>
 800656e:	4603      	mov	r3, r0
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe fd6b 	bl	800504c <NeoBatteryLevelLight>

		  DisableBatterySensePin();
 8006576:	f7fd fdc7 	bl	8004108 <DisableBatterySensePin>

		  Vbat_Flag = 0;
 800657a:	4b28      	ldr	r3, [pc, #160]	; (800661c <main+0x1f4>)
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	e038      	b.n	80065f4 <main+0x1cc>
	  }
	  else if(GetNeoState() == NEO_RAINBOWCOLD)
 8006582:	f7fe faf9 	bl	8004b78 <GetNeoState>
 8006586:	4603      	mov	r3, r0
 8006588:	2b08      	cmp	r3, #8
 800658a:	d117      	bne.n	80065bc <main+0x194>
	  {
		  if(rainbowCounter > 20 * GetNeoIntensityState())
 800658c:	f7fe fb10 	bl	8004bb0 <GetNeoIntensityState>
 8006590:	4603      	mov	r3, r0
 8006592:	461a      	mov	r2, r3
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	461a      	mov	r2, r3
 800659e:	4b20      	ldr	r3, [pc, #128]	; (8006620 <main+0x1f8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d204      	bcs.n	80065b0 <main+0x188>
		  {
			  UpdateRainbowCold();
 80065a6:	f7fe fe97 	bl	80052d8 <UpdateRainbowCold>
			  rainbowCounter = 0;
 80065aa:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <main+0x1f8>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
		  }

		  rainbowCounter++;
 80065b0:	4b1b      	ldr	r3, [pc, #108]	; (8006620 <main+0x1f8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3301      	adds	r3, #1
 80065b6:	4a1a      	ldr	r2, [pc, #104]	; (8006620 <main+0x1f8>)
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	e01b      	b.n	80065f4 <main+0x1cc>
	  }
	  else if(GetNeoState() == NEO_RAINBOWWARM)
 80065bc:	f7fe fadc 	bl	8004b78 <GetNeoState>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b09      	cmp	r3, #9
 80065c4:	d116      	bne.n	80065f4 <main+0x1cc>
	  {
		  if(rainbowCounter > 20 * GetNeoIntensityState())
 80065c6:	f7fe faf3 	bl	8004bb0 <GetNeoIntensityState>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	461a      	mov	r2, r3
 80065d8:	4b11      	ldr	r3, [pc, #68]	; (8006620 <main+0x1f8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d204      	bcs.n	80065ea <main+0x1c2>
		  {
			  UpdateRainbowWarm();
 80065e0:	f7fe fdac 	bl	800513c <UpdateRainbowWarm>
			  rainbowCounter = 0;
 80065e4:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <main+0x1f8>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]
		  }

		  rainbowCounter++;
 80065ea:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <main+0x1f8>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3301      	adds	r3, #1
 80065f0:	4a0b      	ldr	r2, [pc, #44]	; (8006620 <main+0x1f8>)
 80065f2:	6013      	str	r3, [r2, #0]
	  }

	  HAL_Delay(1);
 80065f4:	2001      	movs	r0, #1
 80065f6:	f7fa fa51 	bl	8000a9c <HAL_Delay>

	  HeartBeatToggle();
 80065fa:	f7ff fae3 	bl	8005bc4 <HeartBeatToggle>
	  if(checkCommando)
 80065fe:	e746      	b.n	800648e <main+0x66>
 8006600:	40004400 	.word	0x40004400
 8006604:	48000400 	.word	0x48000400
 8006608:	48000800 	.word	0x48000800
 800660c:	20000114 	.word	0x20000114
 8006610:	2000021c 	.word	0x2000021c
 8006614:	2000000a 	.word	0x2000000a
 8006618:	2000021d 	.word	0x2000021d
 800661c:	2000021e 	.word	0x2000021e
 8006620:	20000218 	.word	0x20000218

08006624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8006628:	2002      	movs	r0, #2
 800662a:	f7ff fea9 	bl	8006380 <LL_FLASH_SetLatency>

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 800662e:	f7ff febb 	bl	80063a8 <LL_FLASH_GetLatency>
 8006632:	4603      	mov	r3, r0
 8006634:	2b02      	cmp	r3, #2
 8006636:	d001      	beq.n	800663c <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8006638:	f000 f862 	bl	8006700 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800663c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006640:	f7ff fec0 	bl	80063c4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8006644:	f7ff fd04 	bl	8006050 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8006648:	bf00      	nop
 800664a:	f7ff fd11 	bl	8006070 <LL_RCC_MSI_IsReady>
 800664e:	4603      	mov	r3, r0
 8006650:	2b01      	cmp	r3, #1
 8006652:	d1fa      	bne.n	800664a <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_MSI_EnableRangeSelection();
 8006654:	f7ff fd1e 	bl	8006094 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8006658:	2060      	movs	r0, #96	; 0x60
 800665a:	f7ff fd2b 	bl	80060b4 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 800665e:	2000      	movs	r0, #0
 8006660:	f7ff fd3c 	bl	80060dc <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 20, LL_RCC_PLLR_DIV_2);
 8006664:	2300      	movs	r3, #0
 8006666:	2214      	movs	r2, #20
 8006668:	2100      	movs	r1, #0
 800666a:	2001      	movs	r0, #1
 800666c:	f7ff fdfe 	bl	800626c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8006670:	f7ff fe1c 	bl	80062ac <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8006674:	f7ff fdd6 	bl	8006224 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8006678:	bf00      	nop
 800667a:	f7ff fde3 	bl	8006244 <LL_RCC_PLL_IsReady>
 800667e:	4603      	mov	r3, r0
 8006680:	2b01      	cmp	r3, #1
 8006682:	d1fa      	bne.n	800667a <SystemClock_Config+0x56>
  {
    
  }
  LL_RCC_PLLSAI1_ConfigDomain_ADC(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 16, LL_RCC_PLLSAI1R_DIV_4);
 8006684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006688:	2210      	movs	r2, #16
 800668a:	2100      	movs	r1, #0
 800668c:	2001      	movs	r0, #1
 800668e:	f7ff fe41 	bl	8006314 <LL_RCC_PLLSAI1_ConfigDomain_ADC>
  LL_RCC_PLLSAI1_EnableDomain_ADC();
 8006692:	f7ff fe65 	bl	8006360 <LL_RCC_PLLSAI1_EnableDomain_ADC>
  LL_RCC_PLLSAI1_Enable();
 8006696:	f7ff fe19 	bl	80062cc <LL_RCC_PLLSAI1_Enable>

   /* Wait till PLLSAI1 is ready */
  while(LL_RCC_PLLSAI1_IsReady() != 1)
 800669a:	bf00      	nop
 800669c:	f7ff fe26 	bl	80062ec <LL_RCC_PLLSAI1_IsReady>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d1fa      	bne.n	800669c <SystemClock_Config+0x78>
  {
    
  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80066a6:	2003      	movs	r0, #3
 80066a8:	f7ff fd2e 	bl	8006108 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80066ac:	bf00      	nop
 80066ae:	f7ff fd3f 	bl	8006130 <LL_RCC_GetSysClkSource>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b0c      	cmp	r3, #12
 80066b6:	d1fa      	bne.n	80066ae <SystemClock_Config+0x8a>
  {
  
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80066b8:	2000      	movs	r0, #0
 80066ba:	f7ff fd47 	bl	800614c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80066be:	2000      	movs	r0, #0
 80066c0:	f7ff fd58 	bl	8006174 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80066c4:	2000      	movs	r0, #0
 80066c6:	f7ff fd69 	bl	800619c <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(40000000);
 80066ca:	480c      	ldr	r0, [pc, #48]	; (80066fc <SystemClock_Config+0xd8>)
 80066cc:	f7fd fd00 	bl	80040d0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80066d0:	2000      	movs	r0, #0
 80066d2:	f7fa f98b 	bl	80009ec <HAL_InitTick>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <SystemClock_Config+0xbc>
  {
    Error_Handler();  
 80066dc:	f000 f810 	bl	8006700 <Error_Handler>
  };
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 80066e0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80066e4:	f7ff fd6e 	bl	80061c4 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80066e8:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80066ec:	f7ff fd6a 	bl	80061c4 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLLSAI1);
 80066f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80066f4:	f7ff fd80 	bl	80061f8 <LL_RCC_SetADCClockSource>
}
 80066f8:	bf00      	nop
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	02625a00 	.word	0x02625a00

08006700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006704:	bf00      	nop
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
	...

08006710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006716:	4a0f      	ldr	r2, [pc, #60]	; (8006754 <HAL_MspInit+0x44>)
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <HAL_MspInit+0x44>)
 800671a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671c:	f043 0301 	orr.w	r3, r3, #1
 8006720:	6613      	str	r3, [r2, #96]	; 0x60
 8006722:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <HAL_MspInit+0x44>)
 8006724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	607b      	str	r3, [r7, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800672e:	4a09      	ldr	r2, [pc, #36]	; (8006754 <HAL_MspInit+0x44>)
 8006730:	4b08      	ldr	r3, [pc, #32]	; (8006754 <HAL_MspInit+0x44>)
 8006732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006738:	6593      	str	r3, [r2, #88]	; 0x58
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <HAL_MspInit+0x44>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000

08006758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800675c:	bf00      	nop
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006766:	b480      	push	{r7}
 8006768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800676a:	e7fe      	b.n	800676a <HardFault_Handler+0x4>

0800676c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006770:	e7fe      	b.n	8006770 <MemManage_Handler+0x4>

08006772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006772:	b480      	push	{r7}
 8006774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006776:	e7fe      	b.n	8006776 <BusFault_Handler+0x4>

08006778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800677c:	e7fe      	b.n	800677c <UsageFault_Handler+0x4>

0800677e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800677e:	b480      	push	{r7}
 8006780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006782:	bf00      	nop
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006790:	bf00      	nop
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800679a:	b480      	push	{r7}
 800679c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800679e:	bf00      	nop
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80067ac:	f7fa f958 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80067b0:	bf00      	nop
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80067b8:	2001      	movs	r0, #1
 80067ba:	f7fb fd55 	bl	8002268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80067be:	bf00      	nop
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80067c6:	2020      	movs	r0, #32
 80067c8:	f7fb fd4e 	bl	8002268 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80067cc:	2040      	movs	r0, #64	; 0x40
 80067ce:	f7fb fd4b 	bl	8002268 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80067d2:	2080      	movs	r0, #128	; 0x80
 80067d4:	f7fb fd48 	bl	8002268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80067d8:	bf00      	nop
 80067da:	bd80      	pop	{r7, pc}

080067dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_Callback();
 80067e0:	f7ff f970 	bl	8005ac4 <USART_Callback>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80067e4:	bf00      	nop
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BLE_EXTI5_Pin)
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	2b20      	cmp	r3, #32
 80067f6:	d10b      	bne.n	8006810 <HAL_GPIO_EXTI_Callback+0x28>
	{
		if(HAL_GPIO_ReadPin(BLE_EXTI5_GPIO_Port, BLE_EXTI5_Pin) == GPIO_PIN_SET)
 80067f8:	2120      	movs	r1, #32
 80067fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067fe:	f7fb fce9 	bl	80021d4 <HAL_GPIO_ReadPin>
 8006802:	4603      	mov	r3, r0
 8006804:	2b01      	cmp	r3, #1
 8006806:	d120      	bne.n	800684a <HAL_GPIO_EXTI_Callback+0x62>
		{
			//BLE
			BLE_Flag = 1;
 8006808:	4b12      	ldr	r3, [pc, #72]	; (8006854 <HAL_GPIO_EXTI_Callback+0x6c>)
 800680a:	2201      	movs	r2, #1
 800680c:	701a      	strb	r2, [r3, #0]
	else if(GPIO_Pin == VBat_Level_EXTI7_Pin && (HAL_GPIO_ReadPin(VBat_Level_EXTI7_GPIO_Port, VBat_Level_EXTI7_Pin) == GPIO_PIN_SET))
	{
		//Vbat check
		Vbat_Flag = 1;
	}
}
 800680e:	e01c      	b.n	800684a <HAL_GPIO_EXTI_Callback+0x62>
	else if(GPIO_Pin == Light_Setting_EXTI6_Pin && (HAL_GPIO_ReadPin(Light_Setting_EXTI6_GPIO_Port, Light_Setting_EXTI6_Pin) == GPIO_PIN_SET))
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	2b40      	cmp	r3, #64	; 0x40
 8006814:	d10b      	bne.n	800682e <HAL_GPIO_EXTI_Callback+0x46>
 8006816:	2140      	movs	r1, #64	; 0x40
 8006818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800681c:	f7fb fcda 	bl	80021d4 <HAL_GPIO_ReadPin>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d103      	bne.n	800682e <HAL_GPIO_EXTI_Callback+0x46>
		Setting_Flag = 1;
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <HAL_GPIO_EXTI_Callback+0x70>)
 8006828:	2201      	movs	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
}
 800682c:	e00d      	b.n	800684a <HAL_GPIO_EXTI_Callback+0x62>
	else if(GPIO_Pin == VBat_Level_EXTI7_Pin && (HAL_GPIO_ReadPin(VBat_Level_EXTI7_GPIO_Port, VBat_Level_EXTI7_Pin) == GPIO_PIN_SET))
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	2b80      	cmp	r3, #128	; 0x80
 8006832:	d10a      	bne.n	800684a <HAL_GPIO_EXTI_Callback+0x62>
 8006834:	2180      	movs	r1, #128	; 0x80
 8006836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800683a:	f7fb fccb 	bl	80021d4 <HAL_GPIO_ReadPin>
 800683e:	4603      	mov	r3, r0
 8006840:	2b01      	cmp	r3, #1
 8006842:	d102      	bne.n	800684a <HAL_GPIO_EXTI_Callback+0x62>
		Vbat_Flag = 1;
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <HAL_GPIO_EXTI_Callback+0x74>)
 8006846:	2201      	movs	r2, #1
 8006848:	701a      	strb	r2, [r3, #0]
}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	2000021c 	.word	0x2000021c
 8006858:	2000021d 	.word	0x2000021d
 800685c:	2000021e 	.word	0x2000021e

08006860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006864:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <SystemInit+0x64>)
 8006866:	4b17      	ldr	r3, [pc, #92]	; (80068c4 <SystemInit+0x64>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006874:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <SystemInit+0x68>)
 8006876:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <SystemInit+0x68>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006880:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <SystemInit+0x68>)
 8006882:	2200      	movs	r2, #0
 8006884:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006886:	4a10      	ldr	r2, [pc, #64]	; (80068c8 <SystemInit+0x68>)
 8006888:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <SystemInit+0x68>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006890:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006894:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006896:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <SystemInit+0x68>)
 8006898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800689c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800689e:	4a0a      	ldr	r2, [pc, #40]	; (80068c8 <SystemInit+0x68>)
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <SystemInit+0x68>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80068aa:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <SystemInit+0x68>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <SystemInit+0x64>)
 80068b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068b6:	609a      	str	r2, [r3, #8]
#endif
}
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	e000ed00 	.word	0xe000ed00
 80068c8:	40021000 	.word	0x40021000

080068cc <LL_DMA_SetDataTransferDirection>:
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80068dc:	4a0e      	ldr	r2, [pc, #56]	; (8006918 <LL_DMA_SetDataTransferDirection+0x4c>)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	4413      	add	r3, r2
 80068ea:	4619      	mov	r1, r3
 80068ec:	4a0a      	ldr	r2, [pc, #40]	; (8006918 <LL_DMA_SetDataTransferDirection+0x4c>)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4413      	add	r3, r2
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006900:	f023 0310 	bic.w	r3, r3, #16
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	4313      	orrs	r3, r2
 8006908:	600b      	str	r3, [r1, #0]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	0800751c 	.word	0x0800751c

0800691c <LL_DMA_SetMode>:
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800692c:	4a0d      	ldr	r2, [pc, #52]	; (8006964 <LL_DMA_SetMode+0x48>)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	4413      	add	r3, r2
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	4413      	add	r3, r2
 800693a:	4619      	mov	r1, r3
 800693c:	4a09      	ldr	r2, [pc, #36]	; (8006964 <LL_DMA_SetMode+0x48>)
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	4413      	add	r3, r2
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	4413      	add	r3, r2
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f023 0220 	bic.w	r2, r3, #32
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4313      	orrs	r3, r2
 8006954:	600b      	str	r3, [r1, #0]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	0800751c 	.word	0x0800751c

08006968 <LL_DMA_SetPeriphIncMode>:
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8006978:	4a0d      	ldr	r2, [pc, #52]	; (80069b0 <LL_DMA_SetPeriphIncMode+0x48>)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	4413      	add	r3, r2
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	4413      	add	r3, r2
 8006986:	4619      	mov	r1, r3
 8006988:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <LL_DMA_SetPeriphIncMode+0x48>)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	4413      	add	r3, r2
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	4413      	add	r3, r2
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4313      	orrs	r3, r2
 80069a0:	600b      	str	r3, [r1, #0]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	0800751c 	.word	0x0800751c

080069b4 <LL_DMA_SetMemoryIncMode>:
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80069c4:	4a0d      	ldr	r2, [pc, #52]	; (80069fc <LL_DMA_SetMemoryIncMode+0x48>)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4413      	add	r3, r2
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	4413      	add	r3, r2
 80069d2:	4619      	mov	r1, r3
 80069d4:	4a09      	ldr	r2, [pc, #36]	; (80069fc <LL_DMA_SetMemoryIncMode+0x48>)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4413      	add	r3, r2
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	4413      	add	r3, r2
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	600b      	str	r3, [r1, #0]
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	0800751c 	.word	0x0800751c

08006a00 <LL_DMA_SetPeriphSize>:
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 8006a10:	4a0d      	ldr	r2, [pc, #52]	; (8006a48 <LL_DMA_SetPeriphSize+0x48>)
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	4413      	add	r3, r2
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <LL_DMA_SetPeriphSize+0x48>)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4413      	add	r3, r2
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	600b      	str	r3, [r1, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	0800751c 	.word	0x0800751c

08006a4c <LL_DMA_SetMemorySize>:
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8006a5c:	4a0d      	ldr	r2, [pc, #52]	; (8006a94 <LL_DMA_SetMemorySize+0x48>)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	4413      	add	r3, r2
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	4413      	add	r3, r2
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <LL_DMA_SetMemorySize+0x48>)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4413      	add	r3, r2
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4413      	add	r3, r2
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	600b      	str	r3, [r1, #0]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	0800751c 	.word	0x0800751c

08006a98 <LL_DMA_SetChannelPriorityLevel>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8006aa8:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	4413      	add	r3, r2
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	600b      	str	r3, [r1, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	0800751c 	.word	0x0800751c

08006ae4 <LL_DMA_SetPeriphRequest>:
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	33a8      	adds	r3, #168	; 0xa8
 8006af4:	4618      	mov	r0, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	33a8      	adds	r3, #168	; 0xa8
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	210f      	movs	r1, #15
 8006b02:	fa01 f303 	lsl.w	r3, r1, r3
 8006b06:	43db      	mvns	r3, r3
 8006b08:	401a      	ands	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	210f      	movs	r1, #15
 8006b10:	fa01 f303 	lsl.w	r3, r1, r3
 8006b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	fa93 f3a3 	rbit	r3, r3
 8006b1c:	613b      	str	r3, [r7, #16]
  return result;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	fab3 f383 	clz	r3, r3
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	4619      	mov	r1, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	408b      	lsls	r3, r1
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	6003      	str	r3, [r0, #0]
}
 8006b30:	bf00      	nop
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <LL_AHB2_GRP1_EnableClock>:
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006b44:	4908      	ldr	r1, [pc, #32]	; (8006b68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006b46:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006b48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4013      	ands	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
}
 8006b5c:	bf00      	nop
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	40021000 	.word	0x40021000

08006b6c <LL_APB1_GRP1_EnableClock>:
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006b74:	4908      	ldr	r1, [pc, #32]	; (8006b98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006b76:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006b78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006b80:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006b82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4013      	ands	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
}
 8006b8c:	bf00      	nop
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	40021000 	.word	0x40021000

08006b9c <LL_TIM_DisableARRPreload>:
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	601a      	str	r2, [r3, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <LL_TIM_OC_DisableFast>:
{
 8006bbc:	b4b0      	push	{r4, r5, r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d028      	beq.n	8006c1e <LL_TIM_OC_DisableFast+0x62>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d023      	beq.n	8006c1a <LL_TIM_OC_DisableFast+0x5e>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	d01e      	beq.n	8006c16 <LL_TIM_OC_DisableFast+0x5a>
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d019      	beq.n	8006c12 <LL_TIM_OC_DisableFast+0x56>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be4:	d013      	beq.n	8006c0e <LL_TIM_OC_DisableFast+0x52>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bec:	d00d      	beq.n	8006c0a <LL_TIM_OC_DisableFast+0x4e>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf4:	d007      	beq.n	8006c06 <LL_TIM_OC_DisableFast+0x4a>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfc:	d101      	bne.n	8006c02 <LL_TIM_OC_DisableFast+0x46>
 8006bfe:	2307      	movs	r3, #7
 8006c00:	e00e      	b.n	8006c20 <LL_TIM_OC_DisableFast+0x64>
 8006c02:	2308      	movs	r3, #8
 8006c04:	e00c      	b.n	8006c20 <LL_TIM_OC_DisableFast+0x64>
 8006c06:	2306      	movs	r3, #6
 8006c08:	e00a      	b.n	8006c20 <LL_TIM_OC_DisableFast+0x64>
 8006c0a:	2305      	movs	r3, #5
 8006c0c:	e008      	b.n	8006c20 <LL_TIM_OC_DisableFast+0x64>
 8006c0e:	2304      	movs	r3, #4
 8006c10:	e006      	b.n	8006c20 <LL_TIM_OC_DisableFast+0x64>
 8006c12:	2303      	movs	r3, #3
 8006c14:	e004      	b.n	8006c20 <LL_TIM_OC_DisableFast+0x64>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e002      	b.n	8006c20 <LL_TIM_OC_DisableFast+0x64>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <LL_TIM_OC_DisableFast+0x64>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3318      	adds	r3, #24
 8006c26:	461a      	mov	r2, r3
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <LL_TIM_OC_DisableFast+0x94>)
 8006c2c:	5c5b      	ldrb	r3, [r3, r1]
 8006c2e:	4413      	add	r3, r2
 8006c30:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8006c32:	6822      	ldr	r2, [r4, #0]
 8006c34:	4629      	mov	r1, r5
 8006c36:	4b07      	ldr	r3, [pc, #28]	; (8006c54 <LL_TIM_OC_DisableFast+0x98>)
 8006c38:	5c5b      	ldrb	r3, [r3, r1]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	2304      	movs	r3, #4
 8006c3e:	408b      	lsls	r3, r1
 8006c40:	43db      	mvns	r3, r3
 8006c42:	4013      	ands	r3, r2
 8006c44:	6023      	str	r3, [r4, #0]
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bcb0      	pop	{r4, r5, r7}
 8006c4e:	4770      	bx	lr
 8006c50:	08007524 	.word	0x08007524
 8006c54:	08007530 	.word	0x08007530

08006c58 <LL_TIM_OC_EnablePreload>:
{
 8006c58:	b4b0      	push	{r4, r5, r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d028      	beq.n	8006cba <LL_TIM_OC_EnablePreload+0x62>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d023      	beq.n	8006cb6 <LL_TIM_OC_EnablePreload+0x5e>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	d01e      	beq.n	8006cb2 <LL_TIM_OC_EnablePreload+0x5a>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d019      	beq.n	8006cae <LL_TIM_OC_EnablePreload+0x56>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c80:	d013      	beq.n	8006caa <LL_TIM_OC_EnablePreload+0x52>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c88:	d00d      	beq.n	8006ca6 <LL_TIM_OC_EnablePreload+0x4e>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c90:	d007      	beq.n	8006ca2 <LL_TIM_OC_EnablePreload+0x4a>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c98:	d101      	bne.n	8006c9e <LL_TIM_OC_EnablePreload+0x46>
 8006c9a:	2307      	movs	r3, #7
 8006c9c:	e00e      	b.n	8006cbc <LL_TIM_OC_EnablePreload+0x64>
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	e00c      	b.n	8006cbc <LL_TIM_OC_EnablePreload+0x64>
 8006ca2:	2306      	movs	r3, #6
 8006ca4:	e00a      	b.n	8006cbc <LL_TIM_OC_EnablePreload+0x64>
 8006ca6:	2305      	movs	r3, #5
 8006ca8:	e008      	b.n	8006cbc <LL_TIM_OC_EnablePreload+0x64>
 8006caa:	2304      	movs	r3, #4
 8006cac:	e006      	b.n	8006cbc <LL_TIM_OC_EnablePreload+0x64>
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e004      	b.n	8006cbc <LL_TIM_OC_EnablePreload+0x64>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e002      	b.n	8006cbc <LL_TIM_OC_EnablePreload+0x64>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <LL_TIM_OC_EnablePreload+0x64>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	3318      	adds	r3, #24
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <LL_TIM_OC_EnablePreload+0x94>)
 8006cc8:	5c5b      	ldrb	r3, [r3, r1]
 8006cca:	4413      	add	r3, r2
 8006ccc:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006cce:	6822      	ldr	r2, [r4, #0]
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <LL_TIM_OC_EnablePreload+0x98>)
 8006cd4:	5c5b      	ldrb	r3, [r3, r1]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	2308      	movs	r3, #8
 8006cda:	408b      	lsls	r3, r1
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	6023      	str	r3, [r4, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bcb0      	pop	{r4, r5, r7}
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	08007524 	.word	0x08007524
 8006cf0:	08007530 	.word	0x08007530

08006cf4 <LL_TIM_DisableExternalClock>:
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	609a      	str	r2, [r3, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <LL_TIM_SetTriggerOutput>:
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	605a      	str	r2, [r3, #4]
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <LL_TIM_DisableMasterSlaveMode>:
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	609a      	str	r2, [r3, #8]
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <LL_TIM_ConfigETR>:
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f423 423f 	bic.w	r2, r3, #48896	; 0xbf00
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4319      	orrs	r1, r3
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	609a      	str	r2, [r3, #8]
}
 8006d80:	bf00      	nop
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <LL_TIM_SetOCRefClearInputSource>:
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f023 0208 	bic.w	r2, r3, #8
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	609a      	str	r2, [r3, #8]
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
	...

08006db4 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b094      	sub	sp, #80	; 0x50
 8006db8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8006dba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	605a      	str	r2, [r3, #4]
 8006dc4:	609a      	str	r2, [r3, #8]
 8006dc6:	60da      	str	r2, [r3, #12]
 8006dc8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8006dca:	f107 031c 	add.w	r3, r7, #28
 8006dce:	2220      	movs	r2, #32
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fa9a 	bl	800730c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dd8:	1d3b      	adds	r3, r7, #4
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	605a      	str	r2, [r3, #4]
 8006de0:	609a      	str	r2, [r3, #8]
 8006de2:	60da      	str	r2, [r3, #12]
 8006de4:	611a      	str	r2, [r3, #16]
 8006de6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8006de8:	2001      	movs	r0, #1
 8006dea:	f7ff febf 	bl	8006b6c <LL_APB1_GRP1_EnableClock>

  /* TIM2 DMA Init */
  
  /* TIM2_CH1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_5, LL_DMA_REQUEST_4);
 8006dee:	2204      	movs	r2, #4
 8006df0:	2104      	movs	r1, #4
 8006df2:	4845      	ldr	r0, [pc, #276]	; (8006f08 <MX_TIM2_Init+0x154>)
 8006df4:	f7ff fe76 	bl	8006ae4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2104      	movs	r1, #4
 8006dfc:	4842      	ldr	r0, [pc, #264]	; (8006f08 <MX_TIM2_Init+0x154>)
 8006dfe:	f7ff fd65 	bl	80068cc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 8006e02:	2200      	movs	r2, #0
 8006e04:	2104      	movs	r1, #4
 8006e06:	4840      	ldr	r0, [pc, #256]	; (8006f08 <MX_TIM2_Init+0x154>)
 8006e08:	f7ff fe46 	bl	8006a98 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2104      	movs	r1, #4
 8006e10:	483d      	ldr	r0, [pc, #244]	; (8006f08 <MX_TIM2_Init+0x154>)
 8006e12:	f7ff fd83 	bl	800691c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8006e16:	2200      	movs	r2, #0
 8006e18:	2104      	movs	r1, #4
 8006e1a:	483b      	ldr	r0, [pc, #236]	; (8006f08 <MX_TIM2_Init+0x154>)
 8006e1c:	f7ff fda4 	bl	8006968 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8006e20:	2280      	movs	r2, #128	; 0x80
 8006e22:	2104      	movs	r1, #4
 8006e24:	4838      	ldr	r0, [pc, #224]	; (8006f08 <MX_TIM2_Init+0x154>)
 8006e26:	f7ff fdc5 	bl	80069b4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_WORD);
 8006e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e2e:	2104      	movs	r1, #4
 8006e30:	4835      	ldr	r0, [pc, #212]	; (8006f08 <MX_TIM2_Init+0x154>)
 8006e32:	f7ff fde5 	bl	8006a00 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_WORD);
 8006e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e3a:	2104      	movs	r1, #4
 8006e3c:	4832      	ldr	r0, [pc, #200]	; (8006f08 <MX_TIM2_Init+0x154>)
 8006e3e:	f7ff fe05 	bl	8006a4c <LL_DMA_SetMemorySize>

  TIM_InitStruct.Prescaler = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006e46:	2300      	movs	r3, #0
 8006e48:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8006e52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e56:	4619      	mov	r1, r3
 8006e58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e5c:	f7fc fd32 	bl	80038c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8006e60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e64:	f7ff fe9a 	bl	8006b9c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8006e68:	2101      	movs	r1, #1
 8006e6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e6e:	f7ff fef3 	bl	8006c58 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8006e72:	2360      	movs	r3, #96	; 0x60
 8006e74:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8006e82:	2300      	movs	r3, #0
 8006e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8006e86:	f107 031c 	add.w	r3, r7, #28
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e92:	f7fc fd7f 	bl	8003994 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8006e96:	2101      	movs	r1, #1
 8006e98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e9c:	f7ff fe8e 	bl	8006bbc <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM2, LL_TIM_OCREF_CLR_INT_NC);
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006ea6:	f7ff ff71 	bl	8006d8c <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM2);
 8006eaa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006eae:	f7ff ff21 	bl	8006cf4 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM2, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006ebc:	f7ff ff4d 	bl	8006d5a <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006ec6:	f7ff ff25 	bl	8006d14 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8006eca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006ece:	f7ff ff34 	bl	8006d3a <LL_TIM_DisableMasterSlaveMode>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006ed2:	2001      	movs	r0, #1
 8006ed4:	f7ff fe32 	bl	8006b3c <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PA15 (JTDI)     ------> TIM2_CH1 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8006ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006edc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006eea:	2300      	movs	r3, #0
 8006eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ef2:	1d3b      	adds	r3, r7, #4
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006efa:	f7fc f876 	bl	8002fea <LL_GPIO_Init>

}
 8006efe:	bf00      	nop
 8006f00:	3750      	adds	r7, #80	; 0x50
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40020000 	.word	0x40020000

08006f0c <__NVIC_GetPriorityGrouping>:
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <__NVIC_GetPriorityGrouping+0x18>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	0a1b      	lsrs	r3, r3, #8
 8006f16:	f003 0307 	and.w	r3, r3, #7
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	e000ed00 	.word	0xe000ed00

08006f28 <__NVIC_EnableIRQ>:
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	db0b      	blt.n	8006f52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f3a:	4909      	ldr	r1, [pc, #36]	; (8006f60 <__NVIC_EnableIRQ+0x38>)
 8006f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	79fa      	ldrb	r2, [r7, #7]
 8006f44:	f002 021f 	and.w	r2, r2, #31
 8006f48:	2001      	movs	r0, #1
 8006f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8006f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	e000e100 	.word	0xe000e100

08006f64 <__NVIC_SetPriority>:
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	6039      	str	r1, [r7, #0]
 8006f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	db0a      	blt.n	8006f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f78:	490d      	ldr	r1, [pc, #52]	; (8006fb0 <__NVIC_SetPriority+0x4c>)
 8006f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	0112      	lsls	r2, r2, #4
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	440b      	add	r3, r1
 8006f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f8c:	e00a      	b.n	8006fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f8e:	4909      	ldr	r1, [pc, #36]	; (8006fb4 <__NVIC_SetPriority+0x50>)
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	3b04      	subs	r3, #4
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	0112      	lsls	r2, r2, #4
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	761a      	strb	r2, [r3, #24]
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	e000e100 	.word	0xe000e100
 8006fb4:	e000ed00 	.word	0xe000ed00

08006fb8 <NVIC_EncodePriority>:
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b089      	sub	sp, #36	; 0x24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f1c3 0307 	rsb	r3, r3, #7
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	bf28      	it	cs
 8006fd6:	2304      	movcs	r3, #4
 8006fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	2b06      	cmp	r3, #6
 8006fe0:	d902      	bls.n	8006fe8 <NVIC_EncodePriority+0x30>
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	3b03      	subs	r3, #3
 8006fe6:	e000      	b.n	8006fea <NVIC_EncodePriority+0x32>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fec:	2201      	movs	r2, #1
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff4:	1e5a      	subs	r2, r3, #1
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	401a      	ands	r2, r3
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ffe:	2101      	movs	r1, #1
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	fa01 f303 	lsl.w	r3, r1, r3
 8007006:	1e59      	subs	r1, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800700c:	4313      	orrs	r3, r2
}
 800700e:	4618      	mov	r0, r3
 8007010:	3724      	adds	r7, #36	; 0x24
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
	...

0800701c <LL_AHB2_GRP1_EnableClock>:
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007024:	4908      	ldr	r1, [pc, #32]	; (8007048 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007026:	4b08      	ldr	r3, [pc, #32]	; (8007048 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4313      	orrs	r3, r2
 800702e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4013      	ands	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800703a:	68fb      	ldr	r3, [r7, #12]
}
 800703c:	bf00      	nop
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	40021000 	.word	0x40021000

0800704c <LL_APB1_GRP1_EnableClock>:
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007054:	4908      	ldr	r1, [pc, #32]	; (8007078 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007056:	4b08      	ldr	r3, [pc, #32]	; (8007078 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4313      	orrs	r3, r2
 800705e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007060:	4b05      	ldr	r3, [pc, #20]	; (8007078 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007062:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4013      	ands	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800706a:	68fb      	ldr	r3, [r7, #12]
}
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	40021000 	.word	0x40021000

0800707c <LL_USART_Enable>:
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f043 0201 	orr.w	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	601a      	str	r2, [r3, #0]
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <LL_USART_ConfigAsyncMode>:
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	609a      	str	r2, [r3, #8]
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80070cc:	4b14      	ldr	r3, [pc, #80]	; (8007120 <MX_USART1_UART_Init+0x58>)
 80070ce:	4a15      	ldr	r2, [pc, #84]	; (8007124 <MX_USART1_UART_Init+0x5c>)
 80070d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80070d2:	4b13      	ldr	r3, [pc, #76]	; (8007120 <MX_USART1_UART_Init+0x58>)
 80070d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80070da:	4b11      	ldr	r3, [pc, #68]	; (8007120 <MX_USART1_UART_Init+0x58>)
 80070dc:	2200      	movs	r2, #0
 80070de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80070e0:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <MX_USART1_UART_Init+0x58>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80070e6:	4b0e      	ldr	r3, [pc, #56]	; (8007120 <MX_USART1_UART_Init+0x58>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80070ec:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <MX_USART1_UART_Init+0x58>)
 80070ee:	220c      	movs	r2, #12
 80070f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80070f2:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <MX_USART1_UART_Init+0x58>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80070f8:	4b09      	ldr	r3, [pc, #36]	; (8007120 <MX_USART1_UART_Init+0x58>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80070fe:	4b08      	ldr	r3, [pc, #32]	; (8007120 <MX_USART1_UART_Init+0x58>)
 8007100:	2200      	movs	r2, #0
 8007102:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <MX_USART1_UART_Init+0x58>)
 8007106:	2200      	movs	r2, #0
 8007108:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800710a:	4805      	ldr	r0, [pc, #20]	; (8007120 <MX_USART1_UART_Init+0x58>)
 800710c:	f7fb f986 	bl	800241c <HAL_UART_Init>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8007116:	f7ff faf3 	bl	8006700 <Error_Handler>
  }

}
 800711a:	bf00      	nop
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	200002ac 	.word	0x200002ac
 8007124:	40013800 	.word	0x40013800

08007128 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08e      	sub	sp, #56	; 0x38
 800712c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800712e:	f107 031c 	add.w	r3, r7, #28
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	605a      	str	r2, [r3, #4]
 8007138:	609a      	str	r2, [r3, #8]
 800713a:	60da      	str	r2, [r3, #12]
 800713c:	611a      	str	r2, [r3, #16]
 800713e:	615a      	str	r2, [r3, #20]
 8007140:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007142:	1d3b      	adds	r3, r7, #4
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	605a      	str	r2, [r3, #4]
 800714a:	609a      	str	r2, [r3, #8]
 800714c:	60da      	str	r2, [r3, #12]
 800714e:	611a      	str	r2, [r3, #16]
 8007150:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8007152:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007156:	f7ff ff79 	bl	800704c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800715a:	2001      	movs	r0, #1
 800715c:	f7ff ff5e 	bl	800701c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8007160:	230c      	movs	r3, #12
 8007162:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007164:	2302      	movs	r3, #2
 8007166:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007168:	2303      	movs	r3, #3
 800716a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800716c:	2300      	movs	r3, #0
 800716e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007170:	2300      	movs	r3, #0
 8007172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007174:	2307      	movs	r3, #7
 8007176:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007178:	1d3b      	adds	r3, r7, #4
 800717a:	4619      	mov	r1, r3
 800717c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007180:	f7fb ff33 	bl	8002fea <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007184:	f7ff fec2 	bl	8006f0c <__NVIC_GetPriorityGrouping>
 8007188:	4603      	mov	r3, r0
 800718a:	2200      	movs	r2, #0
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f7ff ff12 	bl	8006fb8 <NVIC_EncodePriority>
 8007194:	4603      	mov	r3, r0
 8007196:	4619      	mov	r1, r3
 8007198:	2026      	movs	r0, #38	; 0x26
 800719a:	f7ff fee3 	bl	8006f64 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800719e:	2026      	movs	r0, #38	; 0x26
 80071a0:	f7ff fec2 	bl	8006f28 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 80071a4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80071a8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80071aa:	2300      	movs	r3, #0
 80071ac:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80071ae:	2300      	movs	r3, #0
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80071b2:	2300      	movs	r3, #0
 80071b4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80071b6:	230c      	movs	r3, #12
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80071ba:	2300      	movs	r3, #0
 80071bc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80071be:	2300      	movs	r3, #0
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80071c2:	f107 031c 	add.w	r3, r7, #28
 80071c6:	4619      	mov	r1, r3
 80071c8:	4806      	ldr	r0, [pc, #24]	; (80071e4 <MX_USART2_UART_Init+0xbc>)
 80071ca:	f7fc ff11 	bl	8003ff0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80071ce:	4805      	ldr	r0, [pc, #20]	; (80071e4 <MX_USART2_UART_Init+0xbc>)
 80071d0:	f7ff ff64 	bl	800709c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80071d4:	4803      	ldr	r0, [pc, #12]	; (80071e4 <MX_USART2_UART_Init+0xbc>)
 80071d6:	f7ff ff51 	bl	800707c <LL_USART_Enable>

}
 80071da:	bf00      	nop
 80071dc:	3738      	adds	r7, #56	; 0x38
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40004400 	.word	0x40004400

080071e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	; 0x28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f0:	f107 0314 	add.w	r3, r7, #20
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	605a      	str	r2, [r3, #4]
 80071fa:	609a      	str	r2, [r3, #8]
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a18      	ldr	r2, [pc, #96]	; (8007268 <HAL_UART_MspInit+0x80>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d129      	bne.n	800725e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800720a:	4a18      	ldr	r2, [pc, #96]	; (800726c <HAL_UART_MspInit+0x84>)
 800720c:	4b17      	ldr	r3, [pc, #92]	; (800726c <HAL_UART_MspInit+0x84>)
 800720e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007214:	6613      	str	r3, [r2, #96]	; 0x60
 8007216:	4b15      	ldr	r3, [pc, #84]	; (800726c <HAL_UART_MspInit+0x84>)
 8007218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800721e:	613b      	str	r3, [r7, #16]
 8007220:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007222:	4a12      	ldr	r2, [pc, #72]	; (800726c <HAL_UART_MspInit+0x84>)
 8007224:	4b11      	ldr	r3, [pc, #68]	; (800726c <HAL_UART_MspInit+0x84>)
 8007226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800722e:	4b0f      	ldr	r3, [pc, #60]	; (800726c <HAL_UART_MspInit+0x84>)
 8007230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = PC_TX_Pin|PC_RX_Pin;
 800723a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800723e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007240:	2302      	movs	r3, #2
 8007242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007244:	2300      	movs	r3, #0
 8007246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007248:	2303      	movs	r3, #3
 800724a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800724c:	2307      	movs	r3, #7
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007250:	f107 0314 	add.w	r3, r7, #20
 8007254:	4619      	mov	r1, r3
 8007256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800725a:	f7fa fe41 	bl	8001ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800725e:	bf00      	nop
 8007260:	3728      	adds	r7, #40	; 0x28
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	40013800 	.word	0x40013800
 800726c:	40021000 	.word	0x40021000

08007270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80072a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007274:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007276:	e003      	b.n	8007280 <LoopCopyDataInit>

08007278 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007278:	4b0c      	ldr	r3, [pc, #48]	; (80072ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800727a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800727c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800727e:	3104      	adds	r1, #4

08007280 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007280:	480b      	ldr	r0, [pc, #44]	; (80072b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007282:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007284:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007286:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007288:	d3f6      	bcc.n	8007278 <CopyDataInit>
	ldr	r2, =_sbss
 800728a:	4a0b      	ldr	r2, [pc, #44]	; (80072b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800728c:	e002      	b.n	8007294 <LoopFillZerobss>

0800728e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800728e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007290:	f842 3b04 	str.w	r3, [r2], #4

08007294 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007294:	4b09      	ldr	r3, [pc, #36]	; (80072bc <LoopForever+0x16>)
	cmp	r2, r3
 8007296:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007298:	d3f9      	bcc.n	800728e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800729a:	f7ff fae1 	bl	8006860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800729e:	f000 f811 	bl	80072c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80072a2:	f7ff f8c1 	bl	8006428 <main>

080072a6 <LoopForever>:

LoopForever:
    b LoopForever
 80072a6:	e7fe      	b.n	80072a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80072a8:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 80072ac:	0800754c 	.word	0x0800754c
	ldr	r0, =_sdata
 80072b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80072b4:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80072b8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80072bc:	2000032c 	.word	0x2000032c

080072c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80072c0:	e7fe      	b.n	80072c0 <ADC1_IRQHandler>
	...

080072c4 <__libc_init_array>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	4e0d      	ldr	r6, [pc, #52]	; (80072fc <__libc_init_array+0x38>)
 80072c8:	4c0d      	ldr	r4, [pc, #52]	; (8007300 <__libc_init_array+0x3c>)
 80072ca:	1ba4      	subs	r4, r4, r6
 80072cc:	10a4      	asrs	r4, r4, #2
 80072ce:	2500      	movs	r5, #0
 80072d0:	42a5      	cmp	r5, r4
 80072d2:	d109      	bne.n	80072e8 <__libc_init_array+0x24>
 80072d4:	4e0b      	ldr	r6, [pc, #44]	; (8007304 <__libc_init_array+0x40>)
 80072d6:	4c0c      	ldr	r4, [pc, #48]	; (8007308 <__libc_init_array+0x44>)
 80072d8:	f000 f8a6 	bl	8007428 <_init>
 80072dc:	1ba4      	subs	r4, r4, r6
 80072de:	10a4      	asrs	r4, r4, #2
 80072e0:	2500      	movs	r5, #0
 80072e2:	42a5      	cmp	r5, r4
 80072e4:	d105      	bne.n	80072f2 <__libc_init_array+0x2e>
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072ec:	4798      	blx	r3
 80072ee:	3501      	adds	r5, #1
 80072f0:	e7ee      	b.n	80072d0 <__libc_init_array+0xc>
 80072f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072f6:	4798      	blx	r3
 80072f8:	3501      	adds	r5, #1
 80072fa:	e7f2      	b.n	80072e2 <__libc_init_array+0x1e>
 80072fc:	08007544 	.word	0x08007544
 8007300:	08007544 	.word	0x08007544
 8007304:	08007544 	.word	0x08007544
 8007308:	08007548 	.word	0x08007548

0800730c <memset>:
 800730c:	4402      	add	r2, r0
 800730e:	4603      	mov	r3, r0
 8007310:	4293      	cmp	r3, r2
 8007312:	d100      	bne.n	8007316 <memset+0xa>
 8007314:	4770      	bx	lr
 8007316:	f803 1b01 	strb.w	r1, [r3], #1
 800731a:	e7f9      	b.n	8007310 <memset+0x4>
 800731c:	0000      	movs	r0, r0
	...

08007320 <floor>:
 8007320:	ec51 0b10 	vmov	r0, r1, d0
 8007324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007328:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800732c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007330:	2e13      	cmp	r6, #19
 8007332:	ee10 8a10 	vmov	r8, s0
 8007336:	460c      	mov	r4, r1
 8007338:	ee10 5a10 	vmov	r5, s0
 800733c:	dc35      	bgt.n	80073aa <floor+0x8a>
 800733e:	2e00      	cmp	r6, #0
 8007340:	da17      	bge.n	8007372 <floor+0x52>
 8007342:	a335      	add	r3, pc, #212	; (adr r3, 8007418 <floor+0xf8>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f7f8 ff56 	bl	80001f8 <__adddf3>
 800734c:	2200      	movs	r2, #0
 800734e:	2300      	movs	r3, #0
 8007350:	f7f9 f982 	bl	8000658 <__aeabi_dcmpgt>
 8007354:	b150      	cbz	r0, 800736c <floor+0x4c>
 8007356:	2c00      	cmp	r4, #0
 8007358:	da5a      	bge.n	8007410 <floor+0xf0>
 800735a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800735e:	ea53 0308 	orrs.w	r3, r3, r8
 8007362:	4b2f      	ldr	r3, [pc, #188]	; (8007420 <floor+0x100>)
 8007364:	f04f 0500 	mov.w	r5, #0
 8007368:	bf18      	it	ne
 800736a:	461c      	movne	r4, r3
 800736c:	4621      	mov	r1, r4
 800736e:	4628      	mov	r0, r5
 8007370:	e025      	b.n	80073be <floor+0x9e>
 8007372:	4f2c      	ldr	r7, [pc, #176]	; (8007424 <floor+0x104>)
 8007374:	4137      	asrs	r7, r6
 8007376:	ea01 0307 	and.w	r3, r1, r7
 800737a:	4303      	orrs	r3, r0
 800737c:	d01f      	beq.n	80073be <floor+0x9e>
 800737e:	a326      	add	r3, pc, #152	; (adr r3, 8007418 <floor+0xf8>)
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	f7f8 ff38 	bl	80001f8 <__adddf3>
 8007388:	2200      	movs	r2, #0
 800738a:	2300      	movs	r3, #0
 800738c:	f7f9 f964 	bl	8000658 <__aeabi_dcmpgt>
 8007390:	2800      	cmp	r0, #0
 8007392:	d0eb      	beq.n	800736c <floor+0x4c>
 8007394:	2c00      	cmp	r4, #0
 8007396:	bfbe      	ittt	lt
 8007398:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800739c:	fa43 f606 	asrlt.w	r6, r3, r6
 80073a0:	19a4      	addlt	r4, r4, r6
 80073a2:	ea24 0407 	bic.w	r4, r4, r7
 80073a6:	2500      	movs	r5, #0
 80073a8:	e7e0      	b.n	800736c <floor+0x4c>
 80073aa:	2e33      	cmp	r6, #51	; 0x33
 80073ac:	dd0b      	ble.n	80073c6 <floor+0xa6>
 80073ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80073b2:	d104      	bne.n	80073be <floor+0x9e>
 80073b4:	ee10 2a10 	vmov	r2, s0
 80073b8:	460b      	mov	r3, r1
 80073ba:	f7f8 ff1d 	bl	80001f8 <__adddf3>
 80073be:	ec41 0b10 	vmov	d0, r0, r1
 80073c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80073ca:	f04f 33ff 	mov.w	r3, #4294967295
 80073ce:	fa23 f707 	lsr.w	r7, r3, r7
 80073d2:	4238      	tst	r0, r7
 80073d4:	d0f3      	beq.n	80073be <floor+0x9e>
 80073d6:	a310      	add	r3, pc, #64	; (adr r3, 8007418 <floor+0xf8>)
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f7f8 ff0c 	bl	80001f8 <__adddf3>
 80073e0:	2200      	movs	r2, #0
 80073e2:	2300      	movs	r3, #0
 80073e4:	f7f9 f938 	bl	8000658 <__aeabi_dcmpgt>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d0bf      	beq.n	800736c <floor+0x4c>
 80073ec:	2c00      	cmp	r4, #0
 80073ee:	da02      	bge.n	80073f6 <floor+0xd6>
 80073f0:	2e14      	cmp	r6, #20
 80073f2:	d103      	bne.n	80073fc <floor+0xdc>
 80073f4:	3401      	adds	r4, #1
 80073f6:	ea25 0507 	bic.w	r5, r5, r7
 80073fa:	e7b7      	b.n	800736c <floor+0x4c>
 80073fc:	2301      	movs	r3, #1
 80073fe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007402:	fa03 f606 	lsl.w	r6, r3, r6
 8007406:	4435      	add	r5, r6
 8007408:	45a8      	cmp	r8, r5
 800740a:	bf88      	it	hi
 800740c:	18e4      	addhi	r4, r4, r3
 800740e:	e7f2      	b.n	80073f6 <floor+0xd6>
 8007410:	2500      	movs	r5, #0
 8007412:	462c      	mov	r4, r5
 8007414:	e7aa      	b.n	800736c <floor+0x4c>
 8007416:	bf00      	nop
 8007418:	8800759c 	.word	0x8800759c
 800741c:	7e37e43c 	.word	0x7e37e43c
 8007420:	bff00000 	.word	0xbff00000
 8007424:	000fffff 	.word	0x000fffff

08007428 <_init>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr

08007434 <_fini>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	bf00      	nop
 8007438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743a:	bc08      	pop	{r3}
 800743c:	469e      	mov	lr, r3
 800743e:	4770      	bx	lr
