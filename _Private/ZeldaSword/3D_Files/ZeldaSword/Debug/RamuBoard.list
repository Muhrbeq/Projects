
RamuBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b84  08002b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08002b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005f48  20000074  08002c00  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20005fbc  08002c00  00025fbc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018dae  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034da  00000000  00000000  00038e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008261  00000000  00000000  0003c32c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cb0  00000000  00000000  00044590  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f58  00000000  00000000  00045240  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007489  00000000  00000000  00046198  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005b56  00000000  00000000  0004d621  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00053177  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000297c  00000000  00000000  000531f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002a7c 	.word	0x08002a7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08002a7c 	.word	0x08002a7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000280:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <HAL_InitTick+0x40>)
{
 8000284:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	b908      	cbnz	r0, 800028e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800028a:	2001      	movs	r0, #1
 800028c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800028e:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <HAL_InitTick+0x44>)
 8000290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000294:	fbb3 f3f0 	udiv	r3, r3, r0
 8000298:	6810      	ldr	r0, [r2, #0]
 800029a:	fbb0 f0f3 	udiv	r0, r0, r3
 800029e:	f000 f891 	bl	80003c4 <HAL_SYSTICK_Config>
 80002a2:	4604      	mov	r4, r0
 80002a4:	2800      	cmp	r0, #0
 80002a6:	d1f0      	bne.n	800028a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002a8:	2d0f      	cmp	r5, #15
 80002aa:	d8ee      	bhi.n	800028a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002ac:	4602      	mov	r2, r0
 80002ae:	4629      	mov	r1, r5
 80002b0:	f04f 30ff 	mov.w	r0, #4294967295
 80002b4:	f000 f852 	bl	800035c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HAL_InitTick+0x48>)
 80002ba:	4620      	mov	r0, r4
 80002bc:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80002be:	bd38      	pop	{r3, r4, r5, pc}
 80002c0:	20000000 	.word	0x20000000
 80002c4:	2000000c 	.word	0x2000000c
 80002c8:	20000004 	.word	0x20000004

080002cc <HAL_Init>:
{
 80002cc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002ce:	2003      	movs	r0, #3
 80002d0:	f000 f832 	bl	8000338 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80002d4:	2000      	movs	r0, #0
 80002d6:	f7ff ffd3 	bl	8000280 <HAL_InitTick>
 80002da:	4604      	mov	r4, r0
 80002dc:	b918      	cbnz	r0, 80002e6 <HAL_Init+0x1a>
    HAL_MspInit();
 80002de:	f001 fbd7 	bl	8001a90 <HAL_MspInit>
}
 80002e2:	4620      	mov	r0, r4
 80002e4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80002e6:	2401      	movs	r4, #1
 80002e8:	e7fb      	b.n	80002e2 <HAL_Init+0x16>
	...

080002ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002ec:	4a03      	ldr	r2, [pc, #12]	; (80002fc <HAL_IncTick+0x10>)
 80002ee:	4904      	ldr	r1, [pc, #16]	; (8000300 <HAL_IncTick+0x14>)
 80002f0:	6813      	ldr	r3, [r2, #0]
 80002f2:	6809      	ldr	r1, [r1, #0]
 80002f4:	440b      	add	r3, r1
 80002f6:	6013      	str	r3, [r2, #0]
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	200000a0 	.word	0x200000a0
 8000300:	20000000 	.word	0x20000000

08000304 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000304:	4b01      	ldr	r3, [pc, #4]	; (800030c <HAL_GetTick+0x8>)
 8000306:	6818      	ldr	r0, [r3, #0]
}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	200000a0 	.word	0x200000a0

08000310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000310:	b538      	push	{r3, r4, r5, lr}
 8000312:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000314:	f7ff fff6 	bl	8000304 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000318:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800031a:	bf1c      	itt	ne
 800031c:	4b05      	ldrne	r3, [pc, #20]	; (8000334 <HAL_Delay+0x24>)
 800031e:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000320:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000322:	bf18      	it	ne
 8000324:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000326:	f7ff ffed 	bl	8000304 <HAL_GetTick>
 800032a:	1b40      	subs	r0, r0, r5
 800032c:	4284      	cmp	r4, r0
 800032e:	d8fa      	bhi.n	8000326 <HAL_Delay+0x16>
  {
  }
}
 8000330:	bd38      	pop	{r3, r4, r5, pc}
 8000332:	bf00      	nop
 8000334:	20000000 	.word	0x20000000

08000338 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800033a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800033c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000340:	041b      	lsls	r3, r3, #16
 8000342:	0c1b      	lsrs	r3, r3, #16
 8000344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000348:	0200      	lsls	r0, r0, #8
 800034a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800034e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000352:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000354:	60d3      	str	r3, [r2, #12]
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800035e:	b530      	push	{r4, r5, lr}
 8000360:	68dc      	ldr	r4, [r3, #12]
 8000362:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000366:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800036c:	2b04      	cmp	r3, #4
 800036e:	bf28      	it	cs
 8000370:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	f04f 0501 	mov.w	r5, #1
 8000378:	fa05 f303 	lsl.w	r3, r5, r3
 800037c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000380:	bf8c      	ite	hi
 8000382:	3c03      	subhi	r4, #3
 8000384:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000386:	4019      	ands	r1, r3
 8000388:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038a:	fa05 f404 	lsl.w	r4, r5, r4
 800038e:	3c01      	subs	r4, #1
 8000390:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000392:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	ea42 0201 	orr.w	r2, r2, r1
 8000398:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039c:	bfad      	iteet	ge
 800039e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a2:	f000 000f 	andlt.w	r0, r0, #15
 80003a6:	4b06      	ldrlt	r3, [pc, #24]	; (80003c0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	bfb5      	itete	lt
 80003ae:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	bf00      	nop
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000ed14 	.word	0xe000ed14

080003c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003c4:	3801      	subs	r0, #1
 80003c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003ca:	d20a      	bcs.n	80003e2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ce:	4a07      	ldr	r2, [pc, #28]	; (80003ec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003d0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d2:	21f0      	movs	r1, #240	; 0xf0
 80003d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003da:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003dc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010
 80003ec:	e000ed00 	.word	0xe000ed00

080003f0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80003f0:	6943      	ldr	r3, [r0, #20]
 80003f2:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80003f4:	bf14      	ite	ne
 80003f6:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80003f8:	6181      	streq	r1, [r0, #24]
 80003fa:	4770      	bx	lr

080003fc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80003fc:	6803      	ldr	r3, [r0, #0]
 80003fe:	699a      	ldr	r2, [r3, #24]
 8000400:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000402:	bf44      	itt	mi
 8000404:	2200      	movmi	r2, #0
 8000406:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000408:	699a      	ldr	r2, [r3, #24]
 800040a:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800040c:	bf5e      	ittt	pl
 800040e:	699a      	ldrpl	r2, [r3, #24]
 8000410:	f042 0201 	orrpl.w	r2, r2, #1
 8000414:	619a      	strpl	r2, [r3, #24]
 8000416:	4770      	bx	lr

08000418 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000418:	b530      	push	{r4, r5, lr}
 800041a:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800041c:	6805      	ldr	r5, [r0, #0]
 800041e:	4323      	orrs	r3, r4
 8000420:	0d64      	lsrs	r4, r4, #21
 8000422:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000426:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800042a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800042e:	6868      	ldr	r0, [r5, #4]
 8000430:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000434:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000438:	4319      	orrs	r1, r3
 800043a:	f044 0403 	orr.w	r4, r4, #3
 800043e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000442:	ea20 0404 	bic.w	r4, r0, r4
 8000446:	4321      	orrs	r1, r4
 8000448:	6069      	str	r1, [r5, #4]
 800044a:	bd30      	pop	{r4, r5, pc}

0800044c <I2C_WaitOnFlagUntilTimeout>:
{
 800044c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000450:	9f06      	ldr	r7, [sp, #24]
 8000452:	4604      	mov	r4, r0
 8000454:	4688      	mov	r8, r1
 8000456:	4616      	mov	r6, r2
 8000458:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800045a:	6822      	ldr	r2, [r4, #0]
 800045c:	6993      	ldr	r3, [r2, #24]
 800045e:	ea38 0303 	bics.w	r3, r8, r3
 8000462:	bf0c      	ite	eq
 8000464:	2301      	moveq	r3, #1
 8000466:	2300      	movne	r3, #0
 8000468:	42b3      	cmp	r3, r6
 800046a:	d002      	beq.n	8000472 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800046c:	2000      	movs	r0, #0
}
 800046e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000472:	1c6b      	adds	r3, r5, #1
 8000474:	d0f2      	beq.n	800045c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000476:	f7ff ff45 	bl	8000304 <HAL_GetTick>
 800047a:	1bc0      	subs	r0, r0, r7
 800047c:	4285      	cmp	r5, r0
 800047e:	d301      	bcc.n	8000484 <I2C_WaitOnFlagUntilTimeout+0x38>
 8000480:	2d00      	cmp	r5, #0
 8000482:	d1ea      	bne.n	800045a <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000484:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800048c:	2320      	movs	r3, #32
 800048e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000492:	2300      	movs	r3, #0
 8000494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000498:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800049c:	2001      	movs	r0, #1
 800049e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080004a2 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004a2:	6803      	ldr	r3, [r0, #0]
{
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004a8:	6998      	ldr	r0, [r3, #24]
 80004aa:	f010 0010 	ands.w	r0, r0, #16
{
 80004ae:	460d      	mov	r5, r1
 80004b0:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004b2:	d116      	bne.n	80004e2 <I2C_IsAcknowledgeFailed+0x40>
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80004b6:	1c69      	adds	r1, r5, #1
 80004b8:	d014      	beq.n	80004e4 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80004ba:	f7ff ff23 	bl	8000304 <HAL_GetTick>
 80004be:	1b80      	subs	r0, r0, r6
 80004c0:	4285      	cmp	r5, r0
 80004c2:	d300      	bcc.n	80004c6 <I2C_IsAcknowledgeFailed+0x24>
 80004c4:	b96d      	cbnz	r5, 80004e2 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80004c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004c8:	f043 0320 	orr.w	r3, r3, #32
 80004cc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80004ce:	2320      	movs	r3, #32
 80004d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80004da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80004de:	2001      	movs	r0, #1
}
 80004e0:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80004e2:	6823      	ldr	r3, [r4, #0]
 80004e4:	6999      	ldr	r1, [r3, #24]
 80004e6:	068a      	lsls	r2, r1, #26
 80004e8:	d5e5      	bpl.n	80004b6 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004ea:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80004ec:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004ee:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80004f0:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80004f2:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80004f4:	f7ff ff82 	bl	80003fc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80004f8:	6822      	ldr	r2, [r4, #0]
 80004fa:	6853      	ldr	r3, [r2, #4]
 80004fc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000500:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000504:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000508:	f023 0301 	bic.w	r3, r3, #1
 800050c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800050e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000516:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 800051a:	e7db      	b.n	80004d4 <I2C_IsAcknowledgeFailed+0x32>

0800051c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	4604      	mov	r4, r0
 8000520:	460d      	mov	r5, r1
 8000522:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000524:	6823      	ldr	r3, [r4, #0]
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	079b      	lsls	r3, r3, #30
 800052a:	d501      	bpl.n	8000530 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800052c:	2000      	movs	r0, #0
 800052e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000530:	4632      	mov	r2, r6
 8000532:	4629      	mov	r1, r5
 8000534:	4620      	mov	r0, r4
 8000536:	f7ff ffb4 	bl	80004a2 <I2C_IsAcknowledgeFailed>
 800053a:	b9a0      	cbnz	r0, 8000566 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800053c:	1c6a      	adds	r2, r5, #1
 800053e:	d0f1      	beq.n	8000524 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000540:	f7ff fee0 	bl	8000304 <HAL_GetTick>
 8000544:	1b80      	subs	r0, r0, r6
 8000546:	4285      	cmp	r5, r0
 8000548:	d301      	bcc.n	800054e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800054a:	2d00      	cmp	r5, #0
 800054c:	d1ea      	bne.n	8000524 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800054e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000550:	f043 0320 	orr.w	r3, r3, #32
 8000554:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000556:	2320      	movs	r3, #32
 8000558:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800055c:	2300      	movs	r3, #0
 800055e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000562:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000566:	2001      	movs	r0, #1
}
 8000568:	bd70      	pop	{r4, r5, r6, pc}

0800056a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800056a:	b570      	push	{r4, r5, r6, lr}
 800056c:	4604      	mov	r4, r0
 800056e:	460d      	mov	r5, r1
 8000570:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000572:	6823      	ldr	r3, [r4, #0]
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	069b      	lsls	r3, r3, #26
 8000578:	d501      	bpl.n	800057e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800057a:	2000      	movs	r0, #0
 800057c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800057e:	4632      	mov	r2, r6
 8000580:	4629      	mov	r1, r5
 8000582:	4620      	mov	r0, r4
 8000584:	f7ff ff8d 	bl	80004a2 <I2C_IsAcknowledgeFailed>
 8000588:	b990      	cbnz	r0, 80005b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800058a:	f7ff febb 	bl	8000304 <HAL_GetTick>
 800058e:	1b80      	subs	r0, r0, r6
 8000590:	4285      	cmp	r5, r0
 8000592:	d301      	bcc.n	8000598 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000594:	2d00      	cmp	r5, #0
 8000596:	d1ec      	bne.n	8000572 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000598:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800059a:	f043 0320 	orr.w	r3, r3, #32
 800059e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80005a0:	2320      	movs	r3, #32
 80005a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80005ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80005b0:	2001      	movs	r0, #1
}
 80005b2:	bd70      	pop	{r4, r5, r6, pc}

080005b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	4604      	mov	r4, r0
 80005b8:	460d      	mov	r5, r1
 80005ba:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	075b      	lsls	r3, r3, #29
 80005c2:	d40e      	bmi.n	80005e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80005c4:	4632      	mov	r2, r6
 80005c6:	4629      	mov	r1, r5
 80005c8:	4620      	mov	r0, r4
 80005ca:	f7ff ff6a 	bl	80004a2 <I2C_IsAcknowledgeFailed>
 80005ce:	b9f0      	cbnz	r0, 800060e <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80005d0:	6823      	ldr	r3, [r4, #0]
 80005d2:	699a      	ldr	r2, [r3, #24]
 80005d4:	0691      	lsls	r1, r2, #26
 80005d6:	d51c      	bpl.n	8000612 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80005d8:	699a      	ldr	r2, [r3, #24]
 80005da:	0752      	lsls	r2, r2, #29
 80005dc:	d503      	bpl.n	80005e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80005de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80005e0:	b10a      	cbz	r2, 80005e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 80005e2:	2000      	movs	r0, #0
 80005e4:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80005e6:	2120      	movs	r1, #32
 80005e8:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80005f0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80005f4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80005f8:	f022 0201 	bic.w	r2, r2, #1
 80005fc:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80005fe:	2300      	movs	r3, #0
 8000600:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000602:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000606:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800060a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800060e:	2001      	movs	r0, #1
}
 8000610:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000612:	f7ff fe77 	bl	8000304 <HAL_GetTick>
 8000616:	1b80      	subs	r0, r0, r6
 8000618:	4285      	cmp	r5, r0
 800061a:	d301      	bcc.n	8000620 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800061c:	2d00      	cmp	r5, #0
 800061e:	d1cd      	bne.n	80005bc <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000620:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000622:	f043 0320 	orr.w	r3, r3, #32
 8000626:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000628:	2320      	movs	r3, #32
 800062a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800062e:	2300      	movs	r3, #0
 8000630:	e7eb      	b.n	800060a <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
	...

08000634 <HAL_I2C_Master_Transmit>:
{
 8000634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000638:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800063a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800063e:	2b20      	cmp	r3, #32
{
 8000640:	4604      	mov	r4, r0
 8000642:	460e      	mov	r6, r1
 8000644:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000646:	f040 8084 	bne.w	8000752 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 800064a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800064e:	2b01      	cmp	r3, #1
 8000650:	d07f      	beq.n	8000752 <HAL_I2C_Master_Transmit+0x11e>
 8000652:	2701      	movs	r7, #1
 8000654:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000658:	f7ff fe54 	bl	8000304 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800065c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800065e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000660:	9000      	str	r0, [sp, #0]
 8000662:	463a      	mov	r2, r7
 8000664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000668:	4620      	mov	r0, r4
 800066a:	f7ff feef 	bl	800044c <I2C_WaitOnFlagUntilTimeout>
 800066e:	b118      	cbz	r0, 8000678 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8000670:	2001      	movs	r0, #1
}
 8000672:	b003      	add	sp, #12
 8000674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000678:	2321      	movs	r3, #33	; 0x21
 800067a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800067e:	2310      	movs	r3, #16
 8000680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000684:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000686:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800068a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800068c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000690:	b29b      	uxth	r3, r3
 8000692:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000694:	6360      	str	r0, [r4, #52]	; 0x34
 8000696:	4b30      	ldr	r3, [pc, #192]	; (8000758 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000698:	d926      	bls.n	80006e8 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800069a:	22ff      	movs	r2, #255	; 0xff
 800069c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800069e:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80006a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80006a4:	4631      	mov	r1, r6
 80006a6:	4620      	mov	r0, r4
 80006a8:	f7ff feb6 	bl	8000418 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80006ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80006ae:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80006b0:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80006b2:	462a      	mov	r2, r5
 80006b4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80006b6:	b9fb      	cbnz	r3, 80006f8 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80006b8:	f7ff ff57 	bl	800056a <I2C_WaitOnSTOPFlagUntilTimeout>
 80006bc:	2800      	cmp	r0, #0
 80006be:	d1d7      	bne.n	8000670 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	2120      	movs	r1, #32
 80006c4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80006c6:	685a      	ldr	r2, [r3, #4]
 80006c8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80006cc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80006d0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80006d4:	f022 0201 	bic.w	r2, r2, #1
 80006d8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80006da:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80006de:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80006e2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80006e6:	e7c4      	b.n	8000672 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80006e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80006ea:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80006ec:	b292      	uxth	r2, r2
 80006ee:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80006f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	e7d5      	b.n	80006a4 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80006f8:	f7ff ff10 	bl	800051c <I2C_WaitOnTXISFlagUntilTimeout>
 80006fc:	2800      	cmp	r0, #0
 80006fe:	d1b7      	bne.n	8000670 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000702:	6822      	ldr	r2, [r4, #0]
 8000704:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000708:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800070a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800070c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800070e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000710:	3b01      	subs	r3, #1
 8000712:	b29b      	uxth	r3, r3
 8000714:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000716:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000718:	3a01      	subs	r2, #1
 800071a:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800071c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800071e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0c3      	beq.n	80006ac <HAL_I2C_Master_Transmit+0x78>
 8000724:	2a00      	cmp	r2, #0
 8000726:	d1c1      	bne.n	80006ac <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000728:	9500      	str	r5, [sp, #0]
 800072a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	4620      	mov	r0, r4
 8000730:	f7ff fe8c 	bl	800044c <I2C_WaitOnFlagUntilTimeout>
 8000734:	2800      	cmp	r0, #0
 8000736:	d19b      	bne.n	8000670 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000738:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800073a:	b29b      	uxth	r3, r3
 800073c:	2bff      	cmp	r3, #255	; 0xff
 800073e:	d903      	bls.n	8000748 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000740:	22ff      	movs	r2, #255	; 0xff
 8000742:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000744:	9000      	str	r0, [sp, #0]
 8000746:	e7ab      	b.n	80006a0 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8000748:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800074a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800074c:	b292      	uxth	r2, r2
 800074e:	8522      	strh	r2, [r4, #40]	; 0x28
 8000750:	e7ce      	b.n	80006f0 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000752:	2002      	movs	r0, #2
 8000754:	e78d      	b.n	8000672 <HAL_I2C_Master_Transmit+0x3e>
 8000756:	bf00      	nop
 8000758:	80002000 	.word	0x80002000

0800075c <HAL_I2C_Master_Receive>:
{
 800075c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000760:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000762:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000766:	2b20      	cmp	r3, #32
{
 8000768:	4604      	mov	r4, r0
 800076a:	460e      	mov	r6, r1
 800076c:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800076e:	f040 8086 	bne.w	800087e <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8000772:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000776:	2b01      	cmp	r3, #1
 8000778:	f000 8081 	beq.w	800087e <HAL_I2C_Master_Receive+0x122>
 800077c:	2701      	movs	r7, #1
 800077e:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000782:	f7ff fdbf 	bl	8000304 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000786:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000788:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800078a:	9000      	str	r0, [sp, #0]
 800078c:	463a      	mov	r2, r7
 800078e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000792:	4620      	mov	r0, r4
 8000794:	f7ff fe5a 	bl	800044c <I2C_WaitOnFlagUntilTimeout>
 8000798:	b118      	cbz	r0, 80007a2 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 800079a:	2001      	movs	r0, #1
}
 800079c:	b003      	add	sp, #12
 800079e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80007a2:	2322      	movs	r3, #34	; 0x22
 80007a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80007a8:	2310      	movs	r3, #16
 80007aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007ae:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80007b0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80007b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80007b6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80007be:	6360      	str	r0, [r4, #52]	; 0x34
 80007c0:	4b30      	ldr	r3, [pc, #192]	; (8000884 <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80007c2:	d926      	bls.n	8000812 <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80007c4:	22ff      	movs	r2, #255	; 0xff
 80007c6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80007c8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80007ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80007ce:	4631      	mov	r1, r6
 80007d0:	4620      	mov	r0, r4
 80007d2:	f7ff fe21 	bl	8000418 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80007d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007d8:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80007da:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007dc:	462a      	mov	r2, r5
 80007de:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80007e0:	b9fb      	cbnz	r3, 8000822 <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007e2:	f7ff fec2 	bl	800056a <I2C_WaitOnSTOPFlagUntilTimeout>
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d1d7      	bne.n	800079a <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007ea:	6823      	ldr	r3, [r4, #0]
 80007ec:	2120      	movs	r1, #32
 80007ee:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80007f0:	685a      	ldr	r2, [r3, #4]
 80007f2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80007f6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80007fa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80007fe:	f022 0201 	bic.w	r2, r2, #1
 8000802:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000804:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000808:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800080c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000810:	e7c4      	b.n	800079c <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 8000812:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000814:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000816:	b292      	uxth	r2, r2
 8000818:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800081a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800081e:	b2d2      	uxtb	r2, r2
 8000820:	e7d5      	b.n	80007ce <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000822:	f7ff fec7 	bl	80005b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000826:	2800      	cmp	r0, #0
 8000828:	d1b7      	bne.n	800079a <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800082a:	6822      	ldr	r2, [r4, #0]
 800082c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800082e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000830:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000832:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000834:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000836:	3301      	adds	r3, #1
 8000838:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800083a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800083c:	3b01      	subs	r3, #1
 800083e:	b29b      	uxth	r3, r3
 8000840:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000842:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000844:	3a01      	subs	r2, #1
 8000846:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000848:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800084a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0c2      	beq.n	80007d6 <HAL_I2C_Master_Receive+0x7a>
 8000850:	2a00      	cmp	r2, #0
 8000852:	d1c0      	bne.n	80007d6 <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000854:	9500      	str	r5, [sp, #0]
 8000856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	4620      	mov	r0, r4
 800085c:	f7ff fdf6 	bl	800044c <I2C_WaitOnFlagUntilTimeout>
 8000860:	2800      	cmp	r0, #0
 8000862:	d19a      	bne.n	800079a <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000864:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000866:	b29b      	uxth	r3, r3
 8000868:	2bff      	cmp	r3, #255	; 0xff
 800086a:	d903      	bls.n	8000874 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800086c:	22ff      	movs	r2, #255	; 0xff
 800086e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000870:	9000      	str	r0, [sp, #0]
 8000872:	e7aa      	b.n	80007ca <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8000874:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000876:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000878:	b292      	uxth	r2, r2
 800087a:	8522      	strh	r2, [r4, #40]	; 0x28
 800087c:	e7cd      	b.n	800081a <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 800087e:	2002      	movs	r0, #2
 8000880:	e78c      	b.n	800079c <HAL_I2C_Master_Receive+0x40>
 8000882:	bf00      	nop
 8000884:	80002400 	.word	0x80002400

08000888 <HAL_LPTIM_CompareMatchCallback>:
 8000888:	4770      	bx	lr

0800088a <HAL_LPTIM_AutoReloadMatchCallback>:
 800088a:	4770      	bx	lr

0800088c <HAL_LPTIM_TriggerCallback>:
 800088c:	4770      	bx	lr

0800088e <HAL_LPTIM_CompareWriteCallback>:
 800088e:	4770      	bx	lr

08000890 <HAL_LPTIM_AutoReloadWriteCallback>:
 8000890:	4770      	bx	lr

08000892 <HAL_LPTIM_DirectionUpCallback>:
 8000892:	4770      	bx	lr

08000894 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000894:	4770      	bx	lr

08000896 <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8000896:	6803      	ldr	r3, [r0, #0]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	07d1      	lsls	r1, r2, #31
{
 800089c:	b510      	push	{r4, lr}
 800089e:	4604      	mov	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80008a0:	d506      	bpl.n	80008b0 <HAL_LPTIM_IRQHandler+0x1a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80008a2:	689a      	ldr	r2, [r3, #8]
 80008a4:	07d2      	lsls	r2, r2, #31
 80008a6:	d503      	bpl.n	80008b0 <HAL_LPTIM_IRQHandler+0x1a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80008a8:	2201      	movs	r2, #1
 80008aa:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80008ac:	f7ff ffec 	bl	8000888 <HAL_LPTIM_CompareMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	0790      	lsls	r0, r2, #30
 80008b6:	d507      	bpl.n	80008c8 <HAL_LPTIM_IRQHandler+0x32>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	0791      	lsls	r1, r2, #30
 80008bc:	d504      	bpl.n	80008c8 <HAL_LPTIM_IRQHandler+0x32>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80008be:	2202      	movs	r2, #2
 80008c0:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80008c2:	4620      	mov	r0, r4
 80008c4:	f7ff ffe1 	bl	800088a <HAL_LPTIM_AutoReloadMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80008c8:	6823      	ldr	r3, [r4, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	0752      	lsls	r2, r2, #29
 80008ce:	d507      	bpl.n	80008e0 <HAL_LPTIM_IRQHandler+0x4a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80008d0:	689a      	ldr	r2, [r3, #8]
 80008d2:	0750      	lsls	r0, r2, #29
 80008d4:	d504      	bpl.n	80008e0 <HAL_LPTIM_IRQHandler+0x4a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80008d6:	2204      	movs	r2, #4
 80008d8:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 80008da:	4620      	mov	r0, r4
 80008dc:	f7ff ffd6 	bl	800088c <HAL_LPTIM_TriggerCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	0711      	lsls	r1, r2, #28
 80008e6:	d507      	bpl.n	80008f8 <HAL_LPTIM_IRQHandler+0x62>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	0712      	lsls	r2, r2, #28
 80008ec:	d504      	bpl.n	80008f8 <HAL_LPTIM_IRQHandler+0x62>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80008ee:	2208      	movs	r2, #8
 80008f0:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80008f2:	4620      	mov	r0, r4
 80008f4:	f7ff ffcb 	bl	800088e <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	06d0      	lsls	r0, r2, #27
 80008fe:	d507      	bpl.n	8000910 <HAL_LPTIM_IRQHandler+0x7a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	06d1      	lsls	r1, r2, #27
 8000904:	d504      	bpl.n	8000910 <HAL_LPTIM_IRQHandler+0x7a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8000906:	2210      	movs	r2, #16
 8000908:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800090a:	4620      	mov	r0, r4
 800090c:	f7ff ffc0 	bl	8000890 <HAL_LPTIM_AutoReloadWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	0692      	lsls	r2, r2, #26
 8000916:	d507      	bpl.n	8000928 <HAL_LPTIM_IRQHandler+0x92>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	0690      	lsls	r0, r2, #26
 800091c:	d504      	bpl.n	8000928 <HAL_LPTIM_IRQHandler+0x92>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800091e:	2220      	movs	r2, #32
 8000920:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8000922:	4620      	mov	r0, r4
 8000924:	f7ff ffb5 	bl	8000892 <HAL_LPTIM_DirectionUpCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	0651      	lsls	r1, r2, #25
 800092e:	d507      	bpl.n	8000940 <HAL_LPTIM_IRQHandler+0xaa>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	0652      	lsls	r2, r2, #25
 8000934:	d504      	bpl.n	8000940 <HAL_LPTIM_IRQHandler+0xaa>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8000936:	2240      	movs	r2, #64	; 0x40
 8000938:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800093a:	4620      	mov	r0, r4
 800093c:	f7ff ffaa 	bl	8000894 <HAL_LPTIM_DirectionDownCallback>
 8000940:	bd10      	pop	{r4, pc}
	...

08000944 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000944:	4a02      	ldr	r2, [pc, #8]	; (8000950 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000946:	6813      	ldr	r3, [r2, #0]
 8000948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	4770      	bx	lr
 8000950:	40007000 	.word	0x40007000

08000954 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_PWREx_GetVoltageRange+0xc>)
 8000956:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000958:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40007000 	.word	0x40007000

08000964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000966:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000968:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800096c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000970:	d11c      	bne.n	80009ac <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000972:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000976:	d015      	beq.n	80009a4 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800097e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000982:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000984:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000986:	6811      	ldr	r1, [r2, #0]
 8000988:	2232      	movs	r2, #50	; 0x32
 800098a:	434a      	muls	r2, r1
 800098c:	490f      	ldr	r1, [pc, #60]	; (80009cc <HAL_PWREx_ControlVoltageScaling+0x68>)
 800098e:	fbb2 f2f1 	udiv	r2, r2, r1
 8000992:	4619      	mov	r1, r3
 8000994:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000996:	6958      	ldr	r0, [r3, #20]
 8000998:	0540      	lsls	r0, r0, #21
 800099a:	d500      	bpl.n	800099e <HAL_PWREx_ControlVoltageScaling+0x3a>
 800099c:	b922      	cbnz	r2, 80009a8 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800099e:	694b      	ldr	r3, [r1, #20]
 80009a0:	055b      	lsls	r3, r3, #21
 80009a2:	d40d      	bmi.n	80009c0 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80009a4:	2000      	movs	r0, #0
 80009a6:	4770      	bx	lr
        wait_loop_index--;
 80009a8:	3a01      	subs	r2, #1
 80009aa:	e7f4      	b.n	8000996 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80009ac:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80009b0:	bf1f      	itttt	ne
 80009b2:	681a      	ldrne	r2, [r3, #0]
 80009b4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80009b8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80009bc:	601a      	strne	r2, [r3, #0]
 80009be:	e7f1      	b.n	80009a4 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80009c0:	2003      	movs	r0, #3
}
 80009c2:	4770      	bx	lr
 80009c4:	40007000 	.word	0x40007000
 80009c8:	2000000c 	.word	0x2000000c
 80009cc:	000f4240 	.word	0x000f4240

080009d0 <HAL_PWREx_EnterSTOP2Mode>:
{
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 80009d0:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <HAL_PWREx_EnterSTOP2Mode+0x30>)
 80009d2:	6813      	ldr	r3, [r2, #0]
 80009d4:	f023 0307 	bic.w	r3, r3, #7
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80009e0:	691a      	ldr	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80009e2:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80009e4:	f042 0204 	orr.w	r2, r2, #4
 80009e8:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80009ea:	d105      	bne.n	80009f8 <HAL_PWREx_EnterSTOP2Mode+0x28>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80009ec:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80009ee:	691a      	ldr	r2, [r3, #16]
 80009f0:	f022 0204 	bic.w	r2, r2, #4
 80009f4:	611a      	str	r2, [r3, #16]
 80009f6:	4770      	bx	lr
    __SEV();
 80009f8:	bf40      	sev
    __WFE();
 80009fa:	bf20      	wfe
    __WFE();
 80009fc:	bf20      	wfe
 80009fe:	e7f6      	b.n	80009ee <HAL_PWREx_EnterSTOP2Mode+0x1e>
 8000a00:	40007000 	.word	0x40007000
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000a0a:	4d1e      	ldr	r5, [pc, #120]	; (8000a84 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000a0c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a0e:	00da      	lsls	r2, r3, #3
{
 8000a10:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000a12:	d518      	bpl.n	8000a46 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000a14:	f7ff ff9e 	bl	8000954 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a18:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000a1c:	d123      	bne.n	8000a66 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000a1e:	2c80      	cmp	r4, #128	; 0x80
 8000a20:	d929      	bls.n	8000a76 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000a22:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000a24:	bf8c      	ite	hi
 8000a26:	2002      	movhi	r0, #2
 8000a28:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000a2a:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000a2c:	6813      	ldr	r3, [r2, #0]
 8000a2e:	f023 0307 	bic.w	r3, r3, #7
 8000a32:	4303      	orrs	r3, r0
 8000a34:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000a3c:	1a18      	subs	r0, r3, r0
 8000a3e:	bf18      	it	ne
 8000a40:	2001      	movne	r0, #1
 8000a42:	b003      	add	sp, #12
 8000a44:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	65ab      	str	r3, [r5, #88]	; 0x58
 8000a4e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000a58:	f7ff ff7c 	bl	8000954 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000a5c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a62:	65ab      	str	r3, [r5, #88]	; 0x58
 8000a64:	e7d8      	b.n	8000a18 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000a66:	2c80      	cmp	r4, #128	; 0x80
 8000a68:	d807      	bhi.n	8000a7a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000a6a:	d008      	beq.n	8000a7e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000a6c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000a70:	4258      	negs	r0, r3
 8000a72:	4158      	adcs	r0, r3
 8000a74:	e7d9      	b.n	8000a2a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000a76:	2000      	movs	r0, #0
 8000a78:	e7d7      	b.n	8000a2a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	e7d5      	b.n	8000a2a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000a7e:	2002      	movs	r0, #2
 8000a80:	e7d3      	b.n	8000a2a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000a8e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a90:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a92:	f012 020c 	ands.w	r2, r2, #12
 8000a96:	d005      	beq.n	8000aa4 <HAL_RCC_GetSysClockFreq+0x18>
 8000a98:	2a0c      	cmp	r2, #12
 8000a9a:	d115      	bne.n	8000ac8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a9c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000aa0:	2901      	cmp	r1, #1
 8000aa2:	d118      	bne.n	8000ad6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000aa4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000aa6:	481d      	ldr	r0, [pc, #116]	; (8000b1c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000aa8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000aaa:	bf55      	itete	pl
 8000aac:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000ab0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000ab2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000ab6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000aba:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000abe:	b34a      	cbz	r2, 8000b14 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000ac0:	2a0c      	cmp	r2, #12
 8000ac2:	d009      	beq.n	8000ad8 <HAL_RCC_GetSysClockFreq+0x4c>
 8000ac4:	2000      	movs	r0, #0
  return sysclockfreq;
 8000ac6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d022      	beq.n	8000b12 <HAL_RCC_GetSysClockFreq+0x86>
 8000acc:	2a08      	cmp	r2, #8
 8000ace:	4814      	ldr	r0, [pc, #80]	; (8000b20 <HAL_RCC_GetSysClockFreq+0x94>)
 8000ad0:	bf18      	it	ne
 8000ad2:	2000      	movne	r0, #0
 8000ad4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000ad6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8000ade:	2a02      	cmp	r2, #2
 8000ae0:	d015      	beq.n	8000b0e <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8000ae2:	490f      	ldr	r1, [pc, #60]	; (8000b20 <HAL_RCC_GetSysClockFreq+0x94>)
 8000ae4:	2a03      	cmp	r2, #3
 8000ae6:	bf08      	it	eq
 8000ae8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000aea:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000aec:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000af4:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000af8:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000afc:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000afe:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b00:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000b02:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000b04:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8000b08:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b0c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x98>)
 8000b10:	e7eb      	b.n	8000aea <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	08002abc 	.word	0x08002abc
 8000b20:	007a1200 	.word	0x007a1200
 8000b24:	00f42400 	.word	0x00f42400

08000b28 <HAL_RCC_OscConfig>:
{
 8000b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000b2c:	4605      	mov	r5, r0
 8000b2e:	b908      	cbnz	r0, 8000b34 <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 8000b30:	2001      	movs	r0, #1
 8000b32:	e047      	b.n	8000bc4 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b34:	4c9f      	ldr	r4, [pc, #636]	; (8000db4 <HAL_RCC_OscConfig+0x28c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b36:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b38:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b3a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b3c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b3e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b42:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b46:	d575      	bpl.n	8000c34 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b48:	b11e      	cbz	r6, 8000b52 <HAL_RCC_OscConfig+0x2a>
 8000b4a:	2e0c      	cmp	r6, #12
 8000b4c:	d154      	bne.n	8000bf8 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000b4e:	2f01      	cmp	r7, #1
 8000b50:	d152      	bne.n	8000bf8 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b52:	6823      	ldr	r3, [r4, #0]
 8000b54:	0798      	lsls	r0, r3, #30
 8000b56:	d502      	bpl.n	8000b5e <HAL_RCC_OscConfig+0x36>
 8000b58:	69ab      	ldr	r3, [r5, #24]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0e8      	beq.n	8000b30 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	6a28      	ldr	r0, [r5, #32]
 8000b62:	0719      	lsls	r1, r3, #28
 8000b64:	bf56      	itet	pl
 8000b66:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000b6a:	6823      	ldrmi	r3, [r4, #0]
 8000b6c:	091b      	lsrpl	r3, r3, #4
 8000b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b72:	4283      	cmp	r3, r0
 8000b74:	d229      	bcs.n	8000bca <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b76:	f7ff ff47 	bl	8000a08 <RCC_SetFlashLatencyFromMSIRange>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d1d8      	bne.n	8000b30 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6023      	str	r3, [r4, #0]
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	6a2a      	ldr	r2, [r5, #32]
 8000b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b92:	6863      	ldr	r3, [r4, #4]
 8000b94:	69ea      	ldr	r2, [r5, #28]
 8000b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b9e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ba0:	f7ff ff74 	bl	8000a8c <HAL_RCC_GetSysClockFreq>
 8000ba4:	68a3      	ldr	r3, [r4, #8]
 8000ba6:	4a84      	ldr	r2, [pc, #528]	; (8000db8 <HAL_RCC_OscConfig+0x290>)
 8000ba8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bac:	5cd3      	ldrb	r3, [r2, r3]
 8000bae:	f003 031f 	and.w	r3, r3, #31
 8000bb2:	40d8      	lsrs	r0, r3
 8000bb4:	4b81      	ldr	r3, [pc, #516]	; (8000dbc <HAL_RCC_OscConfig+0x294>)
 8000bb6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8000bb8:	4b81      	ldr	r3, [pc, #516]	; (8000dc0 <HAL_RCC_OscConfig+0x298>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	f7ff fb60 	bl	8000280 <HAL_InitTick>
        if(status != HAL_OK)
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d037      	beq.n	8000c34 <HAL_RCC_OscConfig+0x10c>
}
 8000bc4:	b003      	add	sp, #12
 8000bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6023      	str	r3, [r4, #0]
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bd8:	4303      	orrs	r3, r0
 8000bda:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bdc:	6863      	ldr	r3, [r4, #4]
 8000bde:	69ea      	ldr	r2, [r5, #28]
 8000be0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000be4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000be8:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d1d8      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bee:	f7ff ff0b 	bl	8000a08 <RCC_SetFlashLatencyFromMSIRange>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d0d4      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x78>
 8000bf6:	e79b      	b.n	8000b30 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bf8:	69ab      	ldr	r3, [r5, #24]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d03a      	beq.n	8000c74 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c06:	f7ff fb7d 	bl	8000304 <HAL_GetTick>
 8000c0a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	079a      	lsls	r2, r3, #30
 8000c10:	d528      	bpl.n	8000c64 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	6023      	str	r3, [r4, #0]
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	6a2a      	ldr	r2, [r5, #32]
 8000c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c22:	4313      	orrs	r3, r2
 8000c24:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c26:	6863      	ldr	r3, [r4, #4]
 8000c28:	69ea      	ldr	r2, [r5, #28]
 8000c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c32:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	07d8      	lsls	r0, r3, #31
 8000c38:	d42d      	bmi.n	8000c96 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c3a:	682b      	ldr	r3, [r5, #0]
 8000c3c:	0799      	lsls	r1, r3, #30
 8000c3e:	d46b      	bmi.n	8000d18 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c40:	682b      	ldr	r3, [r5, #0]
 8000c42:	0718      	lsls	r0, r3, #28
 8000c44:	f100 80a0 	bmi.w	8000d88 <HAL_RCC_OscConfig+0x260>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	0759      	lsls	r1, r3, #29
 8000c4c:	f100 80ce 	bmi.w	8000dec <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	0698      	lsls	r0, r3, #26
 8000c54:	f100 8137 	bmi.w	8000ec6 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000c58:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 815d 	bne.w	8000f1a <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8000c60:	2000      	movs	r0, #0
 8000c62:	e7af      	b.n	8000bc4 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c64:	f7ff fb4e 	bl	8000304 <HAL_GetTick>
 8000c68:	eba0 0008 	sub.w	r0, r0, r8
 8000c6c:	2802      	cmp	r0, #2
 8000c6e:	d9cd      	bls.n	8000c0c <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8000c70:	2003      	movs	r0, #3
 8000c72:	e7a7      	b.n	8000bc4 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	f023 0301 	bic.w	r3, r3, #1
 8000c7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fb42 	bl	8000304 <HAL_GetTick>
 8000c80:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c82:	6823      	ldr	r3, [r4, #0]
 8000c84:	079b      	lsls	r3, r3, #30
 8000c86:	d5d5      	bpl.n	8000c34 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c88:	f7ff fb3c 	bl	8000304 <HAL_GetTick>
 8000c8c:	eba0 0008 	sub.w	r0, r0, r8
 8000c90:	2802      	cmp	r0, #2
 8000c92:	d9f6      	bls.n	8000c82 <HAL_RCC_OscConfig+0x15a>
 8000c94:	e7ec      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000c96:	2e08      	cmp	r6, #8
 8000c98:	d003      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x17a>
 8000c9a:	2e0c      	cmp	r6, #12
 8000c9c:	d108      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c9e:	2f03      	cmp	r7, #3
 8000ca0:	d106      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	039a      	lsls	r2, r3, #14
 8000ca6:	d5c8      	bpl.n	8000c3a <HAL_RCC_OscConfig+0x112>
 8000ca8:	686b      	ldr	r3, [r5, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1c5      	bne.n	8000c3a <HAL_RCC_OscConfig+0x112>
 8000cae:	e73f      	b.n	8000b30 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb0:	686b      	ldr	r3, [r5, #4]
 8000cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb6:	d110      	bne.n	8000cda <HAL_RCC_OscConfig+0x1b2>
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cbe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fb20 	bl	8000304 <HAL_GetTick>
 8000cc4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	039b      	lsls	r3, r3, #14
 8000cca:	d4b6      	bmi.n	8000c3a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ccc:	f7ff fb1a 	bl	8000304 <HAL_GetTick>
 8000cd0:	eba0 0008 	sub.w	r0, r0, r8
 8000cd4:	2864      	cmp	r0, #100	; 0x64
 8000cd6:	d9f6      	bls.n	8000cc6 <HAL_RCC_OscConfig+0x19e>
 8000cd8:	e7ca      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cde:	d104      	bne.n	8000cea <HAL_RCC_OscConfig+0x1c2>
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce6:	6023      	str	r3, [r4, #0]
 8000ce8:	e7e6      	b.n	8000cb8 <HAL_RCC_OscConfig+0x190>
 8000cea:	6822      	ldr	r2, [r4, #0]
 8000cec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cf0:	6022      	str	r2, [r4, #0]
 8000cf2:	6822      	ldr	r2, [r4, #0]
 8000cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cf8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1e0      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8000cfe:	f7ff fb01 	bl	8000304 <HAL_GetTick>
 8000d02:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d04:	6823      	ldr	r3, [r4, #0]
 8000d06:	0398      	lsls	r0, r3, #14
 8000d08:	d597      	bpl.n	8000c3a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fafb 	bl	8000304 <HAL_GetTick>
 8000d0e:	eba0 0008 	sub.w	r0, r0, r8
 8000d12:	2864      	cmp	r0, #100	; 0x64
 8000d14:	d9f6      	bls.n	8000d04 <HAL_RCC_OscConfig+0x1dc>
 8000d16:	e7ab      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000d18:	2e04      	cmp	r6, #4
 8000d1a:	d003      	beq.n	8000d24 <HAL_RCC_OscConfig+0x1fc>
 8000d1c:	2e0c      	cmp	r6, #12
 8000d1e:	d110      	bne.n	8000d42 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d20:	2f02      	cmp	r7, #2
 8000d22:	d10e      	bne.n	8000d42 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	0559      	lsls	r1, r3, #21
 8000d28:	d503      	bpl.n	8000d32 <HAL_RCC_OscConfig+0x20a>
 8000d2a:	68eb      	ldr	r3, [r5, #12]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f43f aeff 	beq.w	8000b30 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d32:	6863      	ldr	r3, [r4, #4]
 8000d34:	692a      	ldr	r2, [r5, #16]
 8000d36:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000d3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d3e:	6063      	str	r3, [r4, #4]
 8000d40:	e77e      	b.n	8000c40 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d42:	68eb      	ldr	r3, [r5, #12]
 8000d44:	b17b      	cbz	r3, 8000d66 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d4e:	f7ff fad9 	bl	8000304 <HAL_GetTick>
 8000d52:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	055a      	lsls	r2, r3, #21
 8000d58:	d4eb      	bmi.n	8000d32 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fad3 	bl	8000304 <HAL_GetTick>
 8000d5e:	1bc0      	subs	r0, r0, r7
 8000d60:	2802      	cmp	r0, #2
 8000d62:	d9f7      	bls.n	8000d54 <HAL_RCC_OscConfig+0x22c>
 8000d64:	e784      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d6c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fac9 	bl	8000304 <HAL_GetTick>
 8000d72:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	055b      	lsls	r3, r3, #21
 8000d78:	f57f af62 	bpl.w	8000c40 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fac2 	bl	8000304 <HAL_GetTick>
 8000d80:	1bc0      	subs	r0, r0, r7
 8000d82:	2802      	cmp	r0, #2
 8000d84:	d9f6      	bls.n	8000d74 <HAL_RCC_OscConfig+0x24c>
 8000d86:	e773      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d88:	696b      	ldr	r3, [r5, #20]
 8000d8a:	b1db      	cbz	r3, 8000dc4 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 8000d8c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000d98:	f7ff fab4 	bl	8000304 <HAL_GetTick>
 8000d9c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d9e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000da2:	079a      	lsls	r2, r3, #30
 8000da4:	f53f af50 	bmi.w	8000c48 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000da8:	f7ff faac 	bl	8000304 <HAL_GetTick>
 8000dac:	1bc0      	subs	r0, r0, r7
 8000dae:	2802      	cmp	r0, #2
 8000db0:	d9f5      	bls.n	8000d9e <HAL_RCC_OscConfig+0x276>
 8000db2:	e75d      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
 8000db4:	40021000 	.word	0x40021000
 8000db8:	08002aa9 	.word	0x08002aa9
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	20000004 	.word	0x20000004
      __HAL_RCC_LSI_DISABLE();
 8000dc4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000dc8:	f023 0301 	bic.w	r3, r3, #1
 8000dcc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000dd0:	f7ff fa98 	bl	8000304 <HAL_GetTick>
 8000dd4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000dd6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000dda:	079b      	lsls	r3, r3, #30
 8000ddc:	f57f af34 	bpl.w	8000c48 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de0:	f7ff fa90 	bl	8000304 <HAL_GetTick>
 8000de4:	1bc0      	subs	r0, r0, r7
 8000de6:	2802      	cmp	r0, #2
 8000de8:	d9f5      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x2ae>
 8000dea:	e741      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000dec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dee:	00df      	lsls	r7, r3, #3
 8000df0:	d429      	bmi.n	8000e46 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	65a3      	str	r3, [r4, #88]	; 0x58
 8000dfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e00:	9301      	str	r3, [sp, #4]
 8000e02:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e04:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e08:	4f9a      	ldr	r7, [pc, #616]	; (8001074 <HAL_RCC_OscConfig+0x54c>)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	05d8      	lsls	r0, r3, #23
 8000e0e:	d51d      	bpl.n	8000e4c <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e10:	68ab      	ldr	r3, [r5, #8]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d12b      	bne.n	8000e6e <HAL_RCC_OscConfig+0x346>
 8000e16:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000e22:	f7ff fa6f 	bl	8000304 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e26:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e2a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e2c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e30:	079a      	lsls	r2, r3, #30
 8000e32:	d542      	bpl.n	8000eba <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8000e34:	f1b8 0f00 	cmp.w	r8, #0
 8000e38:	f43f af0a 	beq.w	8000c50 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e42:	65a3      	str	r3, [r4, #88]	; 0x58
 8000e44:	e704      	b.n	8000c50 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 8000e46:	f04f 0800 	mov.w	r8, #0
 8000e4a:	e7dd      	b.n	8000e08 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e52:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e54:	f7ff fa56 	bl	8000304 <HAL_GetTick>
 8000e58:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	05d9      	lsls	r1, r3, #23
 8000e5e:	d4d7      	bmi.n	8000e10 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e60:	f7ff fa50 	bl	8000304 <HAL_GetTick>
 8000e64:	eba0 0009 	sub.w	r0, r0, r9
 8000e68:	2802      	cmp	r0, #2
 8000e6a:	d9f6      	bls.n	8000e5a <HAL_RCC_OscConfig+0x332>
 8000e6c:	e700      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	d106      	bne.n	8000e80 <HAL_RCC_OscConfig+0x358>
 8000e72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000e7e:	e7ca      	b.n	8000e16 <HAL_RCC_OscConfig+0x2ee>
 8000e80:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000e84:	f022 0201 	bic.w	r2, r2, #1
 8000e88:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000e8c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000e90:	f022 0204 	bic.w	r2, r2, #4
 8000e94:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1c2      	bne.n	8000e22 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 8000e9c:	f7ff fa32 	bl	8000304 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ea0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ea4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ea6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000eaa:	079b      	lsls	r3, r3, #30
 8000eac:	d5c2      	bpl.n	8000e34 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eae:	f7ff fa29 	bl	8000304 <HAL_GetTick>
 8000eb2:	1bc0      	subs	r0, r0, r7
 8000eb4:	4548      	cmp	r0, r9
 8000eb6:	d9f6      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x37e>
 8000eb8:	e6da      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eba:	f7ff fa23 	bl	8000304 <HAL_GetTick>
 8000ebe:	1bc0      	subs	r0, r0, r7
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d9b3      	bls.n	8000e2c <HAL_RCC_OscConfig+0x304>
 8000ec4:	e6d4      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000ec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ec8:	b19b      	cbz	r3, 8000ef2 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 8000eca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fa15 	bl	8000304 <HAL_GetTick>
 8000eda:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000edc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000ee0:	0799      	lsls	r1, r3, #30
 8000ee2:	f53f aeb9 	bmi.w	8000c58 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ee6:	f7ff fa0d 	bl	8000304 <HAL_GetTick>
 8000eea:	1bc0      	subs	r0, r0, r7
 8000eec:	2802      	cmp	r0, #2
 8000eee:	d9f5      	bls.n	8000edc <HAL_RCC_OscConfig+0x3b4>
 8000ef0:	e6be      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8000ef2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000ef6:	f023 0301 	bic.w	r3, r3, #1
 8000efa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000efe:	f7ff fa01 	bl	8000304 <HAL_GetTick>
 8000f02:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f04:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000f08:	079a      	lsls	r2, r3, #30
 8000f0a:	f57f aea5 	bpl.w	8000c58 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f0e:	f7ff f9f9 	bl	8000304 <HAL_GetTick>
 8000f12:	1bc0      	subs	r0, r0, r7
 8000f14:	2802      	cmp	r0, #2
 8000f16:	d9f5      	bls.n	8000f04 <HAL_RCC_OscConfig+0x3dc>
 8000f18:	e6aa      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	f040 8088 	bne.w	8001030 <HAL_RCC_OscConfig+0x508>
      pll_config = RCC->PLLCFGR;
 8000f20:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f22:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000f24:	f003 0103 	and.w	r1, r3, #3
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	d122      	bne.n	8000f72 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f2c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000f2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000f32:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f34:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8000f38:	d11b      	bne.n	8000f72 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f3a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000f3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f40:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8000f44:	d115      	bne.n	8000f72 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000f46:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000f48:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f4c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8000f50:	d10f      	bne.n	8000f72 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f52:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000f54:	0852      	lsrs	r2, r2, #1
 8000f56:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8000f5a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000f5c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8000f60:	d107      	bne.n	8000f72 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000f62:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000f64:	0852      	lsrs	r2, r2, #1
 8000f66:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8000f6a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f6c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8000f70:	d045      	beq.n	8000ffe <HAL_RCC_OscConfig+0x4d6>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f72:	2e0c      	cmp	r6, #12
 8000f74:	f43f addc 	beq.w	8000b30 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000f78:	6823      	ldr	r3, [r4, #0]
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	f53f add8 	bmi.w	8000b30 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f86:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8000f88:	f7ff f9bc 	bl	8000304 <HAL_GetTick>
 8000f8c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	019f      	lsls	r7, r3, #6
 8000f92:	d42e      	bmi.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f94:	68e2      	ldr	r2, [r4, #12]
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <HAL_RCC_OscConfig+0x550>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000fa0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fa4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000fa6:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8000faa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000fac:	3a01      	subs	r2, #1
 8000fae:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000fb2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000fb4:	0852      	lsrs	r2, r2, #1
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000fbc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000fbe:	0852      	lsrs	r2, r2, #1
 8000fc0:	3a01      	subs	r2, #1
 8000fc2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000fc6:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fce:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000fd0:	68e3      	ldr	r3, [r4, #12]
 8000fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd6:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8000fd8:	f7ff f994 	bl	8000304 <HAL_GetTick>
 8000fdc:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	019e      	lsls	r6, r3, #6
 8000fe2:	f53f ae3d 	bmi.w	8000c60 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff f98d 	bl	8000304 <HAL_GetTick>
 8000fea:	1b40      	subs	r0, r0, r5
 8000fec:	2802      	cmp	r0, #2
 8000fee:	d9f6      	bls.n	8000fde <HAL_RCC_OscConfig+0x4b6>
 8000ff0:	e63e      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff2:	f7ff f987 	bl	8000304 <HAL_GetTick>
 8000ff6:	1b80      	subs	r0, r0, r6
 8000ff8:	2802      	cmp	r0, #2
 8000ffa:	d9c8      	bls.n	8000f8e <HAL_RCC_OscConfig+0x466>
 8000ffc:	e638      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	0198      	lsls	r0, r3, #6
 8001002:	f53f ae2d 	bmi.w	8000c60 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800100c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800100e:	68e3      	ldr	r3, [r4, #12]
 8001010:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001014:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001016:	f7ff f975 	bl	8000304 <HAL_GetTick>
 800101a:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	0199      	lsls	r1, r3, #6
 8001020:	f53f ae1e 	bmi.w	8000c60 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001024:	f7ff f96e 	bl	8000304 <HAL_GetTick>
 8001028:	1b40      	subs	r0, r0, r5
 800102a:	2802      	cmp	r0, #2
 800102c:	d9f6      	bls.n	800101c <HAL_RCC_OscConfig+0x4f4>
 800102e:	e61f      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001030:	2e0c      	cmp	r6, #12
 8001032:	f43f ad7d 	beq.w	8000b30 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800103c:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001042:	bf5e      	ittt	pl
 8001044:	68e3      	ldrpl	r3, [r4, #12]
 8001046:	f023 0303 	bicpl.w	r3, r3, #3
 800104a:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800104c:	68e3      	ldr	r3, [r4, #12]
 800104e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001056:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001058:	f7ff f954 	bl	8000304 <HAL_GetTick>
 800105c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	019b      	lsls	r3, r3, #6
 8001062:	f57f adfd 	bpl.w	8000c60 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001066:	f7ff f94d 	bl	8000304 <HAL_GetTick>
 800106a:	1b40      	subs	r0, r0, r5
 800106c:	2802      	cmp	r0, #2
 800106e:	d9f6      	bls.n	800105e <HAL_RCC_OscConfig+0x536>
 8001070:	e5fe      	b.n	8000c70 <HAL_RCC_OscConfig+0x148>
 8001072:	bf00      	nop
 8001074:	40007000 	.word	0x40007000
 8001078:	019d808c 	.word	0x019d808c

0800107c <HAL_RCC_ClockConfig>:
{
 800107c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001080:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001082:	4604      	mov	r4, r0
 8001084:	b910      	cbnz	r0, 800108c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001086:	2001      	movs	r0, #1
 8001088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800108c:	4a41      	ldr	r2, [pc, #260]	; (8001194 <HAL_RCC_ClockConfig+0x118>)
 800108e:	6813      	ldr	r3, [r2, #0]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	428b      	cmp	r3, r1
 8001096:	d32a      	bcc.n	80010ee <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	07d9      	lsls	r1, r3, #31
 800109c:	d432      	bmi.n	8001104 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800109e:	6821      	ldr	r1, [r4, #0]
 80010a0:	078a      	lsls	r2, r1, #30
 80010a2:	d45c      	bmi.n	800115e <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010a4:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <HAL_RCC_ClockConfig+0x118>)
 80010a6:	6813      	ldr	r3, [r2, #0]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	429e      	cmp	r6, r3
 80010ae:	d35e      	bcc.n	800116e <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b0:	f011 0f04 	tst.w	r1, #4
 80010b4:	4d38      	ldr	r5, [pc, #224]	; (8001198 <HAL_RCC_ClockConfig+0x11c>)
 80010b6:	d165      	bne.n	8001184 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b8:	070b      	lsls	r3, r1, #28
 80010ba:	d506      	bpl.n	80010ca <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010bc:	68ab      	ldr	r3, [r5, #8]
 80010be:	6922      	ldr	r2, [r4, #16]
 80010c0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010c8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010ca:	f7ff fcdf 	bl	8000a8c <HAL_RCC_GetSysClockFreq>
 80010ce:	68ab      	ldr	r3, [r5, #8]
 80010d0:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_RCC_ClockConfig+0x120>)
 80010d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80010d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	40d8      	lsrs	r0, r3
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_RCC_ClockConfig+0x124>)
 80010e4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_RCC_ClockConfig+0x128>)
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	f7ff b8c9 	b.w	8000280 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ee:	6813      	ldr	r3, [r2, #0]
 80010f0:	f023 0307 	bic.w	r3, r3, #7
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	4299      	cmp	r1, r3
 8001100:	d1c1      	bne.n	8001086 <HAL_RCC_ClockConfig+0xa>
 8001102:	e7c9      	b.n	8001098 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001104:	6862      	ldr	r2, [r4, #4]
 8001106:	4d24      	ldr	r5, [pc, #144]	; (8001198 <HAL_RCC_ClockConfig+0x11c>)
 8001108:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800110a:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800110c:	d11b      	bne.n	8001146 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800110e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001112:	d0b8      	beq.n	8001086 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001114:	68ab      	ldr	r3, [r5, #8]
 8001116:	f023 0303 	bic.w	r3, r3, #3
 800111a:	4313      	orrs	r3, r2
 800111c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800111e:	f7ff f8f1 	bl	8000304 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001122:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001126:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001128:	68ab      	ldr	r3, [r5, #8]
 800112a:	6862      	ldr	r2, [r4, #4]
 800112c:	f003 030c 	and.w	r3, r3, #12
 8001130:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001134:	d0b3      	beq.n	800109e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001136:	f7ff f8e5 	bl	8000304 <HAL_GetTick>
 800113a:	1bc0      	subs	r0, r0, r7
 800113c:	4540      	cmp	r0, r8
 800113e:	d9f3      	bls.n	8001128 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8001140:	2003      	movs	r0, #3
}
 8001142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001146:	2a02      	cmp	r2, #2
 8001148:	d102      	bne.n	8001150 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800114a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800114e:	e7e0      	b.n	8001112 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001150:	b912      	cbnz	r2, 8001158 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001152:	f013 0f02 	tst.w	r3, #2
 8001156:	e7dc      	b.n	8001112 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001158:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800115c:	e7d9      	b.n	8001112 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_RCC_ClockConfig+0x11c>)
 8001160:	68a0      	ldr	r0, [r4, #8]
 8001162:	6893      	ldr	r3, [r2, #8]
 8001164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001168:	4303      	orrs	r3, r0
 800116a:	6093      	str	r3, [r2, #8]
 800116c:	e79a      	b.n	80010a4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116e:	6813      	ldr	r3, [r2, #0]
 8001170:	f023 0307 	bic.w	r3, r3, #7
 8001174:	4333      	orrs	r3, r6
 8001176:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001178:	6813      	ldr	r3, [r2, #0]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	429e      	cmp	r6, r3
 8001180:	d181      	bne.n	8001086 <HAL_RCC_ClockConfig+0xa>
 8001182:	e795      	b.n	80010b0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001184:	68ab      	ldr	r3, [r5, #8]
 8001186:	68e2      	ldr	r2, [r4, #12]
 8001188:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800118c:	4313      	orrs	r3, r2
 800118e:	60ab      	str	r3, [r5, #8]
 8001190:	e792      	b.n	80010b8 <HAL_RCC_ClockConfig+0x3c>
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000
 8001198:	40021000 	.word	0x40021000
 800119c:	08002aa9 	.word	0x08002aa9
 80011a0:	2000000c 	.word	0x2000000c
 80011a4:	20000004 	.word	0x20000004

080011a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80011a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80011aa:	4b44      	ldr	r3, [pc, #272]	; (80012bc <RCCEx_PLLSAI1_Config+0x114>)
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	f012 0f03 	tst.w	r2, #3
{
 80011b2:	4605      	mov	r5, r0
 80011b4:	460e      	mov	r6, r1
 80011b6:	461c      	mov	r4, r3
 80011b8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80011ba:	d039      	beq.n	8001230 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	f002 0203 	and.w	r2, r2, #3
 80011c2:	4282      	cmp	r2, r0
 80011c4:	d14b      	bne.n	800125e <RCCEx_PLLSAI1_Config+0xb6>
       ||
 80011c6:	2a00      	cmp	r2, #0
 80011c8:	d049      	beq.n	800125e <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80011ca:	68db      	ldr	r3, [r3, #12]
       ||
 80011cc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80011ce:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80011d2:	3301      	adds	r3, #1
       ||
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d142      	bne.n	800125e <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80011de:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011e0:	f7ff f890 	bl	8000304 <HAL_GetTick>
 80011e4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	011a      	lsls	r2, r3, #4
 80011ea:	d441      	bmi.n	8001270 <RCCEx_PLLSAI1_Config+0xc8>
 80011ec:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	d045      	beq.n	800127e <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80011f2:	2e01      	cmp	r6, #1
 80011f4:	d14f      	bne.n	8001296 <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80011f6:	6922      	ldr	r2, [r4, #16]
 80011f8:	6928      	ldr	r0, [r5, #16]
 80011fa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80011fe:	0840      	lsrs	r0, r0, #1
 8001200:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001204:	3801      	subs	r0, #1
 8001206:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800120a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800120e:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001216:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001218:	f7ff f874 	bl	8000304 <HAL_GetTick>
 800121c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	d545      	bpl.n	80012b0 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001224:	6923      	ldr	r3, [r4, #16]
 8001226:	69aa      	ldr	r2, [r5, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	6123      	str	r3, [r4, #16]
 800122c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800122e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001230:	2802      	cmp	r0, #2
 8001232:	d010      	beq.n	8001256 <RCCEx_PLLSAI1_Config+0xae>
 8001234:	2803      	cmp	r0, #3
 8001236:	d014      	beq.n	8001262 <RCCEx_PLLSAI1_Config+0xba>
 8001238:	2801      	cmp	r0, #1
 800123a:	d110      	bne.n	800125e <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	079f      	lsls	r7, r3, #30
 8001240:	d5f5      	bpl.n	800122e <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001242:	68e3      	ldr	r3, [r4, #12]
 8001244:	686a      	ldr	r2, [r5, #4]
 8001246:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800124a:	3a01      	subs	r2, #1
 800124c:	4318      	orrs	r0, r3
 800124e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001252:	60e0      	str	r0, [r4, #12]
 8001254:	e7c0      	b.n	80011d8 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800125c:	d1f1      	bne.n	8001242 <RCCEx_PLLSAI1_Config+0x9a>
 800125e:	2001      	movs	r0, #1
 8001260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	0391      	lsls	r1, r2, #14
 8001266:	d4ec      	bmi.n	8001242 <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800126e:	e7f5      	b.n	800125c <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001270:	f7ff f848 	bl	8000304 <HAL_GetTick>
 8001274:	1bc0      	subs	r0, r0, r7
 8001276:	2802      	cmp	r0, #2
 8001278:	d9b5      	bls.n	80011e6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800127a:	2003      	movs	r0, #3
 800127c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800127e:	6922      	ldr	r2, [r4, #16]
 8001280:	68e9      	ldr	r1, [r5, #12]
 8001282:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001286:	06c9      	lsls	r1, r1, #27
 8001288:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 800128c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001290:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001292:	6123      	str	r3, [r4, #16]
 8001294:	e7bc      	b.n	8001210 <RCCEx_PLLSAI1_Config+0x68>
 8001296:	6923      	ldr	r3, [r4, #16]
 8001298:	6968      	ldr	r0, [r5, #20]
 800129a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800129e:	0840      	lsrs	r0, r0, #1
 80012a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80012a4:	3801      	subs	r0, #1
 80012a6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80012aa:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80012ae:	e7f0      	b.n	8001292 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80012b0:	f7ff f828 	bl	8000304 <HAL_GetTick>
 80012b4:	1b80      	subs	r0, r0, r6
 80012b6:	2802      	cmp	r0, #2
 80012b8:	d9b1      	bls.n	800121e <RCCEx_PLLSAI1_Config+0x76>
 80012ba:	e7de      	b.n	800127a <RCCEx_PLLSAI1_Config+0xd2>
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80012c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80012c4:	6805      	ldr	r5, [r0, #0]
 80012c6:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80012ca:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80012cc:	d00e      	beq.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80012ce:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80012d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80012d4:	d053      	beq.n	800137e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80012d6:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80012da:	d055      	beq.n	8001388 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80012dc:	2900      	cmp	r1, #0
 80012de:	d15e      	bne.n	800139e <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80012e0:	3004      	adds	r0, #4
 80012e2:	f7ff ff61 	bl	80011a8 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80012e6:	4605      	mov	r5, r0
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d04d      	beq.n	8001388 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	039e      	lsls	r6, r3, #14
 80012f0:	d563      	bpl.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012f2:	4eb8      	ldr	r6, [pc, #736]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80012f4:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80012f6:	00d8      	lsls	r0, r3, #3
 80012f8:	f140 8160 	bpl.w	80015bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    FlagStatus       pwrclkchanged = RESET;
 80012fc:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012fe:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 80015d8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8001302:	f8d8 3000 	ldr.w	r3, [r8]
 8001306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130a:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 800130e:	f7fe fff9 	bl	8000304 <HAL_GetTick>
 8001312:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001314:	f8d8 3000 	ldr.w	r3, [r8]
 8001318:	05d9      	lsls	r1, r3, #23
 800131a:	d542      	bpl.n	80013a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 800131c:	2d00      	cmp	r5, #0
 800131e:	d147      	bne.n	80013b0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001320:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001324:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001328:	d014      	beq.n	8001354 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800132a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800132c:	4293      	cmp	r3, r2
 800132e:	d011      	beq.n	8001354 <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001330:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001334:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001338:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800133c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001340:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001348:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800134c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001350:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001354:	07da      	lsls	r2, r3, #31
 8001356:	d509      	bpl.n	800136c <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 8001358:	f7fe ffd4 	bl	8000304 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135c:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001360:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001362:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001366:	079b      	lsls	r3, r3, #30
 8001368:	f140 80ff 	bpl.w	800156a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800136c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001370:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001376:	4313      	orrs	r3, r2
 8001378:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 800137c:	e018      	b.n	80013b0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800137e:	4a95      	ldr	r2, [pc, #596]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001380:	68d3      	ldr	r3, [r2, #12]
 8001382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001386:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001388:	4a92      	ldr	r2, [pc, #584]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800138a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800138c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001390:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001394:	430b      	orrs	r3, r1
 8001396:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800139a:	2500      	movs	r5, #0
 800139c:	e7a6      	b.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 800139e:	2501      	movs	r5, #1
 80013a0:	e7a4      	b.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a2:	f7fe ffaf 	bl	8000304 <HAL_GetTick>
 80013a6:	eba0 0009 	sub.w	r0, r0, r9
 80013aa:	2802      	cmp	r0, #2
 80013ac:	d9b2      	bls.n	8001314 <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 80013ae:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80013b0:	b11f      	cbz	r7, 80013ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b2:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80013b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b8:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	07df      	lsls	r7, r3, #31
 80013be:	d508      	bpl.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80013c0:	4984      	ldr	r1, [pc, #528]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80013c2:	6a20      	ldr	r0, [r4, #32]
 80013c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013c8:	f022 0203 	bic.w	r2, r2, #3
 80013cc:	4302      	orrs	r2, r0
 80013ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80013d2:	079e      	lsls	r6, r3, #30
 80013d4:	d508      	bpl.n	80013e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80013d6:	497f      	ldr	r1, [pc, #508]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80013d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013de:	f022 020c 	bic.w	r2, r2, #12
 80013e2:	4302      	orrs	r2, r0
 80013e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80013e8:	0758      	lsls	r0, r3, #29
 80013ea:	d508      	bpl.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80013ec:	4979      	ldr	r1, [pc, #484]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80013ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80013f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013f4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80013f8:	4302      	orrs	r2, r0
 80013fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80013fe:	0719      	lsls	r1, r3, #28
 8001400:	d508      	bpl.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001402:	4974      	ldr	r1, [pc, #464]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001404:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001406:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800140a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800140e:	4302      	orrs	r2, r0
 8001410:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001414:	069a      	lsls	r2, r3, #26
 8001416:	d508      	bpl.n	800142a <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001418:	496e      	ldr	r1, [pc, #440]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800141a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800141c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001420:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001424:	4302      	orrs	r2, r0
 8001426:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800142a:	059f      	lsls	r7, r3, #22
 800142c:	d508      	bpl.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800142e:	4969      	ldr	r1, [pc, #420]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001430:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001432:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001436:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800143a:	4302      	orrs	r2, r0
 800143c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001440:	055e      	lsls	r6, r3, #21
 8001442:	d508      	bpl.n	8001456 <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001444:	4963      	ldr	r1, [pc, #396]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001446:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001448:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800144c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001450:	4302      	orrs	r2, r0
 8001452:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001456:	0658      	lsls	r0, r3, #25
 8001458:	d508      	bpl.n	800146c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800145a:	495e      	ldr	r1, [pc, #376]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800145c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800145e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001462:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001466:	4302      	orrs	r2, r0
 8001468:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800146c:	0619      	lsls	r1, r3, #24
 800146e:	d508      	bpl.n	8001482 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001470:	4958      	ldr	r1, [pc, #352]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001472:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001474:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001478:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800147c:	4302      	orrs	r2, r0
 800147e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001482:	05da      	lsls	r2, r3, #23
 8001484:	d508      	bpl.n	8001498 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001486:	4953      	ldr	r1, [pc, #332]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001488:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800148a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800148e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001492:	4302      	orrs	r2, r0
 8001494:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001498:	02df      	lsls	r7, r3, #11
 800149a:	d508      	bpl.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800149c:	494d      	ldr	r1, [pc, #308]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800149e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80014a0:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 80014a4:	f022 0203 	bic.w	r2, r2, #3
 80014a8:	4302      	orrs	r2, r0
 80014aa:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80014ae:	049e      	lsls	r6, r3, #18
 80014b0:	d50f      	bpl.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014b2:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80014b4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80014b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014ba:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014be:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80014c0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80014c8:	d157      	bne.n	800157a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80014ca:	68d3      	ldr	r3, [r2, #12]
 80014cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014d0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	0318      	lsls	r0, r3, #12
 80014d6:	d50f      	bpl.n	80014f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80014d8:	4a3e      	ldr	r2, [pc, #248]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80014da:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80014dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014e0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014e4:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80014e6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80014ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80014ee:	d14f      	bne.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80014f0:	68d3      	ldr	r3, [r2, #12]
 80014f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014f6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	0359      	lsls	r1, r3, #13
 80014fc:	d50f      	bpl.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80014fe:	4a35      	ldr	r2, [pc, #212]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001500:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001502:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001506:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800150a:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800150c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001514:	d147      	bne.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001516:	68d3      	ldr	r3, [r2, #12]
 8001518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800151c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	045a      	lsls	r2, r3, #17
 8001522:	d512      	bpl.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001524:	492b      	ldr	r1, [pc, #172]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001526:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001528:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800152c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001530:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001532:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800153a:	d106      	bne.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x28a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800153c:	2102      	movs	r1, #2
 800153e:	1d20      	adds	r0, r4, #4
 8001540:	f7ff fe32 	bl	80011a8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001544:	2800      	cmp	r0, #0
 8001546:	bf18      	it	ne
 8001548:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	03db      	lsls	r3, r3, #15
 800154e:	d508      	bpl.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001550:	4a20      	ldr	r2, [pc, #128]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001552:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001554:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800155c:	430b      	orrs	r3, r1
 800155e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001562:	4628      	mov	r0, r5
 8001564:	b003      	add	sp, #12
 8001566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7fe fecb 	bl	8000304 <HAL_GetTick>
 800156e:	eba0 0008 	sub.w	r0, r0, r8
 8001572:	4548      	cmp	r0, r9
 8001574:	f67f aef5 	bls.w	8001362 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001578:	e719      	b.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800157a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800157e:	d1a8      	bne.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001580:	2101      	movs	r1, #1
 8001582:	1d20      	adds	r0, r4, #4
 8001584:	f7ff fe10 	bl	80011a8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001588:	2800      	cmp	r0, #0
 800158a:	bf18      	it	ne
 800158c:	4605      	movne	r5, r0
 800158e:	e7a0      	b.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001590:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001594:	d1b0      	bne.n	80014f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001596:	2101      	movs	r1, #1
 8001598:	1d20      	adds	r0, r4, #4
 800159a:	f7ff fe05 	bl	80011a8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800159e:	2800      	cmp	r0, #0
 80015a0:	bf18      	it	ne
 80015a2:	4605      	movne	r5, r0
 80015a4:	e7a8      	b.n	80014f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80015a6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80015aa:	d1b8      	bne.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x25e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80015ac:	2101      	movs	r1, #1
 80015ae:	1d20      	adds	r0, r4, #4
 80015b0:	f7ff fdfa 	bl	80011a8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80015b4:	2800      	cmp	r0, #0
 80015b6:	bf18      	it	ne
 80015b8:	4605      	movne	r5, r0
 80015ba:	e7b0      	b.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x25e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80015be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c2:	65b3      	str	r3, [r6, #88]	; 0x58
 80015c4:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015ce:	2701      	movs	r7, #1
 80015d0:	e695      	b.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40007000 	.word	0x40007000

080015dc <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <LL_mDelay+0x24>)
{
 80015de:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	9301      	str	r3, [sp, #4]
  uint32_t tmpDelay = Delay;

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80015e4:	9b01      	ldr	r3, [sp, #4]
    tmpDelay++;
  }

  while (tmpDelay != 0U)
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <LL_mDelay+0x24>)
  if(tmpDelay < LL_MAX_DELAY)
 80015e8:	1c41      	adds	r1, r0, #1
    tmpDelay++;
 80015ea:	bf18      	it	ne
 80015ec:	3001      	addne	r0, #1
  while (tmpDelay != 0U)
 80015ee:	b908      	cbnz	r0, 80015f4 <LL_mDelay+0x18>
    {
      tmpDelay--;
    }
  }
}
 80015f0:	b002      	add	sp, #8
 80015f2:	4770      	bx	lr
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	03d2      	lsls	r2, r2, #15
      tmpDelay--;
 80015f8:	bf48      	it	mi
 80015fa:	f100 30ff 	addmi.w	r0, r0, #4294967295
 80015fe:	e7f6      	b.n	80015ee <LL_mDelay+0x12>
 8001600:	e000e010 	.word	0xe000e010

08001604 <L3_ReadI2C.isra.1.constprop.5>:
	}
	return HAL_OK;
}

/* Read L3 over I2C */
static uint16_t L3_ReadI2C(I2C_HandleTypeDef *hi2c, uint8_t *addr, unsigned char* data, uint8_t len)
 8001604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001606:	4605      	mov	r5, r0
 8001608:	460e      	mov	r6, r1
 800160a:	2466      	movs	r4, #102	; 0x66
{
	uint32_t timeOutCounter = 0;

	/* Transmit over i2c channel, address of unit, and data */
	while (HAL_I2C_Master_Transmit(hi2c, L3_WRITE_ADDR, (uint8_t *) data, 1, I2C_TIMEOUT_TX) != HAL_OK)
 800160c:	2764      	movs	r7, #100	; 0x64
 800160e:	9700      	str	r7, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	4632      	mov	r2, r6
 8001614:	21d6      	movs	r1, #214	; 0xd6
 8001616:	4628      	mov	r0, r5
 8001618:	f7ff f80c 	bl	8000634 <HAL_I2C_Master_Transmit>
 800161c:	b960      	cbnz	r0, 8001638 <L3_ReadI2C.isra.1.constprop.5+0x34>
 800161e:	2466      	movs	r4, #102	; 0x66
		timeOutCounter++;
	}

	timeOutCounter = 0;
	/* Receive on same i2c channel, same unit address */
	while (HAL_I2C_Master_Receive(hi2c, L3_READ_ADDR, (uint8_t *) data, len, I2C_TIMEOUT_RX) != HAL_OK)
 8001620:	2764      	movs	r7, #100	; 0x64
 8001622:	9700      	str	r7, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	4632      	mov	r2, r6
 8001628:	21d7      	movs	r1, #215	; 0xd7
 800162a:	4628      	mov	r0, r5
 800162c:	f7ff f896 	bl	800075c <HAL_I2C_Master_Receive>
 8001630:	b128      	cbz	r0, 800163e <L3_ReadI2C.isra.1.constprop.5+0x3a>
	{
		/* If timeout, report error */
		if (timeOutCounter > I2C_TIMEOUT_RX)
 8001632:	3c01      	subs	r4, #1
 8001634:	d1f5      	bne.n	8001622 <L3_ReadI2C.isra.1.constprop.5+0x1e>
 8001636:	e001      	b.n	800163c <L3_ReadI2C.isra.1.constprop.5+0x38>
		if (timeOutCounter > I2C_TIMEOUT_TX)
 8001638:	3c01      	subs	r4, #1
 800163a:	d1e8      	bne.n	800160e <L3_ReadI2C.isra.1.constprop.5+0xa>
			return HAL_ERROR;
 800163c:	2001      	movs	r0, #1
			return HAL_ERROR;
		}
		timeOutCounter++;
	}
	return HAL_OK;
}
 800163e:	b003      	add	sp, #12
 8001640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001644 <L3_GetGyroStruct>:
	if(hi2c == &hi2c2)
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <L3_GetGyroStruct+0x1c>)
 8001646:	4298      	cmp	r0, r3
 8001648:	d007      	beq.n	800165a <L3_GetGyroStruct+0x16>
		return &gyroStruct_i2c4;
 800164a:	4a06      	ldr	r2, [pc, #24]	; (8001664 <L3_GetGyroStruct+0x20>)
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <L3_GetGyroStruct+0x24>)
 800164e:	4907      	ldr	r1, [pc, #28]	; (800166c <L3_GetGyroStruct+0x28>)
 8001650:	4288      	cmp	r0, r1
 8001652:	bf0c      	ite	eq
 8001654:	4618      	moveq	r0, r3
 8001656:	4610      	movne	r0, r2
 8001658:	4770      	bx	lr
		return &gyroStruct_i2c2;
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <L3_GetGyroStruct+0x2c>)
}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20005f34 	.word	0x20005f34
 8001664:	20005e7c 	.word	0x20005e7c
 8001668:	20005e6c 	.word	0x20005e6c
 800166c:	20005e9c 	.word	0x20005e9c
 8001670:	20005e72 	.word	0x20005e72

08001674 <L3_ReadAxesXYZ>:
	gyro->y *= dpsSensitivity;
	gyro->z *= dpsSensitivity;
}

void L3_ReadAxesXYZ(I2C_HandleTypeDef *hi2c, GyroScopeData *gyro)
{
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	b085      	sub	sp, #20
	dRead[0] = L3_OUT_X_L;
 8001678:	ad04      	add	r5, sp, #16
 800167a:	2328      	movs	r3, #40	; 0x28
 800167c:	f805 3d04 	strb.w	r3, [r5, #-4]!
{
 8001680:	460e      	mov	r6, r1
 8001682:	4607      	mov	r7, r0
	L3_ReadI2C(hi2c, (uint8_t*)L3_READ_ADDR, dRead, 1);
 8001684:	4629      	mov	r1, r5
 8001686:	f7ff ffbd 	bl	8001604 <L3_ReadI2C.isra.1.constprop.5>
	dRead[0] = L3_OUT_X_H;
 800168a:	2329      	movs	r3, #41	; 0x29
	L3_ReadI2C(hi2c, (uint8_t*)L3_READ_ADDR, dRead, 1);
 800168c:	4629      	mov	r1, r5
 800168e:	4638      	mov	r0, r7
	data[0] = dRead[0];
 8001690:	f89d 400c 	ldrb.w	r4, [sp, #12]
	dRead[0] = L3_OUT_X_H;
 8001694:	f88d 300c 	strb.w	r3, [sp, #12]
	L3_ReadI2C(hi2c, (uint8_t*)L3_READ_ADDR, dRead, 1);
 8001698:	f7ff ffb4 	bl	8001604 <L3_ReadI2C.isra.1.constprop.5>
	gyro->x = ((data[0])  | (data[1] << 8));
 800169c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80016a0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80016a4:	8034      	strh	r4, [r6, #0]
	dRead[0] = L3_OUT_Y_L;
 80016a6:	232a      	movs	r3, #42	; 0x2a
	L3_ReadI2C(hi2c, (uint8_t*)L3_READ_ADDR, dRead, 1);
 80016a8:	4629      	mov	r1, r5
 80016aa:	4638      	mov	r0, r7
	dRead[0] = L3_OUT_Y_L;
 80016ac:	f88d 300c 	strb.w	r3, [sp, #12]
	L3_ReadI2C(hi2c, (uint8_t*)L3_READ_ADDR, dRead, 1);
 80016b0:	f7ff ffa8 	bl	8001604 <L3_ReadI2C.isra.1.constprop.5>
	dRead[0] = L3_OUT_Y_H;
 80016b4:	232b      	movs	r3, #43	; 0x2b
	L3_ReadI2C(hi2c, (uint8_t*)L3_READ_ADDR, dRead, 1);
 80016b6:	4629      	mov	r1, r5
 80016b8:	4638      	mov	r0, r7
	data[0] = dRead[0];
 80016ba:	f89d 400c 	ldrb.w	r4, [sp, #12]
	dRead[0] = L3_OUT_Y_H;
 80016be:	f88d 300c 	strb.w	r3, [sp, #12]
	L3_ReadI2C(hi2c, (uint8_t*)L3_READ_ADDR, dRead, 1);
 80016c2:	f7ff ff9f 	bl	8001604 <L3_ReadI2C.isra.1.constprop.5>
	gyro->y = ((data[0])  | (data[1] << 8));
 80016c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80016ca:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80016ce:	8074      	strh	r4, [r6, #2]
	dRead[0] = L3_OUT_Z_L;
 80016d0:	232c      	movs	r3, #44	; 0x2c
	L3_ReadI2C(hi2c, (uint8_t*)L3_READ_ADDR, dRead, 1);
 80016d2:	4629      	mov	r1, r5
 80016d4:	4638      	mov	r0, r7
	dRead[0] = L3_OUT_Z_L;
 80016d6:	f88d 300c 	strb.w	r3, [sp, #12]
	L3_ReadI2C(hi2c, (uint8_t*)L3_READ_ADDR, dRead, 1);
 80016da:	f7ff ff93 	bl	8001604 <L3_ReadI2C.isra.1.constprop.5>
	dRead[0] = L3_OUT_Z_H;
 80016de:	232d      	movs	r3, #45	; 0x2d
	L3_ReadI2C(hi2c, (uint8_t*)L3_READ_ADDR, dRead, 1);
 80016e0:	4629      	mov	r1, r5
 80016e2:	4638      	mov	r0, r7
	data[0] = dRead[0];
 80016e4:	f89d 400c 	ldrb.w	r4, [sp, #12]
	dRead[0] = L3_OUT_Z_H;
 80016e8:	f88d 300c 	strb.w	r3, [sp, #12]
	L3_ReadI2C(hi2c, (uint8_t*)L3_READ_ADDR, dRead, 1);
 80016ec:	f7ff ff8a 	bl	8001604 <L3_ReadI2C.isra.1.constprop.5>
	gyro->z = ((data[0])  | (data[1] << 8));
 80016f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
	L3_ReadAxisX(hi2c, gyro);
	L3_ReadAxisY(hi2c, gyro);
	L3_ReadAxisZ(hi2c, gyro);
	L3_AdjustAxesXYZ(gyro);

	printf("x: %d, y: %d, z:%d\r\n", gyro->x, gyro->y, gyro->z);
 80016f4:	481a      	ldr	r0, [pc, #104]	; (8001760 <L3_ReadAxesXYZ+0xec>)
	gyro->z = ((data[0])  | (data[1] << 8));
 80016f6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	gyro->x *= dpsSensitivity;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <L3_ReadAxesXYZ+0xf0>)
 80016fc:	edd3 6a00 	vldr	s13, [r3]
 8001700:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001704:	ee07 3a10 	vmov	s14, r3
 8001708:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	gyro->y *= dpsSensitivity;
 800170c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
	gyro->x *= dpsSensitivity;
 8001710:	ee27 7a26 	vmul.f32	s14, s14, s13
	gyro->z = ((data[0])  | (data[1] << 8));
 8001714:	b224      	sxth	r4, r4
	gyro->x *= dpsSensitivity;
 8001716:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	gyro->y *= dpsSensitivity;
 800171a:	ee07 3a10 	vmov	s14, r3
 800171e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	gyro->x *= dpsSensitivity;
 8001722:	edcd 7a01 	vstr	s15, [sp, #4]
	gyro->y *= dpsSensitivity;
 8001726:	ee27 7a26 	vmul.f32	s14, s14, s13
	gyro->x *= dpsSensitivity;
 800172a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800172e:	8031      	strh	r1, [r6, #0]
	gyro->y *= dpsSensitivity;
 8001730:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001734:	edcd 7a01 	vstr	s15, [sp, #4]
	gyro->z *= dpsSensitivity;
 8001738:	ee07 4a90 	vmov	s15, r4
 800173c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	gyro->y *= dpsSensitivity;
 8001740:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8001744:	8072      	strh	r2, [r6, #2]
	gyro->z *= dpsSensitivity;
 8001746:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800174a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174e:	edcd 7a01 	vstr	s15, [sp, #4]
 8001752:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001756:	80b3      	strh	r3, [r6, #4]
	printf("x: %d, y: %d, z:%d\r\n", gyro->x, gyro->y, gyro->z);
 8001758:	f000 fa98 	bl	8001c8c <iprintf>
}
 800175c:	b005      	add	sp, #20
 800175e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001760:	08002a94 	.word	0x08002a94
 8001764:	20005e78 	.word	0x20005e78

08001768 <LIS_ReadI2C.isra.1.constprop.5>:
	}
	return HAL_OK;
}

/* Read LIS over I2C */
static uint16_t LIS_ReadI2C(I2C_HandleTypeDef *hi2c, uint8_t *addr, unsigned char* data, uint8_t len)
 8001768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800176a:	4605      	mov	r5, r0
 800176c:	460e      	mov	r6, r1
 800176e:	2466      	movs	r4, #102	; 0x66
{
	uint32_t timeOutCounter = 0;

	/* Transmit over i2c channel, address of unit, and data */
	while (HAL_I2C_Master_Transmit(hi2c, LIS_WRITE_ADDR, (uint8_t *) data, 1, I2C_TIMEOUT_TX) != HAL_OK)
 8001770:	2764      	movs	r7, #100	; 0x64
 8001772:	9700      	str	r7, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	4632      	mov	r2, r6
 8001778:	2132      	movs	r1, #50	; 0x32
 800177a:	4628      	mov	r0, r5
 800177c:	f7fe ff5a 	bl	8000634 <HAL_I2C_Master_Transmit>
 8001780:	b960      	cbnz	r0, 800179c <LIS_ReadI2C.isra.1.constprop.5+0x34>
 8001782:	2466      	movs	r4, #102	; 0x66
		timeOutCounter++;
	}

	timeOutCounter = 0;
	/* Receive on same i2c channel, same unit address */
	while (HAL_I2C_Master_Receive(hi2c, LIS_READ_ADDR, (uint8_t *) data, len, I2C_TIMEOUT_RX) != HAL_OK)
 8001784:	2764      	movs	r7, #100	; 0x64
 8001786:	9700      	str	r7, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	4632      	mov	r2, r6
 800178c:	2133      	movs	r1, #51	; 0x33
 800178e:	4628      	mov	r0, r5
 8001790:	f7fe ffe4 	bl	800075c <HAL_I2C_Master_Receive>
 8001794:	b138      	cbz	r0, 80017a6 <LIS_ReadI2C.isra.1.constprop.5+0x3e>
	{
		/* If timeout, report error */
		if (timeOutCounter > I2C_TIMEOUT_RX)
 8001796:	3c01      	subs	r4, #1
 8001798:	d1f5      	bne.n	8001786 <LIS_ReadI2C.isra.1.constprop.5+0x1e>
 800179a:	e001      	b.n	80017a0 <LIS_ReadI2C.isra.1.constprop.5+0x38>
		if (timeOutCounter > I2C_TIMEOUT_TX)
 800179c:	3c01      	subs	r4, #1
 800179e:	d1e8      	bne.n	8001772 <LIS_ReadI2C.isra.1.constprop.5+0xa>
			HeartBeatToggle();
 80017a0:	f000 f93e 	bl	8001a20 <HeartBeatToggle>
			return HAL_ERROR;
 80017a4:	2001      	movs	r0, #1
			return HAL_ERROR;
		}
		timeOutCounter++;
	}
	return HAL_OK;
}
 80017a6:	b003      	add	sp, #12
 80017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080017ac <LIS_GetAccelerationStruct>:
	if(hi2c == &hi2c2)
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <LIS_GetAccelerationStruct+0x1c>)
 80017ae:	4298      	cmp	r0, r3
 80017b0:	d007      	beq.n	80017c2 <LIS_GetAccelerationStruct+0x16>
		return &accStruct_i2c4;
 80017b2:	4a06      	ldr	r2, [pc, #24]	; (80017cc <LIS_GetAccelerationStruct+0x20>)
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <LIS_GetAccelerationStruct+0x24>)
 80017b6:	4907      	ldr	r1, [pc, #28]	; (80017d4 <LIS_GetAccelerationStruct+0x28>)
 80017b8:	4288      	cmp	r0, r1
 80017ba:	bf0c      	ite	eq
 80017bc:	4618      	moveq	r0, r3
 80017be:	4610      	movne	r0, r2
 80017c0:	4770      	bx	lr
		return &accStruct_i2c2;
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <LIS_GetAccelerationStruct+0x2c>)
}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20005f34 	.word	0x20005f34
 80017cc:	20005e96 	.word	0x20005e96
 80017d0:	20005e84 	.word	0x20005e84
 80017d4:	20005e9c 	.word	0x20005e9c
 80017d8:	20005e90 	.word	0x20005e90

080017dc <LIS_ReadAxesXYZ>:
	acc->y *= accSensitivity;
	acc->z *= accSensitivity;
}

void LIS_ReadAxesXYZ(I2C_HandleTypeDef *hi2c, Acceleration *acc)
{
 80017dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017de:	b085      	sub	sp, #20
	dRead[0] = LIS_OUT_X_L;
 80017e0:	ad04      	add	r5, sp, #16
 80017e2:	2328      	movs	r3, #40	; 0x28
 80017e4:	f805 3d04 	strb.w	r3, [r5, #-4]!
{
 80017e8:	460e      	mov	r6, r1
 80017ea:	4607      	mov	r7, r0
	LIS_ReadI2C(hi2c, (uint8_t*)LIS_READ_ADDR, dRead, 1);
 80017ec:	4629      	mov	r1, r5
 80017ee:	f7ff ffbb 	bl	8001768 <LIS_ReadI2C.isra.1.constprop.5>
	dRead[0] = LIS_OUT_X_H;
 80017f2:	2329      	movs	r3, #41	; 0x29
	LIS_ReadI2C(hi2c, (uint8_t*)LIS_READ_ADDR, dRead, 1);
 80017f4:	4629      	mov	r1, r5
 80017f6:	4638      	mov	r0, r7
	data[0] = dRead[0];
 80017f8:	f89d 400c 	ldrb.w	r4, [sp, #12]
	dRead[0] = LIS_OUT_X_H;
 80017fc:	f88d 300c 	strb.w	r3, [sp, #12]
	LIS_ReadI2C(hi2c, (uint8_t*)LIS_READ_ADDR, dRead, 1);
 8001800:	f7ff ffb2 	bl	8001768 <LIS_ReadI2C.isra.1.constprop.5>
	acc->x = ((data[0])  | (data[1] << 8));
 8001804:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001808:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800180c:	8034      	strh	r4, [r6, #0]
	dRead[0] = LIS_OUT_Y_L;
 800180e:	232a      	movs	r3, #42	; 0x2a
	LIS_ReadI2C(hi2c, (uint8_t*)LIS_READ_ADDR, dRead, 1);
 8001810:	4629      	mov	r1, r5
 8001812:	4638      	mov	r0, r7
	dRead[0] = LIS_OUT_Y_L;
 8001814:	f88d 300c 	strb.w	r3, [sp, #12]
	LIS_ReadI2C(hi2c, (uint8_t*)LIS_READ_ADDR, dRead, 1);
 8001818:	f7ff ffa6 	bl	8001768 <LIS_ReadI2C.isra.1.constprop.5>
	dRead[0] = LIS_OUT_Y_H;
 800181c:	232b      	movs	r3, #43	; 0x2b
	LIS_ReadI2C(hi2c, (uint8_t*)LIS_READ_ADDR, dRead, 1);
 800181e:	4629      	mov	r1, r5
 8001820:	4638      	mov	r0, r7
	data[0] = dRead[0];
 8001822:	f89d 400c 	ldrb.w	r4, [sp, #12]
	dRead[0] = LIS_OUT_Y_H;
 8001826:	f88d 300c 	strb.w	r3, [sp, #12]
	LIS_ReadI2C(hi2c, (uint8_t*)LIS_READ_ADDR, dRead, 1);
 800182a:	f7ff ff9d 	bl	8001768 <LIS_ReadI2C.isra.1.constprop.5>
	acc->y = (data[0]) | (data[1] << 8);
 800182e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001832:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8001836:	8074      	strh	r4, [r6, #2]
	dRead[0] = LIS_OUT_Z_L;
 8001838:	232c      	movs	r3, #44	; 0x2c
	LIS_ReadI2C(hi2c, (uint8_t*)LIS_READ_ADDR, dRead, 1);
 800183a:	4629      	mov	r1, r5
 800183c:	4638      	mov	r0, r7
	dRead[0] = LIS_OUT_Z_L;
 800183e:	f88d 300c 	strb.w	r3, [sp, #12]
	LIS_ReadI2C(hi2c, (uint8_t*)LIS_READ_ADDR, dRead, 1);
 8001842:	f7ff ff91 	bl	8001768 <LIS_ReadI2C.isra.1.constprop.5>
	dRead[0] = LIS_OUT_Z_H;
 8001846:	232d      	movs	r3, #45	; 0x2d
	LIS_ReadI2C(hi2c, (uint8_t*)LIS_READ_ADDR, dRead, 1);
 8001848:	4629      	mov	r1, r5
 800184a:	4638      	mov	r0, r7
	data[0] = dRead[0];
 800184c:	f89d 400c 	ldrb.w	r4, [sp, #12]
	dRead[0] = LIS_OUT_Z_H;
 8001850:	f88d 300c 	strb.w	r3, [sp, #12]
	LIS_ReadI2C(hi2c, (uint8_t*)LIS_READ_ADDR, dRead, 1);
 8001854:	f7ff ff88 	bl	8001768 <LIS_ReadI2C.isra.1.constprop.5>
	acc->z = (data[0]) | (data[1] << 8);
 8001858:	f89d 300c 	ldrb.w	r3, [sp, #12]
	LIS_ReadAxisX(hi2c, acc);
	LIS_ReadAxisY(hi2c, acc);
	LIS_ReadAxisZ(hi2c, acc);
	LIS_AdjustAxesXYZ(acc);

	printf("x: %d, y: %d, z:%d\r\n", acc->x, acc->y, acc->z);
 800185c:	481a      	ldr	r0, [pc, #104]	; (80018c8 <LIS_ReadAxesXYZ+0xec>)
	acc->z = (data[0]) | (data[1] << 8);
 800185e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	acc->x *= accSensitivity;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <LIS_ReadAxesXYZ+0xf0>)
 8001864:	edd3 6a00 	vldr	s13, [r3]
 8001868:	f9b6 3000 	ldrsh.w	r3, [r6]
 800186c:	ee07 3a10 	vmov	s14, r3
 8001870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	acc->y *= accSensitivity;
 8001874:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
	acc->x *= accSensitivity;
 8001878:	ee27 7a26 	vmul.f32	s14, s14, s13
	acc->z = (data[0]) | (data[1] << 8);
 800187c:	b224      	sxth	r4, r4
	acc->x *= accSensitivity;
 800187e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	acc->y *= accSensitivity;
 8001882:	ee07 3a10 	vmov	s14, r3
 8001886:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	acc->x *= accSensitivity;
 800188a:	edcd 7a01 	vstr	s15, [sp, #4]
	acc->y *= accSensitivity;
 800188e:	ee27 7a26 	vmul.f32	s14, s14, s13
	acc->x *= accSensitivity;
 8001892:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001896:	8031      	strh	r1, [r6, #0]
	acc->y *= accSensitivity;
 8001898:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800189c:	edcd 7a01 	vstr	s15, [sp, #4]
	acc->z *= accSensitivity;
 80018a0:	ee07 4a90 	vmov	s15, r4
 80018a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	acc->y *= accSensitivity;
 80018a8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80018ac:	8072      	strh	r2, [r6, #2]
	acc->z *= accSensitivity;
 80018ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b6:	edcd 7a01 	vstr	s15, [sp, #4]
 80018ba:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80018be:	80b3      	strh	r3, [r6, #4]
	printf("x: %d, y: %d, z:%d\r\n", acc->x, acc->y, acc->z);
 80018c0:	f000 f9e4 	bl	8001c8c <iprintf>
}
 80018c4:	b005      	add	sp, #20
 80018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c8:	08002a94 	.word	0x08002a94
 80018cc:	20005e8c 	.word	0x20005e8c

080018d0 <SystemPower_Config>:

void SystemPower_Config(void)
{

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE()
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <SystemPower_Config+0x1c>)
 80018d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018d8:	659a      	str	r2, [r3, #88]	; 0x58
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 80018dc:	b082      	sub	sp, #8
	__HAL_RCC_PWR_CLK_ENABLE()
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	9b01      	ldr	r3, [sp, #4]
//	HAL_PWREx_EnableUltraLowPower();
//
//	/* Enable the fast wake up from Ultra low power mode */
//	HAL_PWREx_EnableFastWakeUp();

}
 80018e6:	b002      	add	sp, #8
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000

080018f0 <SystemClock_Config>:

	SystemClock_Config();
}

void SystemClock_Config(void)
{
 80018f0:	b510      	push	{r4, lr}
 80018f2:	b0b0      	sub	sp, #192	; 0xc0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f4:	2244      	movs	r2, #68	; 0x44
 80018f6:	2100      	movs	r1, #0
 80018f8:	a805      	add	r0, sp, #20
 80018fa:	f000 f9bf 	bl	8001c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018fe:	2214      	movs	r2, #20
 8001900:	2100      	movs	r1, #0
 8001902:	4668      	mov	r0, sp
 8001904:	f000 f9ba 	bl	8001c7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001908:	2268      	movs	r2, #104	; 0x68
 800190a:	2100      	movs	r1, #0
 800190c:	a816      	add	r0, sp, #88	; 0x58
 800190e:	f000 f9b5 	bl	8001c7c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001912:	f7ff f817 	bl	8000944 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001916:	4a2e      	ldr	r2, [pc, #184]	; (80019d0 <SystemClock_Config+0xe0>)
 8001918:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800191c:	f023 0318 	bic.w	r3, r3, #24
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001924:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001926:	230d      	movs	r3, #13
 8001928:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800192a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800192c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001930:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001932:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001934:	2208      	movs	r2, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001936:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001938:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 8;
 800193c:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001940:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001942:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001944:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001946:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001948:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800194a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	f7ff f8ec 	bl	8000b28 <HAL_RCC_OscConfig>
 8001950:	b108      	cbz	r0, 8001956 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001952:	f000 f89b 	bl	8001a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001956:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001958:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800195c:	2101      	movs	r1, #1
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195e:	2400      	movs	r4, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001960:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001962:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001964:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001966:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001968:	f7ff fb88 	bl	800107c <HAL_RCC_ClockConfig>
 800196c:	b108      	cbz	r0, 8001972 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800196e:	f000 f88d 	bl	8001a8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <SystemClock_Config+0xe4>)
 8001974:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001976:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800197a:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800197c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001980:	932f      	str	r3, [sp, #188]	; 0xbc
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001982:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001986:	932a      	str	r3, [sp, #168]	; 0xa8
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8001988:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800198a:	2303      	movs	r3, #3
 800198c:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800198e:	2301      	movs	r3, #1
 8001990:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8001992:	230c      	movs	r3, #12
 8001994:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001996:	2307      	movs	r3, #7
 8001998:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800199a:	2302      	movs	r3, #2
 800199c:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800199e:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a0:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80019a2:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019a6:	941e      	str	r4, [sp, #120]	; 0x78
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019a8:	941f      	str	r4, [sp, #124]	; 0x7c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019aa:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80019ac:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80019ae:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80019b0:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80019b2:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b4:	f7ff fc84 	bl	80012c0 <HAL_RCCEx_PeriphCLKConfig>
 80019b8:	b108      	cbz	r0, 80019be <SystemClock_Config+0xce>
  {
    Error_Handler();
 80019ba:	f000 f867 	bl	8001a8c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019c2:	f7fe ffcf 	bl	8000964 <HAL_PWREx_ControlVoltageScaling>
 80019c6:	b108      	cbz	r0, 80019cc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80019c8:	f000 f860 	bl	8001a8c <Error_Handler>
  }
}
 80019cc:	b030      	add	sp, #192	; 0xc0
 80019ce:	bd10      	pop	{r4, pc}
 80019d0:	40021000 	.word	0x40021000
 80019d4:	001a6383 	.word	0x001a6383

080019d8 <SystemSleepAndWakeup>:
{
 80019d8:	b508      	push	{r3, lr}
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80019da:	2001      	movs	r0, #1
 80019dc:	f7fe fff8 	bl	80009d0 <HAL_PWREx_EnterSTOP2Mode>
}
 80019e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SystemClock_Config();
 80019e4:	f7ff bf84 	b.w	80018f0 <SystemClock_Config>

080019e8 <_write>:
				 or
				 printf("Variable 1: %d\r\n, var1); to get the variable printed
--------------------------------------------------------------------------------------------------*/
int _write(int file, char *data, int len)
{
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80019e8:	3801      	subs	r0, #1
 80019ea:	2801      	cmp	r0, #1
{
 80019ec:	b510      	push	{r4, lr}
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80019ee:	d90d      	bls.n	8001a0c <_write+0x24>
	{
		errno = EBADF;
 80019f0:	f000 f91a 	bl	8001c28 <__errno>
 80019f4:	2309      	movs	r3, #9
 80019f6:	6003      	str	r3, [r0, #0]
		return -1;
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80019fe:	69c4      	ldr	r4, [r0, #28]
 8001a00:	0624      	lsls	r4, r4, #24
 8001a02:	d5fc      	bpl.n	80019fe <_write+0x16>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8001a04:	f813 4b01 	ldrb.w	r4, [r3], #1
 8001a08:	8504      	strh	r4, [r0, #40]	; 0x28
 8001a0a:	e002      	b.n	8001a12 <_write+0x2a>
	}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
	{
		while (!LL_USART_IsActiveFlag_TXE(USART_Generic))
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <_write+0x34>)
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	460b      	mov	r3, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	1a5c      	subs	r4, r3, r1
 8001a14:	4294      	cmp	r4, r2
 8001a16:	dbf2      	blt.n	80019fe <_write+0x16>
	/* Wait for TC flag to be raised for last char */
//	while (!LL_USART_IsActiveFlag_TC(LPUART1))
//	{
//	}

	return 0;
 8001a18:	2000      	movs	r0, #0
 8001a1a:	bd10      	pop	{r4, pc}
 8001a1c:	20000008 	.word	0x20000008

08001a20 <HeartBeatToggle>:
  Description  :
  Argument(s)  :
--------------------------------------------------------------------------------------------------*/
void HeartBeatToggle(void)
{
	HAL_GPIO_TogglePin(HeartBeat_GPIO_Port, HeartBeat_Pin);
 8001a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a24:	4801      	ldr	r0, [pc, #4]	; (8001a2c <HeartBeatToggle+0xc>)
 8001a26:	f7fe bce3 	b.w	80003f0 <HAL_GPIO_TogglePin>
 8001a2a:	bf00      	nop
 8001a2c:	48000800 	.word	0x48000800

08001a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a30:	b508      	push	{r3, lr}
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a32:	f7fe fc4b 	bl	80002cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a36:	f7ff ff5b 	bl	80018f0 <SystemClock_Config>
//	 gyroscopeDetect = 1;
// }
// LIS_initStruct(LIS_GetAccelerationStruct(&hi2c3));
// L3_initStruct(L3_GetGyroStruct(&hi2c3));

 HAL_Delay(1000);
 8001a3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a3e:	f7fe fc67 	bl	8000310 <HAL_Delay>

SystemPower_Config();
 8001a42:	f7ff ff45 	bl	80018d0 <SystemPower_Config>
SystemSleepAndWakeup();
 8001a46:	f7ff ffc7 	bl	80019d8 <SystemSleepAndWakeup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(accelerometerDetect)
 8001a4a:	4d0d      	ldr	r5, [pc, #52]	; (8001a80 <main+0x50>)
	  {
		  LIS_ReadAxesXYZ(&hi2c3, LIS_GetAccelerationStruct(&hi2c3));
 8001a4c:	4c0d      	ldr	r4, [pc, #52]	; (8001a84 <main+0x54>)
	  }
	  if(gyroscopeDetect)
 8001a4e:	4e0e      	ldr	r6, [pc, #56]	; (8001a88 <main+0x58>)
	  if(accelerometerDetect)
 8001a50:	782b      	ldrb	r3, [r5, #0]
 8001a52:	b133      	cbz	r3, 8001a62 <main+0x32>
		  LIS_ReadAxesXYZ(&hi2c3, LIS_GetAccelerationStruct(&hi2c3));
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7ff fea9 	bl	80017ac <LIS_GetAccelerationStruct>
 8001a5a:	4601      	mov	r1, r0
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f7ff febd 	bl	80017dc <LIS_ReadAxesXYZ>
	  if(gyroscopeDetect)
 8001a62:	7833      	ldrb	r3, [r6, #0]
 8001a64:	b133      	cbz	r3, 8001a74 <main+0x44>
	  {
		  L3_ReadAxesXYZ(&hi2c3, L3_GetGyroStruct(&hi2c3));
 8001a66:	4620      	mov	r0, r4
 8001a68:	f7ff fdec 	bl	8001644 <L3_GetGyroStruct>
 8001a6c:	4601      	mov	r1, r0
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f7ff fe00 	bl	8001674 <L3_ReadAxesXYZ>
	  }
	  HeartBeatToggle();
 8001a74:	f7ff ffd4 	bl	8001a20 <HeartBeatToggle>
//
	  LL_mDelay(100);
 8001a78:	2064      	movs	r0, #100	; 0x64
 8001a7a:	f7ff fdaf 	bl	80015dc <LL_mDelay>
	  if(accelerometerDetect)
 8001a7e:	e7e7      	b.n	8001a50 <main+0x20>
 8001a80:	20000090 	.word	0x20000090
 8001a84:	20005e9c 	.word	0x20005e9c
 8001a88:	20000091 	.word	0x20000091

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_MspInit+0x2c>)
 8001a92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	661a      	str	r2, [r3, #96]	; 0x60
 8001a9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001a9c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	f002 0201 	and.w	r2, r2, #1
 8001aa2:	9200      	str	r2, [sp, #0]
 8001aa4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001aa8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aac:	659a      	str	r2, [r3, #88]	; 0x58
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab8:	b002      	add	sp, #8
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000

08001ac0 <NMI_Handler>:
 8001ac0:	4770      	bx	lr

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	e7fe      	b.n	8001ac2 <HardFault_Handler>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler>

08001aca <SVC_Handler>:
 8001aca:	4770      	bx	lr

08001acc <DebugMon_Handler>:
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f7fe bc0c 	b.w	80002ec <HAL_IncTick>

08001ad4 <EXTI4_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <EXTI4_IRQHandler+0x10>)
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	06d2      	lsls	r2, r2, #27
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001ada:	bf44      	itt	mi
 8001adc:	2210      	movmi	r2, #16
 8001ade:	615a      	strmi	r2, [r3, #20]
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40010400 	.word	0x40010400

08001ae8 <EXTI9_5_IRQHandler>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <EXTI9_5_IRQHandler+0x28>)
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	0690      	lsls	r0, r2, #26
 8001aee:	d409      	bmi.n	8001b04 <EXTI9_5_IRQHandler+0x1c>
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	0651      	lsls	r1, r2, #25
 8001af4:	d409      	bmi.n	8001b0a <EXTI9_5_IRQHandler+0x22>
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	0592      	lsls	r2, r2, #22
 8001afa:	d502      	bpl.n	8001b02 <EXTI9_5_IRQHandler+0x1a>
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b00:	615a      	str	r2, [r3, #20]
 8001b02:	4770      	bx	lr
 8001b04:	2220      	movs	r2, #32
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	e7f2      	b.n	8001af0 <EXTI9_5_IRQHandler+0x8>
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	615a      	str	r2, [r3, #20]
 8001b0e:	e7f2      	b.n	8001af6 <EXTI9_5_IRQHandler+0xe>
 8001b10:	40010400 	.word	0x40010400

08001b14 <USART1_IRQHandler>:
 8001b14:	4770      	bx	lr

08001b16 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b16:	4770      	bx	lr

08001b18 <LPTIM1_IRQHandler>:
void LPTIM1_IRQHandler(void)
{
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001b18:	4801      	ldr	r0, [pc, #4]	; (8001b20 <LPTIM1_IRQHandler+0x8>)
 8001b1a:	f7fe bebc 	b.w	8000896 <HAL_LPTIM_IRQHandler>
 8001b1e:	bf00      	nop
 8001b20:	20005f80 	.word	0x20005f80

08001b24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b24:	b570      	push	{r4, r5, r6, lr}
 8001b26:	460e      	mov	r6, r1
 8001b28:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	1ba3      	subs	r3, r4, r6
 8001b2e:	429d      	cmp	r5, r3
 8001b30:	dc01      	bgt.n	8001b36 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001b32:	4628      	mov	r0, r5
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001b36:	f3af 8000 	nop.w
 8001b3a:	f804 0b01 	strb.w	r0, [r4], #1
 8001b3e:	e7f5      	b.n	8001b2c <_read+0x8>

08001b40 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001b40:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <_sbrk+0x2c>)
 8001b44:	6819      	ldr	r1, [r3, #0]
{
 8001b46:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001b48:	b909      	cbnz	r1, 8001b4e <_sbrk+0xe>
		heap_end = &end;
 8001b4a:	4909      	ldr	r1, [pc, #36]	; (8001b70 <_sbrk+0x30>)
 8001b4c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8001b4e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001b50:	4669      	mov	r1, sp
 8001b52:	4402      	add	r2, r0
 8001b54:	428a      	cmp	r2, r1
 8001b56:	d906      	bls.n	8001b66 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001b58:	f000 f866 	bl	8001c28 <__errno>
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001b66:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001b68:	bd08      	pop	{r3, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000094 	.word	0x20000094
 8001b70:	20005fbc 	.word	0x20005fbc

08001b74 <_close>:

int _close(int file)
{
	return -1;
}
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	4770      	bx	lr

08001b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001b80:	2000      	movs	r0, #0
 8001b82:	4770      	bx	lr

08001b84 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001b84:	2001      	movs	r0, #1
 8001b86:	4770      	bx	lr

08001b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001b88:	2000      	movs	r0, #0
 8001b8a:	4770      	bx	lr

08001b8c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b8c:	490f      	ldr	r1, [pc, #60]	; (8001bcc <SystemInit+0x40>)
 8001b8e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <SystemInit+0x44>)
 8001b9c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b9e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001ba0:	f042 0201 	orr.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001ba6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001bae:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bb8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bc0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bc2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001bc8:	608b      	str	r3, [r1, #8]
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c0c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bda:	e003      	b.n	8001be4 <LoopCopyDataInit>

08001bdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001be0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001be2:	3104      	adds	r1, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001be8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bec:	d3f6      	bcc.n	8001bdc <CopyDataInit>
	ldr	r2, =_sbss
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bf0:	e002      	b.n	8001bf8 <LoopFillZerobss>

08001bf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bf2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bf4:	f842 3b04 	str.w	r3, [r2], #4

08001bf8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <LoopForever+0x16>)
	cmp	r2, r3
 8001bfa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bfc:	d3f9      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bfe:	f7ff ffc5 	bl	8001b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c02:	f000 f817 	bl	8001c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c06:	f7ff ff13 	bl	8001a30 <main>

08001c0a <LoopForever>:

LoopForever:
    b LoopForever
 8001c0a:	e7fe      	b.n	8001c0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c0c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8001c10:	08002b8c 	.word	0x08002b8c
	ldr	r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c18:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001c1c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001c20:	20005fbc 	.word	0x20005fbc

08001c24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_IRQHandler>
	...

08001c28 <__errno>:
 8001c28:	4b01      	ldr	r3, [pc, #4]	; (8001c30 <__errno+0x8>)
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000010 	.word	0x20000010

08001c34 <__libc_init_array>:
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	4e0d      	ldr	r6, [pc, #52]	; (8001c6c <__libc_init_array+0x38>)
 8001c38:	4c0d      	ldr	r4, [pc, #52]	; (8001c70 <__libc_init_array+0x3c>)
 8001c3a:	1ba4      	subs	r4, r4, r6
 8001c3c:	10a4      	asrs	r4, r4, #2
 8001c3e:	2500      	movs	r5, #0
 8001c40:	42a5      	cmp	r5, r4
 8001c42:	d109      	bne.n	8001c58 <__libc_init_array+0x24>
 8001c44:	4e0b      	ldr	r6, [pc, #44]	; (8001c74 <__libc_init_array+0x40>)
 8001c46:	4c0c      	ldr	r4, [pc, #48]	; (8001c78 <__libc_init_array+0x44>)
 8001c48:	f000 ff18 	bl	8002a7c <_init>
 8001c4c:	1ba4      	subs	r4, r4, r6
 8001c4e:	10a4      	asrs	r4, r4, #2
 8001c50:	2500      	movs	r5, #0
 8001c52:	42a5      	cmp	r5, r4
 8001c54:	d105      	bne.n	8001c62 <__libc_init_array+0x2e>
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
 8001c58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c5c:	4798      	blx	r3
 8001c5e:	3501      	adds	r5, #1
 8001c60:	e7ee      	b.n	8001c40 <__libc_init_array+0xc>
 8001c62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c66:	4798      	blx	r3
 8001c68:	3501      	adds	r5, #1
 8001c6a:	e7f2      	b.n	8001c52 <__libc_init_array+0x1e>
 8001c6c:	08002b84 	.word	0x08002b84
 8001c70:	08002b84 	.word	0x08002b84
 8001c74:	08002b84 	.word	0x08002b84
 8001c78:	08002b88 	.word	0x08002b88

08001c7c <memset>:
 8001c7c:	4402      	add	r2, r0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d100      	bne.n	8001c86 <memset+0xa>
 8001c84:	4770      	bx	lr
 8001c86:	f803 1b01 	strb.w	r1, [r3], #1
 8001c8a:	e7f9      	b.n	8001c80 <memset+0x4>

08001c8c <iprintf>:
 8001c8c:	b40f      	push	{r0, r1, r2, r3}
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <iprintf+0x2c>)
 8001c90:	b513      	push	{r0, r1, r4, lr}
 8001c92:	681c      	ldr	r4, [r3, #0]
 8001c94:	b124      	cbz	r4, 8001ca0 <iprintf+0x14>
 8001c96:	69a3      	ldr	r3, [r4, #24]
 8001c98:	b913      	cbnz	r3, 8001ca0 <iprintf+0x14>
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f000 f9c0 	bl	8002020 <__sinit>
 8001ca0:	ab05      	add	r3, sp, #20
 8001ca2:	9a04      	ldr	r2, [sp, #16]
 8001ca4:	68a1      	ldr	r1, [r4, #8]
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f000 fb7d 	bl	80023a8 <_vfiprintf_r>
 8001cae:	b002      	add	sp, #8
 8001cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cb4:	b004      	add	sp, #16
 8001cb6:	4770      	bx	lr
 8001cb8:	20000010 	.word	0x20000010

08001cbc <__swbuf_r>:
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cbe:	460e      	mov	r6, r1
 8001cc0:	4614      	mov	r4, r2
 8001cc2:	4605      	mov	r5, r0
 8001cc4:	b118      	cbz	r0, 8001cce <__swbuf_r+0x12>
 8001cc6:	6983      	ldr	r3, [r0, #24]
 8001cc8:	b90b      	cbnz	r3, 8001cce <__swbuf_r+0x12>
 8001cca:	f000 f9a9 	bl	8002020 <__sinit>
 8001cce:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <__swbuf_r+0x98>)
 8001cd0:	429c      	cmp	r4, r3
 8001cd2:	d12a      	bne.n	8001d2a <__swbuf_r+0x6e>
 8001cd4:	686c      	ldr	r4, [r5, #4]
 8001cd6:	69a3      	ldr	r3, [r4, #24]
 8001cd8:	60a3      	str	r3, [r4, #8]
 8001cda:	89a3      	ldrh	r3, [r4, #12]
 8001cdc:	071a      	lsls	r2, r3, #28
 8001cde:	d52e      	bpl.n	8001d3e <__swbuf_r+0x82>
 8001ce0:	6923      	ldr	r3, [r4, #16]
 8001ce2:	b363      	cbz	r3, 8001d3e <__swbuf_r+0x82>
 8001ce4:	6923      	ldr	r3, [r4, #16]
 8001ce6:	6820      	ldr	r0, [r4, #0]
 8001ce8:	1ac0      	subs	r0, r0, r3
 8001cea:	6963      	ldr	r3, [r4, #20]
 8001cec:	b2f6      	uxtb	r6, r6
 8001cee:	4298      	cmp	r0, r3
 8001cf0:	4637      	mov	r7, r6
 8001cf2:	db04      	blt.n	8001cfe <__swbuf_r+0x42>
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f000 f928 	bl	8001f4c <_fflush_r>
 8001cfc:	bb28      	cbnz	r0, 8001d4a <__swbuf_r+0x8e>
 8001cfe:	68a3      	ldr	r3, [r4, #8]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60a3      	str	r3, [r4, #8]
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	6022      	str	r2, [r4, #0]
 8001d0a:	701e      	strb	r6, [r3, #0]
 8001d0c:	6963      	ldr	r3, [r4, #20]
 8001d0e:	3001      	adds	r0, #1
 8001d10:	4298      	cmp	r0, r3
 8001d12:	d004      	beq.n	8001d1e <__swbuf_r+0x62>
 8001d14:	89a3      	ldrh	r3, [r4, #12]
 8001d16:	07db      	lsls	r3, r3, #31
 8001d18:	d519      	bpl.n	8001d4e <__swbuf_r+0x92>
 8001d1a:	2e0a      	cmp	r6, #10
 8001d1c:	d117      	bne.n	8001d4e <__swbuf_r+0x92>
 8001d1e:	4621      	mov	r1, r4
 8001d20:	4628      	mov	r0, r5
 8001d22:	f000 f913 	bl	8001f4c <_fflush_r>
 8001d26:	b190      	cbz	r0, 8001d4e <__swbuf_r+0x92>
 8001d28:	e00f      	b.n	8001d4a <__swbuf_r+0x8e>
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <__swbuf_r+0x9c>)
 8001d2c:	429c      	cmp	r4, r3
 8001d2e:	d101      	bne.n	8001d34 <__swbuf_r+0x78>
 8001d30:	68ac      	ldr	r4, [r5, #8]
 8001d32:	e7d0      	b.n	8001cd6 <__swbuf_r+0x1a>
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <__swbuf_r+0xa0>)
 8001d36:	429c      	cmp	r4, r3
 8001d38:	bf08      	it	eq
 8001d3a:	68ec      	ldreq	r4, [r5, #12]
 8001d3c:	e7cb      	b.n	8001cd6 <__swbuf_r+0x1a>
 8001d3e:	4621      	mov	r1, r4
 8001d40:	4628      	mov	r0, r5
 8001d42:	f000 f80d 	bl	8001d60 <__swsetup_r>
 8001d46:	2800      	cmp	r0, #0
 8001d48:	d0cc      	beq.n	8001ce4 <__swbuf_r+0x28>
 8001d4a:	f04f 37ff 	mov.w	r7, #4294967295
 8001d4e:	4638      	mov	r0, r7
 8001d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	08002b10 	.word	0x08002b10
 8001d58:	08002b30 	.word	0x08002b30
 8001d5c:	08002af0 	.word	0x08002af0

08001d60 <__swsetup_r>:
 8001d60:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <__swsetup_r+0xcc>)
 8001d62:	b570      	push	{r4, r5, r6, lr}
 8001d64:	681d      	ldr	r5, [r3, #0]
 8001d66:	4606      	mov	r6, r0
 8001d68:	460c      	mov	r4, r1
 8001d6a:	b125      	cbz	r5, 8001d76 <__swsetup_r+0x16>
 8001d6c:	69ab      	ldr	r3, [r5, #24]
 8001d6e:	b913      	cbnz	r3, 8001d76 <__swsetup_r+0x16>
 8001d70:	4628      	mov	r0, r5
 8001d72:	f000 f955 	bl	8002020 <__sinit>
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <__swsetup_r+0xd0>)
 8001d78:	429c      	cmp	r4, r3
 8001d7a:	d10f      	bne.n	8001d9c <__swsetup_r+0x3c>
 8001d7c:	686c      	ldr	r4, [r5, #4]
 8001d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	0715      	lsls	r5, r2, #28
 8001d86:	d42c      	bmi.n	8001de2 <__swsetup_r+0x82>
 8001d88:	06d0      	lsls	r0, r2, #27
 8001d8a:	d411      	bmi.n	8001db0 <__swsetup_r+0x50>
 8001d8c:	2209      	movs	r2, #9
 8001d8e:	6032      	str	r2, [r6, #0]
 8001d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d94:	81a3      	strh	r3, [r4, #12]
 8001d96:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <__swsetup_r+0xd4>)
 8001d9e:	429c      	cmp	r4, r3
 8001da0:	d101      	bne.n	8001da6 <__swsetup_r+0x46>
 8001da2:	68ac      	ldr	r4, [r5, #8]
 8001da4:	e7eb      	b.n	8001d7e <__swsetup_r+0x1e>
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <__swsetup_r+0xd8>)
 8001da8:	429c      	cmp	r4, r3
 8001daa:	bf08      	it	eq
 8001dac:	68ec      	ldreq	r4, [r5, #12]
 8001dae:	e7e6      	b.n	8001d7e <__swsetup_r+0x1e>
 8001db0:	0751      	lsls	r1, r2, #29
 8001db2:	d512      	bpl.n	8001dda <__swsetup_r+0x7a>
 8001db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001db6:	b141      	cbz	r1, 8001dca <__swsetup_r+0x6a>
 8001db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001dbc:	4299      	cmp	r1, r3
 8001dbe:	d002      	beq.n	8001dc6 <__swsetup_r+0x66>
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	f000 fa1b 	bl	80021fc <_free_r>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	6363      	str	r3, [r4, #52]	; 0x34
 8001dca:	89a3      	ldrh	r3, [r4, #12]
 8001dcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001dd0:	81a3      	strh	r3, [r4, #12]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	6063      	str	r3, [r4, #4]
 8001dd6:	6923      	ldr	r3, [r4, #16]
 8001dd8:	6023      	str	r3, [r4, #0]
 8001dda:	89a3      	ldrh	r3, [r4, #12]
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	81a3      	strh	r3, [r4, #12]
 8001de2:	6923      	ldr	r3, [r4, #16]
 8001de4:	b94b      	cbnz	r3, 8001dfa <__swsetup_r+0x9a>
 8001de6:	89a3      	ldrh	r3, [r4, #12]
 8001de8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df0:	d003      	beq.n	8001dfa <__swsetup_r+0x9a>
 8001df2:	4621      	mov	r1, r4
 8001df4:	4630      	mov	r0, r6
 8001df6:	f000 f9c1 	bl	800217c <__smakebuf_r>
 8001dfa:	89a2      	ldrh	r2, [r4, #12]
 8001dfc:	f012 0301 	ands.w	r3, r2, #1
 8001e00:	d00c      	beq.n	8001e1c <__swsetup_r+0xbc>
 8001e02:	2300      	movs	r3, #0
 8001e04:	60a3      	str	r3, [r4, #8]
 8001e06:	6963      	ldr	r3, [r4, #20]
 8001e08:	425b      	negs	r3, r3
 8001e0a:	61a3      	str	r3, [r4, #24]
 8001e0c:	6923      	ldr	r3, [r4, #16]
 8001e0e:	b953      	cbnz	r3, 8001e26 <__swsetup_r+0xc6>
 8001e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001e18:	d1ba      	bne.n	8001d90 <__swsetup_r+0x30>
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 8001e1c:	0792      	lsls	r2, r2, #30
 8001e1e:	bf58      	it	pl
 8001e20:	6963      	ldrpl	r3, [r4, #20]
 8001e22:	60a3      	str	r3, [r4, #8]
 8001e24:	e7f2      	b.n	8001e0c <__swsetup_r+0xac>
 8001e26:	2000      	movs	r0, #0
 8001e28:	e7f7      	b.n	8001e1a <__swsetup_r+0xba>
 8001e2a:	bf00      	nop
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	08002b10 	.word	0x08002b10
 8001e34:	08002b30 	.word	0x08002b30
 8001e38:	08002af0 	.word	0x08002af0

08001e3c <__sflush_r>:
 8001e3c:	898a      	ldrh	r2, [r1, #12]
 8001e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e42:	4605      	mov	r5, r0
 8001e44:	0710      	lsls	r0, r2, #28
 8001e46:	460c      	mov	r4, r1
 8001e48:	d45a      	bmi.n	8001f00 <__sflush_r+0xc4>
 8001e4a:	684b      	ldr	r3, [r1, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	dc05      	bgt.n	8001e5c <__sflush_r+0x20>
 8001e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	dc02      	bgt.n	8001e5c <__sflush_r+0x20>
 8001e56:	2000      	movs	r0, #0
 8001e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e5e:	2e00      	cmp	r6, #0
 8001e60:	d0f9      	beq.n	8001e56 <__sflush_r+0x1a>
 8001e62:	2300      	movs	r3, #0
 8001e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e68:	682f      	ldr	r7, [r5, #0]
 8001e6a:	602b      	str	r3, [r5, #0]
 8001e6c:	d033      	beq.n	8001ed6 <__sflush_r+0x9a>
 8001e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e70:	89a3      	ldrh	r3, [r4, #12]
 8001e72:	075a      	lsls	r2, r3, #29
 8001e74:	d505      	bpl.n	8001e82 <__sflush_r+0x46>
 8001e76:	6863      	ldr	r3, [r4, #4]
 8001e78:	1ac0      	subs	r0, r0, r3
 8001e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e7c:	b10b      	cbz	r3, 8001e82 <__sflush_r+0x46>
 8001e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e80:	1ac0      	subs	r0, r0, r3
 8001e82:	2300      	movs	r3, #0
 8001e84:	4602      	mov	r2, r0
 8001e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e88:	6a21      	ldr	r1, [r4, #32]
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	47b0      	blx	r6
 8001e8e:	1c43      	adds	r3, r0, #1
 8001e90:	89a3      	ldrh	r3, [r4, #12]
 8001e92:	d106      	bne.n	8001ea2 <__sflush_r+0x66>
 8001e94:	6829      	ldr	r1, [r5, #0]
 8001e96:	291d      	cmp	r1, #29
 8001e98:	d84b      	bhi.n	8001f32 <__sflush_r+0xf6>
 8001e9a:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <__sflush_r+0x10c>)
 8001e9c:	40ca      	lsrs	r2, r1
 8001e9e:	07d6      	lsls	r6, r2, #31
 8001ea0:	d547      	bpl.n	8001f32 <__sflush_r+0xf6>
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	6062      	str	r2, [r4, #4]
 8001ea6:	04d9      	lsls	r1, r3, #19
 8001ea8:	6922      	ldr	r2, [r4, #16]
 8001eaa:	6022      	str	r2, [r4, #0]
 8001eac:	d504      	bpl.n	8001eb8 <__sflush_r+0x7c>
 8001eae:	1c42      	adds	r2, r0, #1
 8001eb0:	d101      	bne.n	8001eb6 <__sflush_r+0x7a>
 8001eb2:	682b      	ldr	r3, [r5, #0]
 8001eb4:	b903      	cbnz	r3, 8001eb8 <__sflush_r+0x7c>
 8001eb6:	6560      	str	r0, [r4, #84]	; 0x54
 8001eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001eba:	602f      	str	r7, [r5, #0]
 8001ebc:	2900      	cmp	r1, #0
 8001ebe:	d0ca      	beq.n	8001e56 <__sflush_r+0x1a>
 8001ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ec4:	4299      	cmp	r1, r3
 8001ec6:	d002      	beq.n	8001ece <__sflush_r+0x92>
 8001ec8:	4628      	mov	r0, r5
 8001eca:	f000 f997 	bl	80021fc <_free_r>
 8001ece:	2000      	movs	r0, #0
 8001ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8001ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ed6:	6a21      	ldr	r1, [r4, #32]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	4628      	mov	r0, r5
 8001edc:	47b0      	blx	r6
 8001ede:	1c41      	adds	r1, r0, #1
 8001ee0:	d1c6      	bne.n	8001e70 <__sflush_r+0x34>
 8001ee2:	682b      	ldr	r3, [r5, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0c3      	beq.n	8001e70 <__sflush_r+0x34>
 8001ee8:	2b1d      	cmp	r3, #29
 8001eea:	d001      	beq.n	8001ef0 <__sflush_r+0xb4>
 8001eec:	2b16      	cmp	r3, #22
 8001eee:	d101      	bne.n	8001ef4 <__sflush_r+0xb8>
 8001ef0:	602f      	str	r7, [r5, #0]
 8001ef2:	e7b0      	b.n	8001e56 <__sflush_r+0x1a>
 8001ef4:	89a3      	ldrh	r3, [r4, #12]
 8001ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001efa:	81a3      	strh	r3, [r4, #12]
 8001efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f00:	690f      	ldr	r7, [r1, #16]
 8001f02:	2f00      	cmp	r7, #0
 8001f04:	d0a7      	beq.n	8001e56 <__sflush_r+0x1a>
 8001f06:	0793      	lsls	r3, r2, #30
 8001f08:	680e      	ldr	r6, [r1, #0]
 8001f0a:	bf08      	it	eq
 8001f0c:	694b      	ldreq	r3, [r1, #20]
 8001f0e:	600f      	str	r7, [r1, #0]
 8001f10:	bf18      	it	ne
 8001f12:	2300      	movne	r3, #0
 8001f14:	eba6 0807 	sub.w	r8, r6, r7
 8001f18:	608b      	str	r3, [r1, #8]
 8001f1a:	f1b8 0f00 	cmp.w	r8, #0
 8001f1e:	dd9a      	ble.n	8001e56 <__sflush_r+0x1a>
 8001f20:	4643      	mov	r3, r8
 8001f22:	463a      	mov	r2, r7
 8001f24:	6a21      	ldr	r1, [r4, #32]
 8001f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f28:	4628      	mov	r0, r5
 8001f2a:	47b0      	blx	r6
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	dc07      	bgt.n	8001f40 <__sflush_r+0x104>
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f36:	81a3      	strh	r3, [r4, #12]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f40:	4407      	add	r7, r0
 8001f42:	eba8 0800 	sub.w	r8, r8, r0
 8001f46:	e7e8      	b.n	8001f1a <__sflush_r+0xde>
 8001f48:	20400001 	.word	0x20400001

08001f4c <_fflush_r>:
 8001f4c:	b538      	push	{r3, r4, r5, lr}
 8001f4e:	690b      	ldr	r3, [r1, #16]
 8001f50:	4605      	mov	r5, r0
 8001f52:	460c      	mov	r4, r1
 8001f54:	b1db      	cbz	r3, 8001f8e <_fflush_r+0x42>
 8001f56:	b118      	cbz	r0, 8001f60 <_fflush_r+0x14>
 8001f58:	6983      	ldr	r3, [r0, #24]
 8001f5a:	b90b      	cbnz	r3, 8001f60 <_fflush_r+0x14>
 8001f5c:	f000 f860 	bl	8002020 <__sinit>
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <_fflush_r+0x48>)
 8001f62:	429c      	cmp	r4, r3
 8001f64:	d109      	bne.n	8001f7a <_fflush_r+0x2e>
 8001f66:	686c      	ldr	r4, [r5, #4]
 8001f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f6c:	b17b      	cbz	r3, 8001f8e <_fflush_r+0x42>
 8001f6e:	4621      	mov	r1, r4
 8001f70:	4628      	mov	r0, r5
 8001f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f76:	f7ff bf61 	b.w	8001e3c <__sflush_r>
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <_fflush_r+0x4c>)
 8001f7c:	429c      	cmp	r4, r3
 8001f7e:	d101      	bne.n	8001f84 <_fflush_r+0x38>
 8001f80:	68ac      	ldr	r4, [r5, #8]
 8001f82:	e7f1      	b.n	8001f68 <_fflush_r+0x1c>
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <_fflush_r+0x50>)
 8001f86:	429c      	cmp	r4, r3
 8001f88:	bf08      	it	eq
 8001f8a:	68ec      	ldreq	r4, [r5, #12]
 8001f8c:	e7ec      	b.n	8001f68 <_fflush_r+0x1c>
 8001f8e:	2000      	movs	r0, #0
 8001f90:	bd38      	pop	{r3, r4, r5, pc}
 8001f92:	bf00      	nop
 8001f94:	08002b10 	.word	0x08002b10
 8001f98:	08002b30 	.word	0x08002b30
 8001f9c:	08002af0 	.word	0x08002af0

08001fa0 <_cleanup_r>:
 8001fa0:	4901      	ldr	r1, [pc, #4]	; (8001fa8 <_cleanup_r+0x8>)
 8001fa2:	f000 b8a9 	b.w	80020f8 <_fwalk_reent>
 8001fa6:	bf00      	nop
 8001fa8:	08001f4d 	.word	0x08001f4d

08001fac <std.isra.0>:
 8001fac:	2300      	movs	r3, #0
 8001fae:	b510      	push	{r4, lr}
 8001fb0:	4604      	mov	r4, r0
 8001fb2:	6003      	str	r3, [r0, #0]
 8001fb4:	6043      	str	r3, [r0, #4]
 8001fb6:	6083      	str	r3, [r0, #8]
 8001fb8:	8181      	strh	r1, [r0, #12]
 8001fba:	6643      	str	r3, [r0, #100]	; 0x64
 8001fbc:	81c2      	strh	r2, [r0, #14]
 8001fbe:	6103      	str	r3, [r0, #16]
 8001fc0:	6143      	str	r3, [r0, #20]
 8001fc2:	6183      	str	r3, [r0, #24]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	2208      	movs	r2, #8
 8001fc8:	305c      	adds	r0, #92	; 0x5c
 8001fca:	f7ff fe57 	bl	8001c7c <memset>
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <std.isra.0+0x38>)
 8001fd0:	6263      	str	r3, [r4, #36]	; 0x24
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <std.isra.0+0x3c>)
 8001fd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <std.isra.0+0x40>)
 8001fd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <std.isra.0+0x44>)
 8001fdc:	6224      	str	r4, [r4, #32]
 8001fde:	6323      	str	r3, [r4, #48]	; 0x30
 8001fe0:	bd10      	pop	{r4, pc}
 8001fe2:	bf00      	nop
 8001fe4:	08002921 	.word	0x08002921
 8001fe8:	08002943 	.word	0x08002943
 8001fec:	0800297b 	.word	0x0800297b
 8001ff0:	0800299f 	.word	0x0800299f

08001ff4 <__sfmoreglue>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	1e4a      	subs	r2, r1, #1
 8001ff8:	2568      	movs	r5, #104	; 0x68
 8001ffa:	4355      	muls	r5, r2
 8001ffc:	460e      	mov	r6, r1
 8001ffe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002002:	f000 f949 	bl	8002298 <_malloc_r>
 8002006:	4604      	mov	r4, r0
 8002008:	b140      	cbz	r0, 800201c <__sfmoreglue+0x28>
 800200a:	2100      	movs	r1, #0
 800200c:	e880 0042 	stmia.w	r0, {r1, r6}
 8002010:	300c      	adds	r0, #12
 8002012:	60a0      	str	r0, [r4, #8]
 8002014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002018:	f7ff fe30 	bl	8001c7c <memset>
 800201c:	4620      	mov	r0, r4
 800201e:	bd70      	pop	{r4, r5, r6, pc}

08002020 <__sinit>:
 8002020:	6983      	ldr	r3, [r0, #24]
 8002022:	b510      	push	{r4, lr}
 8002024:	4604      	mov	r4, r0
 8002026:	bb33      	cbnz	r3, 8002076 <__sinit+0x56>
 8002028:	6483      	str	r3, [r0, #72]	; 0x48
 800202a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800202c:	6503      	str	r3, [r0, #80]	; 0x50
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <__sinit+0x58>)
 8002030:	4a12      	ldr	r2, [pc, #72]	; (800207c <__sinit+0x5c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6282      	str	r2, [r0, #40]	; 0x28
 8002036:	4298      	cmp	r0, r3
 8002038:	bf04      	itt	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	6183      	streq	r3, [r0, #24]
 800203e:	f000 f81f 	bl	8002080 <__sfp>
 8002042:	6060      	str	r0, [r4, #4]
 8002044:	4620      	mov	r0, r4
 8002046:	f000 f81b 	bl	8002080 <__sfp>
 800204a:	60a0      	str	r0, [r4, #8]
 800204c:	4620      	mov	r0, r4
 800204e:	f000 f817 	bl	8002080 <__sfp>
 8002052:	2200      	movs	r2, #0
 8002054:	60e0      	str	r0, [r4, #12]
 8002056:	2104      	movs	r1, #4
 8002058:	6860      	ldr	r0, [r4, #4]
 800205a:	f7ff ffa7 	bl	8001fac <std.isra.0>
 800205e:	2201      	movs	r2, #1
 8002060:	2109      	movs	r1, #9
 8002062:	68a0      	ldr	r0, [r4, #8]
 8002064:	f7ff ffa2 	bl	8001fac <std.isra.0>
 8002068:	2202      	movs	r2, #2
 800206a:	2112      	movs	r1, #18
 800206c:	68e0      	ldr	r0, [r4, #12]
 800206e:	f7ff ff9d 	bl	8001fac <std.isra.0>
 8002072:	2301      	movs	r3, #1
 8002074:	61a3      	str	r3, [r4, #24]
 8002076:	bd10      	pop	{r4, pc}
 8002078:	08002aec 	.word	0x08002aec
 800207c:	08001fa1 	.word	0x08001fa1

08002080 <__sfp>:
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <__sfp+0x74>)
 8002084:	681e      	ldr	r6, [r3, #0]
 8002086:	69b3      	ldr	r3, [r6, #24]
 8002088:	4607      	mov	r7, r0
 800208a:	b913      	cbnz	r3, 8002092 <__sfp+0x12>
 800208c:	4630      	mov	r0, r6
 800208e:	f7ff ffc7 	bl	8002020 <__sinit>
 8002092:	3648      	adds	r6, #72	; 0x48
 8002094:	68b4      	ldr	r4, [r6, #8]
 8002096:	6873      	ldr	r3, [r6, #4]
 8002098:	3b01      	subs	r3, #1
 800209a:	d503      	bpl.n	80020a4 <__sfp+0x24>
 800209c:	6833      	ldr	r3, [r6, #0]
 800209e:	b133      	cbz	r3, 80020ae <__sfp+0x2e>
 80020a0:	6836      	ldr	r6, [r6, #0]
 80020a2:	e7f7      	b.n	8002094 <__sfp+0x14>
 80020a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020a8:	b16d      	cbz	r5, 80020c6 <__sfp+0x46>
 80020aa:	3468      	adds	r4, #104	; 0x68
 80020ac:	e7f4      	b.n	8002098 <__sfp+0x18>
 80020ae:	2104      	movs	r1, #4
 80020b0:	4638      	mov	r0, r7
 80020b2:	f7ff ff9f 	bl	8001ff4 <__sfmoreglue>
 80020b6:	6030      	str	r0, [r6, #0]
 80020b8:	2800      	cmp	r0, #0
 80020ba:	d1f1      	bne.n	80020a0 <__sfp+0x20>
 80020bc:	230c      	movs	r3, #12
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4604      	mov	r4, r0
 80020c2:	4620      	mov	r0, r4
 80020c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ca:	81e3      	strh	r3, [r4, #14]
 80020cc:	2301      	movs	r3, #1
 80020ce:	81a3      	strh	r3, [r4, #12]
 80020d0:	6665      	str	r5, [r4, #100]	; 0x64
 80020d2:	6025      	str	r5, [r4, #0]
 80020d4:	60a5      	str	r5, [r4, #8]
 80020d6:	6065      	str	r5, [r4, #4]
 80020d8:	6125      	str	r5, [r4, #16]
 80020da:	6165      	str	r5, [r4, #20]
 80020dc:	61a5      	str	r5, [r4, #24]
 80020de:	2208      	movs	r2, #8
 80020e0:	4629      	mov	r1, r5
 80020e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020e6:	f7ff fdc9 	bl	8001c7c <memset>
 80020ea:	6365      	str	r5, [r4, #52]	; 0x34
 80020ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80020ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80020f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80020f2:	e7e6      	b.n	80020c2 <__sfp+0x42>
 80020f4:	08002aec 	.word	0x08002aec

080020f8 <_fwalk_reent>:
 80020f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020fc:	4680      	mov	r8, r0
 80020fe:	4689      	mov	r9, r1
 8002100:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002104:	2600      	movs	r6, #0
 8002106:	b914      	cbnz	r4, 800210e <_fwalk_reent+0x16>
 8002108:	4630      	mov	r0, r6
 800210a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800210e:	68a5      	ldr	r5, [r4, #8]
 8002110:	6867      	ldr	r7, [r4, #4]
 8002112:	3f01      	subs	r7, #1
 8002114:	d501      	bpl.n	800211a <_fwalk_reent+0x22>
 8002116:	6824      	ldr	r4, [r4, #0]
 8002118:	e7f5      	b.n	8002106 <_fwalk_reent+0xe>
 800211a:	89ab      	ldrh	r3, [r5, #12]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d907      	bls.n	8002130 <_fwalk_reent+0x38>
 8002120:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002124:	3301      	adds	r3, #1
 8002126:	d003      	beq.n	8002130 <_fwalk_reent+0x38>
 8002128:	4629      	mov	r1, r5
 800212a:	4640      	mov	r0, r8
 800212c:	47c8      	blx	r9
 800212e:	4306      	orrs	r6, r0
 8002130:	3568      	adds	r5, #104	; 0x68
 8002132:	e7ee      	b.n	8002112 <_fwalk_reent+0x1a>

08002134 <__swhatbuf_r>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	460e      	mov	r6, r1
 8002138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800213c:	2900      	cmp	r1, #0
 800213e:	b090      	sub	sp, #64	; 0x40
 8002140:	4614      	mov	r4, r2
 8002142:	461d      	mov	r5, r3
 8002144:	da07      	bge.n	8002156 <__swhatbuf_r+0x22>
 8002146:	2300      	movs	r3, #0
 8002148:	602b      	str	r3, [r5, #0]
 800214a:	89b3      	ldrh	r3, [r6, #12]
 800214c:	061a      	lsls	r2, r3, #24
 800214e:	d410      	bmi.n	8002172 <__swhatbuf_r+0x3e>
 8002150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002154:	e00e      	b.n	8002174 <__swhatbuf_r+0x40>
 8002156:	aa01      	add	r2, sp, #4
 8002158:	f000 fc48 	bl	80029ec <_fstat_r>
 800215c:	2800      	cmp	r0, #0
 800215e:	dbf2      	blt.n	8002146 <__swhatbuf_r+0x12>
 8002160:	9a02      	ldr	r2, [sp, #8]
 8002162:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002166:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800216a:	425a      	negs	r2, r3
 800216c:	415a      	adcs	r2, r3
 800216e:	602a      	str	r2, [r5, #0]
 8002170:	e7ee      	b.n	8002150 <__swhatbuf_r+0x1c>
 8002172:	2340      	movs	r3, #64	; 0x40
 8002174:	2000      	movs	r0, #0
 8002176:	6023      	str	r3, [r4, #0]
 8002178:	b010      	add	sp, #64	; 0x40
 800217a:	bd70      	pop	{r4, r5, r6, pc}

0800217c <__smakebuf_r>:
 800217c:	898b      	ldrh	r3, [r1, #12]
 800217e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002180:	079d      	lsls	r5, r3, #30
 8002182:	4606      	mov	r6, r0
 8002184:	460c      	mov	r4, r1
 8002186:	d507      	bpl.n	8002198 <__smakebuf_r+0x1c>
 8002188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800218c:	6023      	str	r3, [r4, #0]
 800218e:	6123      	str	r3, [r4, #16]
 8002190:	2301      	movs	r3, #1
 8002192:	6163      	str	r3, [r4, #20]
 8002194:	b002      	add	sp, #8
 8002196:	bd70      	pop	{r4, r5, r6, pc}
 8002198:	ab01      	add	r3, sp, #4
 800219a:	466a      	mov	r2, sp
 800219c:	f7ff ffca 	bl	8002134 <__swhatbuf_r>
 80021a0:	9900      	ldr	r1, [sp, #0]
 80021a2:	4605      	mov	r5, r0
 80021a4:	4630      	mov	r0, r6
 80021a6:	f000 f877 	bl	8002298 <_malloc_r>
 80021aa:	b948      	cbnz	r0, 80021c0 <__smakebuf_r+0x44>
 80021ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021b0:	059a      	lsls	r2, r3, #22
 80021b2:	d4ef      	bmi.n	8002194 <__smakebuf_r+0x18>
 80021b4:	f023 0303 	bic.w	r3, r3, #3
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	81a3      	strh	r3, [r4, #12]
 80021be:	e7e3      	b.n	8002188 <__smakebuf_r+0xc>
 80021c0:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <__smakebuf_r+0x7c>)
 80021c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80021c4:	89a3      	ldrh	r3, [r4, #12]
 80021c6:	6020      	str	r0, [r4, #0]
 80021c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021cc:	81a3      	strh	r3, [r4, #12]
 80021ce:	9b00      	ldr	r3, [sp, #0]
 80021d0:	6163      	str	r3, [r4, #20]
 80021d2:	9b01      	ldr	r3, [sp, #4]
 80021d4:	6120      	str	r0, [r4, #16]
 80021d6:	b15b      	cbz	r3, 80021f0 <__smakebuf_r+0x74>
 80021d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021dc:	4630      	mov	r0, r6
 80021de:	f000 fc17 	bl	8002a10 <_isatty_r>
 80021e2:	b128      	cbz	r0, 80021f0 <__smakebuf_r+0x74>
 80021e4:	89a3      	ldrh	r3, [r4, #12]
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	81a3      	strh	r3, [r4, #12]
 80021f0:	89a3      	ldrh	r3, [r4, #12]
 80021f2:	431d      	orrs	r5, r3
 80021f4:	81a5      	strh	r5, [r4, #12]
 80021f6:	e7cd      	b.n	8002194 <__smakebuf_r+0x18>
 80021f8:	08001fa1 	.word	0x08001fa1

080021fc <_free_r>:
 80021fc:	b538      	push	{r3, r4, r5, lr}
 80021fe:	4605      	mov	r5, r0
 8002200:	2900      	cmp	r1, #0
 8002202:	d045      	beq.n	8002290 <_free_r+0x94>
 8002204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002208:	1f0c      	subs	r4, r1, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	bfb8      	it	lt
 800220e:	18e4      	addlt	r4, r4, r3
 8002210:	f000 fc20 	bl	8002a54 <__malloc_lock>
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <_free_r+0x98>)
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	4610      	mov	r0, r2
 800221a:	b933      	cbnz	r3, 800222a <_free_r+0x2e>
 800221c:	6063      	str	r3, [r4, #4]
 800221e:	6014      	str	r4, [r2, #0]
 8002220:	4628      	mov	r0, r5
 8002222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002226:	f000 bc16 	b.w	8002a56 <__malloc_unlock>
 800222a:	42a3      	cmp	r3, r4
 800222c:	d90c      	bls.n	8002248 <_free_r+0x4c>
 800222e:	6821      	ldr	r1, [r4, #0]
 8002230:	1862      	adds	r2, r4, r1
 8002232:	4293      	cmp	r3, r2
 8002234:	bf04      	itt	eq
 8002236:	681a      	ldreq	r2, [r3, #0]
 8002238:	685b      	ldreq	r3, [r3, #4]
 800223a:	6063      	str	r3, [r4, #4]
 800223c:	bf04      	itt	eq
 800223e:	1852      	addeq	r2, r2, r1
 8002240:	6022      	streq	r2, [r4, #0]
 8002242:	6004      	str	r4, [r0, #0]
 8002244:	e7ec      	b.n	8002220 <_free_r+0x24>
 8002246:	4613      	mov	r3, r2
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	b10a      	cbz	r2, 8002250 <_free_r+0x54>
 800224c:	42a2      	cmp	r2, r4
 800224e:	d9fa      	bls.n	8002246 <_free_r+0x4a>
 8002250:	6819      	ldr	r1, [r3, #0]
 8002252:	1858      	adds	r0, r3, r1
 8002254:	42a0      	cmp	r0, r4
 8002256:	d10b      	bne.n	8002270 <_free_r+0x74>
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	4401      	add	r1, r0
 800225c:	1858      	adds	r0, r3, r1
 800225e:	4282      	cmp	r2, r0
 8002260:	6019      	str	r1, [r3, #0]
 8002262:	d1dd      	bne.n	8002220 <_free_r+0x24>
 8002264:	6810      	ldr	r0, [r2, #0]
 8002266:	6852      	ldr	r2, [r2, #4]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	4401      	add	r1, r0
 800226c:	6019      	str	r1, [r3, #0]
 800226e:	e7d7      	b.n	8002220 <_free_r+0x24>
 8002270:	d902      	bls.n	8002278 <_free_r+0x7c>
 8002272:	230c      	movs	r3, #12
 8002274:	602b      	str	r3, [r5, #0]
 8002276:	e7d3      	b.n	8002220 <_free_r+0x24>
 8002278:	6820      	ldr	r0, [r4, #0]
 800227a:	1821      	adds	r1, r4, r0
 800227c:	428a      	cmp	r2, r1
 800227e:	bf04      	itt	eq
 8002280:	6811      	ldreq	r1, [r2, #0]
 8002282:	6852      	ldreq	r2, [r2, #4]
 8002284:	6062      	str	r2, [r4, #4]
 8002286:	bf04      	itt	eq
 8002288:	1809      	addeq	r1, r1, r0
 800228a:	6021      	streq	r1, [r4, #0]
 800228c:	605c      	str	r4, [r3, #4]
 800228e:	e7c7      	b.n	8002220 <_free_r+0x24>
 8002290:	bd38      	pop	{r3, r4, r5, pc}
 8002292:	bf00      	nop
 8002294:	20000098 	.word	0x20000098

08002298 <_malloc_r>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	1ccd      	adds	r5, r1, #3
 800229c:	f025 0503 	bic.w	r5, r5, #3
 80022a0:	3508      	adds	r5, #8
 80022a2:	2d0c      	cmp	r5, #12
 80022a4:	bf38      	it	cc
 80022a6:	250c      	movcc	r5, #12
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	4606      	mov	r6, r0
 80022ac:	db01      	blt.n	80022b2 <_malloc_r+0x1a>
 80022ae:	42a9      	cmp	r1, r5
 80022b0:	d903      	bls.n	80022ba <_malloc_r+0x22>
 80022b2:	230c      	movs	r3, #12
 80022b4:	6033      	str	r3, [r6, #0]
 80022b6:	2000      	movs	r0, #0
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
 80022ba:	f000 fbcb 	bl	8002a54 <__malloc_lock>
 80022be:	4a23      	ldr	r2, [pc, #140]	; (800234c <_malloc_r+0xb4>)
 80022c0:	6814      	ldr	r4, [r2, #0]
 80022c2:	4621      	mov	r1, r4
 80022c4:	b991      	cbnz	r1, 80022ec <_malloc_r+0x54>
 80022c6:	4c22      	ldr	r4, [pc, #136]	; (8002350 <_malloc_r+0xb8>)
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	b91b      	cbnz	r3, 80022d4 <_malloc_r+0x3c>
 80022cc:	4630      	mov	r0, r6
 80022ce:	f000 fb17 	bl	8002900 <_sbrk_r>
 80022d2:	6020      	str	r0, [r4, #0]
 80022d4:	4629      	mov	r1, r5
 80022d6:	4630      	mov	r0, r6
 80022d8:	f000 fb12 	bl	8002900 <_sbrk_r>
 80022dc:	1c43      	adds	r3, r0, #1
 80022de:	d126      	bne.n	800232e <_malloc_r+0x96>
 80022e0:	230c      	movs	r3, #12
 80022e2:	6033      	str	r3, [r6, #0]
 80022e4:	4630      	mov	r0, r6
 80022e6:	f000 fbb6 	bl	8002a56 <__malloc_unlock>
 80022ea:	e7e4      	b.n	80022b6 <_malloc_r+0x1e>
 80022ec:	680b      	ldr	r3, [r1, #0]
 80022ee:	1b5b      	subs	r3, r3, r5
 80022f0:	d41a      	bmi.n	8002328 <_malloc_r+0x90>
 80022f2:	2b0b      	cmp	r3, #11
 80022f4:	d90f      	bls.n	8002316 <_malloc_r+0x7e>
 80022f6:	600b      	str	r3, [r1, #0]
 80022f8:	50cd      	str	r5, [r1, r3]
 80022fa:	18cc      	adds	r4, r1, r3
 80022fc:	4630      	mov	r0, r6
 80022fe:	f000 fbaa 	bl	8002a56 <__malloc_unlock>
 8002302:	f104 000b 	add.w	r0, r4, #11
 8002306:	1d23      	adds	r3, r4, #4
 8002308:	f020 0007 	bic.w	r0, r0, #7
 800230c:	1ac3      	subs	r3, r0, r3
 800230e:	d01b      	beq.n	8002348 <_malloc_r+0xb0>
 8002310:	425a      	negs	r2, r3
 8002312:	50e2      	str	r2, [r4, r3]
 8002314:	bd70      	pop	{r4, r5, r6, pc}
 8002316:	428c      	cmp	r4, r1
 8002318:	bf0d      	iteet	eq
 800231a:	6863      	ldreq	r3, [r4, #4]
 800231c:	684b      	ldrne	r3, [r1, #4]
 800231e:	6063      	strne	r3, [r4, #4]
 8002320:	6013      	streq	r3, [r2, #0]
 8002322:	bf18      	it	ne
 8002324:	460c      	movne	r4, r1
 8002326:	e7e9      	b.n	80022fc <_malloc_r+0x64>
 8002328:	460c      	mov	r4, r1
 800232a:	6849      	ldr	r1, [r1, #4]
 800232c:	e7ca      	b.n	80022c4 <_malloc_r+0x2c>
 800232e:	1cc4      	adds	r4, r0, #3
 8002330:	f024 0403 	bic.w	r4, r4, #3
 8002334:	42a0      	cmp	r0, r4
 8002336:	d005      	beq.n	8002344 <_malloc_r+0xac>
 8002338:	1a21      	subs	r1, r4, r0
 800233a:	4630      	mov	r0, r6
 800233c:	f000 fae0 	bl	8002900 <_sbrk_r>
 8002340:	3001      	adds	r0, #1
 8002342:	d0cd      	beq.n	80022e0 <_malloc_r+0x48>
 8002344:	6025      	str	r5, [r4, #0]
 8002346:	e7d9      	b.n	80022fc <_malloc_r+0x64>
 8002348:	bd70      	pop	{r4, r5, r6, pc}
 800234a:	bf00      	nop
 800234c:	20000098 	.word	0x20000098
 8002350:	2000009c 	.word	0x2000009c

08002354 <__sfputc_r>:
 8002354:	6893      	ldr	r3, [r2, #8]
 8002356:	3b01      	subs	r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	b410      	push	{r4}
 800235c:	6093      	str	r3, [r2, #8]
 800235e:	da09      	bge.n	8002374 <__sfputc_r+0x20>
 8002360:	6994      	ldr	r4, [r2, #24]
 8002362:	42a3      	cmp	r3, r4
 8002364:	db02      	blt.n	800236c <__sfputc_r+0x18>
 8002366:	b2cb      	uxtb	r3, r1
 8002368:	2b0a      	cmp	r3, #10
 800236a:	d103      	bne.n	8002374 <__sfputc_r+0x20>
 800236c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002370:	f7ff bca4 	b.w	8001cbc <__swbuf_r>
 8002374:	6813      	ldr	r3, [r2, #0]
 8002376:	1c58      	adds	r0, r3, #1
 8002378:	6010      	str	r0, [r2, #0]
 800237a:	7019      	strb	r1, [r3, #0]
 800237c:	b2c8      	uxtb	r0, r1
 800237e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002382:	4770      	bx	lr

08002384 <__sfputs_r>:
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	4606      	mov	r6, r0
 8002388:	460f      	mov	r7, r1
 800238a:	4614      	mov	r4, r2
 800238c:	18d5      	adds	r5, r2, r3
 800238e:	42ac      	cmp	r4, r5
 8002390:	d101      	bne.n	8002396 <__sfputs_r+0x12>
 8002392:	2000      	movs	r0, #0
 8002394:	e007      	b.n	80023a6 <__sfputs_r+0x22>
 8002396:	463a      	mov	r2, r7
 8002398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800239c:	4630      	mov	r0, r6
 800239e:	f7ff ffd9 	bl	8002354 <__sfputc_r>
 80023a2:	1c43      	adds	r3, r0, #1
 80023a4:	d1f3      	bne.n	800238e <__sfputs_r+0xa>
 80023a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023a8 <_vfiprintf_r>:
 80023a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ac:	b09d      	sub	sp, #116	; 0x74
 80023ae:	460c      	mov	r4, r1
 80023b0:	4617      	mov	r7, r2
 80023b2:	9303      	str	r3, [sp, #12]
 80023b4:	4606      	mov	r6, r0
 80023b6:	b118      	cbz	r0, 80023c0 <_vfiprintf_r+0x18>
 80023b8:	6983      	ldr	r3, [r0, #24]
 80023ba:	b90b      	cbnz	r3, 80023c0 <_vfiprintf_r+0x18>
 80023bc:	f7ff fe30 	bl	8002020 <__sinit>
 80023c0:	4b7c      	ldr	r3, [pc, #496]	; (80025b4 <_vfiprintf_r+0x20c>)
 80023c2:	429c      	cmp	r4, r3
 80023c4:	d157      	bne.n	8002476 <_vfiprintf_r+0xce>
 80023c6:	6874      	ldr	r4, [r6, #4]
 80023c8:	89a3      	ldrh	r3, [r4, #12]
 80023ca:	0718      	lsls	r0, r3, #28
 80023cc:	d55d      	bpl.n	800248a <_vfiprintf_r+0xe2>
 80023ce:	6923      	ldr	r3, [r4, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d05a      	beq.n	800248a <_vfiprintf_r+0xe2>
 80023d4:	2300      	movs	r3, #0
 80023d6:	9309      	str	r3, [sp, #36]	; 0x24
 80023d8:	2320      	movs	r3, #32
 80023da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023de:	2330      	movs	r3, #48	; 0x30
 80023e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023e4:	f04f 0b01 	mov.w	fp, #1
 80023e8:	46b8      	mov	r8, r7
 80023ea:	4645      	mov	r5, r8
 80023ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d155      	bne.n	80024a0 <_vfiprintf_r+0xf8>
 80023f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80023f8:	d00b      	beq.n	8002412 <_vfiprintf_r+0x6a>
 80023fa:	4653      	mov	r3, sl
 80023fc:	463a      	mov	r2, r7
 80023fe:	4621      	mov	r1, r4
 8002400:	4630      	mov	r0, r6
 8002402:	f7ff ffbf 	bl	8002384 <__sfputs_r>
 8002406:	3001      	adds	r0, #1
 8002408:	f000 80c4 	beq.w	8002594 <_vfiprintf_r+0x1ec>
 800240c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800240e:	4453      	add	r3, sl
 8002410:	9309      	str	r3, [sp, #36]	; 0x24
 8002412:	f898 3000 	ldrb.w	r3, [r8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80bc 	beq.w	8002594 <_vfiprintf_r+0x1ec>
 800241c:	2300      	movs	r3, #0
 800241e:	f04f 32ff 	mov.w	r2, #4294967295
 8002422:	9304      	str	r3, [sp, #16]
 8002424:	9307      	str	r3, [sp, #28]
 8002426:	9205      	str	r2, [sp, #20]
 8002428:	9306      	str	r3, [sp, #24]
 800242a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800242e:	931a      	str	r3, [sp, #104]	; 0x68
 8002430:	2205      	movs	r2, #5
 8002432:	7829      	ldrb	r1, [r5, #0]
 8002434:	4860      	ldr	r0, [pc, #384]	; (80025b8 <_vfiprintf_r+0x210>)
 8002436:	f7fd fed3 	bl	80001e0 <memchr>
 800243a:	f105 0801 	add.w	r8, r5, #1
 800243e:	9b04      	ldr	r3, [sp, #16]
 8002440:	2800      	cmp	r0, #0
 8002442:	d131      	bne.n	80024a8 <_vfiprintf_r+0x100>
 8002444:	06d9      	lsls	r1, r3, #27
 8002446:	bf44      	itt	mi
 8002448:	2220      	movmi	r2, #32
 800244a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800244e:	071a      	lsls	r2, r3, #28
 8002450:	bf44      	itt	mi
 8002452:	222b      	movmi	r2, #43	; 0x2b
 8002454:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002458:	782a      	ldrb	r2, [r5, #0]
 800245a:	2a2a      	cmp	r2, #42	; 0x2a
 800245c:	d02c      	beq.n	80024b8 <_vfiprintf_r+0x110>
 800245e:	9a07      	ldr	r2, [sp, #28]
 8002460:	2100      	movs	r1, #0
 8002462:	200a      	movs	r0, #10
 8002464:	46a8      	mov	r8, r5
 8002466:	3501      	adds	r5, #1
 8002468:	f898 3000 	ldrb.w	r3, [r8]
 800246c:	3b30      	subs	r3, #48	; 0x30
 800246e:	2b09      	cmp	r3, #9
 8002470:	d96d      	bls.n	800254e <_vfiprintf_r+0x1a6>
 8002472:	b371      	cbz	r1, 80024d2 <_vfiprintf_r+0x12a>
 8002474:	e026      	b.n	80024c4 <_vfiprintf_r+0x11c>
 8002476:	4b51      	ldr	r3, [pc, #324]	; (80025bc <_vfiprintf_r+0x214>)
 8002478:	429c      	cmp	r4, r3
 800247a:	d101      	bne.n	8002480 <_vfiprintf_r+0xd8>
 800247c:	68b4      	ldr	r4, [r6, #8]
 800247e:	e7a3      	b.n	80023c8 <_vfiprintf_r+0x20>
 8002480:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <_vfiprintf_r+0x218>)
 8002482:	429c      	cmp	r4, r3
 8002484:	bf08      	it	eq
 8002486:	68f4      	ldreq	r4, [r6, #12]
 8002488:	e79e      	b.n	80023c8 <_vfiprintf_r+0x20>
 800248a:	4621      	mov	r1, r4
 800248c:	4630      	mov	r0, r6
 800248e:	f7ff fc67 	bl	8001d60 <__swsetup_r>
 8002492:	2800      	cmp	r0, #0
 8002494:	d09e      	beq.n	80023d4 <_vfiprintf_r+0x2c>
 8002496:	f04f 30ff 	mov.w	r0, #4294967295
 800249a:	b01d      	add	sp, #116	; 0x74
 800249c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a0:	2b25      	cmp	r3, #37	; 0x25
 80024a2:	d0a7      	beq.n	80023f4 <_vfiprintf_r+0x4c>
 80024a4:	46a8      	mov	r8, r5
 80024a6:	e7a0      	b.n	80023ea <_vfiprintf_r+0x42>
 80024a8:	4a43      	ldr	r2, [pc, #268]	; (80025b8 <_vfiprintf_r+0x210>)
 80024aa:	1a80      	subs	r0, r0, r2
 80024ac:	fa0b f000 	lsl.w	r0, fp, r0
 80024b0:	4318      	orrs	r0, r3
 80024b2:	9004      	str	r0, [sp, #16]
 80024b4:	4645      	mov	r5, r8
 80024b6:	e7bb      	b.n	8002430 <_vfiprintf_r+0x88>
 80024b8:	9a03      	ldr	r2, [sp, #12]
 80024ba:	1d11      	adds	r1, r2, #4
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	9103      	str	r1, [sp, #12]
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	db01      	blt.n	80024c8 <_vfiprintf_r+0x120>
 80024c4:	9207      	str	r2, [sp, #28]
 80024c6:	e004      	b.n	80024d2 <_vfiprintf_r+0x12a>
 80024c8:	4252      	negs	r2, r2
 80024ca:	f043 0302 	orr.w	r3, r3, #2
 80024ce:	9207      	str	r2, [sp, #28]
 80024d0:	9304      	str	r3, [sp, #16]
 80024d2:	f898 3000 	ldrb.w	r3, [r8]
 80024d6:	2b2e      	cmp	r3, #46	; 0x2e
 80024d8:	d110      	bne.n	80024fc <_vfiprintf_r+0x154>
 80024da:	f898 3001 	ldrb.w	r3, [r8, #1]
 80024de:	2b2a      	cmp	r3, #42	; 0x2a
 80024e0:	f108 0101 	add.w	r1, r8, #1
 80024e4:	d137      	bne.n	8002556 <_vfiprintf_r+0x1ae>
 80024e6:	9b03      	ldr	r3, [sp, #12]
 80024e8:	1d1a      	adds	r2, r3, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	9203      	str	r2, [sp, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bfb8      	it	lt
 80024f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80024f6:	f108 0802 	add.w	r8, r8, #2
 80024fa:	9305      	str	r3, [sp, #20]
 80024fc:	4d31      	ldr	r5, [pc, #196]	; (80025c4 <_vfiprintf_r+0x21c>)
 80024fe:	f898 1000 	ldrb.w	r1, [r8]
 8002502:	2203      	movs	r2, #3
 8002504:	4628      	mov	r0, r5
 8002506:	f7fd fe6b 	bl	80001e0 <memchr>
 800250a:	b140      	cbz	r0, 800251e <_vfiprintf_r+0x176>
 800250c:	2340      	movs	r3, #64	; 0x40
 800250e:	1b40      	subs	r0, r0, r5
 8002510:	fa03 f000 	lsl.w	r0, r3, r0
 8002514:	9b04      	ldr	r3, [sp, #16]
 8002516:	4303      	orrs	r3, r0
 8002518:	9304      	str	r3, [sp, #16]
 800251a:	f108 0801 	add.w	r8, r8, #1
 800251e:	f898 1000 	ldrb.w	r1, [r8]
 8002522:	4829      	ldr	r0, [pc, #164]	; (80025c8 <_vfiprintf_r+0x220>)
 8002524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002528:	2206      	movs	r2, #6
 800252a:	f108 0701 	add.w	r7, r8, #1
 800252e:	f7fd fe57 	bl	80001e0 <memchr>
 8002532:	2800      	cmp	r0, #0
 8002534:	d034      	beq.n	80025a0 <_vfiprintf_r+0x1f8>
 8002536:	4b25      	ldr	r3, [pc, #148]	; (80025cc <_vfiprintf_r+0x224>)
 8002538:	bb03      	cbnz	r3, 800257c <_vfiprintf_r+0x1d4>
 800253a:	9b03      	ldr	r3, [sp, #12]
 800253c:	3307      	adds	r3, #7
 800253e:	f023 0307 	bic.w	r3, r3, #7
 8002542:	3308      	adds	r3, #8
 8002544:	9303      	str	r3, [sp, #12]
 8002546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002548:	444b      	add	r3, r9
 800254a:	9309      	str	r3, [sp, #36]	; 0x24
 800254c:	e74c      	b.n	80023e8 <_vfiprintf_r+0x40>
 800254e:	fb00 3202 	mla	r2, r0, r2, r3
 8002552:	2101      	movs	r1, #1
 8002554:	e786      	b.n	8002464 <_vfiprintf_r+0xbc>
 8002556:	2300      	movs	r3, #0
 8002558:	9305      	str	r3, [sp, #20]
 800255a:	4618      	mov	r0, r3
 800255c:	250a      	movs	r5, #10
 800255e:	4688      	mov	r8, r1
 8002560:	3101      	adds	r1, #1
 8002562:	f898 2000 	ldrb.w	r2, [r8]
 8002566:	3a30      	subs	r2, #48	; 0x30
 8002568:	2a09      	cmp	r2, #9
 800256a:	d903      	bls.n	8002574 <_vfiprintf_r+0x1cc>
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0c5      	beq.n	80024fc <_vfiprintf_r+0x154>
 8002570:	9005      	str	r0, [sp, #20]
 8002572:	e7c3      	b.n	80024fc <_vfiprintf_r+0x154>
 8002574:	fb05 2000 	mla	r0, r5, r0, r2
 8002578:	2301      	movs	r3, #1
 800257a:	e7f0      	b.n	800255e <_vfiprintf_r+0x1b6>
 800257c:	ab03      	add	r3, sp, #12
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	4622      	mov	r2, r4
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <_vfiprintf_r+0x228>)
 8002584:	a904      	add	r1, sp, #16
 8002586:	4630      	mov	r0, r6
 8002588:	f3af 8000 	nop.w
 800258c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002590:	4681      	mov	r9, r0
 8002592:	d1d8      	bne.n	8002546 <_vfiprintf_r+0x19e>
 8002594:	89a3      	ldrh	r3, [r4, #12]
 8002596:	065b      	lsls	r3, r3, #25
 8002598:	f53f af7d 	bmi.w	8002496 <_vfiprintf_r+0xee>
 800259c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800259e:	e77c      	b.n	800249a <_vfiprintf_r+0xf2>
 80025a0:	ab03      	add	r3, sp, #12
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	4622      	mov	r2, r4
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <_vfiprintf_r+0x228>)
 80025a8:	a904      	add	r1, sp, #16
 80025aa:	4630      	mov	r0, r6
 80025ac:	f000 f888 	bl	80026c0 <_printf_i>
 80025b0:	e7ec      	b.n	800258c <_vfiprintf_r+0x1e4>
 80025b2:	bf00      	nop
 80025b4:	08002b10 	.word	0x08002b10
 80025b8:	08002b50 	.word	0x08002b50
 80025bc:	08002b30 	.word	0x08002b30
 80025c0:	08002af0 	.word	0x08002af0
 80025c4:	08002b56 	.word	0x08002b56
 80025c8:	08002b5a 	.word	0x08002b5a
 80025cc:	00000000 	.word	0x00000000
 80025d0:	08002385 	.word	0x08002385

080025d4 <_printf_common>:
 80025d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025d8:	4691      	mov	r9, r2
 80025da:	461f      	mov	r7, r3
 80025dc:	688a      	ldr	r2, [r1, #8]
 80025de:	690b      	ldr	r3, [r1, #16]
 80025e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025e4:	4293      	cmp	r3, r2
 80025e6:	bfb8      	it	lt
 80025e8:	4613      	movlt	r3, r2
 80025ea:	f8c9 3000 	str.w	r3, [r9]
 80025ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025f2:	4606      	mov	r6, r0
 80025f4:	460c      	mov	r4, r1
 80025f6:	b112      	cbz	r2, 80025fe <_printf_common+0x2a>
 80025f8:	3301      	adds	r3, #1
 80025fa:	f8c9 3000 	str.w	r3, [r9]
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	0699      	lsls	r1, r3, #26
 8002602:	bf42      	ittt	mi
 8002604:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002608:	3302      	addmi	r3, #2
 800260a:	f8c9 3000 	strmi.w	r3, [r9]
 800260e:	6825      	ldr	r5, [r4, #0]
 8002610:	f015 0506 	ands.w	r5, r5, #6
 8002614:	d107      	bne.n	8002626 <_printf_common+0x52>
 8002616:	f104 0a19 	add.w	sl, r4, #25
 800261a:	68e3      	ldr	r3, [r4, #12]
 800261c:	f8d9 2000 	ldr.w	r2, [r9]
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	429d      	cmp	r5, r3
 8002624:	db29      	blt.n	800267a <_printf_common+0xa6>
 8002626:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800262a:	6822      	ldr	r2, [r4, #0]
 800262c:	3300      	adds	r3, #0
 800262e:	bf18      	it	ne
 8002630:	2301      	movne	r3, #1
 8002632:	0692      	lsls	r2, r2, #26
 8002634:	d42e      	bmi.n	8002694 <_printf_common+0xc0>
 8002636:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800263a:	4639      	mov	r1, r7
 800263c:	4630      	mov	r0, r6
 800263e:	47c0      	blx	r8
 8002640:	3001      	adds	r0, #1
 8002642:	d021      	beq.n	8002688 <_printf_common+0xb4>
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	68e5      	ldr	r5, [r4, #12]
 8002648:	f8d9 2000 	ldr.w	r2, [r9]
 800264c:	f003 0306 	and.w	r3, r3, #6
 8002650:	2b04      	cmp	r3, #4
 8002652:	bf08      	it	eq
 8002654:	1aad      	subeq	r5, r5, r2
 8002656:	68a3      	ldr	r3, [r4, #8]
 8002658:	6922      	ldr	r2, [r4, #16]
 800265a:	bf0c      	ite	eq
 800265c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002660:	2500      	movne	r5, #0
 8002662:	4293      	cmp	r3, r2
 8002664:	bfc4      	itt	gt
 8002666:	1a9b      	subgt	r3, r3, r2
 8002668:	18ed      	addgt	r5, r5, r3
 800266a:	f04f 0900 	mov.w	r9, #0
 800266e:	341a      	adds	r4, #26
 8002670:	454d      	cmp	r5, r9
 8002672:	d11b      	bne.n	80026ac <_printf_common+0xd8>
 8002674:	2000      	movs	r0, #0
 8002676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800267a:	2301      	movs	r3, #1
 800267c:	4652      	mov	r2, sl
 800267e:	4639      	mov	r1, r7
 8002680:	4630      	mov	r0, r6
 8002682:	47c0      	blx	r8
 8002684:	3001      	adds	r0, #1
 8002686:	d103      	bne.n	8002690 <_printf_common+0xbc>
 8002688:	f04f 30ff 	mov.w	r0, #4294967295
 800268c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002690:	3501      	adds	r5, #1
 8002692:	e7c2      	b.n	800261a <_printf_common+0x46>
 8002694:	18e1      	adds	r1, r4, r3
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	2030      	movs	r0, #48	; 0x30
 800269a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800269e:	4422      	add	r2, r4
 80026a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026a8:	3302      	adds	r3, #2
 80026aa:	e7c4      	b.n	8002636 <_printf_common+0x62>
 80026ac:	2301      	movs	r3, #1
 80026ae:	4622      	mov	r2, r4
 80026b0:	4639      	mov	r1, r7
 80026b2:	4630      	mov	r0, r6
 80026b4:	47c0      	blx	r8
 80026b6:	3001      	adds	r0, #1
 80026b8:	d0e6      	beq.n	8002688 <_printf_common+0xb4>
 80026ba:	f109 0901 	add.w	r9, r9, #1
 80026be:	e7d7      	b.n	8002670 <_printf_common+0x9c>

080026c0 <_printf_i>:
 80026c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026c4:	4617      	mov	r7, r2
 80026c6:	7e0a      	ldrb	r2, [r1, #24]
 80026c8:	b085      	sub	sp, #20
 80026ca:	2a6e      	cmp	r2, #110	; 0x6e
 80026cc:	4698      	mov	r8, r3
 80026ce:	4606      	mov	r6, r0
 80026d0:	460c      	mov	r4, r1
 80026d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80026d4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80026d8:	f000 80bc 	beq.w	8002854 <_printf_i+0x194>
 80026dc:	d81a      	bhi.n	8002714 <_printf_i+0x54>
 80026de:	2a63      	cmp	r2, #99	; 0x63
 80026e0:	d02e      	beq.n	8002740 <_printf_i+0x80>
 80026e2:	d80a      	bhi.n	80026fa <_printf_i+0x3a>
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	f000 80c8 	beq.w	800287a <_printf_i+0x1ba>
 80026ea:	2a58      	cmp	r2, #88	; 0x58
 80026ec:	f000 808a 	beq.w	8002804 <_printf_i+0x144>
 80026f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026f4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80026f8:	e02a      	b.n	8002750 <_printf_i+0x90>
 80026fa:	2a64      	cmp	r2, #100	; 0x64
 80026fc:	d001      	beq.n	8002702 <_printf_i+0x42>
 80026fe:	2a69      	cmp	r2, #105	; 0x69
 8002700:	d1f6      	bne.n	80026f0 <_printf_i+0x30>
 8002702:	6821      	ldr	r1, [r4, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	f011 0f80 	tst.w	r1, #128	; 0x80
 800270a:	d023      	beq.n	8002754 <_printf_i+0x94>
 800270c:	1d11      	adds	r1, r2, #4
 800270e:	6019      	str	r1, [r3, #0]
 8002710:	6813      	ldr	r3, [r2, #0]
 8002712:	e027      	b.n	8002764 <_printf_i+0xa4>
 8002714:	2a73      	cmp	r2, #115	; 0x73
 8002716:	f000 80b4 	beq.w	8002882 <_printf_i+0x1c2>
 800271a:	d808      	bhi.n	800272e <_printf_i+0x6e>
 800271c:	2a6f      	cmp	r2, #111	; 0x6f
 800271e:	d02a      	beq.n	8002776 <_printf_i+0xb6>
 8002720:	2a70      	cmp	r2, #112	; 0x70
 8002722:	d1e5      	bne.n	80026f0 <_printf_i+0x30>
 8002724:	680a      	ldr	r2, [r1, #0]
 8002726:	f042 0220 	orr.w	r2, r2, #32
 800272a:	600a      	str	r2, [r1, #0]
 800272c:	e003      	b.n	8002736 <_printf_i+0x76>
 800272e:	2a75      	cmp	r2, #117	; 0x75
 8002730:	d021      	beq.n	8002776 <_printf_i+0xb6>
 8002732:	2a78      	cmp	r2, #120	; 0x78
 8002734:	d1dc      	bne.n	80026f0 <_printf_i+0x30>
 8002736:	2278      	movs	r2, #120	; 0x78
 8002738:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800273c:	496e      	ldr	r1, [pc, #440]	; (80028f8 <_printf_i+0x238>)
 800273e:	e064      	b.n	800280a <_printf_i+0x14a>
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002746:	1d11      	adds	r1, r2, #4
 8002748:	6019      	str	r1, [r3, #0]
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002750:	2301      	movs	r3, #1
 8002752:	e0a3      	b.n	800289c <_printf_i+0x1dc>
 8002754:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002758:	f102 0104 	add.w	r1, r2, #4
 800275c:	6019      	str	r1, [r3, #0]
 800275e:	d0d7      	beq.n	8002710 <_printf_i+0x50>
 8002760:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002764:	2b00      	cmp	r3, #0
 8002766:	da03      	bge.n	8002770 <_printf_i+0xb0>
 8002768:	222d      	movs	r2, #45	; 0x2d
 800276a:	425b      	negs	r3, r3
 800276c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002770:	4962      	ldr	r1, [pc, #392]	; (80028fc <_printf_i+0x23c>)
 8002772:	220a      	movs	r2, #10
 8002774:	e017      	b.n	80027a6 <_printf_i+0xe6>
 8002776:	6820      	ldr	r0, [r4, #0]
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800277e:	d003      	beq.n	8002788 <_printf_i+0xc8>
 8002780:	1d08      	adds	r0, r1, #4
 8002782:	6018      	str	r0, [r3, #0]
 8002784:	680b      	ldr	r3, [r1, #0]
 8002786:	e006      	b.n	8002796 <_printf_i+0xd6>
 8002788:	f010 0f40 	tst.w	r0, #64	; 0x40
 800278c:	f101 0004 	add.w	r0, r1, #4
 8002790:	6018      	str	r0, [r3, #0]
 8002792:	d0f7      	beq.n	8002784 <_printf_i+0xc4>
 8002794:	880b      	ldrh	r3, [r1, #0]
 8002796:	4959      	ldr	r1, [pc, #356]	; (80028fc <_printf_i+0x23c>)
 8002798:	2a6f      	cmp	r2, #111	; 0x6f
 800279a:	bf14      	ite	ne
 800279c:	220a      	movne	r2, #10
 800279e:	2208      	moveq	r2, #8
 80027a0:	2000      	movs	r0, #0
 80027a2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80027a6:	6865      	ldr	r5, [r4, #4]
 80027a8:	60a5      	str	r5, [r4, #8]
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	f2c0 809c 	blt.w	80028e8 <_printf_i+0x228>
 80027b0:	6820      	ldr	r0, [r4, #0]
 80027b2:	f020 0004 	bic.w	r0, r0, #4
 80027b6:	6020      	str	r0, [r4, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d13f      	bne.n	800283c <_printf_i+0x17c>
 80027bc:	2d00      	cmp	r5, #0
 80027be:	f040 8095 	bne.w	80028ec <_printf_i+0x22c>
 80027c2:	4675      	mov	r5, lr
 80027c4:	2a08      	cmp	r2, #8
 80027c6:	d10b      	bne.n	80027e0 <_printf_i+0x120>
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	07da      	lsls	r2, r3, #31
 80027cc:	d508      	bpl.n	80027e0 <_printf_i+0x120>
 80027ce:	6923      	ldr	r3, [r4, #16]
 80027d0:	6862      	ldr	r2, [r4, #4]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	bfde      	ittt	le
 80027d6:	2330      	movle	r3, #48	; 0x30
 80027d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027e0:	ebae 0305 	sub.w	r3, lr, r5
 80027e4:	6123      	str	r3, [r4, #16]
 80027e6:	f8cd 8000 	str.w	r8, [sp]
 80027ea:	463b      	mov	r3, r7
 80027ec:	aa03      	add	r2, sp, #12
 80027ee:	4621      	mov	r1, r4
 80027f0:	4630      	mov	r0, r6
 80027f2:	f7ff feef 	bl	80025d4 <_printf_common>
 80027f6:	3001      	adds	r0, #1
 80027f8:	d155      	bne.n	80028a6 <_printf_i+0x1e6>
 80027fa:	f04f 30ff 	mov.w	r0, #4294967295
 80027fe:	b005      	add	sp, #20
 8002800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002804:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002808:	493c      	ldr	r1, [pc, #240]	; (80028fc <_printf_i+0x23c>)
 800280a:	6822      	ldr	r2, [r4, #0]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002812:	f100 0504 	add.w	r5, r0, #4
 8002816:	601d      	str	r5, [r3, #0]
 8002818:	d001      	beq.n	800281e <_printf_i+0x15e>
 800281a:	6803      	ldr	r3, [r0, #0]
 800281c:	e002      	b.n	8002824 <_printf_i+0x164>
 800281e:	0655      	lsls	r5, r2, #25
 8002820:	d5fb      	bpl.n	800281a <_printf_i+0x15a>
 8002822:	8803      	ldrh	r3, [r0, #0]
 8002824:	07d0      	lsls	r0, r2, #31
 8002826:	bf44      	itt	mi
 8002828:	f042 0220 	orrmi.w	r2, r2, #32
 800282c:	6022      	strmi	r2, [r4, #0]
 800282e:	b91b      	cbnz	r3, 8002838 <_printf_i+0x178>
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	f022 0220 	bic.w	r2, r2, #32
 8002836:	6022      	str	r2, [r4, #0]
 8002838:	2210      	movs	r2, #16
 800283a:	e7b1      	b.n	80027a0 <_printf_i+0xe0>
 800283c:	4675      	mov	r5, lr
 800283e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002842:	fb02 3310 	mls	r3, r2, r0, r3
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800284c:	4603      	mov	r3, r0
 800284e:	2800      	cmp	r0, #0
 8002850:	d1f5      	bne.n	800283e <_printf_i+0x17e>
 8002852:	e7b7      	b.n	80027c4 <_printf_i+0x104>
 8002854:	6808      	ldr	r0, [r1, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	6949      	ldr	r1, [r1, #20]
 800285a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800285e:	d004      	beq.n	800286a <_printf_i+0x1aa>
 8002860:	1d10      	adds	r0, r2, #4
 8002862:	6018      	str	r0, [r3, #0]
 8002864:	6813      	ldr	r3, [r2, #0]
 8002866:	6019      	str	r1, [r3, #0]
 8002868:	e007      	b.n	800287a <_printf_i+0x1ba>
 800286a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800286e:	f102 0004 	add.w	r0, r2, #4
 8002872:	6018      	str	r0, [r3, #0]
 8002874:	6813      	ldr	r3, [r2, #0]
 8002876:	d0f6      	beq.n	8002866 <_printf_i+0x1a6>
 8002878:	8019      	strh	r1, [r3, #0]
 800287a:	2300      	movs	r3, #0
 800287c:	6123      	str	r3, [r4, #16]
 800287e:	4675      	mov	r5, lr
 8002880:	e7b1      	b.n	80027e6 <_printf_i+0x126>
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	1d11      	adds	r1, r2, #4
 8002886:	6019      	str	r1, [r3, #0]
 8002888:	6815      	ldr	r5, [r2, #0]
 800288a:	6862      	ldr	r2, [r4, #4]
 800288c:	2100      	movs	r1, #0
 800288e:	4628      	mov	r0, r5
 8002890:	f7fd fca6 	bl	80001e0 <memchr>
 8002894:	b108      	cbz	r0, 800289a <_printf_i+0x1da>
 8002896:	1b40      	subs	r0, r0, r5
 8002898:	6060      	str	r0, [r4, #4]
 800289a:	6863      	ldr	r3, [r4, #4]
 800289c:	6123      	str	r3, [r4, #16]
 800289e:	2300      	movs	r3, #0
 80028a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028a4:	e79f      	b.n	80027e6 <_printf_i+0x126>
 80028a6:	6923      	ldr	r3, [r4, #16]
 80028a8:	462a      	mov	r2, r5
 80028aa:	4639      	mov	r1, r7
 80028ac:	4630      	mov	r0, r6
 80028ae:	47c0      	blx	r8
 80028b0:	3001      	adds	r0, #1
 80028b2:	d0a2      	beq.n	80027fa <_printf_i+0x13a>
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	079b      	lsls	r3, r3, #30
 80028b8:	d507      	bpl.n	80028ca <_printf_i+0x20a>
 80028ba:	2500      	movs	r5, #0
 80028bc:	f104 0919 	add.w	r9, r4, #25
 80028c0:	68e3      	ldr	r3, [r4, #12]
 80028c2:	9a03      	ldr	r2, [sp, #12]
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	429d      	cmp	r5, r3
 80028c8:	db05      	blt.n	80028d6 <_printf_i+0x216>
 80028ca:	68e0      	ldr	r0, [r4, #12]
 80028cc:	9b03      	ldr	r3, [sp, #12]
 80028ce:	4298      	cmp	r0, r3
 80028d0:	bfb8      	it	lt
 80028d2:	4618      	movlt	r0, r3
 80028d4:	e793      	b.n	80027fe <_printf_i+0x13e>
 80028d6:	2301      	movs	r3, #1
 80028d8:	464a      	mov	r2, r9
 80028da:	4639      	mov	r1, r7
 80028dc:	4630      	mov	r0, r6
 80028de:	47c0      	blx	r8
 80028e0:	3001      	adds	r0, #1
 80028e2:	d08a      	beq.n	80027fa <_printf_i+0x13a>
 80028e4:	3501      	adds	r5, #1
 80028e6:	e7eb      	b.n	80028c0 <_printf_i+0x200>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1a7      	bne.n	800283c <_printf_i+0x17c>
 80028ec:	780b      	ldrb	r3, [r1, #0]
 80028ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028f6:	e765      	b.n	80027c4 <_printf_i+0x104>
 80028f8:	08002b72 	.word	0x08002b72
 80028fc:	08002b61 	.word	0x08002b61

08002900 <_sbrk_r>:
 8002900:	b538      	push	{r3, r4, r5, lr}
 8002902:	4c06      	ldr	r4, [pc, #24]	; (800291c <_sbrk_r+0x1c>)
 8002904:	2300      	movs	r3, #0
 8002906:	4605      	mov	r5, r0
 8002908:	4608      	mov	r0, r1
 800290a:	6023      	str	r3, [r4, #0]
 800290c:	f7ff f918 	bl	8001b40 <_sbrk>
 8002910:	1c43      	adds	r3, r0, #1
 8002912:	d102      	bne.n	800291a <_sbrk_r+0x1a>
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	b103      	cbz	r3, 800291a <_sbrk_r+0x1a>
 8002918:	602b      	str	r3, [r5, #0]
 800291a:	bd38      	pop	{r3, r4, r5, pc}
 800291c:	20005fb8 	.word	0x20005fb8

08002920 <__sread>:
 8002920:	b510      	push	{r4, lr}
 8002922:	460c      	mov	r4, r1
 8002924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002928:	f000 f896 	bl	8002a58 <_read_r>
 800292c:	2800      	cmp	r0, #0
 800292e:	bfab      	itete	ge
 8002930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002932:	89a3      	ldrhlt	r3, [r4, #12]
 8002934:	181b      	addge	r3, r3, r0
 8002936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800293a:	bfac      	ite	ge
 800293c:	6563      	strge	r3, [r4, #84]	; 0x54
 800293e:	81a3      	strhlt	r3, [r4, #12]
 8002940:	bd10      	pop	{r4, pc}

08002942 <__swrite>:
 8002942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002946:	461f      	mov	r7, r3
 8002948:	898b      	ldrh	r3, [r1, #12]
 800294a:	05db      	lsls	r3, r3, #23
 800294c:	4605      	mov	r5, r0
 800294e:	460c      	mov	r4, r1
 8002950:	4616      	mov	r6, r2
 8002952:	d505      	bpl.n	8002960 <__swrite+0x1e>
 8002954:	2302      	movs	r3, #2
 8002956:	2200      	movs	r2, #0
 8002958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800295c:	f000 f868 	bl	8002a30 <_lseek_r>
 8002960:	89a3      	ldrh	r3, [r4, #12]
 8002962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800296a:	81a3      	strh	r3, [r4, #12]
 800296c:	4632      	mov	r2, r6
 800296e:	463b      	mov	r3, r7
 8002970:	4628      	mov	r0, r5
 8002972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002976:	f000 b817 	b.w	80029a8 <_write_r>

0800297a <__sseek>:
 800297a:	b510      	push	{r4, lr}
 800297c:	460c      	mov	r4, r1
 800297e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002982:	f000 f855 	bl	8002a30 <_lseek_r>
 8002986:	1c43      	adds	r3, r0, #1
 8002988:	89a3      	ldrh	r3, [r4, #12]
 800298a:	bf15      	itete	ne
 800298c:	6560      	strne	r0, [r4, #84]	; 0x54
 800298e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002996:	81a3      	strheq	r3, [r4, #12]
 8002998:	bf18      	it	ne
 800299a:	81a3      	strhne	r3, [r4, #12]
 800299c:	bd10      	pop	{r4, pc}

0800299e <__sclose>:
 800299e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029a2:	f000 b813 	b.w	80029cc <_close_r>
	...

080029a8 <_write_r>:
 80029a8:	b538      	push	{r3, r4, r5, lr}
 80029aa:	4c07      	ldr	r4, [pc, #28]	; (80029c8 <_write_r+0x20>)
 80029ac:	4605      	mov	r5, r0
 80029ae:	4608      	mov	r0, r1
 80029b0:	4611      	mov	r1, r2
 80029b2:	2200      	movs	r2, #0
 80029b4:	6022      	str	r2, [r4, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f7ff f816 	bl	80019e8 <_write>
 80029bc:	1c43      	adds	r3, r0, #1
 80029be:	d102      	bne.n	80029c6 <_write_r+0x1e>
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	b103      	cbz	r3, 80029c6 <_write_r+0x1e>
 80029c4:	602b      	str	r3, [r5, #0]
 80029c6:	bd38      	pop	{r3, r4, r5, pc}
 80029c8:	20005fb8 	.word	0x20005fb8

080029cc <_close_r>:
 80029cc:	b538      	push	{r3, r4, r5, lr}
 80029ce:	4c06      	ldr	r4, [pc, #24]	; (80029e8 <_close_r+0x1c>)
 80029d0:	2300      	movs	r3, #0
 80029d2:	4605      	mov	r5, r0
 80029d4:	4608      	mov	r0, r1
 80029d6:	6023      	str	r3, [r4, #0]
 80029d8:	f7ff f8cc 	bl	8001b74 <_close>
 80029dc:	1c43      	adds	r3, r0, #1
 80029de:	d102      	bne.n	80029e6 <_close_r+0x1a>
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	b103      	cbz	r3, 80029e6 <_close_r+0x1a>
 80029e4:	602b      	str	r3, [r5, #0]
 80029e6:	bd38      	pop	{r3, r4, r5, pc}
 80029e8:	20005fb8 	.word	0x20005fb8

080029ec <_fstat_r>:
 80029ec:	b538      	push	{r3, r4, r5, lr}
 80029ee:	4c07      	ldr	r4, [pc, #28]	; (8002a0c <_fstat_r+0x20>)
 80029f0:	2300      	movs	r3, #0
 80029f2:	4605      	mov	r5, r0
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	6023      	str	r3, [r4, #0]
 80029fa:	f7ff f8be 	bl	8001b7a <_fstat>
 80029fe:	1c43      	adds	r3, r0, #1
 8002a00:	d102      	bne.n	8002a08 <_fstat_r+0x1c>
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	b103      	cbz	r3, 8002a08 <_fstat_r+0x1c>
 8002a06:	602b      	str	r3, [r5, #0]
 8002a08:	bd38      	pop	{r3, r4, r5, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20005fb8 	.word	0x20005fb8

08002a10 <_isatty_r>:
 8002a10:	b538      	push	{r3, r4, r5, lr}
 8002a12:	4c06      	ldr	r4, [pc, #24]	; (8002a2c <_isatty_r+0x1c>)
 8002a14:	2300      	movs	r3, #0
 8002a16:	4605      	mov	r5, r0
 8002a18:	4608      	mov	r0, r1
 8002a1a:	6023      	str	r3, [r4, #0]
 8002a1c:	f7ff f8b2 	bl	8001b84 <_isatty>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d102      	bne.n	8002a2a <_isatty_r+0x1a>
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	b103      	cbz	r3, 8002a2a <_isatty_r+0x1a>
 8002a28:	602b      	str	r3, [r5, #0]
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	20005fb8 	.word	0x20005fb8

08002a30 <_lseek_r>:
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	4c07      	ldr	r4, [pc, #28]	; (8002a50 <_lseek_r+0x20>)
 8002a34:	4605      	mov	r5, r0
 8002a36:	4608      	mov	r0, r1
 8002a38:	4611      	mov	r1, r2
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	6022      	str	r2, [r4, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f7ff f8a2 	bl	8001b88 <_lseek>
 8002a44:	1c43      	adds	r3, r0, #1
 8002a46:	d102      	bne.n	8002a4e <_lseek_r+0x1e>
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	b103      	cbz	r3, 8002a4e <_lseek_r+0x1e>
 8002a4c:	602b      	str	r3, [r5, #0]
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
 8002a50:	20005fb8 	.word	0x20005fb8

08002a54 <__malloc_lock>:
 8002a54:	4770      	bx	lr

08002a56 <__malloc_unlock>:
 8002a56:	4770      	bx	lr

08002a58 <_read_r>:
 8002a58:	b538      	push	{r3, r4, r5, lr}
 8002a5a:	4c07      	ldr	r4, [pc, #28]	; (8002a78 <_read_r+0x20>)
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	4608      	mov	r0, r1
 8002a60:	4611      	mov	r1, r2
 8002a62:	2200      	movs	r2, #0
 8002a64:	6022      	str	r2, [r4, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f7ff f85c 	bl	8001b24 <_read>
 8002a6c:	1c43      	adds	r3, r0, #1
 8002a6e:	d102      	bne.n	8002a76 <_read_r+0x1e>
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	b103      	cbz	r3, 8002a76 <_read_r+0x1e>
 8002a74:	602b      	str	r3, [r5, #0]
 8002a76:	bd38      	pop	{r3, r4, r5, pc}
 8002a78:	20005fb8 	.word	0x20005fb8

08002a7c <_init>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	bf00      	nop
 8002a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a82:	bc08      	pop	{r3}
 8002a84:	469e      	mov	lr, r3
 8002a86:	4770      	bx	lr

08002a88 <_fini>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr
