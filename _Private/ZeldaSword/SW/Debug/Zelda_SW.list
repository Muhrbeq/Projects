
Zelda_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a4c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000028c  2000000c  08002c48  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000298  08002c48  00020298  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e159  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003c2b  00000000  00000000  0003e195  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bbec  00000000  00000000  00041dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dd8  00000000  00000000  0004d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000014d0  00000000  00000000  0004e788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009085  00000000  00000000  0004fc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005e2d  00000000  00000000  00058cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005eb0a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002600  00000000  00000000  0005eb88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002bc8 	.word	0x08002bc8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002bc8 	.word	0x08002bc8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_InitTick+0x40>)
{
 80004e8:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80004ea:	6818      	ldr	r0, [r3, #0]
 80004ec:	b908      	cbnz	r0, 80004f2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80004f2:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_InitTick+0x44>)
 80004f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f8:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fc:	6810      	ldr	r0, [r2, #0]
 80004fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8000502:	f000 fb71 	bl	8000be8 <HAL_SYSTICK_Config>
 8000506:	4604      	mov	r4, r0
 8000508:	2800      	cmp	r0, #0
 800050a:	d1f0      	bne.n	80004ee <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050c:	2d0f      	cmp	r5, #15
 800050e:	d8ee      	bhi.n	80004ee <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000510:	4602      	mov	r2, r0
 8000512:	4629      	mov	r1, r5
 8000514:	f04f 30ff 	mov.w	r0, #4294967295
 8000518:	f000 fb24 	bl	8000b64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <HAL_InitTick+0x48>)
 800051e:	4620      	mov	r0, r4
 8000520:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000000 	.word	0x20000000
 8000528:	20000008 	.word	0x20000008
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000532:	2003      	movs	r0, #3
 8000534:	f000 fb04 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000538:	2000      	movs	r0, #0
 800053a:	f7ff ffd3 	bl	80004e4 <HAL_InitTick>
 800053e:	4604      	mov	r4, r0
 8000540:	b918      	cbnz	r0, 800054a <HAL_Init+0x1a>
    HAL_MspInit();
 8000542:	f002 f9a3 	bl	800288c <HAL_MspInit>
}
 8000546:	4620      	mov	r0, r4
 8000548:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800054a:	2401      	movs	r4, #1
 800054c:	e7fb      	b.n	8000546 <HAL_Init+0x16>
	...

08000550 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <HAL_IncTick+0x10>)
 8000552:	4904      	ldr	r1, [pc, #16]	; (8000564 <HAL_IncTick+0x14>)
 8000554:	6813      	ldr	r3, [r2, #0]
 8000556:	6809      	ldr	r1, [r1, #0]
 8000558:	440b      	add	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	2000015c 	.word	0x2000015c
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <HAL_GetTick+0x8>)
 800056a:	6818      	ldr	r0, [r3, #0]
}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	2000015c 	.word	0x2000015c

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b538      	push	{r3, r4, r5, lr}
 8000576:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000578:	f7ff fff6 	bl	8000568 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800057c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	bf1c      	itt	ne
 8000580:	4b05      	ldrne	r3, [pc, #20]	; (8000598 <HAL_Delay+0x24>)
 8000582:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000584:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000586:	bf18      	it	ne
 8000588:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058a:	f7ff ffed 	bl	8000568 <HAL_GetTick>
 800058e:	1b40      	subs	r0, r0, r5
 8000590:	4284      	cmp	r4, r0
 8000592:	d8fa      	bhi.n	800058a <HAL_Delay+0x16>
  {
  }
}
 8000594:	bd38      	pop	{r3, r4, r5, pc}
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000

0800059c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800059c:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800059e:	0dcc      	lsrs	r4, r1, #23
 80005a0:	f004 0404 	and.w	r4, r4, #4
 80005a4:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 80005a6:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80005aa:	5823      	ldr	r3, [r4, r0]
 80005ac:	2507      	movs	r5, #7
 80005ae:	408d      	lsls	r5, r1
 80005b0:	ea23 0305 	bic.w	r3, r3, r5
 80005b4:	fa02 f101 	lsl.w	r1, r2, r1
 80005b8:	4319      	orrs	r1, r3
 80005ba:	5021      	str	r1, [r4, r0]
 80005bc:	bd30      	pop	{r4, r5, pc}

080005be <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80005be:	6880      	ldr	r0, [r0, #8]
}
 80005c0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80005c4:	4770      	bx	lr
	...

080005c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80005c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80005ce:	4604      	mov	r4, r0
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d06e      	beq.n	80006b2 <HAL_ADC_Init+0xea>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80005d4:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80005d6:	b925      	cbnz	r5, 80005e2 <HAL_ADC_Init+0x1a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005d8:	f001 ff7e 	bl	80024d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80005dc:	65e5      	str	r5, [r4, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80005de:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80005e2:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80005e4:	6883      	ldr	r3, [r0, #8]
 80005e6:	0099      	lsls	r1, r3, #2
 80005e8:	d465      	bmi.n	80006b6 <HAL_ADC_Init+0xee>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80005ea:	6883      	ldr	r3, [r0, #8]
 80005ec:	00da      	lsls	r2, r3, #3
 80005ee:	d569      	bpl.n	80006c4 <HAL_ADC_Init+0xfc>
 80005f0:	6883      	ldr	r3, [r0, #8]
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	d574      	bpl.n	80006e0 <HAL_ADC_Init+0x118>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005f6:	2100      	movs	r1, #0

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80005f8:	f7ff ffe1 	bl	80005be <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80005fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80005fe:	f013 0f10 	tst.w	r3, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000602:	6da3      	ldr	r3, [r4, #88]	; 0x58
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000604:	d152      	bne.n	80006ac <HAL_ADC_Init+0xe4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000606:	2800      	cmp	r0, #0
 8000608:	d150      	bne.n	80006ac <HAL_ADC_Init+0xe4>
    ADC_STATE_CLR_SET(hadc->State,
 800060a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800060e:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000612:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8000614:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000616:	6883      	ldr	r3, [r0, #8]
 8000618:	07dd      	lsls	r5, r3, #31
 800061a:	d56b      	bpl.n	80006f4 <HAL_ADC_Init+0x12c>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800061c:	68e5      	ldr	r5, [r4, #12]
 800061e:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000620:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8000624:	432b      	orrs	r3, r5
 8000626:	68a5      	ldr	r5, [r4, #8]
 8000628:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800062a:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800062c:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 800062e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000636:	bf02      	ittt	eq
 8000638:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 800063a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800063e:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000642:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000644:	b122      	cbz	r2, 8000650 <HAL_ADC_Init+0x88>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8000646:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000648:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800064c:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800064e:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000650:	68c5      	ldr	r5, [r0, #12]
 8000652:	4a41      	ldr	r2, [pc, #260]	; (8000758 <HAL_ADC_Init+0x190>)
 8000654:	402a      	ands	r2, r5
 8000656:	4313      	orrs	r3, r2
 8000658:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800065a:	f7ff ffb0 	bl	80005be <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800065e:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	0712      	lsls	r2, r2, #28
 8000664:	d552      	bpl.n	800070c <HAL_ADC_Init+0x144>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000666:	6922      	ldr	r2, [r4, #16]
 8000668:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800066a:	bf05      	ittet	eq
 800066c:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 800066e:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000670:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000672:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000676:	bf06      	itte	eq
 8000678:	f020 000f 	biceq.w	r0, r0, #15
 800067c:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800067e:	f022 020f 	bicne.w	r2, r2, #15
 8000682:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000684:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000686:	f023 0303 	bic.w	r3, r3, #3
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000690:	4608      	mov	r0, r1
 8000692:	b003      	add	sp, #12
 8000694:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8000696:	9b01      	ldr	r3, [sp, #4]
 8000698:	3b01      	subs	r3, #1
 800069a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800069c:	9b01      	ldr	r3, [sp, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1f9      	bne.n	8000696 <HAL_ADC_Init+0xce>
 80006a2:	e7a5      	b.n	80005f0 <HAL_ADC_Init+0x28>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80006a4:	691a      	ldr	r2, [r3, #16]
 80006a6:	f022 0201 	bic.w	r2, r2, #1
 80006aa:	e053      	b.n	8000754 <HAL_ADC_Init+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	65a3      	str	r3, [r4, #88]	; 0x58
    return HAL_ERROR;
 80006b2:	2101      	movs	r1, #1
 80006b4:	e7ec      	b.n	8000690 <HAL_ADC_Init+0xc8>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80006b6:	6883      	ldr	r3, [r0, #8]
 80006b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80006bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006c0:	6083      	str	r3, [r0, #8]
 80006c2:	e792      	b.n	80005ea <HAL_ADC_Init+0x22>
  MODIFY_REG(ADCx->CR,
 80006c4:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80006c6:	4a25      	ldr	r2, [pc, #148]	; (800075c <HAL_ADC_Init+0x194>)
 80006c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80006cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	6083      	str	r3, [r0, #8]
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <HAL_ADC_Init+0x198>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	fbb3 f3f2 	udiv	r3, r3, r2
 80006de:	e7dc      	b.n	800069a <HAL_ADC_Init+0xd2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80006e2:	f043 0310 	orr.w	r3, r3, #16
 80006e6:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80006ea:	f043 0301 	orr.w	r3, r3, #1
 80006ee:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80006f0:	2101      	movs	r1, #1
 80006f2:	e781      	b.n	80005f8 <HAL_ADC_Init+0x30>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <HAL_ADC_Init+0x19c>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	07db      	lsls	r3, r3, #31
 80006fa:	d48f      	bmi.n	800061c <HAL_ADC_Init+0x54>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80006fc:	4a1a      	ldr	r2, [pc, #104]	; (8000768 <HAL_ADC_Init+0x1a0>)
 80006fe:	6865      	ldr	r5, [r4, #4]
 8000700:	6893      	ldr	r3, [r2, #8]
 8000702:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000706:	432b      	orrs	r3, r5
 8000708:	6093      	str	r3, [r2, #8]
 800070a:	e787      	b.n	800061c <HAL_ADC_Init+0x54>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800070c:	2800      	cmp	r0, #0
 800070e:	d1aa      	bne.n	8000666 <HAL_ADC_Init+0x9e>
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000710:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000714:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000716:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000718:	0052      	lsls	r2, r2, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800071a:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 800071e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000720:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000724:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000726:	f020 0006 	bic.w	r0, r0, #6
 800072a:	4302      	orrs	r2, r0
 800072c:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800072e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8000732:	2a01      	cmp	r2, #1
 8000734:	d1b6      	bne.n	80006a4 <HAL_ADC_Init+0xdc>
        MODIFY_REG(hadc->Instance->CFGR2,
 8000736:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8000738:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800073a:	6918      	ldr	r0, [r3, #16]
 800073c:	432a      	orrs	r2, r5
 800073e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000740:	f042 0201 	orr.w	r2, r2, #1
 8000744:	432a      	orrs	r2, r5
 8000746:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000748:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800074c:	432a      	orrs	r2, r5
 800074e:	f020 0004 	bic.w	r0, r0, #4
 8000752:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000754:	611a      	str	r2, [r3, #16]
 8000756:	e786      	b.n	8000666 <HAL_ADC_Init+0x9e>
 8000758:	fff0c007 	.word	0xfff0c007
 800075c:	00030d40 	.word	0x00030d40
 8000760:	20000008 	.word	0x20000008
 8000764:	50040000 	.word	0x50040000
 8000768:	50040300 	.word	0x50040300

0800076c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800076c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000772:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8000776:	2b01      	cmp	r3, #1
{
 8000778:	4605      	mov	r5, r0
 800077a:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 800077c:	f000 8156 	beq.w	8000a2c <HAL_ADC_ConfigChannel+0x2c0>
 8000780:	2301      	movs	r3, #1
 8000782:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000786:	6800      	ldr	r0, [r0, #0]
 8000788:	f7ff ff19 	bl	80005be <LL_ADC_REG_IsConversionOngoing>
 800078c:	2800      	cmp	r0, #0
 800078e:	f040 8147 	bne.w	8000a20 <HAL_ADC_ConfigChannel+0x2b4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000792:	684b      	ldr	r3, [r1, #4]
 8000794:	2b05      	cmp	r3, #5
 8000796:	d808      	bhi.n	80007aa <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 8000798:	3b02      	subs	r3, #2
 800079a:	2b03      	cmp	r3, #3
 800079c:	d83a      	bhi.n	8000814 <HAL_ADC_ConfigChannel+0xa8>
 800079e:	e8df f003 	tbb	[pc, r3]
 80007a2:	3202      	.short	0x3202
 80007a4:	3634      	.short	0x3634
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80007a6:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80007a8:	6063      	str	r3, [r4, #4]
      }
    }
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80007aa:	6862      	ldr	r2, [r4, #4]
 80007ac:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 80007ae:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80007b0:	0991      	lsrs	r1, r2, #6
 80007b2:	f001 010c 	and.w	r1, r1, #12
 80007b6:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80007ba:	f002 021f 	and.w	r2, r2, #31
 80007be:	59ce      	ldr	r6, [r1, r7]
 80007c0:	f04f 0e1f 	mov.w	lr, #31
 80007c4:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80007c8:	4093      	lsls	r3, r2
 80007ca:	fa0e f202 	lsl.w	r2, lr, r2
 80007ce:	ea26 0202 	bic.w	r2, r6, r2
 80007d2:	4313      	orrs	r3, r2
 80007d4:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80007d6:	f7ff fef2 	bl	80005be <LL_ADC_REG_IsConversionOngoing>
 80007da:	4603      	mov	r3, r0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80007dc:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80007de:	6882      	ldr	r2, [r0, #8]
 80007e0:	0716      	lsls	r6, r2, #28
 80007e2:	f140 8125 	bpl.w	8000a30 <HAL_ADC_ConfigChannel+0x2c4>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80007e6:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007e8:	6883      	ldr	r3, [r0, #8]
 80007ea:	07d9      	lsls	r1, r3, #31
 80007ec:	f140 814c 	bpl.w	8000a88 <HAL_ADC_ConfigChannel+0x31c>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80007f0:	6821      	ldr	r1, [r4, #0]
 80007f2:	4bc1      	ldr	r3, [pc, #772]	; (8000af8 <HAL_ADC_ConfigChannel+0x38c>)
 80007f4:	4219      	tst	r1, r3
 80007f6:	f040 80c5 	bne.w	8000984 <HAL_ADC_ConfigChannel+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007fa:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007fc:	2300      	movs	r3, #0
 80007fe:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8000802:	b003      	add	sp, #12
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000806:	2312      	movs	r3, #18
 8000808:	e7ce      	b.n	80007a8 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800080a:	2318      	movs	r3, #24
 800080c:	e7cc      	b.n	80007a8 <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800080e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000812:	e7c9      	b.n	80007a8 <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8000814:	2306      	movs	r3, #6
 8000816:	e7c7      	b.n	80007a8 <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000818:	6821      	ldr	r1, [r4, #0]
 800081a:	f7ff febf 	bl	800059c <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800081e:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000820:	6953      	ldr	r3, [r2, #20]
 8000822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000826:	e113      	b.n	8000a50 <HAL_ADC_ConfigChannel+0x2e4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000828:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800082a:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800082c:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8000830:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8000834:	2e00      	cmp	r6, #0
 8000836:	d13e      	bne.n	80008b6 <HAL_ADC_ConfigChannel+0x14a>
 8000838:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800083c:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 800083e:	bf02      	ittt	eq
 8000840:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000842:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000846:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000848:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800084a:	6822      	ldr	r2, [r4, #0]
 800084c:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800084e:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8000852:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8000856:	f100 010c 	add.w	r1, r0, #12
 800085a:	bb8f      	cbnz	r7, 80008c0 <HAL_ADC_ConfigChannel+0x154>
 800085c:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8000860:	42be      	cmp	r6, r7
 8000862:	f040 815f 	bne.w	8000b24 <HAL_ADC_ConfigChannel+0x3b8>
  MODIFY_REG(*preg,
 8000866:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000868:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800086c:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800086e:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000870:	6883      	ldr	r3, [r0, #8]
 8000872:	6883      	ldr	r3, [r0, #8]
 8000874:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000878:	f100 0608 	add.w	r6, r0, #8
 800087c:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000880:	bb57      	cbnz	r7, 80008d8 <HAL_ADC_ConfigChannel+0x16c>
 8000882:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000886:	4293      	cmp	r3, r2
 8000888:	f040 8153 	bne.w	8000b32 <HAL_ADC_ConfigChannel+0x3c6>
  MODIFY_REG(*preg,
 800088c:	6833      	ldr	r3, [r6, #0]
 800088e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000892:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000894:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	68c2      	ldr	r2, [r0, #12]
 800089a:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800089e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80008a2:	bb20      	cbnz	r0, 80008ee <HAL_ADC_ConfigChannel+0x182>
 80008a4:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80008a8:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 80008aa:	bf02      	ittt	eq
 80008ac:	680b      	ldreq	r3, [r1, #0]
 80008ae:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80008b2:	600b      	streq	r3, [r1, #0]
 80008b4:	e797      	b.n	80007e6 <HAL_ADC_ConfigChannel+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b6:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80008ba:	fab2 f282 	clz	r2, r2
 80008be:	e7bd      	b.n	800083c <HAL_ADC_ConfigChannel+0xd0>
 80008c0:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80008c4:	fab7 f787 	clz	r7, r7
 80008c8:	42be      	cmp	r6, r7
 80008ca:	d0cc      	beq.n	8000866 <HAL_ADC_ConfigChannel+0xfa>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008cc:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80008d0:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80008d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80008d4:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80008d8:	fa92 f2a2 	rbit	r2, r2
 80008dc:	fab2 f282 	clz	r2, r2
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d0d3      	beq.n	800088c <HAL_ADC_ConfigChannel+0x120>
 80008e4:	68c3      	ldr	r3, [r0, #12]
 80008e6:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80008ee:	fa93 f3a3 	rbit	r3, r3
 80008f2:	fab3 f383 	clz	r3, r3
 80008f6:	e7d7      	b.n	80008a8 <HAL_ADC_ConfigChannel+0x13c>
 80008f8:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80008fc:	fab2 f282 	clz	r2, r2
 8000900:	3201      	adds	r2, #1
 8000902:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000906:	2a09      	cmp	r2, #9
 8000908:	d910      	bls.n	800092c <HAL_ADC_ConfigChannel+0x1c0>
 800090a:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	3201      	adds	r2, #1
 8000914:	0692      	lsls	r2, r2, #26
 8000916:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 800091a:	fa93 f1a3 	rbit	r1, r3
 800091e:	fab1 f181 	clz	r1, r1
 8000922:	3101      	adds	r1, #1
 8000924:	f001 021f 	and.w	r2, r1, #31
 8000928:	2101      	movs	r1, #1
 800092a:	e017      	b.n	800095c <HAL_ADC_ConfigChannel+0x1f0>
 800092c:	fa93 f6a3 	rbit	r6, r3
 8000930:	fab6 f686 	clz	r6, r6
 8000934:	3601      	adds	r6, #1
 8000936:	06b6      	lsls	r6, r6, #26
 8000938:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800093c:	fa93 f1a3 	rbit	r1, r3
 8000940:	fab1 f181 	clz	r1, r1
 8000944:	3101      	adds	r1, #1
 8000946:	f001 021f 	and.w	r2, r1, #31
 800094a:	2101      	movs	r1, #1
 800094c:	e0c1      	b.n	8000ad2 <HAL_ADC_ConfigChannel+0x366>
 800094e:	fa93 f1a3 	rbit	r1, r3
 8000952:	fab1 f181 	clz	r1, r1
 8000956:	e0c3      	b.n	8000ae0 <HAL_ADC_ConfigChannel+0x374>
 8000958:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800095c:	4091      	lsls	r1, r2
 800095e:	ea41 0206 	orr.w	r2, r1, r6
 8000962:	b957      	cbnz	r7, 800097a <HAL_ADC_ConfigChannel+0x20e>
 8000964:	0e9b      	lsrs	r3, r3, #26
 8000966:	3301      	adds	r3, #1
 8000968:	f003 031f 	and.w	r3, r3, #31
 800096c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000970:	391e      	subs	r1, #30
 8000972:	0509      	lsls	r1, r1, #20
 8000974:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000978:	e0b8      	b.n	8000aec <HAL_ADC_ConfigChannel+0x380>
 800097a:	fa93 f3a3 	rbit	r3, r3
 800097e:	fab3 f383 	clz	r3, r3
 8000982:	e7f0      	b.n	8000966 <HAL_ADC_ConfigChannel+0x1fa>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000984:	4b5d      	ldr	r3, [pc, #372]	; (8000afc <HAL_ADC_ConfigChannel+0x390>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000986:	4a5e      	ldr	r2, [pc, #376]	; (8000b00 <HAL_ADC_ConfigChannel+0x394>)
 8000988:	6898      	ldr	r0, [r3, #8]
 800098a:	4291      	cmp	r1, r2
 800098c:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
 8000990:	d11d      	bne.n	80009ce <HAL_ADC_ConfigChannel+0x262>
 8000992:	0202      	lsls	r2, r0, #8
 8000994:	f53f af31 	bmi.w	80007fa <HAL_ADC_ConfigChannel+0x8e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000998:	6829      	ldr	r1, [r5, #0]
 800099a:	4a5a      	ldr	r2, [pc, #360]	; (8000b04 <HAL_ADC_ConfigChannel+0x398>)
 800099c:	4291      	cmp	r1, r2
 800099e:	f47f af2c 	bne.w	80007fa <HAL_ADC_ConfigChannel+0x8e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009a2:	689a      	ldr	r2, [r3, #8]
 80009a4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80009a8:	4322      	orrs	r2, r4
 80009aa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80009ae:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80009b0:	4b55      	ldr	r3, [pc, #340]	; (8000b08 <HAL_ADC_ConfigChannel+0x39c>)
 80009b2:	4a56      	ldr	r2, [pc, #344]	; (8000b0c <HAL_ADC_ConfigChannel+0x3a0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80009ba:	230c      	movs	r3, #12
 80009bc:	4353      	muls	r3, r2
            wait_loop_index--;
 80009be:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80009c0:	9b01      	ldr	r3, [sp, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f43f af19 	beq.w	80007fa <HAL_ADC_ConfigChannel+0x8e>
            wait_loop_index--;
 80009c8:	9b01      	ldr	r3, [sp, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	e7f7      	b.n	80009be <HAL_ADC_ConfigChannel+0x252>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80009ce:	4a50      	ldr	r2, [pc, #320]	; (8000b10 <HAL_ADC_ConfigChannel+0x3a4>)
 80009d0:	4291      	cmp	r1, r2
 80009d2:	d111      	bne.n	80009f8 <HAL_ADC_ConfigChannel+0x28c>
 80009d4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80009d8:	f47f af0f 	bne.w	80007fa <HAL_ADC_ConfigChannel+0x8e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80009dc:	6829      	ldr	r1, [r5, #0]
 80009de:	f1a2 42f7 	sub.w	r2, r2, #2071986176	; 0x7b800000
 80009e2:	4291      	cmp	r1, r2
 80009e4:	f47f af09 	bne.w	80007fa <HAL_ADC_ConfigChannel+0x8e>
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80009ee:	4322      	orrs	r2, r4
 80009f0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	e701      	b.n	80007fc <HAL_ADC_ConfigChannel+0x90>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80009f8:	4a46      	ldr	r2, [pc, #280]	; (8000b14 <HAL_ADC_ConfigChannel+0x3a8>)
 80009fa:	4291      	cmp	r1, r2
 80009fc:	f47f aefd 	bne.w	80007fa <HAL_ADC_ConfigChannel+0x8e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000a00:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8000a04:	f47f aef9 	bne.w	80007fa <HAL_ADC_ConfigChannel+0x8e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8000a08:	6829      	ldr	r1, [r5, #0]
 8000a0a:	4a3e      	ldr	r2, [pc, #248]	; (8000b04 <HAL_ADC_ConfigChannel+0x398>)
 8000a0c:	4291      	cmp	r1, r2
 8000a0e:	f47f aef4 	bne.w	80007fa <HAL_ADC_ConfigChannel+0x8e>
 8000a12:	689a      	ldr	r2, [r3, #8]
 8000a14:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8000a18:	4322      	orrs	r2, r4
 8000a1a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000a1e:	e7e9      	b.n	80009f4 <HAL_ADC_ConfigChannel+0x288>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a20:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8000a22:	f042 0220 	orr.w	r2, r2, #32
 8000a26:	65aa      	str	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000a28:	4618      	mov	r0, r3
 8000a2a:	e6e7      	b.n	80007fc <HAL_ADC_ConfigChannel+0x90>
  __HAL_LOCK(hadc);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	e6e8      	b.n	8000802 <HAL_ADC_ConfigChannel+0x96>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f47f aed8 	bne.w	80007e6 <HAL_ADC_ConfigChannel+0x7a>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000a36:	68a2      	ldr	r2, [r4, #8]
 8000a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a3c:	f47f aeec 	bne.w	8000818 <HAL_ADC_ConfigChannel+0xac>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000a40:	461a      	mov	r2, r3
 8000a42:	6821      	ldr	r1, [r4, #0]
 8000a44:	f7ff fdaa 	bl	800059c <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000a48:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000a4a:	6953      	ldr	r3, [r2, #20]
 8000a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a50:	6153      	str	r3, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000a52:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000a54:	682b      	ldr	r3, [r5, #0]
 8000a56:	6822      	ldr	r2, [r4, #0]
 8000a58:	68d9      	ldr	r1, [r3, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000a5a:	2e04      	cmp	r6, #4
 8000a5c:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8000a60:	f43f aee2 	beq.w	8000828 <HAL_ADC_ConfigChannel+0xbc>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000a64:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8000a68:	0059      	lsls	r1, r3, #1
 8000a6a:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 8000a6c:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8000a70:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a78:	408b      	lsls	r3, r1
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <HAL_ADC_ConfigChannel+0x3ac>)
 8000a7e:	403a      	ands	r2, r7
 8000a80:	4313      	orrs	r3, r2
 8000a82:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 8000a86:	e6ae      	b.n	80007e6 <HAL_ADC_ConfigChannel+0x7a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000a88:	68e6      	ldr	r6, [r4, #12]
 8000a8a:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8000a8c:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <HAL_ADC_ConfigChannel+0x3b0>)
 8000a8e:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8000a92:	f006 0e18 	and.w	lr, r6, #24
 8000a96:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8000a9a:	fa22 f20e 	lsr.w	r2, r2, lr
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	ea21 0107 	bic.w	r1, r1, r7
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000aaa:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <HAL_ADC_ConfigChannel+0x3b4>)
 8000aac:	4296      	cmp	r6, r2
 8000aae:	f47f ae9f 	bne.w	80007f0 <HAL_ADC_ConfigChannel+0x84>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000ab2:	2f00      	cmp	r7, #0
 8000ab4:	f47f af20 	bne.w	80008f8 <HAL_ADC_ConfigChannel+0x18c>
 8000ab8:	0e9e      	lsrs	r6, r3, #26
 8000aba:	3601      	adds	r6, #1
 8000abc:	f006 021f 	and.w	r2, r6, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000ac0:	2a09      	cmp	r2, #9
 8000ac2:	f04f 0101 	mov.w	r1, #1
 8000ac6:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8000aca:	f63f af45 	bhi.w	8000958 <HAL_ADC_ConfigChannel+0x1ec>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000ace:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000ad2:	4091      	lsls	r1, r2
 8000ad4:	ea41 0206 	orr.w	r2, r1, r6
 8000ad8:	2f00      	cmp	r7, #0
 8000ada:	f47f af38 	bne.w	800094e <HAL_ADC_ConfigChannel+0x1e2>
 8000ade:	0e99      	lsrs	r1, r3, #26
 8000ae0:	3101      	adds	r1, #1
 8000ae2:	f001 011f 	and.w	r1, r1, #31
 8000ae6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000aea:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000aec:	4311      	orrs	r1, r2
 8000aee:	68a2      	ldr	r2, [r4, #8]
 8000af0:	f7ff fd54 	bl	800059c <LL_ADC_SetChannelSamplingTime>
 8000af4:	e67c      	b.n	80007f0 <HAL_ADC_ConfigChannel+0x84>
 8000af6:	bf00      	nop
 8000af8:	80080000 	.word	0x80080000
 8000afc:	50040300 	.word	0x50040300
 8000b00:	c7520000 	.word	0xc7520000
 8000b04:	50040000 	.word	0x50040000
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	00030d40 	.word	0x00030d40
 8000b10:	cb840000 	.word	0xcb840000
 8000b14:	80000001 	.word	0x80000001
 8000b18:	03fff000 	.word	0x03fff000
 8000b1c:	0007ffff 	.word	0x0007ffff
 8000b20:	407f0000 	.word	0x407f0000
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b24:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b28:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8000b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b2c:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000b30:	e6a7      	b.n	8000882 <HAL_ADC_ConfigChannel+0x116>
 8000b32:	68c3      	ldr	r3, [r0, #12]
 8000b34:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000b3c:	e6b2      	b.n	80008a4 <HAL_ADC_ConfigChannel+0x138>
 8000b3e:	bf00      	nop

08000b40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b42:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b48:	041b      	lsls	r3, r3, #16
 8000b4a:	0c1b      	lsrs	r3, r3, #16
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	0200      	lsls	r0, r0, #8
 8000b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b56:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b5a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b5c:	60d3      	str	r3, [r2, #12]
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b66:	b530      	push	{r4, r5, lr}
 8000b68:	68dc      	ldr	r4, [r3, #12]
 8000b6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	bf28      	it	cs
 8000b78:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 0501 	mov.w	r5, #1
 8000b80:	fa05 f303 	lsl.w	r3, r5, r3
 8000b84:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b88:	bf8c      	ite	hi
 8000b8a:	3c03      	subhi	r4, #3
 8000b8c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8e:	4019      	ands	r1, r3
 8000b90:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b92:	fa05 f404 	lsl.w	r4, r5, r4
 8000b96:	3c01      	subs	r4, #1
 8000b98:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	ea42 0201 	orr.w	r2, r2, r1
 8000ba0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	bfad      	iteet	ge
 8000ba6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	f000 000f 	andlt.w	r0, r0, #15
 8000bae:	4b06      	ldrlt	r3, [pc, #24]	; (8000bc8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	bfb5      	itete	lt
 8000bb6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bc0:	bd30      	pop	{r4, r5, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00
 8000bc8:	e000ed14 	.word	0xe000ed14

08000bcc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	db08      	blt.n	8000be2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd0:	0942      	lsrs	r2, r0, #5
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f000 001f 	and.w	r0, r0, #31
 8000bd8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bdc:	4b01      	ldr	r3, [pc, #4]	; (8000be4 <HAL_NVIC_EnableIRQ+0x18>)
 8000bde:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	3801      	subs	r0, #1
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d20a      	bcs.n	8000c06 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	21f0      	movs	r1, #240	; 0xf0
 8000bf8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c18:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1c:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8000da4 <HAL_GPIO_Init+0x190>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c20:	4a5e      	ldr	r2, [pc, #376]	; (8000d9c <HAL_GPIO_Init+0x188>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c22:	9301      	str	r3, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c24:	f04f 0903 	mov.w	r9, #3
  uint32_t position = 0x00u;
 8000c28:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2a:	9c01      	ldr	r4, [sp, #4]
 8000c2c:	40dc      	lsrs	r4, r3
 8000c2e:	d102      	bne.n	8000c36 <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8000c30:	b005      	add	sp, #20
 8000c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c36:	2401      	movs	r4, #1
 8000c38:	fa04 fc03 	lsl.w	ip, r4, r3
    if (iocurrent != 0x00u)
 8000c3c:	9c01      	ldr	r4, [sp, #4]
 8000c3e:	ea14 050c 	ands.w	r5, r4, ip
 8000c42:	f000 80a0 	beq.w	8000d86 <HAL_GPIO_Init+0x172>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c46:	684c      	ldr	r4, [r1, #4]
 8000c48:	f024 0e10 	bic.w	lr, r4, #16
 8000c4c:	f10e 36ff 	add.w	r6, lr, #4294967295
 8000c50:	2e01      	cmp	r6, #1
 8000c52:	ea4f 0643 	mov.w	r6, r3, lsl #1
 8000c56:	d812      	bhi.n	8000c7e <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8000c58:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c5a:	fa09 fa06 	lsl.w	sl, r9, r6
 8000c5e:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c62:	68cf      	ldr	r7, [r1, #12]
 8000c64:	40b7      	lsls	r7, r6
 8000c66:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000c6a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c6c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c6e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c72:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000c76:	409f      	lsls	r7, r3
 8000c78:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000c7c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c7e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c80:	fa09 fc06 	lsl.w	ip, r9, r6
 8000c84:	ea6f 0c0c 	mvn.w	ip, ip
 8000c88:	ea07 0a0c 	and.w	sl, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c8c:	688f      	ldr	r7, [r1, #8]
 8000c8e:	40b7      	lsls	r7, r6
 8000c90:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c94:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8000c98:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c9a:	d116      	bne.n	8000cca <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3u];
 8000c9c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ca0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000ca8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000cb0:	f04f 0e0f 	mov.w	lr, #15
 8000cb4:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000cb8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cbc:	690f      	ldr	r7, [r1, #16]
 8000cbe:	fa07 f70b 	lsl.w	r7, r7, fp
 8000cc2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8000cc6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000cca:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ccc:	ea0c 0c07 	and.w	ip, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cd0:	f004 0703 	and.w	r7, r4, #3
 8000cd4:	fa07 f606 	lsl.w	r6, r7, r6
 8000cd8:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8000cdc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cde:	00e6      	lsls	r6, r4, #3
 8000ce0:	d551      	bpl.n	8000d86 <HAL_GPIO_Init+0x172>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000ce6:	f046 0601 	orr.w	r6, r6, #1
 8000cea:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 8000cee:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000cf2:	f023 0703 	bic.w	r7, r3, #3
 8000cf6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000cfa:	f006 0601 	and.w	r6, r6, #1
 8000cfe:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d02:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d04:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d08:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d0a:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d0c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d10:	f04f 0e0f 	mov.w	lr, #15
 8000d14:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d18:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d1c:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d20:	d033      	beq.n	8000d8a <HAL_GPIO_Init+0x176>
 8000d22:	4e1f      	ldr	r6, [pc, #124]	; (8000da0 <HAL_GPIO_Init+0x18c>)
 8000d24:	42b0      	cmp	r0, r6
 8000d26:	d032      	beq.n	8000d8e <HAL_GPIO_Init+0x17a>
 8000d28:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d2c:	42b0      	cmp	r0, r6
 8000d2e:	d030      	beq.n	8000d92 <HAL_GPIO_Init+0x17e>
 8000d30:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d34:	42b0      	cmp	r0, r6
 8000d36:	d02e      	beq.n	8000d96 <HAL_GPIO_Init+0x182>
 8000d38:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d3c:	42b0      	cmp	r0, r6
 8000d3e:	bf14      	ite	ne
 8000d40:	2607      	movne	r6, #7
 8000d42:	2604      	moveq	r6, #4
 8000d44:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d48:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d4c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000d4e:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 8000d50:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d52:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000d56:	bf0c      	ite	eq
 8000d58:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d5a:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000d5c:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000d5e:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d60:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000d64:	bf0c      	ite	eq
 8000d66:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d68:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000d6a:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000d6c:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d6e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000d72:	bf0c      	ite	eq
 8000d74:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d76:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000d78:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000d7a:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d7c:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000d7e:	bf54      	ite	pl
 8000d80:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000d82:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000d84:	60d6      	str	r6, [r2, #12]
    position++;
 8000d86:	3301      	adds	r3, #1
 8000d88:	e74f      	b.n	8000c2a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	e7da      	b.n	8000d44 <HAL_GPIO_Init+0x130>
 8000d8e:	2601      	movs	r6, #1
 8000d90:	e7d8      	b.n	8000d44 <HAL_GPIO_Init+0x130>
 8000d92:	2602      	movs	r6, #2
 8000d94:	e7d6      	b.n	8000d44 <HAL_GPIO_Init+0x130>
 8000d96:	2603      	movs	r6, #3
 8000d98:	e7d4      	b.n	8000d44 <HAL_GPIO_Init+0x130>
 8000d9a:	bf00      	nop
 8000d9c:	40010400 	.word	0x40010400
 8000da0:	48000400 	.word	0x48000400
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000da8:	6903      	ldr	r3, [r0, #16]
 8000daa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000dac:	bf14      	ite	ne
 8000dae:	2001      	movne	r0, #1
 8000db0:	2000      	moveq	r0, #0
 8000db2:	4770      	bx	lr

08000db4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db4:	b10a      	cbz	r2, 8000dba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db6:	6181      	str	r1, [r0, #24]
 8000db8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dba:	6281      	str	r1, [r0, #40]	; 0x28
 8000dbc:	4770      	bx	lr

08000dbe <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000dc0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000dc4:	6959      	ldr	r1, [r3, #20]
 8000dc6:	4201      	tst	r1, r0
 8000dc8:	d002      	beq.n	8000dd0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dca:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dcc:	f7ff fff7 	bl	8000dbe <HAL_GPIO_EXTI_Callback>
 8000dd0:	bd08      	pop	{r3, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40010400 	.word	0x40010400

08000dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dd8:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dda:	4604      	mov	r4, r0
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d04a      	beq.n	8000e76 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000de0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000de4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000de8:	b91b      	cbnz	r3, 8000df2 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dea:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dee:	f001 fc99 	bl	8002724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000df2:	2324      	movs	r3, #36	; 0x24
 8000df4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000df8:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dfa:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	f022 0201 	bic.w	r2, r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e04:	6862      	ldr	r2, [r4, #4]
 8000e06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e0a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e0c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e0e:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e18:	d124      	bne.n	8000e64 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e1e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e20:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e22:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e24:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000e28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e2c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e34:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e36:	6922      	ldr	r2, [r4, #16]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	69a1      	ldr	r1, [r4, #24]
 8000e3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e40:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e42:	6a21      	ldr	r1, [r4, #32]
 8000e44:	69e2      	ldr	r2, [r4, #28]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	f042 0201 	orr.w	r2, r2, #1
 8000e50:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e52:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000e54:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e56:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e5c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e5e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000e62:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e64:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e68:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e6a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e6c:	bf04      	itt	eq
 8000e6e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000e72:	605a      	streq	r2, [r3, #4]
 8000e74:	e7d4      	b.n	8000e20 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000e76:	2001      	movs	r0, #1
}
 8000e78:	bd10      	pop	{r4, pc}

08000e7a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e7a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	2a20      	cmp	r2, #32
{
 8000e82:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e84:	d11d      	bne.n	8000ec2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e86:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d019      	beq.n	8000ec2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e8e:	2324      	movs	r3, #36	; 0x24
 8000e90:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e94:	6803      	ldr	r3, [r0, #0]
 8000e96:	681c      	ldr	r4, [r3, #0]
 8000e98:	f024 0401 	bic.w	r4, r4, #1
 8000e9c:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000e9e:	681c      	ldr	r4, [r3, #0]
 8000ea0:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000ea4:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ea6:	681c      	ldr	r4, [r3, #0]
 8000ea8:	4321      	orrs	r1, r4
 8000eaa:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000eac:	6819      	ldr	r1, [r3, #0]
 8000eae:	f041 0101 	orr.w	r1, r1, #1
 8000eb2:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000eb4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000eb6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000eba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000ec2:	2002      	movs	r0, #2
  }
}
 8000ec4:	bd10      	pop	{r4, pc}

08000ec6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ec6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ec8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000ecc:	b2e4      	uxtb	r4, r4
 8000ece:	2c20      	cmp	r4, #32
 8000ed0:	d11c      	bne.n	8000f0c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ed2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d018      	beq.n	8000f0c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000eda:	2324      	movs	r3, #36	; 0x24
 8000edc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ee0:	6803      	ldr	r3, [r0, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	f022 0201 	bic.w	r2, r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000eea:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000eec:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000ef0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000ef4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	f042 0201 	orr.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000efe:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000f00:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f04:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000f08:	4618      	mov	r0, r3
 8000f0a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000f0c:	2002      	movs	r0, #2
  }
}
 8000f0e:	bd10      	pop	{r4, pc}

08000f10 <HAL_PWREx_EnterSTOP2Mode>:
{
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_PWREx_EnterSTOP2Mode+0x30>)
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	f023 0307 	bic.w	r3, r3, #7
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8000f20:	691a      	ldr	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8000f22:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f24:	f042 0204 	orr.w	r2, r2, #4
 8000f28:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8000f2a:	d105      	bne.n	8000f38 <HAL_PWREx_EnterSTOP2Mode+0x28>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000f2c:	bf30      	wfi
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	f022 0204 	bic.w	r2, r2, #4
 8000f34:	611a      	str	r2, [r3, #16]
 8000f36:	4770      	bx	lr
    __SEV();
 8000f38:	bf40      	sev
    __WFE();
 8000f3a:	bf20      	wfe
    __WFE();
 8000f3c:	bf20      	wfe
 8000f3e:	e7f6      	b.n	8000f2e <HAL_PWREx_EnterSTOP2Mode+0x1e>
 8000f40:	40007000 	.word	0x40007000
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000f4a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f4c:	68d9      	ldr	r1, [r3, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f4e:	f012 020c 	ands.w	r2, r2, #12
 8000f52:	d005      	beq.n	8000f60 <HAL_RCC_GetSysClockFreq+0x18>
 8000f54:	2a0c      	cmp	r2, #12
 8000f56:	d115      	bne.n	8000f84 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f58:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f5c:	2901      	cmp	r1, #1
 8000f5e:	d118      	bne.n	8000f92 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000f60:	6819      	ldr	r1, [r3, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000f62:	481d      	ldr	r0, [pc, #116]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000f64:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000f66:	bf55      	itete	pl
 8000f68:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000f6c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000f6e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000f72:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000f76:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f7a:	b34a      	cbz	r2, 8000fd0 <HAL_RCC_GetSysClockFreq+0x88>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000f7c:	2a0c      	cmp	r2, #12
 8000f7e:	d009      	beq.n	8000f94 <HAL_RCC_GetSysClockFreq+0x4c>
 8000f80:	2000      	movs	r0, #0
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco / pllr;
  }

  return sysclockfreq;
 8000f82:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000f84:	2a04      	cmp	r2, #4
 8000f86:	d022      	beq.n	8000fce <HAL_RCC_GetSysClockFreq+0x86>
 8000f88:	2a08      	cmp	r2, #8
 8000f8a:	4814      	ldr	r0, [pc, #80]	; (8000fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8000f8c:	bf18      	it	ne
 8000f8e:	2000      	movne	r0, #0
 8000f90:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000f92:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8000f9a:	2a02      	cmp	r2, #2
 8000f9c:	d015      	beq.n	8000fca <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8000f9e:	490f      	ldr	r1, [pc, #60]	; (8000fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8000fa0:	2a03      	cmp	r2, #3
 8000fa2:	bf08      	it	eq
 8000fa4:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000fa6:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000fa8:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000fb0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000fb4:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000fb8:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000fba:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000fbc:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000fbe:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000fc0:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8000fc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc8:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8000fcc:	e7eb      	b.n	8000fa6 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	08002bfc 	.word	0x08002bfc
 8000fdc:	007a1200 	.word	0x007a1200
 8000fe0:	00f42400 	.word	0x00f42400

08000fe4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fe6:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000fee:	5cd3      	ldrb	r3, [r2, r3]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ff2:	6810      	ldr	r0, [r2, #0]
 8000ff4:	f003 031f 	and.w	r3, r3, #31
}
 8000ff8:	40d8      	lsrs	r0, r3
 8000ffa:	4770      	bx	lr
 8000ffc:	40021000 	.word	0x40021000
 8001000:	08002bf1 	.word	0x08002bf1
 8001004:	20000008 	.word	0x20000008

08001008 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_RCC_GetPCLK2Freq+0x18>)
 800100a:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001012:	5cd3      	ldrb	r3, [r2, r3]
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001016:	6810      	ldr	r0, [r2, #0]
 8001018:	f003 031f 	and.w	r3, r3, #31
}
 800101c:	40d8      	lsrs	r0, r3
 800101e:	4770      	bx	lr
 8001020:	40021000 	.word	0x40021000
 8001024:	08002bf1 	.word	0x08002bf1
 8001028:	20000008 	.word	0x20000008

0800102c <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800102c:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800102e:	69c1      	ldr	r1, [r0, #28]
{
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001032:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001034:	6883      	ldr	r3, [r0, #8]
 8001036:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001038:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800103a:	4303      	orrs	r3, r0
 800103c:	6960      	ldr	r0, [r4, #20]
 800103e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001040:	48af      	ldr	r0, [pc, #700]	; (8001300 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001042:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001044:	4028      	ands	r0, r5
 8001046:	4303      	orrs	r3, r0
 8001048:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800104a:	6853      	ldr	r3, [r2, #4]
 800104c:	68e0      	ldr	r0, [r4, #12]
 800104e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001052:	4303      	orrs	r3, r0
 8001054:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001056:	4bab      	ldr	r3, [pc, #684]	; (8001304 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001058:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800105a:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 800105c:	bf1c      	itt	ne
 800105e:	6a23      	ldrne	r3, [r4, #32]
 8001060:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001062:	6893      	ldr	r3, [r2, #8]
 8001064:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001068:	4303      	orrs	r3, r0
 800106a:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800106c:	4ba6      	ldr	r3, [pc, #664]	; (8001308 <UART_SetConfig+0x2dc>)
 800106e:	429a      	cmp	r2, r3
 8001070:	d118      	bne.n	80010a4 <UART_SetConfig+0x78>
 8001072:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001076:	4aa5      	ldr	r2, [pc, #660]	; (800130c <UART_SetConfig+0x2e0>)
 8001078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107c:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001080:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	f040 8123 	bne.w	80012d0 <UART_SetConfig+0x2a4>
  {
    switch (clocksource)
 800108a:	2b08      	cmp	r3, #8
 800108c:	d877      	bhi.n	800117e <UART_SetConfig+0x152>
 800108e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001092:	0100      	.short	0x0100
 8001094:	00e200b3 	.word	0x00e200b3
 8001098:	011c0076 	.word	0x011c0076
 800109c:	00760076 	.word	0x00760076
 80010a0:	00360076 	.word	0x00360076
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010a4:	4b9a      	ldr	r3, [pc, #616]	; (8001310 <UART_SetConfig+0x2e4>)
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d107      	bne.n	80010ba <UART_SetConfig+0x8e>
 80010aa:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80010ae:	4a99      	ldr	r2, [pc, #612]	; (8001314 <UART_SetConfig+0x2e8>)
 80010b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	e7e2      	b.n	8001080 <UART_SetConfig+0x54>
 80010ba:	4b97      	ldr	r3, [pc, #604]	; (8001318 <UART_SetConfig+0x2ec>)
 80010bc:	429a      	cmp	r2, r3
 80010be:	d123      	bne.n	8001108 <UART_SetConfig+0xdc>
 80010c0:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80010c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010cc:	2b10      	cmp	r3, #16
 80010ce:	f000 80f9 	beq.w	80012c4 <UART_SetConfig+0x298>
 80010d2:	d80b      	bhi.n	80010ec <UART_SetConfig+0xc0>
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80d9 	beq.w	800128c <UART_SetConfig+0x260>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010da:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 80010de:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80010e2:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010e6:	f000 80de 	beq.w	80012a6 <UART_SetConfig+0x27a>
 80010ea:	e091      	b.n	8001210 <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010ec:	2b20      	cmp	r3, #32
 80010ee:	f000 80af 	beq.w	8001250 <UART_SetConfig+0x224>
 80010f2:	2b30      	cmp	r3, #48	; 0x30
 80010f4:	d1f1      	bne.n	80010da <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010f6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80010fa:	f040 80a1 	bne.w	8001240 <UART_SetConfig+0x214>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010fe:	6860      	ldr	r0, [r4, #4]
 8001100:	0843      	lsrs	r3, r0, #1
 8001102:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001106:	e0ac      	b.n	8001262 <UART_SetConfig+0x236>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001108:	4b84      	ldr	r3, [pc, #528]	; (800131c <UART_SetConfig+0x2f0>)
 800110a:	429a      	cmp	r2, r3
 800110c:	d11c      	bne.n	8001148 <UART_SetConfig+0x11c>
 800110e:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800111a:	2b40      	cmp	r3, #64	; 0x40
 800111c:	f000 80af 	beq.w	800127e <UART_SetConfig+0x252>
 8001120:	d806      	bhi.n	8001130 <UART_SetConfig+0x104>
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80a0 	beq.w	8001268 <UART_SetConfig+0x23c>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001128:	4b76      	ldr	r3, [pc, #472]	; (8001304 <UART_SetConfig+0x2d8>)
 800112a:	429a      	cmp	r2, r3
 800112c:	d1d5      	bne.n	80010da <UART_SetConfig+0xae>
 800112e:	e026      	b.n	800117e <UART_SetConfig+0x152>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001130:	2b80      	cmp	r3, #128	; 0x80
 8001132:	f000 808a 	beq.w	800124a <UART_SetConfig+0x21e>
 8001136:	2bc0      	cmp	r3, #192	; 0xc0
 8001138:	d1f6      	bne.n	8001128 <UART_SetConfig+0xfc>
  if (UART_INSTANCE_LOWPOWER(huart))
 800113a:	4b72      	ldr	r3, [pc, #456]	; (8001304 <UART_SetConfig+0x2d8>)
 800113c:	429a      	cmp	r2, r3
 800113e:	d1da      	bne.n	80010f6 <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001140:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001144:	2308      	movs	r3, #8
 8001146:	e015      	b.n	8001174 <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001148:	4b6e      	ldr	r3, [pc, #440]	; (8001304 <UART_SetConfig+0x2d8>)
 800114a:	429a      	cmp	r2, r3
 800114c:	d1c5      	bne.n	80010da <UART_SetConfig+0xae>
 800114e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800115a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115e:	f000 808e 	beq.w	800127e <UART_SetConfig+0x252>
 8001162:	d9de      	bls.n	8001122 <UART_SetConfig+0xf6>
 8001164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001168:	d06f      	beq.n	800124a <UART_SetConfig+0x21e>
 800116a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800116e:	e7e3      	b.n	8001138 <UART_SetConfig+0x10c>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001170:	486b      	ldr	r0, [pc, #428]	; (8001320 <UART_SetConfig+0x2f4>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001172:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001174:	6862      	ldr	r2, [r4, #4]
 8001176:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800117a:	4281      	cmp	r1, r0
 800117c:	d905      	bls.n	800118a <UART_SetConfig+0x15e>
        ret = HAL_ERROR;
 800117e:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001180:	2300      	movs	r3, #0
 8001182:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001184:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001186:	4610      	mov	r0, r2
 8001188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800118a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800118e:	d8f6      	bhi.n	800117e <UART_SetConfig+0x152>
        switch (clocksource)
 8001190:	2b08      	cmp	r3, #8
 8001192:	d82e      	bhi.n	80011f2 <UART_SetConfig+0x1c6>
 8001194:	e8df f003 	tbb	[pc, r3]
 8001198:	2d1c2d05 	.word	0x2d1c2d05
 800119c:	2d2d2d24 	.word	0x2d2d2d24
 80011a0:	27          	.byte	0x27
 80011a1:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 80011a2:	f7ff ff1f 	bl	8000fe4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80011a6:	6862      	ldr	r2, [r4, #4]
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	0856      	lsrs	r6, r2, #1
 80011ae:	2700      	movs	r7, #0
 80011b0:	fbe1 6700 	umlal	r6, r7, r1, r0
 80011b4:	2300      	movs	r3, #0
 80011b6:	4630      	mov	r0, r6
 80011b8:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80011ba:	f7ff f80b 	bl	80001d4 <__aeabi_uldivmod>
            break;
 80011be:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80011c0:	4b58      	ldr	r3, [pc, #352]	; (8001324 <UART_SetConfig+0x2f8>)
 80011c2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d8d9      	bhi.n	800117e <UART_SetConfig+0x152>
          huart->Instance->BRR = usartdiv;
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	60d8      	str	r0, [r3, #12]
 80011ce:	e7d7      	b.n	8001180 <UART_SetConfig+0x154>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80011d0:	4855      	ldr	r0, [pc, #340]	; (8001328 <UART_SetConfig+0x2fc>)
 80011d2:	0855      	lsrs	r5, r2, #1
 80011d4:	2300      	movs	r3, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80011da:	f141 0100 	adc.w	r1, r1, #0
 80011de:	e7ec      	b.n	80011ba <UART_SetConfig+0x18e>
            pclk = HAL_RCC_GetSysClockFreq();
 80011e0:	f7ff feb2 	bl	8000f48 <HAL_RCC_GetSysClockFreq>
 80011e4:	e7df      	b.n	80011a6 <UART_SetConfig+0x17a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80011e6:	0850      	lsrs	r0, r2, #1
 80011e8:	2100      	movs	r1, #0
 80011ea:	2300      	movs	r3, #0
 80011ec:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80011f0:	e7f3      	b.n	80011da <UART_SetConfig+0x1ae>
            ret = HAL_ERROR;
 80011f2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80011f4:	2000      	movs	r0, #0
 80011f6:	e7e3      	b.n	80011c0 <UART_SetConfig+0x194>
        pclk = HAL_RCC_GetPCLK2Freq();
 80011f8:	f7ff ff06 	bl	8001008 <HAL_RCC_GetPCLK2Freq>
 80011fc:	e04b      	b.n	8001296 <UART_SetConfig+0x26a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80011fe:	f7ff fef1 	bl	8000fe4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001202:	6862      	ldr	r2, [r4, #4]
 8001204:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001208:	fbb3 f3f2 	udiv	r3, r3, r2
 800120c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800120e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001210:	f1a3 0010 	sub.w	r0, r3, #16
 8001214:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001218:	4288      	cmp	r0, r1
 800121a:	d8b0      	bhi.n	800117e <UART_SetConfig+0x152>
      huart->Instance->BRR = usartdiv;
 800121c:	6821      	ldr	r1, [r4, #0]
 800121e:	60cb      	str	r3, [r1, #12]
 8001220:	e7ae      	b.n	8001180 <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001222:	f7ff fef1 	bl	8001008 <HAL_RCC_GetPCLK2Freq>
 8001226:	e7ec      	b.n	8001202 <UART_SetConfig+0x1d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001228:	6860      	ldr	r0, [r4, #4]
 800122a:	0843      	lsrs	r3, r0, #1
 800122c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001230:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001234:	fbb3 f3f0 	udiv	r3, r3, r0
 8001238:	e7e8      	b.n	800120c <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800123a:	f7ff fe85 	bl	8000f48 <HAL_RCC_GetSysClockFreq>
 800123e:	e7e0      	b.n	8001202 <UART_SetConfig+0x1d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001240:	6860      	ldr	r0, [r4, #4]
 8001242:	0843      	lsrs	r3, r0, #1
 8001244:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001248:	e7f4      	b.n	8001234 <UART_SetConfig+0x208>
  if (UART_INSTANCE_LOWPOWER(huart))
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <UART_SetConfig+0x2d8>)
 800124c:	429a      	cmp	r2, r3
 800124e:	d08f      	beq.n	8001170 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001250:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001254:	d1e8      	bne.n	8001228 <UART_SetConfig+0x1fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001256:	6860      	ldr	r0, [r4, #4]
 8001258:	0843      	lsrs	r3, r0, #1
 800125a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800125e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001262:	fbb3 f3f0 	udiv	r3, r3, r0
 8001266:	e01c      	b.n	80012a2 <UART_SetConfig+0x276>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <UART_SetConfig+0x2d8>)
 800126a:	429a      	cmp	r2, r3
 800126c:	d10e      	bne.n	800128c <UART_SetConfig+0x260>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800126e:	f7ff feb9 	bl	8000fe4 <HAL_RCC_GetPCLK1Freq>
        break;
 8001272:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001274:	2800      	cmp	r0, #0
 8001276:	f47f af7d 	bne.w	8001174 <UART_SetConfig+0x148>
 800127a:	4602      	mov	r2, r0
 800127c:	e780      	b.n	8001180 <UART_SetConfig+0x154>
  if (UART_INSTANCE_LOWPOWER(huart))
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <UART_SetConfig+0x2d8>)
 8001280:	429a      	cmp	r2, r3
 8001282:	d11f      	bne.n	80012c4 <UART_SetConfig+0x298>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001284:	f7ff fe60 	bl	8000f48 <HAL_RCC_GetSysClockFreq>
        break;
 8001288:	2304      	movs	r3, #4
 800128a:	e7f3      	b.n	8001274 <UART_SetConfig+0x248>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800128c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001290:	d1b5      	bne.n	80011fe <UART_SetConfig+0x1d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001292:	f7ff fea7 	bl	8000fe4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001296:	6861      	ldr	r1, [r4, #4]
 8001298:	084a      	lsrs	r2, r1, #1
 800129a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80012a4:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80012a6:	f1a3 0010 	sub.w	r0, r3, #16
 80012aa:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80012ae:	4288      	cmp	r0, r1
 80012b0:	f63f af65 	bhi.w	800117e <UART_SetConfig+0x152>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80012b4:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80012b8:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80012ba:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80012be:	430b      	orrs	r3, r1
 80012c0:	60c3      	str	r3, [r0, #12]
 80012c2:	e75d      	b.n	8001180 <UART_SetConfig+0x154>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012c4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80012c8:	d1b7      	bne.n	800123a <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetSysClockFreq();
 80012ca:	f7ff fe3d 	bl	8000f48 <HAL_RCC_GetSysClockFreq>
 80012ce:	e7e2      	b.n	8001296 <UART_SetConfig+0x26a>
    switch (clocksource)
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	f63f af54 	bhi.w	800117e <UART_SetConfig+0x152>
 80012d6:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <UART_SetConfig+0x2b0>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	080011ff 	.word	0x080011ff
 80012e0:	08001223 	.word	0x08001223
 80012e4:	08001229 	.word	0x08001229
 80012e8:	0800117f 	.word	0x0800117f
 80012ec:	0800123b 	.word	0x0800123b
 80012f0:	0800117f 	.word	0x0800117f
 80012f4:	0800117f 	.word	0x0800117f
 80012f8:	0800117f 	.word	0x0800117f
 80012fc:	08001241 	.word	0x08001241
 8001300:	efff69f3 	.word	0xefff69f3
 8001304:	40008000 	.word	0x40008000
 8001308:	40013800 	.word	0x40013800
 800130c:	08002be0 	.word	0x08002be0
 8001310:	40004400 	.word	0x40004400
 8001314:	08002be4 	.word	0x08002be4
 8001318:	40004800 	.word	0x40004800
 800131c:	40004c00 	.word	0x40004c00
 8001320:	00f42400 	.word	0x00f42400
 8001324:	000ffcff 	.word	0x000ffcff
 8001328:	f4240000 	.word	0xf4240000

0800132c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800132c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800132e:	07da      	lsls	r2, r3, #31
{
 8001330:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001332:	d506      	bpl.n	8001342 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001334:	6801      	ldr	r1, [r0, #0]
 8001336:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001338:	684a      	ldr	r2, [r1, #4]
 800133a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800133e:	4322      	orrs	r2, r4
 8001340:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001342:	079c      	lsls	r4, r3, #30
 8001344:	d506      	bpl.n	8001354 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001346:	6801      	ldr	r1, [r0, #0]
 8001348:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800134a:	684a      	ldr	r2, [r1, #4]
 800134c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001350:	4322      	orrs	r2, r4
 8001352:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001354:	0759      	lsls	r1, r3, #29
 8001356:	d506      	bpl.n	8001366 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001358:	6801      	ldr	r1, [r0, #0]
 800135a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800135c:	684a      	ldr	r2, [r1, #4]
 800135e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001362:	4322      	orrs	r2, r4
 8001364:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001366:	071a      	lsls	r2, r3, #28
 8001368:	d506      	bpl.n	8001378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800136a:	6801      	ldr	r1, [r0, #0]
 800136c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800136e:	684a      	ldr	r2, [r1, #4]
 8001370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001374:	4322      	orrs	r2, r4
 8001376:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001378:	06dc      	lsls	r4, r3, #27
 800137a:	d506      	bpl.n	800138a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800137c:	6801      	ldr	r1, [r0, #0]
 800137e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001380:	688a      	ldr	r2, [r1, #8]
 8001382:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001386:	4322      	orrs	r2, r4
 8001388:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800138a:	0699      	lsls	r1, r3, #26
 800138c:	d506      	bpl.n	800139c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800138e:	6801      	ldr	r1, [r0, #0]
 8001390:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001392:	688a      	ldr	r2, [r1, #8]
 8001394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001398:	4322      	orrs	r2, r4
 800139a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800139c:	065a      	lsls	r2, r3, #25
 800139e:	d50f      	bpl.n	80013c0 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80013a0:	6801      	ldr	r1, [r0, #0]
 80013a2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80013a4:	684a      	ldr	r2, [r1, #4]
 80013a6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80013aa:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80013ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80013b0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80013b2:	d105      	bne.n	80013c0 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80013b4:	684a      	ldr	r2, [r1, #4]
 80013b6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80013b8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80013bc:	4322      	orrs	r2, r4
 80013be:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80013c0:	061b      	lsls	r3, r3, #24
 80013c2:	d506      	bpl.n	80013d2 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80013c4:	6802      	ldr	r2, [r0, #0]
 80013c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80013c8:	6853      	ldr	r3, [r2, #4]
 80013ca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80013ce:	430b      	orrs	r3, r1
 80013d0:	6053      	str	r3, [r2, #4]
 80013d2:	bd10      	pop	{r4, pc}

080013d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80013d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d8:	9d06      	ldr	r5, [sp, #24]
 80013da:	4604      	mov	r4, r0
 80013dc:	460f      	mov	r7, r1
 80013de:	4616      	mov	r6, r2
 80013e0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013e2:	6821      	ldr	r1, [r4, #0]
 80013e4:	69ca      	ldr	r2, [r1, #28]
 80013e6:	ea37 0302 	bics.w	r3, r7, r2
 80013ea:	bf0c      	ite	eq
 80013ec:	2201      	moveq	r2, #1
 80013ee:	2200      	movne	r2, #0
 80013f0:	42b2      	cmp	r2, r6
 80013f2:	d002      	beq.n	80013fa <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80013f4:	2000      	movs	r0, #0
}
 80013f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80013fa:	1c68      	adds	r0, r5, #1
 80013fc:	d0f2      	beq.n	80013e4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013fe:	f7ff f8b3 	bl	8000568 <HAL_GetTick>
 8001402:	eba0 0008 	sub.w	r0, r0, r8
 8001406:	4285      	cmp	r5, r0
 8001408:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800140a:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800140c:	d300      	bcc.n	8001410 <UART_WaitOnFlagUntilTimeout+0x3c>
 800140e:	b97d      	cbnz	r5, 8001430 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001414:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001416:	6883      	ldr	r3, [r0, #8]
 8001418:	f023 0301 	bic.w	r3, r3, #1
 800141c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800141e:	2320      	movs	r3, #32
 8001420:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001422:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001424:	2300      	movs	r3, #0
 8001426:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 800142a:	2003      	movs	r0, #3
 800142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001430:	075a      	lsls	r2, r3, #29
 8001432:	d5d6      	bpl.n	80013e2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001434:	69c3      	ldr	r3, [r0, #28]
 8001436:	051b      	lsls	r3, r3, #20
 8001438:	d5d3      	bpl.n	80013e2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800143a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800143e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001440:	6803      	ldr	r3, [r0, #0]
 8001442:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001446:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001448:	6883      	ldr	r3, [r0, #8]
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001450:	2320      	movs	r3, #32
 8001452:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001454:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001456:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001458:	e7e4      	b.n	8001424 <UART_WaitOnFlagUntilTimeout+0x50>

0800145a <UART_CheckIdleState>:
{
 800145a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800145c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800145e:	2600      	movs	r6, #0
 8001460:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001462:	f7ff f881 	bl	8000568 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800146c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800146e:	d415      	bmi.n	800149c <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	075b      	lsls	r3, r3, #29
 8001476:	d50a      	bpl.n	800148e <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	462b      	mov	r3, r5
 8001482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001486:	4620      	mov	r0, r4
 8001488:	f7ff ffa4 	bl	80013d4 <UART_WaitOnFlagUntilTimeout>
 800148c:	b990      	cbnz	r0, 80014b4 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 800148e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001490:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001492:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001494:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001498:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 800149a:	e00c      	b.n	80014b6 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800149c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4632      	mov	r2, r6
 80014a4:	4603      	mov	r3, r0
 80014a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff ff92 	bl	80013d4 <UART_WaitOnFlagUntilTimeout>
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d0dd      	beq.n	8001470 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80014b4:	2003      	movs	r0, #3
}
 80014b6:	b002      	add	sp, #8
 80014b8:	bd70      	pop	{r4, r5, r6, pc}

080014ba <HAL_UART_Init>:
{
 80014ba:	b510      	push	{r4, lr}
  if (huart == NULL)
 80014bc:	4604      	mov	r4, r0
 80014be:	b340      	cbz	r0, 8001512 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80014c0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80014c2:	b91b      	cbnz	r3, 80014cc <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80014c4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80014c8:	f001 faf6 	bl	8002ab8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80014cc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80014ce:	2324      	movs	r3, #36	; 0x24
 80014d0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80014da:	4620      	mov	r0, r4
 80014dc:	f7ff fda6 	bl	800102c <UART_SetConfig>
 80014e0:	2801      	cmp	r0, #1
 80014e2:	d016      	beq.n	8001512 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80014e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014e6:	b113      	cbz	r3, 80014ee <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80014e8:	4620      	mov	r0, r4
 80014ea:	f7ff ff1f 	bl	800132c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014fe:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001506:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001508:	601a      	str	r2, [r3, #0]
}
 800150a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800150e:	f7ff bfa4 	b.w	800145a <UART_CheckIdleState>
}
 8001512:	2001      	movs	r0, #1
 8001514:	bd10      	pop	{r4, pc}

08001516 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001516:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800151a:	680a      	ldr	r2, [r1, #0]
 800151c:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001520:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001524:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001528:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800152a:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800152c:	fa32 f304 	lsrs.w	r3, r2, r4
 8001530:	d10d      	bne.n	800154e <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001532:	684b      	ldr	r3, [r1, #4]
 8001534:	3b01      	subs	r3, #1
 8001536:	2b01      	cmp	r3, #1
 8001538:	d806      	bhi.n	8001548 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800153a:	6843      	ldr	r3, [r0, #4]
 800153c:	68c9      	ldr	r1, [r1, #12]
 800153e:	ea23 0302 	bic.w	r3, r3, r2
 8001542:	434a      	muls	r2, r1
 8001544:	431a      	orrs	r2, r3
 8001546:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8001548:	2000      	movs	r0, #0
 800154a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800154e:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin != 0x00u)
 8001552:	4013      	ands	r3, r2
 8001554:	d065      	beq.n	8001622 <LL_GPIO_Init+0x10c>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001556:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800155a:	f8d0 9000 	ldr.w	r9, [r0]
 800155e:	fa93 fca3 	rbit	ip, r3
 8001562:	fabc fc8c 	clz	ip, ip
 8001566:	fa93 f6a3 	rbit	r6, r3
 800156a:	fab6 f686 	clz	r6, r6
 800156e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001572:	fa05 fc0c 	lsl.w	ip, r5, ip
 8001576:	0076      	lsls	r6, r6, #1
 8001578:	ea29 0c0c 	bic.w	ip, r9, ip
 800157c:	fa08 f606 	lsl.w	r6, r8, r6
 8001580:	ea4c 0606 	orr.w	r6, ip, r6
 8001584:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001586:	f108 36ff 	add.w	r6, r8, #4294967295
 800158a:	2e01      	cmp	r6, #1
 800158c:	d816      	bhi.n	80015bc <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800158e:	6886      	ldr	r6, [r0, #8]
 8001590:	fa93 fca3 	rbit	ip, r3
 8001594:	fabc fc8c 	clz	ip, ip
 8001598:	fa93 f9a3 	rbit	r9, r3
 800159c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80015a0:	fa05 fc0c 	lsl.w	ip, r5, ip
 80015a4:	ea26 0c0c 	bic.w	ip, r6, ip
 80015a8:	fab9 f989 	clz	r9, r9
 80015ac:	688e      	ldr	r6, [r1, #8]
 80015ae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80015b2:	fa06 f609 	lsl.w	r6, r6, r9
 80015b6:	ea4c 0606 	orr.w	r6, ip, r6
 80015ba:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80015bc:	68c6      	ldr	r6, [r0, #12]
 80015be:	fa93 fca3 	rbit	ip, r3
 80015c2:	fabc fc8c 	clz	ip, ip
 80015c6:	fa93 f9a3 	rbit	r9, r3
 80015ca:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80015ce:	fa05 fc0c 	lsl.w	ip, r5, ip
 80015d2:	ea26 0c0c 	bic.w	ip, r6, ip
 80015d6:	fab9 f989 	clz	r9, r9
 80015da:	690e      	ldr	r6, [r1, #16]
 80015dc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80015e0:	fa06 f609 	lsl.w	r6, r6, r9
 80015e4:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80015e8:	f1b8 0f02 	cmp.w	r8, #2
 80015ec:	60c6      	str	r6, [r0, #12]
 80015ee:	d118      	bne.n	8001622 <LL_GPIO_Init+0x10c>
        if (currentpin < LL_GPIO_PIN_8)
 80015f0:	2bff      	cmp	r3, #255	; 0xff
 80015f2:	f8d1 c014 	ldr.w	ip, [r1, #20]
 80015f6:	d816      	bhi.n	8001626 <LL_GPIO_Init+0x110>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80015f8:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80015fc:	fa93 f6a3 	rbit	r6, r3
 8001600:	fab6 f686 	clz	r6, r6
 8001604:	fa93 f3a3 	rbit	r3, r3
 8001608:	fab3 f383 	clz	r3, r3
 800160c:	00b6      	lsls	r6, r6, #2
 800160e:	fa07 f606 	lsl.w	r6, r7, r6
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	ea28 0606 	bic.w	r6, r8, r6
 8001618:	fa0c fc03 	lsl.w	ip, ip, r3
 800161c:	ea46 060c 	orr.w	r6, r6, ip
 8001620:	6206      	str	r6, [r0, #32]
    pinpos++;
 8001622:	3401      	adds	r4, #1
 8001624:	e782      	b.n	800152c <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001626:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	fa93 f6a3 	rbit	r6, r3
 8001630:	fab6 f686 	clz	r6, r6
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	00b6      	lsls	r6, r6, #2
 800163e:	fa07 f606 	lsl.w	r6, r7, r6
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	ea28 0606 	bic.w	r6, r8, r6
 8001648:	fa0c f303 	lsl.w	r3, ip, r3
 800164c:	4333      	orrs	r3, r6
 800164e:	6243      	str	r3, [r0, #36]	; 0x24
 8001650:	e7e7      	b.n	8001622 <LL_GPIO_Init+0x10c>
	...

08001654 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001654:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <LL_TIM_Init+0x78>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001656:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001658:	4290      	cmp	r0, r2
{
 800165a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800165c:	d005      	beq.n	800166a <LL_TIM_Init+0x16>
 800165e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001662:	d002      	beq.n	800166a <LL_TIM_Init+0x16>
 8001664:	4c1a      	ldr	r4, [pc, #104]	; (80016d0 <LL_TIM_Init+0x7c>)
 8001666:	42a0      	cmp	r0, r4
 8001668:	d10c      	bne.n	8001684 <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800166a:	684c      	ldr	r4, [r1, #4]
 800166c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001670:	4290      	cmp	r0, r2
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001672:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001676:	d00c      	beq.n	8001692 <LL_TIM_Init+0x3e>
 8001678:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800167c:	d009      	beq.n	8001692 <LL_TIM_Init+0x3e>
 800167e:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <LL_TIM_Init+0x7c>)
 8001680:	4290      	cmp	r0, r2
 8001682:	d006      	beq.n	8001692 <LL_TIM_Init+0x3e>
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <LL_TIM_Init+0x80>)
 8001686:	4290      	cmp	r0, r2
 8001688:	d003      	beq.n	8001692 <LL_TIM_Init+0x3e>
 800168a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800168e:	4290      	cmp	r0, r2
 8001690:	d103      	bne.n	800169a <LL_TIM_Init+0x46>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001692:	68ca      	ldr	r2, [r1, #12]
 8001694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001698:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800169a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800169c:	688b      	ldr	r3, [r1, #8]
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 800169e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80016a0:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80016a2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <LL_TIM_Init+0x78>)
 80016a6:	4298      	cmp	r0, r3
 80016a8:	d007      	beq.n	80016ba <LL_TIM_Init+0x66>
 80016aa:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80016ae:	4298      	cmp	r0, r3
 80016b0:	d003      	beq.n	80016ba <LL_TIM_Init+0x66>
 80016b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b6:	4298      	cmp	r0, r3
 80016b8:	d101      	bne.n	80016be <LL_TIM_Init+0x6a>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80016ba:	7c0b      	ldrb	r3, [r1, #16]
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80016bc:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80016be:	6943      	ldr	r3, [r0, #20]
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80016c6:	2000      	movs	r0, #0
 80016c8:	bd10      	pop	{r4, pc}
 80016ca:	bf00      	nop
 80016cc:	40012c00 	.word	0x40012c00
 80016d0:	40000400 	.word	0x40000400
 80016d4:	40014000 	.word	0x40014000

080016d8 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 80016d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 80016dc:	b530      	push	{r4, r5, lr}
  switch (Channel)
 80016de:	f000 80b5 	beq.w	800184c <LL_TIM_OC_Init+0x174>
 80016e2:	d805      	bhi.n	80016f0 <LL_TIM_OC_Init+0x18>
 80016e4:	2901      	cmp	r1, #1
 80016e6:	d03b      	beq.n	8001760 <LL_TIM_OC_Init+0x88>
 80016e8:	2910      	cmp	r1, #16
 80016ea:	d073      	beq.n	80017d4 <LL_TIM_OC_Init+0xfc>
  ErrorStatus result = ERROR;
 80016ec:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 80016ee:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 80016f0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80016f4:	f000 80e5 	beq.w	80018c2 <LL_TIM_OC_Init+0x1ea>
 80016f8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80016fc:	f000 810e 	beq.w	800191c <LL_TIM_OC_Init+0x244>
 8001700:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001704:	d1f2      	bne.n	80016ec <LL_TIM_OC_Init+0x14>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001706:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001708:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800170a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800170e:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001710:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001712:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001714:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001716:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800171a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800171e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001722:	6915      	ldr	r5, [r2, #16]
 8001724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001728:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800172c:	6855      	ldr	r5, [r2, #4]
 800172e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001732:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001736:	4d90      	ldr	r5, [pc, #576]	; (8001978 <LL_TIM_OC_Init+0x2a0>)
 8001738:	42a8      	cmp	r0, r5
 800173a:	d007      	beq.n	800174c <LL_TIM_OC_Init+0x74>
 800173c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001740:	42a8      	cmp	r0, r5
 8001742:	d003      	beq.n	800174c <LL_TIM_OC_Init+0x74>
 8001744:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001748:	42a8      	cmp	r0, r5
 800174a:	d104      	bne.n	8001756 <LL_TIM_OC_Init+0x7e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800174c:	6995      	ldr	r5, [r2, #24]
 800174e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8001752:	ea44 1485 	orr.w	r4, r4, r5, lsl #6

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001756:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001758:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800175a:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800175c:	6402      	str	r2, [r0, #64]	; 0x40
 800175e:	e036      	b.n	80017ce <LL_TIM_OC_Init+0xf6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001760:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001762:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800176a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800176c:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800176e:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001770:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001774:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8001778:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800177a:	6915      	ldr	r5, [r2, #16]
 800177c:	f023 0302 	bic.w	r3, r3, #2
 8001780:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001782:	6855      	ldr	r5, [r2, #4]
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800178a:	4d7b      	ldr	r5, [pc, #492]	; (8001978 <LL_TIM_OC_Init+0x2a0>)
 800178c:	42a8      	cmp	r0, r5
 800178e:	d007      	beq.n	80017a0 <LL_TIM_OC_Init+0xc8>
 8001790:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001794:	42a8      	cmp	r0, r5
 8001796:	d003      	beq.n	80017a0 <LL_TIM_OC_Init+0xc8>
 8001798:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800179c:	42a8      	cmp	r0, r5
 800179e:	d112      	bne.n	80017c6 <LL_TIM_OC_Init+0xee>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80017a0:	6955      	ldr	r5, [r2, #20]
 80017a2:	f023 0308 	bic.w	r3, r3, #8
 80017a6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80017aa:	6895      	ldr	r5, [r2, #8]
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80017b4:	6995      	ldr	r5, [r2, #24]
 80017b6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80017ba:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80017bc:	69d5      	ldr	r5, [r2, #28]
 80017be:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80017c2:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80017c6:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80017c8:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80017ca:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80017cc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80017ce:	6203      	str	r3, [r0, #32]
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80017d0:	2000      	movs	r0, #0
      break;
 80017d2:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80017d4:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80017d6:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80017d8:	f023 0310 	bic.w	r3, r3, #16
 80017dc:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80017de:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80017e0:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80017e2:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80017e4:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80017e8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80017ec:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80017f0:	6915      	ldr	r5, [r2, #16]
 80017f2:	f023 0320 	bic.w	r3, r3, #32
 80017f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80017fa:	6855      	ldr	r5, [r2, #4]
 80017fc:	f023 0310 	bic.w	r3, r3, #16
 8001800:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001804:	4d5c      	ldr	r5, [pc, #368]	; (8001978 <LL_TIM_OC_Init+0x2a0>)
 8001806:	42a8      	cmp	r0, r5
 8001808:	d007      	beq.n	800181a <LL_TIM_OC_Init+0x142>
 800180a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800180e:	42a8      	cmp	r0, r5
 8001810:	d003      	beq.n	800181a <LL_TIM_OC_Init+0x142>
 8001812:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001816:	42a8      	cmp	r0, r5
 8001818:	d113      	bne.n	8001842 <LL_TIM_OC_Init+0x16a>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800181a:	6955      	ldr	r5, [r2, #20]
 800181c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001820:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001824:	6895      	ldr	r5, [r2, #8]
 8001826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800182a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800182e:	6995      	ldr	r5, [r2, #24]
 8001830:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001834:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001838:	69d5      	ldr	r5, [r2, #28]
 800183a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800183e:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001842:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001844:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001846:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001848:	6382      	str	r2, [r0, #56]	; 0x38
 800184a:	e7c0      	b.n	80017ce <LL_TIM_OC_Init+0xf6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800184c:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800184e:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001854:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001856:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001858:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800185a:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800185c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001860:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8001864:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001866:	6915      	ldr	r5, [r2, #16]
 8001868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800186c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001870:	6855      	ldr	r5, [r2, #4]
 8001872:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001876:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800187a:	4d3f      	ldr	r5, [pc, #252]	; (8001978 <LL_TIM_OC_Init+0x2a0>)
 800187c:	42a8      	cmp	r0, r5
 800187e:	d007      	beq.n	8001890 <LL_TIM_OC_Init+0x1b8>
 8001880:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001884:	42a8      	cmp	r0, r5
 8001886:	d003      	beq.n	8001890 <LL_TIM_OC_Init+0x1b8>
 8001888:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800188c:	42a8      	cmp	r0, r5
 800188e:	d113      	bne.n	80018b8 <LL_TIM_OC_Init+0x1e0>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001890:	6955      	ldr	r5, [r2, #20]
 8001892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001896:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800189a:	6895      	ldr	r5, [r2, #8]
 800189c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018a0:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80018a4:	6995      	ldr	r5, [r2, #24]
 80018a6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80018aa:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80018ae:	69d5      	ldr	r5, [r2, #28]
 80018b0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80018b4:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80018b8:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80018ba:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80018bc:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80018be:	63c2      	str	r2, [r0, #60]	; 0x3c
 80018c0:	e785      	b.n	80017ce <LL_TIM_OC_Init+0xf6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80018c2:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80018c4:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80018cc:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80018ce:	6d41      	ldr	r1, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80018d0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80018d4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80018d8:	430c      	orrs	r4, r1
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80018da:	6911      	ldr	r1, [r2, #16]
 80018dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80018e4:	6851      	ldr	r1, [r2, #4]
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018ee:	4922      	ldr	r1, [pc, #136]	; (8001978 <LL_TIM_OC_Init+0x2a0>)
 80018f0:	4288      	cmp	r0, r1
 80018f2:	d007      	beq.n	8001904 <LL_TIM_OC_Init+0x22c>
 80018f4:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 80018f8:	4288      	cmp	r0, r1
 80018fa:	d003      	beq.n	8001904 <LL_TIM_OC_Init+0x22c>
 80018fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001900:	4288      	cmp	r0, r1
 8001902:	d106      	bne.n	8001912 <LL_TIM_OC_Init+0x23a>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001904:	6841      	ldr	r1, [r0, #4]
 8001906:	6995      	ldr	r5, [r2, #24]
 8001908:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800190c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8001910:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001912:	6544      	str	r4, [r0, #84]	; 0x54
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001914:	68d2      	ldr	r2, [r2, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001916:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8001918:	6582      	str	r2, [r0, #88]	; 0x58
 800191a:	e758      	b.n	80017ce <LL_TIM_OC_Init+0xf6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800191c:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800191e:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001920:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001924:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001926:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001928:	6d41      	ldr	r1, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800192a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800192e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001932:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001936:	6911      	ldr	r1, [r2, #16]
 8001938:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800193c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001940:	6851      	ldr	r1, [r2, #4]
 8001942:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001946:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800194a:	490b      	ldr	r1, [pc, #44]	; (8001978 <LL_TIM_OC_Init+0x2a0>)
 800194c:	4288      	cmp	r0, r1
 800194e:	d007      	beq.n	8001960 <LL_TIM_OC_Init+0x288>
 8001950:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8001954:	4288      	cmp	r0, r1
 8001956:	d003      	beq.n	8001960 <LL_TIM_OC_Init+0x288>
 8001958:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800195c:	4288      	cmp	r0, r1
 800195e:	d106      	bne.n	800196e <LL_TIM_OC_Init+0x296>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001960:	6841      	ldr	r1, [r0, #4]
 8001962:	6995      	ldr	r5, [r2, #24]
 8001964:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001968:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800196c:	6041      	str	r1, [r0, #4]
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800196e:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001970:	6544      	str	r4, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001972:	65c2      	str	r2, [r0, #92]	; 0x5c
 8001974:	e72b      	b.n	80017ce <LL_TIM_OC_Init+0xf6>
 8001976:	bf00      	nop
 8001978:	40012c00 	.word	0x40012c00

0800197c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800197c:	4b01      	ldr	r3, [pc, #4]	; (8001984 <LL_SetSystemCoreClock+0x8>)
 800197e:	6018      	str	r0, [r3, #0]
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008

08001988 <led_fill_led_pwm_data.part.0>:
 * \note            Memory is in format R,G,B, while PWM must be configured in G,R,B[,W]
 * \param[in]       ledx: LED index to set the color
 * \param[out]      ptr: Output array with at least LED_CFG_RAW_BYTES_PER_LED-words of memory
 */
static uint8_t
led_fill_led_pwm_data(size_t ledx, uint32_t* ptr) {
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i;

    if (ledx < LED_CFG_LEDS_CNT) {
        for (i = 0; i < 8; i++) {
            ptr[i] =        (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 1] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <led_fill_led_pwm_data.part.0+0x64>)
 800198c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001990:	1813      	adds	r3, r2, r0
            ptr[8 + i] =    (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 0] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 8001992:	5c16      	ldrb	r6, [r2, r0]
            ptr[i] =        (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 1] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 8001994:	785d      	ldrb	r5, [r3, #1]
            ptr[16 + i] =   (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 2] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 8001996:	789f      	ldrb	r7, [r3, #2]
 8001998:	3904      	subs	r1, #4
 800199a:	2207      	movs	r2, #7
 800199c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019a0:	2403      	movs	r4, #3
            ptr[i] =        (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 1] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 80019a2:	fa45 f302 	asr.w	r3, r5, r2
 80019a6:	f013 0f01 	tst.w	r3, #1
 80019aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019ac:	bf18      	it	ne
 80019ae:	005b      	lslne	r3, r3, #1
 80019b0:	fbb3 f3f4 	udiv	r3, r3, r4
 80019b4:	f841 3f04 	str.w	r3, [r1, #4]!
            ptr[8 + i] =    (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 0] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 80019b8:	fa46 f302 	asr.w	r3, r6, r2
 80019bc:	f013 0f01 	tst.w	r3, #1
 80019c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019c2:	bf18      	it	ne
 80019c4:	005b      	lslne	r3, r3, #1
 80019c6:	fbb3 f3f4 	udiv	r3, r3, r4
 80019ca:	620b      	str	r3, [r1, #32]
            ptr[16 + i] =   (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 2] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 80019cc:	fa47 f302 	asr.w	r3, r7, r2
 80019d0:	f013 0f01 	tst.w	r3, #1
 80019d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019d6:	bf18      	it	ne
 80019d8:	005b      	lslne	r3, r3, #1
        for (i = 0; i < 8; i++) {
 80019da:	f112 32ff 	adds.w	r2, r2, #4294967295
            ptr[16 + i] =   (leds_colors[LED_CFG_BYTES_PER_LED * ledx + 2] & (1 << (7 - i))) ? (2 * TIM2->ARR / 3) : (TIM2->ARR / 3);
 80019de:	fbb3 f3f4 	udiv	r3, r3, r4
 80019e2:	640b      	str	r3, [r1, #64]	; 0x40
        for (i = 0; i < 8; i++) {
 80019e4:	d2dd      	bcs.n	80019a2 <led_fill_led_pwm_data.part.0+0x1a>
        }
        return 1;
    }
    return 0;
}
 80019e6:	2001      	movs	r0, #1
 80019e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000002e 	.word	0x2000002e

080019f0 <NVIC_EncodePriority.constprop.23>:
}
 80019f0:	2000      	movs	r0, #0
 80019f2:	4770      	bx	lr

080019f4 <led_start_reset_pulse>:
/**
 * \brief           Start reset pulse sequence
 * \param[in]       num: Number indicating pulse is for beginning (1) or end (2) of PWM data stream
 */
static uint8_t led_start_reset_pulse(uint8_t num)
{
 80019f4:	b538      	push	{r3, r4, r5, lr}
    is_reset_pulse = num;                       /* Set reset pulse flag */
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <led_start_reset_pulse+0x7c>)

    memset(tmp_led_data, 0, sizeof(tmp_led_data));   /* Set all bytes to 0 to achieve 50us pulse */
 80019f8:	4c1e      	ldr	r4, [pc, #120]	; (8001a74 <led_start_reset_pulse+0x80>)
    is_reset_pulse = num;                       /* Set reset pulse flag */
 80019fa:	7018      	strb	r0, [r3, #0]
{
 80019fc:	4605      	mov	r5, r0
    memset(tmp_led_data, 0, sizeof(tmp_led_data));   /* Set all bytes to 0 to achieve 50us pulse */
 80019fe:	22c0      	movs	r2, #192	; 0xc0
 8001a00:	2100      	movs	r1, #0
 8001a02:	4620      	mov	r0, r4
 8001a04:	f001 f8d8 	bl	8002bb8 <memset>

    if (num == 1) {
 8001a08:	2d01      	cmp	r5, #1
        tmp_led_data[0] = TIM2->ARR / 2;
 8001a0a:	bf08      	it	eq
 8001a0c:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8001a10:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001a14:	bf02      	ittt	eq
 8001a16:	6adb      	ldreq	r3, [r3, #44]	; 0x2c
 8001a18:	085b      	lsreq	r3, r3, #1
 8001a1a:	6023      	streq	r3, [r4, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <led_start_reset_pulse+0x84>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	f022 0220 	bic.w	r2, r2, #32
 8001a24:	601a      	str	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8001a26:	60dc      	str	r4, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	0c12      	lsrs	r2, r2, #16
 8001a2c:	0412      	lsls	r2, r2, #16
 8001a2e:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8001a32:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <led_start_reset_pulse+0x88>)
 8001a36:	6051      	str	r1, [r2, #4]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 8001a38:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001a3c:	6051      	str	r1, [r2, #4]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	f022 0204 	bic.w	r2, r2, #4
 8001a44:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	f042 0202 	orr.w	r2, r2, #2
 8001a4c:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	f042 0201 	orr.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

    LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);  /* Enable channel for timer */
    LL_TIM_EnableCounter(TIM2);                 /* Start timer counter */

    return 1;
}
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	6a1a      	ldr	r2, [r3, #32]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	bd38      	pop	{r3, r4, r5, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000002c 	.word	0x2000002c
 8001a74:	20000094 	.word	0x20000094
 8001a78:	40020058 	.word	0x40020058
 8001a7c:	40020000 	.word	0x40020000

08001a80 <led_update_sequence>:
led_update_sequence(uint8_t tc) {
 8001a80:	b570      	push	{r4, r5, r6, lr}
    if (is_reset_pulse == 2) {                  /* Check for reset pulse at the end */
 8001a82:	4a3f      	ldr	r2, [pc, #252]	; (8001b80 <led_update_sequence+0x100>)
 8001a84:	7813      	ldrb	r3, [r2, #0]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d110      	bne.n	8001aac <led_update_sequence+0x2c>
  CLEAR_BIT(TIMx->CCER, Channels);
 8001a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8e:	6a13      	ldr	r3, [r2, #32]
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6213      	str	r3, [r2, #32]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001a96:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8001a9a:	3258      	adds	r2, #88	; 0x58
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	6013      	str	r3, [r2, #0]
        is_updating = 0;                        /* We are not updating anymore */
 8001aa4:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <led_update_sequence+0x104>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
        return;
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
    if (is_reset_pulse == 1) {                  /* Check if we finished with reset pulse */
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d148      	bne.n	8001b42 <led_update_sequence+0xc2>
        if (!tc) {                              /* We must wait for transfer complete */
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	d063      	beq.n	8001b7c <led_update_sequence+0xfc>
 8001ab4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ab8:	6a0b      	ldr	r3, [r1, #32]
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	620b      	str	r3, [r1, #32]
 8001ac0:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 8001ac4:	3158      	adds	r1, #88	; 0x58
 8001ac6:	680b      	ldr	r3, [r1, #0]
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	600b      	str	r3, [r1, #0]
        is_reset_pulse = 0;                     /* Not in reset pulse anymore */
 8001ace:	2300      	movs	r3, #0
 8001ad0:	7013      	strb	r3, [r2, #0]
        current_led = 0;                        /* Reset current led */
 8001ad2:	4a2d      	ldr	r2, [pc, #180]	; (8001b88 <led_update_sequence+0x108>)
    if (current_led < LED_CFG_LEDS_CNT) {
 8001ad4:	4d2c      	ldr	r5, [pc, #176]	; (8001b88 <led_update_sequence+0x108>)
        current_led++;                          /* Go to next LED */
 8001ad6:	6013      	str	r3, [r2, #0]
    if (current_led < LED_CFG_LEDS_CNT) {
 8001ad8:	682c      	ldr	r4, [r5, #0]
 8001ada:	2c20      	cmp	r4, #32
 8001adc:	d83b      	bhi.n	8001b56 <led_update_sequence+0xd6>
        if (current_led == 0 || !tc) {
 8001ade:	b10c      	cbz	r4, 8001ae4 <led_update_sequence+0x64>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d132      	bne.n	8001b4a <led_update_sequence+0xca>
 8001ae4:	4e29      	ldr	r6, [pc, #164]	; (8001b8c <led_update_sequence+0x10c>)
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	4631      	mov	r1, r6
 8001aea:	f7ff ff4d 	bl	8001988 <led_fill_led_pwm_data.part.0>
        if (current_led == 0) {
 8001aee:	2c00      	cmp	r4, #0
 8001af0:	d144      	bne.n	8001b7c <led_update_sequence+0xfc>
            current_led++;                      /* Go to next LED */
 8001af2:	2001      	movs	r0, #1
 8001af4:	f106 0160 	add.w	r1, r6, #96	; 0x60
 8001af8:	6028      	str	r0, [r5, #0]
 8001afa:	f7ff ff45 	bl	8001988 <led_fill_led_pwm_data.part.0>
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001afe:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <led_update_sequence+0x110>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	f042 0220 	orr.w	r2, r2, #32
 8001b06:	601a      	str	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8001b08:	60de      	str	r6, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	0c12      	lsrs	r2, r2, #16
 8001b0e:	0412      	lsls	r2, r2, #16
 8001b10:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001b14:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8001b16:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <led_update_sequence+0x114>)
 8001b18:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001b1c:	6051      	str	r1, [r2, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 8001b1e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001b22:	6051      	str	r1, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	f042 0204 	orr.w	r2, r2, #4
 8001b2a:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001b34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b38:	6a13      	ldr	r3, [r2, #32]
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	bd70      	pop	{r4, r5, r6, pc}
        current_led++;                          /* Go to next LED */
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <led_update_sequence+0x108>)
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	e7c4      	b.n	8001ad4 <led_update_sequence+0x54>
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	4912      	ldr	r1, [pc, #72]	; (8001b98 <led_update_sequence+0x118>)
}
 8001b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001b52:	f7ff bf19 	b.w	8001988 <led_fill_led_pwm_data.part.0>
    } else if ((!tc && (LED_CFG_LEDS_CNT & 0x01)) || (tc && !(LED_CFG_LEDS_CNT & 0x01))) {
 8001b56:	b988      	cbnz	r0, 8001b7c <led_update_sequence+0xfc>
  CLEAR_BIT(TIMx->CCER, Channels);
 8001b58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
        led_start_reset_pulse(2);                /* Start reset pulse at the end */
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	6a13      	ldr	r3, [r2, #32]
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001b66:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8001b6a:	3258      	adds	r2, #88	; 0x58
 8001b6c:	6813      	ldr	r3, [r2, #0]
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        led_start_reset_pulse(2);                /* Start reset pulse at the end */
 8001b78:	f7ff bf3c 	b.w	80019f4 <led_start_reset_pulse>
 8001b7c:	bd70      	pop	{r4, r5, r6, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000002c 	.word	0x2000002c
 8001b84:	2000002d 	.word	0x2000002d
 8001b88:	20000028 	.word	0x20000028
 8001b8c:	20000094 	.word	0x20000094
 8001b90:	40020058 	.word	0x40020058
 8001b94:	40020000 	.word	0x40020000
 8001b98:	200000f4 	.word	0x200000f4

08001b9c <GetNeoState>:
}
 8001b9c:	4b01      	ldr	r3, [pc, #4]	; (8001ba4 <GetNeoState+0x8>)
 8001b9e:	7818      	ldrb	r0, [r3, #0]
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000091 	.word	0x20000091

08001ba8 <led_init>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <led_init+0x17c>)
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8001baa:	485f      	ldr	r0, [pc, #380]	; (8001d28 <led_init+0x180>)
 8001bac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
led_init(void) {
 8001bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb0:	f042 0201 	orr.w	r2, r2, #1
 8001bb4:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bb8:	b097      	sub	sp, #92	; 0x5c
 8001bba:	f002 0201 	and.w	r2, r2, #1
 8001bbe:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001bc0:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bcc:	f002 0201 	and.w	r2, r2, #1
 8001bd0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001bd2:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001be4:	9b00      	ldr	r3, [sp, #0]
 8001be6:	6803      	ldr	r3, [r0, #0]
 8001be8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8001bec:	fa92 f2a2 	rbit	r2, r2
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	fab2 f282 	clz	r2, r2
 8001bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfa:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	6003      	str	r3, [r0, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <led_init+0x184>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4f4a      	ldr	r7, [pc, #296]	; (8001d30 <led_init+0x188>)
 8001c06:	681a      	ldr	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	4e4a      	ldr	r6, [pc, #296]	; (8001d34 <led_init+0x18c>)
 8001c0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c0e:	f022 0210 	bic.w	r2, r2, #16
 8001c12:	f042 0210 	orr.w	r2, r2, #16
 8001c16:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001c1e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	601a      	str	r2, [r3, #0]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c2e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c36:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c42:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c4e:	601a      	str	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8001c50:	4a39      	ldr	r2, [pc, #228]	; (8001d38 <led_init+0x190>)
 8001c52:	609a      	str	r2, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	f042 0202 	orr.w	r2, r2, #2
 8001c5a:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c62:	68f8      	ldr	r0, [r7, #12]
    NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8001c64:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001c68:	f7ff fec2 	bl	80019f0 <NVIC_EncodePriority.constprop.23>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	0100      	lsls	r0, r0, #4
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c6e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001c72:	b2c0      	uxtb	r0, r0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    TIM_InitStruct.Prescaler = 0;
 8001c78:	2500      	movs	r5, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	f886 031c 	strb.w	r0, [r6, #796]	; 0x31c
    LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001c7e:	a903      	add	r1, sp, #12
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c80:	6033      	str	r3, [r6, #0]
 8001c82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    TIM_InitStruct.Autoreload = 38;
 8001c86:	2326      	movs	r3, #38	; 0x26
 8001c88:	9305      	str	r3, [sp, #20]
    TIM_InitStruct.Prescaler = 0;
 8001c8a:	f8ad 500c 	strh.w	r5, [sp, #12]
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c8e:	9504      	str	r5, [sp, #16]
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c90:	9506      	str	r5, [sp, #24]
    LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001c92:	f7ff fcdf 	bl	8001654 <LL_TIM_Init>
 8001c96:	69a3      	ldr	r3, [r4, #24]
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	61a3      	str	r3, [r4, #24]
    LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001c9e:	aa0e      	add	r2, sp, #56	; 0x38
    TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001ca0:	2360      	movs	r3, #96	; 0x60
    LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	4620      	mov	r0, r4
    TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001ca6:	930e      	str	r3, [sp, #56]	; 0x38
    TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001ca8:	950f      	str	r5, [sp, #60]	; 0x3c
    TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001caa:	9510      	str	r5, [sp, #64]	; 0x40
    TIM_OC_InitStruct.CompareValue = 0;
 8001cac:	9511      	str	r5, [sp, #68]	; 0x44
    TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001cae:	9512      	str	r5, [sp, #72]	; 0x48
    LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001cb0:	f7ff fd12 	bl	80016d8 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001cb4:	69a3      	ldr	r3, [r4, #24]
 8001cb6:	f023 0304 	bic.w	r3, r3, #4
 8001cba:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001cbc:	6863      	ldr	r3, [r4, #4]
 8001cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc2:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001cc4:	68a3      	ldr	r3, [r4, #8]
 8001cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cca:	60a3      	str	r3, [r4, #8]
    GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	9309      	str	r3, [sp, #36]	; 0x24
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001cd6:	2301      	movs	r3, #1
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001cdc:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cde:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ce0:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ce2:	950c      	str	r5, [sp, #48]	; 0x30
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f7ff fc17 	bl	8001516 <LL_GPIO_Init>
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001ce8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    LL_TIM_OC_SetCompareCH1(TIM2, LL_TIM_GetAutoReload(TIM2) * 2 / 3 - 1); /* Set channel 1 compare register */
 8001cea:	2203      	movs	r2, #3
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cf2:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001cf4:	6363      	str	r3, [r4, #52]	; 0x34
  SET_BIT(TIMx->CCER, Channels);
 8001cf6:	6a23      	ldr	r3, [r4, #32]
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6223      	str	r3, [r4, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8001cfe:	68e3      	ldr	r3, [r4, #12]
 8001d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d04:	60e3      	str	r3, [r4, #12]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d06:	68f8      	ldr	r0, [r7, #12]
    NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8001d08:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001d0c:	f7ff fe70 	bl	80019f0 <NVIC_EncodePriority.constprop.23>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	0100      	lsls	r0, r0, #4
 8001d12:	b2c0      	uxtb	r0, r0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	f886 030f 	strb.w	r0, [r6, #783]	; 0x30f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1c:	6033      	str	r3, [r6, #0]
}
 8001d1e:	b017      	add	sp, #92	; 0x5c
 8001d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	400200a8 	.word	0x400200a8
 8001d2c:	40020058 	.word	0x40020058
 8001d30:	e000ed00 	.word	0xe000ed00
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	40000034 	.word	0x40000034

08001d3c <led_set_color>:
    if (index < LED_CFG_LEDS_CNT) {
 8001d3c:	2820      	cmp	r0, #32
        leds_colors[index * LED_CFG_BYTES_PER_LED + 0] = r;
 8001d3e:	bf98      	it	ls
 8001d40:	eb00 0040 	addls.w	r0, r0, r0, lsl #1
) {
 8001d44:	b510      	push	{r4, lr}
        leds_colors[index * LED_CFG_BYTES_PER_LED + 0] = r;
 8001d46:	bf9f      	itttt	ls
 8001d48:	4c04      	ldrls	r4, [pc, #16]	; (8001d5c <led_set_color+0x20>)
 8001d4a:	5421      	strbls	r1, [r4, r0]
        leds_colors[index * LED_CFG_BYTES_PER_LED + 1] = g;
 8001d4c:	1900      	addls	r0, r0, r4
 8001d4e:	7042      	strbls	r2, [r0, #1]
        leds_colors[index * LED_CFG_BYTES_PER_LED + 2] = b;
 8001d50:	bf9a      	itte	ls
 8001d52:	7083      	strbls	r3, [r0, #2]
        return 1;
 8001d54:	2001      	movls	r0, #1
    return 0;
 8001d56:	2000      	movhi	r0, #0
}
 8001d58:	bd10      	pop	{r4, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000002e 	.word	0x2000002e

08001d60 <RainBow>:
{											// R     G    B
 8001d60:	b570      	push	{r4, r5, r6, lr}
	led_set_color((i + 0) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0x0);
 8001d62:	2300      	movs	r3, #0
{											// R     G    B
 8001d64:	4605      	mov	r5, r0
	led_set_color((i + 0) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0x0);
 8001d66:	2421      	movs	r4, #33	; 0x21
 8001d68:	fbb0 f0f4 	udiv	r0, r0, r4
 8001d6c:	eb00 1040 	add.w	r0, r0, r0, lsl #5
 8001d70:	461a      	mov	r2, r3
 8001d72:	21ff      	movs	r1, #255	; 0xff
 8001d74:	1a28      	subs	r0, r5, r0
 8001d76:	f7ff ffe1 	bl	8001d3c <led_set_color>
	led_set_color((i + 1) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0x0);
 8001d7a:	1c6e      	adds	r6, r5, #1
 8001d7c:	fbb6 f3f4 	udiv	r3, r6, r4
 8001d80:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001d84:	2300      	movs	r3, #0
 8001d86:	461a      	mov	r2, r3
 8001d88:	21ff      	movs	r1, #255	; 0xff
 8001d8a:	1a30      	subs	r0, r6, r0
 8001d8c:	f7ff ffd6 	bl	8001d3c <led_set_color>
	led_set_color((i + 2) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0x0);
 8001d90:	1cae      	adds	r6, r5, #2
 8001d92:	fbb6 f3f4 	udiv	r3, r6, r4
 8001d96:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	21ff      	movs	r1, #255	; 0xff
 8001da0:	1a30      	subs	r0, r6, r0
 8001da2:	f7ff ffcb 	bl	8001d3c <led_set_color>
	led_set_color((i + 3) % LED_CFG_LEDS_CNT, 0xFF, 0xFF, 0x0);
 8001da6:	1cee      	adds	r6, r5, #3
 8001da8:	22ff      	movs	r2, #255	; 0xff
 8001daa:	fbb6 f3f4 	udiv	r3, r6, r4
 8001dae:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001db2:	4611      	mov	r1, r2
 8001db4:	2300      	movs	r3, #0
 8001db6:	1a30      	subs	r0, r6, r0
 8001db8:	f7ff ffc0 	bl	8001d3c <led_set_color>
	led_set_color((i + 4) % LED_CFG_LEDS_CNT, 0xFF, 0xFF, 0x0);
 8001dbc:	1d2e      	adds	r6, r5, #4
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	fbb6 f3f4 	udiv	r3, r6, r4
 8001dc4:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001dc8:	4611      	mov	r1, r2
 8001dca:	2300      	movs	r3, #0
 8001dcc:	1a30      	subs	r0, r6, r0
 8001dce:	f7ff ffb5 	bl	8001d3c <led_set_color>
	led_set_color((i + 5) % LED_CFG_LEDS_CNT, 0xFF, 0xFF, 0x0);
 8001dd2:	1d6e      	adds	r6, r5, #5
 8001dd4:	22ff      	movs	r2, #255	; 0xff
 8001dd6:	fbb6 f3f4 	udiv	r3, r6, r4
 8001dda:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001dde:	4611      	mov	r1, r2
 8001de0:	2300      	movs	r3, #0
 8001de2:	1a30      	subs	r0, r6, r0
 8001de4:	f7ff ffaa 	bl	8001d3c <led_set_color>
	led_set_color((i + 6) % LED_CFG_LEDS_CNT, 0xFF, 0xFF, 0x0);
 8001de8:	1dae      	adds	r6, r5, #6
 8001dea:	22ff      	movs	r2, #255	; 0xff
 8001dec:	fbb6 f3f4 	udiv	r3, r6, r4
 8001df0:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001df4:	4611      	mov	r1, r2
 8001df6:	2300      	movs	r3, #0
 8001df8:	1a30      	subs	r0, r6, r0
 8001dfa:	f7ff ff9f 	bl	8001d3c <led_set_color>
	led_set_color((i + 7) % LED_CFG_LEDS_CNT, 0xF, 0xFF, 0x00);
 8001dfe:	1dee      	adds	r6, r5, #7
 8001e00:	fbb6 f3f4 	udiv	r3, r6, r4
 8001e04:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001e08:	22ff      	movs	r2, #255	; 0xff
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	210f      	movs	r1, #15
 8001e0e:	1a30      	subs	r0, r6, r0
 8001e10:	f7ff ff94 	bl	8001d3c <led_set_color>
	led_set_color((i + 8) % LED_CFG_LEDS_CNT, 0xF, 0xFF, 0x00);
 8001e14:	f105 0608 	add.w	r6, r5, #8
 8001e18:	fbb6 f3f4 	udiv	r3, r6, r4
 8001e1c:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001e20:	22ff      	movs	r2, #255	; 0xff
 8001e22:	2300      	movs	r3, #0
 8001e24:	210f      	movs	r1, #15
 8001e26:	1a30      	subs	r0, r6, r0
 8001e28:	f7ff ff88 	bl	8001d3c <led_set_color>
	led_set_color((i + 9) % LED_CFG_LEDS_CNT, 0xF, 0xFF, 0x0);
 8001e2c:	f105 0609 	add.w	r6, r5, #9
 8001e30:	fbb6 f3f4 	udiv	r3, r6, r4
 8001e34:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001e38:	22ff      	movs	r2, #255	; 0xff
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	210f      	movs	r1, #15
 8001e3e:	1a30      	subs	r0, r6, r0
 8001e40:	f7ff ff7c 	bl	8001d3c <led_set_color>
	led_set_color((i + 10) % LED_CFG_LEDS_CNT, 0x0, 0xFF, 0x0);
 8001e44:	f105 060a 	add.w	r6, r5, #10
 8001e48:	fbb6 f3f4 	udiv	r3, r6, r4
 8001e4c:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001e50:	2300      	movs	r3, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	22ff      	movs	r2, #255	; 0xff
 8001e56:	1a30      	subs	r0, r6, r0
 8001e58:	f7ff ff70 	bl	8001d3c <led_set_color>
	led_set_color((i + 11) % LED_CFG_LEDS_CNT, 0x00, 0xFF, 0x0);
 8001e5c:	f105 060b 	add.w	r6, r5, #11
 8001e60:	fbb6 f3f4 	udiv	r3, r6, r4
 8001e64:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001e68:	2300      	movs	r3, #0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	22ff      	movs	r2, #255	; 0xff
 8001e6e:	1a30      	subs	r0, r6, r0
 8001e70:	f7ff ff64 	bl	8001d3c <led_set_color>
	led_set_color((i + 12) % LED_CFG_LEDS_CNT, 0x00, 0xFF, 0x0);
 8001e74:	f105 060c 	add.w	r6, r5, #12
 8001e78:	fbb6 f3f4 	udiv	r3, r6, r4
 8001e7c:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001e80:	2300      	movs	r3, #0
 8001e82:	4619      	mov	r1, r3
 8001e84:	22ff      	movs	r2, #255	; 0xff
 8001e86:	1a30      	subs	r0, r6, r0
 8001e88:	f7ff ff58 	bl	8001d3c <led_set_color>
	led_set_color((i + 13) % LED_CFG_LEDS_CNT, 0x0, 0xFF, 0xFF);
 8001e8c:	f105 060d 	add.w	r6, r5, #13
 8001e90:	fbb6 f3f4 	udiv	r3, r6, r4
 8001e94:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001e98:	23ff      	movs	r3, #255	; 0xff
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	1a30      	subs	r0, r6, r0
 8001ea0:	f7ff ff4c 	bl	8001d3c <led_set_color>
	led_set_color((i + 14) % LED_CFG_LEDS_CNT, 0x0, 0xFF, 0xFF);
 8001ea4:	f105 060e 	add.w	r6, r5, #14
 8001ea8:	fbb6 f3f4 	udiv	r3, r6, r4
 8001eac:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001eb0:	23ff      	movs	r3, #255	; 0xff
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	1a30      	subs	r0, r6, r0
 8001eb8:	f7ff ff40 	bl	8001d3c <led_set_color>
	led_set_color((i + 15) % LED_CFG_LEDS_CNT, 0x00, 0xFF, 0xFF);
 8001ebc:	f105 060f 	add.w	r6, r5, #15
 8001ec0:	fbb6 f3f4 	udiv	r3, r6, r4
 8001ec4:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001ec8:	23ff      	movs	r3, #255	; 0xff
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2100      	movs	r1, #0
 8001ece:	1a30      	subs	r0, r6, r0
 8001ed0:	f7ff ff34 	bl	8001d3c <led_set_color>
	led_set_color((i + 16) % LED_CFG_LEDS_CNT, 0x00, 0xF, 0xFF);
 8001ed4:	f105 0610 	add.w	r6, r5, #16
 8001ed8:	fbb6 f3f4 	udiv	r3, r6, r4
 8001edc:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	23ff      	movs	r3, #255	; 0xff
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	1a30      	subs	r0, r6, r0
 8001ee8:	f7ff ff28 	bl	8001d3c <led_set_color>
	led_set_color((i + 17) % LED_CFG_LEDS_CNT, 0x0, 0xF, 0xFF);
 8001eec:	f105 0611 	add.w	r6, r5, #17
 8001ef0:	fbb6 f3f4 	udiv	r3, r6, r4
 8001ef4:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001ef8:	220f      	movs	r2, #15
 8001efa:	23ff      	movs	r3, #255	; 0xff
 8001efc:	2100      	movs	r1, #0
 8001efe:	1a30      	subs	r0, r6, r0
 8001f00:	f7ff ff1c 	bl	8001d3c <led_set_color>
	led_set_color((i + 18) % LED_CFG_LEDS_CNT, 0x0, 0xF, 0xFF);
 8001f04:	f105 0612 	add.w	r6, r5, #18
 8001f08:	fbb6 f3f4 	udiv	r3, r6, r4
 8001f0c:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001f10:	220f      	movs	r2, #15
 8001f12:	23ff      	movs	r3, #255	; 0xff
 8001f14:	2100      	movs	r1, #0
 8001f16:	1a30      	subs	r0, r6, r0
 8001f18:	f7ff ff10 	bl	8001d3c <led_set_color>
	led_set_color((i + 19) % LED_CFG_LEDS_CNT, 0x0, 0x0, 0xFF);
 8001f1c:	f105 0613 	add.w	r6, r5, #19
 8001f20:	2200      	movs	r2, #0
 8001f22:	fbb6 f3f4 	udiv	r3, r6, r4
 8001f26:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	23ff      	movs	r3, #255	; 0xff
 8001f2e:	1a30      	subs	r0, r6, r0
 8001f30:	f7ff ff04 	bl	8001d3c <led_set_color>
	led_set_color((i + 20) % LED_CFG_LEDS_CNT, 0x00, 0x0, 0xFF);
 8001f34:	f105 0614 	add.w	r6, r5, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	fbb6 f3f4 	udiv	r3, r6, r4
 8001f3e:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001f42:	4611      	mov	r1, r2
 8001f44:	23ff      	movs	r3, #255	; 0xff
 8001f46:	1a30      	subs	r0, r6, r0
 8001f48:	f7ff fef8 	bl	8001d3c <led_set_color>
	led_set_color((i + 21) % LED_CFG_LEDS_CNT, 0x00, 0x0, 0xFF);
 8001f4c:	f105 0615 	add.w	r6, r5, #21
 8001f50:	2200      	movs	r2, #0
 8001f52:	fbb6 f3f4 	udiv	r3, r6, r4
 8001f56:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	23ff      	movs	r3, #255	; 0xff
 8001f5e:	1a30      	subs	r0, r6, r0
 8001f60:	f7ff feec 	bl	8001d3c <led_set_color>
	led_set_color((i + 22) % LED_CFG_LEDS_CNT, 0x8, 0x0, 0xFF);
 8001f64:	f105 0616 	add.w	r6, r5, #22
 8001f68:	fbb6 f3f4 	udiv	r3, r6, r4
 8001f6c:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001f70:	2200      	movs	r2, #0
 8001f72:	23ff      	movs	r3, #255	; 0xff
 8001f74:	2108      	movs	r1, #8
 8001f76:	1a30      	subs	r0, r6, r0
 8001f78:	f7ff fee0 	bl	8001d3c <led_set_color>
	led_set_color((i + 23) % LED_CFG_LEDS_CNT, 0x8, 0x0, 0xFF);
 8001f7c:	f105 0617 	add.w	r6, r5, #23
 8001f80:	fbb6 f3f4 	udiv	r3, r6, r4
 8001f84:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001f88:	2200      	movs	r2, #0
 8001f8a:	23ff      	movs	r3, #255	; 0xff
 8001f8c:	2108      	movs	r1, #8
 8001f8e:	1a30      	subs	r0, r6, r0
 8001f90:	f7ff fed4 	bl	8001d3c <led_set_color>
	led_set_color((i + 24) % LED_CFG_LEDS_CNT, 0x8, 0x0, 0xFF);
 8001f94:	f105 0618 	add.w	r6, r5, #24
 8001f98:	fbb6 f3f4 	udiv	r3, r6, r4
 8001f9c:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	23ff      	movs	r3, #255	; 0xff
 8001fa4:	2108      	movs	r1, #8
 8001fa6:	1a30      	subs	r0, r6, r0
 8001fa8:	f7ff fec8 	bl	8001d3c <led_set_color>
	led_set_color((i + 25) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0xFF);
 8001fac:	f105 0619 	add.w	r6, r5, #25
 8001fb0:	fbb6 f3f4 	udiv	r3, r6, r4
 8001fb4:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001fb8:	23ff      	movs	r3, #255	; 0xff
 8001fba:	4619      	mov	r1, r3
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	1a30      	subs	r0, r6, r0
 8001fc0:	f7ff febc 	bl	8001d3c <led_set_color>
	led_set_color((i + 26) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0xFF);
 8001fc4:	f105 061a 	add.w	r6, r5, #26
 8001fc8:	fbb6 f3f4 	udiv	r3, r6, r4
 8001fcc:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001fd0:	23ff      	movs	r3, #255	; 0xff
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	1a30      	subs	r0, r6, r0
 8001fd8:	f7ff feb0 	bl	8001d3c <led_set_color>
	led_set_color((i + 27) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0xFF);
 8001fdc:	f105 061b 	add.w	r6, r5, #27
 8001fe0:	fbb6 f3f4 	udiv	r3, r6, r4
 8001fe4:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8001fe8:	23ff      	movs	r3, #255	; 0xff
 8001fea:	4619      	mov	r1, r3
 8001fec:	2200      	movs	r2, #0
 8001fee:	1a30      	subs	r0, r6, r0
 8001ff0:	f7ff fea4 	bl	8001d3c <led_set_color>
	led_set_color((i + 28) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0xF);
 8001ff4:	f105 061c 	add.w	r6, r5, #28
 8001ff8:	fbb6 f3f4 	udiv	r3, r6, r4
 8001ffc:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8002000:	2200      	movs	r2, #0
 8002002:	230f      	movs	r3, #15
 8002004:	21ff      	movs	r1, #255	; 0xff
 8002006:	1a30      	subs	r0, r6, r0
 8002008:	f7ff fe98 	bl	8001d3c <led_set_color>
	led_set_color((i + 29) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0xF);
 800200c:	f105 061d 	add.w	r6, r5, #29
 8002010:	fbb6 f3f4 	udiv	r3, r6, r4
 8002014:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8002018:	2200      	movs	r2, #0
 800201a:	230f      	movs	r3, #15
 800201c:	21ff      	movs	r1, #255	; 0xff
 800201e:	1a30      	subs	r0, r6, r0
 8002020:	f7ff fe8c 	bl	8001d3c <led_set_color>
	led_set_color((i + 30) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0xF);
 8002024:	f105 061e 	add.w	r6, r5, #30
 8002028:	fbb6 f3f4 	udiv	r3, r6, r4
 800202c:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8002030:	2200      	movs	r2, #0
 8002032:	230f      	movs	r3, #15
 8002034:	21ff      	movs	r1, #255	; 0xff
 8002036:	1a30      	subs	r0, r6, r0
 8002038:	f7ff fe80 	bl	8001d3c <led_set_color>
	led_set_color((i + 31) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0xF);
 800203c:	f105 061f 	add.w	r6, r5, #31
 8002040:	fbb6 f3f4 	udiv	r3, r6, r4
 8002044:	eb03 1043 	add.w	r0, r3, r3, lsl #5
 8002048:	2200      	movs	r2, #0
 800204a:	230f      	movs	r3, #15
 800204c:	21ff      	movs	r1, #255	; 0xff
 800204e:	1a30      	subs	r0, r6, r0
 8002050:	f7ff fe74 	bl	8001d3c <led_set_color>
	led_set_color((i + 32) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0xF);
 8002054:	f105 0020 	add.w	r0, r5, #32
 8002058:	fbb0 f4f4 	udiv	r4, r0, r4
 800205c:	eb04 1444 	add.w	r4, r4, r4, lsl #5
 8002060:	1b00      	subs	r0, r0, r4
 8002062:	230f      	movs	r3, #15
 8002064:	2200      	movs	r2, #0
 8002066:	21ff      	movs	r1, #255	; 0xff
}
 8002068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	led_set_color((i + 32) % LED_CFG_LEDS_CNT, 0xFF, 0x0, 0xF);
 800206c:	f7ff be66 	b.w	8001d3c <led_set_color>

08002070 <led_set_color_all>:
) {
 8002070:	b530      	push	{r4, r5, lr}
        leds_colors[index * LED_CFG_BYTES_PER_LED + 0] = r;
 8002072:	4d05      	ldr	r5, [pc, #20]	; (8002088 <led_set_color_all+0x18>)
) {
 8002074:	2300      	movs	r3, #0
        leds_colors[index * LED_CFG_BYTES_PER_LED + 0] = r;
 8002076:	5558      	strb	r0, [r3, r5]
 8002078:	18ec      	adds	r4, r5, r3
 800207a:	3303      	adds	r3, #3
    for (index = 0; index < LED_CFG_LEDS_CNT; index++) {
 800207c:	2b63      	cmp	r3, #99	; 0x63
        leds_colors[index * LED_CFG_BYTES_PER_LED + 1] = g;
 800207e:	7061      	strb	r1, [r4, #1]
        leds_colors[index * LED_CFG_BYTES_PER_LED + 2] = b;
 8002080:	70a2      	strb	r2, [r4, #2]
    for (index = 0; index < LED_CFG_LEDS_CNT; index++) {
 8002082:	d1f8      	bne.n	8002076 <led_set_color_all+0x6>
}
 8002084:	2001      	movs	r0, #1
 8002086:	bd30      	pop	{r4, r5, pc}
 8002088:	2000002e 	.word	0x2000002e

0800208c <led_update>:
led_update(uint8_t block) {
 800208c:	b570      	push	{r4, r5, r6, lr}
    if (is_updating) {                          /* Check if update in progress already */
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <led_update+0x28>)
 8002090:	781a      	ldrb	r2, [r3, #0]
led_update(uint8_t block) {
 8002092:	4606      	mov	r6, r0
 8002094:	461d      	mov	r5, r3
    if (is_updating) {                          /* Check if update in progress already */
 8002096:	b952      	cbnz	r2, 80020ae <led_update+0x22>
    is_updating = 1;                            /* We are now updating */
 8002098:	2401      	movs	r4, #1
    led_start_reset_pulse(1);                   /* Start reset pulse */
 800209a:	4620      	mov	r0, r4
    is_updating = 1;                            /* We are now updating */
 800209c:	701c      	strb	r4, [r3, #0]
    led_start_reset_pulse(1);                   /* Start reset pulse */
 800209e:	f7ff fca9 	bl	80019f4 <led_start_reset_pulse>
    if (block) {
 80020a2:	b116      	cbz	r6, 80020aa <led_update+0x1e>
    return !is_updating;                        /* Return updating flag status */
 80020a4:	782b      	ldrb	r3, [r5, #0]
        while (!led_is_update_finished());      /* Wait to finish */
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1fc      	bne.n	80020a4 <led_update+0x18>
    return 1;
 80020aa:	2001      	movs	r0, #1
 80020ac:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 80020ae:	2000      	movs	r0, #0
 80020b0:	bd70      	pop	{r4, r5, r6, pc}
 80020b2:	bf00      	nop
 80020b4:	2000002d 	.word	0x2000002d

080020b8 <TurnAllRed>:
{
 80020b8:	b510      	push	{r4, lr}
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80020ba:	2400      	movs	r4, #0
		led_set_color(i, 0xFF, 0x0, 0x0);
 80020bc:	2300      	movs	r3, #0
 80020be:	4620      	mov	r0, r4
 80020c0:	461a      	mov	r2, r3
 80020c2:	21ff      	movs	r1, #255	; 0xff
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80020c4:	3401      	adds	r4, #1
		led_set_color(i, 0xFF, 0x0, 0x0);
 80020c6:	f7ff fe39 	bl	8001d3c <led_set_color>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80020ca:	2c21      	cmp	r4, #33	; 0x21
 80020cc:	d1f6      	bne.n	80020bc <TurnAllRed+0x4>
	led_update(1);
 80020ce:	2001      	movs	r0, #1
}
 80020d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	led_update(1);
 80020d4:	f7ff bfda 	b.w	800208c <led_update>

080020d8 <TurnAllBlue>:
{
 80020d8:	b510      	push	{r4, lr}
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80020da:	2400      	movs	r4, #0
		led_set_color(i, 0x0, 0x0, 0xFF);
 80020dc:	2200      	movs	r2, #0
 80020de:	4620      	mov	r0, r4
 80020e0:	23ff      	movs	r3, #255	; 0xff
 80020e2:	4611      	mov	r1, r2
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80020e4:	3401      	adds	r4, #1
		led_set_color(i, 0x0, 0x0, 0xFF);
 80020e6:	f7ff fe29 	bl	8001d3c <led_set_color>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80020ea:	2c21      	cmp	r4, #33	; 0x21
 80020ec:	d1f6      	bne.n	80020dc <TurnAllBlue+0x4>
	led_update(1);
 80020ee:	2001      	movs	r0, #1
}
 80020f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	led_update(1);
 80020f4:	f7ff bfca 	b.w	800208c <led_update>

080020f8 <TurnAllGreen>:
{
 80020f8:	b510      	push	{r4, lr}
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80020fa:	2400      	movs	r4, #0
		led_set_color(i, 0x0, 0xFF, 0x0);
 80020fc:	2300      	movs	r3, #0
 80020fe:	4620      	mov	r0, r4
 8002100:	22ff      	movs	r2, #255	; 0xff
 8002102:	4619      	mov	r1, r3
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 8002104:	3401      	adds	r4, #1
		led_set_color(i, 0x0, 0xFF, 0x0);
 8002106:	f7ff fe19 	bl	8001d3c <led_set_color>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800210a:	2c21      	cmp	r4, #33	; 0x21
 800210c:	d1f6      	bne.n	80020fc <TurnAllGreen+0x4>
	led_update(1);
 800210e:	2001      	movs	r0, #1
}
 8002110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	led_update(1);
 8002114:	f7ff bfba 	b.w	800208c <led_update>

08002118 <TurnAllCyan>:
{
 8002118:	b510      	push	{r4, lr}
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800211a:	2400      	movs	r4, #0
		led_set_color(i, 0x0, 0xFF, 0xFF);
 800211c:	23ff      	movs	r3, #255	; 0xff
 800211e:	4620      	mov	r0, r4
 8002120:	461a      	mov	r2, r3
 8002122:	2100      	movs	r1, #0
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 8002124:	3401      	adds	r4, #1
		led_set_color(i, 0x0, 0xFF, 0xFF);
 8002126:	f7ff fe09 	bl	8001d3c <led_set_color>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800212a:	2c21      	cmp	r4, #33	; 0x21
 800212c:	d1f6      	bne.n	800211c <TurnAllCyan+0x4>
	led_update(1);
 800212e:	2001      	movs	r0, #1
}
 8002130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	led_update(1);
 8002134:	f7ff bfaa 	b.w	800208c <led_update>

08002138 <TurnAllPurple>:
{
 8002138:	b510      	push	{r4, lr}
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800213a:	2400      	movs	r4, #0
		led_set_color(i, 0xFF, 0x0, 0xFF);
 800213c:	23ff      	movs	r3, #255	; 0xff
 800213e:	4620      	mov	r0, r4
 8002140:	2200      	movs	r2, #0
 8002142:	4619      	mov	r1, r3
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 8002144:	3401      	adds	r4, #1
		led_set_color(i, 0xFF, 0x0, 0xFF);
 8002146:	f7ff fdf9 	bl	8001d3c <led_set_color>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800214a:	2c21      	cmp	r4, #33	; 0x21
 800214c:	d1f6      	bne.n	800213c <TurnAllPurple+0x4>
	led_update(1);
 800214e:	2001      	movs	r0, #1
}
 8002150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	led_update(1);
 8002154:	f7ff bf9a 	b.w	800208c <led_update>

08002158 <TurnAllOrange>:
{
 8002158:	b510      	push	{r4, lr}
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800215a:	2400      	movs	r4, #0
		led_set_color(i, 0xFF, 0x10, 0x0);
 800215c:	4620      	mov	r0, r4
 800215e:	2300      	movs	r3, #0
 8002160:	2210      	movs	r2, #16
 8002162:	21ff      	movs	r1, #255	; 0xff
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 8002164:	3401      	adds	r4, #1
		led_set_color(i, 0xFF, 0x10, 0x0);
 8002166:	f7ff fde9 	bl	8001d3c <led_set_color>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800216a:	2c21      	cmp	r4, #33	; 0x21
 800216c:	d1f6      	bne.n	800215c <TurnAllOrange+0x4>
	led_update(1);
 800216e:	2001      	movs	r0, #1
}
 8002170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	led_update(1);
 8002174:	f7ff bf8a 	b.w	800208c <led_update>

08002178 <TurnAllYellow>:
{
 8002178:	b510      	push	{r4, lr}
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800217a:	2400      	movs	r4, #0
		led_set_color(i, 0xFF, 0xFF, 0x0);
 800217c:	22ff      	movs	r2, #255	; 0xff
 800217e:	4620      	mov	r0, r4
 8002180:	2300      	movs	r3, #0
 8002182:	4611      	mov	r1, r2
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 8002184:	3401      	adds	r4, #1
		led_set_color(i, 0xFF, 0xFF, 0x0);
 8002186:	f7ff fdd9 	bl	8001d3c <led_set_color>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800218a:	2c21      	cmp	r4, #33	; 0x21
 800218c:	d1f6      	bne.n	800217c <TurnAllYellow+0x4>
	led_update(1);
 800218e:	2001      	movs	r0, #1
}
 8002190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	led_update(1);
 8002194:	f7ff bf7a 	b.w	800208c <led_update>

08002198 <TurnAllWhite>:
{
 8002198:	b510      	push	{r4, lr}
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 800219a:	2400      	movs	r4, #0
		led_set_color(i, 0xFF, 0xFF, 0xFF);
 800219c:	23ff      	movs	r3, #255	; 0xff
 800219e:	4620      	mov	r0, r4
 80021a0:	461a      	mov	r2, r3
 80021a2:	4619      	mov	r1, r3
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80021a4:	3401      	adds	r4, #1
		led_set_color(i, 0xFF, 0xFF, 0xFF);
 80021a6:	f7ff fdc9 	bl	8001d3c <led_set_color>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80021aa:	2c21      	cmp	r4, #33	; 0x21
 80021ac:	d1f6      	bne.n	800219c <TurnAllWhite+0x4>
	led_update(1);
 80021ae:	2001      	movs	r0, #1
}
 80021b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	led_update(1);
 80021b4:	f7ff bf6a 	b.w	800208c <led_update>

080021b8 <TurnAllOff>:
{
 80021b8:	b510      	push	{r4, lr}
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80021ba:	2400      	movs	r4, #0
		led_set_color(i, 0x0, 0x0, 0x0);
 80021bc:	2300      	movs	r3, #0
 80021be:	4620      	mov	r0, r4
 80021c0:	461a      	mov	r2, r3
 80021c2:	4619      	mov	r1, r3
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80021c4:	3401      	adds	r4, #1
		led_set_color(i, 0x0, 0x0, 0x0);
 80021c6:	f7ff fdb9 	bl	8001d3c <led_set_color>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 80021ca:	2c21      	cmp	r4, #33	; 0x21
 80021cc:	d1f6      	bne.n	80021bc <TurnAllOff+0x4>
	led_update(1);
 80021ce:	2001      	movs	r0, #1
}
 80021d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	led_update(1);
 80021d4:	f7ff bf5a 	b.w	800208c <led_update>

080021d8 <NeoStateMachine>:
{
 80021d8:	b510      	push	{r4, lr}
 80021da:	4c1c      	ldr	r4, [pc, #112]	; (800224c <NeoStateMachine+0x74>)
	if(nC == NEO_GREEN)
 80021dc:	b920      	cbnz	r0, 80021e8 <NeoStateMachine+0x10>
		TurnAllGreen();
 80021de:	f7ff ff8b 	bl	80020f8 <TurnAllGreen>
	neoColorTracker = nC;
 80021e2:	2301      	movs	r3, #1
 80021e4:	7023      	strb	r3, [r4, #0]
 80021e6:	bd10      	pop	{r4, pc}
	else if(nC == NEO_CYAN)
 80021e8:	2801      	cmp	r0, #1
 80021ea:	d103      	bne.n	80021f4 <NeoStateMachine+0x1c>
		TurnAllCyan();
 80021ec:	f7ff ff94 	bl	8002118 <TurnAllCyan>
	neoColorTracker = nC;
 80021f0:	2302      	movs	r3, #2
 80021f2:	e7f7      	b.n	80021e4 <NeoStateMachine+0xc>
	else if(nC == NEO_BLUE)
 80021f4:	2802      	cmp	r0, #2
 80021f6:	d103      	bne.n	8002200 <NeoStateMachine+0x28>
		TurnAllBlue();
 80021f8:	f7ff ff6e 	bl	80020d8 <TurnAllBlue>
	neoColorTracker = nC;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e7f1      	b.n	80021e4 <NeoStateMachine+0xc>
	else if(nC == NEO_PURPLE)
 8002200:	2803      	cmp	r0, #3
 8002202:	d103      	bne.n	800220c <NeoStateMachine+0x34>
		TurnAllPurple();
 8002204:	f7ff ff98 	bl	8002138 <TurnAllPurple>
	neoColorTracker = nC;
 8002208:	2304      	movs	r3, #4
 800220a:	e7eb      	b.n	80021e4 <NeoStateMachine+0xc>
	else if(nC == NEO_RED)
 800220c:	2804      	cmp	r0, #4
 800220e:	d103      	bne.n	8002218 <NeoStateMachine+0x40>
		TurnAllRed();
 8002210:	f7ff ff52 	bl	80020b8 <TurnAllRed>
	neoColorTracker = nC;
 8002214:	2305      	movs	r3, #5
 8002216:	e7e5      	b.n	80021e4 <NeoStateMachine+0xc>
	else if(nC == NEO_ORANGE)
 8002218:	2805      	cmp	r0, #5
 800221a:	d103      	bne.n	8002224 <NeoStateMachine+0x4c>
		TurnAllOrange();
 800221c:	f7ff ff9c 	bl	8002158 <TurnAllOrange>
	neoColorTracker = nC;
 8002220:	2306      	movs	r3, #6
 8002222:	e7df      	b.n	80021e4 <NeoStateMachine+0xc>
	else if(nC == NEO_YELLOW)
 8002224:	2806      	cmp	r0, #6
 8002226:	d103      	bne.n	8002230 <NeoStateMachine+0x58>
		TurnAllYellow();
 8002228:	f7ff ffa6 	bl	8002178 <TurnAllYellow>
	neoColorTracker = nC;
 800222c:	2307      	movs	r3, #7
 800222e:	e7d9      	b.n	80021e4 <NeoStateMachine+0xc>
	else if(nC == NEO_WHITE)
 8002230:	2807      	cmp	r0, #7
 8002232:	d103      	bne.n	800223c <NeoStateMachine+0x64>
		TurnAllWhite();
 8002234:	f7ff ffb0 	bl	8002198 <TurnAllWhite>
	neoColorTracker = nC;
 8002238:	2308      	movs	r3, #8
 800223a:	e7d3      	b.n	80021e4 <NeoStateMachine+0xc>
	else if(nC == NEO_RAINBOW)
 800223c:	2808      	cmp	r0, #8
 800223e:	d101      	bne.n	8002244 <NeoStateMachine+0x6c>
	neoColorTracker = nC;
 8002240:	2309      	movs	r3, #9
 8002242:	e7cf      	b.n	80021e4 <NeoStateMachine+0xc>
		TurnAllOff();
 8002244:	f7ff ffb8 	bl	80021b8 <TurnAllOff>
	neoColorTracker = nC;
 8002248:	2300      	movs	r3, #0
 800224a:	e7cb      	b.n	80021e4 <NeoStateMachine+0xc>
 800224c:	20000091 	.word	0x20000091

08002250 <PowerUpSword>:
{
 8002250:	b538      	push	{r3, r4, r5, lr}
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 8002252:	2500      	movs	r5, #0
{
 8002254:	2400      	movs	r4, #0
			led_set_color(i, 0x0, j, j);
 8002256:	b2e3      	uxtb	r3, r4
 8002258:	461a      	mov	r2, r3
 800225a:	2100      	movs	r1, #0
 800225c:	4628      	mov	r0, r5
 800225e:	f7ff fd6d 	bl	8001d3c <led_set_color>
			led_update(1);
 8002262:	2001      	movs	r0, #1
 8002264:	f7ff ff12 	bl	800208c <led_update>
		for(int j = 0; j < 127; j= j+7)
 8002268:	3407      	adds	r4, #7
			HAL_Delay(1);
 800226a:	2001      	movs	r0, #1
 800226c:	f7fe f982 	bl	8000574 <HAL_Delay>
		for(int j = 0; j < 127; j= j+7)
 8002270:	2c85      	cmp	r4, #133	; 0x85
 8002272:	d1f0      	bne.n	8002256 <PowerUpSword+0x6>
	for(int i = 0; i < LED_CFG_LEDS_CNT; i++)
 8002274:	3501      	adds	r5, #1
 8002276:	2d21      	cmp	r5, #33	; 0x21
 8002278:	d1ec      	bne.n	8002254 <PowerUpSword+0x4>
 800227a:	bd38      	pop	{r3, r4, r5, pc}

0800227c <PowerDownSword>:
{
 800227c:	b538      	push	{r3, r4, r5, lr}
	for(int i = LED_CFG_LEDS_CNT - 1; i >= 0; i--)
 800227e:	2520      	movs	r5, #32
{
 8002280:	247f      	movs	r4, #127	; 0x7f
			led_set_color(i, 0x0, j, j);
 8002282:	b2e3      	uxtb	r3, r4
 8002284:	461a      	mov	r2, r3
 8002286:	2100      	movs	r1, #0
 8002288:	4628      	mov	r0, r5
 800228a:	f7ff fd57 	bl	8001d3c <led_set_color>
			led_update(1);
 800228e:	2001      	movs	r0, #1
 8002290:	f7ff fefc 	bl	800208c <led_update>
		for(int j = 127; j >= 0; j= j-7)
 8002294:	3c07      	subs	r4, #7
			HAL_Delay(1);
 8002296:	2001      	movs	r0, #1
 8002298:	f7fe f96c 	bl	8000574 <HAL_Delay>
		for(int j = 127; j >= 0; j= j-7)
 800229c:	1da3      	adds	r3, r4, #6
 800229e:	d1f0      	bne.n	8002282 <PowerDownSword+0x6>
	for(int i = LED_CFG_LEDS_CNT - 1; i >= 0; i--)
 80022a0:	f115 35ff 	adds.w	r5, r5, #4294967295
 80022a4:	d2ec      	bcs.n	8002280 <PowerDownSword+0x4>
	  led_set_color_all(0x00, 0x00, 0x00);
 80022a6:	2200      	movs	r2, #0
 80022a8:	4611      	mov	r1, r2
 80022aa:	4610      	mov	r0, r2
 80022ac:	f7ff fee0 	bl	8002070 <led_set_color_all>
	  led_update(1);
 80022b0:	2001      	movs	r0, #1
}
 80022b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  led_update(1);
 80022b6:	f7ff bee9 	b.w	800208c <led_update>
	...

080022bc <DMA1_Channel5_IRQHandler>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <DMA1_Channel5_IRQHandler+0x28>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	0351      	lsls	r1, r2, #13
 80022c2:	d505      	bpl.n	80022d0 <DMA1_Channel5_IRQHandler+0x14>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 80022c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022c8:	605a      	str	r2, [r3, #4]

void
DMA1_Channel5_IRQHandler(void) {
    if (LL_DMA_IsActiveFlag_HT5(DMA1)) {        /* Check for HT event */
        LL_DMA_ClearFlag_HT5(DMA1);
        led_update_sequence(0);                 /* Call update sequence as HT event */
 80022ca:	2000      	movs	r0, #0
    } else if (LL_DMA_IsActiveFlag_TC5(DMA1)) { /* Check for TC event */
        LL_DMA_ClearFlag_TC5(DMA1);
        led_update_sequence(1);                 /* Call update sequence as TC event */
 80022cc:	f7ff bbd8 	b.w	8001a80 <led_update_sequence>
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	0392      	lsls	r2, r2, #14
 80022d4:	d504      	bpl.n	80022e0 <DMA1_Channel5_IRQHandler+0x24>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 80022d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	2001      	movs	r0, #1
 80022de:	e7f5      	b.n	80022cc <DMA1_Channel5_IRQHandler+0x10>
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40020000 	.word	0x40020000

080022e8 <SystemClock_Config>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80022e8:	4a44      	ldr	r2, [pc, #272]	; (80023fc <SystemClock_Config+0x114>)
 80022ea:	6813      	ldr	r3, [r2, #0]
 80022ec:	f023 0307 	bic.w	r3, r3, #7
 80022f0:	f043 0301 	orr.w	r3, r3, #1
	    /* Enter shutdown mode */
	    HAL_PWREx_EnterSHUTDOWNMode();
}

void SystemClock_Config(void)
{
 80022f4:	b510      	push	{r4, lr}
 80022f6:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80022f8:	6813      	ldr	r3, [r2, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d001      	beq.n	8002306 <SystemClock_Config+0x1e>
  {
  Error_Handler();
 8002302:	f000 fac1 	bl	8002888 <Error_Handler>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002306:	4a3e      	ldr	r2, [pc, #248]	; (8002400 <SystemClock_Config+0x118>)
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002308:	4c3e      	ldr	r4, [pc, #248]	; (8002404 <SystemClock_Config+0x11c>)
 800230a:	6813      	ldr	r3, [r2, #0]
 800230c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	0799      	lsls	r1, r3, #30
 8002322:	d5fc      	bpl.n	800231e <SystemClock_Config+0x36>
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	f043 0308 	orr.w	r3, r3, #8
 800232a:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002332:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002336:	6023      	str	r3, [r4, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002338:	6863      	ldr	r3, [r4, #4]
 800233a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800233e:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8002340:	68e2      	ldr	r2, [r4, #12]
 8002342:	4b31      	ldr	r3, [pc, #196]	; (8002408 <SystemClock_Config+0x120>)
 8002344:	4013      	ands	r3, r2
 8002346:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	60e3      	str	r3, [r4, #12]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8002350:	68e3      	ldr	r3, [r4, #12]
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002356:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235e:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	019a      	lsls	r2, r3, #6
 8002364:	d5fc      	bpl.n	8002360 <SystemClock_Config+0x78>
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8002366:	68e3      	ldr	r3, [r4, #12]
 8002368:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1R, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLR);
 8002372:	6923      	ldr	r3, [r4, #16]
 8002374:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002378:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800237c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002380:	6123      	str	r3, [r4, #16]
  * @rmtoll PLLSAI1CFGR  PLLSAI1REN    LL_RCC_PLLSAI1_EnableDomain_ADC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_ADC(void)
{
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1REN);
 8002382:	6923      	ldr	r3, [r4, #16]
 8002384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002388:	6123      	str	r3, [r4, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002390:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	d5fc      	bpl.n	8002392 <SystemClock_Config+0xaa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002398:	68a3      	ldr	r3, [r4, #8]
 800239a:	f043 0303 	orr.w	r3, r3, #3
 800239e:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023a0:	68a3      	ldr	r3, [r4, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d1fa      	bne.n	80023a0 <SystemClock_Config+0xb8>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80023aa:	68a3      	ldr	r3, [r4, #8]

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_SetSystemCoreClock(40000000);
 80023ac:	4817      	ldr	r0, [pc, #92]	; (800240c <SystemClock_Config+0x124>)
 80023ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023b2:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023b4:	68a3      	ldr	r3, [r4, #8]
 80023b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023ba:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80023bc:	68a3      	ldr	r3, [r4, #8]
 80023be:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80023c2:	60a3      	str	r3, [r4, #8]
 80023c4:	f7ff fada 	bl	800197c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe f88b 	bl	80004e4 <HAL_InitTick>
 80023ce:	b108      	cbz	r0, 80023d4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80023d0:	f000 fa5a 	bl	8002888 <Error_Handler>
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80023d4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <SystemClock_Config+0x128>)
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80023da:	f023 030c 	bic.w	r3, r3, #12
 80023de:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 80023e2:	6813      	ldr	r3, [r2, #0]
 80023e4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80023e8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80023ea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80023ee:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  };
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
  LL_RCC_SetI2CClockSource(LL_RCC_I2C3_CLKSOURCE_PCLK1);
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLLSAI1);
}
 80023fa:	bd10      	pop	{r4, pc}
 80023fc:	40022000 	.word	0x40022000
 8002400:	40007000 	.word	0x40007000
 8002404:	40021000 	.word	0x40021000
 8002408:	f9ff808c 	.word	0xf9ff808c
 800240c:	02625a00 	.word	0x02625a00
 8002410:	40021088 	.word	0x40021088

08002414 <SystemSleepAndWakeup>:
{
 8002414:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(Enable_Neo_GPIO_Port, Enable_Neo_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	2110      	movs	r1, #16
 800241a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800241e:	f7fe fcc9 	bl	8000db4 <HAL_GPIO_WritePin>
	HeartBeatOff();
 8002422:	f000 f819 	bl	8002458 <HeartBeatOff>
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002426:	2001      	movs	r0, #1
 8002428:	f7fe fd72 	bl	8000f10 <HAL_PWREx_EnterSTOP2Mode>
	SystemClock_Config();
 800242c:	f7ff ff5c 	bl	80022e8 <SystemClock_Config>
	MX_GPIO_Init();
 8002430:	f000 f89e 	bl	8002570 <MX_GPIO_Init>
	HeartBeatOff();
 8002434:	f000 f810 	bl	8002458 <HeartBeatOff>
	HAL_GPIO_WritePin(Enable_Neo_GPIO_Port, Enable_Neo_Pin, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	2110      	movs	r1, #16
 800243c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8002440:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(Enable_Neo_GPIO_Port, Enable_Neo_Pin, GPIO_PIN_SET);
 8002444:	f7fe bcb6 	b.w	8000db4 <HAL_GPIO_WritePin>

08002448 <debugLedOff>:
  Description  :
  Argument(s)  :
--------------------------------------------------------------------------------------------------*/
void debugLedOff(void)
{
	HAL_GPIO_WritePin(HeartBeat_GPIO_Port, HeartBeat_Pin, LED_OFF);
 8002448:	2201      	movs	r2, #1
 800244a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800244e:	4801      	ldr	r0, [pc, #4]	; (8002454 <debugLedOff+0xc>)
 8002450:	f7fe bcb0 	b.w	8000db4 <HAL_GPIO_WritePin>
 8002454:	48000800 	.word	0x48000800

08002458 <HeartBeatOff>:
 8002458:	f7ff bff6 	b.w	8002448 <debugLedOff>

0800245c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800245c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800245e:	2218      	movs	r2, #24
 8002460:	2100      	movs	r1, #0
 8002462:	4668      	mov	r0, sp
 8002464:	f000 fba8 	bl	8002bb8 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002468:	4818      	ldr	r0, [pc, #96]	; (80024cc <MX_ADC1_Init+0x70>)
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <MX_ADC1_Init+0x74>)
 800246c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800246e:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002470:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002472:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8002474:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002476:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002478:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800247a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800247c:	6103      	str	r3, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800247e:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002480:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002482:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002484:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8002488:	6242      	str	r2, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800248a:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800248c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800248e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002492:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002494:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002498:	f7fe f896 	bl	80005c8 <HAL_ADC_Init>
 800249c:	b108      	cbz	r0, 80024a2 <MX_ADC1_Init+0x46>
  {
    Error_Handler();
 800249e:	f000 f9f3 	bl	8002888 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024a2:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <MX_ADC1_Init+0x78>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a4:	4809      	ldr	r0, [pc, #36]	; (80024cc <MX_ADC1_Init+0x70>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024a6:	2306      	movs	r3, #6
 80024a8:	e88d 000c 	stmia.w	sp, {r2, r3}
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80024ac:	227f      	movs	r2, #127	; 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80024ae:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80024b0:	9203      	str	r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b2:	4669      	mov	r1, sp
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80024b4:	2204      	movs	r2, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80024b6:	9302      	str	r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80024b8:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 80024ba:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024bc:	f7fe f956 	bl	800076c <HAL_ADC_ConfigChannel>
 80024c0:	b108      	cbz	r0, 80024c6 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 80024c2:	f000 f9e1 	bl	8002888 <Error_Handler>
  }

}
 80024c6:	b007      	add	sp, #28
 80024c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80024cc:	20000160 	.word	0x20000160
 80024d0:	50040000 	.word	0x50040000
 80024d4:	0c900008 	.word	0x0c900008

080024d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80024d8:	b510      	push	{r4, lr}
 80024da:	4604      	mov	r4, r0
 80024dc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024de:	2214      	movs	r2, #20
 80024e0:	2100      	movs	r1, #0
 80024e2:	a803      	add	r0, sp, #12
 80024e4:	f000 fb68 	bl	8002bb8 <memset>
  if(adcHandle->Instance==ADC1)
 80024e8:	6822      	ldr	r2, [r4, #0]
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_ADC_MspInit+0x58>)
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d11d      	bne.n	800252c <HAL_ADC_MspInit+0x54>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80024f0:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80024f4:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = VBAT_Sense_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBAT_Sense_GPIO_Port, &GPIO_InitStruct);
 80024f8:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 80024fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(VBAT_Sense_GPIO_Port, &GPIO_InitStruct);
 80024fc:	480d      	ldr	r0, [pc, #52]	; (8002534 <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 80024fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002502:	64da      	str	r2, [r3, #76]	; 0x4c
 8002504:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002506:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800250a:	9201      	str	r2, [sp, #4]
 800250c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002510:	f042 0204 	orr.w	r2, r2, #4
 8002514:	64da      	str	r2, [r3, #76]	; 0x4c
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	9302      	str	r3, [sp, #8]
 800251e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VBAT_Sense_Pin;
 8002520:	2304      	movs	r3, #4
 8002522:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002524:	230b      	movs	r3, #11
 8002526:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(VBAT_Sense_GPIO_Port, &GPIO_InitStruct);
 8002528:	f7fe fb74 	bl	8000c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800252c:	b008      	add	sp, #32
 800252e:	bd10      	pop	{r4, pc}
 8002530:	50040000 	.word	0x50040000
 8002534:	48000800 	.word	0x48000800

08002538 <MX_DMA_Init>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <MX_DMA_Init+0x2c>)
 800253a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002542:	6c9b      	ldr	r3, [r3, #72]	; 0x48

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002544:	b082      	sub	sp, #8
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800254c:	9b01      	ldr	r3, [sp, #4]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_DMA_Init+0x30>)
 8002550:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_DMA_Init+0x34>)
 8002554:	2200      	movs	r2, #0
 8002556:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800255e:	601a      	str	r2, [r3, #0]
  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);

}
 8002560:	b002      	add	sp, #8
 8002562:	4770      	bx	lr
 8002564:	40021000 	.word	0x40021000
 8002568:	e000ed00 	.word	0xe000ed00
 800256c:	e000e100 	.word	0xe000e100

08002570 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002572:	2214      	movs	r2, #20
{
 8002574:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002576:	eb0d 0002 	add.w	r0, sp, r2
 800257a:	2100      	movs	r1, #0
 800257c:	f000 fb1c 	bl	8002bb8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002580:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <MX_GPIO_Init+0x144>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HeartBeat_GPIO_Port, HeartBeat_Pin, GPIO_PIN_RESET);
 8002582:	4e4d      	ldr	r6, [pc, #308]	; (80026b8 <MX_GPIO_Init+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002586:	f042 0204 	orr.w	r2, r2, #4
 800258a:	64da      	str	r2, [r3, #76]	; 0x4c
 800258c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800258e:	f002 0204 	and.w	r2, r2, #4
 8002592:	9200      	str	r2, [sp, #0]
 8002594:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002598:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800259c:	64da      	str	r2, [r3, #76]	; 0x4c
 800259e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025a0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80025a4:	9201      	str	r2, [sp, #4]
 80025a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80025b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025b2:	f002 0201 	and.w	r2, r2, #1
 80025b6:	9202      	str	r2, [sp, #8]
 80025b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025bc:	f042 0202 	orr.w	r2, r2, #2
 80025c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80025c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025c4:	f002 0202 	and.w	r2, r2, #2
 80025c8:	9203      	str	r2, [sp, #12]
 80025ca:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025ce:	f042 0208 	orr.w	r2, r2, #8
 80025d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80025d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(HeartBeat_GPIO_Port, HeartBeat_Pin, GPIO_PIN_RESET);
 80025dc:	4630      	mov	r0, r6
 80025de:	2200      	movs	r2, #0
 80025e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(HeartBeat_GPIO_Port, HeartBeat_Pin, GPIO_PIN_RESET);
 80025e6:	f7fe fbe5 	bl	8000db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_Neo_GPIO_Port, Enable_Neo_Pin, GPIO_PIN_RESET);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2110      	movs	r1, #16
 80025ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f2:	f7fe fbdf 	bl	8000db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HeartBeat_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = HeartBeat_Pin;
 80025f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HeartBeat_GPIO_Port, &GPIO_InitStruct);
 80025fe:	a905      	add	r1, sp, #20
 8002600:	4630      	mov	r0, r6
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002602:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = HeartBeat_Pin;
 8002604:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002606:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(HeartBeat_GPIO_Port, &GPIO_InitStruct);
 800260c:	f7fe fb02 	bl	8000c14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4 
 8002610:	f64d 73f8 	movw	r3, #57336	; 0xdff8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002614:	a905      	add	r1, sp, #20
 8002616:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4 
 8002618:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800261a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800261e:	f7fe faf9 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8002622:	230b      	movs	r3, #11
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002624:	a905      	add	r1, sp, #20
 8002626:	4825      	ldr	r0, [pc, #148]	; (80026bc <MX_GPIO_Init+0x14c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8002628:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800262e:	f7fe faf1 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002632:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <MX_GPIO_Init+0x150>)
 8002634:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002638:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800263e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002640:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f7fe fae7 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable_Neo_Pin;
 8002646:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Enable_Neo_GPIO_Port, &GPIO_InitStruct);
 8002648:	a905      	add	r1, sp, #20
 800264a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = Enable_Neo_Pin;
 800264e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002650:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(Enable_Neo_GPIO_Port, &GPIO_InitStruct);
 8002656:	f7fe fadd 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 800265a:	f649 73c0 	movw	r3, #40896	; 0x9fc0
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	a905      	add	r1, sp, #20
 8002660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8002664:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002666:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f7fe fad3 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800266e:	f64f 73f7 	movw	r3, #65527	; 0xfff7
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	a905      	add	r1, sp, #20
 8002674:	4813      	ldr	r0, [pc, #76]	; (80026c4 <MX_GPIO_Init+0x154>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8002676:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002678:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267c:	f7fe faca 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002680:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002682:	a905      	add	r1, sp, #20
 8002684:	4810      	ldr	r0, [pc, #64]	; (80026c8 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002686:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002688:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800268c:	f7fe fac2 	bl	8000c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002690:	4622      	mov	r2, r4
 8002692:	4621      	mov	r1, r4
 8002694:	2006      	movs	r0, #6
 8002696:	f7fe fa65 	bl	8000b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800269a:	2006      	movs	r0, #6
 800269c:	f7fe fa96 	bl	8000bcc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80026a0:	4622      	mov	r2, r4
 80026a2:	4621      	mov	r1, r4
 80026a4:	2007      	movs	r0, #7
 80026a6:	f7fe fa5d 	bl	8000b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80026aa:	2007      	movs	r0, #7
 80026ac:	f7fe fa8e 	bl	8000bcc <HAL_NVIC_EnableIRQ>

}
 80026b0:	b00b      	add	sp, #44	; 0x2c
 80026b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	48000800 	.word	0x48000800
 80026bc:	48001c00 	.word	0x48001c00
 80026c0:	10110000 	.word	0x10110000
 80026c4:	48000400 	.word	0x48000400
 80026c8:	48000c00 	.word	0x48000c00

080026cc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80026cc:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 80026ce:	4812      	ldr	r0, [pc, #72]	; (8002718 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x00707CBB;
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <MX_I2C3_Init+0x50>)
 80026d2:	4913      	ldr	r1, [pc, #76]	; (8002720 <MX_I2C3_Init+0x54>)
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026d4:	2201      	movs	r2, #1
  hi2c3.Init.Timing = 0x00707CBB;
 80026d6:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c3.Init.OwnAddress1 = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026de:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e0:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80026e2:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026e4:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026e6:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026e8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026ea:	f7fe fb75 	bl	8000dd8 <HAL_I2C_Init>
 80026ee:	b108      	cbz	r0, 80026f4 <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 80026f0:	f000 f8ca 	bl	8002888 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026f4:	2100      	movs	r1, #0
 80026f6:	4808      	ldr	r0, [pc, #32]	; (8002718 <MX_I2C3_Init+0x4c>)
 80026f8:	f7fe fbbf 	bl	8000e7a <HAL_I2CEx_ConfigAnalogFilter>
 80026fc:	b108      	cbz	r0, 8002702 <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 80026fe:	f000 f8c3 	bl	8002888 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002702:	2100      	movs	r1, #0
 8002704:	4804      	ldr	r0, [pc, #16]	; (8002718 <MX_I2C3_Init+0x4c>)
 8002706:	f7fe fbde 	bl	8000ec6 <HAL_I2CEx_ConfigDigitalFilter>
 800270a:	b118      	cbz	r0, 8002714 <MX_I2C3_Init+0x48>
  {
    Error_Handler();
  }

}
 800270c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002710:	f000 b8ba 	b.w	8002888 <Error_Handler>
 8002714:	bd08      	pop	{r3, pc}
 8002716:	bf00      	nop
 8002718:	200001c8 	.word	0x200001c8
 800271c:	00707cbb 	.word	0x00707cbb
 8002720:	40005c00 	.word	0x40005c00

08002724 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002724:	b510      	push	{r4, lr}
 8002726:	4604      	mov	r4, r0
 8002728:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272a:	2214      	movs	r2, #20
 800272c:	2100      	movs	r1, #0
 800272e:	a803      	add	r0, sp, #12
 8002730:	f000 fa42 	bl	8002bb8 <memset>
  if(i2cHandle->Instance==I2C3)
 8002734:	6822      	ldr	r2, [r4, #0]
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_I2C_MspInit+0x5c>)
 8002738:	429a      	cmp	r2, r3
 800273a:	d11f      	bne.n	800277c <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273c:	4c11      	ldr	r4, [pc, #68]	; (8002784 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800273e:	4812      	ldr	r0, [pc, #72]	; (8002788 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002740:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002748:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002752:	2212      	movs	r2, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002754:	2303      	movs	r3, #3
 8002756:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002758:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800275c:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800275e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002760:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002762:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002764:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002766:	f7fe fa55 	bl	8000c14 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800276a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800276c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002770:	65a3      	str	r3, [r4, #88]	; 0x58
 8002772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800277c:	b008      	add	sp, #32
 800277e:	bd10      	pop	{r4, pc}
 8002780:	40005c00 	.word	0x40005c00
 8002784:	40021000 	.word	0x40021000
 8002788:	48000800 	.word	0x48000800

0800278c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800278c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002790:	f7fd fece 	bl	8000530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002794:	f7ff fda8 	bl	80022e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002798:	f7ff feea 	bl	8002570 <MX_GPIO_Init>
  MX_DMA_Init();
 800279c:	f7ff fecc 	bl	8002538 <MX_DMA_Init>
  MX_I2C3_Init();
 80027a0:	f7ff ff94 	bl	80026cc <MX_I2C3_Init>
  MX_TIM2_Init();
 80027a4:	f000 f8c4 	bl	8002930 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80027a8:	f000 f968 	bl	8002a7c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80027ac:	f7ff fe56 	bl	800245c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Enable_Neo_GPIO_Port, Enable_Neo_Pin, GPIO_PIN_SET);
 80027b0:	2201      	movs	r2, #1
 80027b2:	2110      	movs	r1, #16
 80027b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b8:	f7fe fafc 	bl	8000db4 <HAL_GPIO_WritePin>
  HeartBeatOff();
 80027bc:	f7ff fe4c 	bl	8002458 <HeartBeatOff>

  HAL_Delay(100);
 80027c0:	2064      	movs	r0, #100	; 0x64
 80027c2:	f7fd fed7 	bl	8000574 <HAL_Delay>

  led_init();
 80027c6:	f7ff f9ef 	bl	8001ba8 <led_init>
  led_set_color_all(0x00, 0x00, 0x00);
 80027ca:	2200      	movs	r2, #0
 80027cc:	4611      	mov	r1, r2
 80027ce:	4610      	mov	r0, r2
 80027d0:	f7ff fc4e 	bl	8002070 <led_set_color_all>
  led_update(1);
 80027d4:	2001      	movs	r0, #1
 80027d6:	f7ff fc59 	bl	800208c <led_update>
//	  {
//		  HAL_Delay(100);
//		  HeartBeatToggle();
//	  }

	  if(buttonPressed)
 80027da:	4f28      	ldr	r7, [pc, #160]	; (800287c <main+0xf0>)
  PowerUpSword();
 80027dc:	f7ff fd38 	bl	8002250 <PowerUpSword>
  uint32_t RainbowCounter = 0;
 80027e0:	2400      	movs	r4, #0
 80027e2:	46b8      	mov	r8, r7
	  	  {
	  		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 80027e4:	f04f 0901 	mov.w	r9, #1
	  if(buttonPressed)
 80027e8:	783b      	ldrb	r3, [r7, #0]
 80027ea:	bbab      	cbnz	r3, 8002858 <main+0xcc>

	  		  amountButtonPressed = 0;
	  		  buttonPressed = 0;
	  	  }

	  if(GetNeoState() == NEO_RAINBOW)
 80027ec:	f7ff f9d6 	bl	8001b9c <GetNeoState>
 80027f0:	2808      	cmp	r0, #8
 80027f2:	d10f      	bne.n	8002814 <main+0x88>
	  {
		  HeartBeatOff();
 80027f4:	f7ff fe30 	bl	8002458 <HeartBeatOff>
		  RainBow(RainbowCounter);
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff fab1 	bl	8001d60 <RainBow>
		  led_update(1);
 80027fe:	2001      	movs	r0, #1
 8002800:	f7ff fc44 	bl	800208c <led_update>
		  RainbowCounter++;
 8002804:	3401      	adds	r4, #1
		  HAL_Delay(50);
 8002806:	2032      	movs	r0, #50	; 0x32
 8002808:	f7fd feb4 	bl	8000574 <HAL_Delay>
		  if(RainbowCounter > 1000)
		  {
			  RainbowCounter = 0;
 800280c:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002810:	bf88      	it	hi
 8002812:	2400      	movhi	r4, #0
//
//	  		  isSleeping = 0;
//	  		  NeoStateMachine(GetNeoState());
//	  	  }

	  	  HAL_Delay(1);
 8002814:	2001      	movs	r0, #1
 8002816:	f7fd fead 	bl	8000574 <HAL_Delay>
	  if(buttonPressed)
 800281a:	e7e5      	b.n	80027e8 <main+0x5c>
	  			  amountButtonPressed++;
 800281c:	682b      	ldr	r3, [r5, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	602b      	str	r3, [r5, #0]
	  			  HAL_Delay(1);
 8002822:	f7fd fea7 	bl	8000574 <HAL_Delay>
	  		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8002826:	2101      	movs	r1, #1
 8002828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800282c:	f7fe fabc 	bl	8000da8 <HAL_GPIO_ReadPin>
 8002830:	2801      	cmp	r0, #1
 8002832:	d0f3      	beq.n	800281c <main+0x90>
	  		HeartBeatOff();
 8002834:	f7ff fe10 	bl	8002458 <HeartBeatOff>
	  		  if(amountButtonPressed > 1000)
 8002838:	682b      	ldr	r3, [r5, #0]
 800283a:	4e11      	ldr	r6, [pc, #68]	; (8002880 <main+0xf4>)
 800283c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002840:	d90c      	bls.n	800285c <main+0xd0>
	  			  isSleeping = 1;
 8002842:	f886 9000 	strb.w	r9, [r6]
	  			  PowerDownSword();
 8002846:	f7ff fd19 	bl	800227c <PowerDownSword>
	  			  SystemSleepAndWakeup();
 800284a:	f7ff fde3 	bl	8002414 <SystemSleepAndWakeup>
	  		  amountButtonPressed = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	602b      	str	r3, [r5, #0]
	  		  buttonPressed = 0;
 8002852:	f888 3000 	strb.w	r3, [r8]
 8002856:	e7c9      	b.n	80027ec <main+0x60>
 8002858:	4d0a      	ldr	r5, [pc, #40]	; (8002884 <main+0xf8>)
 800285a:	e7e4      	b.n	8002826 <main+0x9a>
	  			  if(isSleeping)
 800285c:	7833      	ldrb	r3, [r6, #0]
 800285e:	b133      	cbz	r3, 800286e <main+0xe2>
	  				HeartBeatOff();
 8002860:	f7ff fdfa 	bl	8002458 <HeartBeatOff>
	  				PowerUpSword();
 8002864:	f7ff fcf4 	bl	8002250 <PowerUpSword>
	  			  isSleeping = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	7033      	strb	r3, [r6, #0]
 800286c:	e7ef      	b.n	800284e <main+0xc2>
	  				HeartBeatOff();
 800286e:	f7ff fdf3 	bl	8002458 <HeartBeatOff>
	  				NeoStateMachine(GetNeoState());
 8002872:	f7ff f993 	bl	8001b9c <GetNeoState>
 8002876:	f7ff fcaf 	bl	80021d8 <NeoStateMachine>
 800287a:	e7f5      	b.n	8002868 <main+0xdc>
 800287c:	20000158 	.word	0x20000158
 8002880:	20000214 	.word	0x20000214
 8002884:	20000154 	.word	0x20000154

08002888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002888:	4770      	bx	lr
	...

0800288c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_MspInit+0x2c>)
 800288e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	661a      	str	r2, [r3, #96]	; 0x60
 8002896:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002898:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	f002 0201 	and.w	r2, r2, #1
 800289e:	9200      	str	r2, [sp, #0]
 80028a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028a8:	659a      	str	r2, [r3, #88]	; 0x58
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b4:	b002      	add	sp, #8
 80028b6:	4770      	bx	lr
 80028b8:	40021000 	.word	0x40021000

080028bc <NMI_Handler>:
 80028bc:	4770      	bx	lr

080028be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028be:	e7fe      	b.n	80028be <HardFault_Handler>

080028c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c0:	e7fe      	b.n	80028c0 <MemManage_Handler>

080028c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c2:	e7fe      	b.n	80028c2 <BusFault_Handler>

080028c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c4:	e7fe      	b.n	80028c4 <UsageFault_Handler>

080028c6 <SVC_Handler>:
 80028c6:	4770      	bx	lr

080028c8 <DebugMon_Handler>:
 80028c8:	4770      	bx	lr

080028ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ca:	4770      	bx	lr

080028cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028cc:	f7fd be40 	b.w	8000550 <HAL_IncTick>

080028d0 <EXTI0_IRQHandler>:
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	buttonPressed = 1;
 80028d0:	4b02      	ldr	r3, [pc, #8]	; (80028dc <EXTI0_IRQHandler+0xc>)
 80028d2:	2001      	movs	r0, #1
 80028d4:	7018      	strb	r0, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028d6:	f7fe ba73 	b.w	8000dc0 <HAL_GPIO_EXTI_IRQHandler>
 80028da:	bf00      	nop
 80028dc:	20000158 	.word	0x20000158

080028e0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80028e0:	2002      	movs	r0, #2
 80028e2:	f7fe ba6d 	b.w	8000dc0 <HAL_GPIO_EXTI_IRQHandler>
	...

080028e8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e8:	490f      	ldr	r1, [pc, #60]	; (8002928 <SystemInit+0x40>)
 80028ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80028ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80028f6:	4b0d      	ldr	r3, [pc, #52]	; (800292c <SystemInit+0x44>)
 80028f8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80028fa:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002902:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800290a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800290e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002914:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800291c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800291e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002924:	608b      	str	r3, [r1, #8]
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00
 800292c:	40021000 	.word	0x40021000

08002930 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b097      	sub	sp, #92	; 0x5c
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002934:	2720      	movs	r7, #32
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002936:	2214      	movs	r2, #20
 8002938:	2100      	movs	r1, #0
 800293a:	a803      	add	r0, sp, #12
 800293c:	f000 f93c 	bl	8002bb8 <memset>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002940:	4e4b      	ldr	r6, [pc, #300]	; (8002a70 <MX_TIM2_Init+0x140>)
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002942:	463a      	mov	r2, r7
 8002944:	2100      	movs	r1, #0
 8002946:	a80e      	add	r0, sp, #56	; 0x38
 8002948:	f000 f936 	bl	8002bb8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	2218      	movs	r2, #24
 800294e:	2100      	movs	r1, #0
 8002950:	eb0d 0007 	add.w	r0, sp, r7
 8002954:	f000 f930 	bl	8002bb8 <memset>
 8002958:	6db3      	ldr	r3, [r6, #88]	; 0x58
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800295a:	4846      	ldr	r0, [pc, #280]	; (8002a74 <MX_TIM2_Init+0x144>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	65b3      	str	r3, [r6, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002962:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800296a:	9b02      	ldr	r3, [sp, #8]
 800296c:	6803      	ldr	r3, [r0, #0]
 800296e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8002972:	fa92 f2a2 	rbit	r2, r2
 8002976:	2104      	movs	r1, #4
 8002978:	fab2 f282 	clz	r2, r2
 800297c:	fa01 f202 	lsl.w	r2, r1, r2
 8002980:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002984:	4313      	orrs	r3, r2
 8002986:	6003      	str	r3, [r0, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8002988:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <MX_TIM2_Init+0x148>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002990:	f022 0210 	bic.w	r2, r2, #16
 8002994:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800299c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	f022 0220 	bic.w	r2, r2, #32
 80029a4:	601a      	str	r2, [r3, #0]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80029c8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80029cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_WORD);

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_WORD);

  TIM_InitStruct.Prescaler = 0;
 80029d0:	2500      	movs	r5, #0
 80029d2:	601a      	str	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 0;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80029d4:	a903      	add	r1, sp, #12
 80029d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_InitStruct.Prescaler = 0;
 80029da:	f8ad 500c 	strh.w	r5, [sp, #12]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80029de:	9504      	str	r5, [sp, #16]
  TIM_InitStruct.Autoreload = 0;
 80029e0:	9505      	str	r5, [sp, #20]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80029e2:	9506      	str	r5, [sp, #24]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80029e4:	f7fe fe36 	bl	8001654 <LL_TIM_Init>
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ee:	6023      	str	r3, [r4, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80029f0:	69a3      	ldr	r3, [r4, #24]
 80029f2:	f043 0308 	orr.w	r3, r3, #8
 80029f6:	61a3      	str	r3, [r4, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.CompareValue = 0;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80029f8:	aa0e      	add	r2, sp, #56	; 0x38
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80029fa:	2360      	movs	r3, #96	; 0x60
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80029fc:	2101      	movs	r1, #1
 80029fe:	4620      	mov	r0, r4
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002a00:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002a02:	950f      	str	r5, [sp, #60]	; 0x3c
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002a04:	9510      	str	r5, [sp, #64]	; 0x40
  TIM_OC_InitStruct.CompareValue = 0;
 8002a06:	9511      	str	r5, [sp, #68]	; 0x44
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002a08:	9512      	str	r5, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002a0a:	f7fe fe65 	bl	80016d8 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002a0e:	69a3      	ldr	r3, [r4, #24]
 8002a10:	f023 0304 	bic.w	r3, r3, #4
 8002a14:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8002a16:	68a3      	ldr	r3, [r4, #8]
 8002a18:	f023 0308 	bic.w	r3, r3, #8
 8002a1c:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8002a1e:	68a3      	ldr	r3, [r4, #8]
 8002a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a24:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8002a26:	68a3      	ldr	r3, [r4, #8]
 8002a28:	f423 433f 	bic.w	r3, r3, #48896	; 0xbf00
 8002a2c:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002a2e:	6863      	ldr	r3, [r4, #4]
 8002a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a34:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002a36:	68a3      	ldr	r3, [r4, #8]
 8002a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a3c:	60a3      	str	r3, [r4, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a3e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	64f3      	str	r3, [r6, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a46:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  LL_TIM_DisableMasterSlaveMode(TIM2);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002a48:	9708      	str	r7, [sp, #32]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002a50:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a52:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a54:	2302      	movs	r3, #2
 8002a56:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	eb0d 0107 	add.w	r1, sp, r7
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a5c:	2301      	movs	r3, #1
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a62:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a64:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a66:	930d      	str	r3, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f7fe fd55 	bl	8001516 <LL_GPIO_Init>

}
 8002a6c:	b017      	add	sp, #92	; 0x5c
 8002a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a70:	40021000 	.word	0x40021000
 8002a74:	400200a8 	.word	0x400200a8
 8002a78:	40020058 	.word	0x40020058

08002a7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a7c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8002a7e:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <MX_USART2_UART_Init+0x38>)
 8002a82:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002a86:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a8a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a90:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a92:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a94:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a96:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a98:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a9a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a9c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a9e:	f7fe fd0c 	bl	80014ba <HAL_UART_Init>
 8002aa2:	b118      	cbz	r0, 8002aac <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8002aa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002aa8:	f7ff beee 	b.w	8002888 <Error_Handler>
 8002aac:	bd08      	pop	{r3, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000218 	.word	0x20000218
 8002ab4:	40004400 	.word	0x40004400

08002ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	4604      	mov	r4, r0
 8002abc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abe:	2214      	movs	r2, #20
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	a803      	add	r0, sp, #12
 8002ac4:	f000 f878 	bl	8002bb8 <memset>
  if(uartHandle->Instance==USART2)
 8002ac8:	6822      	ldr	r2, [r4, #0]
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_UART_MspInit+0x60>)
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d120      	bne.n	8002b12 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad4:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ad8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002adc:	659a      	str	r2, [r3, #88]	; 0x58
 8002ade:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ae0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002ae4:	9201      	str	r2, [sp, #4]
 8002ae6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	64da      	str	r2, [r3, #76]	; 0x4c
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	9302      	str	r3, [sp, #8]
 8002af8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002afa:	230c      	movs	r3, #12
 8002afc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0e:	f7fe f881 	bl	8000c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b12:	b008      	add	sp, #32
 8002b14:	bd10      	pop	{r4, pc}
 8002b16:	bf00      	nop
 8002b18:	40004400 	.word	0x40004400

08002b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b54 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b22:	e003      	b.n	8002b2c <LoopCopyDataInit>

08002b24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b2a:	3104      	adds	r1, #4

08002b2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b2c:	480b      	ldr	r0, [pc, #44]	; (8002b5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b34:	d3f6      	bcc.n	8002b24 <CopyDataInit>
	ldr	r2, =_sbss
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b38:	e002      	b.n	8002b40 <LoopFillZerobss>

08002b3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b3c:	f842 3b04 	str.w	r3, [r2], #4

08002b40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <LoopForever+0x16>)
	cmp	r2, r3
 8002b42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b44:	d3f9      	bcc.n	8002b3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b46:	f7ff fecf 	bl	80028e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b4a:	f000 f811 	bl	8002b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b4e:	f7ff fe1d 	bl	800278c <main>

08002b52 <LoopForever>:

LoopForever:
    b LoopForever
 8002b52:	e7fe      	b.n	8002b52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b54:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8002b58:	08002c3c 	.word	0x08002c3c
	ldr	r0, =_sdata
 8002b5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b60:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002b64:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002b68:	20000298 	.word	0x20000298

08002b6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC1_IRQHandler>
	...

08002b70 <__libc_init_array>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	4e0d      	ldr	r6, [pc, #52]	; (8002ba8 <__libc_init_array+0x38>)
 8002b74:	4c0d      	ldr	r4, [pc, #52]	; (8002bac <__libc_init_array+0x3c>)
 8002b76:	1ba4      	subs	r4, r4, r6
 8002b78:	10a4      	asrs	r4, r4, #2
 8002b7a:	2500      	movs	r5, #0
 8002b7c:	42a5      	cmp	r5, r4
 8002b7e:	d109      	bne.n	8002b94 <__libc_init_array+0x24>
 8002b80:	4e0b      	ldr	r6, [pc, #44]	; (8002bb0 <__libc_init_array+0x40>)
 8002b82:	4c0c      	ldr	r4, [pc, #48]	; (8002bb4 <__libc_init_array+0x44>)
 8002b84:	f000 f820 	bl	8002bc8 <_init>
 8002b88:	1ba4      	subs	r4, r4, r6
 8002b8a:	10a4      	asrs	r4, r4, #2
 8002b8c:	2500      	movs	r5, #0
 8002b8e:	42a5      	cmp	r5, r4
 8002b90:	d105      	bne.n	8002b9e <__libc_init_array+0x2e>
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
 8002b94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b98:	4798      	blx	r3
 8002b9a:	3501      	adds	r5, #1
 8002b9c:	e7ee      	b.n	8002b7c <__libc_init_array+0xc>
 8002b9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ba2:	4798      	blx	r3
 8002ba4:	3501      	adds	r5, #1
 8002ba6:	e7f2      	b.n	8002b8e <__libc_init_array+0x1e>
 8002ba8:	08002c34 	.word	0x08002c34
 8002bac:	08002c34 	.word	0x08002c34
 8002bb0:	08002c34 	.word	0x08002c34
 8002bb4:	08002c38 	.word	0x08002c38

08002bb8 <memset>:
 8002bb8:	4402      	add	r2, r0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <memset+0xa>
 8002bc0:	4770      	bx	lr
 8002bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bc6:	e7f9      	b.n	8002bbc <memset+0x4>

08002bc8 <_init>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	bf00      	nop
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr

08002bd4 <_fini>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr
