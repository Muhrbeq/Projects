
SPI_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c9c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001e30  08001e30  00011e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001e94  08001e94  00011e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001e98  08001e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000184  2000000c  08001ea8  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000190  08001ea8  00020190  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d0b7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002033  00000000  00000000  0002d0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005818  00000000  00000000  0002f126  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000958  00000000  00000000  00034940  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ad8  00000000  00000000  00035298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004d04  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003667  00000000  00000000  0003aa74  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003e0db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000018d0  00000000  00000000  0003e158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001e18 	.word	0x08001e18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001e18 	.word	0x08001e18

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_InitTick+0x40>)
{
 80004e8:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80004ea:	6818      	ldr	r0, [r3, #0]
 80004ec:	b908      	cbnz	r0, 80004f2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80004f2:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_InitTick+0x44>)
 80004f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f8:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fc:	6810      	ldr	r0, [r2, #0]
 80004fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8000502:	f000 f87d 	bl	8000600 <HAL_SYSTICK_Config>
 8000506:	4604      	mov	r4, r0
 8000508:	2800      	cmp	r0, #0
 800050a:	d1f0      	bne.n	80004ee <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050c:	2d0f      	cmp	r5, #15
 800050e:	d8ee      	bhi.n	80004ee <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000510:	4602      	mov	r2, r0
 8000512:	4629      	mov	r1, r5
 8000514:	f04f 30ff 	mov.w	r0, #4294967295
 8000518:	f000 f83e 	bl	8000598 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <HAL_InitTick+0x48>)
 800051e:	4620      	mov	r0, r4
 8000520:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000000 	.word	0x20000000
 8000528:	20000008 	.word	0x20000008
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000532:	2003      	movs	r0, #3
 8000534:	f000 f81e 	bl	8000574 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000538:	2000      	movs	r0, #0
 800053a:	f7ff ffd3 	bl	80004e4 <HAL_InitTick>
 800053e:	4604      	mov	r4, r0
 8000540:	b918      	cbnz	r0, 800054a <HAL_Init+0x1a>
    HAL_MspInit();
 8000542:	f001 fb43 	bl	8001bcc <HAL_MspInit>
}
 8000546:	4620      	mov	r0, r4
 8000548:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800054a:	2401      	movs	r4, #1
 800054c:	e7fb      	b.n	8000546 <HAL_Init+0x16>
	...

08000550 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <HAL_IncTick+0x10>)
 8000552:	4904      	ldr	r1, [pc, #16]	; (8000564 <HAL_IncTick+0x14>)
 8000554:	6813      	ldr	r3, [r2, #0]
 8000556:	6809      	ldr	r1, [r1, #0]
 8000558:	440b      	add	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <HAL_GetTick+0x8>)
 800056a:	6818      	ldr	r0, [r3, #0]
}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028

08000574 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000576:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000578:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800057c:	041b      	lsls	r3, r3, #16
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000584:	0200      	lsls	r0, r0, #8
 8000586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800058e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000590:	60d3      	str	r3, [r2, #12]
 8000592:	4770      	bx	lr
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	68dc      	ldr	r4, [r3, #12]
 800059e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	bf28      	it	cs
 80005ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	f04f 0501 	mov.w	r5, #1
 80005b4:	fa05 f303 	lsl.w	r3, r5, r3
 80005b8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005bc:	bf8c      	ite	hi
 80005be:	3c03      	subhi	r4, #3
 80005c0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c2:	4019      	ands	r1, r3
 80005c4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c6:	fa05 f404 	lsl.w	r4, r5, r4
 80005ca:	3c01      	subs	r4, #1
 80005cc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	ea42 0201 	orr.w	r2, r2, r1
 80005d4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	bfad      	iteet	ge
 80005da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	f000 000f 	andlt.w	r0, r0, #15
 80005e2:	4b06      	ldrlt	r3, [pc, #24]	; (80005fc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	bfb5      	itete	lt
 80005ea:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ee:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005f4:	bd30      	pop	{r4, r5, pc}
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	e000ed14 	.word	0xe000ed14

08000600 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000600:	3801      	subs	r0, #1
 8000602:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000606:	d20a      	bcs.n	800061e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800060c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	21f0      	movs	r1, #240	; 0xf0
 8000610:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000614:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000616:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000618:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800061e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000e010 	.word	0xe000e010
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800062c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000630:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000632:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000634:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80007bc <HAL_GPIO_Init+0x190>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000638:	4a5e      	ldr	r2, [pc, #376]	; (80007b4 <HAL_GPIO_Init+0x188>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800063a:	9301      	str	r3, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800063c:	f04f 0903 	mov.w	r9, #3
  uint32_t position = 0x00u;
 8000640:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000642:	9c01      	ldr	r4, [sp, #4]
 8000644:	40dc      	lsrs	r4, r3
 8000646:	d102      	bne.n	800064e <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8000648:	b005      	add	sp, #20
 800064a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800064e:	2401      	movs	r4, #1
 8000650:	fa04 fc03 	lsl.w	ip, r4, r3
    if (iocurrent != 0x00u)
 8000654:	9c01      	ldr	r4, [sp, #4]
 8000656:	ea14 050c 	ands.w	r5, r4, ip
 800065a:	f000 80a0 	beq.w	800079e <HAL_GPIO_Init+0x172>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800065e:	684c      	ldr	r4, [r1, #4]
 8000660:	f024 0e10 	bic.w	lr, r4, #16
 8000664:	f10e 36ff 	add.w	r6, lr, #4294967295
 8000668:	2e01      	cmp	r6, #1
 800066a:	ea4f 0643 	mov.w	r6, r3, lsl #1
 800066e:	d812      	bhi.n	8000696 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8000670:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000672:	fa09 fa06 	lsl.w	sl, r9, r6
 8000676:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 800067a:	68cf      	ldr	r7, [r1, #12]
 800067c:	40b7      	lsls	r7, r6
 800067e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000682:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000684:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000686:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800068a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800068e:	409f      	lsls	r7, r3
 8000690:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000694:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000696:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000698:	fa09 fc06 	lsl.w	ip, r9, r6
 800069c:	ea6f 0c0c 	mvn.w	ip, ip
 80006a0:	ea07 0a0c 	and.w	sl, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006a4:	688f      	ldr	r7, [r1, #8]
 80006a6:	40b7      	lsls	r7, r6
 80006a8:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ac:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 80006b0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006b2:	d116      	bne.n	80006e2 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3u];
 80006b4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006b8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006bc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80006c0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006c4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006c8:	f04f 0e0f 	mov.w	lr, #15
 80006cc:	fa0e fe0b 	lsl.w	lr, lr, fp
 80006d0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006d4:	690f      	ldr	r7, [r1, #16]
 80006d6:	fa07 f70b 	lsl.w	r7, r7, fp
 80006da:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80006de:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80006e2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006e4:	ea0c 0c07 	and.w	ip, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006e8:	f004 0703 	and.w	r7, r4, #3
 80006ec:	fa07 f606 	lsl.w	r6, r7, r6
 80006f0:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 80006f4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006f6:	00e6      	lsls	r6, r4, #3
 80006f8:	d551      	bpl.n	800079e <HAL_GPIO_Init+0x172>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80006fe:	f046 0601 	orr.w	r6, r6, #1
 8000702:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 8000706:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 800070a:	f023 0703 	bic.w	r7, r3, #3
 800070e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000712:	f006 0601 	and.w	r6, r6, #1
 8000716:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800071a:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800071c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000720:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000722:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000724:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000728:	f04f 0e0f 	mov.w	lr, #15
 800072c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000730:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000734:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000738:	d033      	beq.n	80007a2 <HAL_GPIO_Init+0x176>
 800073a:	4e1f      	ldr	r6, [pc, #124]	; (80007b8 <HAL_GPIO_Init+0x18c>)
 800073c:	42b0      	cmp	r0, r6
 800073e:	d032      	beq.n	80007a6 <HAL_GPIO_Init+0x17a>
 8000740:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000744:	42b0      	cmp	r0, r6
 8000746:	d030      	beq.n	80007aa <HAL_GPIO_Init+0x17e>
 8000748:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800074c:	42b0      	cmp	r0, r6
 800074e:	d02e      	beq.n	80007ae <HAL_GPIO_Init+0x182>
 8000750:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000754:	42b0      	cmp	r0, r6
 8000756:	bf14      	ite	ne
 8000758:	2607      	movne	r6, #7
 800075a:	2604      	moveq	r6, #4
 800075c:	fa06 f60c 	lsl.w	r6, r6, ip
 8000760:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000764:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000766:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 8000768:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800076a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800076e:	bf0c      	ite	eq
 8000770:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000772:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000774:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000776:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000778:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800077c:	bf0c      	ite	eq
 800077e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000780:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000782:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000784:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000786:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800078a:	bf0c      	ite	eq
 800078c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800078e:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000790:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000792:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000794:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000796:	bf54      	ite	pl
 8000798:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800079a:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 800079c:	60d6      	str	r6, [r2, #12]
    position++;
 800079e:	3301      	adds	r3, #1
 80007a0:	e74f      	b.n	8000642 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007a2:	2600      	movs	r6, #0
 80007a4:	e7da      	b.n	800075c <HAL_GPIO_Init+0x130>
 80007a6:	2601      	movs	r6, #1
 80007a8:	e7d8      	b.n	800075c <HAL_GPIO_Init+0x130>
 80007aa:	2602      	movs	r6, #2
 80007ac:	e7d6      	b.n	800075c <HAL_GPIO_Init+0x130>
 80007ae:	2603      	movs	r6, #3
 80007b0:	e7d4      	b.n	800075c <HAL_GPIO_Init+0x130>
 80007b2:	bf00      	nop
 80007b4:	40010400 	.word	0x40010400
 80007b8:	48000400 	.word	0x48000400
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007c0:	b10a      	cbz	r2, 80007c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007c2:	6181      	str	r1, [r0, #24]
 80007c4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007c6:	6281      	str	r1, [r0, #40]	; 0x28
 80007c8:	4770      	bx	lr
	...

080007cc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80007cc:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <HAL_PWREx_GetVoltageRange+0xc>)
 80007ce:	6818      	ldr	r0, [r3, #0]
#endif
}
 80007d0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40007000 	.word	0x40007000

080007dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007de:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007e4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007e8:	d11c      	bne.n	8000824 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007ea:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80007ee:	d015      	beq.n	800081c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80007f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007fa:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80007fc:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80007fe:	6811      	ldr	r1, [r2, #0]
 8000800:	2232      	movs	r2, #50	; 0x32
 8000802:	434a      	muls	r2, r1
 8000804:	490f      	ldr	r1, [pc, #60]	; (8000844 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000806:	fbb2 f2f1 	udiv	r2, r2, r1
 800080a:	4619      	mov	r1, r3
 800080c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800080e:	6958      	ldr	r0, [r3, #20]
 8000810:	0540      	lsls	r0, r0, #21
 8000812:	d500      	bpl.n	8000816 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000814:	b922      	cbnz	r2, 8000820 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000816:	694b      	ldr	r3, [r1, #20]
 8000818:	055b      	lsls	r3, r3, #21
 800081a:	d40d      	bmi.n	8000838 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800081c:	2000      	movs	r0, #0
 800081e:	4770      	bx	lr
        wait_loop_index--;
 8000820:	3a01      	subs	r2, #1
 8000822:	e7f4      	b.n	800080e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000824:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000828:	bf1f      	itttt	ne
 800082a:	681a      	ldrne	r2, [r3, #0]
 800082c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000830:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000834:	601a      	strne	r2, [r3, #0]
 8000836:	e7f1      	b.n	800081c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000838:	2003      	movs	r0, #3
}
 800083a:	4770      	bx	lr
 800083c:	40007000 	.word	0x40007000
 8000840:	20000008 	.word	0x20000008
 8000844:	000f4240 	.word	0x000f4240

08000848 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000848:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800084a:	4d1e      	ldr	r5, [pc, #120]	; (80008c4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800084c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800084e:	00da      	lsls	r2, r3, #3
{
 8000850:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000852:	d518      	bpl.n	8000886 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000854:	f7ff ffba 	bl	80007cc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000858:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800085c:	d123      	bne.n	80008a6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800085e:	2c80      	cmp	r4, #128	; 0x80
 8000860:	d929      	bls.n	80008b6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000862:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000864:	bf8c      	ite	hi
 8000866:	2002      	movhi	r0, #2
 8000868:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800086c:	6813      	ldr	r3, [r2, #0]
 800086e:	f023 0307 	bic.w	r3, r3, #7
 8000872:	4303      	orrs	r3, r0
 8000874:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000876:	6813      	ldr	r3, [r2, #0]
 8000878:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800087c:	1a18      	subs	r0, r3, r0
 800087e:	bf18      	it	ne
 8000880:	2001      	movne	r0, #1
 8000882:	b003      	add	sp, #12
 8000884:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	65ab      	str	r3, [r5, #88]	; 0x58
 800088e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000898:	f7ff ff98 	bl	80007cc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800089c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800089e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80008a4:	e7d8      	b.n	8000858 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80008a6:	2c80      	cmp	r4, #128	; 0x80
 80008a8:	d807      	bhi.n	80008ba <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80008aa:	d008      	beq.n	80008be <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80008ac:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80008b0:	4258      	negs	r0, r3
 80008b2:	4158      	adcs	r0, r3
 80008b4:	e7d9      	b.n	800086a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80008b6:	2000      	movs	r0, #0
 80008b8:	e7d7      	b.n	800086a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80008ba:	2003      	movs	r0, #3
 80008bc:	e7d5      	b.n	800086a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80008be:	2002      	movs	r0, #2
 80008c0:	e7d3      	b.n	800086a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <HAL_RCC_GetSysClockFreq+0x8c>)
 80008ce:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008d0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80008d2:	f012 020c 	ands.w	r2, r2, #12
 80008d6:	d005      	beq.n	80008e4 <HAL_RCC_GetSysClockFreq+0x18>
 80008d8:	2a0c      	cmp	r2, #12
 80008da:	d115      	bne.n	8000908 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008dc:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80008e0:	2901      	cmp	r1, #1
 80008e2:	d118      	bne.n	8000916 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80008e4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80008e6:	481d      	ldr	r0, [pc, #116]	; (800095c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80008e8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80008ea:	bf55      	itete	pl
 80008ec:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80008f0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80008f2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80008f6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80008fa:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80008fe:	b34a      	cbz	r2, 8000954 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000900:	2a0c      	cmp	r2, #12
 8000902:	d009      	beq.n	8000918 <HAL_RCC_GetSysClockFreq+0x4c>
 8000904:	2000      	movs	r0, #0
  return sysclockfreq;
 8000906:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000908:	2a04      	cmp	r2, #4
 800090a:	d022      	beq.n	8000952 <HAL_RCC_GetSysClockFreq+0x86>
 800090c:	2a08      	cmp	r2, #8
 800090e:	4814      	ldr	r0, [pc, #80]	; (8000960 <HAL_RCC_GetSysClockFreq+0x94>)
 8000910:	bf18      	it	ne
 8000912:	2000      	movne	r0, #0
 8000914:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000916:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800091e:	2a02      	cmp	r2, #2
 8000920:	d015      	beq.n	800094e <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8000922:	490f      	ldr	r1, [pc, #60]	; (8000960 <HAL_RCC_GetSysClockFreq+0x94>)
 8000924:	2a03      	cmp	r2, #3
 8000926:	bf08      	it	eq
 8000928:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800092a:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800092c:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000934:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000938:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800093c:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800093e:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000940:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000942:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000944:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8000948:	fbb0 f0f3 	udiv	r0, r0, r3
 800094c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <HAL_RCC_GetSysClockFreq+0x98>)
 8000950:	e7eb      	b.n	800092a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000
 800095c:	08001e5c 	.word	0x08001e5c
 8000960:	007a1200 	.word	0x007a1200
 8000964:	00f42400 	.word	0x00f42400

08000968 <HAL_RCC_OscConfig>:
{
 8000968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800096c:	4605      	mov	r5, r0
 800096e:	b908      	cbnz	r0, 8000974 <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 8000970:	2001      	movs	r0, #1
 8000972:	e047      	b.n	8000a04 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000974:	4c9f      	ldr	r4, [pc, #636]	; (8000bf4 <HAL_RCC_OscConfig+0x28c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000976:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000978:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800097a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800097c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800097e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000982:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000986:	d575      	bpl.n	8000a74 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000988:	b11e      	cbz	r6, 8000992 <HAL_RCC_OscConfig+0x2a>
 800098a:	2e0c      	cmp	r6, #12
 800098c:	d154      	bne.n	8000a38 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800098e:	2f01      	cmp	r7, #1
 8000990:	d152      	bne.n	8000a38 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000992:	6823      	ldr	r3, [r4, #0]
 8000994:	0798      	lsls	r0, r3, #30
 8000996:	d502      	bpl.n	800099e <HAL_RCC_OscConfig+0x36>
 8000998:	69ab      	ldr	r3, [r5, #24]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0e8      	beq.n	8000970 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800099e:	6823      	ldr	r3, [r4, #0]
 80009a0:	6a28      	ldr	r0, [r5, #32]
 80009a2:	0719      	lsls	r1, r3, #28
 80009a4:	bf56      	itet	pl
 80009a6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80009aa:	6823      	ldrmi	r3, [r4, #0]
 80009ac:	091b      	lsrpl	r3, r3, #4
 80009ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009b2:	4283      	cmp	r3, r0
 80009b4:	d229      	bcs.n	8000a0a <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009b6:	f7ff ff47 	bl	8000848 <RCC_SetFlashLatencyFromMSIRange>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1d8      	bne.n	8000970 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6023      	str	r3, [r4, #0]
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	6a2a      	ldr	r2, [r5, #32]
 80009ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009ce:	4313      	orrs	r3, r2
 80009d0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009d2:	6863      	ldr	r3, [r4, #4]
 80009d4:	69ea      	ldr	r2, [r5, #28]
 80009d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80009da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009de:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80009e0:	f7ff ff74 	bl	80008cc <HAL_RCC_GetSysClockFreq>
 80009e4:	68a3      	ldr	r3, [r4, #8]
 80009e6:	4a84      	ldr	r2, [pc, #528]	; (8000bf8 <HAL_RCC_OscConfig+0x290>)
 80009e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	f003 031f 	and.w	r3, r3, #31
 80009f2:	40d8      	lsrs	r0, r3
 80009f4:	4b81      	ldr	r3, [pc, #516]	; (8000bfc <HAL_RCC_OscConfig+0x294>)
 80009f6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80009f8:	4b81      	ldr	r3, [pc, #516]	; (8000c00 <HAL_RCC_OscConfig+0x298>)
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	f7ff fd72 	bl	80004e4 <HAL_InitTick>
        if(status != HAL_OK)
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d037      	beq.n	8000a74 <HAL_RCC_OscConfig+0x10c>
}
 8000a04:	b003      	add	sp, #12
 8000a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6023      	str	r3, [r4, #0]
 8000a12:	6823      	ldr	r3, [r4, #0]
 8000a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a18:	4303      	orrs	r3, r0
 8000a1a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a1c:	6863      	ldr	r3, [r4, #4]
 8000a1e:	69ea      	ldr	r2, [r5, #28]
 8000a20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a28:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d1d8      	bne.n	80009e0 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a2e:	f7ff ff0b 	bl	8000848 <RCC_SetFlashLatencyFromMSIRange>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d0d4      	beq.n	80009e0 <HAL_RCC_OscConfig+0x78>
 8000a36:	e79b      	b.n	8000970 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a38:	69ab      	ldr	r3, [r5, #24]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d03a      	beq.n	8000ab4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a46:	f7ff fd8f 	bl	8000568 <HAL_GetTick>
 8000a4a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	079a      	lsls	r2, r3, #30
 8000a50:	d528      	bpl.n	8000aa4 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a52:	6823      	ldr	r3, [r4, #0]
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6023      	str	r3, [r4, #0]
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	6a2a      	ldr	r2, [r5, #32]
 8000a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a62:	4313      	orrs	r3, r2
 8000a64:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a66:	6863      	ldr	r3, [r4, #4]
 8000a68:	69ea      	ldr	r2, [r5, #28]
 8000a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a72:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a74:	682b      	ldr	r3, [r5, #0]
 8000a76:	07d8      	lsls	r0, r3, #31
 8000a78:	d42d      	bmi.n	8000ad6 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a7a:	682b      	ldr	r3, [r5, #0]
 8000a7c:	0799      	lsls	r1, r3, #30
 8000a7e:	d46b      	bmi.n	8000b58 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	0718      	lsls	r0, r3, #28
 8000a84:	f100 80a0 	bmi.w	8000bc8 <HAL_RCC_OscConfig+0x260>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a88:	682b      	ldr	r3, [r5, #0]
 8000a8a:	0759      	lsls	r1, r3, #29
 8000a8c:	f100 80ce 	bmi.w	8000c2c <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	0698      	lsls	r0, r3, #26
 8000a94:	f100 8137 	bmi.w	8000d06 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000a98:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f040 815d 	bne.w	8000d5a <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	e7af      	b.n	8000a04 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000aa4:	f7ff fd60 	bl	8000568 <HAL_GetTick>
 8000aa8:	eba0 0008 	sub.w	r0, r0, r8
 8000aac:	2802      	cmp	r0, #2
 8000aae:	d9cd      	bls.n	8000a4c <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	e7a7      	b.n	8000a04 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	f023 0301 	bic.w	r3, r3, #1
 8000aba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000abc:	f7ff fd54 	bl	8000568 <HAL_GetTick>
 8000ac0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	079b      	lsls	r3, r3, #30
 8000ac6:	d5d5      	bpl.n	8000a74 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ac8:	f7ff fd4e 	bl	8000568 <HAL_GetTick>
 8000acc:	eba0 0008 	sub.w	r0, r0, r8
 8000ad0:	2802      	cmp	r0, #2
 8000ad2:	d9f6      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x15a>
 8000ad4:	e7ec      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ad6:	2e08      	cmp	r6, #8
 8000ad8:	d003      	beq.n	8000ae2 <HAL_RCC_OscConfig+0x17a>
 8000ada:	2e0c      	cmp	r6, #12
 8000adc:	d108      	bne.n	8000af0 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ade:	2f03      	cmp	r7, #3
 8000ae0:	d106      	bne.n	8000af0 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	039a      	lsls	r2, r3, #14
 8000ae6:	d5c8      	bpl.n	8000a7a <HAL_RCC_OscConfig+0x112>
 8000ae8:	686b      	ldr	r3, [r5, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1c5      	bne.n	8000a7a <HAL_RCC_OscConfig+0x112>
 8000aee:	e73f      	b.n	8000970 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af0:	686b      	ldr	r3, [r5, #4]
 8000af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af6:	d110      	bne.n	8000b1a <HAL_RCC_OscConfig+0x1b2>
 8000af8:	6823      	ldr	r3, [r4, #0]
 8000afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b00:	f7ff fd32 	bl	8000568 <HAL_GetTick>
 8000b04:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	039b      	lsls	r3, r3, #14
 8000b0a:	d4b6      	bmi.n	8000a7a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b0c:	f7ff fd2c 	bl	8000568 <HAL_GetTick>
 8000b10:	eba0 0008 	sub.w	r0, r0, r8
 8000b14:	2864      	cmp	r0, #100	; 0x64
 8000b16:	d9f6      	bls.n	8000b06 <HAL_RCC_OscConfig+0x19e>
 8000b18:	e7ca      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b1e:	d104      	bne.n	8000b2a <HAL_RCC_OscConfig+0x1c2>
 8000b20:	6823      	ldr	r3, [r4, #0]
 8000b22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b26:	6023      	str	r3, [r4, #0]
 8000b28:	e7e6      	b.n	8000af8 <HAL_RCC_OscConfig+0x190>
 8000b2a:	6822      	ldr	r2, [r4, #0]
 8000b2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b30:	6022      	str	r2, [r4, #0]
 8000b32:	6822      	ldr	r2, [r4, #0]
 8000b34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b38:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1e0      	bne.n	8000b00 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8000b3e:	f7ff fd13 	bl	8000568 <HAL_GetTick>
 8000b42:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	0398      	lsls	r0, r3, #14
 8000b48:	d597      	bpl.n	8000a7a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b4a:	f7ff fd0d 	bl	8000568 <HAL_GetTick>
 8000b4e:	eba0 0008 	sub.w	r0, r0, r8
 8000b52:	2864      	cmp	r0, #100	; 0x64
 8000b54:	d9f6      	bls.n	8000b44 <HAL_RCC_OscConfig+0x1dc>
 8000b56:	e7ab      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000b58:	2e04      	cmp	r6, #4
 8000b5a:	d003      	beq.n	8000b64 <HAL_RCC_OscConfig+0x1fc>
 8000b5c:	2e0c      	cmp	r6, #12
 8000b5e:	d110      	bne.n	8000b82 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000b60:	2f02      	cmp	r7, #2
 8000b62:	d10e      	bne.n	8000b82 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	0559      	lsls	r1, r3, #21
 8000b68:	d503      	bpl.n	8000b72 <HAL_RCC_OscConfig+0x20a>
 8000b6a:	68eb      	ldr	r3, [r5, #12]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f43f aeff 	beq.w	8000970 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b72:	6863      	ldr	r3, [r4, #4]
 8000b74:	692a      	ldr	r2, [r5, #16]
 8000b76:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000b7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b7e:	6063      	str	r3, [r4, #4]
 8000b80:	e77e      	b.n	8000a80 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b82:	68eb      	ldr	r3, [r5, #12]
 8000b84:	b17b      	cbz	r3, 8000ba6 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b8e:	f7ff fceb 	bl	8000568 <HAL_GetTick>
 8000b92:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	055a      	lsls	r2, r3, #21
 8000b98:	d4eb      	bmi.n	8000b72 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b9a:	f7ff fce5 	bl	8000568 <HAL_GetTick>
 8000b9e:	1bc0      	subs	r0, r0, r7
 8000ba0:	2802      	cmp	r0, #2
 8000ba2:	d9f7      	bls.n	8000b94 <HAL_RCC_OscConfig+0x22c>
 8000ba4:	e784      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bae:	f7ff fcdb 	bl	8000568 <HAL_GetTick>
 8000bb2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	055b      	lsls	r3, r3, #21
 8000bb8:	f57f af62 	bpl.w	8000a80 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bbc:	f7ff fcd4 	bl	8000568 <HAL_GetTick>
 8000bc0:	1bc0      	subs	r0, r0, r7
 8000bc2:	2802      	cmp	r0, #2
 8000bc4:	d9f6      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x24c>
 8000bc6:	e773      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bc8:	696b      	ldr	r3, [r5, #20]
 8000bca:	b1db      	cbz	r3, 8000c04 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 8000bcc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000bd8:	f7ff fcc6 	bl	8000568 <HAL_GetTick>
 8000bdc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bde:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000be2:	079a      	lsls	r2, r3, #30
 8000be4:	f53f af50 	bmi.w	8000a88 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000be8:	f7ff fcbe 	bl	8000568 <HAL_GetTick>
 8000bec:	1bc0      	subs	r0, r0, r7
 8000bee:	2802      	cmp	r0, #2
 8000bf0:	d9f5      	bls.n	8000bde <HAL_RCC_OscConfig+0x276>
 8000bf2:	e75d      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	08001e41 	.word	0x08001e41
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004
      __HAL_RCC_LSI_DISABLE();
 8000c04:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c08:	f023 0301 	bic.w	r3, r3, #1
 8000c0c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c10:	f7ff fcaa 	bl	8000568 <HAL_GetTick>
 8000c14:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000c16:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c1a:	079b      	lsls	r3, r3, #30
 8000c1c:	f57f af34 	bpl.w	8000a88 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c20:	f7ff fca2 	bl	8000568 <HAL_GetTick>
 8000c24:	1bc0      	subs	r0, r0, r7
 8000c26:	2802      	cmp	r0, #2
 8000c28:	d9f5      	bls.n	8000c16 <HAL_RCC_OscConfig+0x2ae>
 8000c2a:	e741      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000c2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c2e:	00df      	lsls	r7, r3, #3
 8000c30:	d429      	bmi.n	8000c86 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c44:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c48:	4f9a      	ldr	r7, [pc, #616]	; (8000eb4 <HAL_RCC_OscConfig+0x54c>)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	05d8      	lsls	r0, r3, #23
 8000c4e:	d51d      	bpl.n	8000c8c <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c50:	68ab      	ldr	r3, [r5, #8]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d12b      	bne.n	8000cae <HAL_RCC_OscConfig+0x346>
 8000c56:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000c62:	f7ff fc81 	bl	8000568 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c66:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c6a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000c6c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c70:	079a      	lsls	r2, r3, #30
 8000c72:	d542      	bpl.n	8000cfa <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8000c74:	f1b8 0f00 	cmp.w	r8, #0
 8000c78:	f43f af0a 	beq.w	8000a90 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c82:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c84:	e704      	b.n	8000a90 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 8000c86:	f04f 0800 	mov.w	r8, #0
 8000c8a:	e7dd      	b.n	8000c48 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c92:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000c94:	f7ff fc68 	bl	8000568 <HAL_GetTick>
 8000c98:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	05d9      	lsls	r1, r3, #23
 8000c9e:	d4d7      	bmi.n	8000c50 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ca0:	f7ff fc62 	bl	8000568 <HAL_GetTick>
 8000ca4:	eba0 0009 	sub.w	r0, r0, r9
 8000ca8:	2802      	cmp	r0, #2
 8000caa:	d9f6      	bls.n	8000c9a <HAL_RCC_OscConfig+0x332>
 8000cac:	e700      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	d106      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x358>
 8000cb2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000cbe:	e7ca      	b.n	8000c56 <HAL_RCC_OscConfig+0x2ee>
 8000cc0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000cc4:	f022 0201 	bic.w	r2, r2, #1
 8000cc8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000ccc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000cd0:	f022 0204 	bic.w	r2, r2, #4
 8000cd4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1c2      	bne.n	8000c62 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 8000cdc:	f7ff fc44 	bl	8000568 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ce0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ce4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ce6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000cea:	079b      	lsls	r3, r3, #30
 8000cec:	d5c2      	bpl.n	8000c74 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cee:	f7ff fc3b 	bl	8000568 <HAL_GetTick>
 8000cf2:	1bc0      	subs	r0, r0, r7
 8000cf4:	4548      	cmp	r0, r9
 8000cf6:	d9f6      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x37e>
 8000cf8:	e6da      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cfa:	f7ff fc35 	bl	8000568 <HAL_GetTick>
 8000cfe:	1bc0      	subs	r0, r0, r7
 8000d00:	4548      	cmp	r0, r9
 8000d02:	d9b3      	bls.n	8000c6c <HAL_RCC_OscConfig+0x304>
 8000d04:	e6d4      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d08:	b19b      	cbz	r3, 8000d32 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 8000d0a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000d16:	f7ff fc27 	bl	8000568 <HAL_GetTick>
 8000d1a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000d1c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d20:	0799      	lsls	r1, r3, #30
 8000d22:	f53f aeb9 	bmi.w	8000a98 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d26:	f7ff fc1f 	bl	8000568 <HAL_GetTick>
 8000d2a:	1bc0      	subs	r0, r0, r7
 8000d2c:	2802      	cmp	r0, #2
 8000d2e:	d9f5      	bls.n	8000d1c <HAL_RCC_OscConfig+0x3b4>
 8000d30:	e6be      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8000d32:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d36:	f023 0301 	bic.w	r3, r3, #1
 8000d3a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000d3e:	f7ff fc13 	bl	8000568 <HAL_GetTick>
 8000d42:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000d44:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d48:	079a      	lsls	r2, r3, #30
 8000d4a:	f57f aea5 	bpl.w	8000a98 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d4e:	f7ff fc0b 	bl	8000568 <HAL_GetTick>
 8000d52:	1bc0      	subs	r0, r0, r7
 8000d54:	2802      	cmp	r0, #2
 8000d56:	d9f5      	bls.n	8000d44 <HAL_RCC_OscConfig+0x3dc>
 8000d58:	e6aa      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	f040 8088 	bne.w	8000e70 <HAL_RCC_OscConfig+0x508>
      pll_config = RCC->PLLCFGR;
 8000d60:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d62:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000d64:	f003 0103 	and.w	r1, r3, #3
 8000d68:	4291      	cmp	r1, r2
 8000d6a:	d122      	bne.n	8000db2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000d6c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000d6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000d72:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d74:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8000d78:	d11b      	bne.n	8000db2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000d7a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000d7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000d80:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8000d84:	d115      	bne.n	8000db2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000d86:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000d88:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000d8c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8000d90:	d10f      	bne.n	8000db2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000d92:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000d94:	0852      	lsrs	r2, r2, #1
 8000d96:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8000d9a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000d9c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8000da0:	d107      	bne.n	8000db2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000da2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000da4:	0852      	lsrs	r2, r2, #1
 8000da6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8000daa:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000dac:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8000db0:	d045      	beq.n	8000e3e <HAL_RCC_OscConfig+0x4d6>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000db2:	2e0c      	cmp	r6, #12
 8000db4:	f43f addc 	beq.w	8000970 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	015b      	lsls	r3, r3, #5
 8000dbc:	f53f add8 	bmi.w	8000970 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dc6:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8000dc8:	f7ff fbce 	bl	8000568 <HAL_GetTick>
 8000dcc:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	019f      	lsls	r7, r3, #6
 8000dd2:	d42e      	bmi.n	8000e32 <HAL_RCC_OscConfig+0x4ca>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dd4:	68e2      	ldr	r2, [r4, #12]
 8000dd6:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <HAL_RCC_OscConfig+0x550>)
 8000dd8:	4013      	ands	r3, r2
 8000dda:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000de0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000de4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000de6:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8000dea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000dec:	3a01      	subs	r2, #1
 8000dee:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000df2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000df4:	0852      	lsrs	r2, r2, #1
 8000df6:	3a01      	subs	r2, #1
 8000df8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000dfc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000dfe:	0852      	lsrs	r2, r2, #1
 8000e00:	3a01      	subs	r2, #1
 8000e02:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000e06:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e0e:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e10:	68e3      	ldr	r3, [r4, #12]
 8000e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e16:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8000e18:	f7ff fba6 	bl	8000568 <HAL_GetTick>
 8000e1c:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	019e      	lsls	r6, r3, #6
 8000e22:	f53f ae3d 	bmi.w	8000aa0 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e26:	f7ff fb9f 	bl	8000568 <HAL_GetTick>
 8000e2a:	1b40      	subs	r0, r0, r5
 8000e2c:	2802      	cmp	r0, #2
 8000e2e:	d9f6      	bls.n	8000e1e <HAL_RCC_OscConfig+0x4b6>
 8000e30:	e63e      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e32:	f7ff fb99 	bl	8000568 <HAL_GetTick>
 8000e36:	1b80      	subs	r0, r0, r6
 8000e38:	2802      	cmp	r0, #2
 8000e3a:	d9c8      	bls.n	8000dce <HAL_RCC_OscConfig+0x466>
 8000e3c:	e638      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	0198      	lsls	r0, r3, #6
 8000e42:	f53f ae2d 	bmi.w	8000aa0 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e4c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e4e:	68e3      	ldr	r3, [r4, #12]
 8000e50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e54:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8000e56:	f7ff fb87 	bl	8000568 <HAL_GetTick>
 8000e5a:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	0199      	lsls	r1, r3, #6
 8000e60:	f53f ae1e 	bmi.w	8000aa0 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e64:	f7ff fb80 	bl	8000568 <HAL_GetTick>
 8000e68:	1b40      	subs	r0, r0, r5
 8000e6a:	2802      	cmp	r0, #2
 8000e6c:	d9f6      	bls.n	8000e5c <HAL_RCC_OscConfig+0x4f4>
 8000e6e:	e61f      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e70:	2e0c      	cmp	r6, #12
 8000e72:	f43f ad7d 	beq.w	8000970 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e7c:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000e82:	bf5e      	ittt	pl
 8000e84:	68e3      	ldrpl	r3, [r4, #12]
 8000e86:	f023 0303 	bicpl.w	r3, r3, #3
 8000e8a:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000e8c:	68e3      	ldr	r3, [r4, #12]
 8000e8e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e96:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e98:	f7ff fb66 	bl	8000568 <HAL_GetTick>
 8000e9c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	019b      	lsls	r3, r3, #6
 8000ea2:	f57f adfd 	bpl.w	8000aa0 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ea6:	f7ff fb5f 	bl	8000568 <HAL_GetTick>
 8000eaa:	1b40      	subs	r0, r0, r5
 8000eac:	2802      	cmp	r0, #2
 8000eae:	d9f6      	bls.n	8000e9e <HAL_RCC_OscConfig+0x536>
 8000eb0:	e5fe      	b.n	8000ab0 <HAL_RCC_OscConfig+0x148>
 8000eb2:	bf00      	nop
 8000eb4:	40007000 	.word	0x40007000
 8000eb8:	019d808c 	.word	0x019d808c

08000ebc <HAL_RCC_ClockConfig>:
{
 8000ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec0:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	b910      	cbnz	r0, 8000ecc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ecc:	4a41      	ldr	r2, [pc, #260]	; (8000fd4 <HAL_RCC_ClockConfig+0x118>)
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d32a      	bcc.n	8000f2e <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	07d9      	lsls	r1, r3, #31
 8000edc:	d432      	bmi.n	8000f44 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ede:	6821      	ldr	r1, [r4, #0]
 8000ee0:	078a      	lsls	r2, r1, #30
 8000ee2:	d45c      	bmi.n	8000f9e <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ee4:	4a3b      	ldr	r2, [pc, #236]	; (8000fd4 <HAL_RCC_ClockConfig+0x118>)
 8000ee6:	6813      	ldr	r3, [r2, #0]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	429e      	cmp	r6, r3
 8000eee:	d35e      	bcc.n	8000fae <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ef0:	f011 0f04 	tst.w	r1, #4
 8000ef4:	4d38      	ldr	r5, [pc, #224]	; (8000fd8 <HAL_RCC_ClockConfig+0x11c>)
 8000ef6:	d165      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef8:	070b      	lsls	r3, r1, #28
 8000efa:	d506      	bpl.n	8000f0a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000efc:	68ab      	ldr	r3, [r5, #8]
 8000efe:	6922      	ldr	r2, [r4, #16]
 8000f00:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f08:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f0a:	f7ff fcdf 	bl	80008cc <HAL_RCC_GetSysClockFreq>
 8000f0e:	68ab      	ldr	r3, [r5, #8]
 8000f10:	4a32      	ldr	r2, [pc, #200]	; (8000fdc <HAL_RCC_ClockConfig+0x120>)
 8000f12:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f1a:	5cd3      	ldrb	r3, [r2, r3]
 8000f1c:	f003 031f 	and.w	r3, r3, #31
 8000f20:	40d8      	lsrs	r0, r3
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <HAL_RCC_ClockConfig+0x124>)
 8000f24:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8000f26:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <HAL_RCC_ClockConfig+0x128>)
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	f7ff badb 	b.w	80004e4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f2e:	6813      	ldr	r3, [r2, #0]
 8000f30:	f023 0307 	bic.w	r3, r3, #7
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f38:	6813      	ldr	r3, [r2, #0]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d1c1      	bne.n	8000ec6 <HAL_RCC_ClockConfig+0xa>
 8000f42:	e7c9      	b.n	8000ed8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f44:	6862      	ldr	r2, [r4, #4]
 8000f46:	4d24      	ldr	r5, [pc, #144]	; (8000fd8 <HAL_RCC_ClockConfig+0x11c>)
 8000f48:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f4a:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f4c:	d11b      	bne.n	8000f86 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f4e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f52:	d0b8      	beq.n	8000ec6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000f54:	68ab      	ldr	r3, [r5, #8]
 8000f56:	f023 0303 	bic.w	r3, r3, #3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000f5e:	f7ff fb03 	bl	8000568 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f62:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000f66:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f68:	68ab      	ldr	r3, [r5, #8]
 8000f6a:	6862      	ldr	r2, [r4, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f74:	d0b3      	beq.n	8000ede <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f76:	f7ff faf7 	bl	8000568 <HAL_GetTick>
 8000f7a:	1bc0      	subs	r0, r0, r7
 8000f7c:	4540      	cmp	r0, r8
 8000f7e:	d9f3      	bls.n	8000f68 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8000f80:	2003      	movs	r0, #3
}
 8000f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f86:	2a02      	cmp	r2, #2
 8000f88:	d102      	bne.n	8000f90 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f8e:	e7e0      	b.n	8000f52 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f90:	b912      	cbnz	r2, 8000f98 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f92:	f013 0f02 	tst.w	r3, #2
 8000f96:	e7dc      	b.n	8000f52 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f98:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f9c:	e7d9      	b.n	8000f52 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_RCC_ClockConfig+0x11c>)
 8000fa0:	68a0      	ldr	r0, [r4, #8]
 8000fa2:	6893      	ldr	r3, [r2, #8]
 8000fa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fa8:	4303      	orrs	r3, r0
 8000faa:	6093      	str	r3, [r2, #8]
 8000fac:	e79a      	b.n	8000ee4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fae:	6813      	ldr	r3, [r2, #0]
 8000fb0:	f023 0307 	bic.w	r3, r3, #7
 8000fb4:	4333      	orrs	r3, r6
 8000fb6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fb8:	6813      	ldr	r3, [r2, #0]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	429e      	cmp	r6, r3
 8000fc0:	d181      	bne.n	8000ec6 <HAL_RCC_ClockConfig+0xa>
 8000fc2:	e795      	b.n	8000ef0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fc4:	68ab      	ldr	r3, [r5, #8]
 8000fc6:	68e2      	ldr	r2, [r4, #12]
 8000fc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	60ab      	str	r3, [r5, #8]
 8000fd0:	e792      	b.n	8000ef8 <HAL_RCC_ClockConfig+0x3c>
 8000fd2:	bf00      	nop
 8000fd4:	40022000 	.word	0x40022000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	08001e41 	.word	0x08001e41
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fea:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000ff2:	5cd3      	ldrb	r3, [r2, r3]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ff6:	6810      	ldr	r0, [r2, #0]
 8000ff8:	f003 031f 	and.w	r3, r3, #31
}
 8000ffc:	40d8      	lsrs	r0, r3
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000
 8001004:	08001e51 	.word	0x08001e51
 8001008:	20000008 	.word	0x20000008

0800100c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_RCC_GetPCLK2Freq+0x18>)
 800100e:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_RCC_GetPCLK2Freq+0x20>)
 800101a:	6810      	ldr	r0, [r2, #0]
 800101c:	f003 031f 	and.w	r3, r3, #31
}
 8001020:	40d8      	lsrs	r0, r3
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000
 8001028:	08001e51 	.word	0x08001e51
 800102c:	20000008 	.word	0x20000008

08001030 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001032:	4b44      	ldr	r3, [pc, #272]	; (8001144 <RCCEx_PLLSAI1_Config+0x114>)
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	f012 0f03 	tst.w	r2, #3
{
 800103a:	4605      	mov	r5, r0
 800103c:	460e      	mov	r6, r1
 800103e:	461c      	mov	r4, r3
 8001040:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001042:	d039      	beq.n	80010b8 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	f002 0203 	and.w	r2, r2, #3
 800104a:	4282      	cmp	r2, r0
 800104c:	d14b      	bne.n	80010e6 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800104e:	2a00      	cmp	r2, #0
 8001050:	d049      	beq.n	80010e6 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001052:	68db      	ldr	r3, [r3, #12]
       ||
 8001054:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001056:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800105a:	3301      	adds	r3, #1
       ||
 800105c:	4293      	cmp	r3, r2
 800105e:	d142      	bne.n	80010e6 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001066:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001068:	f7ff fa7e 	bl	8000568 <HAL_GetTick>
 800106c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	011a      	lsls	r2, r3, #4
 8001072:	d441      	bmi.n	80010f8 <RCCEx_PLLSAI1_Config+0xc8>
 8001074:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001076:	2e00      	cmp	r6, #0
 8001078:	d045      	beq.n	8001106 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800107a:	2e01      	cmp	r6, #1
 800107c:	d14f      	bne.n	800111e <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800107e:	6922      	ldr	r2, [r4, #16]
 8001080:	6928      	ldr	r0, [r5, #16]
 8001082:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001086:	0840      	lsrs	r0, r0, #1
 8001088:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800108c:	3801      	subs	r0, #1
 800108e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001092:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001096:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800109e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a0:	f7ff fa62 	bl	8000568 <HAL_GetTick>
 80010a4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	d545      	bpl.n	8001138 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80010ac:	6923      	ldr	r3, [r4, #16]
 80010ae:	69aa      	ldr	r2, [r5, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	6123      	str	r3, [r4, #16]
 80010b4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80010b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80010b8:	2802      	cmp	r0, #2
 80010ba:	d010      	beq.n	80010de <RCCEx_PLLSAI1_Config+0xae>
 80010bc:	2803      	cmp	r0, #3
 80010be:	d014      	beq.n	80010ea <RCCEx_PLLSAI1_Config+0xba>
 80010c0:	2801      	cmp	r0, #1
 80010c2:	d110      	bne.n	80010e6 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	079f      	lsls	r7, r3, #30
 80010c8:	d5f5      	bpl.n	80010b6 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80010ca:	68e3      	ldr	r3, [r4, #12]
 80010cc:	686a      	ldr	r2, [r5, #4]
 80010ce:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80010d2:	3a01      	subs	r2, #1
 80010d4:	4318      	orrs	r0, r3
 80010d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80010da:	60e0      	str	r0, [r4, #12]
 80010dc:	e7c0      	b.n	8001060 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80010e4:	d1f1      	bne.n	80010ca <RCCEx_PLLSAI1_Config+0x9a>
 80010e6:	2001      	movs	r0, #1
 80010e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	0391      	lsls	r1, r2, #14
 80010ee:	d4ec      	bmi.n	80010ca <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80010f6:	e7f5      	b.n	80010e4 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80010f8:	f7ff fa36 	bl	8000568 <HAL_GetTick>
 80010fc:	1bc0      	subs	r0, r0, r7
 80010fe:	2802      	cmp	r0, #2
 8001100:	d9b5      	bls.n	800106e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001102:	2003      	movs	r0, #3
 8001104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001106:	6922      	ldr	r2, [r4, #16]
 8001108:	68e9      	ldr	r1, [r5, #12]
 800110a:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800110e:	06c9      	lsls	r1, r1, #27
 8001110:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001114:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001118:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800111a:	6123      	str	r3, [r4, #16]
 800111c:	e7bc      	b.n	8001098 <RCCEx_PLLSAI1_Config+0x68>
 800111e:	6923      	ldr	r3, [r4, #16]
 8001120:	6968      	ldr	r0, [r5, #20]
 8001122:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001126:	0840      	lsrs	r0, r0, #1
 8001128:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800112c:	3801      	subs	r0, #1
 800112e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001132:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001136:	e7f0      	b.n	800111a <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001138:	f7ff fa16 	bl	8000568 <HAL_GetTick>
 800113c:	1b80      	subs	r0, r0, r6
 800113e:	2802      	cmp	r0, #2
 8001140:	d9b1      	bls.n	80010a6 <RCCEx_PLLSAI1_Config+0x76>
 8001142:	e7de      	b.n	8001102 <RCCEx_PLLSAI1_Config+0xd2>
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001148:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800114c:	6805      	ldr	r5, [r0, #0]
 800114e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8001152:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001154:	d00e      	beq.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001156:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001158:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800115c:	d053      	beq.n	8001206 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800115e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001162:	d055      	beq.n	8001210 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8001164:	2900      	cmp	r1, #0
 8001166:	d15e      	bne.n	8001226 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001168:	3004      	adds	r0, #4
 800116a:	f7ff ff61 	bl	8001030 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800116e:	4605      	mov	r5, r0
 8001170:	2800      	cmp	r0, #0
 8001172:	d04d      	beq.n	8001210 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	039e      	lsls	r6, r3, #14
 8001178:	d563      	bpl.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800117a:	4eb8      	ldr	r6, [pc, #736]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800117c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800117e:	00d8      	lsls	r0, r3, #3
 8001180:	f140 8160 	bpl.w	8001444 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    FlagStatus       pwrclkchanged = RESET;
 8001184:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001186:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8001460 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800118a:	f8d8 3000 	ldr.w	r3, [r8]
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001196:	f7ff f9e7 	bl	8000568 <HAL_GetTick>
 800119a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800119c:	f8d8 3000 	ldr.w	r3, [r8]
 80011a0:	05d9      	lsls	r1, r3, #23
 80011a2:	d542      	bpl.n	800122a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 80011a4:	2d00      	cmp	r5, #0
 80011a6:	d147      	bne.n	8001238 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80011a8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80011ac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011b0:	d014      	beq.n	80011dc <HAL_RCCEx_PeriphCLKConfig+0x94>
 80011b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d011      	beq.n	80011dc <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80011b8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80011bc:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80011c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011c4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80011c8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80011cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80011d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011d4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80011d8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80011dc:	07da      	lsls	r2, r3, #31
 80011de:	d509      	bpl.n	80011f4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 80011e0:	f7ff f9c2 	bl	8000568 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80011e8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ea:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80011ee:	079b      	lsls	r3, r3, #30
 80011f0:	f140 80ff 	bpl.w	80013f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011f4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80011f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011fe:	4313      	orrs	r3, r2
 8001200:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001204:	e018      	b.n	8001238 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001206:	4a95      	ldr	r2, [pc, #596]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001208:	68d3      	ldr	r3, [r2, #12]
 800120a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120e:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001210:	4a92      	ldr	r2, [pc, #584]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001212:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001214:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001218:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800121c:	430b      	orrs	r3, r1
 800121e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001222:	2500      	movs	r5, #0
 8001224:	e7a6      	b.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001226:	2501      	movs	r5, #1
 8001228:	e7a4      	b.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122a:	f7ff f99d 	bl	8000568 <HAL_GetTick>
 800122e:	eba0 0009 	sub.w	r0, r0, r9
 8001232:	2802      	cmp	r0, #2
 8001234:	d9b2      	bls.n	800119c <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 8001236:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001238:	b11f      	cbz	r7, 8001242 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 800123a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800123c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001240:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	07df      	lsls	r7, r3, #31
 8001246:	d508      	bpl.n	800125a <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001248:	4984      	ldr	r1, [pc, #528]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800124a:	6a20      	ldr	r0, [r4, #32]
 800124c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001250:	f022 0203 	bic.w	r2, r2, #3
 8001254:	4302      	orrs	r2, r0
 8001256:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800125a:	079e      	lsls	r6, r3, #30
 800125c:	d508      	bpl.n	8001270 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800125e:	497f      	ldr	r1, [pc, #508]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001260:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001262:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001266:	f022 020c 	bic.w	r2, r2, #12
 800126a:	4302      	orrs	r2, r0
 800126c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001270:	0758      	lsls	r0, r3, #29
 8001272:	d508      	bpl.n	8001286 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001274:	4979      	ldr	r1, [pc, #484]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001276:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001278:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800127c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001280:	4302      	orrs	r2, r0
 8001282:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001286:	0719      	lsls	r1, r3, #28
 8001288:	d508      	bpl.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800128a:	4974      	ldr	r1, [pc, #464]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800128c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800128e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001292:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001296:	4302      	orrs	r2, r0
 8001298:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800129c:	069a      	lsls	r2, r3, #26
 800129e:	d508      	bpl.n	80012b2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80012a0:	496e      	ldr	r1, [pc, #440]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80012a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80012a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80012ac:	4302      	orrs	r2, r0
 80012ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80012b2:	059f      	lsls	r7, r3, #22
 80012b4:	d508      	bpl.n	80012c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80012b6:	4969      	ldr	r1, [pc, #420]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80012b8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80012ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012be:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80012c2:	4302      	orrs	r2, r0
 80012c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80012c8:	055e      	lsls	r6, r3, #21
 80012ca:	d508      	bpl.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80012cc:	4963      	ldr	r1, [pc, #396]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80012ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80012d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012d4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80012d8:	4302      	orrs	r2, r0
 80012da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80012de:	0658      	lsls	r0, r3, #25
 80012e0:	d508      	bpl.n	80012f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012e2:	495e      	ldr	r1, [pc, #376]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80012e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80012e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012ea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80012ee:	4302      	orrs	r2, r0
 80012f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80012f4:	0619      	lsls	r1, r3, #24
 80012f6:	d508      	bpl.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80012f8:	4958      	ldr	r1, [pc, #352]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80012fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001300:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001304:	4302      	orrs	r2, r0
 8001306:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800130a:	05da      	lsls	r2, r3, #23
 800130c:	d508      	bpl.n	8001320 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800130e:	4953      	ldr	r1, [pc, #332]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001310:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001312:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001316:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800131a:	4302      	orrs	r2, r0
 800131c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001320:	02df      	lsls	r7, r3, #11
 8001322:	d508      	bpl.n	8001336 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001324:	494d      	ldr	r1, [pc, #308]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001326:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001328:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800132c:	f022 0203 	bic.w	r2, r2, #3
 8001330:	4302      	orrs	r2, r0
 8001332:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001336:	049e      	lsls	r6, r3, #18
 8001338:	d50f      	bpl.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800133a:	4a48      	ldr	r2, [pc, #288]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800133c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800133e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001342:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001346:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001348:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001350:	d157      	bne.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001352:	68d3      	ldr	r3, [r2, #12]
 8001354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001358:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	0318      	lsls	r0, r3, #12
 800135e:	d50f      	bpl.n	8001380 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001360:	4a3e      	ldr	r2, [pc, #248]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001362:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001364:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001368:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800136c:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800136e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001372:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001376:	d14f      	bne.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001378:	68d3      	ldr	r3, [r2, #12]
 800137a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800137e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	0359      	lsls	r1, r3, #13
 8001384:	d50f      	bpl.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001386:	4a35      	ldr	r2, [pc, #212]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001388:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800138a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800138e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001392:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001394:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800139c:	d147      	bne.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800139e:	68d3      	ldr	r3, [r2, #12]
 80013a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013a4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	045a      	lsls	r2, r3, #17
 80013aa:	d512      	bpl.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80013ac:	492b      	ldr	r1, [pc, #172]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80013ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80013b0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80013b4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80013b8:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80013ba:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80013be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80013c2:	d106      	bne.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80013c4:	2102      	movs	r1, #2
 80013c6:	1d20      	adds	r0, r4, #4
 80013c8:	f7ff fe32 	bl	8001030 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80013cc:	2800      	cmp	r0, #0
 80013ce:	bf18      	it	ne
 80013d0:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	03db      	lsls	r3, r3, #15
 80013d6:	d508      	bpl.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80013d8:	4a20      	ldr	r2, [pc, #128]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80013da:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80013dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80013e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013e4:	430b      	orrs	r3, r1
 80013e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80013ea:	4628      	mov	r0, r5
 80013ec:	b003      	add	sp, #12
 80013ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff f8b9 	bl	8000568 <HAL_GetTick>
 80013f6:	eba0 0008 	sub.w	r0, r0, r8
 80013fa:	4548      	cmp	r0, r9
 80013fc:	f67f aef5 	bls.w	80011ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001400:	e719      	b.n	8001236 <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001402:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001406:	d1a8      	bne.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x212>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001408:	2101      	movs	r1, #1
 800140a:	1d20      	adds	r0, r4, #4
 800140c:	f7ff fe10 	bl	8001030 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001410:	2800      	cmp	r0, #0
 8001412:	bf18      	it	ne
 8001414:	4605      	movne	r5, r0
 8001416:	e7a0      	b.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x212>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001418:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800141c:	d1b0      	bne.n	8001380 <HAL_RCCEx_PeriphCLKConfig+0x238>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800141e:	2101      	movs	r1, #1
 8001420:	1d20      	adds	r0, r4, #4
 8001422:	f7ff fe05 	bl	8001030 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001426:	2800      	cmp	r0, #0
 8001428:	bf18      	it	ne
 800142a:	4605      	movne	r5, r0
 800142c:	e7a8      	b.n	8001380 <HAL_RCCEx_PeriphCLKConfig+0x238>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800142e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001432:	d1b8      	bne.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001434:	2101      	movs	r1, #1
 8001436:	1d20      	adds	r0, r4, #4
 8001438:	f7ff fdfa 	bl	8001030 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800143c:	2800      	cmp	r0, #0
 800143e:	bf18      	it	ne
 8001440:	4605      	movne	r5, r0
 8001442:	e7b0      	b.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144a:	65b3      	str	r3, [r6, #88]	; 0x58
 800144c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001456:	2701      	movs	r7, #1
 8001458:	e695      	b.n	8001186 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	40007000 	.word	0x40007000

08001464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001464:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001466:	4604      	mov	r4, r0
 8001468:	2800      	cmp	r0, #0
 800146a:	d04a      	beq.n	8001502 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001470:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001474:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001478:	b91b      	cbnz	r3, 8001482 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800147a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800147e:	f000 fb71 	bl	8001b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001482:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001484:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001486:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800148a:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800148c:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800148e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001492:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001496:	600b      	str	r3, [r1, #0]
 8001498:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800149c:	d92e      	bls.n	80014fc <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800149e:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80014a0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a4:	bf18      	it	ne
 80014a6:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80014a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014aa:	b92b      	cbnz	r3, 80014b8 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014ac:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80014b0:	bf8c      	ite	hi
 80014b2:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80014b4:	2301      	movls	r3, #1
 80014b6:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80014b8:	68a6      	ldr	r6, [r4, #8]
 80014ba:	6863      	ldr	r3, [r4, #4]
 80014bc:	69a5      	ldr	r5, [r4, #24]
 80014be:	4333      	orrs	r3, r6
 80014c0:	6926      	ldr	r6, [r4, #16]
 80014c2:	4333      	orrs	r3, r6
 80014c4:	6966      	ldr	r6, [r4, #20]
 80014c6:	4333      	orrs	r3, r6
 80014c8:	69e6      	ldr	r6, [r4, #28]
 80014ca:	4333      	orrs	r3, r6
 80014cc:	6a26      	ldr	r6, [r4, #32]
 80014ce:	4333      	orrs	r3, r6
 80014d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80014d2:	4333      	orrs	r3, r6
 80014d4:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80014d8:	4333      	orrs	r3, r6
 80014da:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80014dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014de:	431a      	orrs	r2, r3
 80014e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014e2:	0c2d      	lsrs	r5, r5, #16
 80014e4:	431a      	orrs	r2, r3
 80014e6:	f005 0504 	and.w	r5, r5, #4
 80014ea:	432a      	orrs	r2, r5
 80014ec:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 80014ee:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80014f0:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80014f2:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80014f4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80014f6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 80014fa:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80014fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001500:	e7d0      	b.n	80014a4 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001502:	2001      	movs	r0, #1
}
 8001504:	bd70      	pop	{r4, r5, r6, pc}
	...

08001508 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001508:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800150a:	69c1      	ldr	r1, [r0, #28]
{
 800150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001510:	6883      	ldr	r3, [r0, #8]
 8001512:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001514:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001516:	4303      	orrs	r3, r0
 8001518:	6960      	ldr	r0, [r4, #20]
 800151a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800151c:	48af      	ldr	r0, [pc, #700]	; (80017dc <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800151e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001520:	4028      	ands	r0, r5
 8001522:	4303      	orrs	r3, r0
 8001524:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001526:	6853      	ldr	r3, [r2, #4]
 8001528:	68e0      	ldr	r0, [r4, #12]
 800152a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800152e:	4303      	orrs	r3, r0
 8001530:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001532:	4bab      	ldr	r3, [pc, #684]	; (80017e0 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001534:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001536:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001538:	bf1c      	itt	ne
 800153a:	6a23      	ldrne	r3, [r4, #32]
 800153c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800153e:	6893      	ldr	r3, [r2, #8]
 8001540:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001544:	4303      	orrs	r3, r0
 8001546:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001548:	4ba6      	ldr	r3, [pc, #664]	; (80017e4 <UART_SetConfig+0x2dc>)
 800154a:	429a      	cmp	r2, r3
 800154c:	d118      	bne.n	8001580 <UART_SetConfig+0x78>
 800154e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001552:	4aa5      	ldr	r2, [pc, #660]	; (80017e8 <UART_SetConfig+0x2e0>)
 8001554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001558:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800155c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	f040 8123 	bne.w	80017ac <UART_SetConfig+0x2a4>
  {
    switch (clocksource)
 8001566:	2b08      	cmp	r3, #8
 8001568:	d877      	bhi.n	800165a <UART_SetConfig+0x152>
 800156a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800156e:	0100      	.short	0x0100
 8001570:	00e200b3 	.word	0x00e200b3
 8001574:	011c0076 	.word	0x011c0076
 8001578:	00760076 	.word	0x00760076
 800157c:	00360076 	.word	0x00360076
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001580:	4b9a      	ldr	r3, [pc, #616]	; (80017ec <UART_SetConfig+0x2e4>)
 8001582:	429a      	cmp	r2, r3
 8001584:	d107      	bne.n	8001596 <UART_SetConfig+0x8e>
 8001586:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800158a:	4a99      	ldr	r2, [pc, #612]	; (80017f0 <UART_SetConfig+0x2e8>)
 800158c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	e7e2      	b.n	800155c <UART_SetConfig+0x54>
 8001596:	4b97      	ldr	r3, [pc, #604]	; (80017f4 <UART_SetConfig+0x2ec>)
 8001598:	429a      	cmp	r2, r3
 800159a:	d123      	bne.n	80015e4 <UART_SetConfig+0xdc>
 800159c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80015a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015a8:	2b10      	cmp	r3, #16
 80015aa:	f000 80f9 	beq.w	80017a0 <UART_SetConfig+0x298>
 80015ae:	d80b      	bhi.n	80015c8 <UART_SetConfig+0xc0>
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80d9 	beq.w	8001768 <UART_SetConfig+0x260>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015b6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 80015ba:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80015be:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015c2:	f000 80de 	beq.w	8001782 <UART_SetConfig+0x27a>
 80015c6:	e091      	b.n	80016ec <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015c8:	2b20      	cmp	r3, #32
 80015ca:	f000 80af 	beq.w	800172c <UART_SetConfig+0x224>
 80015ce:	2b30      	cmp	r3, #48	; 0x30
 80015d0:	d1f1      	bne.n	80015b6 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80015d6:	f040 80a1 	bne.w	800171c <UART_SetConfig+0x214>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80015da:	6860      	ldr	r0, [r4, #4]
 80015dc:	0843      	lsrs	r3, r0, #1
 80015de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80015e2:	e0ac      	b.n	800173e <UART_SetConfig+0x236>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015e4:	4b84      	ldr	r3, [pc, #528]	; (80017f8 <UART_SetConfig+0x2f0>)
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d11c      	bne.n	8001624 <UART_SetConfig+0x11c>
 80015ea:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015f6:	2b40      	cmp	r3, #64	; 0x40
 80015f8:	f000 80af 	beq.w	800175a <UART_SetConfig+0x252>
 80015fc:	d806      	bhi.n	800160c <UART_SetConfig+0x104>
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80a0 	beq.w	8001744 <UART_SetConfig+0x23c>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001604:	4b76      	ldr	r3, [pc, #472]	; (80017e0 <UART_SetConfig+0x2d8>)
 8001606:	429a      	cmp	r2, r3
 8001608:	d1d5      	bne.n	80015b6 <UART_SetConfig+0xae>
 800160a:	e026      	b.n	800165a <UART_SetConfig+0x152>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800160c:	2b80      	cmp	r3, #128	; 0x80
 800160e:	f000 808a 	beq.w	8001726 <UART_SetConfig+0x21e>
 8001612:	2bc0      	cmp	r3, #192	; 0xc0
 8001614:	d1f6      	bne.n	8001604 <UART_SetConfig+0xfc>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001616:	4b72      	ldr	r3, [pc, #456]	; (80017e0 <UART_SetConfig+0x2d8>)
 8001618:	429a      	cmp	r2, r3
 800161a:	d1da      	bne.n	80015d2 <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800161c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001620:	2308      	movs	r3, #8
 8001622:	e015      	b.n	8001650 <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001624:	4b6e      	ldr	r3, [pc, #440]	; (80017e0 <UART_SetConfig+0x2d8>)
 8001626:	429a      	cmp	r2, r3
 8001628:	d1c5      	bne.n	80015b6 <UART_SetConfig+0xae>
 800162a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163a:	f000 808e 	beq.w	800175a <UART_SetConfig+0x252>
 800163e:	d9de      	bls.n	80015fe <UART_SetConfig+0xf6>
 8001640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001644:	d06f      	beq.n	8001726 <UART_SetConfig+0x21e>
 8001646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800164a:	e7e3      	b.n	8001614 <UART_SetConfig+0x10c>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800164c:	486b      	ldr	r0, [pc, #428]	; (80017fc <UART_SetConfig+0x2f4>)
  if (UART_INSTANCE_LOWPOWER(huart))
 800164e:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001650:	6862      	ldr	r2, [r4, #4]
 8001652:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001656:	4281      	cmp	r1, r0
 8001658:	d905      	bls.n	8001666 <UART_SetConfig+0x15e>
        ret = HAL_ERROR;
 800165a:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800165c:	2300      	movs	r3, #0
 800165e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001660:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001662:	4610      	mov	r0, r2
 8001664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001666:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800166a:	d8f6      	bhi.n	800165a <UART_SetConfig+0x152>
        switch (clocksource)
 800166c:	2b08      	cmp	r3, #8
 800166e:	d82e      	bhi.n	80016ce <UART_SetConfig+0x1c6>
 8001670:	e8df f003 	tbb	[pc, r3]
 8001674:	2d1c2d05 	.word	0x2d1c2d05
 8001678:	2d2d2d24 	.word	0x2d2d2d24
 800167c:	27          	.byte	0x27
 800167d:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 800167e:	f7ff fcb3 	bl	8000fe8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001682:	6862      	ldr	r2, [r4, #4]
 8001684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001688:	0856      	lsrs	r6, r2, #1
 800168a:	2700      	movs	r7, #0
 800168c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001690:	2300      	movs	r3, #0
 8001692:	4630      	mov	r0, r6
 8001694:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001696:	f7fe fd9d 	bl	80001d4 <__aeabi_uldivmod>
            break;
 800169a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800169c:	4b58      	ldr	r3, [pc, #352]	; (8001800 <UART_SetConfig+0x2f8>)
 800169e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80016a2:	4299      	cmp	r1, r3
 80016a4:	d8d9      	bhi.n	800165a <UART_SetConfig+0x152>
          huart->Instance->BRR = usartdiv;
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	60d8      	str	r0, [r3, #12]
 80016aa:	e7d7      	b.n	800165c <UART_SetConfig+0x154>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80016ac:	4855      	ldr	r0, [pc, #340]	; (8001804 <UART_SetConfig+0x2fc>)
 80016ae:	0855      	lsrs	r5, r2, #1
 80016b0:	2300      	movs	r3, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80016b6:	f141 0100 	adc.w	r1, r1, #0
 80016ba:	e7ec      	b.n	8001696 <UART_SetConfig+0x18e>
            pclk = HAL_RCC_GetSysClockFreq();
 80016bc:	f7ff f906 	bl	80008cc <HAL_RCC_GetSysClockFreq>
 80016c0:	e7df      	b.n	8001682 <UART_SetConfig+0x17a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80016c2:	0850      	lsrs	r0, r2, #1
 80016c4:	2100      	movs	r1, #0
 80016c6:	2300      	movs	r3, #0
 80016c8:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80016cc:	e7f3      	b.n	80016b6 <UART_SetConfig+0x1ae>
            ret = HAL_ERROR;
 80016ce:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80016d0:	2000      	movs	r0, #0
 80016d2:	e7e3      	b.n	800169c <UART_SetConfig+0x194>
        pclk = HAL_RCC_GetPCLK2Freq();
 80016d4:	f7ff fc9a 	bl	800100c <HAL_RCC_GetPCLK2Freq>
 80016d8:	e04b      	b.n	8001772 <UART_SetConfig+0x26a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80016da:	f7ff fc85 	bl	8000fe8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80016de:	6862      	ldr	r2, [r4, #4]
 80016e0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80016e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80016e8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016ea:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016ec:	f1a3 0010 	sub.w	r0, r3, #16
 80016f0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80016f4:	4288      	cmp	r0, r1
 80016f6:	d8b0      	bhi.n	800165a <UART_SetConfig+0x152>
      huart->Instance->BRR = usartdiv;
 80016f8:	6821      	ldr	r1, [r4, #0]
 80016fa:	60cb      	str	r3, [r1, #12]
 80016fc:	e7ae      	b.n	800165c <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetPCLK2Freq();
 80016fe:	f7ff fc85 	bl	800100c <HAL_RCC_GetPCLK2Freq>
 8001702:	e7ec      	b.n	80016de <UART_SetConfig+0x1d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001704:	6860      	ldr	r0, [r4, #4]
 8001706:	0843      	lsrs	r3, r0, #1
 8001708:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800170c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001710:	fbb3 f3f0 	udiv	r3, r3, r0
 8001714:	e7e8      	b.n	80016e8 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8001716:	f7ff f8d9 	bl	80008cc <HAL_RCC_GetSysClockFreq>
 800171a:	e7e0      	b.n	80016de <UART_SetConfig+0x1d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800171c:	6860      	ldr	r0, [r4, #4]
 800171e:	0843      	lsrs	r3, r0, #1
 8001720:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001724:	e7f4      	b.n	8001710 <UART_SetConfig+0x208>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <UART_SetConfig+0x2d8>)
 8001728:	429a      	cmp	r2, r3
 800172a:	d08f      	beq.n	800164c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800172c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001730:	d1e8      	bne.n	8001704 <UART_SetConfig+0x1fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001732:	6860      	ldr	r0, [r4, #4]
 8001734:	0843      	lsrs	r3, r0, #1
 8001736:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800173a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800173e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001742:	e01c      	b.n	800177e <UART_SetConfig+0x276>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <UART_SetConfig+0x2d8>)
 8001746:	429a      	cmp	r2, r3
 8001748:	d10e      	bne.n	8001768 <UART_SetConfig+0x260>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800174a:	f7ff fc4d 	bl	8000fe8 <HAL_RCC_GetPCLK1Freq>
        break;
 800174e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001750:	2800      	cmp	r0, #0
 8001752:	f47f af7d 	bne.w	8001650 <UART_SetConfig+0x148>
 8001756:	4602      	mov	r2, r0
 8001758:	e780      	b.n	800165c <UART_SetConfig+0x154>
  if (UART_INSTANCE_LOWPOWER(huart))
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <UART_SetConfig+0x2d8>)
 800175c:	429a      	cmp	r2, r3
 800175e:	d11f      	bne.n	80017a0 <UART_SetConfig+0x298>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001760:	f7ff f8b4 	bl	80008cc <HAL_RCC_GetSysClockFreq>
        break;
 8001764:	2304      	movs	r3, #4
 8001766:	e7f3      	b.n	8001750 <UART_SetConfig+0x248>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001768:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800176c:	d1b5      	bne.n	80016da <UART_SetConfig+0x1d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800176e:	f7ff fc3b 	bl	8000fe8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001772:	6861      	ldr	r1, [r4, #4]
 8001774:	084a      	lsrs	r2, r1, #1
 8001776:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001780:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001782:	f1a3 0010 	sub.w	r0, r3, #16
 8001786:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800178a:	4288      	cmp	r0, r1
 800178c:	f63f af65 	bhi.w	800165a <UART_SetConfig+0x152>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001790:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001794:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001796:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800179a:	430b      	orrs	r3, r1
 800179c:	60c3      	str	r3, [r0, #12]
 800179e:	e75d      	b.n	800165c <UART_SetConfig+0x154>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017a0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80017a4:	d1b7      	bne.n	8001716 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetSysClockFreq();
 80017a6:	f7ff f891 	bl	80008cc <HAL_RCC_GetSysClockFreq>
 80017aa:	e7e2      	b.n	8001772 <UART_SetConfig+0x26a>
    switch (clocksource)
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	f63f af54 	bhi.w	800165a <UART_SetConfig+0x152>
 80017b2:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <UART_SetConfig+0x2b0>)
 80017b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b8:	080016db 	.word	0x080016db
 80017bc:	080016ff 	.word	0x080016ff
 80017c0:	08001705 	.word	0x08001705
 80017c4:	0800165b 	.word	0x0800165b
 80017c8:	08001717 	.word	0x08001717
 80017cc:	0800165b 	.word	0x0800165b
 80017d0:	0800165b 	.word	0x0800165b
 80017d4:	0800165b 	.word	0x0800165b
 80017d8:	0800171d 	.word	0x0800171d
 80017dc:	efff69f3 	.word	0xefff69f3
 80017e0:	40008000 	.word	0x40008000
 80017e4:	40013800 	.word	0x40013800
 80017e8:	08001e30 	.word	0x08001e30
 80017ec:	40004400 	.word	0x40004400
 80017f0:	08001e34 	.word	0x08001e34
 80017f4:	40004800 	.word	0x40004800
 80017f8:	40004c00 	.word	0x40004c00
 80017fc:	00f42400 	.word	0x00f42400
 8001800:	000ffcff 	.word	0x000ffcff
 8001804:	f4240000 	.word	0xf4240000

08001808 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001808:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800180a:	07da      	lsls	r2, r3, #31
{
 800180c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800180e:	d506      	bpl.n	800181e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001810:	6801      	ldr	r1, [r0, #0]
 8001812:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001814:	684a      	ldr	r2, [r1, #4]
 8001816:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800181a:	4322      	orrs	r2, r4
 800181c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800181e:	079c      	lsls	r4, r3, #30
 8001820:	d506      	bpl.n	8001830 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001822:	6801      	ldr	r1, [r0, #0]
 8001824:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001826:	684a      	ldr	r2, [r1, #4]
 8001828:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800182c:	4322      	orrs	r2, r4
 800182e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001830:	0759      	lsls	r1, r3, #29
 8001832:	d506      	bpl.n	8001842 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001834:	6801      	ldr	r1, [r0, #0]
 8001836:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001838:	684a      	ldr	r2, [r1, #4]
 800183a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800183e:	4322      	orrs	r2, r4
 8001840:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001842:	071a      	lsls	r2, r3, #28
 8001844:	d506      	bpl.n	8001854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001846:	6801      	ldr	r1, [r0, #0]
 8001848:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800184a:	684a      	ldr	r2, [r1, #4]
 800184c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001850:	4322      	orrs	r2, r4
 8001852:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001854:	06dc      	lsls	r4, r3, #27
 8001856:	d506      	bpl.n	8001866 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001858:	6801      	ldr	r1, [r0, #0]
 800185a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800185c:	688a      	ldr	r2, [r1, #8]
 800185e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001862:	4322      	orrs	r2, r4
 8001864:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001866:	0699      	lsls	r1, r3, #26
 8001868:	d506      	bpl.n	8001878 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800186a:	6801      	ldr	r1, [r0, #0]
 800186c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800186e:	688a      	ldr	r2, [r1, #8]
 8001870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001874:	4322      	orrs	r2, r4
 8001876:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001878:	065a      	lsls	r2, r3, #25
 800187a:	d50f      	bpl.n	800189c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800187c:	6801      	ldr	r1, [r0, #0]
 800187e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001880:	684a      	ldr	r2, [r1, #4]
 8001882:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001886:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001888:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800188c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800188e:	d105      	bne.n	800189c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001890:	684a      	ldr	r2, [r1, #4]
 8001892:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001894:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001898:	4322      	orrs	r2, r4
 800189a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800189c:	061b      	lsls	r3, r3, #24
 800189e:	d506      	bpl.n	80018ae <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80018a0:	6802      	ldr	r2, [r0, #0]
 80018a2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80018a4:	6853      	ldr	r3, [r2, #4]
 80018a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80018aa:	430b      	orrs	r3, r1
 80018ac:	6053      	str	r3, [r2, #4]
 80018ae:	bd10      	pop	{r4, pc}

080018b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80018b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b4:	9d06      	ldr	r5, [sp, #24]
 80018b6:	4604      	mov	r4, r0
 80018b8:	460f      	mov	r7, r1
 80018ba:	4616      	mov	r6, r2
 80018bc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018be:	6821      	ldr	r1, [r4, #0]
 80018c0:	69ca      	ldr	r2, [r1, #28]
 80018c2:	ea37 0302 	bics.w	r3, r7, r2
 80018c6:	bf0c      	ite	eq
 80018c8:	2201      	moveq	r2, #1
 80018ca:	2200      	movne	r2, #0
 80018cc:	42b2      	cmp	r2, r6
 80018ce:	d002      	beq.n	80018d6 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80018d0:	2000      	movs	r0, #0
}
 80018d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80018d6:	1c68      	adds	r0, r5, #1
 80018d8:	d0f2      	beq.n	80018c0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018da:	f7fe fe45 	bl	8000568 <HAL_GetTick>
 80018de:	eba0 0008 	sub.w	r0, r0, r8
 80018e2:	4285      	cmp	r5, r0
 80018e4:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018e6:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018e8:	d300      	bcc.n	80018ec <UART_WaitOnFlagUntilTimeout+0x3c>
 80018ea:	b97d      	cbnz	r5, 800190c <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80018f0:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018f2:	6883      	ldr	r3, [r0, #8]
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80018fa:	2320      	movs	r3, #32
 80018fc:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80018fe:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001900:	2300      	movs	r3, #0
 8001902:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8001906:	2003      	movs	r0, #3
 8001908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800190c:	075a      	lsls	r2, r3, #29
 800190e:	d5d6      	bpl.n	80018be <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001910:	69c3      	ldr	r3, [r0, #28]
 8001912:	051b      	lsls	r3, r3, #20
 8001914:	d5d3      	bpl.n	80018be <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800191a:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001922:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001924:	6883      	ldr	r3, [r0, #8]
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800192c:	2320      	movs	r3, #32
 800192e:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001930:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001932:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001934:	e7e4      	b.n	8001900 <UART_WaitOnFlagUntilTimeout+0x50>

08001936 <UART_CheckIdleState>:
{
 8001936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001938:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800193a:	2600      	movs	r6, #0
 800193c:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800193e:	f7fe fe13 	bl	8000568 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001948:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800194a:	d415      	bmi.n	8001978 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	075b      	lsls	r3, r3, #29
 8001952:	d50a      	bpl.n	800196a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	462b      	mov	r3, r5
 800195e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001962:	4620      	mov	r0, r4
 8001964:	f7ff ffa4 	bl	80018b0 <UART_WaitOnFlagUntilTimeout>
 8001968:	b990      	cbnz	r0, 8001990 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 800196a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800196c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800196e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001970:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001974:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8001976:	e00c      	b.n	8001992 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4632      	mov	r2, r6
 8001980:	4603      	mov	r3, r0
 8001982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff ff92 	bl	80018b0 <UART_WaitOnFlagUntilTimeout>
 800198c:	2800      	cmp	r0, #0
 800198e:	d0dd      	beq.n	800194c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001990:	2003      	movs	r0, #3
}
 8001992:	b002      	add	sp, #8
 8001994:	bd70      	pop	{r4, r5, r6, pc}

08001996 <HAL_UART_Init>:
{
 8001996:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001998:	4604      	mov	r4, r0
 800199a:	b340      	cbz	r0, 80019ee <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800199c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800199e:	b91b      	cbnz	r3, 80019a8 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80019a0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80019a4:	f000 f994 	bl	8001cd0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80019a8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80019aa:	2324      	movs	r3, #36	; 0x24
 80019ac:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80019ae:	6813      	ldr	r3, [r2, #0]
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff fda6 	bl	8001508 <UART_SetConfig>
 80019bc:	2801      	cmp	r0, #1
 80019be:	d016      	beq.n	80019ee <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019c2:	b113      	cbz	r3, 80019ca <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff ff1f 	bl	8001808 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019da:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80019e2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80019e4:	601a      	str	r2, [r3, #0]
}
 80019e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80019ea:	f7ff bfa4 	b.w	8001936 <UART_CheckIdleState>
}
 80019ee:	2001      	movs	r0, #1
 80019f0:	bd10      	pop	{r4, pc}
	...

080019f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	2214      	movs	r2, #20
 80019fa:	2100      	movs	r1, #0
 80019fc:	a803      	add	r0, sp, #12
 80019fe:	f000 fa03 	bl	8001e08 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HeartBeat_GPIO_Port, HeartBeat_Pin, GPIO_PIN_RESET);
 8001a04:	4f21      	ldr	r7, [pc, #132]	; (8001a8c <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);
 8001a08:	4d21      	ldr	r5, [pc, #132]	; (8001a90 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0a:	f042 0204 	orr.w	r2, r2, #4
 8001a0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a12:	f002 0204 	and.w	r2, r2, #4
 8001a16:	9200      	str	r2, [sp, #0]
 8001a18:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a24:	f002 0201 	and.w	r2, r2, #1
 8001a28:	9201      	str	r2, [sp, #4]
 8001a2a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a2e:	f042 0202 	orr.w	r2, r2, #2
 8001a32:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(HeartBeat_GPIO_Port, HeartBeat_Pin, GPIO_PIN_RESET);
 8001a3c:	4638      	mov	r0, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a44:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(HeartBeat_GPIO_Port, HeartBeat_Pin, GPIO_PIN_RESET);
 8001a46:	f7fe febb 	bl	80007c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_CS_GPIO_Port, _CS_Pin, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a52:	f7fe feb5 	bl	80007c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HeartBeat_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = HeartBeat_Pin;
 8001a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HeartBeat_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	a903      	add	r1, sp, #12
 8001a60:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = HeartBeat_Pin;
 8001a62:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(HeartBeat_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f7fe fddf 	bl	800062c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _CS_Pin;
 8001a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(_CS_GPIO_Port, &GPIO_InitStruct);
 8001a72:	a903      	add	r1, sp, #12
 8001a74:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = _CS_Pin;
 8001a76:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(_CS_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f7fe fdd5 	bl	800062c <HAL_GPIO_Init>

}
 8001a82:	b009      	add	sp, #36	; 0x24
 8001a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48000400 	.word	0x48000400

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b510      	push	{r4, lr}
 8001a96:	b0b0      	sub	sp, #192	; 0xc0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a98:	2244      	movs	r2, #68	; 0x44
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	a805      	add	r0, sp, #20
 8001a9e:	f000 f9b3 	bl	8001e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa2:	2214      	movs	r2, #20
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4668      	mov	r0, sp
 8001aa8:	f000 f9ae 	bl	8001e08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aac:	2268      	movs	r2, #104	; 0x68
 8001aae:	2100      	movs	r1, #0
 8001ab0:	a816      	add	r0, sp, #88	; 0x58
 8001ab2:	f000 f9a9 	bl	8001e08 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001ab6:	2310      	movs	r3, #16
 8001ab8:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001aba:	2301      	movs	r3, #1
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001abc:	2400      	movs	r4, #0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001abe:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac0:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ac2:	2360      	movs	r3, #96	; 0x60
 8001ac4:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac6:	f7fe ff4f 	bl	8000968 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001aca:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001acc:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ace:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ad0:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ad6:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad8:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ada:	f7ff f9ef 	bl	8000ebc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001ade:	2303      	movs	r3, #3
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae0:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001ae2:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ae4:	941e      	str	r4, [sp, #120]	; 0x78
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ae6:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae8:	f7ff fb2e 	bl	8001148 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001aec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001af0:	f7fe fe74 	bl	80007dc <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8001af4:	b030      	add	sp, #192	; 0xc0
 8001af6:	bd10      	pop	{r4, pc}

08001af8 <main>:
{
 8001af8:	b508      	push	{r3, lr}
  HAL_Init();
 8001afa:	f7fe fd19 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 8001afe:	f7ff ffc9 	bl	8001a94 <SystemClock_Config>
  MX_GPIO_Init();
 8001b02:	f7ff ff77 	bl	80019f4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001b06:	f000 f807 	bl	8001b18 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001b0a:	f000 f8c3 	bl	8001c94 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001b0e:	f000 f8a3 	bl	8001c58 <MX_USART1_UART_Init>
 8001b12:	e7fe      	b.n	8001b12 <main+0x1a>

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	4770      	bx	lr
	...

08001b18 <MX_SPI2_Init>:

/* SPI2 init function */
void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8001b18:	4810      	ldr	r0, [pc, #64]	; (8001b5c <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b1a:	4911      	ldr	r1, [pc, #68]	; (8001b60 <MX_SPI2_Init+0x48>)
{
 8001b1c:	b508      	push	{r3, lr}
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b1e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b26:	f44f 7e40 	mov.w	lr, #768	; 0x300
 8001b2a:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b2e:	2300      	movs	r3, #0
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b30:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b34:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b36:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b38:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b3a:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b3c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b3e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b40:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b42:	2207      	movs	r2, #7
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b44:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b46:	2308      	movs	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 8001b48:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b4a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b4c:	f7ff fc8a 	bl	8001464 <HAL_SPI_Init>
 8001b50:	b118      	cbz	r0, 8001b5a <MX_SPI2_Init+0x42>
  {
    Error_Handler();
  }

}
 8001b52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001b56:	f7ff bfdd 	b.w	8001b14 <Error_Handler>
 8001b5a:	bd08      	pop	{r3, pc}
 8001b5c:	2000002c 	.word	0x2000002c
 8001b60:	40003800 	.word	0x40003800

08001b64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b64:	b510      	push	{r4, lr}
 8001b66:	4604      	mov	r4, r0
 8001b68:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6a:	2214      	movs	r2, #20
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	a803      	add	r0, sp, #12
 8001b70:	f000 f94a 	bl	8001e08 <memset>
  if(spiHandle->Instance==SPI2)
 8001b74:	6822      	ldr	r2, [r4, #0]
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_SPI_MspInit+0x60>)
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d120      	bne.n	8001bbe <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b7c:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b80:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	4810      	ldr	r0, [pc, #64]	; (8001bc8 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b8a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b8e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b92:	9201      	str	r2, [sp, #4]
 8001b94:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b98:	f042 0202 	orr.w	r2, r2, #2
 8001b9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ba8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001bac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f7fe fd37 	bl	800062c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001bbe:	b008      	add	sp, #32
 8001bc0:	bd10      	pop	{r4, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40003800 	.word	0x40003800
 8001bc8:	48000400 	.word	0x48000400

08001bcc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_MspInit+0x2c>)
 8001bce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	661a      	str	r2, [r3, #96]	; 0x60
 8001bd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001bd8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	f002 0201 	and.w	r2, r2, #1
 8001bde:	9200      	str	r2, [sp, #0]
 8001be0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001be4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001be8:	659a      	str	r2, [r3, #88]	; 0x58
 8001bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf4:	b002      	add	sp, #8
 8001bf6:	4770      	bx	lr
 8001bf8:	40021000 	.word	0x40021000

08001bfc <NMI_Handler>:
 8001bfc:	4770      	bx	lr

08001bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfe:	e7fe      	b.n	8001bfe <HardFault_Handler>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	e7fe      	b.n	8001c00 <MemManage_Handler>

08001c02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler>

08001c06 <SVC_Handler>:
 8001c06:	4770      	bx	lr

08001c08 <DebugMon_Handler>:
 8001c08:	4770      	bx	lr

08001c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0c:	f7fe bca0 	b.w	8000550 <HAL_IncTick>

08001c10 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c10:	490f      	ldr	r1, [pc, #60]	; (8001c50 <SystemInit+0x40>)
 8001c12:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <SystemInit+0x44>)
 8001c20:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c22:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001c2a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001c32:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001c36:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c44:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c46:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c4c:	608b      	str	r3, [r1, #8]
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	40021000 	.word	0x40021000

08001c58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c58:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001c5a:	480c      	ldr	r0, [pc, #48]	; (8001c8c <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_USART1_UART_Init+0x38>)
 8001c5e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001c62:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c66:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c6c:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c6e:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c70:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c76:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c78:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c7a:	f7ff fe8c 	bl	8001996 <HAL_UART_Init>
 8001c7e:	b118      	cbz	r0, 8001c88 <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8001c80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001c84:	f7ff bf46 	b.w	8001b14 <Error_Handler>
 8001c88:	bd08      	pop	{r3, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000090 	.word	0x20000090
 8001c90:	40013800 	.word	0x40013800

08001c94 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c94:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001c96:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <MX_USART2_UART_Init+0x38>)
 8001c9a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001c9e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca2:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca8:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001caa:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cac:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb6:	f7ff fe6e 	bl	8001996 <HAL_UART_Init>
 8001cba:	b118      	cbz	r0, 8001cc4 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8001cbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001cc0:	f7ff bf28 	b.w	8001b14 <Error_Handler>
 8001cc4:	bd08      	pop	{r3, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000110 	.word	0x20000110
 8001ccc:	40004400 	.word	0x40004400

08001cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cd0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	2214      	movs	r2, #20
{
 8001cd4:	b08a      	sub	sp, #40	; 0x28
 8001cd6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	2100      	movs	r1, #0
 8001cda:	eb0d 0002 	add.w	r0, sp, r2
 8001cde:	f000 f893 	bl	8001e08 <memset>
  if(uartHandle->Instance==USART1)
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	4a1e      	ldr	r2, [pc, #120]	; (8001d60 <HAL_UART_MspInit+0x90>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d122      	bne.n	8001d30 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_UART_MspInit+0x94>)
 8001cec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cf2:	661a      	str	r2, [r3, #96]	; 0x60
 8001cf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cf6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001cfa:	9201      	str	r2, [sp, #4]
 8001cfc:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	9302      	str	r3, [sp, #8]
 8001d0e:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d14:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d20:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d26:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f7fe fc80 	bl	800062c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d2c:	b00a      	add	sp, #40	; 0x28
 8001d2e:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART2)
 8001d30:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <HAL_UART_MspInit+0x98>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d1fa      	bne.n	8001d2c <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_UART_MspInit+0x94>)
 8001d38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d3a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d42:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001d46:	9203      	str	r2, [sp, #12]
 8001d48:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	9304      	str	r3, [sp, #16]
 8001d5a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	e7d9      	b.n	8001d14 <HAL_UART_MspInit+0x44>
 8001d60:	40013800 	.word	0x40013800
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40004400 	.word	0x40004400

08001d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d72:	e003      	b.n	8001d7c <LoopCopyDataInit>

08001d74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d7a:	3104      	adds	r1, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d7c:	480b      	ldr	r0, [pc, #44]	; (8001dac <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d84:	d3f6      	bcc.n	8001d74 <CopyDataInit>
	ldr	r2, =_sbss
 8001d86:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d88:	e002      	b.n	8001d90 <LoopFillZerobss>

08001d8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d8c:	f842 3b04 	str.w	r3, [r2], #4

08001d90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <LoopForever+0x16>)
	cmp	r2, r3
 8001d92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d94:	d3f9      	bcc.n	8001d8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d96:	f7ff ff3b 	bl	8001c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f000 f811 	bl	8001dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d9e:	f7ff feab 	bl	8001af8 <main>

08001da2 <LoopForever>:

LoopForever:
    b LoopForever
 8001da2:	e7fe      	b.n	8001da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001da4:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8001da8:	08001e9c 	.word	0x08001e9c
	ldr	r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001db0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001db4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001db8:	20000190 	.word	0x20000190

08001dbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC1_IRQHandler>
	...

08001dc0 <__libc_init_array>:
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	4e0d      	ldr	r6, [pc, #52]	; (8001df8 <__libc_init_array+0x38>)
 8001dc4:	4c0d      	ldr	r4, [pc, #52]	; (8001dfc <__libc_init_array+0x3c>)
 8001dc6:	1ba4      	subs	r4, r4, r6
 8001dc8:	10a4      	asrs	r4, r4, #2
 8001dca:	2500      	movs	r5, #0
 8001dcc:	42a5      	cmp	r5, r4
 8001dce:	d109      	bne.n	8001de4 <__libc_init_array+0x24>
 8001dd0:	4e0b      	ldr	r6, [pc, #44]	; (8001e00 <__libc_init_array+0x40>)
 8001dd2:	4c0c      	ldr	r4, [pc, #48]	; (8001e04 <__libc_init_array+0x44>)
 8001dd4:	f000 f820 	bl	8001e18 <_init>
 8001dd8:	1ba4      	subs	r4, r4, r6
 8001dda:	10a4      	asrs	r4, r4, #2
 8001ddc:	2500      	movs	r5, #0
 8001dde:	42a5      	cmp	r5, r4
 8001de0:	d105      	bne.n	8001dee <__libc_init_array+0x2e>
 8001de2:	bd70      	pop	{r4, r5, r6, pc}
 8001de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001de8:	4798      	blx	r3
 8001dea:	3501      	adds	r5, #1
 8001dec:	e7ee      	b.n	8001dcc <__libc_init_array+0xc>
 8001dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001df2:	4798      	blx	r3
 8001df4:	3501      	adds	r5, #1
 8001df6:	e7f2      	b.n	8001dde <__libc_init_array+0x1e>
 8001df8:	08001e94 	.word	0x08001e94
 8001dfc:	08001e94 	.word	0x08001e94
 8001e00:	08001e94 	.word	0x08001e94
 8001e04:	08001e98 	.word	0x08001e98

08001e08 <memset>:
 8001e08:	4402      	add	r2, r0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d100      	bne.n	8001e12 <memset+0xa>
 8001e10:	4770      	bx	lr
 8001e12:	f803 1b01 	strb.w	r1, [r3], #1
 8001e16:	e7f9      	b.n	8001e0c <memset+0x4>

08001e18 <_init>:
 8001e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1a:	bf00      	nop
 8001e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1e:	bc08      	pop	{r3}
 8001e20:	469e      	mov	lr, r3
 8001e22:	4770      	bx	lr

08001e24 <_fini>:
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e26:	bf00      	nop
 8001e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2a:	bc08      	pop	{r3}
 8001e2c:	469e      	mov	lr, r3
 8001e2e:	4770      	bx	lr
