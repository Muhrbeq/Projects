
4GLL_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800a990  0800a990  0001a990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aba8  0800aba8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800aba8  0800aba8  0001aba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abb0  0800abb0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abb0  0800abb0  0001abb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abb4  0800abb4  0001abb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800abb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c26c  20000078  0800ac30  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c2e4  0800ac30  0002c2e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034e41  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000066ac  00000000  00000000  00054ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002700  00000000  00000000  0005b598  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023b8  00000000  00000000  0005dc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fd11  00000000  00000000  00060050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00027cbb  00000000  00000000  0008fd61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c31a  00000000  00000000  000b7a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c3d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7b0  00000000  00000000  001c3db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a978 	.word	0x0800a978

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800a978 	.word	0x0800a978

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	2003      	movs	r0, #3
 800058c:	f000 ff86 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f80d 	bl	80005b0 <HAL_InitTick>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e001      	b.n	80005a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a2:	f008 fe4f 	bl	8009244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_InitTick+0x68>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d022      	beq.n	800060a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_InitTick+0x6c>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_InitTick+0x68>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 ff86 	bl	80014ea <HAL_SYSTICK_Config>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d809      	bhi.n	80005fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ea:	2200      	movs	r2, #0
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	f000 ff5e 	bl	80014b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <HAL_InitTick+0x70>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e007      	b.n	800060e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e004      	b.n	800060e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e001      	b.n	800060e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000004 	.word	0x20000004
 800061c:	20000010 	.word	0x20000010
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x1c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_IncTick+0x20>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4413      	add	r3, r2
 8000632:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x1c>)
 8000634:	6013      	str	r3, [r2, #0]
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	200002ac 	.word	0x200002ac
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200002ac 	.word	0x200002ac

08000660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000668:	f7ff ffee 	bl	8000648 <HAL_GetTick>
 800066c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000678:	d004      	beq.n	8000684 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_Delay+0x40>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000684:	bf00      	nop
 8000686:	f7ff ffdf 	bl	8000648 <HAL_GetTick>
 800068a:	4602      	mov	r2, r0
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	429a      	cmp	r2, r3
 8000694:	d8f7      	bhi.n	8000686 <HAL_Delay+0x26>
  {
  }
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000004 	.word	0x20000004

080006a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	431a      	orrs	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	609a      	str	r2, [r3, #8]
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	431a      	orrs	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	609a      	str	r2, [r3, #8]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800070c:	b490      	push	{r4, r7}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3360      	adds	r3, #96	; 0x60
 800071e:	461a      	mov	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000728:	6822      	ldr	r2, [r4, #0]
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <LL_ADC_SetOffset+0x40>)
 800072c:	4013      	ands	r3, r2
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	430a      	orrs	r2, r1
 8000738:	4313      	orrs	r3, r2
 800073a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bc90      	pop	{r4, r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	03fff000 	.word	0x03fff000

08000750 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000750:	b490      	push	{r4, r7}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3360      	adds	r3, #96	; 0x60
 800075e:	461a      	mov	r2, r3
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000768:	6823      	ldr	r3, [r4, #0]
 800076a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bc90      	pop	{r4, r7}
 8000776:	4770      	bx	lr

08000778 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000778:	b490      	push	{r4, r7}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3360      	adds	r3, #96	; 0x60
 8000788:	461a      	mov	r2, r3
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4413      	add	r3, r2
 8000790:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000792:	6823      	ldr	r3, [r4, #0]
 8000794:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4313      	orrs	r3, r2
 800079c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc90      	pop	{r4, r7}
 80007a6:	4770      	bx	lr

080007a8 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	431a      	orrs	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	615a      	str	r2, [r3, #20]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80007ce:	b490      	push	{r4, r7}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3330      	adds	r3, #48	; 0x30
 80007de:	461a      	mov	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	0a1b      	lsrs	r3, r3, #8
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	f003 030c 	and.w	r3, r3, #12
 80007ea:	4413      	add	r3, r2
 80007ec:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80007ee:	6822      	ldr	r2, [r4, #0]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	f003 031f 	and.w	r3, r3, #31
 80007f6:	211f      	movs	r1, #31
 80007f8:	fa01 f303 	lsl.w	r3, r1, r3
 80007fc:	43db      	mvns	r3, r3
 80007fe:	401a      	ands	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	0e9b      	lsrs	r3, r3, #26
 8000804:	f003 011f 	and.w	r1, r3, #31
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bc90      	pop	{r4, r7}
 800081e:	4770      	bx	lr

08000820 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000820:	b490      	push	{r4, r7}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3314      	adds	r3, #20
 8000830:	461a      	mov	r2, r3
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	0e5b      	lsrs	r3, r3, #25
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	4413      	add	r3, r2
 800083e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000840:	6822      	ldr	r2, [r4, #0]
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	0d1b      	lsrs	r3, r3, #20
 8000846:	f003 031f 	and.w	r3, r3, #31
 800084a:	2107      	movs	r1, #7
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	401a      	ands	r2, r3
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	0d1b      	lsrs	r3, r3, #20
 8000858:	f003 031f 	and.w	r3, r3, #31
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bc90      	pop	{r4, r7}
 800086e:	4770      	bx	lr

08000870 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000888:	43db      	mvns	r3, r3
 800088a:	401a      	ands	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f003 0318 	and.w	r3, r3, #24
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000894:	40d9      	lsrs	r1, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	400b      	ands	r3, r1
 800089a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800089e:	431a      	orrs	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	0007ffff 	.word	0x0007ffff

080008b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80008c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	6093      	str	r3, [r2, #8]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008f0:	d101      	bne.n	80008f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000914:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000918:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000940:	d101      	bne.n	8000946 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b01      	cmp	r3, #1
 8000966:	d101      	bne.n	800096c <LL_ADC_IsEnabled+0x18>
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <LL_ADC_IsEnabled+0x1a>
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	2b04      	cmp	r3, #4
 800098c:	d101      	bne.n	8000992 <LL_ADC_REG_IsConversionOngoing+0x18>
 800098e:	2301      	movs	r3, #1
 8000990:	e000      	b.n	8000994 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	2b08      	cmp	r3, #8
 80009b2:	d101      	bne.n	80009b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e12d      	b.n	8000c3e <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d109      	bne.n	8000a04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f007 fc0f 	bl	8008214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff67 	bl	80008dc <LL_ADC_IsDeepPowerDownEnabled>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d004      	beq.n	8000a1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff4d 	bl	80008b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff82 	bl	800092c <LL_ADC_IsInternalRegulatorEnabled>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d113      	bne.n	8000a56 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff66 	bl	8000904 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000a38:	4b83      	ldr	r3, [pc, #524]	; (8000c48 <HAL_ADC_Init+0x280>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	099b      	lsrs	r3, r3, #6
 8000a3e:	4a83      	ldr	r2, [pc, #524]	; (8000c4c <HAL_ADC_Init+0x284>)
 8000a40:	fba2 2303 	umull	r2, r3, r2, r3
 8000a44:	099b      	lsrs	r3, r3, #6
 8000a46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a48:	e002      	b.n	8000a50 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1f9      	bne.n	8000a4a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff66 	bl	800092c <LL_ADC_IsInternalRegulatorEnabled>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10d      	bne.n	8000a82 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	f043 0210 	orr.w	r2, r3, #16
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a76:	f043 0201 	orr.w	r2, r3, #1
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff77 	bl	800097a <LL_ADC_REG_IsConversionOngoing>
 8000a8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 80c8 	bne.w	8000c2c <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f040 80c4 	bne.w	8000c2c <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000aac:	f043 0202 	orr.w	r2, r3, #2
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff4b 	bl	8000954 <LL_ADC_IsEnabled>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10b      	bne.n	8000adc <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ac4:	4862      	ldr	r0, [pc, #392]	; (8000c50 <HAL_ADC_Init+0x288>)
 8000ac6:	f7ff ff45 	bl	8000954 <LL_ADC_IsEnabled>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d105      	bne.n	8000adc <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	485f      	ldr	r0, [pc, #380]	; (8000c54 <HAL_ADC_Init+0x28c>)
 8000ad8:	f7ff fde4 	bl	80006a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7e5b      	ldrb	r3, [r3, #25]
 8000ae0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ae6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000aec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000af2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000afa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000afc:	4313      	orrs	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d106      	bne.n	8000b18 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	045b      	lsls	r3, r3, #17
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d009      	beq.n	8000b34 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b24:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	4b47      	ldr	r3, [pc, #284]	; (8000c58 <HAL_ADC_Init+0x290>)
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	69b9      	ldr	r1, [r7, #24]
 8000b44:	430b      	orrs	r3, r1
 8000b46:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff14 	bl	800097a <LL_ADC_REG_IsConversionOngoing>
 8000b52:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff21 	bl	80009a0 <LL_ADC_INJ_IsConversionOngoing>
 8000b5e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d140      	bne.n	8000be8 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d13d      	bne.n	8000be8 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7e1b      	ldrb	r3, [r3, #24]
 8000b74:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000b76:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b7e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b8e:	f023 0306 	bic.w	r3, r3, #6
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	69b9      	ldr	r1, [r7, #24]
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d118      	bne.n	8000bd8 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000bb0:	f023 0304 	bic.w	r3, r3, #4
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bbc:	4311      	orrs	r1, r2
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000bc2:	4311      	orrs	r1, r2
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f042 0201 	orr.w	r2, r2, #1
 8000bd4:	611a      	str	r2, [r3, #16]
 8000bd6:	e007      	b.n	8000be8 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f022 0201 	bic.w	r2, r2, #1
 8000be6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d10c      	bne.n	8000c0a <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f023 010f 	bic.w	r1, r3, #15
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	1e5a      	subs	r2, r3, #1
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	631a      	str	r2, [r3, #48]	; 0x30
 8000c08:	e007      	b.n	8000c1a <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 020f 	bic.w	r2, r2, #15
 8000c18:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	f023 0303 	bic.w	r3, r3, #3
 8000c22:	f043 0201 	orr.w	r2, r3, #1
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	659a      	str	r2, [r3, #88]	; 0x58
 8000c2a:	e007      	b.n	8000c3c <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c30:	f043 0210 	orr.w	r2, r3, #16
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000010 	.word	0x20000010
 8000c4c:	053e2d63 	.word	0x053e2d63
 8000c50:	50040000 	.word	0x50040000
 8000c54:	50040300 	.word	0x50040300
 8000c58:	fff0c007 	.word	0xfff0c007

08000c5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0a6      	sub	sp, #152	; 0x98
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d101      	bne.n	8000c7e <HAL_ADC_ConfigChannel+0x22>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e352      	b.n	8001324 <HAL_ADC_ConfigChannel+0x6c8>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fe75 	bl	800097a <LL_ADC_REG_IsConversionOngoing>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8337 	bne.w	8001306 <HAL_ADC_ConfigChannel+0x6aa>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	d824      	bhi.n	8000cea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d81b      	bhi.n	8000ce2 <HAL_ADC_ConfigChannel+0x86>
 8000caa:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <HAL_ADC_ConfigChannel+0x54>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000cc1 	.word	0x08000cc1
 8000cb4:	08000cc9 	.word	0x08000cc9
 8000cb8:	08000cd1 	.word	0x08000cd1
 8000cbc:	08000cd9 	.word	0x08000cd9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	e011      	b.n	8000cec <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2212      	movs	r2, #18
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	e00d      	b.n	8000cec <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2218      	movs	r2, #24
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	e009      	b.n	8000cec <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	e004      	b.n	8000cec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	2206      	movs	r2, #6
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	e000      	b.n	8000cec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000cea:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	6859      	ldr	r1, [r3, #4]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f7ff fd68 	bl	80007ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fe39 	bl	800097a <LL_ADC_REG_IsConversionOngoing>
 8000d08:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fe45 	bl	80009a0 <LL_ADC_INJ_IsConversionOngoing>
 8000d16:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8163 	bne.w	8000fea <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f040 815e 	bne.w	8000fea <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d36:	d10f      	bne.n	8000d58 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	4619      	mov	r1, r3
 8000d44:	f7ff fd6c 	bl	8000820 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fd29 	bl	80007a8 <LL_ADC_SetSamplingTimeCommonConfig>
 8000d56:	e00e      	b.n	8000d76 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	6819      	ldr	r1, [r3, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	461a      	mov	r2, r3
 8000d66:	f7ff fd5b 	bl	8000820 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fd19 	bl	80007a8 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	695a      	ldr	r2, [r3, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	08db      	lsrs	r3, r3, #3
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d00a      	beq.n	8000dae <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6919      	ldr	r1, [r3, #16]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000da8:	f7ff fcb0 	bl	800070c <LL_ADC_SetOffset>
 8000dac:	e11d      	b.n	8000fea <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fccb 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10a      	bne.n	8000dda <HAL_ADC_ConfigChannel+0x17e>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fcc0 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	0e9b      	lsrs	r3, r3, #26
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	e012      	b.n	8000e00 <HAL_ADC_ConfigChannel+0x1a4>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fcb5 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000df0:	fa93 f3a3 	rbit	r3, r3
 8000df4:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000df6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000df8:	fab3 f383 	clz	r3, r3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	461a      	mov	r2, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <HAL_ADC_ConfigChannel+0x1bc>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	0e9b      	lsrs	r3, r3, #26
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	e00a      	b.n	8000e2e <HAL_ADC_ConfigChannel+0x1d2>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e20:	fa93 f3a3 	rbit	r3, r3
 8000e24:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e28:	fab3 f383 	clz	r3, r3
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d106      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fc9c 	bl	8000778 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2101      	movs	r1, #1
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fc82 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10a      	bne.n	8000e6c <HAL_ADC_ConfigChannel+0x210>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fc77 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	0e9b      	lsrs	r3, r3, #26
 8000e66:	f003 021f 	and.w	r2, r3, #31
 8000e6a:	e010      	b.n	8000e8e <HAL_ADC_ConfigChannel+0x232>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc6c 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e86:	fab3 f383 	clz	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d105      	bne.n	8000ea6 <HAL_ADC_ConfigChannel+0x24a>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	0e9b      	lsrs	r3, r3, #26
 8000ea0:	f003 031f 	and.w	r3, r3, #31
 8000ea4:	e00a      	b.n	8000ebc <HAL_ADC_ConfigChannel+0x260>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000eae:	fa93 f3a3 	rbit	r3, r3
 8000eb2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d106      	bne.n	8000ece <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fc55 	bl	8000778 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fc3b 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10a      	bne.n	8000efa <HAL_ADC_ConfigChannel+0x29e>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fc30 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	0e9b      	lsrs	r3, r3, #26
 8000ef4:	f003 021f 	and.w	r2, r3, #31
 8000ef8:	e010      	b.n	8000f1c <HAL_ADC_ConfigChannel+0x2c0>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2102      	movs	r1, #2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fc25 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f0c:	fa93 f3a3 	rbit	r3, r3
 8000f10:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f14:	fab3 f383 	clz	r3, r3
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d105      	bne.n	8000f34 <HAL_ADC_ConfigChannel+0x2d8>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0e9b      	lsrs	r3, r3, #26
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	e00a      	b.n	8000f4a <HAL_ADC_ConfigChannel+0x2ee>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f44:	fab3 f383 	clz	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d106      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2200      	movs	r2, #0
 8000f54:	2102      	movs	r1, #2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fc0e 	bl	8000778 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2103      	movs	r1, #3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fbf4 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10a      	bne.n	8000f88 <HAL_ADC_ConfigChannel+0x32c>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2103      	movs	r1, #3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fbe9 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	0e9b      	lsrs	r3, r3, #26
 8000f82:	f003 021f 	and.w	r2, r3, #31
 8000f86:	e010      	b.n	8000faa <HAL_ADC_ConfigChannel+0x34e>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fbde 	bl	8000750 <LL_ADC_GetOffsetChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f9a:	fa93 f3a3 	rbit	r3, r3
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fa2:	fab3 f383 	clz	r3, r3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d105      	bne.n	8000fc2 <HAL_ADC_ConfigChannel+0x366>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	0e9b      	lsrs	r3, r3, #26
 8000fbc:	f003 031f 	and.w	r3, r3, #31
 8000fc0:	e00a      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x37c>
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fd2:	fab3 f383 	clz	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d106      	bne.n	8000fea <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2103      	movs	r1, #3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fbc7 	bl	8000778 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fcb0 	bl	8000954 <LL_ADC_IsEnabled>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 810c 	bne.w	8001214 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	461a      	mov	r2, r3
 800100a:	f7ff fc31 	bl	8000870 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	4aa8      	ldr	r2, [pc, #672]	; (80012b4 <HAL_ADC_ConfigChannel+0x658>)
 8001014:	4293      	cmp	r3, r2
 8001016:	f040 80fd 	bne.w	8001214 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10b      	bne.n	8001042 <HAL_ADC_ConfigChannel+0x3e6>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	0e9b      	lsrs	r3, r3, #26
 8001030:	3301      	adds	r3, #1
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	2b09      	cmp	r3, #9
 8001038:	bf94      	ite	ls
 800103a:	2301      	movls	r3, #1
 800103c:	2300      	movhi	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	e012      	b.n	8001068 <HAL_ADC_ConfigChannel+0x40c>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001052:	fab3 f383 	clz	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3301      	adds	r3, #1
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	2b09      	cmp	r3, #9
 8001060:	bf94      	ite	ls
 8001062:	2301      	movls	r3, #1
 8001064:	2300      	movhi	r3, #0
 8001066:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001068:	2b00      	cmp	r3, #0
 800106a:	d064      	beq.n	8001136 <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001074:	2b00      	cmp	r3, #0
 8001076:	d107      	bne.n	8001088 <HAL_ADC_ConfigChannel+0x42c>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0e9b      	lsrs	r3, r3, #26
 800107e:	3301      	adds	r3, #1
 8001080:	069b      	lsls	r3, r3, #26
 8001082:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001086:	e00e      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x44a>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001090:	fa93 f3a3 	rbit	r3, r3
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	069b      	lsls	r3, r3, #26
 80010a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x46a>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	0e9b      	lsrs	r3, r3, #26
 80010b8:	3301      	adds	r3, #1
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	e010      	b.n	80010e8 <HAL_ADC_ConfigChannel+0x48c>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	fab3 f383 	clz	r3, r3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	2101      	movs	r1, #1
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	ea42 0103 	orr.w	r1, r2, r3
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10a      	bne.n	800110e <HAL_ADC_ConfigChannel+0x4b2>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	0e9b      	lsrs	r3, r3, #26
 80010fe:	3301      	adds	r3, #1
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	051b      	lsls	r3, r3, #20
 800110c:	e011      	b.n	8001132 <HAL_ADC_ConfigChannel+0x4d6>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	fab3 f383 	clz	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	3301      	adds	r3, #1
 8001126:	f003 021f 	and.w	r2, r3, #31
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001132:	430b      	orrs	r3, r1
 8001134:	e069      	b.n	800120a <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800113e:	2b00      	cmp	r3, #0
 8001140:	d107      	bne.n	8001152 <HAL_ADC_ConfigChannel+0x4f6>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	0e9b      	lsrs	r3, r3, #26
 8001148:	3301      	adds	r3, #1
 800114a:	069b      	lsls	r3, r3, #26
 800114c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001150:	e00e      	b.n	8001170 <HAL_ADC_ConfigChannel+0x514>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	61fb      	str	r3, [r7, #28]
  return result;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	fab3 f383 	clz	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3301      	adds	r3, #1
 800116a:	069b      	lsls	r3, r3, #26
 800116c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001178:	2b00      	cmp	r3, #0
 800117a:	d109      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x534>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	0e9b      	lsrs	r3, r3, #26
 8001182:	3301      	adds	r3, #1
 8001184:	f003 031f 	and.w	r3, r3, #31
 8001188:	2101      	movs	r1, #1
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	e010      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x556>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	fa93 f3a3 	rbit	r3, r3
 800119c:	617b      	str	r3, [r7, #20]
  return result;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fab3 f383 	clz	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	3301      	adds	r3, #1
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	ea42 0103 	orr.w	r1, r2, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10d      	bne.n	80011de <HAL_ADC_ConfigChannel+0x582>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0e9b      	lsrs	r3, r3, #26
 80011c8:	3301      	adds	r3, #1
 80011ca:	f003 021f 	and.w	r2, r3, #31
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	3b1e      	subs	r3, #30
 80011d6:	051b      	lsls	r3, r3, #20
 80011d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011dc:	e014      	b.n	8001208 <HAL_ADC_ConfigChannel+0x5ac>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	60fb      	str	r3, [r7, #12]
  return result;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	fab3 f383 	clz	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3301      	adds	r3, #1
 80011f6:	f003 021f 	and.w	r2, r3, #31
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	3b1e      	subs	r3, #30
 8001202:	051b      	lsls	r3, r3, #20
 8001204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001208:	430b      	orrs	r3, r1
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	6892      	ldr	r2, [r2, #8]
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fb06 	bl	8000820 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <HAL_ADC_ConfigChannel+0x65c>)
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d07b      	beq.n	8001318 <HAL_ADC_ConfigChannel+0x6bc>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001220:	4826      	ldr	r0, [pc, #152]	; (80012bc <HAL_ADC_ConfigChannel+0x660>)
 8001222:	f7ff fa65 	bl	80006f0 <LL_ADC_GetCommonPathInternalCh>
 8001226:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a24      	ldr	r2, [pc, #144]	; (80012c0 <HAL_ADC_ConfigChannel+0x664>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d126      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x626>
 8001234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d120      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x626>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <HAL_ADC_ConfigChannel+0x668>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d166      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800124a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800124e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001252:	4619      	mov	r1, r3
 8001254:	4819      	ldr	r0, [pc, #100]	; (80012bc <HAL_ADC_ConfigChannel+0x660>)
 8001256:	f7ff fa38 	bl	80006ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_ADC_ConfigChannel+0x66c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	099b      	lsrs	r3, r3, #6
 8001260:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <HAL_ADC_ConfigChannel+0x670>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	099a      	lsrs	r2, r3, #6
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001272:	e002      	b.n	800127a <HAL_ADC_ConfigChannel+0x61e>
          {
            wait_loop_index--;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	3b01      	subs	r3, #1
 8001278:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f9      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x618>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001280:	e04a      	b.n	8001318 <HAL_ADC_ConfigChannel+0x6bc>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <HAL_ADC_ConfigChannel+0x674>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d123      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x678>
 800128c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d11d      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <HAL_ADC_ConfigChannel+0x668>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d13a      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012aa:	4619      	mov	r1, r3
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <HAL_ADC_ConfigChannel+0x660>)
 80012ae:	f7ff fa0c 	bl	80006ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012b2:	e031      	b.n	8001318 <HAL_ADC_ConfigChannel+0x6bc>
 80012b4:	407f0000 	.word	0x407f0000
 80012b8:	80080000 	.word	0x80080000
 80012bc:	50040300 	.word	0x50040300
 80012c0:	c7520000 	.word	0xc7520000
 80012c4:	50040000 	.word	0x50040000
 80012c8:	20000010 	.word	0x20000010
 80012cc:	053e2d63 	.word	0x053e2d63
 80012d0:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_ADC_ConfigChannel+0x6d0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d11c      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x6bc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80012de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d116      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x6bc>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_ADC_ConfigChannel+0x6d4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d111      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <HAL_ADC_ConfigChannel+0x6d8>)
 8001300:	f7ff f9e3 	bl	80006ca <LL_ADC_SetCommonPathInternalCh>
 8001304:	e008      	b.n	8001318 <HAL_ADC_ConfigChannel+0x6bc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	f043 0220 	orr.w	r2, r3, #32
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001320:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001324:	4618      	mov	r0, r3
 8001326:	3798      	adds	r7, #152	; 0x98
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	80000001 	.word	0x80000001
 8001330:	50040000 	.word	0x50040000
 8001334:	50040300 	.word	0x50040300

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff8e 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff47 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff5c 	bl	8001380 <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff8e 	bl	80013f0 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5d 	bl	800139c <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffb0 	bl	8001458 <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e054      	b.n	80015c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7f5b      	ldrb	r3, [r3, #29]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d105      	bne.n	800152c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f006 ff68 	bl	80083fc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10c      	bne.n	8001554 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <HAL_CRC_Init+0xc4>)
 8001540:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0218 	bic.w	r2, r2, #24
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	e00c      	b.n	800156e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	461a      	mov	r2, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f834 	bl	80015cc <HAL_CRCEx_Polynomial_Set>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e028      	b.n	80015c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	795b      	ldrb	r3, [r3, #5]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d105      	bne.n	8001582 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f04f 32ff 	mov.w	r2, #4294967295
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	e004      	b.n	800158c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6912      	ldr	r2, [r2, #16]
 800158a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699a      	ldr	r2, [r3, #24]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	04c11db7 	.word	0x04c11db7

080015cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80015dc:	231f      	movs	r3, #31
 80015de:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80015e0:	bf00      	nop
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	613a      	str	r2, [r7, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d009      	beq.n	8001600 <HAL_CRCEx_Polynomial_Set+0x34>
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b18      	cmp	r3, #24
 8001604:	d846      	bhi.n	8001694 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001606:	a201      	add	r2, pc, #4	; (adr r2, 800160c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	0800169b 	.word	0x0800169b
 8001610:	08001695 	.word	0x08001695
 8001614:	08001695 	.word	0x08001695
 8001618:	08001695 	.word	0x08001695
 800161c:	08001695 	.word	0x08001695
 8001620:	08001695 	.word	0x08001695
 8001624:	08001695 	.word	0x08001695
 8001628:	08001695 	.word	0x08001695
 800162c:	08001689 	.word	0x08001689
 8001630:	08001695 	.word	0x08001695
 8001634:	08001695 	.word	0x08001695
 8001638:	08001695 	.word	0x08001695
 800163c:	08001695 	.word	0x08001695
 8001640:	08001695 	.word	0x08001695
 8001644:	08001695 	.word	0x08001695
 8001648:	08001695 	.word	0x08001695
 800164c:	0800167d 	.word	0x0800167d
 8001650:	08001695 	.word	0x08001695
 8001654:	08001695 	.word	0x08001695
 8001658:	08001695 	.word	0x08001695
 800165c:	08001695 	.word	0x08001695
 8001660:	08001695 	.word	0x08001695
 8001664:	08001695 	.word	0x08001695
 8001668:	08001695 	.word	0x08001695
 800166c:	08001671 	.word	0x08001671
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	2b06      	cmp	r3, #6
 8001674:	d913      	bls.n	800169e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800167a:	e010      	b.n	800169e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b07      	cmp	r3, #7
 8001680:	d90f      	bls.n	80016a2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001686:	e00c      	b.n	80016a2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	d90b      	bls.n	80016a6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001692:	e008      	b.n	80016a6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	75fb      	strb	r3, [r7, #23]
      break;
 8001698:	e006      	b.n	80016a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800169a:	bf00      	nop
 800169c:	e004      	b.n	80016a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800169e:	bf00      	nop
 80016a0:	e002      	b.n	80016a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016a2:	bf00      	nop
 80016a4:	e000      	b.n	80016a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016a6:	bf00      	nop
  }
  if (status == HAL_OK)
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10d      	bne.n	80016ca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 0118 	bic.w	r1, r3, #24
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	e154      	b.n	8001992 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8146 	beq.w	800198c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d00b      	beq.n	8001720 <HAL_GPIO_Init+0x48>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d007      	beq.n	8001720 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001714:	2b11      	cmp	r3, #17
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b12      	cmp	r3, #18
 800171e:	d130      	bne.n	8001782 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001756:	2201      	movs	r2, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 0201 	and.w	r2, r3, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0xea>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b12      	cmp	r3, #18
 80017c0:	d123      	bne.n	800180a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	08da      	lsrs	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	6939      	ldr	r1, [r7, #16]
 8001806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0203 	and.w	r2, r3, #3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80a0 	beq.w	800198c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184c:	4b58      	ldr	r3, [pc, #352]	; (80019b0 <HAL_GPIO_Init+0x2d8>)
 800184e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001850:	4a57      	ldr	r2, [pc, #348]	; (80019b0 <HAL_GPIO_Init+0x2d8>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6613      	str	r3, [r2, #96]	; 0x60
 8001858:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <HAL_GPIO_Init+0x2d8>)
 800185a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001864:	4a53      	ldr	r2, [pc, #332]	; (80019b4 <HAL_GPIO_Init+0x2dc>)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	3302      	adds	r3, #2
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800188e:	d019      	beq.n	80018c4 <HAL_GPIO_Init+0x1ec>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a49      	ldr	r2, [pc, #292]	; (80019b8 <HAL_GPIO_Init+0x2e0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d013      	beq.n	80018c0 <HAL_GPIO_Init+0x1e8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a48      	ldr	r2, [pc, #288]	; (80019bc <HAL_GPIO_Init+0x2e4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1e4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a47      	ldr	r2, [pc, #284]	; (80019c0 <HAL_GPIO_Init+0x2e8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1e0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a46      	ldr	r2, [pc, #280]	; (80019c4 <HAL_GPIO_Init+0x2ec>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1dc>
 80018b0:	2304      	movs	r3, #4
 80018b2:	e008      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018b4:	2307      	movs	r3, #7
 80018b6:	e006      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018b8:	2303      	movs	r3, #3
 80018ba:	e004      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018bc:	2302      	movs	r3, #2
 80018be:	e002      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018c4:	2300      	movs	r3, #0
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	f002 0203 	and.w	r2, r2, #3
 80018cc:	0092      	lsls	r2, r2, #2
 80018ce:	4093      	lsls	r3, r2
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018d6:	4937      	ldr	r1, [pc, #220]	; (80019b4 <HAL_GPIO_Init+0x2dc>)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3302      	adds	r3, #2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018e4:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001908:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001932:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800195c:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	f47f aea3 	bne.w	80016e8 <HAL_GPIO_Init+0x10>
  }
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010000 	.word	0x40010000
 80019b8:	48000400 	.word	0x48000400
 80019bc:	48000800 	.word	0x48000800
 80019c0:	48000c00 	.word	0x48000c00
 80019c4:	48001000 	.word	0x48001000
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e001      	b.n	80019ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e081      	b.n	8001b12 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f007 f814 	bl	8008a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2224      	movs	r2, #36	; 0x24
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d107      	bne.n	8001a76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	e006      	b.n	8001a84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d104      	bne.n	8001a96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691a      	ldr	r2, [r3, #16]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	ea42 0103 	orr.w	r1, r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	021a      	lsls	r2, r3, #8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69d9      	ldr	r1, [r3, #28]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1a      	ldr	r2, [r3, #32]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d138      	bne.n	8001ba2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e032      	b.n	8001ba4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2224      	movs	r2, #36	; 0x24
 8001b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6819      	ldr	r1, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2220      	movs	r2, #32
 8001b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
  }
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b20      	cmp	r3, #32
 8001bc4:	d139      	bne.n	8001c3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e033      	b.n	8001c3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2224      	movs	r2, #36	; 0x24
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0201 	orr.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
  }
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e038      	b.n	8001ccc <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001c62:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f245 5255 	movw	r2, #21845	; 0x5555
 8001c6c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6852      	ldr	r2, [r2, #4]
 8001c76:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6892      	ldr	r2, [r2, #8]
 8001c80:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001c82:	f7fe fce1 	bl	8000648 <HAL_GetTick>
 8001c86:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001c88:	e008      	b.n	8001c9c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001c8a:	f7fe fcdd 	bl	8000648 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b30      	cmp	r3, #48	; 0x30
 8001c96:	d901      	bls.n	8001c9c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e017      	b.n	8001ccc <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f1      	bne.n	8001c8a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d005      	beq.n	8001cc0 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68d2      	ldr	r2, [r2, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	e004      	b.n	8001cca <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e080      	b.n	8001de8 <HAL_LPTIM_Init+0x114>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f006 ff98 	bl	8008c30 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d004      	beq.n	8001d22 <HAL_LPTIM_Init+0x4e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d20:	d103      	bne.n	8001d2a <HAL_LPTIM_Init+0x56>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f023 031e 	bic.w	r3, r3, #30
 8001d28:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d005      	beq.n	8001d42 <HAL_LPTIM_Init+0x6e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <HAL_LPTIM_Init+0x11c>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d52:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001d58:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001d5e:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001d64:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d004      	beq.n	8001d7e <HAL_LPTIM_Init+0xaa>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d7c:	d107      	bne.n	8001d8e <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001d86:	4313      	orrs	r3, r2
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00a      	beq.n	8001db0 <HAL_LPTIM_Init+0xdc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001da2:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001da8:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <HAL_LPTIM_Init+0x120>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d108      	bne.n	8001dd4 <HAL_LPTIM_Init+0x100>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	621a      	str	r2, [r3, #32]
 8001dd2:	e004      	b.n	8001dde <HAL_LPTIM_Init+0x10a>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ddc:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	ff19f1f8 	.word	0xff19f1f8
 8001df4:	40007c00 	.word	0x40007c00

08001df8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40007000 	.word	0x40007000

08001e18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40007000 	.word	0x40007000

08001e34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e42:	d130      	bne.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e50:	d038      	beq.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2232      	movs	r2, #50	; 0x32
 8001e68:	fb02 f303 	mul.w	r3, r2, r3
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0c9b      	lsrs	r3, r3, #18
 8001e74:	3301      	adds	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e78:	e002      	b.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8c:	d102      	bne.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f2      	bne.n	8001e7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea0:	d110      	bne.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e00f      	b.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb2:	d007      	beq.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	20000010 	.word	0x20000010
 8001edc:	431bde83 	.word	0x431bde83

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f000 bc11 	b.w	8002716 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef4:	4ba0      	ldr	r3, [pc, #640]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efe:	4b9e      	ldr	r3, [pc, #632]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80e4 	beq.w	80020de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_RCC_OscConfig+0x4c>
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	f040 808b 	bne.w	800203a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	f040 8087 	bne.w	800203a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f2c:	4b92      	ldr	r3, [pc, #584]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_OscConfig+0x64>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e3e8      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1a      	ldr	r2, [r3, #32]
 8001f48:	4b8b      	ldr	r3, [pc, #556]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_RCC_OscConfig+0x7e>
 8001f54:	4b88      	ldr	r3, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f5c:	e005      	b.n	8001f6a <HAL_RCC_OscConfig+0x8a>
 8001f5e:	4b86      	ldr	r3, [pc, #536]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d223      	bcs.n	8001fb6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fd78 	bl	8002a68 <RCC_SetFlashLatencyFromMSIRange>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e3c9      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f82:	4b7d      	ldr	r3, [pc, #500]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a7c      	ldr	r2, [pc, #496]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b7a      	ldr	r3, [pc, #488]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4977      	ldr	r1, [pc, #476]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa0:	4b75      	ldr	r3, [pc, #468]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	4972      	ldr	r1, [pc, #456]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	e025      	b.n	8002002 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fb6:	4b70      	ldr	r3, [pc, #448]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a6f      	ldr	r2, [pc, #444]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b6d      	ldr	r3, [pc, #436]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	496a      	ldr	r1, [pc, #424]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd4:	4b68      	ldr	r3, [pc, #416]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	4965      	ldr	r1, [pc, #404]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fd38 	bl	8002a68 <RCC_SetFlashLatencyFromMSIRange>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e389      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002002:	f000 fc6f 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 8002006:	4601      	mov	r1, r0
 8002008:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	4a5a      	ldr	r2, [pc, #360]	; (800217c <HAL_RCC_OscConfig+0x29c>)
 8002014:	5cd3      	ldrb	r3, [r2, r3]
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	fa21 f303 	lsr.w	r3, r1, r3
 800201e:	4a58      	ldr	r2, [pc, #352]	; (8002180 <HAL_RCC_OscConfig+0x2a0>)
 8002020:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002022:	4b58      	ldr	r3, [pc, #352]	; (8002184 <HAL_RCC_OscConfig+0x2a4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fac2 	bl	80005b0 <HAL_InitTick>
 800202c:	4603      	mov	r3, r0
 800202e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d052      	beq.n	80020dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	e36d      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d032      	beq.n	80020a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002042:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a4c      	ldr	r2, [pc, #304]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800204e:	f7fe fafb 	bl	8000648 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002056:	f7fe faf7 	bl	8000648 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e356      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002074:	4b40      	ldr	r3, [pc, #256]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a3f      	ldr	r2, [pc, #252]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 800207a:	f043 0308 	orr.w	r3, r3, #8
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	493a      	ldr	r1, [pc, #232]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002092:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	4935      	ldr	r1, [pc, #212]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
 80020a6:	e01a      	b.n	80020de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020a8:	4b33      	ldr	r3, [pc, #204]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a32      	ldr	r2, [pc, #200]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020b4:	f7fe fac8 	bl	8000648 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020bc:	f7fe fac4 	bl	8000648 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e323      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x1dc>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d073      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_OscConfig+0x21c>
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d10e      	bne.n	8002114 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d10b      	bne.n	8002114 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d063      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d15f      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e300      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d106      	bne.n	800212c <HAL_RCC_OscConfig+0x24c>
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a15      	ldr	r2, [pc, #84]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0x288>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x270>
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a0f      	ldr	r2, [pc, #60]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0x288>
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a08      	ldr	r2, [pc, #32]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a05      	ldr	r2, [pc, #20]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01b      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fa6a 	bl	8000648 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002176:	e010      	b.n	800219a <HAL_RCC_OscConfig+0x2ba>
 8002178:	40021000 	.word	0x40021000
 800217c:	0800aac8 	.word	0x0800aac8
 8002180:	20000010 	.word	0x20000010
 8002184:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7fe fa5e 	bl	8000648 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e2bd      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219a:	4baf      	ldr	r3, [pc, #700]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x2a8>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fa4e 	bl	8000648 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7fe fa4a 	bl	8000648 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e2a9      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c2:	4ba5      	ldr	r3, [pc, #660]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2d0>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d060      	beq.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_OscConfig+0x310>
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d119      	bne.n	800221e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d116      	bne.n	800221e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f0:	4b99      	ldr	r3, [pc, #612]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_OscConfig+0x328>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e286      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b93      	ldr	r3, [pc, #588]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	4990      	ldr	r1, [pc, #576]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	e040      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d023      	beq.n	800226e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002226:	4b8c      	ldr	r3, [pc, #560]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a8b      	ldr	r2, [pc, #556]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe fa09 	bl	8000648 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223a:	f7fe fa05 	bl	8000648 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e264      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224c:	4b82      	ldr	r3, [pc, #520]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b7f      	ldr	r3, [pc, #508]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	497c      	ldr	r1, [pc, #496]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
 800226c:	e018      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226e:	4b7a      	ldr	r3, [pc, #488]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a79      	ldr	r2, [pc, #484]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe f9e5 	bl	8000648 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7fe f9e1 	bl	8000648 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e240      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002294:	4b70      	ldr	r3, [pc, #448]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d03c      	beq.n	8002326 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01c      	beq.n	80022ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b4:	4b68      	ldr	r3, [pc, #416]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80022b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ba:	4a67      	ldr	r2, [pc, #412]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7fe f9c0 	bl	8000648 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022cc:	f7fe f9bc 	bl	8000648 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e21b      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022de:	4b5e      	ldr	r3, [pc, #376]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80022e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ef      	beq.n	80022cc <HAL_RCC_OscConfig+0x3ec>
 80022ec:	e01b      	b.n	8002326 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ee:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80022f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f4:	4a58      	ldr	r2, [pc, #352]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7fe f9a3 	bl	8000648 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002306:	f7fe f99f 	bl	8000648 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1fe      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002318:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ef      	bne.n	8002306 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80a6 	beq.w	8002480 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002334:	2300      	movs	r3, #0
 8002336:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002338:	4b47      	ldr	r3, [pc, #284]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10d      	bne.n	8002360 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	4b44      	ldr	r3, [pc, #272]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	4a43      	ldr	r2, [pc, #268]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234e:	6593      	str	r3, [r2, #88]	; 0x58
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235c:	2301      	movs	r3, #1
 800235e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002360:	4b3e      	ldr	r3, [pc, #248]	; (800245c <HAL_RCC_OscConfig+0x57c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d118      	bne.n	800239e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800236c:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x57c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3a      	ldr	r2, [pc, #232]	; (800245c <HAL_RCC_OscConfig+0x57c>)
 8002372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002376:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002378:	f7fe f966 	bl	8000648 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002380:	f7fe f962 	bl	8000648 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1c1      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002392:	4b32      	ldr	r3, [pc, #200]	; (800245c <HAL_RCC_OscConfig+0x57c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4d8>
 80023a6:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b6:	e024      	b.n	8002402 <HAL_RCC_OscConfig+0x522>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d110      	bne.n	80023e2 <HAL_RCC_OscConfig+0x502>
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	4a24      	ldr	r2, [pc, #144]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	4a20      	ldr	r2, [pc, #128]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e0:	e00f      	b.n	8002402 <HAL_RCC_OscConfig+0x522>
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	4a17      	ldr	r2, [pc, #92]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023fa:	f023 0304 	bic.w	r3, r3, #4
 80023fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d016      	beq.n	8002438 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7fe f91d 	bl	8000648 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe f919 	bl	8000648 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e176      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ed      	beq.n	8002412 <HAL_RCC_OscConfig+0x532>
 8002436:	e01a      	b.n	800246e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe f906 	bl	8000648 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800243e:	e00f      	b.n	8002460 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7fe f902 	bl	8000648 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d906      	bls.n	8002460 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e15f      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002460:	4baa      	ldr	r3, [pc, #680]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1e8      	bne.n	8002440 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800246e:	7ffb      	ldrb	r3, [r7, #31]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002474:	4ba5      	ldr	r3, [pc, #660]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4aa4      	ldr	r2, [pc, #656]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 800247a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d03c      	beq.n	8002506 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01c      	beq.n	80024ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002494:	4b9d      	ldr	r3, [pc, #628]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800249a:	4a9c      	ldr	r2, [pc, #624]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe f8d0 	bl	8000648 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ac:	f7fe f8cc 	bl	8000648 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e12b      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024be:	4b93      	ldr	r3, [pc, #588]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80024c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ef      	beq.n	80024ac <HAL_RCC_OscConfig+0x5cc>
 80024cc:	e01b      	b.n	8002506 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ce:	4b8f      	ldr	r3, [pc, #572]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80024d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024d4:	4a8d      	ldr	r2, [pc, #564]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7fe f8b3 	bl	8000648 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024e6:	f7fe f8af 	bl	8000648 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e10e      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024f8:	4b84      	ldr	r3, [pc, #528]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80024fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ef      	bne.n	80024e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8102 	beq.w	8002714 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	2b02      	cmp	r3, #2
 8002516:	f040 80c5 	bne.w	80026a4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800251a:	4b7c      	ldr	r3, [pc, #496]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0203 	and.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	429a      	cmp	r2, r3
 800252c:	d12c      	bne.n	8002588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	3b01      	subs	r3, #1
 800253a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d123      	bne.n	8002588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d11b      	bne.n	8002588 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d113      	bne.n	8002588 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	085b      	lsrs	r3, r3, #1
 800256c:	3b01      	subs	r3, #1
 800256e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d109      	bne.n	8002588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	3b01      	subs	r3, #1
 8002582:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d067      	beq.n	8002658 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d062      	beq.n	8002654 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800258e:	4b5f      	ldr	r3, [pc, #380]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0bb      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800259e:	4b5b      	ldr	r3, [pc, #364]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5a      	ldr	r2, [pc, #360]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80025a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025aa:	f7fe f84d 	bl	8000648 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7fe f849 	bl	8000648 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0a8      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c4:	4b51      	ldr	r3, [pc, #324]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d0:	4b4e      	ldr	r3, [pc, #312]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	4b4e      	ldr	r3, [pc, #312]	; (8002710 <HAL_RCC_OscConfig+0x830>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025e0:	3a01      	subs	r2, #1
 80025e2:	0112      	lsls	r2, r2, #4
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025ea:	0212      	lsls	r2, r2, #8
 80025ec:	4311      	orrs	r1, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025f2:	0852      	lsrs	r2, r2, #1
 80025f4:	3a01      	subs	r2, #1
 80025f6:	0552      	lsls	r2, r2, #21
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025fe:	0852      	lsrs	r2, r2, #1
 8002600:	3a01      	subs	r2, #1
 8002602:	0652      	lsls	r2, r2, #25
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800260a:	06d2      	lsls	r2, r2, #27
 800260c:	430a      	orrs	r2, r1
 800260e:	493f      	ldr	r1, [pc, #252]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002614:	4b3d      	ldr	r3, [pc, #244]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a3c      	ldr	r2, [pc, #240]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 800261a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002620:	4b3a      	ldr	r3, [pc, #232]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a39      	ldr	r2, [pc, #228]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800262c:	f7fe f80c 	bl	8000648 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe f808 	bl	8000648 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e067      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002652:	e05f      	b.n	8002714 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e05e      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d157      	bne.n	8002714 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a28      	ldr	r2, [pc, #160]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 800266a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a25      	ldr	r2, [pc, #148]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800267c:	f7fd ffe4 	bl	8000648 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fd ffe0 	bl	8000648 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e03f      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x7a4>
 80026a2:	e037      	b.n	8002714 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d02d      	beq.n	8002706 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80026b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	4a11      	ldr	r2, [pc, #68]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80026c8:	f023 0303 	bic.w	r3, r3, #3
 80026cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4a0e      	ldr	r2, [pc, #56]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80026d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fd ffb3 	bl	8000648 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fd ffaf 	bl	8000648 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e00e      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_RCC_OscConfig+0x82c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x806>
 8002704:	e006      	b.n	8002714 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e005      	b.n	8002716 <HAL_RCC_OscConfig+0x836>
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop

08002720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0c8      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d910      	bls.n	8002764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	4961      	ldr	r1, [pc, #388]	; (80028d0 <HAL_RCC_ClockConfig+0x1b0>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b5f      	ldr	r3, [pc, #380]	; (80028d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b0      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d04c      	beq.n	800280a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d107      	bne.n	8002788 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002778:	4b56      	ldr	r3, [pc, #344]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d121      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e09e      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d115      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e092      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d107      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a8:	4b4a      	ldr	r3, [pc, #296]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e086      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b8:	4b46      	ldr	r3, [pc, #280]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e07e      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027c8:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 0203 	bic.w	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	493f      	ldr	r1, [pc, #252]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027da:	f7fd ff35 	bl	8000648 <HAL_GetTick>
 80027de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e2:	f7fd ff31 	bl	8000648 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e066      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f8:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 020c 	and.w	r2, r3, #12
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	429a      	cmp	r2, r3
 8002808:	d1eb      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002816:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	492c      	ldr	r1, [pc, #176]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <HAL_RCC_ClockConfig+0x1b0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d210      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	4924      	ldr	r1, [pc, #144]	; (80028d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e036      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4918      	ldr	r1, [pc, #96]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4910      	ldr	r1, [pc, #64]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002896:	f000 f825 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 800289a:	4601      	mov	r1, r0
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_RCC_ClockConfig+0x1b4>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	4a0c      	ldr	r2, [pc, #48]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	5cd3      	ldrb	r3, [r2, r3]
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	fa21 f303 	lsr.w	r3, r1, r3
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fe78 	bl	80005b0 <HAL_InitTick>
 80028c0:	4603      	mov	r3, r0
 80028c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80028c4:	7afb      	ldrb	r3, [r7, #11]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40021000 	.word	0x40021000
 80028d8:	0800aac8 	.word	0x0800aac8
 80028dc:	20000010 	.word	0x20000010
 80028e0:	20000000 	.word	0x20000000

080028e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f2:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028fc:	4b3a      	ldr	r3, [pc, #232]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x34>
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	2b0c      	cmp	r3, #12
 8002910:	d121      	bne.n	8002956 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d11e      	bne.n	8002956 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002918:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d107      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002924:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	e005      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002934:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002940:	4a2a      	ldr	r2, [pc, #168]	; (80029ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002948:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10d      	bne.n	800296c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002954:	e00a      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b04      	cmp	r3, #4
 800295a:	d102      	bne.n	8002962 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800295c:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	e004      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d101      	bne.n	800296c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800296a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d133      	bne.n	80029da <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d002      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0xa4>
 8002982:	2b03      	cmp	r3, #3
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0xaa>
 8002986:	e005      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800298a:	617b      	str	r3, [r7, #20]
      break;
 800298c:	e005      	b.n	800299a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002990:	617b      	str	r3, [r7, #20]
      break;
 8002992:	e002      	b.n	800299a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	617b      	str	r3, [r7, #20]
      break;
 8002998:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800299a:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	3301      	adds	r3, #1
 80029a6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	fb02 f203 	mul.w	r2, r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	0e5b      	lsrs	r3, r3, #25
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	3301      	adds	r3, #1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029da:	69bb      	ldr	r3, [r7, #24]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3724      	adds	r7, #36	; 0x24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40021000 	.word	0x40021000
 80029ec:	0800aae0 	.word	0x0800aae0
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	007a1200 	.word	0x007a1200

080029f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000010 	.word	0x20000010

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a14:	f7ff fff0 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a18:	4601      	mov	r1, r0
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	0800aad8 	.word	0x0800aad8

08002a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a40:	f7ff ffda 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a44:	4601      	mov	r1, r0
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	0adb      	lsrs	r3, r3, #11
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	0800aad8 	.word	0x0800aad8

08002a68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a74:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a80:	f7ff f9ca 	bl	8001e18 <HAL_PWREx_GetVoltageRange>
 8002a84:	6178      	str	r0, [r7, #20]
 8002a86:	e014      	b.n	8002ab2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	4a24      	ldr	r2, [pc, #144]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a92:	6593      	str	r3, [r2, #88]	; 0x58
 8002a94:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002aa0:	f7ff f9ba 	bl	8001e18 <HAL_PWREx_GetVoltageRange>
 8002aa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab8:	d10b      	bne.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d919      	bls.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ac4:	d902      	bls.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	e013      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002acc:	2301      	movs	r3, #1
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	e010      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d902      	bls.n	8002ade <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ad8:	2303      	movs	r3, #3
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	e00a      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d102      	bne.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e004      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b70      	cmp	r3, #112	; 0x70
 8002aee:	d101      	bne.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002af0:	2301      	movs	r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 0207 	bic.w	r2, r3, #7
 8002afc:	4909      	ldr	r1, [pc, #36]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b04:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d001      	beq.n	8002b16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40022000 	.word	0x40022000

08002b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b30:	2300      	movs	r3, #0
 8002b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b34:	2300      	movs	r3, #0
 8002b36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d02f      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b4c:	d005      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002b4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b52:	d015      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b58:	e00f      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b5a:	4b5d      	ldr	r3, [pc, #372]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4a5c      	ldr	r2, [pc, #368]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b66:	e00c      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fa44 	bl	8002ffc <RCCEx_PLLSAI1_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b78:	e003      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b7e:	e000      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10b      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b88:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	494e      	ldr	r1, [pc, #312]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b9e:	e001      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 809e 	beq.w	8002cee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bb6:	4b46      	ldr	r3, [pc, #280]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bcc:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd8:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be4:	2301      	movs	r3, #1
 8002be6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be8:	4b3a      	ldr	r3, [pc, #232]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a39      	ldr	r2, [pc, #228]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bf4:	f7fd fd28 	bl	8000648 <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bfa:	e009      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfc:	f7fd fd24 	bl	8000648 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d902      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	74fb      	strb	r3, [r7, #19]
        break;
 8002c0e:	e005      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c10:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ef      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d15a      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c22:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01e      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d019      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c48:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c4a:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c6a:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d016      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fd fce4 	bl	8000648 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c82:	e00b      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7fd fce0 	bl	8000648 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d902      	bls.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	74fb      	strb	r3, [r7, #19]
            break;
 8002c9a:	e006      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0ec      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cbe:	4904      	ldr	r1, [pc, #16]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cc6:	e009      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cc8:	7cfb      	ldrb	r3, [r7, #19]
 8002cca:	74bb      	strb	r3, [r7, #18]
 8002ccc:	e006      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cdc:	7c7b      	ldrb	r3, [r7, #17]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d105      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce2:	4b9e      	ldr	r3, [pc, #632]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	4a9d      	ldr	r2, [pc, #628]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cfa:	4b98      	ldr	r3, [pc, #608]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	f023 0203 	bic.w	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4994      	ldr	r1, [pc, #592]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d1c:	4b8f      	ldr	r3, [pc, #572]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f023 020c 	bic.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	498c      	ldr	r1, [pc, #560]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d3e:	4b87      	ldr	r3, [pc, #540]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	4983      	ldr	r1, [pc, #524]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d60:	4b7e      	ldr	r3, [pc, #504]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	497b      	ldr	r1, [pc, #492]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d82:	4b76      	ldr	r3, [pc, #472]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4972      	ldr	r1, [pc, #456]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002da4:	4b6d      	ldr	r3, [pc, #436]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	496a      	ldr	r1, [pc, #424]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dc6:	4b65      	ldr	r3, [pc, #404]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd4:	4961      	ldr	r1, [pc, #388]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de8:	4b5c      	ldr	r3, [pc, #368]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	4959      	ldr	r1, [pc, #356]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e0a:	4b54      	ldr	r3, [pc, #336]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	4950      	ldr	r1, [pc, #320]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e2c:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	4948      	ldr	r1, [pc, #288]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e4e:	4b43      	ldr	r3, [pc, #268]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e54:	f023 0203 	bic.w	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	493f      	ldr	r1, [pc, #252]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d028      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e70:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	4937      	ldr	r1, [pc, #220]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e90:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e9a:	60d3      	str	r3, [r2, #12]
 8002e9c:	e011      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	2101      	movs	r1, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f8a4 	bl	8002ffc <RCCEx_PLLSAI1_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8002ebe:	7cfb      	ldrb	r3, [r7, #19]
 8002ec0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d028      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ece:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	491f      	ldr	r1, [pc, #124]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eec:	d106      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eee:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ef4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ef8:	60d3      	str	r3, [r2, #12]
 8002efa:	e011      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f875 	bl	8002ffc <RCCEx_PLLSAI1_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d02b      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	4908      	ldr	r1, [pc, #32]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f4a:	d109      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a02      	ldr	r2, [pc, #8]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f56:	60d3      	str	r3, [r2, #12]
 8002f58:	e014      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	2101      	movs	r1, #1
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 f843 	bl	8002ffc <RCCEx_PLLSAI1_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f7a:	7cfb      	ldrb	r3, [r7, #19]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01c      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	4916      	ldr	r1, [pc, #88]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fae:	d10c      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f820 	bl	8002ffc <RCCEx_PLLSAI1_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8002fc6:	7cfb      	ldrb	r3, [r7, #19]
 8002fc8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe4:	4904      	ldr	r1, [pc, #16]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fec:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40021000 	.word	0x40021000

08002ffc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800300a:	4b73      	ldr	r3, [pc, #460]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d018      	beq.n	8003048 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003016:	4b70      	ldr	r3, [pc, #448]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0203 	and.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d10d      	bne.n	8003042 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
       ||
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800302e:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
       ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d044      	beq.n	80030cc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
 8003046:	e041      	b.n	80030cc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d00c      	beq.n	800306a <RCCEx_PLLSAI1_Config+0x6e>
 8003050:	2b03      	cmp	r3, #3
 8003052:	d013      	beq.n	800307c <RCCEx_PLLSAI1_Config+0x80>
 8003054:	2b01      	cmp	r3, #1
 8003056:	d120      	bne.n	800309a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003058:	4b5f      	ldr	r3, [pc, #380]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d11d      	bne.n	80030a0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003068:	e01a      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800306a:	4b5b      	ldr	r3, [pc, #364]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	2b00      	cmp	r3, #0
 8003074:	d116      	bne.n	80030a4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307a:	e013      	b.n	80030a4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800307c:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10f      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003088:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003098:	e006      	b.n	80030a8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
      break;
 800309e:	e004      	b.n	80030aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80030a0:	bf00      	nop
 80030a2:	e002      	b.n	80030aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80030a4:	bf00      	nop
 80030a6:	e000      	b.n	80030aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80030a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10d      	bne.n	80030cc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030b0:	4b49      	ldr	r3, [pc, #292]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	430b      	orrs	r3, r1
 80030c6:	4944      	ldr	r1, [pc, #272]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d17c      	bne.n	80031cc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030d2:	4b41      	ldr	r3, [pc, #260]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a40      	ldr	r2, [pc, #256]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030de:	f7fd fab3 	bl	8000648 <HAL_GetTick>
 80030e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030e4:	e009      	b.n	80030fa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e6:	f7fd faaf 	bl	8000648 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d902      	bls.n	80030fa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	73fb      	strb	r3, [r7, #15]
        break;
 80030f8:	e005      	b.n	8003106 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030fa:	4b37      	ldr	r3, [pc, #220]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ef      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d15f      	bne.n	80031cc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d110      	bne.n	8003134 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003112:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800311a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	0211      	lsls	r1, r2, #8
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68d2      	ldr	r2, [r2, #12]
 8003128:	06d2      	lsls	r2, r2, #27
 800312a:	430a      	orrs	r2, r1
 800312c:	492a      	ldr	r1, [pc, #168]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	610b      	str	r3, [r1, #16]
 8003132:	e027      	b.n	8003184 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d112      	bne.n	8003160 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800313a:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003142:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6892      	ldr	r2, [r2, #8]
 800314a:	0211      	lsls	r1, r2, #8
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6912      	ldr	r2, [r2, #16]
 8003150:	0852      	lsrs	r2, r2, #1
 8003152:	3a01      	subs	r2, #1
 8003154:	0552      	lsls	r2, r2, #21
 8003156:	430a      	orrs	r2, r1
 8003158:	491f      	ldr	r1, [pc, #124]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	610b      	str	r3, [r1, #16]
 800315e:	e011      	b.n	8003184 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003168:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6892      	ldr	r2, [r2, #8]
 8003170:	0211      	lsls	r1, r2, #8
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6952      	ldr	r2, [r2, #20]
 8003176:	0852      	lsrs	r2, r2, #1
 8003178:	3a01      	subs	r2, #1
 800317a:	0652      	lsls	r2, r2, #25
 800317c:	430a      	orrs	r2, r1
 800317e:	4916      	ldr	r1, [pc, #88]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800318a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800318e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fd fa5a 	bl	8000648 <HAL_GetTick>
 8003194:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003196:	e009      	b.n	80031ac <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003198:	f7fd fa56 	bl	8000648 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d902      	bls.n	80031ac <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	73fb      	strb	r3, [r7, #15]
          break;
 80031aa:	e005      	b.n	80031b8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ef      	beq.n	8003198 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	4904      	ldr	r1, [pc, #16]	; (80031d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000

080031dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d06c      	beq.n	80032c8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f005 fe1a 	bl	8008e3c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	22ca      	movs	r2, #202	; 0xca
 8003216:	625a      	str	r2, [r3, #36]	; 0x24
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2253      	movs	r2, #83	; 0x53
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 facd 	bl	80037c0 <RTC_EnterInitMode>
 8003226:	4603      	mov	r3, r0
 8003228:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d14b      	bne.n	80032c8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800323e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003242:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6899      	ldr	r1, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68d2      	ldr	r2, [r2, #12]
 800326a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6919      	ldr	r1, [r3, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	041a      	lsls	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fad1 	bl	8003828 <RTC_ExitInitMode>
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d11b      	bne.n	80032c8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0203 	bic.w	r2, r2, #3
 800329e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	22ff      	movs	r2, #255	; 0xff
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032d2:	b590      	push	{r4, r7, lr}
 80032d4:	b087      	sub	sp, #28
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_RTC_SetTime+0x1a>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e08b      	b.n	8003404 <HAL_RTC_SetTime+0x132>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	22ca      	movs	r2, #202	; 0xca
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2253      	movs	r2, #83	; 0x53
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fa57 	bl	80037c0 <RTC_EnterInitMode>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d163      	bne.n	80033e4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d126      	bne.n	8003370 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2200      	movs	r2, #0
 8003334:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fab2 	bl	80038a4 <RTC_ByteToBcd2>
 8003340:	4603      	mov	r3, r0
 8003342:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	785b      	ldrb	r3, [r3, #1]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 faab 	bl	80038a4 <RTC_ByteToBcd2>
 800334e:	4603      	mov	r3, r0
 8003350:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003352:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	789b      	ldrb	r3, [r3, #2]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 faa3 	bl	80038a4 <RTC_ByteToBcd2>
 800335e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003360:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	78db      	ldrb	r3, [r3, #3]
 8003368:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	e018      	b.n	80033a2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2200      	movs	r2, #0
 8003382:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	785b      	ldrb	r3, [r3, #1]
 800338e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003390:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003396:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	78db      	ldrb	r3, [r3, #3]
 800339c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80033ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80033b0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6899      	ldr	r1, [r3, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fa24 	bl	8003828 <RTC_ExitInitMode>
 80033e0:	4603      	mov	r3, r0
 80033e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	22ff      	movs	r2, #255	; 0xff
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80033ec:	7cfb      	ldrb	r3, [r7, #19]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003402:	7cfb      	ldrb	r3, [r7, #19]
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}

0800340c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_RTC_SetDate+0x1a>
 8003422:	2302      	movs	r3, #2
 8003424:	e075      	b.n	8003512 <HAL_RTC_SetDate+0x106>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10e      	bne.n	800345a <HAL_RTC_SetDate+0x4e>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	f023 0310 	bic.w	r3, r3, #16
 8003450:	b2db      	uxtb	r3, r3
 8003452:	330a      	adds	r3, #10
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d11c      	bne.n	800349a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	78db      	ldrb	r3, [r3, #3]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fa1d 	bl	80038a4 <RTC_ByteToBcd2>
 800346a:	4603      	mov	r3, r0
 800346c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	785b      	ldrb	r3, [r3, #1]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fa16 	bl	80038a4 <RTC_ByteToBcd2>
 8003478:	4603      	mov	r3, r0
 800347a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800347c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	789b      	ldrb	r3, [r3, #2]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fa0e 	bl	80038a4 <RTC_ByteToBcd2>
 8003488:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800348a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e00e      	b.n	80034b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	78db      	ldrb	r3, [r3, #3]
 800349e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	785b      	ldrb	r3, [r3, #1]
 80034a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80034ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	22ca      	movs	r2, #202	; 0xca
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2253      	movs	r2, #83	; 0x53
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f979 	bl	80037c0 <RTC_EnterInitMode>
 80034ce:	4603      	mov	r3, r0
 80034d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80034d2:	7cfb      	ldrb	r3, [r7, #19]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10c      	bne.n	80034f2 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034e6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f99d 	bl	8003828 <RTC_ExitInitMode>
 80034ee:	4603      	mov	r3, r0
 80034f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	22ff      	movs	r2, #255	; 0xff
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d103      	bne.n	8003508 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
}
 8003512:	4618      	mov	r0, r3
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}

0800351a <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800351a:	b590      	push	{r4, r7, lr}
 800351c:	b089      	sub	sp, #36	; 0x24
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 3020 	ldrb.w	r3, [r3, #32]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_RTC_SetAlarm+0x1a>
 8003530:	2302      	movs	r3, #2
 8003532:	e11b      	b.n	800376c <HAL_RTC_SetAlarm+0x252>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d137      	bne.n	80035ba <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f99e 	bl	80038a4 <RTC_ByteToBcd2>
 8003568:	4603      	mov	r3, r0
 800356a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	4618      	mov	r0, r3
 8003572:	f000 f997 	bl	80038a4 <RTC_ByteToBcd2>
 8003576:	4603      	mov	r3, r0
 8003578:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800357a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	789b      	ldrb	r3, [r3, #2]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f98f 	bl	80038a4 <RTC_ByteToBcd2>
 8003586:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003588:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	78db      	ldrb	r3, [r3, #3]
 8003590:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003592:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f981 	bl	80038a4 <RTC_ByteToBcd2>
 80035a2:	4603      	mov	r3, r0
 80035a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80035a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80035ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	e023      	b.n	8003602 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2200      	movs	r2, #0
 80035cc:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	785b      	ldrb	r3, [r3, #1]
 80035d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80035da:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80035e0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	78db      	ldrb	r3, [r3, #3]
 80035e6:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80035e8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035f0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80035f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80035f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80035fe:	4313      	orrs	r3, r2
 8003600:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	22ca      	movs	r2, #202	; 0xca
 8003614:	625a      	str	r2, [r3, #36]	; 0x24
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2253      	movs	r2, #83	; 0x53
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003626:	d14a      	bne.n	80036be <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003636:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003648:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003658:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800365a:	f7fc fff5 	bl	8000648 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003660:	e015      	b.n	800368e <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003662:	f7fc fff1 	bl	8000648 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003670:	d90d      	bls.n	800368e <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	22ff      	movs	r2, #255	; 0xff
 8003678:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2203      	movs	r2, #3
 800367e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e06e      	b.n	800376c <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0e2      	beq.n	8003662 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	e049      	b.n	8003752 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036cc:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f462 7220 	orn	r2, r2, #640	; 0x280
 80036de:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ee:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80036f0:	f7fc ffaa 	bl	8000648 <HAL_GetTick>
 80036f4:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80036f6:	e015      	b.n	8003724 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036f8:	f7fc ffa6 	bl	8000648 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003706:	d90d      	bls.n	8003724 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	22ff      	movs	r2, #255	; 0xff
 800370e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2203      	movs	r2, #3
 8003714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e023      	b.n	800376c <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0e2      	beq.n	80036f8 <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003750:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	22ff      	movs	r2, #255	; 0xff
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3724      	adds	r7, #36	; 0x24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd90      	pop	{r4, r7, pc}

08003774 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800378a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800378c:	f7fc ff5c 	bl	8000648 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003792:	e009      	b.n	80037a8 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003794:	f7fc ff58 	bl	8000648 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037a2:	d901      	bls.n	80037a8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e007      	b.n	80037b8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0ee      	beq.n	8003794 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d120      	bne.n	800381c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f04f 32ff 	mov.w	r2, #4294967295
 80037e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80037e4:	f7fc ff30 	bl	8000648 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80037ea:	e00d      	b.n	8003808 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80037ec:	f7fc ff2c 	bl	8000648 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037fa:	d905      	bls.n	8003808 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2203      	movs	r2, #3
 8003804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <RTC_EnterInitMode+0x5c>
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d1e7      	bne.n	80037ec <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <RTC_ExitInitMode+0x78>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <RTC_ExitInitMode+0x78>)
 800383a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800383e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <RTC_ExitInitMode+0x78>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10c      	bne.n	8003866 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ff91 	bl	8003774 <HAL_RTC_WaitForSynchro>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01e      	beq.n	8003896 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2203      	movs	r2, #3
 800385c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	e017      	b.n	8003896 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <RTC_ExitInitMode+0x78>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4a0d      	ldr	r2, [pc, #52]	; (80038a0 <RTC_ExitInitMode+0x78>)
 800386c:	f023 0320 	bic.w	r3, r3, #32
 8003870:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff7e 	bl	8003774 <HAL_RTC_WaitForSynchro>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2203      	movs	r2, #3
 8003882:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <RTC_ExitInitMode+0x78>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <RTC_ExitInitMode+0x78>)
 8003890:	f043 0320 	orr.w	r3, r3, #32
 8003894:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003896:	7bfb      	ldrb	r3, [r7, #15]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40002800 	.word	0x40002800

080038a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80038b6:	e005      	b.n	80038c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	3b0a      	subs	r3, #10
 80038c2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80038c4:	7afb      	ldrb	r3, [r7, #11]
 80038c6:	2b09      	cmp	r3, #9
 80038c8:	d8f6      	bhi.n	80038b8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b2db      	uxtb	r3, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e022      	b.n	800393c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f005 fbb7 	bl	800907c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2203      	movs	r2, #3
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f814 	bl	8003944 <HAL_SD_InitCard>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e00a      	b.n	800393c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b08e      	sub	sp, #56	; 0x38
 8003948:	af04      	add	r7, sp, #16
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800394c:	2300      	movs	r3, #0
 800394e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003960:	2376      	movs	r3, #118	; 0x76
 8003962:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681d      	ldr	r5, [r3, #0]
 8003968:	466c      	mov	r4, sp
 800396a:	f107 0314 	add.w	r3, r7, #20
 800396e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003976:	f107 0308 	add.w	r3, r7, #8
 800397a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800397c:	4628      	mov	r0, r5
 800397e:	f003 fbd9 	bl	8007134 <SDMMC_Init>
 8003982:	4603      	mov	r3, r0
 8003984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e05f      	b.n	8003a54 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a2:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f003 fc0e 	bl	80071ca <SDMMC_PowerState_ON>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80039b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e049      	b.n	8003a54 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ce:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fefd 	bl	80047d0 <SD_PowerON>
 80039d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e02e      	b.n	8003a54 <HAL_SD_InitCard+0x110>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fe1c 	bl	8004634 <SD_InitCard>
 80039fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00b      	beq.n	8003a1c <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e01b      	b.n	8003a54 <HAL_SD_InitCard+0x110>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 fc63 	bl	80072f0 <SDMMC_CmdBlockLength>
 8003a2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00f      	beq.n	8003a52 <HAL_SD_InitCard+0x10e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_SD_InitCard+0x118>)
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_SD_InitCard+0x110>
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3728      	adds	r7, #40	; 0x28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a5c:	004005ff 	.word	0x004005ff

08003a60 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b092      	sub	sp, #72	; 0x48
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003a6e:	f7fc fdeb 	bl	8000648 <HAL_GetTick>
 8003a72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d107      	bne.n	8003a92 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e1bd      	b.n	8003e0e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	f040 81b0 	bne.w	8003e00 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	441a      	add	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d907      	bls.n	8003ac4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e1a4      	b.n	8003e0e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d002      	beq.n	8003ae2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	025b      	lsls	r3, r3, #9
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	025b      	lsls	r3, r3, #9
 8003aec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003aee:	2390      	movs	r3, #144	; 0x90
 8003af0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003af2:	2302      	movs	r3, #2
 8003af4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f107 0214 	add.w	r2, r7, #20
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 fbc5 	bl	8007298 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d90a      	bls.n	8003b2a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2202      	movs	r2, #2
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 fc29 	bl	8007378 <SDMMC_CmdReadMultiBlock>
 8003b26:	6478      	str	r0, [r7, #68]	; 0x44
 8003b28:	e009      	b.n	8003b3e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 fbfc 	bl	8007334 <SDMMC_CmdReadSingleBlock>
 8003b3c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d012      	beq.n	8003b6a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a7a      	ldr	r2, [pc, #488]	; (8003d34 <HAL_SD_ReadBlocks+0x2d4>)
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b52:	431a      	orrs	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e151      	b.n	8003e0e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003b6e:	e061      	b.n	8003c34 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d03c      	beq.n	8003bf8 <HAL_SD_ReadBlocks+0x198>
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d039      	beq.n	8003bf8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	643b      	str	r3, [r7, #64]	; 0x40
 8003b88:	e033      	b.n	8003bf2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f003 fafd 	bl	800718e <SDMMC_ReadFIFO>
 8003b94:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	3301      	adds	r3, #1
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	0e1b      	lsrs	r3, r3, #24
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bde:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be2:	3301      	adds	r3, #1
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be8:	3b01      	subs	r3, #1
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bee:	3301      	adds	r3, #1
 8003bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf4:	2b07      	cmp	r3, #7
 8003bf6:	d9c8      	bls.n	8003b8a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003bf8:	f7fc fd26 	bl	8000648 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d902      	bls.n	8003c0e <HAL_SD_ReadBlocks+0x1ae>
 8003c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d112      	bne.n	8003c34 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a48      	ldr	r2, [pc, #288]	; (8003d34 <HAL_SD_ReadBlocks+0x2d4>)
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0ec      	b.n	8003e0e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d096      	beq.n	8003b70 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d022      	beq.n	8003c96 <HAL_SD_ReadBlocks+0x236>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d91f      	bls.n	8003c96 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d01b      	beq.n	8003c96 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f003 fbee 	bl	8007444 <SDMMC_CmdStopTransfer>
 8003c68:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d012      	beq.n	8003c96 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <HAL_SD_ReadBlocks+0x2d4>)
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0bb      	b.n	8003e0e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <HAL_SD_ReadBlocks+0x2d4>)
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	f043 0208 	orr.w	r2, r3, #8
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e0a1      	b.n	8003e0e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d012      	beq.n	8003cfe <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <HAL_SD_ReadBlocks+0x2d4>)
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	f043 0202 	orr.w	r2, r3, #2
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e087      	b.n	8003e0e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d064      	beq.n	8003dd6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a08      	ldr	r2, [pc, #32]	; (8003d34 <HAL_SD_ReadBlocks+0x2d4>)
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	f043 0220 	orr.w	r2, r3, #32
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e06d      	b.n	8003e0e <HAL_SD_ReadBlocks+0x3ae>
 8003d32:	bf00      	nop
 8003d34:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f003 fa26 	bl	800718e <SDMMC_ReadFIFO>
 8003d42:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	3301      	adds	r3, #1
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d54:	3b01      	subs	r3, #1
 8003d56:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d60:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d64:	3301      	adds	r3, #1
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d76:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d80:	3b01      	subs	r3, #1
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	0e1b      	lsrs	r3, r3, #24
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d90:	3301      	adds	r3, #1
 8003d92:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d96:	3b01      	subs	r3, #1
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003d9a:	f7fc fc55 	bl	8000648 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d902      	bls.n	8003db0 <HAL_SD_ReadBlocks+0x350>
 8003daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d112      	bne.n	8003dd6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <HAL_SD_ReadBlocks+0x3b8>)
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e01b      	b.n	8003e0e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <HAL_SD_ReadBlocks+0x38a>
 8003de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1a6      	bne.n	8003d38 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f240 523a 	movw	r2, #1338	; 0x53a
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e006      	b.n	8003e0e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3748      	adds	r7, #72	; 0x48
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	004005ff 	.word	0x004005ff

08003e1c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b092      	sub	sp, #72	; 0x48
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003e2a:	f7fc fc0d 	bl	8000648 <HAL_GetTick>
 8003e2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d107      	bne.n	8003e4e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e165      	b.n	800411a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	f040 8158 	bne.w	800410c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	441a      	add	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d907      	bls.n	8003e80 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e14c      	b.n	800411a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2203      	movs	r2, #3
 8003e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d002      	beq.n	8003e9e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	025b      	lsls	r3, r3, #9
 8003e9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003eaa:	2390      	movs	r3, #144	; 0x90
 8003eac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f107 0218 	add.w	r2, r7, #24
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f003 f9e7 	bl	8007298 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d90a      	bls.n	8003ee6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 fa8f 	bl	8007400 <SDMMC_CmdWriteMultiBlock>
 8003ee2:	6478      	str	r0, [r7, #68]	; 0x44
 8003ee4:	e009      	b.n	8003efa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2210      	movs	r2, #16
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f003 fa62 	bl	80073bc <SDMMC_CmdWriteSingleBlock>
 8003ef8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d012      	beq.n	8003f26 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a87      	ldr	r2, [pc, #540]	; (8004124 <HAL_SD_WriteBlocks+0x308>)
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0f9      	b.n	800411a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003f2a:	e065      	b.n	8003ff8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d040      	beq.n	8003fbc <HAL_SD_WriteBlocks+0x1a0>
 8003f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d03d      	beq.n	8003fbc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003f40:	2300      	movs	r3, #0
 8003f42:	643b      	str	r3, [r7, #64]	; 0x40
 8003f44:	e037      	b.n	8003fb6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4e:	3301      	adds	r3, #1
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f54:	3b01      	subs	r3, #1
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	021a      	lsls	r2, r3, #8
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	3301      	adds	r3, #1
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	041a      	lsls	r2, r3, #16
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7e:	3301      	adds	r3, #1
 8003f80:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f84:	3b01      	subs	r3, #1
 8003f86:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	061a      	lsls	r2, r3, #24
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f96:	3301      	adds	r3, #1
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f107 0214 	add.w	r2, r7, #20
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f003 f8fc 	bl	80071a8 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8003fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb8:	2b07      	cmp	r3, #7
 8003fba:	d9c4      	bls.n	8003f46 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003fbc:	f7fc fb44 	bl	8000648 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d902      	bls.n	8003fd2 <HAL_SD_WriteBlocks+0x1b6>
 8003fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d112      	bne.n	8003ff8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a53      	ldr	r2, [pc, #332]	; (8004124 <HAL_SD_WriteBlocks+0x308>)
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e090      	b.n	800411a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8004002:	2b00      	cmp	r3, #0
 8004004:	d092      	beq.n	8003f2c <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d022      	beq.n	800405a <HAL_SD_WriteBlocks+0x23e>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d91f      	bls.n	800405a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	2b03      	cmp	r3, #3
 8004020:	d01b      	beq.n	800405a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f003 fa0c 	bl	8007444 <SDMMC_CmdStopTransfer>
 800402c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800402e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004030:	2b00      	cmp	r3, #0
 8004032:	d012      	beq.n	800405a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a3a      	ldr	r2, [pc, #232]	; (8004124 <HAL_SD_WriteBlocks+0x308>)
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004042:	431a      	orrs	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e05f      	b.n	800411a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d012      	beq.n	800408e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2d      	ldr	r2, [pc, #180]	; (8004124 <HAL_SD_WriteBlocks+0x308>)
 800406e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	f043 0208 	orr.w	r2, r3, #8
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e045      	b.n	800411a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d012      	beq.n	80040c2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a20      	ldr	r2, [pc, #128]	; (8004124 <HAL_SD_WriteBlocks+0x308>)
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	f043 0202 	orr.w	r2, r3, #2
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e02b      	b.n	800411a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d012      	beq.n	80040f6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a13      	ldr	r2, [pc, #76]	; (8004124 <HAL_SD_WriteBlocks+0x308>)
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	f043 0210 	orr.w	r2, r3, #16
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e011      	b.n	800411a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e006      	b.n	800411a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
  }
}
 800411a:	4618      	mov	r0, r3
 800411c:	3748      	adds	r7, #72	; 0x48
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	004005ff 	.word	0x004005ff

08004128 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004136:	0f9b      	lsrs	r3, r3, #30
 8004138:	b2da      	uxtb	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004142:	0e9b      	lsrs	r3, r3, #26
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	b2da      	uxtb	r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004154:	0e1b      	lsrs	r3, r3, #24
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	b2da      	uxtb	r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	b2da      	uxtb	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	b2da      	uxtb	r2, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417e:	b2da      	uxtb	r2, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004188:	0d1b      	lsrs	r3, r3, #20
 800418a:	b29a      	uxth	r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	b2da      	uxtb	r2, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041a6:	0bdb      	lsrs	r3, r3, #15
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b8:	0b9b      	lsrs	r3, r3, #14
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ca:	0b5b      	lsrs	r3, r3, #13
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041dc:	0b1b      	lsrs	r3, r3, #12
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2200      	movs	r2, #0
 80041ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d163      	bne.n	80042c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041fc:	009a      	lsls	r2, r3, #2
 80041fe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004202:	4013      	ands	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004208:	0f92      	lsrs	r2, r2, #30
 800420a:	431a      	orrs	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004214:	0edb      	lsrs	r3, r3, #27
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	b2da      	uxtb	r2, r3
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004226:	0e1b      	lsrs	r3, r3, #24
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	b2da      	uxtb	r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004238:	0d5b      	lsrs	r3, r3, #21
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	b2da      	uxtb	r2, r3
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424a:	0c9b      	lsrs	r3, r3, #18
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	b2da      	uxtb	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425c:	0bdb      	lsrs	r3, r3, #15
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	b2da      	uxtb	r2, r3
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	7e1b      	ldrb	r3, [r3, #24]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	3302      	adds	r3, #2
 8004280:	2201      	movs	r2, #1
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800428a:	fb02 f203 	mul.w	r2, r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	7a1b      	ldrb	r3, [r3, #8]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	2201      	movs	r2, #1
 800429e:	409a      	lsls	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80042ac:	0a52      	lsrs	r2, r2, #9
 80042ae:	fb02 f203 	mul.w	r2, r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042bc:	661a      	str	r2, [r3, #96]	; 0x60
 80042be:	e031      	b.n	8004324 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d11d      	bne.n	8004304 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042cc:	041b      	lsls	r3, r3, #16
 80042ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	431a      	orrs	r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	3301      	adds	r3, #1
 80042e4:	029a      	lsls	r2, r3, #10
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	661a      	str	r2, [r3, #96]	; 0x60
 8004302:	e00f      	b.n	8004324 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a58      	ldr	r2, [pc, #352]	; (800446c <HAL_SD_GetCardCSD+0x344>)
 800430a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e09d      	b.n	8004460 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004328:	0b9b      	lsrs	r3, r3, #14
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	b2da      	uxtb	r2, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433a:	09db      	lsrs	r3, r3, #7
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004342:	b2da      	uxtb	r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004352:	b2da      	uxtb	r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	0fdb      	lsrs	r3, r3, #31
 800435e:	b2da      	uxtb	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	0f5b      	lsrs	r3, r3, #29
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	b2da      	uxtb	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	0e9b      	lsrs	r3, r3, #26
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	b2da      	uxtb	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	0d9b      	lsrs	r3, r3, #22
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	b2da      	uxtb	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	0d5b      	lsrs	r3, r3, #21
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	0c1b      	lsrs	r3, r3, #16
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	0bdb      	lsrs	r3, r3, #15
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	0b9b      	lsrs	r3, r3, #14
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	0b5b      	lsrs	r3, r3, #13
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	0b1b      	lsrs	r3, r3, #12
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	b2da      	uxtb	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	0a9b      	lsrs	r3, r3, #10
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	b2da      	uxtb	r2, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	b2da      	uxtb	r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444e:	b2da      	uxtb	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	004005ff 	.word	0x004005ff

08004470 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80044c8:	b5b0      	push	{r4, r5, r7, lr}
 80044ca:	b08e      	sub	sp, #56	; 0x38
 80044cc:	af04      	add	r7, sp, #16
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2203      	movs	r2, #3
 80044dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d02e      	beq.n	8004546 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ee:	d106      	bne.n	80044fe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38
 80044fc:	e029      	b.n	8004552 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004504:	d10a      	bne.n	800451c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa18 	bl	800493c <SD_WideBus_Enable>
 800450c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
 800451a:	e01a      	b.n	8004552 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa55 	bl	80049d2 <SD_WideBus_Disable>
 8004528:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	639a      	str	r2, [r3, #56]	; 0x38
 8004536:	e00c      	b.n	8004552 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38
 8004544:	e005      	b.n	8004552 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a24      	ldr	r2, [pc, #144]	; (80045f0 <HAL_SD_ConfigWideBusOperation+0x128>)
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004568:	e01f      	b.n	80045aa <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681d      	ldr	r5, [r3, #0]
 8004590:	466c      	mov	r4, sp
 8004592:	f107 0314 	add.w	r3, r7, #20
 8004596:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800459a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800459e:	f107 0308 	add.w	r3, r7, #8
 80045a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045a4:	4628      	mov	r0, r5
 80045a6:	f002 fdc5 	bl	8007134 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045b2:	4618      	mov	r0, r3
 80045b4:	f002 fe9c 	bl	80072f0 <SDMMC_CmdBlockLength>
 80045b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <HAL_SD_ConfigWideBusOperation+0x128>)
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80045e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3728      	adds	r7, #40	; 0x28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bdb0      	pop	{r4, r5, r7, pc}
 80045ee:	bf00      	nop
 80045f0:	004005ff 	.word	0x004005ff

080045f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004600:	f107 030c 	add.w	r3, r7, #12
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f970 	bl	80048ec <SD_SendStatus>
 800460c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	0a5b      	lsrs	r3, r3, #9
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800462a:	693b      	ldr	r3, [r7, #16]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b094      	sub	sp, #80	; 0x50
 8004638:	af04      	add	r7, sp, #16
 800463a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800463c:	2301      	movs	r3, #1
 800463e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f002 fdcf 	bl	80071e8 <SDMMC_GetPowerState>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d102      	bne.n	8004656 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004650:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004654:	e0b7      	b.n	80047c6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	2b03      	cmp	r3, #3
 800465c:	d02f      	beq.n	80046be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f002 fff8 	bl	8007658 <SDMMC_CmdSendCID>
 8004668:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <SD_InitCard+0x40>
    {
      return errorstate;
 8004670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004672:	e0a8      	b.n	80047c6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f002 fdf9 	bl	8007272 <SDMMC_GetResponse>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2104      	movs	r1, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f002 fdf0 	bl	8007272 <SDMMC_GetResponse>
 8004692:	4602      	mov	r2, r0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2108      	movs	r1, #8
 800469e:	4618      	mov	r0, r3
 80046a0:	f002 fde7 	bl	8007272 <SDMMC_GetResponse>
 80046a4:	4602      	mov	r2, r0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	210c      	movs	r1, #12
 80046b0:	4618      	mov	r0, r3
 80046b2:	f002 fdde 	bl	8007272 <SDMMC_GetResponse>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d00d      	beq.n	80046e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f107 020e 	add.w	r2, r7, #14
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f002 fffe 	bl	80076d2 <SDMMC_CmdSetRelAdd>
 80046d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <SD_InitCard+0xae>
    {
      return errorstate;
 80046de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e0:	e071      	b.n	80047c6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d036      	beq.n	8004758 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80046ea:	89fb      	ldrh	r3, [r7, #14]
 80046ec:	461a      	mov	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f002 ffc8 	bl	8007694 <SDMMC_CmdSendCSD>
 8004704:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <SD_InitCard+0xdc>
    {
      return errorstate;
 800470c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470e:	e05a      	b.n	80047c6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f002 fdab 	bl	8007272 <SDMMC_GetResponse>
 800471c:	4602      	mov	r2, r0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2104      	movs	r1, #4
 8004728:	4618      	mov	r0, r3
 800472a:	f002 fda2 	bl	8007272 <SDMMC_GetResponse>
 800472e:	4602      	mov	r2, r0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2108      	movs	r1, #8
 800473a:	4618      	mov	r0, r3
 800473c:	f002 fd99 	bl	8007272 <SDMMC_GetResponse>
 8004740:	4602      	mov	r2, r0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	210c      	movs	r1, #12
 800474c:	4618      	mov	r0, r3
 800474e:	f002 fd90 	bl	8007272 <SDMMC_GetResponse>
 8004752:	4602      	mov	r2, r0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2104      	movs	r1, #4
 800475e:	4618      	mov	r0, r3
 8004760:	f002 fd87 	bl	8007272 <SDMMC_GetResponse>
 8004764:	4603      	mov	r3, r0
 8004766:	0d1a      	lsrs	r2, r3, #20
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800476c:	f107 0310 	add.w	r3, r7, #16
 8004770:	4619      	mov	r1, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fcd8 	bl	8004128 <HAL_SD_GetCardCSD>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800477e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004782:	e020      	b.n	80047c6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6819      	ldr	r1, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478c:	041b      	lsls	r3, r3, #16
 800478e:	f04f 0400 	mov.w	r4, #0
 8004792:	461a      	mov	r2, r3
 8004794:	4623      	mov	r3, r4
 8004796:	4608      	mov	r0, r1
 8004798:	f002 fe76 	bl	8007488 <SDMMC_CmdSelDesel>
 800479c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800479e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <SD_InitCard+0x174>
  {
    return errorstate;
 80047a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a6:	e00e      	b.n	80047c6 <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681d      	ldr	r5, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	466c      	mov	r4, sp
 80047b0:	f103 0210 	add.w	r2, r3, #16
 80047b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80047b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047ba:	3304      	adds	r3, #4
 80047bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047be:	4628      	mov	r0, r5
 80047c0:	f002 fcb8 	bl	8007134 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3740      	adds	r7, #64	; 0x40
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080047d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	2300      	movs	r3, #0
 80047e2:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f002 fe70 	bl	80074ce <SDMMC_CmdGoIdleState>
 80047ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	e072      	b.n	80048e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f002 fe83 	bl	800750a <SDMMC_CmdOperCond>
 8004804:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00d      	beq.n	8004828 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f002 fe59 	bl	80074ce <SDMMC_CmdGoIdleState>
 800481c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	e05b      	b.n	80048e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004832:	2b01      	cmp	r3, #1
 8004834:	d137      	bne.n	80048a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f002 fe83 	bl	8007548 <SDMMC_CmdAppCommand>
 8004842:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d02d      	beq.n	80048a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800484a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800484e:	e047      	b.n	80048e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f002 fe76 	bl	8007548 <SDMMC_CmdAppCommand>
 800485c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <SD_PowerON+0x98>
    {
      return errorstate;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	e03b      	b.n	80048e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	491e      	ldr	r1, [pc, #120]	; (80048e8 <SD_PowerON+0x118>)
 800486e:	4618      	mov	r0, r3
 8004870:	f002 fe8c 	bl	800758c <SDMMC_CmdAppOperCommand>
 8004874:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800487c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004880:	e02e      	b.n	80048e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2100      	movs	r1, #0
 8004888:	4618      	mov	r0, r3
 800488a:	f002 fcf2 	bl	8007272 <SDMMC_GetResponse>
 800488e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	0fdb      	lsrs	r3, r3, #31
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <SD_PowerON+0xcc>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <SD_PowerON+0xce>
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]

    count++;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d802      	bhi.n	80048b6 <SD_PowerON+0xe6>
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0cc      	beq.n	8004850 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048bc:	4293      	cmp	r3, r2
 80048be:	d902      	bls.n	80048c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80048c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048c4:	e00c      	b.n	80048e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	645a      	str	r2, [r3, #68]	; 0x44
 80048d6:	e002      	b.n	80048de <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	c1100000 	.word	0xc1100000

080048ec <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d102      	bne.n	8004902 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80048fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004900:	e018      	b.n	8004934 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490a:	041b      	lsls	r3, r3, #16
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f002 ff00 	bl	8007714 <SDMMC_CmdSendStatus>
 8004914:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <SD_SendStatus+0x34>
  {
    return errorstate;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	e009      	b.n	8004934 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f002 fca3 	bl	8007272 <SDMMC_GetResponse>
 800492c:	4602      	mov	r2, r0
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f002 fc8d 	bl	8007272 <SDMMC_GetResponse>
 8004958:	4603      	mov	r3, r0
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004962:	d102      	bne.n	800496a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004968:	e02f      	b.n	80049ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800496a:	f107 030c 	add.w	r3, r7, #12
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f879 	bl	8004a68 <SD_FindSCR>
 8004976:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	e023      	b.n	80049ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01c      	beq.n	80049c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004994:	041b      	lsls	r3, r3, #16
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f002 fdd5 	bl	8007548 <SDMMC_CmdAppCommand>
 800499e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	e00f      	b.n	80049ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2102      	movs	r1, #2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f002 fe0e 	bl	80075d2 <SDMMC_CmdBusWidth>
 80049b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	e003      	b.n	80049ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e001      	b.n	80049ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b086      	sub	sp, #24
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2100      	movs	r1, #0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f002 fc42 	bl	8007272 <SDMMC_GetResponse>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f8:	d102      	bne.n	8004a00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049fe:	e02f      	b.n	8004a60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004a00:	f107 030c 	add.w	r3, r7, #12
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f82e 	bl	8004a68 <SD_FindSCR>
 8004a0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	e023      	b.n	8004a60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01c      	beq.n	8004a5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2a:	041b      	lsls	r3, r3, #16
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f002 fd8a 	bl	8007548 <SDMMC_CmdAppCommand>
 8004a34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	e00f      	b.n	8004a60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f002 fdc3 	bl	80075d2 <SDMMC_CmdBusWidth>
 8004a4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	e003      	b.n	8004a60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e001      	b.n	8004a60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b08f      	sub	sp, #60	; 0x3c
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a72:	f7fb fde9 	bl	8000648 <HAL_GetTick>
 8004a76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2108      	movs	r1, #8
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f002 fc2e 	bl	80072f0 <SDMMC_CmdBlockLength>
 8004a94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	e0a9      	b.n	8004bf4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa8:	041b      	lsls	r3, r3, #16
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f002 fd4b 	bl	8007548 <SDMMC_CmdAppCommand>
 8004ab2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <SD_FindSCR+0x56>
  {
    return errorstate;
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	e09a      	b.n	8004bf4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004abe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004ac8:	2330      	movs	r3, #48	; 0x30
 8004aca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004acc:	2302      	movs	r3, #2
 8004ace:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f107 0210 	add.w	r2, r7, #16
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f002 fbd8 	bl	8007298 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f002 fd92 	bl	8007616 <SDMMC_CmdSendSCR>
 8004af2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d022      	beq.n	8004b40 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	e07a      	b.n	8004bf4 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	f107 0208 	add.w	r2, r7, #8
 8004b18:	18d4      	adds	r4, r2, r3
 8004b1a:	4608      	mov	r0, r1
 8004b1c:	f002 fb37 	bl	800718e <SDMMC_ReadFIFO>
 8004b20:	4603      	mov	r3, r0
 8004b22:	6023      	str	r3, [r4, #0]
      index++;
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	3301      	adds	r3, #1
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b2a:	f7fb fd8d 	bl	8000648 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d102      	bne.n	8004b40 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004b3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b3e:	e059      	b.n	8004bf4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b46:	f240 432a 	movw	r3, #1066	; 0x42a
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0d6      	beq.n	8004afe <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2208      	movs	r2, #8
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004b66:	2308      	movs	r3, #8
 8004b68:	e044      	b.n	8004bf4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b80:	2302      	movs	r3, #2
 8004b82:	e037      	b.n	8004bf4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2220      	movs	r2, #32
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004b9a:	2320      	movs	r3, #32
 8004b9c:	e02a      	b.n	8004bf4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ba6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	061a      	lsls	r2, r3, #24
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bb4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004bbe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	0e1b      	lsrs	r3, r3, #24
 8004bc4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	601a      	str	r2, [r3, #0]
    scr++;
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	3304      	adds	r3, #4
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	061a      	lsls	r2, r3, #24
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bdc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	0a1b      	lsrs	r3, r3, #8
 8004be2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004be6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	0e1b      	lsrs	r3, r3, #24
 8004bec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	373c      	adds	r7, #60	; 0x3c
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd90      	pop	{r4, r7, pc}

08004bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e07c      	b.n	8004d08 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f004 fac7 	bl	80091bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c44:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c4e:	d902      	bls.n	8004c56 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e002      	b.n	8004c5c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c64:	d007      	beq.n	8004c76 <HAL_SPI_Init+0x7a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c6e:	d002      	beq.n	8004c76 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c86:	d903      	bls.n	8004c90 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c8e:	e002      	b.n	8004c96 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	ea42 0103 	orr.w	r1, r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	f003 0204 	and.w	r2, r3, #4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	ea42 0103 	orr.w	r1, r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e01d      	b.n	8004d5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f004 fc48 	bl	80095cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f000 f976 	bl	8005040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e01d      	b.n	8004db4 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d106      	bne.n	8004d92 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f815 	bl	8004dbc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3304      	adds	r3, #4
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f000 f94b 	bl	8005040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_TIM_OC_ConfigChannel+0x1a>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e06c      	b.n	8004ec4 <HAL_TIM_OC_ConfigChannel+0xf4>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2202      	movs	r2, #2
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b14      	cmp	r3, #20
 8004dfe:	d857      	bhi.n	8004eb0 <HAL_TIM_OC_ConfigChannel+0xe0>
 8004e00:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <HAL_TIM_OC_ConfigChannel+0x38>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004eb1 	.word	0x08004eb1
 8004e10:	08004eb1 	.word	0x08004eb1
 8004e14:	08004eb1 	.word	0x08004eb1
 8004e18:	08004e6b 	.word	0x08004e6b
 8004e1c:	08004eb1 	.word	0x08004eb1
 8004e20:	08004eb1 	.word	0x08004eb1
 8004e24:	08004eb1 	.word	0x08004eb1
 8004e28:	08004e79 	.word	0x08004e79
 8004e2c:	08004eb1 	.word	0x08004eb1
 8004e30:	08004eb1 	.word	0x08004eb1
 8004e34:	08004eb1 	.word	0x08004eb1
 8004e38:	08004e87 	.word	0x08004e87
 8004e3c:	08004eb1 	.word	0x08004eb1
 8004e40:	08004eb1 	.word	0x08004eb1
 8004e44:	08004eb1 	.word	0x08004eb1
 8004e48:	08004e95 	.word	0x08004e95
 8004e4c:	08004eb1 	.word	0x08004eb1
 8004e50:	08004eb1 	.word	0x08004eb1
 8004e54:	08004eb1 	.word	0x08004eb1
 8004e58:	08004ea3 	.word	0x08004ea3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f95a 	bl	800511c <TIM_OC1_SetConfig>
      break;
 8004e68:	e023      	b.n	8004eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f9cf 	bl	8005214 <TIM_OC2_SetConfig>
      break;
 8004e76:	e01c      	b.n	8004eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fa42 	bl	8005308 <TIM_OC3_SetConfig>
      break;
 8004e84:	e015      	b.n	8004eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fab3 	bl	80053f8 <TIM_OC4_SetConfig>
      break;
 8004e92:	e00e      	b.n	8004eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fb0a 	bl	80054b4 <TIM_OC5_SetConfig>
      break;
 8004ea0:	e007      	b.n	8004eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fb5b 	bl	8005564 <TIM_OC6_SetConfig>
      break;
 8004eae:	e000      	b.n	8004eb2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8004eb0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIM_ConfigClockSource+0x18>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e0a8      	b.n	8005036 <HAL_TIM_ConfigClockSource+0x16a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d067      	beq.n	8004ff0 <HAL_TIM_ConfigClockSource+0x124>
 8004f20:	2b40      	cmp	r3, #64	; 0x40
 8004f22:	d80b      	bhi.n	8004f3c <HAL_TIM_ConfigClockSource+0x70>
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d073      	beq.n	8005010 <HAL_TIM_ConfigClockSource+0x144>
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d802      	bhi.n	8004f32 <HAL_TIM_ConfigClockSource+0x66>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d06f      	beq.n	8005010 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f30:	e078      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d06c      	beq.n	8005010 <HAL_TIM_ConfigClockSource+0x144>
 8004f36:	2b30      	cmp	r3, #48	; 0x30
 8004f38:	d06a      	beq.n	8005010 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004f3a:	e073      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f3c:	2b70      	cmp	r3, #112	; 0x70
 8004f3e:	d00d      	beq.n	8004f5c <HAL_TIM_ConfigClockSource+0x90>
 8004f40:	2b70      	cmp	r3, #112	; 0x70
 8004f42:	d804      	bhi.n	8004f4e <HAL_TIM_ConfigClockSource+0x82>
 8004f44:	2b50      	cmp	r3, #80	; 0x50
 8004f46:	d033      	beq.n	8004fb0 <HAL_TIM_ConfigClockSource+0xe4>
 8004f48:	2b60      	cmp	r3, #96	; 0x60
 8004f4a:	d041      	beq.n	8004fd0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004f4c:	e06a      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f52:	d066      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x156>
 8004f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f58:	d017      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004f5a:	e063      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	6899      	ldr	r1, [r3, #8]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f000 fbce 	bl	800570c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	609a      	str	r2, [r3, #8]
      break;
 8004f88:	e04c      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6899      	ldr	r1, [r3, #8]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f000 fbb7 	bl	800570c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fac:	609a      	str	r2, [r3, #8]
      break;
 8004fae:	e039      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	6859      	ldr	r1, [r3, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f000 fb2b 	bl	8005618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2150      	movs	r1, #80	; 0x50
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fb84 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 8004fce:	e029      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f000 fb4a 	bl	8005676 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2160      	movs	r1, #96	; 0x60
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fb74 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 8004fee:	e019      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f000 fb0b 	bl	8005618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2140      	movs	r1, #64	; 0x40
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fb64 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 800500e:	e009      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f000 fb5b 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 8005020:	e000      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a2e      	ldr	r2, [pc, #184]	; (800510c <TIM_Base_SetConfig+0xcc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_Base_SetConfig+0x28>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0x28>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a2b      	ldr	r2, [pc, #172]	; (8005110 <TIM_Base_SetConfig+0xd0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d108      	bne.n	800507a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a23      	ldr	r2, [pc, #140]	; (800510c <TIM_Base_SetConfig+0xcc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00f      	beq.n	80050a2 <TIM_Base_SetConfig+0x62>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d00b      	beq.n	80050a2 <TIM_Base_SetConfig+0x62>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a20      	ldr	r2, [pc, #128]	; (8005110 <TIM_Base_SetConfig+0xd0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d007      	beq.n	80050a2 <TIM_Base_SetConfig+0x62>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <TIM_Base_SetConfig+0xd4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d003      	beq.n	80050a2 <TIM_Base_SetConfig+0x62>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <TIM_Base_SetConfig+0xd8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d108      	bne.n	80050b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a0c      	ldr	r2, [pc, #48]	; (800510c <TIM_Base_SetConfig+0xcc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d007      	beq.n	80050f0 <TIM_Base_SetConfig+0xb0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a0c      	ldr	r2, [pc, #48]	; (8005114 <TIM_Base_SetConfig+0xd4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <TIM_Base_SetConfig+0xb0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a0b      	ldr	r2, [pc, #44]	; (8005118 <TIM_Base_SetConfig+0xd8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d103      	bne.n	80050f8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	615a      	str	r2, [r3, #20]
}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40000400 	.word	0x40000400
 8005114:	40014000 	.word	0x40014000
 8005118:	40014400 	.word	0x40014400

0800511c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f023 0201 	bic.w	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 0302 	bic.w	r3, r3, #2
 8005168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a24      	ldr	r2, [pc, #144]	; (8005208 <TIM_OC1_SetConfig+0xec>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_OC1_SetConfig+0x70>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a23      	ldr	r2, [pc, #140]	; (800520c <TIM_OC1_SetConfig+0xf0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_OC1_SetConfig+0x70>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a22      	ldr	r2, [pc, #136]	; (8005210 <TIM_OC1_SetConfig+0xf4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d10c      	bne.n	80051a6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0308 	bic.w	r3, r3, #8
 8005192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f023 0304 	bic.w	r3, r3, #4
 80051a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a17      	ldr	r2, [pc, #92]	; (8005208 <TIM_OC1_SetConfig+0xec>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_OC1_SetConfig+0xa2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a16      	ldr	r2, [pc, #88]	; (800520c <TIM_OC1_SetConfig+0xf0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_OC1_SetConfig+0xa2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a15      	ldr	r2, [pc, #84]	; (8005210 <TIM_OC1_SetConfig+0xf4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d111      	bne.n	80051e2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	621a      	str	r2, [r3, #32]
}
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	40012c00 	.word	0x40012c00
 800520c:	40014000 	.word	0x40014000
 8005210:	40014400 	.word	0x40014400

08005214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0210 	bic.w	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0320 	bic.w	r3, r3, #32
 8005262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a22      	ldr	r2, [pc, #136]	; (80052fc <TIM_OC2_SetConfig+0xe8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d10d      	bne.n	8005294 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800527e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a19      	ldr	r2, [pc, #100]	; (80052fc <TIM_OC2_SetConfig+0xe8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d007      	beq.n	80052ac <TIM_OC2_SetConfig+0x98>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a18      	ldr	r2, [pc, #96]	; (8005300 <TIM_OC2_SetConfig+0xec>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_OC2_SetConfig+0x98>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a17      	ldr	r2, [pc, #92]	; (8005304 <TIM_OC2_SetConfig+0xf0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d113      	bne.n	80052d4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40014000 	.word	0x40014000
 8005304:	40014400 	.word	0x40014400

08005308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a21      	ldr	r2, [pc, #132]	; (80053ec <TIM_OC3_SetConfig+0xe4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d10d      	bne.n	8005386 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a18      	ldr	r2, [pc, #96]	; (80053ec <TIM_OC3_SetConfig+0xe4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d007      	beq.n	800539e <TIM_OC3_SetConfig+0x96>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <TIM_OC3_SetConfig+0xe8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d003      	beq.n	800539e <TIM_OC3_SetConfig+0x96>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <TIM_OC3_SetConfig+0xec>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d113      	bne.n	80053c6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	621a      	str	r2, [r3, #32]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400

080053f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	031b      	lsls	r3, r3, #12
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a14      	ldr	r2, [pc, #80]	; (80054a8 <TIM_OC4_SetConfig+0xb0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d007      	beq.n	800546c <TIM_OC4_SetConfig+0x74>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a13      	ldr	r2, [pc, #76]	; (80054ac <TIM_OC4_SetConfig+0xb4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_OC4_SetConfig+0x74>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a12      	ldr	r2, [pc, #72]	; (80054b0 <TIM_OC4_SetConfig+0xb8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d109      	bne.n	8005480 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	019b      	lsls	r3, r3, #6
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400

080054b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	041b      	lsls	r3, r3, #16
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a13      	ldr	r2, [pc, #76]	; (8005558 <TIM_OC5_SetConfig+0xa4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d007      	beq.n	800551e <TIM_OC5_SetConfig+0x6a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a12      	ldr	r2, [pc, #72]	; (800555c <TIM_OC5_SetConfig+0xa8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_OC5_SetConfig+0x6a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a11      	ldr	r2, [pc, #68]	; (8005560 <TIM_OC5_SetConfig+0xac>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d109      	bne.n	8005532 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005524:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40014000 	.word	0x40014000
 8005560:	40014400 	.word	0x40014400

08005564 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	051b      	lsls	r3, r3, #20
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a14      	ldr	r2, [pc, #80]	; (800560c <TIM_OC6_SetConfig+0xa8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d007      	beq.n	80055d0 <TIM_OC6_SetConfig+0x6c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a13      	ldr	r2, [pc, #76]	; (8005610 <TIM_OC6_SetConfig+0xac>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_OC6_SetConfig+0x6c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a12      	ldr	r2, [pc, #72]	; (8005614 <TIM_OC6_SetConfig+0xb0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d109      	bne.n	80055e4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40012c00 	.word	0x40012c00
 8005610:	40014000 	.word	0x40014000
 8005614:	40014400 	.word	0x40014400

08005618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0201 	bic.w	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 030a 	bic.w	r3, r3, #10
 8005654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005676:	b480      	push	{r7}
 8005678:	b087      	sub	sp, #28
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f023 0210 	bic.w	r2, r3, #16
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	031b      	lsls	r3, r3, #12
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	621a      	str	r2, [r3, #32]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f043 0307 	orr.w	r3, r3, #7
 80056f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	021a      	lsls	r2, r3, #8
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	431a      	orrs	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4313      	orrs	r3, r2
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005760:	2302      	movs	r3, #2
 8005762:	e054      	b.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a24      	ldr	r2, [pc, #144]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d108      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005794:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a17      	ldr	r2, [pc, #92]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057cc:	d009      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a13      	ldr	r2, [pc, #76]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a11      	ldr	r2, [pc, #68]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10c      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40012c00 	.word	0x40012c00
 8005820:	40000400 	.word	0x40000400
 8005824:	40014000 	.word	0x40014000

08005828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e040      	b.n	80058bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f004 f8ac 	bl	80099a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2224      	movs	r2, #36	; 0x24
 8005854:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8c0 	bl	80059ec <UART_SetConfig>
 800586c:	4603      	mov	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e022      	b.n	80058bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fbf4 	bl	800606c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fc7b 	bl	80061b0 <UART_CheckIdleState>
 80058ba:	4603      	mov	r3, r0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	; 0x28
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d8:	2b20      	cmp	r3, #32
 80058da:	f040 8081 	bne.w	80059e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HAL_UART_Transmit+0x26>
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e079      	b.n	80059e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_UART_Transmit+0x38>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e072      	b.n	80059e2 <HAL_UART_Transmit+0x11e>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2221      	movs	r2, #33	; 0x21
 800590e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005910:	f7fa fe9a 	bl	8000648 <HAL_GetTick>
 8005914:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	88fa      	ldrh	r2, [r7, #6]
 800591a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	88fa      	ldrh	r2, [r7, #6]
 8005922:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592e:	d108      	bne.n	8005942 <HAL_UART_Transmit+0x7e>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d104      	bne.n	8005942 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	e003      	b.n	800594a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005952:	e02d      	b.n	80059b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2200      	movs	r2, #0
 800595c:	2180      	movs	r1, #128	; 0x80
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 fc6b 	bl	800623a <UART_WaitOnFlagUntilTimeout>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e039      	b.n	80059e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	881a      	ldrh	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005980:	b292      	uxth	r2, r2
 8005982:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	3302      	adds	r3, #2
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	e008      	b.n	800599e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	b292      	uxth	r2, r2
 8005996:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	3301      	adds	r3, #1
 800599c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1cb      	bne.n	8005954 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2200      	movs	r2, #0
 80059c4:	2140      	movs	r1, #64	; 0x40
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fc37 	bl	800623a <UART_WaitOnFlagUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e005      	b.n	80059e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2220      	movs	r2, #32
 80059da:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	e000      	b.n	80059e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80059e0:	2302      	movs	r3, #2
  }
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80059f0:	b08a      	sub	sp, #40	; 0x28
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4bb0      	ldr	r3, [pc, #704]	; (8005ce4 <UART_SetConfig+0x2f8>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4aa6      	ldr	r2, [pc, #664]	; (8005ce8 <UART_SetConfig+0x2fc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a9d      	ldr	r2, [pc, #628]	; (8005cec <UART_SetConfig+0x300>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d126      	bne.n	8005aca <UART_SetConfig+0xde>
 8005a7c:	4b9c      	ldr	r3, [pc, #624]	; (8005cf0 <UART_SetConfig+0x304>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d81a      	bhi.n	8005ac0 <UART_SetConfig+0xd4>
 8005a8a:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0xa4>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005ab1 	.word	0x08005ab1
 8005a98:	08005aa9 	.word	0x08005aa9
 8005a9c:	08005ab9 	.word	0x08005ab9
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa6:	e0d6      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aae:	e0d2      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab6:	e0ce      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005abe:	e0ca      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac6:	bf00      	nop
 8005ac8:	e0c5      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a89      	ldr	r2, [pc, #548]	; (8005cf4 <UART_SetConfig+0x308>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d138      	bne.n	8005b46 <UART_SetConfig+0x15a>
 8005ad4:	4b86      	ldr	r3, [pc, #536]	; (8005cf0 <UART_SetConfig+0x304>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f003 030c 	and.w	r3, r3, #12
 8005ade:	2b0c      	cmp	r3, #12
 8005ae0:	d82c      	bhi.n	8005b3c <UART_SetConfig+0x150>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <UART_SetConfig+0xfc>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005b1d 	.word	0x08005b1d
 8005aec:	08005b3d 	.word	0x08005b3d
 8005af0:	08005b3d 	.word	0x08005b3d
 8005af4:	08005b3d 	.word	0x08005b3d
 8005af8:	08005b2d 	.word	0x08005b2d
 8005afc:	08005b3d 	.word	0x08005b3d
 8005b00:	08005b3d 	.word	0x08005b3d
 8005b04:	08005b3d 	.word	0x08005b3d
 8005b08:	08005b25 	.word	0x08005b25
 8005b0c:	08005b3d 	.word	0x08005b3d
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	08005b35 	.word	0x08005b35
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b22:	e098      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005b24:	2302      	movs	r3, #2
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b2a:	e094      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b32:	e090      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005b34:	2308      	movs	r3, #8
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3a:	e08c      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b42:	bf00      	nop
 8005b44:	e087      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a6b      	ldr	r2, [pc, #428]	; (8005cf8 <UART_SetConfig+0x30c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d125      	bne.n	8005b9c <UART_SetConfig+0x1b0>
 8005b50:	4b67      	ldr	r3, [pc, #412]	; (8005cf0 <UART_SetConfig+0x304>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d011      	beq.n	8005b82 <UART_SetConfig+0x196>
 8005b5e:	2b10      	cmp	r3, #16
 8005b60:	d802      	bhi.n	8005b68 <UART_SetConfig+0x17c>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <UART_SetConfig+0x186>
 8005b66:	e014      	b.n	8005b92 <UART_SetConfig+0x1a6>
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d006      	beq.n	8005b7a <UART_SetConfig+0x18e>
 8005b6c:	2b30      	cmp	r3, #48	; 0x30
 8005b6e:	d00c      	beq.n	8005b8a <UART_SetConfig+0x19e>
 8005b70:	e00f      	b.n	8005b92 <UART_SetConfig+0x1a6>
 8005b72:	2300      	movs	r3, #0
 8005b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b78:	e06d      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b80:	e069      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005b82:	2304      	movs	r3, #4
 8005b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b88:	e065      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005b8a:	2308      	movs	r3, #8
 8005b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b90:	e061      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005b92:	2310      	movs	r3, #16
 8005b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b98:	bf00      	nop
 8005b9a:	e05c      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a56      	ldr	r2, [pc, #344]	; (8005cfc <UART_SetConfig+0x310>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d125      	bne.n	8005bf2 <UART_SetConfig+0x206>
 8005ba6:	4b52      	ldr	r3, [pc, #328]	; (8005cf0 <UART_SetConfig+0x304>)
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d011      	beq.n	8005bd8 <UART_SetConfig+0x1ec>
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d802      	bhi.n	8005bbe <UART_SetConfig+0x1d2>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <UART_SetConfig+0x1dc>
 8005bbc:	e014      	b.n	8005be8 <UART_SetConfig+0x1fc>
 8005bbe:	2b80      	cmp	r3, #128	; 0x80
 8005bc0:	d006      	beq.n	8005bd0 <UART_SetConfig+0x1e4>
 8005bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8005bc4:	d00c      	beq.n	8005be0 <UART_SetConfig+0x1f4>
 8005bc6:	e00f      	b.n	8005be8 <UART_SetConfig+0x1fc>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bce:	e042      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd6:	e03e      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bde:	e03a      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005be0:	2308      	movs	r3, #8
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be6:	e036      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bee:	bf00      	nop
 8005bf0:	e031      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a3c      	ldr	r2, [pc, #240]	; (8005ce8 <UART_SetConfig+0x2fc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d129      	bne.n	8005c50 <UART_SetConfig+0x264>
 8005bfc:	4b3c      	ldr	r3, [pc, #240]	; (8005cf0 <UART_SetConfig+0x304>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c0a:	d014      	beq.n	8005c36 <UART_SetConfig+0x24a>
 8005c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c10:	d802      	bhi.n	8005c18 <UART_SetConfig+0x22c>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <UART_SetConfig+0x23a>
 8005c16:	e016      	b.n	8005c46 <UART_SetConfig+0x25a>
 8005c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1c:	d007      	beq.n	8005c2e <UART_SetConfig+0x242>
 8005c1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c22:	d00c      	beq.n	8005c3e <UART_SetConfig+0x252>
 8005c24:	e00f      	b.n	8005c46 <UART_SetConfig+0x25a>
 8005c26:	2300      	movs	r3, #0
 8005c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c2c:	e013      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c34:	e00f      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005c36:	2304      	movs	r3, #4
 8005c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3c:	e00b      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005c3e:	2308      	movs	r3, #8
 8005c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c44:	e007      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005c46:	2310      	movs	r3, #16
 8005c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4c:	bf00      	nop
 8005c4e:	e002      	b.n	8005c56 <UART_SetConfig+0x26a>
 8005c50:	2310      	movs	r3, #16
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a23      	ldr	r2, [pc, #140]	; (8005ce8 <UART_SetConfig+0x2fc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	f040 80fb 	bne.w	8005e58 <UART_SetConfig+0x46c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d823      	bhi.n	8005cb2 <UART_SetConfig+0x2c6>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <UART_SetConfig+0x284>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c95 	.word	0x08005c95
 8005c74:	08005cb3 	.word	0x08005cb3
 8005c78:	08005c9d 	.word	0x08005c9d
 8005c7c:	08005cb3 	.word	0x08005cb3
 8005c80:	08005ca3 	.word	0x08005ca3
 8005c84:	08005cb3 	.word	0x08005cb3
 8005c88:	08005cb3 	.word	0x08005cb3
 8005c8c:	08005cb3 	.word	0x08005cb3
 8005c90:	08005cab 	.word	0x08005cab
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005c94:	f7fc febc 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8005c98:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c9a:	e00d      	b.n	8005cb8 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005c9c:	4b18      	ldr	r3, [pc, #96]	; (8005d00 <UART_SetConfig+0x314>)
 8005c9e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ca0:	e00a      	b.n	8005cb8 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005ca2:	f7fc fe1f 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 8005ca6:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ca8:	e006      	b.n	8005cb8 <UART_SetConfig+0x2cc>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cae:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005cb0:	e002      	b.n	8005cb8 <UART_SetConfig+0x2cc>
      default:
        ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	76fb      	strb	r3, [r7, #27]
        break;
 8005cb6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 81ca 	beq.w	8006054 <UART_SetConfig+0x668>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	4413      	add	r3, r2
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d305      	bcc.n	8005cdc <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d913      	bls.n	8005d04 <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	76fb      	strb	r3, [r7, #27]
 8005ce0:	e1b8      	b.n	8006054 <UART_SetConfig+0x668>
 8005ce2:	bf00      	nop
 8005ce4:	efff69f3 	.word	0xefff69f3
 8005ce8:	40008000 	.word	0x40008000
 8005cec:	40013800 	.word	0x40013800
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	40004400 	.word	0x40004400
 8005cf8:	40004800 	.word	0x40004800
 8005cfc:	40004c00 	.word	0x40004c00
 8005d00:	00f42400 	.word	0x00f42400
      }
      else
      {
        switch (clocksource)
 8005d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	f200 8092 	bhi.w	8005e32 <UART_SetConfig+0x446>
 8005d0e:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <UART_SetConfig+0x328>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005e33 	.word	0x08005e33
 8005d1c:	08005d87 	.word	0x08005d87
 8005d20:	08005e33 	.word	0x08005e33
 8005d24:	08005dbb 	.word	0x08005dbb
 8005d28:	08005e33 	.word	0x08005e33
 8005d2c:	08005e33 	.word	0x08005e33
 8005d30:	08005e33 	.word	0x08005e33
 8005d34:	08005e09 	.word	0x08005e09
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005d38:	f7fc fe6a 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8005d3c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4619      	mov	r1, r3
 8005d42:	f04f 0200 	mov.w	r2, #0
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	f04f 0400 	mov.w	r4, #0
 8005d4e:	0214      	lsls	r4, r2, #8
 8005d50:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005d54:	020b      	lsls	r3, r1, #8
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6852      	ldr	r2, [r2, #4]
 8005d5a:	0852      	lsrs	r2, r2, #1
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	eb13 0b01 	adds.w	fp, r3, r1
 8005d66:	eb44 0c02 	adc.w	ip, r4, r2
 8005d6a:	4658      	mov	r0, fp
 8005d6c:	4661      	mov	r1, ip
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f04f 0400 	mov.w	r4, #0
 8005d76:	461a      	mov	r2, r3
 8005d78:	4623      	mov	r3, r4
 8005d7a:	f7fa fa81 	bl	8000280 <__aeabi_uldivmod>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	460c      	mov	r4, r1
 8005d82:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005d84:	e058      	b.n	8005e38 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	f04f 0400 	mov.w	r4, #0
 8005d90:	49ae      	ldr	r1, [pc, #696]	; (800604c <UART_SetConfig+0x660>)
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	eb13 0b01 	adds.w	fp, r3, r1
 8005d9a:	eb44 0c02 	adc.w	ip, r4, r2
 8005d9e:	4658      	mov	r0, fp
 8005da0:	4661      	mov	r1, ip
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f04f 0400 	mov.w	r4, #0
 8005daa:	461a      	mov	r2, r3
 8005dac:	4623      	mov	r3, r4
 8005dae:	f7fa fa67 	bl	8000280 <__aeabi_uldivmod>
 8005db2:	4603      	mov	r3, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005db8:	e03e      	b.n	8005e38 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005dba:	f7fc fd93 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 8005dbe:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	f04f 0400 	mov.w	r4, #0
 8005dd0:	0214      	lsls	r4, r2, #8
 8005dd2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005dd6:	020b      	lsls	r3, r1, #8
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6852      	ldr	r2, [r2, #4]
 8005ddc:	0852      	lsrs	r2, r2, #1
 8005dde:	4611      	mov	r1, r2
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	eb13 0b01 	adds.w	fp, r3, r1
 8005de8:	eb44 0c02 	adc.w	ip, r4, r2
 8005dec:	4658      	mov	r0, fp
 8005dee:	4661      	mov	r1, ip
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f04f 0400 	mov.w	r4, #0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4623      	mov	r3, r4
 8005dfc:	f7fa fa40 	bl	8000280 <__aeabi_uldivmod>
 8005e00:	4603      	mov	r3, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005e06:	e017      	b.n	8005e38 <UART_SetConfig+0x44c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	f04f 0400 	mov.w	r4, #0
 8005e12:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005e16:	f144 0100 	adc.w	r1, r4, #0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f04f 0400 	mov.w	r4, #0
 8005e22:	461a      	mov	r2, r3
 8005e24:	4623      	mov	r3, r4
 8005e26:	f7fa fa2b 	bl	8000280 <__aeabi_uldivmod>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	460c      	mov	r4, r1
 8005e2e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005e30:	e002      	b.n	8005e38 <UART_SetConfig+0x44c>
          default:
            ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	76fb      	strb	r3, [r7, #27]
            break;
 8005e36:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e3e:	d308      	bcc.n	8005e52 <UART_SetConfig+0x466>
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e46:	d204      	bcs.n	8005e52 <UART_SetConfig+0x466>
        {
          huart->Instance->BRR = usartdiv;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	60da      	str	r2, [r3, #12]
 8005e50:	e100      	b.n	8006054 <UART_SetConfig+0x668>
        }
        else
        {
          ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	76fb      	strb	r3, [r7, #27]
 8005e56:	e0fd      	b.n	8006054 <UART_SetConfig+0x668>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e60:	f040 8084 	bne.w	8005f6c <UART_SetConfig+0x580>
  {
    switch (clocksource)
 8005e64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d85f      	bhi.n	8005f2c <UART_SetConfig+0x540>
 8005e6c:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <UART_SetConfig+0x488>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005e99 	.word	0x08005e99
 8005e78:	08005eb9 	.word	0x08005eb9
 8005e7c:	08005ed9 	.word	0x08005ed9
 8005e80:	08005f2d 	.word	0x08005f2d
 8005e84:	08005ef5 	.word	0x08005ef5
 8005e88:	08005f2d 	.word	0x08005f2d
 8005e8c:	08005f2d 	.word	0x08005f2d
 8005e90:	08005f2d 	.word	0x08005f2d
 8005e94:	08005f15 	.word	0x08005f15
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e98:	f7fc fdba 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8005e9c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	005a      	lsls	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	085b      	lsrs	r3, r3, #1
 8005ea8:	441a      	add	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005eb6:	e03c      	b.n	8005f32 <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eb8:	f7fc fdc0 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8005ebc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	005a      	lsls	r2, r3, #1
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	441a      	add	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ed6:	e02c      	b.n	8005f32 <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005ee2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6852      	ldr	r2, [r2, #4]
 8005eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ef2:	e01e      	b.n	8005f32 <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ef4:	f7fc fcf6 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 8005ef8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	005a      	lsls	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	441a      	add	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f12:	e00e      	b.n	8005f32 <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	085b      	lsrs	r3, r3, #1
 8005f1a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f2a:	e002      	b.n	8005f32 <UART_SetConfig+0x546>
      default:
        ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	76fb      	strb	r3, [r7, #27]
        break;
 8005f30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	2b0f      	cmp	r3, #15
 8005f36:	d916      	bls.n	8005f66 <UART_SetConfig+0x57a>
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3e:	d212      	bcs.n	8005f66 <UART_SetConfig+0x57a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f023 030f 	bic.w	r3, r3, #15
 8005f48:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	085b      	lsrs	r3, r3, #1
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	89fb      	ldrh	r3, [r7, #14]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	89fa      	ldrh	r2, [r7, #14]
 8005f62:	60da      	str	r2, [r3, #12]
 8005f64:	e076      	b.n	8006054 <UART_SetConfig+0x668>
    }
    else
    {
      ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	76fb      	strb	r3, [r7, #27]
 8005f6a:	e073      	b.n	8006054 <UART_SetConfig+0x668>
    }
  }
  else
  {
    switch (clocksource)
 8005f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d85c      	bhi.n	800602e <UART_SetConfig+0x642>
 8005f74:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <UART_SetConfig+0x590>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fbf 	.word	0x08005fbf
 8005f84:	08005fdd 	.word	0x08005fdd
 8005f88:	0800602f 	.word	0x0800602f
 8005f8c:	08005ff9 	.word	0x08005ff9
 8005f90:	0800602f 	.word	0x0800602f
 8005f94:	0800602f 	.word	0x0800602f
 8005f98:	0800602f 	.word	0x0800602f
 8005f9c:	08006017 	.word	0x08006017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa0:	f7fc fd36 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8005fa4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	085a      	lsrs	r2, r3, #1
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	441a      	add	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005fbc:	e03a      	b.n	8006034 <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fbe:	f7fc fd3d 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8005fc2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	085a      	lsrs	r2, r3, #1
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	441a      	add	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005fda:	e02b      	b.n	8006034 <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	085b      	lsrs	r3, r3, #1
 8005fe2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005fe6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6852      	ldr	r2, [r2, #4]
 8005fee:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ff6:	e01d      	b.n	8006034 <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff8:	f7fc fc74 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 8005ffc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	085a      	lsrs	r2, r3, #1
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	441a      	add	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	b29b      	uxth	r3, r3
 8006012:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006014:	e00e      	b.n	8006034 <UART_SetConfig+0x648>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	b29b      	uxth	r3, r3
 800602a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800602c:	e002      	b.n	8006034 <UART_SetConfig+0x648>
      default:
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	76fb      	strb	r3, [r7, #27]
        break;
 8006032:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b0f      	cmp	r3, #15
 8006038:	d90a      	bls.n	8006050 <UART_SetConfig+0x664>
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006040:	d206      	bcs.n	8006050 <UART_SetConfig+0x664>
    {
      huart->Instance->BRR = usartdiv;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	60da      	str	r2, [r3, #12]
 800604a:	e003      	b.n	8006054 <UART_SetConfig+0x668>
 800604c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006060:	7efb      	ldrb	r3, [r7, #27]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3728      	adds	r7, #40	; 0x28
 8006066:	46bd      	mov	sp, r7
 8006068:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800606c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01a      	beq.n	8006182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800616a:	d10a      	bne.n	8006182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	605a      	str	r2, [r3, #4]
  }
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80061be:	f7fa fa43 	bl	8000648 <HAL_GetTick>
 80061c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d10e      	bne.n	80061f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f82a 	bl	800623a <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e020      	b.n	8006232 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d10e      	bne.n	800621c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f814 	bl	800623a <UART_WaitOnFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e00a      	b.n	8006232 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	603b      	str	r3, [r7, #0]
 8006246:	4613      	mov	r3, r2
 8006248:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800624a:	e05d      	b.n	8006308 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006252:	d059      	beq.n	8006308 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006254:	f7fa f9f8 	bl	8000648 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	429a      	cmp	r2, r3
 8006262:	d302      	bcc.n	800626a <UART_WaitOnFlagUntilTimeout+0x30>
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d11b      	bne.n	80062a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006278:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0201 	bic.w	r2, r2, #1
 8006288:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e042      	b.n	8006328 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d02b      	beq.n	8006308 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062be:	d123      	bne.n	8006308 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062c8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062d8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2220      	movs	r2, #32
 80062ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e00f      	b.n	8006328 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69da      	ldr	r2, [r3, #28]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4013      	ands	r3, r2
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	429a      	cmp	r2, r3
 8006316:	bf0c      	ite	eq
 8006318:	2301      	moveq	r3, #1
 800631a:	2300      	movne	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	429a      	cmp	r2, r3
 8006324:	d092      	beq.n	800624c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <LL_EXTI_EnableIT_0_31+0x20>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4904      	ldr	r1, [pc, #16]	; (8006350 <LL_EXTI_EnableIT_0_31+0x20>)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4313      	orrs	r3, r2
 8006342:	600b      	str	r3, [r1, #0]
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	40010400 	.word	0x40010400

08006354 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <LL_EXTI_EnableIT_32_63+0x20>)
 800635e:	6a1a      	ldr	r2, [r3, #32]
 8006360:	4904      	ldr	r1, [pc, #16]	; (8006374 <LL_EXTI_EnableIT_32_63+0x20>)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4313      	orrs	r3, r2
 8006366:	620b      	str	r3, [r1, #32]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	40010400 	.word	0x40010400

08006378 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <LL_EXTI_DisableIT_0_31+0x24>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	43db      	mvns	r3, r3
 8006388:	4904      	ldr	r1, [pc, #16]	; (800639c <LL_EXTI_DisableIT_0_31+0x24>)
 800638a:	4013      	ands	r3, r2
 800638c:	600b      	str	r3, [r1, #0]
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40010400 	.word	0x40010400

080063a0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <LL_EXTI_DisableIT_32_63+0x24>)
 80063aa:	6a1a      	ldr	r2, [r3, #32]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	43db      	mvns	r3, r3
 80063b0:	4904      	ldr	r1, [pc, #16]	; (80063c4 <LL_EXTI_DisableIT_32_63+0x24>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	620b      	str	r3, [r1, #32]
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40010400 	.word	0x40010400

080063c8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80063d0:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	4904      	ldr	r1, [pc, #16]	; (80063e8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4313      	orrs	r3, r2
 80063da:	604b      	str	r3, [r1, #4]

}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40010400 	.word	0x40010400

080063ec <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80063f4:	4b05      	ldr	r3, [pc, #20]	; (800640c <LL_EXTI_EnableEvent_32_63+0x20>)
 80063f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063f8:	4904      	ldr	r1, [pc, #16]	; (800640c <LL_EXTI_EnableEvent_32_63+0x20>)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	40010400 	.word	0x40010400

08006410 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006418:	4b06      	ldr	r3, [pc, #24]	; (8006434 <LL_EXTI_DisableEvent_0_31+0x24>)
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	43db      	mvns	r3, r3
 8006420:	4904      	ldr	r1, [pc, #16]	; (8006434 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006422:	4013      	ands	r3, r2
 8006424:	604b      	str	r3, [r1, #4]
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40010400 	.word	0x40010400

08006438 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006440:	4b06      	ldr	r3, [pc, #24]	; (800645c <LL_EXTI_DisableEvent_32_63+0x24>)
 8006442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	43db      	mvns	r3, r3
 8006448:	4904      	ldr	r1, [pc, #16]	; (800645c <LL_EXTI_DisableEvent_32_63+0x24>)
 800644a:	4013      	ands	r3, r2
 800644c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40010400 	.word	0x40010400

08006460 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	4904      	ldr	r1, [pc, #16]	; (8006480 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4313      	orrs	r3, r2
 8006472:	608b      	str	r3, [r1, #8]

}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40010400 	.word	0x40010400

08006484 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800648e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006490:	4904      	ldr	r1, [pc, #16]	; (80064a4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4313      	orrs	r3, r2
 8006496:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40010400 	.word	0x40010400

080064a8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80064b0:	4b06      	ldr	r3, [pc, #24]	; (80064cc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	43db      	mvns	r3, r3
 80064b8:	4904      	ldr	r1, [pc, #16]	; (80064cc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	608b      	str	r3, [r1, #8]

}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40010400 	.word	0x40010400

080064d0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80064d8:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80064da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	43db      	mvns	r3, r3
 80064e0:	4904      	ldr	r1, [pc, #16]	; (80064f4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80064e2:	4013      	ands	r3, r2
 80064e4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40010400 	.word	0x40010400

080064f8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006500:	4b05      	ldr	r3, [pc, #20]	; (8006518 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	4904      	ldr	r1, [pc, #16]	; (8006518 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4313      	orrs	r3, r2
 800650a:	60cb      	str	r3, [r1, #12]
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	40010400 	.word	0x40010400

0800651c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006524:	4b05      	ldr	r3, [pc, #20]	; (800653c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006528:	4904      	ldr	r1, [pc, #16]	; (800653c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4313      	orrs	r3, r2
 800652e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40010400 	.word	0x40010400

08006540 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006548:	4b06      	ldr	r3, [pc, #24]	; (8006564 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	43db      	mvns	r3, r3
 8006550:	4904      	ldr	r1, [pc, #16]	; (8006564 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006552:	4013      	ands	r3, r2
 8006554:	60cb      	str	r3, [r1, #12]
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	40010400 	.word	0x40010400

08006568 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006570:	4b06      	ldr	r3, [pc, #24]	; (800658c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	43db      	mvns	r3, r3
 8006578:	4904      	ldr	r1, [pc, #16]	; (800658c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800657a:	4013      	ands	r3, r2
 800657c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40010400 	.word	0x40010400

08006590 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7a1b      	ldrb	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80c6 	beq.w	8006732 <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d05d      	beq.n	800666a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	7a5b      	ldrb	r3, [r3, #9]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d00e      	beq.n	80065d4 <LL_EXTI_Init+0x44>
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d017      	beq.n	80065ea <LL_EXTI_Init+0x5a>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d120      	bne.n	8006600 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff ff24 	bl	8006410 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff feaf 	bl	8006330 <LL_EXTI_EnableIT_0_31>
          break;
 80065d2:	e018      	b.n	8006606 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fecd 	bl	8006378 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff fef0 	bl	80063c8 <LL_EXTI_EnableEvent_0_31>
          break;
 80065e8:	e00d      	b.n	8006606 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fe9e 	bl	8006330 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fee5 	bl	80063c8 <LL_EXTI_EnableEvent_0_31>
          break;
 80065fe:	e002      	b.n	8006606 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8006600:	2301      	movs	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
          break;
 8006604:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	7a9b      	ldrb	r3, [r3, #10]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d02d      	beq.n	800666a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	7a9b      	ldrb	r3, [r3, #10]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d00e      	beq.n	8006634 <LL_EXTI_Init+0xa4>
 8006616:	2b03      	cmp	r3, #3
 8006618:	d017      	beq.n	800664a <LL_EXTI_Init+0xba>
 800661a:	2b01      	cmp	r3, #1
 800661c:	d120      	bne.n	8006660 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff ff8c 	bl	8006540 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff ff17 	bl	8006460 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006632:	e01b      	b.n	800666c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff ff35 	bl	80064a8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff ff58 	bl	80064f8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006648:	e010      	b.n	800666c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff ff06 	bl	8006460 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff ff4d 	bl	80064f8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800665e:	e005      	b.n	800666c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f043 0302 	orr.w	r3, r3, #2
 8006666:	60fb      	str	r3, [r7, #12]
            break;
 8006668:	e000      	b.n	800666c <LL_EXTI_Init+0xdc>
        }
      }
 800666a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d073      	beq.n	800675c <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	7a5b      	ldrb	r3, [r3, #9]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d00e      	beq.n	800669a <LL_EXTI_Init+0x10a>
 800667c:	2b02      	cmp	r3, #2
 800667e:	d017      	beq.n	80066b0 <LL_EXTI_Init+0x120>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d120      	bne.n	80066c6 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fed5 	bl	8006438 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fe5e 	bl	8006354 <LL_EXTI_EnableIT_32_63>
          break;
 8006698:	e01a      	b.n	80066d0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff fe7e 	bl	80063a0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fe9f 	bl	80063ec <LL_EXTI_EnableEvent_32_63>
          break;
 80066ae:	e00f      	b.n	80066d0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff fe4d 	bl	8006354 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff fe94 	bl	80063ec <LL_EXTI_EnableEvent_32_63>
          break;
 80066c4:	e004      	b.n	80066d0 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f043 0304 	orr.w	r3, r3, #4
 80066cc:	60fb      	str	r3, [r7, #12]
          break;
 80066ce:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	7a9b      	ldrb	r3, [r3, #10]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d041      	beq.n	800675c <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	7a9b      	ldrb	r3, [r3, #10]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d00e      	beq.n	80066fe <LL_EXTI_Init+0x16e>
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d017      	beq.n	8006714 <LL_EXTI_Init+0x184>
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d120      	bne.n	800672a <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff ff3b 	bl	8006568 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fec4 	bl	8006484 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80066fc:	e02f      	b.n	800675e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff fee4 	bl	80064d0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff ff05 	bl	800651c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8006712:	e024      	b.n	800675e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff feb3 	bl	8006484 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff fefa 	bl	800651c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8006728:	e019      	b.n	800675e <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]
            break;
 800672e:	bf00      	nop
 8006730:	e015      	b.n	800675e <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff fe1e 	bl	8006378 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff fe65 	bl	8006410 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fe28 	bl	80063a0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fe6f 	bl	8006438 <LL_EXTI_DisableEvent_32_63>
 800675a:	e000      	b.n	800675e <LL_EXTI_Init+0x1ce>
      }
 800675c:	bf00      	nop
  }

  return status;
 800675e:	68fb      	ldr	r3, [r7, #12]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006768:	b480      	push	{r7}
 800676a:	b089      	sub	sp, #36	; 0x24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	fa93 f3a3 	rbit	r3, r3
 8006782:	613b      	str	r3, [r7, #16]
  return result;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	fab3 f383 	clz	r3, r3
 800678a:	b2db      	uxtb	r3, r3
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	2103      	movs	r1, #3
 8006790:	fa01 f303 	lsl.w	r3, r1, r3
 8006794:	43db      	mvns	r3, r3
 8006796:	401a      	ands	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	fa93 f3a3 	rbit	r3, r3
 80067a2:	61bb      	str	r3, [r7, #24]
  return result;
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	fab3 f383 	clz	r3, r3
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	fa01 f303 	lsl.w	r3, r1, r3
 80067b4:	431a      	orrs	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	601a      	str	r2, [r3, #0]
}
 80067ba:	bf00      	nop
 80067bc:	3724      	adds	r7, #36	; 0x24
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	43db      	mvns	r3, r3
 80067da:	401a      	ands	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	fb01 f303 	mul.w	r3, r1, r3
 80067e4:	431a      	orrs	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	605a      	str	r2, [r3, #4]
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b089      	sub	sp, #36	; 0x24
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	fa93 f3a3 	rbit	r3, r3
 8006810:	613b      	str	r3, [r7, #16]
  return result;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	fab3 f383 	clz	r3, r3
 8006818:	b2db      	uxtb	r3, r3
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	2103      	movs	r1, #3
 800681e:	fa01 f303 	lsl.w	r3, r1, r3
 8006822:	43db      	mvns	r3, r3
 8006824:	401a      	ands	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	fa93 f3a3 	rbit	r3, r3
 8006830:	61bb      	str	r3, [r7, #24]
  return result;
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	fab3 f383 	clz	r3, r3
 8006838:	b2db      	uxtb	r3, r3
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	fa01 f303 	lsl.w	r3, r1, r3
 8006842:	431a      	orrs	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006848:	bf00      	nop
 800684a:	3724      	adds	r7, #36	; 0x24
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006854:	b480      	push	{r7}
 8006856:	b089      	sub	sp, #36	; 0x24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	fa93 f3a3 	rbit	r3, r3
 800686e:	613b      	str	r3, [r7, #16]
  return result;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	fab3 f383 	clz	r3, r3
 8006876:	b2db      	uxtb	r3, r3
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	2103      	movs	r1, #3
 800687c:	fa01 f303 	lsl.w	r3, r1, r3
 8006880:	43db      	mvns	r3, r3
 8006882:	401a      	ands	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	fa93 f3a3 	rbit	r3, r3
 800688e:	61bb      	str	r3, [r7, #24]
  return result;
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	fab3 f383 	clz	r3, r3
 8006896:	b2db      	uxtb	r3, r3
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	fa01 f303 	lsl.w	r3, r1, r3
 80068a0:	431a      	orrs	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	60da      	str	r2, [r3, #12]
}
 80068a6:	bf00      	nop
 80068a8:	3724      	adds	r7, #36	; 0x24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b089      	sub	sp, #36	; 0x24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a1a      	ldr	r2, [r3, #32]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	fa93 f3a3 	rbit	r3, r3
 80068cc:	613b      	str	r3, [r7, #16]
  return result;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	fab3 f383 	clz	r3, r3
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	210f      	movs	r1, #15
 80068da:	fa01 f303 	lsl.w	r3, r1, r3
 80068de:	43db      	mvns	r3, r3
 80068e0:	401a      	ands	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	fa93 f3a3 	rbit	r3, r3
 80068ec:	61bb      	str	r3, [r7, #24]
  return result;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	fab3 f383 	clz	r3, r3
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	6879      	ldr	r1, [r7, #4]
 80068fa:	fa01 f303 	lsl.w	r3, r1, r3
 80068fe:	431a      	orrs	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006904:	bf00      	nop
 8006906:	3724      	adds	r7, #36	; 0x24
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006910:	b480      	push	{r7}
 8006912:	b089      	sub	sp, #36	; 0x24
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	0a1b      	lsrs	r3, r3, #8
 8006924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	fa93 f3a3 	rbit	r3, r3
 800692c:	613b      	str	r3, [r7, #16]
  return result;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	fab3 f383 	clz	r3, r3
 8006934:	b2db      	uxtb	r3, r3
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	210f      	movs	r1, #15
 800693a:	fa01 f303 	lsl.w	r3, r1, r3
 800693e:	43db      	mvns	r3, r3
 8006940:	401a      	ands	r2, r3
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	0a1b      	lsrs	r3, r3, #8
 8006946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	fa93 f3a3 	rbit	r3, r3
 800694e:	61bb      	str	r3, [r7, #24]
  return result;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	fab3 f383 	clz	r3, r3
 8006956:	b2db      	uxtb	r3, r3
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	6879      	ldr	r1, [r7, #4]
 800695c:	fa01 f303 	lsl.w	r3, r1, r3
 8006960:	431a      	orrs	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006966:	bf00      	nop
 8006968:	3724      	adds	r7, #36	; 0x24
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b086      	sub	sp, #24
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	fa93 f3a3 	rbit	r3, r3
 8006988:	60bb      	str	r3, [r7, #8]
  return result;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	fab3 f383 	clz	r3, r3
 8006990:	b2db      	uxtb	r3, r3
 8006992:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006994:	e040      	b.n	8006a18 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	2101      	movs	r1, #1
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	fa01 f303 	lsl.w	r3, r1, r3
 80069a2:	4013      	ands	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d032      	beq.n	8006a12 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6939      	ldr	r1, [r7, #16]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fed7 	bl	8006768 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d003      	beq.n	80069ca <LL_GPIO_Init+0x58>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d106      	bne.n	80069d8 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	461a      	mov	r2, r3
 80069d0:	6939      	ldr	r1, [r7, #16]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff ff0f 	bl	80067f6 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	461a      	mov	r2, r3
 80069de:	6939      	ldr	r1, [r7, #16]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff ff37 	bl	8006854 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d111      	bne.n	8006a12 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2bff      	cmp	r3, #255	; 0xff
 80069f2:	d807      	bhi.n	8006a04 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	461a      	mov	r2, r3
 80069fa:	6939      	ldr	r1, [r7, #16]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff ff58 	bl	80068b2 <LL_GPIO_SetAFPin_0_7>
 8006a02:	e006      	b.n	8006a12 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6939      	ldr	r1, [r7, #16]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff ff7f 	bl	8006910 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	3301      	adds	r3, #1
 8006a16:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1b7      	bne.n	8006996 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d003      	beq.n	8006a36 <LL_GPIO_Init+0xc4>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d107      	bne.n	8006a46 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	6819      	ldr	r1, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff fec0 	bl	80067c6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006a54:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <LL_RCC_HSI_IsReady+0x24>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a60:	d101      	bne.n	8006a66 <LL_RCC_HSI_IsReady+0x16>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <LL_RCC_HSI_IsReady+0x18>
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40021000 	.word	0x40021000

08006a78 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8006a7c:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <LL_RCC_LSE_IsReady+0x24>)
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d101      	bne.n	8006a8e <LL_RCC_LSE_IsReady+0x16>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <LL_RCC_LSE_IsReady+0x18>
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40021000 	.word	0x40021000

08006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8006aa4:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0308 	and.w	r3, r3, #8
 8006aac:	2b08      	cmp	r3, #8
 8006aae:	d101      	bne.n	8006ab4 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40021000 	.word	0x40021000

08006ac4 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006ac8:	4b04      	ldr	r3, [pc, #16]	; (8006adc <LL_RCC_MSI_GetRange+0x18>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40021000 	.word	0x40021000

08006ae0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8006ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	40021000 	.word	0x40021000

08006afc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006b00:	4b04      	ldr	r3, [pc, #16]	; (8006b14 <LL_RCC_GetSysClkSource+0x18>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 030c 	and.w	r3, r3, #12
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40021000 	.word	0x40021000

08006b18 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006b1c:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <LL_RCC_GetAHBPrescaler+0x18>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40021000 	.word	0x40021000

08006b34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006b38:	4b04      	ldr	r3, [pc, #16]	; (8006b4c <LL_RCC_GetAPB1Prescaler+0x18>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40021000 	.word	0x40021000

08006b50 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006b54:	4b04      	ldr	r3, [pc, #16]	; (8006b68 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40021000 	.word	0x40021000

08006b6c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <LL_RCC_GetUSARTClockSource+0x24>)
 8006b76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	401a      	ands	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	041b      	lsls	r3, r3, #16
 8006b82:	4313      	orrs	r3, r2
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	40021000 	.word	0x40021000

08006b94 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8006b9c:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <LL_RCC_GetUARTClockSource+0x24>)
 8006b9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	401a      	ands	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	041b      	lsls	r3, r3, #16
 8006baa:	4313      	orrs	r3, r2
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	40021000 	.word	0x40021000

08006bbc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006bc0:	4b04      	ldr	r3, [pc, #16]	; (8006bd4 <LL_RCC_PLL_GetMainSource+0x18>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f003 0303 	and.w	r3, r3, #3
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40021000 	.word	0x40021000

08006bd8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006bdc:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <LL_RCC_PLL_GetN+0x18>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	0a1b      	lsrs	r3, r3, #8
 8006be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	40021000 	.word	0x40021000

08006bf4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006bf8:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <LL_RCC_PLL_GetR+0x18>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40021000 	.word	0x40021000

08006c10 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006c14:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <LL_RCC_PLL_GetDivider+0x18>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40021000 	.word	0x40021000

08006c2c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d137      	bne.n	8006cae <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff ff94 	bl	8006b6c <LL_RCC_GetUSARTClockSource>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	f200 80b2 	bhi.w	8006db4 <LL_RCC_GetUSARTClockFreq+0x188>
 8006c50:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8006c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c56:	bf00      	nop
 8006c58:	08006c97 	.word	0x08006c97
 8006c5c:	08006c69 	.word	0x08006c69
 8006c60:	08006c71 	.word	0x08006c71
 8006c64:	08006c83 	.word	0x08006c83
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006c68:	f000 f910 	bl	8006e8c <RCC_GetSystemClockFreq>
 8006c6c:	60f8      	str	r0, [r7, #12]
        break;
 8006c6e:	e0b2      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006c70:	f7ff feee 	bl	8006a50 <LL_RCC_HSI_IsReady>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 809e 	beq.w	8006db8 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8006c7c:	4b58      	ldr	r3, [pc, #352]	; (8006de0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8006c7e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006c80:	e09a      	b.n	8006db8 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006c82:	f7ff fef9 	bl	8006a78 <LL_RCC_LSE_IsReady>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8097 	beq.w	8006dbc <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8006c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c92:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006c94:	e092      	b.n	8006dbc <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006c96:	f000 f8f9 	bl	8006e8c <RCC_GetSystemClockFreq>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 f985 	bl	8006fac <RCC_GetHCLKClockFreq>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 f9ab 	bl	8007000 <RCC_GetPCLK2ClockFreq>
 8006caa:	60f8      	str	r0, [r7, #12]
        break;
 8006cac:	e093      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b0c      	cmp	r3, #12
 8006cb2:	d146      	bne.n	8006d42 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff ff59 	bl	8006b6c <LL_RCC_GetUSARTClockSource>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006cc0:	2b0c      	cmp	r3, #12
 8006cc2:	d87d      	bhi.n	8006dc0 <LL_RCC_GetUSARTClockFreq+0x194>
 8006cc4:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <LL_RCC_GetUSARTClockFreq+0xa0>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006d2b 	.word	0x08006d2b
 8006cd0:	08006dc1 	.word	0x08006dc1
 8006cd4:	08006dc1 	.word	0x08006dc1
 8006cd8:	08006dc1 	.word	0x08006dc1
 8006cdc:	08006d01 	.word	0x08006d01
 8006ce0:	08006dc1 	.word	0x08006dc1
 8006ce4:	08006dc1 	.word	0x08006dc1
 8006ce8:	08006dc1 	.word	0x08006dc1
 8006cec:	08006d09 	.word	0x08006d09
 8006cf0:	08006dc1 	.word	0x08006dc1
 8006cf4:	08006dc1 	.word	0x08006dc1
 8006cf8:	08006dc1 	.word	0x08006dc1
 8006cfc:	08006d19 	.word	0x08006d19
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006d00:	f000 f8c4 	bl	8006e8c <RCC_GetSystemClockFreq>
 8006d04:	60f8      	str	r0, [r7, #12]
        break;
 8006d06:	e066      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006d08:	f7ff fea2 	bl	8006a50 <LL_RCC_HSI_IsReady>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d058      	beq.n	8006dc4 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 8006d12:	4b33      	ldr	r3, [pc, #204]	; (8006de0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8006d14:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006d16:	e055      	b.n	8006dc4 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006d18:	f7ff feae 	bl	8006a78 <LL_RCC_LSE_IsReady>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d052      	beq.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 8006d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d26:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006d28:	e04e      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006d2a:	f000 f8af 	bl	8006e8c <RCC_GetSystemClockFreq>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 f93b 	bl	8006fac <RCC_GetHCLKClockFreq>
 8006d36:	4603      	mov	r3, r0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f94d 	bl	8006fd8 <RCC_GetPCLK1ClockFreq>
 8006d3e:	60f8      	str	r0, [r7, #12]
        break;
 8006d40:	e049      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b30      	cmp	r3, #48	; 0x30
 8006d46:	d141      	bne.n	8006dcc <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff ff0f 	bl	8006b6c <LL_RCC_GetUSARTClockSource>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4a24      	ldr	r2, [pc, #144]	; (8006de4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00d      	beq.n	8006d72 <LL_RCC_GetUSARTClockFreq+0x146>
 8006d56:	4a23      	ldr	r2, [pc, #140]	; (8006de4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d803      	bhi.n	8006d64 <LL_RCC_GetUSARTClockFreq+0x138>
 8006d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d60:	d01c      	beq.n	8006d9c <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 8006d62:	e038      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006d64:	4a20      	ldr	r2, [pc, #128]	; (8006de8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d007      	beq.n	8006d7a <LL_RCC_GetUSARTClockFreq+0x14e>
 8006d6a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006d6e:	d00c      	beq.n	8006d8a <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8006d70:	e031      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 8006d72:	f000 f88b 	bl	8006e8c <RCC_GetSystemClockFreq>
 8006d76:	60f8      	str	r0, [r7, #12]
          break;
 8006d78:	e02d      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 8006d7a:	f7ff fe69 	bl	8006a50 <LL_RCC_HSI_IsReady>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d025      	beq.n	8006dd0 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 8006d84:	4b16      	ldr	r3, [pc, #88]	; (8006de0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8006d86:	60fb      	str	r3, [r7, #12]
          break;
 8006d88:	e022      	b.n	8006dd0 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 8006d8a:	f7ff fe75 	bl	8006a78 <LL_RCC_LSE_IsReady>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01f      	beq.n	8006dd4 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8006d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d98:	60fb      	str	r3, [r7, #12]
          break;
 8006d9a:	e01b      	b.n	8006dd4 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006d9c:	f000 f876 	bl	8006e8c <RCC_GetSystemClockFreq>
 8006da0:	4603      	mov	r3, r0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 f902 	bl	8006fac <RCC_GetHCLKClockFreq>
 8006da8:	4603      	mov	r3, r0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 f914 	bl	8006fd8 <RCC_GetPCLK1ClockFreq>
 8006db0:	60f8      	str	r0, [r7, #12]
          break;
 8006db2:	e010      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8006db4:	bf00      	nop
 8006db6:	e00e      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8006db8:	bf00      	nop
 8006dba:	e00c      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8006dbc:	bf00      	nop
 8006dbe:	e00a      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e008      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8006dc4:	bf00      	nop
 8006dc6:	e006      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8006dc8:	bf00      	nop
 8006dca:	e004      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8006dcc:	bf00      	nop
 8006dce:	e002      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8006dd0:	bf00      	nop
 8006dd2:	e000      	b.n	8006dd6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8006dd4:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	00f42400 	.word	0x00f42400
 8006de4:	00300010 	.word	0x00300010
 8006de8:	00300020 	.word	0x00300020

08006dec <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8006dfc:	d135      	bne.n	8006e6a <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff fec8 	bl	8006b94 <LL_RCC_GetUARTClockSource>
 8006e04:	4603      	mov	r3, r0
 8006e06:	4a1e      	ldr	r2, [pc, #120]	; (8006e80 <LL_RCC_GetUARTClockFreq+0x94>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00d      	beq.n	8006e28 <LL_RCC_GetUARTClockFreq+0x3c>
 8006e0c:	4a1c      	ldr	r2, [pc, #112]	; (8006e80 <LL_RCC_GetUARTClockFreq+0x94>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d803      	bhi.n	8006e1a <LL_RCC_GetUARTClockFreq+0x2e>
 8006e12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e16:	d01c      	beq.n	8006e52 <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8006e18:	e02c      	b.n	8006e74 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006e1a:	4a1a      	ldr	r2, [pc, #104]	; (8006e84 <LL_RCC_GetUARTClockFreq+0x98>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d007      	beq.n	8006e30 <LL_RCC_GetUARTClockFreq+0x44>
 8006e20:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006e24:	d00c      	beq.n	8006e40 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 8006e26:	e025      	b.n	8006e74 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 8006e28:	f000 f830 	bl	8006e8c <RCC_GetSystemClockFreq>
 8006e2c:	60f8      	str	r0, [r7, #12]
        break;
 8006e2e:	e021      	b.n	8006e74 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 8006e30:	f7ff fe0e 	bl	8006a50 <LL_RCC_HSI_IsReady>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d019      	beq.n	8006e6e <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 8006e3a:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <LL_RCC_GetUARTClockFreq+0x9c>)
 8006e3c:	60fb      	str	r3, [r7, #12]
        break;
 8006e3e:	e016      	b.n	8006e6e <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 8006e40:	f7ff fe1a 	bl	8006a78 <LL_RCC_LSE_IsReady>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d013      	beq.n	8006e72 <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 8006e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e4e:	60fb      	str	r3, [r7, #12]
        break;
 8006e50:	e00f      	b.n	8006e72 <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006e52:	f000 f81b 	bl	8006e8c <RCC_GetSystemClockFreq>
 8006e56:	4603      	mov	r3, r0
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 f8a7 	bl	8006fac <RCC_GetHCLKClockFreq>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 f8b9 	bl	8006fd8 <RCC_GetPCLK1ClockFreq>
 8006e66:	60f8      	str	r0, [r7, #12]
        break;
 8006e68:	e004      	b.n	8006e74 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 8006e6a:	bf00      	nop
 8006e6c:	e002      	b.n	8006e74 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8006e6e:	bf00      	nop
 8006e70:	e000      	b.n	8006e74 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8006e72:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8006e74:	68fb      	ldr	r3, [r7, #12]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	00c00040 	.word	0x00c00040
 8006e84:	00c00080 	.word	0x00c00080
 8006e88:	00f42400 	.word	0x00f42400

08006e8c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006e92:	f7ff fe33 	bl	8006afc <LL_RCC_GetSysClkSource>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b0c      	cmp	r3, #12
 8006e9a:	d851      	bhi.n	8006f40 <RCC_GetSystemClockFreq+0xb4>
 8006e9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <RCC_GetSystemClockFreq+0x18>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006ed9 	.word	0x08006ed9
 8006ea8:	08006f41 	.word	0x08006f41
 8006eac:	08006f41 	.word	0x08006f41
 8006eb0:	08006f41 	.word	0x08006f41
 8006eb4:	08006f2d 	.word	0x08006f2d
 8006eb8:	08006f41 	.word	0x08006f41
 8006ebc:	08006f41 	.word	0x08006f41
 8006ec0:	08006f41 	.word	0x08006f41
 8006ec4:	08006f33 	.word	0x08006f33
 8006ec8:	08006f41 	.word	0x08006f41
 8006ecc:	08006f41 	.word	0x08006f41
 8006ed0:	08006f41 	.word	0x08006f41
 8006ed4:	08006f39 	.word	0x08006f39
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006ed8:	f7ff fde2 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d111      	bne.n	8006f06 <RCC_GetSystemClockFreq+0x7a>
 8006ee2:	f7ff fddd 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <RCC_GetSystemClockFreq+0x6a>
 8006eec:	f7ff fdea 	bl	8006ac4 <LL_RCC_MSI_GetRange>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	0a1b      	lsrs	r3, r3, #8
 8006ef4:	e003      	b.n	8006efe <RCC_GetSystemClockFreq+0x72>
 8006ef6:	f7ff fdf3 	bl	8006ae0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006efa:	4603      	mov	r3, r0
 8006efc:	0a1b      	lsrs	r3, r3, #8
 8006efe:	4a28      	ldr	r2, [pc, #160]	; (8006fa0 <RCC_GetSystemClockFreq+0x114>)
 8006f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f04:	e010      	b.n	8006f28 <RCC_GetSystemClockFreq+0x9c>
 8006f06:	f7ff fdcb 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d004      	beq.n	8006f1a <RCC_GetSystemClockFreq+0x8e>
 8006f10:	f7ff fdd8 	bl	8006ac4 <LL_RCC_MSI_GetRange>
 8006f14:	4603      	mov	r3, r0
 8006f16:	091b      	lsrs	r3, r3, #4
 8006f18:	e003      	b.n	8006f22 <RCC_GetSystemClockFreq+0x96>
 8006f1a:	f7ff fde1 	bl	8006ae0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	091b      	lsrs	r3, r3, #4
 8006f22:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <RCC_GetSystemClockFreq+0x114>)
 8006f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f28:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006f2a:	e033      	b.n	8006f94 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006f2c:	4b1d      	ldr	r3, [pc, #116]	; (8006fa4 <RCC_GetSystemClockFreq+0x118>)
 8006f2e:	607b      	str	r3, [r7, #4]
      break;
 8006f30:	e030      	b.n	8006f94 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006f32:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <RCC_GetSystemClockFreq+0x11c>)
 8006f34:	607b      	str	r3, [r7, #4]
      break;
 8006f36:	e02d      	b.n	8006f94 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006f38:	f000 f876 	bl	8007028 <RCC_PLL_GetFreqDomain_SYS>
 8006f3c:	6078      	str	r0, [r7, #4]
      break;
 8006f3e:	e029      	b.n	8006f94 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006f40:	f7ff fdae 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d111      	bne.n	8006f6e <RCC_GetSystemClockFreq+0xe2>
 8006f4a:	f7ff fda9 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <RCC_GetSystemClockFreq+0xd2>
 8006f54:	f7ff fdb6 	bl	8006ac4 <LL_RCC_MSI_GetRange>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	e003      	b.n	8006f66 <RCC_GetSystemClockFreq+0xda>
 8006f5e:	f7ff fdbf 	bl	8006ae0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006f62:	4603      	mov	r3, r0
 8006f64:	0a1b      	lsrs	r3, r3, #8
 8006f66:	4a0e      	ldr	r2, [pc, #56]	; (8006fa0 <RCC_GetSystemClockFreq+0x114>)
 8006f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f6c:	e010      	b.n	8006f90 <RCC_GetSystemClockFreq+0x104>
 8006f6e:	f7ff fd97 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <RCC_GetSystemClockFreq+0xf6>
 8006f78:	f7ff fda4 	bl	8006ac4 <LL_RCC_MSI_GetRange>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	091b      	lsrs	r3, r3, #4
 8006f80:	e003      	b.n	8006f8a <RCC_GetSystemClockFreq+0xfe>
 8006f82:	f7ff fdad 	bl	8006ae0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006f86:	4603      	mov	r3, r0
 8006f88:	091b      	lsrs	r3, r3, #4
 8006f8a:	4a05      	ldr	r2, [pc, #20]	; (8006fa0 <RCC_GetSystemClockFreq+0x114>)
 8006f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f90:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006f92:	bf00      	nop
  }

  return frequency;
 8006f94:	687b      	ldr	r3, [r7, #4]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	0800aae0 	.word	0x0800aae0
 8006fa4:	00f42400 	.word	0x00f42400
 8006fa8:	007a1200 	.word	0x007a1200

08006fac <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006fb4:	f7ff fdb0 	bl	8006b18 <LL_RCC_GetAHBPrescaler>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	091b      	lsrs	r3, r3, #4
 8006fbc:	f003 030f 	and.w	r3, r3, #15
 8006fc0:	4a04      	ldr	r2, [pc, #16]	; (8006fd4 <RCC_GetHCLKClockFreq+0x28>)
 8006fc2:	5cd3      	ldrb	r3, [r2, r3]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	40d3      	lsrs	r3, r2
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	0800aac8 	.word	0x0800aac8

08006fd8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006fe0:	f7ff fda8 	bl	8006b34 <LL_RCC_GetAPB1Prescaler>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	0a1b      	lsrs	r3, r3, #8
 8006fe8:	4a04      	ldr	r2, [pc, #16]	; (8006ffc <RCC_GetPCLK1ClockFreq+0x24>)
 8006fea:	5cd3      	ldrb	r3, [r2, r3]
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	40d3      	lsrs	r3, r2
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	0800aad8 	.word	0x0800aad8

08007000 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007008:	f7ff fda2 	bl	8006b50 <LL_RCC_GetAPB2Prescaler>
 800700c:	4603      	mov	r3, r0
 800700e:	0adb      	lsrs	r3, r3, #11
 8007010:	4a04      	ldr	r2, [pc, #16]	; (8007024 <RCC_GetPCLK2ClockFreq+0x24>)
 8007012:	5cd3      	ldrb	r3, [r2, r3]
 8007014:	461a      	mov	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	40d3      	lsrs	r3, r2
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	0800aad8 	.word	0x0800aad8

08007028 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8007028:	b590      	push	{r4, r7, lr}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800702e:	f7ff fdc5 	bl	8006bbc <LL_RCC_PLL_GetMainSource>
 8007032:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2b02      	cmp	r3, #2
 8007038:	d02d      	beq.n	8007096 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 800703a:	2b03      	cmp	r3, #3
 800703c:	d02e      	beq.n	800709c <RCC_PLL_GetFreqDomain_SYS+0x74>
 800703e:	2b01      	cmp	r3, #1
 8007040:	d12f      	bne.n	80070a2 <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007042:	f7ff fd2d 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d111      	bne.n	8007070 <RCC_PLL_GetFreqDomain_SYS+0x48>
 800704c:	f7ff fd28 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d004      	beq.n	8007060 <RCC_PLL_GetFreqDomain_SYS+0x38>
 8007056:	f7ff fd35 	bl	8006ac4 <LL_RCC_MSI_GetRange>
 800705a:	4603      	mov	r3, r0
 800705c:	0a1b      	lsrs	r3, r3, #8
 800705e:	e003      	b.n	8007068 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8007060:	f7ff fd3e 	bl	8006ae0 <LL_RCC_MSI_GetRangeAfterStandby>
 8007064:	4603      	mov	r3, r0
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	4a2f      	ldr	r2, [pc, #188]	; (8007128 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800706a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800706e:	e010      	b.n	8007092 <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8007070:	f7ff fd16 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d004      	beq.n	8007084 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 800707a:	f7ff fd23 	bl	8006ac4 <LL_RCC_MSI_GetRange>
 800707e:	4603      	mov	r3, r0
 8007080:	091b      	lsrs	r3, r3, #4
 8007082:	e003      	b.n	800708c <RCC_PLL_GetFreqDomain_SYS+0x64>
 8007084:	f7ff fd2c 	bl	8006ae0 <LL_RCC_MSI_GetRangeAfterStandby>
 8007088:	4603      	mov	r3, r0
 800708a:	091b      	lsrs	r3, r3, #4
 800708c:	4a26      	ldr	r2, [pc, #152]	; (8007128 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800708e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007092:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007094:	e02f      	b.n	80070f6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007096:	4b25      	ldr	r3, [pc, #148]	; (800712c <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8007098:	607b      	str	r3, [r7, #4]
      break;
 800709a:	e02c      	b.n	80070f6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800709c:	4b24      	ldr	r3, [pc, #144]	; (8007130 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 800709e:	607b      	str	r3, [r7, #4]
      break;
 80070a0:	e029      	b.n	80070f6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80070a2:	f7ff fcfd 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d111      	bne.n	80070d0 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 80070ac:	f7ff fcf8 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <RCC_PLL_GetFreqDomain_SYS+0x98>
 80070b6:	f7ff fd05 	bl	8006ac4 <LL_RCC_MSI_GetRange>
 80070ba:	4603      	mov	r3, r0
 80070bc:	0a1b      	lsrs	r3, r3, #8
 80070be:	e003      	b.n	80070c8 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 80070c0:	f7ff fd0e 	bl	8006ae0 <LL_RCC_MSI_GetRangeAfterStandby>
 80070c4:	4603      	mov	r3, r0
 80070c6:	0a1b      	lsrs	r3, r3, #8
 80070c8:	4a17      	ldr	r2, [pc, #92]	; (8007128 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80070ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ce:	e010      	b.n	80070f2 <RCC_PLL_GetFreqDomain_SYS+0xca>
 80070d0:	f7ff fce6 	bl	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 80070da:	f7ff fcf3 	bl	8006ac4 <LL_RCC_MSI_GetRange>
 80070de:	4603      	mov	r3, r0
 80070e0:	091b      	lsrs	r3, r3, #4
 80070e2:	e003      	b.n	80070ec <RCC_PLL_GetFreqDomain_SYS+0xc4>
 80070e4:	f7ff fcfc 	bl	8006ae0 <LL_RCC_MSI_GetRangeAfterStandby>
 80070e8:	4603      	mov	r3, r0
 80070ea:	091b      	lsrs	r3, r3, #4
 80070ec:	4a0e      	ldr	r2, [pc, #56]	; (8007128 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80070ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80070f4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80070f6:	f7ff fd8b 	bl	8006c10 <LL_RCC_PLL_GetDivider>
 80070fa:	4603      	mov	r3, r0
 80070fc:	091b      	lsrs	r3, r3, #4
 80070fe:	3301      	adds	r3, #1
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	fbb2 f4f3 	udiv	r4, r2, r3
 8007106:	f7ff fd67 	bl	8006bd8 <LL_RCC_PLL_GetN>
 800710a:	4603      	mov	r3, r0
 800710c:	fb03 f404 	mul.w	r4, r3, r4
 8007110:	f7ff fd70 	bl	8006bf4 <LL_RCC_PLL_GetR>
 8007114:	4603      	mov	r3, r0
 8007116:	0e5b      	lsrs	r3, r3, #25
 8007118:	3301      	adds	r3, #1
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	bd90      	pop	{r4, r7, pc}
 8007128:	0800aae0 	.word	0x0800aae0
 800712c:	00f42400 	.word	0x00f42400
 8007130:	007a1200 	.word	0x007a1200

08007134 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007134:	b084      	sub	sp, #16
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	f107 001c 	add.w	r0, r7, #28
 8007142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007152:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8007156:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800715a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800715e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007162:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007172:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	431a      	orrs	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	b004      	add	sp, #16
 800718c:	4770      	bx	lr

0800718e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2203      	movs	r2, #3
 80071d6:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80071d8:	2002      	movs	r0, #2
 80071da:	f7f9 fa41 	bl	8000660 <HAL_Delay>

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0303 	and.w	r3, r3, #3
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007222:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007228:	431a      	orrs	r2, r3
                       Command->CPSM);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800722e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800723e:	f023 030f 	bic.w	r3, r3, #15
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	b2db      	uxtb	r3, r3
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3314      	adds	r3, #20
 8007280:	461a      	mov	r2, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	4413      	add	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80072be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80072c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80072ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0

}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80072fe:	2310      	movs	r3, #16
 8007300:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007302:	2340      	movs	r3, #64	; 0x40
 8007304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007306:	2300      	movs	r3, #0
 8007308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800730a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007310:	f107 0308 	add.w	r3, r7, #8
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff ff74 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800731c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007320:	2110      	movs	r1, #16
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa40 	bl	80077a8 <SDMMC_GetCmdResp1>
 8007328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800732a:	69fb      	ldr	r3, [r7, #28]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007342:	2311      	movs	r3, #17
 8007344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007346:	2340      	movs	r3, #64	; 0x40
 8007348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800734e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007352:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007354:	f107 0308 	add.w	r3, r7, #8
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff ff52 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007360:	f241 3288 	movw	r2, #5000	; 0x1388
 8007364:	2111      	movs	r1, #17
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa1e 	bl	80077a8 <SDMMC_GetCmdResp1>
 800736c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800736e:	69fb      	ldr	r3, [r7, #28]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3720      	adds	r7, #32
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007386:	2312      	movs	r3, #18
 8007388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800738a:	2340      	movs	r3, #64	; 0x40
 800738c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007396:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007398:	f107 0308 	add.w	r3, r7, #8
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff ff30 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80073a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a8:	2112      	movs	r1, #18
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f9fc 	bl	80077a8 <SDMMC_GetCmdResp1>
 80073b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073b2:	69fb      	ldr	r3, [r7, #28]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3720      	adds	r7, #32
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80073ca:	2318      	movs	r3, #24
 80073cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073ce:	2340      	movs	r3, #64	; 0x40
 80073d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073dc:	f107 0308 	add.w	r3, r7, #8
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff ff0e 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80073e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ec:	2118      	movs	r1, #24
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f9da 	bl	80077a8 <SDMMC_GetCmdResp1>
 80073f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073f6:	69fb      	ldr	r3, [r7, #28]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800740e:	2319      	movs	r3, #25
 8007410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800741a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800741e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007420:	f107 0308 	add.w	r3, r7, #8
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff feec 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800742c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007430:	2119      	movs	r1, #25
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f9b8 	bl	80077a8 <SDMMC_GetCmdResp1>
 8007438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800743a:	69fb      	ldr	r3, [r7, #28]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007450:	230c      	movs	r3, #12
 8007452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007454:	2340      	movs	r3, #64	; 0x40
 8007456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800745c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007460:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007462:	f107 0308 	add.w	r3, r7, #8
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff fecb 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800746e:	4a05      	ldr	r2, [pc, #20]	; (8007484 <SDMMC_CmdStopTransfer+0x40>)
 8007470:	210c      	movs	r1, #12
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f998 	bl	80077a8 <SDMMC_GetCmdResp1>
 8007478:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800747a:	69fb      	ldr	r3, [r7, #28]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3720      	adds	r7, #32
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	05f5e100 	.word	0x05f5e100

08007488 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08a      	sub	sp, #40	; 0x28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007498:	2307      	movs	r3, #7
 800749a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800749c:	2340      	movs	r3, #64	; 0x40
 800749e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074a8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074aa:	f107 0310 	add.w	r3, r7, #16
 80074ae:	4619      	mov	r1, r3
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff fea7 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80074b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ba:	2107      	movs	r1, #7
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f973 	bl	80077a8 <SDMMC_GetCmdResp1>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3728      	adds	r7, #40	; 0x28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b088      	sub	sp, #32
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80074de:	2300      	movs	r3, #0
 80074e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074ec:	f107 0308 	add.w	r3, r7, #8
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fe86 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f92d 	bl	8007758 <SDMMC_GetCmdError>
 80074fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007500:	69fb      	ldr	r3, [r7, #28]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3720      	adds	r7, #32
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b088      	sub	sp, #32
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007512:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007518:	2308      	movs	r3, #8
 800751a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800751c:	2340      	movs	r3, #64	; 0x40
 800751e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007528:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800752a:	f107 0308 	add.w	r3, r7, #8
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff fe67 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fb16 	bl	8007b68 <SDMMC_GetCmdResp7>
 800753c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800753e:	69fb      	ldr	r3, [r7, #28]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b088      	sub	sp, #32
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007556:	2337      	movs	r3, #55	; 0x37
 8007558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800755a:	2340      	movs	r3, #64	; 0x40
 800755c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007566:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007568:	f107 0308 	add.w	r3, r7, #8
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fe48 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007574:	f241 3288 	movw	r2, #5000	; 0x1388
 8007578:	2137      	movs	r1, #55	; 0x37
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f914 	bl	80077a8 <SDMMC_GetCmdResp1>
 8007580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007582:	69fb      	ldr	r3, [r7, #28]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3720      	adds	r7, #32
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800759c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075a0:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80075a2:	2329      	movs	r3, #41	; 0x29
 80075a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075a6:	2340      	movs	r3, #64	; 0x40
 80075a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075b4:	f107 0308 	add.w	r3, r7, #8
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff fe22 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fa23 	bl	8007a0c <SDMMC_GetCmdResp3>
 80075c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075c8:	69fb      	ldr	r3, [r7, #28]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3720      	adds	r7, #32
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b088      	sub	sp, #32
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80075e0:	2306      	movs	r3, #6
 80075e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075e4:	2340      	movs	r3, #64	; 0x40
 80075e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075f2:	f107 0308 	add.w	r3, r7, #8
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff fe03 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80075fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007602:	2106      	movs	r1, #6
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f8cf 	bl	80077a8 <SDMMC_GetCmdResp1>
 800760a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800760c:	69fb      	ldr	r3, [r7, #28]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3720      	adds	r7, #32
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b088      	sub	sp, #32
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007622:	2333      	movs	r3, #51	; 0x33
 8007624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007626:	2340      	movs	r3, #64	; 0x40
 8007628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800762e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007634:	f107 0308 	add.w	r3, r7, #8
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff fde2 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007640:	f241 3288 	movw	r2, #5000	; 0x1388
 8007644:	2133      	movs	r1, #51	; 0x33
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f8ae 	bl	80077a8 <SDMMC_GetCmdResp1>
 800764c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800764e:	69fb      	ldr	r3, [r7, #28]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007664:	2302      	movs	r3, #2
 8007666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007668:	23c0      	movs	r3, #192	; 0xc0
 800766a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800766c:	2300      	movs	r3, #0
 800766e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007674:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007676:	f107 0308 	add.w	r3, r7, #8
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fdc1 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f97c 	bl	8007980 <SDMMC_GetCmdResp2>
 8007688:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800768a:	69fb      	ldr	r3, [r7, #28]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3720      	adds	r7, #32
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b088      	sub	sp, #32
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80076a2:	2309      	movs	r3, #9
 80076a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80076a6:	23c0      	movs	r3, #192	; 0xc0
 80076a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076b4:	f107 0308 	add.w	r3, r7, #8
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff fda2 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f95d 	bl	8007980 <SDMMC_GetCmdResp2>
 80076c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076c8:	69fb      	ldr	r3, [r7, #28]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3720      	adds	r7, #32
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b088      	sub	sp, #32
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80076dc:	2300      	movs	r3, #0
 80076de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80076e0:	2303      	movs	r3, #3
 80076e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076e4:	2340      	movs	r3, #64	; 0x40
 80076e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fd83 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	2103      	movs	r1, #3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f9bc 	bl	8007a80 <SDMMC_GetCmdResp6>
 8007708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800770a:	69fb      	ldr	r3, [r7, #28]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3720      	adds	r7, #32
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007722:	230d      	movs	r3, #13
 8007724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007726:	2340      	movs	r3, #64	; 0x40
 8007728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800772e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007732:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007734:	f107 0308 	add.w	r3, r7, #8
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fd62 	bl	8007204 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007740:	f241 3288 	movw	r2, #5000	; 0x1388
 8007744:	210d      	movs	r1, #13
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f82e 	bl	80077a8 <SDMMC_GetCmdResp1>
 800774c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800774e:	69fb      	ldr	r3, [r7, #28]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007758:	b490      	push	{r4, r7}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007760:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <SDMMC_GetCmdError+0x48>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a0f      	ldr	r2, [pc, #60]	; (80077a4 <SDMMC_GetCmdError+0x4c>)
 8007766:	fba2 2303 	umull	r2, r3, r2, r3
 800776a:	0a5b      	lsrs	r3, r3, #9
 800776c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007770:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8007774:	4623      	mov	r3, r4
 8007776:	1e5c      	subs	r4, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d102      	bne.n	8007782 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800777c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007780:	e009      	b.n	8007796 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0f2      	beq.n	8007774 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	22c5      	movs	r2, #197	; 0xc5
 8007792:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bc90      	pop	{r4, r7}
 800779e:	4770      	bx	lr
 80077a0:	20000010 	.word	0x20000010
 80077a4:	10624dd3 	.word	0x10624dd3

080077a8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80077a8:	b590      	push	{r4, r7, lr}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	460b      	mov	r3, r1
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80077b6:	4b6f      	ldr	r3, [pc, #444]	; (8007974 <SDMMC_GetCmdResp1+0x1cc>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a6f      	ldr	r2, [pc, #444]	; (8007978 <SDMMC_GetCmdResp1+0x1d0>)
 80077bc:	fba2 2303 	umull	r2, r3, r2, r3
 80077c0:	0a5b      	lsrs	r3, r3, #9
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80077c8:	4623      	mov	r3, r4
 80077ca:	1e5c      	subs	r4, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d102      	bne.n	80077d6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077d4:	e0c9      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077da:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0f0      	beq.n	80077c8 <SDMMC_GetCmdResp1+0x20>
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1eb      	bne.n	80077c8 <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2204      	movs	r2, #4
 8007800:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007802:	2304      	movs	r3, #4
 8007804:	e0b1      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007818:	2301      	movs	r3, #1
 800781a:	e0a6      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	22c5      	movs	r2, #197	; 0xc5
 8007820:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff fd18 	bl	8007258 <SDMMC_GetCommandResponse>
 8007828:	4603      	mov	r3, r0
 800782a:	461a      	mov	r2, r3
 800782c:	7afb      	ldrb	r3, [r7, #11]
 800782e:	4293      	cmp	r3, r2
 8007830:	d001      	beq.n	8007836 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007832:	2301      	movs	r3, #1
 8007834:	e099      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007836:	2100      	movs	r1, #0
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f7ff fd1a 	bl	8007272 <SDMMC_GetResponse>
 800783e:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4b4e      	ldr	r3, [pc, #312]	; (800797c <SDMMC_GetCmdResp1+0x1d4>)
 8007844:	4013      	ands	r3, r2
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800784a:	2300      	movs	r3, #0
 800784c:	e08d      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	da02      	bge.n	800785a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007858:	e087      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007864:	2340      	movs	r3, #64	; 0x40
 8007866:	e080      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007872:	2380      	movs	r3, #128	; 0x80
 8007874:	e079      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007884:	e071      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007894:	e069      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80078a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a4:	e061      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80078b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078b4:	e059      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80078c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078c4:	e051      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80078d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078d4:	e049      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80078e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80078e4:	e041      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80078f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078f4:	e039      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007904:	e031      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007910:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007914:	e029      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007920:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007924:	e021      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007930:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007934:	e019      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007940:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007944:	e011      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007950:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007954:	e009      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f003 0308 	and.w	r3, r3, #8
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007960:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007964:	e001      	b.n	800796a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800796a:	4618      	mov	r0, r3
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	bd90      	pop	{r4, r7, pc}
 8007972:	bf00      	nop
 8007974:	20000010 	.word	0x20000010
 8007978:	10624dd3 	.word	0x10624dd3
 800797c:	fdffe008 	.word	0xfdffe008

08007980 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007980:	b490      	push	{r4, r7}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007988:	4b1e      	ldr	r3, [pc, #120]	; (8007a04 <SDMMC_GetCmdResp2+0x84>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a1e      	ldr	r2, [pc, #120]	; (8007a08 <SDMMC_GetCmdResp2+0x88>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	0a5b      	lsrs	r3, r3, #9
 8007994:	f241 3288 	movw	r2, #5000	; 0x1388
 8007998:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800799c:	4623      	mov	r3, r4
 800799e:	1e5c      	subs	r4, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079a8:	e026      	b.n	80079f8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0f0      	beq.n	800799c <SDMMC_GetCmdResp2+0x1c>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1eb      	bne.n	800799c <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2204      	movs	r2, #4
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079d6:	2304      	movs	r3, #4
 80079d8:	e00e      	b.n	80079f8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e003      	b.n	80079f8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	22c5      	movs	r2, #197	; 0xc5
 80079f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bc90      	pop	{r4, r7}
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000010 	.word	0x20000010
 8007a08:	10624dd3 	.word	0x10624dd3

08007a0c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007a0c:	b490      	push	{r4, r7}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a14:	4b18      	ldr	r3, [pc, #96]	; (8007a78 <SDMMC_GetCmdResp3+0x6c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a18      	ldr	r2, [pc, #96]	; (8007a7c <SDMMC_GetCmdResp3+0x70>)
 8007a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1e:	0a5b      	lsrs	r3, r3, #9
 8007a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a24:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8007a28:	4623      	mov	r3, r4
 8007a2a:	1e5c      	subs	r4, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a34:	e01b      	b.n	8007a6e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0f0      	beq.n	8007a28 <SDMMC_GetCmdResp3+0x1c>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1eb      	bne.n	8007a28 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d004      	beq.n	8007a66 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2204      	movs	r2, #4
 8007a60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a62:	2304      	movs	r3, #4
 8007a64:	e003      	b.n	8007a6e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	22c5      	movs	r2, #197	; 0xc5
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bc90      	pop	{r4, r7}
 8007a76:	4770      	bx	lr
 8007a78:	20000010 	.word	0x20000010
 8007a7c:	10624dd3 	.word	0x10624dd3

08007a80 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007a80:	b590      	push	{r4, r7, lr}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a8e:	4b34      	ldr	r3, [pc, #208]	; (8007b60 <SDMMC_GetCmdResp6+0xe0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a34      	ldr	r2, [pc, #208]	; (8007b64 <SDMMC_GetCmdResp6+0xe4>)
 8007a94:	fba2 2303 	umull	r2, r3, r2, r3
 8007a98:	0a5b      	lsrs	r3, r3, #9
 8007a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a9e:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8007aa2:	4623      	mov	r3, r4
 8007aa4:	1e5c      	subs	r4, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d102      	bne.n	8007ab0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007aaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007aae:	e052      	b.n	8007b56 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0f0      	beq.n	8007aa2 <SDMMC_GetCmdResp6+0x22>
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1eb      	bne.n	8007aa2 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d004      	beq.n	8007ae0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2204      	movs	r2, #4
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007adc:	2304      	movs	r3, #4
 8007ade:	e03a      	b.n	8007b56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e02f      	b.n	8007b56 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f7ff fbae 	bl	8007258 <SDMMC_GetCommandResponse>
 8007afc:	4603      	mov	r3, r0
 8007afe:	461a      	mov	r2, r3
 8007b00:	7afb      	ldrb	r3, [r7, #11]
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d001      	beq.n	8007b0a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e025      	b.n	8007b56 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	22c5      	movs	r2, #197	; 0xc5
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007b10:	2100      	movs	r1, #0
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff fbad 	bl	8007272 <SDMMC_GetResponse>
 8007b18:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	0c1b      	lsrs	r3, r3, #16
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e011      	b.n	8007b56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b40:	e009      	b.n	8007b56 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b50:	e001      	b.n	8007b56 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd90      	pop	{r4, r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000010 	.word	0x20000010
 8007b64:	10624dd3 	.word	0x10624dd3

08007b68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007b68:	b490      	push	{r4, r7}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b70:	4b21      	ldr	r3, [pc, #132]	; (8007bf8 <SDMMC_GetCmdResp7+0x90>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a21      	ldr	r2, [pc, #132]	; (8007bfc <SDMMC_GetCmdResp7+0x94>)
 8007b76:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7a:	0a5b      	lsrs	r3, r3, #9
 8007b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b80:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8007b84:	4623      	mov	r3, r4
 8007b86:	1e5c      	subs	r4, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b90:	e02c      	b.n	8007bec <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b96:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0f0      	beq.n	8007b84 <SDMMC_GetCmdResp7+0x1c>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1eb      	bne.n	8007b84 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2204      	movs	r2, #4
 8007bbc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bbe:	2304      	movs	r3, #4
 8007bc0:	e014      	b.n	8007bec <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d004      	beq.n	8007bd8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e009      	b.n	8007bec <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2240      	movs	r2, #64	; 0x40
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007bea:	2300      	movs	r3, #0

}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc90      	pop	{r4, r7}
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	20000010 	.word	0x20000010
 8007bfc:	10624dd3 	.word	0x10624dd3

08007c00 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d101      	bne.n	8007c18 <LL_USART_IsEnabled+0x18>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e000      	b.n	8007c1a <LL_USART_IsEnabled+0x1a>
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	605a      	str	r2, [r3, #4]
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	609a      	str	r2, [r3, #8]
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8007c72:	b490      	push	{r4, r7}
 8007c74:	b086      	sub	sp, #24
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
 8007c7e:	603b      	str	r3, [r7, #0]
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c86:	d116      	bne.n	8007cb6 <LL_USART_SetBaudRate+0x44>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	005a      	lsls	r2, r3, #1
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	085b      	lsrs	r3, r3, #1
 8007c90:	441a      	add	r2, r3
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8007ca2:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	085b      	lsrs	r3, r3, #1
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	60dc      	str	r4, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8007cb4:	e00a      	b.n	8007ccc <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	085a      	lsrs	r2, r3, #1
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	441a      	add	r2, r3
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	60da      	str	r2, [r3, #12]
}
 8007ccc:	bf00      	nop
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc90      	pop	{r4, r7}
 8007cd4:	4770      	bx	lr
	...

08007cd8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff ff88 	bl	8007c00 <LL_USART_IsEnabled>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d151      	bne.n	8007d9a <LL_USART_Init+0xc2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	4b2a      	ldr	r3, [pc, #168]	; (8007da4 <LL_USART_Init+0xcc>)
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	6851      	ldr	r1, [r2, #4]
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	68d2      	ldr	r2, [r2, #12]
 8007d06:	4311      	orrs	r1, r2
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	6912      	ldr	r2, [r2, #16]
 8007d0c:	4311      	orrs	r1, r2
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	6992      	ldr	r2, [r2, #24]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff ff80 	bl	8007c26 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff ff8d 	bl	8007c4c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a1c      	ldr	r2, [pc, #112]	; (8007da8 <LL_USART_Init+0xd0>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d104      	bne.n	8007d44 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8007d3a:	2003      	movs	r0, #3
 8007d3c:	f7fe ff76 	bl	8006c2c <LL_RCC_GetUSARTClockFreq>
 8007d40:	60b8      	str	r0, [r7, #8]
 8007d42:	e019      	b.n	8007d78 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a19      	ldr	r2, [pc, #100]	; (8007dac <LL_USART_Init+0xd4>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d104      	bne.n	8007d56 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8007d4c:	200c      	movs	r0, #12
 8007d4e:	f7fe ff6d 	bl	8006c2c <LL_RCC_GetUSARTClockFreq>
 8007d52:	60b8      	str	r0, [r7, #8]
 8007d54:	e010      	b.n	8007d78 <LL_USART_Init+0xa0>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a15      	ldr	r2, [pc, #84]	; (8007db0 <LL_USART_Init+0xd8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d104      	bne.n	8007d68 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8007d5e:	2030      	movs	r0, #48	; 0x30
 8007d60:	f7fe ff64 	bl	8006c2c <LL_RCC_GetUSARTClockFreq>
 8007d64:	60b8      	str	r0, [r7, #8]
 8007d66:	e007      	b.n	8007d78 <LL_USART_Init+0xa0>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a12      	ldr	r2, [pc, #72]	; (8007db4 <LL_USART_Init+0xdc>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d103      	bne.n	8007d78 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8007d70:	20c0      	movs	r0, #192	; 0xc0
 8007d72:	f7ff f83b 	bl	8006dec <LL_RCC_GetUARTClockFreq>
 8007d76:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00d      	beq.n	8007d9a <LL_USART_Init+0xc2>
        && (USART_InitStruct->BaudRate != 0U))
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d009      	beq.n	8007d9a <LL_USART_Init+0xc2>
    {
      status = SUCCESS;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	699a      	ldr	r2, [r3, #24]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68b9      	ldr	r1, [r7, #8]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff ff6c 	bl	8007c72 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	efff69f3 	.word	0xefff69f3
 8007da8:	40013800 	.word	0x40013800
 8007dac:	40004400 	.word	0x40004400
 8007db0:	40004800 	.word	0x40004800
 8007db4:	40004c00 	.word	0x40004c00

08007db8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007dce:	4b1f      	ldr	r3, [pc, #124]	; (8007e4c <FATFS_LinkDriverEx+0x94>)
 8007dd0:	7a5b      	ldrb	r3, [r3, #9]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d131      	bne.n	8007e3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007dd8:	4b1c      	ldr	r3, [pc, #112]	; (8007e4c <FATFS_LinkDriverEx+0x94>)
 8007dda:	7a5b      	ldrb	r3, [r3, #9]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	461a      	mov	r2, r3
 8007de0:	4b1a      	ldr	r3, [pc, #104]	; (8007e4c <FATFS_LinkDriverEx+0x94>)
 8007de2:	2100      	movs	r1, #0
 8007de4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007de6:	4b19      	ldr	r3, [pc, #100]	; (8007e4c <FATFS_LinkDriverEx+0x94>)
 8007de8:	7a5b      	ldrb	r3, [r3, #9]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <FATFS_LinkDriverEx+0x94>)
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007df6:	4b15      	ldr	r3, [pc, #84]	; (8007e4c <FATFS_LinkDriverEx+0x94>)
 8007df8:	7a5b      	ldrb	r3, [r3, #9]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <FATFS_LinkDriverEx+0x94>)
 8007e00:	4413      	add	r3, r2
 8007e02:	79fa      	ldrb	r2, [r7, #7]
 8007e04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e06:	4b11      	ldr	r3, [pc, #68]	; (8007e4c <FATFS_LinkDriverEx+0x94>)
 8007e08:	7a5b      	ldrb	r3, [r3, #9]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	b2d1      	uxtb	r1, r2
 8007e10:	4a0e      	ldr	r2, [pc, #56]	; (8007e4c <FATFS_LinkDriverEx+0x94>)
 8007e12:	7251      	strb	r1, [r2, #9]
 8007e14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e16:	7dbb      	ldrb	r3, [r7, #22]
 8007e18:	3330      	adds	r3, #48	; 0x30
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3301      	adds	r3, #1
 8007e24:	223a      	movs	r2, #58	; 0x3a
 8007e26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	3302      	adds	r3, #2
 8007e2c:	222f      	movs	r2, #47	; 0x2f
 8007e2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	3303      	adds	r3, #3
 8007e34:	2200      	movs	r2, #0
 8007e36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	371c      	adds	r7, #28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20000094 	.word	0x20000094

08007e50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7ff ffaa 	bl	8007db8 <FATFS_LinkDriverEx>
 8007e64:	4603      	mov	r3, r0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <USART3_Callback>:

volatile uint8_t uart3_Buffer[TX_BUFF_SIZE] = { 0 };

/* Usart3 IRQ handler */
void USART3_Callback(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0

	/* Check if RXNE flag high */
	if ((USART3->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 8007e76:	4b14      	ldr	r3, [pc, #80]	; (8007ec8 <USART3_Callback+0x58>)
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b20      	cmp	r3, #32
 8007e80:	d11c      	bne.n	8007ebc <USART3_Callback+0x4c>
	{
		/* Read Data Register on USART3 (Sara module) */
		uint8_t data = USART3->RDR;
 8007e82:	4b11      	ldr	r3, [pc, #68]	; (8007ec8 <USART3_Callback+0x58>)
 8007e84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	71fb      	strb	r3, [r7, #7]

		/* Disable \r and \n from buffer */
		if (data != '\r')
 8007e8a:	79fb      	ldrb	r3, [r7, #7]
 8007e8c:	2b0d      	cmp	r3, #13
 8007e8e:	d00e      	beq.n	8007eae <USART3_Callback+0x3e>
		{
			if (data != '\n')
 8007e90:	79fb      	ldrb	r3, [r7, #7]
 8007e92:	2b0a      	cmp	r3, #10
 8007e94:	d00b      	beq.n	8007eae <USART3_Callback+0x3e>
			{
				/* Add data to Buffer */
				uart3_Buffer[uart3.Head] = data;
 8007e96:	4b0d      	ldr	r3, [pc, #52]	; (8007ecc <USART3_Callback+0x5c>)
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4a0c      	ldr	r2, [pc, #48]	; (8007ed0 <USART3_Callback+0x60>)
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	5453      	strb	r3, [r2, r1]
				uart3.Head++;
 8007ea2:	4b0a      	ldr	r3, [pc, #40]	; (8007ecc <USART3_Callback+0x5c>)
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	4b08      	ldr	r3, [pc, #32]	; (8007ecc <USART3_Callback+0x5c>)
 8007eac:	801a      	strh	r2, [r3, #0]
			}
		}

		/* Overflow Safety */
		if (uart3.Head > TX_BUFF_SIZE - 1)
 8007eae:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <USART3_Callback+0x5c>)
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	2bff      	cmp	r3, #255	; 0xff
 8007eb4:	d902      	bls.n	8007ebc <USART3_Callback+0x4c>
		{
			uart3.Head = 0;
 8007eb6:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <USART3_Callback+0x5c>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	40004800 	.word	0x40004800
 8007ecc:	20008ba4 	.word	0x20008ba4
 8007ed0:	200000a0 	.word	0x200000a0

08007ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b0b0      	sub	sp, #192	; 0xc0
 8007ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007eda:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007ede:	2244      	movs	r2, #68	; 0x44
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f001 fdf8 	bl	8009ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ee8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]
 8007ef0:	605a      	str	r2, [r3, #4]
 8007ef2:	609a      	str	r2, [r3, #8]
 8007ef4:	60da      	str	r2, [r3, #12]
 8007ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ef8:	463b      	mov	r3, r7
 8007efa:	2268      	movs	r2, #104	; 0x68
 8007efc:	2100      	movs	r1, #0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f001 fdea 	bl	8009ad8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007f04:	f7f9 ff78 	bl	8001df8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007f08:	4b42      	ldr	r3, [pc, #264]	; (8008014 <SystemClock_Config+0x140>)
 8007f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0e:	4a41      	ldr	r2, [pc, #260]	; (8008014 <SystemClock_Config+0x140>)
 8007f10:	f023 0318 	bic.w	r3, r3, #24
 8007f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8007f18:	230d      	movs	r3, #13
 8007f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007f24:	2301      	movs	r3, #1
 8007f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f30:	2302      	movs	r3, #2
 8007f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f36:	2303      	movs	r3, #3
 8007f38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 8;
 8007f42:	2308      	movs	r3, #8
 8007f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007f48:	2307      	movs	r3, #7
 8007f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007f4e:	2302      	movs	r3, #2
 8007f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007f54:	2302      	movs	r3, #2
 8007f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7f9 ffbe 	bl	8001ee0 <HAL_RCC_OscConfig>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007f6a:	f000 fec9 	bl	8008d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f6e:	230f      	movs	r3, #15
 8007f70:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f72:	2303      	movs	r3, #3
 8007f74:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f76:	2300      	movs	r3, #0
 8007f78:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007f82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007f86:	2101      	movs	r1, #1
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fa fbc9 	bl	8002720 <HAL_RCC_ClockConfig>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8007f94:	f000 feb4 	bl	8008d00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8007f98:	4b1f      	ldr	r3, [pc, #124]	; (8008018 <SystemClock_Config+0x144>)
 8007f9a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_LPTIM2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8007fac:	2300      	movs	r3, #0
 8007fae:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007fb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fc2:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8007fc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007fc8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8007fd2:	2308      	movs	r3, #8
 8007fd4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8007fd6:	2307      	movs	r3, #7
 8007fd8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007fde:	2302      	movs	r3, #2
 8007fe0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8007fe2:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8007fe6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007fe8:	463b      	mov	r3, r7
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fa fd9c 	bl	8002b28 <HAL_RCCEx_PeriphCLKConfig>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <SystemClock_Config+0x126>
  {
    Error_Handler();
 8007ff6:	f000 fe83 	bl	8008d00 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007ffa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007ffe:	f7f9 ff19 	bl	8001e34 <HAL_PWREx_ControlVoltageScaling>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <SystemClock_Config+0x138>
  {
    Error_Handler();
 8008008:	f000 fe7a 	bl	8008d00 <Error_Handler>
  }
}
 800800c:	bf00      	nop
 800800e:	37c0      	adds	r7, #192	; 0xc0
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	40021000 	.word	0x40021000
 8008018:	001a44c7 	.word	0x001a44c7

0800801c <USART2_Callback>:

volatile uint8_t uart2_Buffer[TX_BUFF_SIZE] = { 0 };

/* Usart2 IRQ handler */
void USART2_Callback(void)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0

	/* Check if RXNE flag high */
	if ((USART2->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 8008022:	4b14      	ldr	r3, [pc, #80]	; (8008074 <USART2_Callback+0x58>)
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b20      	cmp	r3, #32
 800802c:	d11c      	bne.n	8008068 <USART2_Callback+0x4c>
	{
		/* Read Data Register on USART1 (Sara module) */
		uint8_t data = USART2->RDR;
 800802e:	4b11      	ldr	r3, [pc, #68]	; (8008074 <USART2_Callback+0x58>)
 8008030:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008032:	b29b      	uxth	r3, r3
 8008034:	71fb      	strb	r3, [r7, #7]

		/* Disable \r and \n from buffer */
		if (data != '\r')
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	2b0d      	cmp	r3, #13
 800803a:	d00e      	beq.n	800805a <USART2_Callback+0x3e>
		{
			if (data != '\n')
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	2b0a      	cmp	r3, #10
 8008040:	d00b      	beq.n	800805a <USART2_Callback+0x3e>
			{
				/* Add data to Buffer */
				uart2_Buffer[uart2.Head] = data;
 8008042:	4b0d      	ldr	r3, [pc, #52]	; (8008078 <USART2_Callback+0x5c>)
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	4619      	mov	r1, r3
 8008048:	4a0c      	ldr	r2, [pc, #48]	; (800807c <USART2_Callback+0x60>)
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	5453      	strb	r3, [r2, r1]
				uart2.Head++;
 800804e:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <USART2_Callback+0x5c>)
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	3301      	adds	r3, #1
 8008054:	b29a      	uxth	r2, r3
 8008056:	4b08      	ldr	r3, [pc, #32]	; (8008078 <USART2_Callback+0x5c>)
 8008058:	801a      	strh	r2, [r3, #0]
			}
		}

		/* Overflow Safety */
		if (uart2.Head > TX_BUFF_SIZE - 1)
 800805a:	4b07      	ldr	r3, [pc, #28]	; (8008078 <USART2_Callback+0x5c>)
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	2bff      	cmp	r3, #255	; 0xff
 8008060:	d902      	bls.n	8008068 <USART2_Callback+0x4c>
		{
			uart2.Head = 0;
 8008062:	4b05      	ldr	r3, [pc, #20]	; (8008078 <USART2_Callback+0x5c>)
 8008064:	2200      	movs	r2, #0
 8008066:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	40004400 	.word	0x40004400
 8008078:	2000bad8 	.word	0x2000bad8
 800807c:	200001a0 	.word	0x200001a0

08008080 <_write>:
				 printf("string\r\n");
				 or
				 printf("Variable 1: %d\r\n, var1); to get the variable printed
--------------------------------------------------------------------------------------------------*/
int _write(int file, char *data, int len)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d00a      	beq.n	80080a8 <_write+0x28>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d007      	beq.n	80080a8 <_write+0x28>
	{
		errno = EBADF;
 8008098:	f001 fcf4 	bl	8009a84 <__errno>
 800809c:	4602      	mov	r2, r0
 800809e:	2309      	movs	r3, #9
 80080a0:	6013      	str	r3, [r2, #0]
		return -1;
 80080a2:	f04f 33ff 	mov.w	r3, #4294967295
 80080a6:	e010      	b.n	80080ca <_write+0x4a>
	}
	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(huart_Generic, (uint8_t*) data, len, 1000);
 80080a8:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <_write+0x54>)
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	f7fd fc05 	bl	80058c4 <HAL_UART_Transmit>
 80080ba:	4603      	mov	r3, r0
 80080bc:	75fb      	strb	r3, [r7, #23]

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <_write+0x48>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	e000      	b.n	80080ca <_write+0x4a>
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000008 	.word	0x20000008

080080d8 <debugPrint>:
  	  	  	  	  Writes to same UART port that printf defines
  Argument(s)  :  First arg is string to be printed, second arg is debugLevel
  	  	  	  	  See enum for info about second argument
--------------------------------------------------------------------------------------------------*/
void debugPrint(char* out, uint8_t debugLevel)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
	if(debugLevel == debugLevel_Print)
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d104      	bne.n	80080f4 <debugPrint+0x1c>
	{
		printf("--%s\r\n", out);
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	4811      	ldr	r0, [pc, #68]	; (8008134 <debugPrint+0x5c>)
 80080ee:	f001 fda3 	bl	8009c38 <iprintf>
	}
	else
	{
		printf("__ No debugLevel given __\r\n");
	}
}
 80080f2:	e01a      	b.n	800812a <debugPrint+0x52>
	else if(debugLevel == debugLevel_Info)
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d104      	bne.n	8008104 <debugPrint+0x2c>
		printf("[Info] - %s\r\n", out);
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	480e      	ldr	r0, [pc, #56]	; (8008138 <debugPrint+0x60>)
 80080fe:	f001 fd9b 	bl	8009c38 <iprintf>
}
 8008102:	e012      	b.n	800812a <debugPrint+0x52>
	else if(debugLevel == debugLevel_Warning)
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d104      	bne.n	8008114 <debugPrint+0x3c>
		printf("[Warning] - %s\r\n", out);
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	480b      	ldr	r0, [pc, #44]	; (800813c <debugPrint+0x64>)
 800810e:	f001 fd93 	bl	8009c38 <iprintf>
}
 8008112:	e00a      	b.n	800812a <debugPrint+0x52>
	else if(debugLevel == debugLevel_Error)
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	2b03      	cmp	r3, #3
 8008118:	d104      	bne.n	8008124 <debugPrint+0x4c>
		printf("[Error] -- %s\r\n", out);
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4808      	ldr	r0, [pc, #32]	; (8008140 <debugPrint+0x68>)
 800811e:	f001 fd8b 	bl	8009c38 <iprintf>
}
 8008122:	e002      	b.n	800812a <debugPrint+0x52>
		printf("__ No debugLevel given __\r\n");
 8008124:	4807      	ldr	r0, [pc, #28]	; (8008144 <debugPrint+0x6c>)
 8008126:	f001 fdfb 	bl	8009d20 <puts>
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	0800a990 	.word	0x0800a990
 8008138:	0800a998 	.word	0x0800a998
 800813c:	0800a9a8 	.word	0x0800a9a8
 8008140:	0800a9bc 	.word	0x0800a9bc
 8008144:	0800a9cc 	.word	0x0800a9cc

08008148 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800814e:	463b      	mov	r3, r7
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	609a      	str	r2, [r3, #8]
 8008158:	60da      	str	r2, [r3, #12]
 800815a:	611a      	str	r2, [r3, #16]
 800815c:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800815e:	4b2a      	ldr	r3, [pc, #168]	; (8008208 <MX_ADC1_Init+0xc0>)
 8008160:	4a2a      	ldr	r2, [pc, #168]	; (800820c <MX_ADC1_Init+0xc4>)
 8008162:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008164:	4b28      	ldr	r3, [pc, #160]	; (8008208 <MX_ADC1_Init+0xc0>)
 8008166:	2200      	movs	r2, #0
 8008168:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800816a:	4b27      	ldr	r3, [pc, #156]	; (8008208 <MX_ADC1_Init+0xc0>)
 800816c:	2200      	movs	r2, #0
 800816e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008170:	4b25      	ldr	r3, [pc, #148]	; (8008208 <MX_ADC1_Init+0xc0>)
 8008172:	2200      	movs	r2, #0
 8008174:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008176:	4b24      	ldr	r3, [pc, #144]	; (8008208 <MX_ADC1_Init+0xc0>)
 8008178:	2200      	movs	r2, #0
 800817a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800817c:	4b22      	ldr	r3, [pc, #136]	; (8008208 <MX_ADC1_Init+0xc0>)
 800817e:	2204      	movs	r2, #4
 8008180:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008182:	4b21      	ldr	r3, [pc, #132]	; (8008208 <MX_ADC1_Init+0xc0>)
 8008184:	2200      	movs	r2, #0
 8008186:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008188:	4b1f      	ldr	r3, [pc, #124]	; (8008208 <MX_ADC1_Init+0xc0>)
 800818a:	2200      	movs	r2, #0
 800818c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800818e:	4b1e      	ldr	r3, [pc, #120]	; (8008208 <MX_ADC1_Init+0xc0>)
 8008190:	2201      	movs	r2, #1
 8008192:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008194:	4b1c      	ldr	r3, [pc, #112]	; (8008208 <MX_ADC1_Init+0xc0>)
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800819c:	4b1a      	ldr	r3, [pc, #104]	; (8008208 <MX_ADC1_Init+0xc0>)
 800819e:	2201      	movs	r2, #1
 80081a0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80081a2:	4b19      	ldr	r3, [pc, #100]	; (8008208 <MX_ADC1_Init+0xc0>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80081a8:	4b17      	ldr	r3, [pc, #92]	; (8008208 <MX_ADC1_Init+0xc0>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80081ae:	4b16      	ldr	r3, [pc, #88]	; (8008208 <MX_ADC1_Init+0xc0>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <MX_ADC1_Init+0xc0>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80081bc:	4b12      	ldr	r3, [pc, #72]	; (8008208 <MX_ADC1_Init+0xc0>)
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80081c4:	4810      	ldr	r0, [pc, #64]	; (8008208 <MX_ADC1_Init+0xc0>)
 80081c6:	f7f8 fbff 	bl	80009c8 <HAL_ADC_Init>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80081d0:	f000 fd96 	bl	8008d00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80081d4:	4b0e      	ldr	r3, [pc, #56]	; (8008210 <MX_ADC1_Init+0xc8>)
 80081d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80081d8:	2306      	movs	r3, #6
 80081da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80081dc:	2300      	movs	r3, #0
 80081de:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80081e0:	237f      	movs	r3, #127	; 0x7f
 80081e2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80081e4:	2304      	movs	r3, #4
 80081e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081ec:	463b      	mov	r3, r7
 80081ee:	4619      	mov	r1, r3
 80081f0:	4805      	ldr	r0, [pc, #20]	; (8008208 <MX_ADC1_Init+0xc0>)
 80081f2:	f7f8 fd33 	bl	8000c5c <HAL_ADC_ConfigChannel>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80081fc:	f000 fd80 	bl	8008d00 <Error_Handler>
  }

}
 8008200:	bf00      	nop
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	2000baf4 	.word	0x2000baf4
 800820c:	50040000 	.word	0x50040000
 8008210:	10c00010 	.word	0x10c00010

08008214 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b08a      	sub	sp, #40	; 0x28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800821c:	f107 0314 	add.w	r3, r7, #20
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	605a      	str	r2, [r3, #4]
 8008226:	609a      	str	r2, [r3, #8]
 8008228:	60da      	str	r2, [r3, #12]
 800822a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a15      	ldr	r2, [pc, #84]	; (8008288 <HAL_ADC_MspInit+0x74>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d123      	bne.n	800827e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008236:	4b15      	ldr	r3, [pc, #84]	; (800828c <HAL_ADC_MspInit+0x78>)
 8008238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823a:	4a14      	ldr	r2, [pc, #80]	; (800828c <HAL_ADC_MspInit+0x78>)
 800823c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008242:	4b12      	ldr	r3, [pc, #72]	; (800828c <HAL_ADC_MspInit+0x78>)
 8008244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800824a:	613b      	str	r3, [r7, #16]
 800824c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800824e:	4b0f      	ldr	r3, [pc, #60]	; (800828c <HAL_ADC_MspInit+0x78>)
 8008250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008252:	4a0e      	ldr	r2, [pc, #56]	; (800828c <HAL_ADC_MspInit+0x78>)
 8008254:	f043 0304 	orr.w	r3, r3, #4
 8008258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800825a:	4b0c      	ldr	r3, [pc, #48]	; (800828c <HAL_ADC_MspInit+0x78>)
 800825c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825e:	f003 0304 	and.w	r3, r3, #4
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN1
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8008266:	2309      	movs	r3, #9
 8008268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800826a:	230b      	movs	r3, #11
 800826c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826e:	2300      	movs	r3, #0
 8008270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008272:	f107 0314 	add.w	r3, r7, #20
 8008276:	4619      	mov	r1, r3
 8008278:	4805      	ldr	r0, [pc, #20]	; (8008290 <HAL_ADC_MspInit+0x7c>)
 800827a:	f7f9 fa2d 	bl	80016d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800827e:	bf00      	nop
 8008280:	3728      	adds	r7, #40	; 0x28
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	50040000 	.word	0x50040000
 800828c:	40021000 	.word	0x40021000
 8008290:	48000800 	.word	0x48000800

08008294 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800829e:	f000 f879 	bl	8008394 <BSP_SD_IsDetected>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d001      	beq.n	80082ac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80082a8:	2302      	movs	r3, #2
 80082aa:	e012      	b.n	80082d2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80082ac:	480b      	ldr	r0, [pc, #44]	; (80082dc <BSP_SD_Init+0x48>)
 80082ae:	f7fb fb19 	bl	80038e4 <HAL_SD_Init>
 80082b2:	4603      	mov	r3, r0
 80082b4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d109      	bne.n	80082d0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80082bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80082c0:	4806      	ldr	r0, [pc, #24]	; (80082dc <BSP_SD_Init+0x48>)
 80082c2:	f7fc f901 	bl	80044c8 <HAL_SD_ConfigWideBusOperation>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80082d0:	79fb      	ldrb	r3, [r7, #7]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	2000c138 	.word	0x2000c138

080082e0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af02      	add	r7, sp, #8
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	68f9      	ldr	r1, [r7, #12]
 80082fc:	4806      	ldr	r0, [pc, #24]	; (8008318 <BSP_SD_ReadBlocks+0x38>)
 80082fe:	f7fb fbaf 	bl	8003a60 <HAL_SD_ReadBlocks>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800830c:	7dfb      	ldrb	r3, [r7, #23]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	2000c138 	.word	0x2000c138

0800831c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af02      	add	r7, sp, #8
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	4806      	ldr	r0, [pc, #24]	; (8008354 <BSP_SD_WriteBlocks+0x38>)
 800833a:	f7fb fd6f 	bl	8003e1c <HAL_SD_WriteBlocks>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8008348:	7dfb      	ldrb	r3, [r7, #23]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	2000c138 	.word	0x2000c138

08008358 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800835c:	4805      	ldr	r0, [pc, #20]	; (8008374 <BSP_SD_GetCardState+0x1c>)
 800835e:	f7fc f949 	bl	80045f4 <HAL_SD_GetCardState>
 8008362:	4603      	mov	r3, r0
 8008364:	2b04      	cmp	r3, #4
 8008366:	bf14      	ite	ne
 8008368:	2301      	movne	r3, #1
 800836a:	2300      	moveq	r3, #0
 800836c:	b2db      	uxtb	r3, r3
}
 800836e:	4618      	mov	r0, r3
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	2000c138 	.word	0x2000c138

08008378 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	4803      	ldr	r0, [pc, #12]	; (8008390 <BSP_SD_GetCardInfo+0x18>)
 8008384:	f7fc f874 	bl	8004470 <HAL_SD_GetCardInfo>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	2000c138 	.word	0x2000c138

08008394 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800839a:	2301      	movs	r3, #1
 800839c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800839e:	f000 f85f 	bl	8008460 <BSP_PlatformIsDetected>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80083a8:	2300      	movs	r3, #0
 80083aa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80083ac:	79fb      	ldrb	r3, [r7, #7]
 80083ae:	b2db      	uxtb	r3, r3
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80083bc:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <MX_CRC_Init+0x3c>)
 80083be:	4a0e      	ldr	r2, [pc, #56]	; (80083f8 <MX_CRC_Init+0x40>)
 80083c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80083c2:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <MX_CRC_Init+0x3c>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80083c8:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <MX_CRC_Init+0x3c>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80083ce:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <MX_CRC_Init+0x3c>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80083d4:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <MX_CRC_Init+0x3c>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80083da:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <MX_CRC_Init+0x3c>)
 80083dc:	2201      	movs	r2, #1
 80083de:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80083e0:	4804      	ldr	r0, [pc, #16]	; (80083f4 <MX_CRC_Init+0x3c>)
 80083e2:	f7f9 f88f 	bl	8001504 <HAL_CRC_Init>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80083ec:	f000 fc88 	bl	8008d00 <Error_Handler>
  }

}
 80083f0:	bf00      	nop
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	2000bb5c 	.word	0x2000bb5c
 80083f8:	40023000 	.word	0x40023000

080083fc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a0a      	ldr	r2, [pc, #40]	; (8008434 <HAL_CRC_MspInit+0x38>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d10b      	bne.n	8008426 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800840e:	4b0a      	ldr	r3, [pc, #40]	; (8008438 <HAL_CRC_MspInit+0x3c>)
 8008410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008412:	4a09      	ldr	r2, [pc, #36]	; (8008438 <HAL_CRC_MspInit+0x3c>)
 8008414:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008418:	6493      	str	r3, [r2, #72]	; 0x48
 800841a:	4b07      	ldr	r3, [pc, #28]	; (8008438 <HAL_CRC_MspInit+0x3c>)
 800841c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800841e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8008426:	bf00      	nop
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	40023000 	.word	0x40023000
 8008438:	40021000 	.word	0x40021000

0800843c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008440:	4904      	ldr	r1, [pc, #16]	; (8008454 <MX_FATFS_Init+0x18>)
 8008442:	4805      	ldr	r0, [pc, #20]	; (8008458 <MX_FATFS_Init+0x1c>)
 8008444:	f7ff fd04 	bl	8007e50 <FATFS_LinkDriver>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	4b03      	ldr	r3, [pc, #12]	; (800845c <MX_FATFS_Init+0x20>)
 800844e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008450:	bf00      	nop
 8008452:	bd80      	pop	{r7, pc}
 8008454:	2000bb84 	.word	0x2000bb84
 8008458:	0800aab4 	.word	0x0800aab4
 800845c:	2000bb80 	.word	0x2000bb80

08008460 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008466:	2301      	movs	r3, #1
 8008468:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800846a:	2180      	movs	r1, #128	; 0x80
 800846c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008470:	f7f9 faac 	bl	80019cc <HAL_GPIO_ReadPin>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800847a:	2300      	movs	r3, #0
 800847c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800847e:	79fb      	ldrb	r3, [r7, #7]
}  
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <__NVIC_GetPriorityGrouping>:
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800848c:	4b04      	ldr	r3, [pc, #16]	; (80084a0 <__NVIC_GetPriorityGrouping+0x18>)
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	0a1b      	lsrs	r3, r3, #8
 8008492:	f003 0307 	and.w	r3, r3, #7
}
 8008496:	4618      	mov	r0, r3
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	e000ed00 	.word	0xe000ed00

080084a4 <__NVIC_EnableIRQ>:
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	4603      	mov	r3, r0
 80084ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	db0b      	blt.n	80084ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084b6:	79fb      	ldrb	r3, [r7, #7]
 80084b8:	f003 021f 	and.w	r2, r3, #31
 80084bc:	4907      	ldr	r1, [pc, #28]	; (80084dc <__NVIC_EnableIRQ+0x38>)
 80084be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	2001      	movs	r0, #1
 80084c6:	fa00 f202 	lsl.w	r2, r0, r2
 80084ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	e000e100 	.word	0xe000e100

080084e0 <__NVIC_SetPriority>:
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	6039      	str	r1, [r7, #0]
 80084ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	db0a      	blt.n	800850a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	490c      	ldr	r1, [pc, #48]	; (800852c <__NVIC_SetPriority+0x4c>)
 80084fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084fe:	0112      	lsls	r2, r2, #4
 8008500:	b2d2      	uxtb	r2, r2
 8008502:	440b      	add	r3, r1
 8008504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008508:	e00a      	b.n	8008520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	b2da      	uxtb	r2, r3
 800850e:	4908      	ldr	r1, [pc, #32]	; (8008530 <__NVIC_SetPriority+0x50>)
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	3b04      	subs	r3, #4
 8008518:	0112      	lsls	r2, r2, #4
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	440b      	add	r3, r1
 800851e:	761a      	strb	r2, [r3, #24]
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	e000e100 	.word	0xe000e100
 8008530:	e000ed00 	.word	0xe000ed00

08008534 <NVIC_EncodePriority>:
{
 8008534:	b480      	push	{r7}
 8008536:	b089      	sub	sp, #36	; 0x24
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	f1c3 0307 	rsb	r3, r3, #7
 800854e:	2b04      	cmp	r3, #4
 8008550:	bf28      	it	cs
 8008552:	2304      	movcs	r3, #4
 8008554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	3304      	adds	r3, #4
 800855a:	2b06      	cmp	r3, #6
 800855c:	d902      	bls.n	8008564 <NVIC_EncodePriority+0x30>
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	3b03      	subs	r3, #3
 8008562:	e000      	b.n	8008566 <NVIC_EncodePriority+0x32>
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008568:	f04f 32ff 	mov.w	r2, #4294967295
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	fa02 f303 	lsl.w	r3, r2, r3
 8008572:	43da      	mvns	r2, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	401a      	ands	r2, r3
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800857c:	f04f 31ff 	mov.w	r1, #4294967295
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	fa01 f303 	lsl.w	r3, r1, r3
 8008586:	43d9      	mvns	r1, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800858c:	4313      	orrs	r3, r2
}
 800858e:	4618      	mov	r0, r3
 8008590:	3724      	adds	r7, #36	; 0x24
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
	...

0800859c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80085a6:	4a13      	ldr	r2, [pc, #76]	; (80085f4 <LL_SYSCFG_SetEXTISource+0x58>)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	3302      	adds	r3, #2
 80085ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	0c1b      	lsrs	r3, r3, #16
 80085b6:	43db      	mvns	r3, r3
 80085b8:	ea02 0103 	and.w	r1, r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	0c1b      	lsrs	r3, r3, #16
 80085c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	fa93 f3a3 	rbit	r3, r3
 80085c8:	60bb      	str	r3, [r7, #8]
  return result;
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	fab3 f383 	clz	r3, r3
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	461a      	mov	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	fa03 f202 	lsl.w	r2, r3, r2
 80085da:	4806      	ldr	r0, [pc, #24]	; (80085f4 <LL_SYSCFG_SetEXTISource+0x58>)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	430a      	orrs	r2, r1
 80085e2:	3302      	adds	r3, #2
 80085e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80085e8:	bf00      	nop
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	40010000 	.word	0x40010000

080085f8 <LL_GPIO_SetPinMode>:
{
 80085f8:	b480      	push	{r7}
 80085fa:	b089      	sub	sp, #36	; 0x24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	fa93 f3a3 	rbit	r3, r3
 8008612:	613b      	str	r3, [r7, #16]
  return result;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	fab3 f383 	clz	r3, r3
 800861a:	b2db      	uxtb	r3, r3
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	2103      	movs	r1, #3
 8008620:	fa01 f303 	lsl.w	r3, r1, r3
 8008624:	43db      	mvns	r3, r3
 8008626:	401a      	ands	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	fa93 f3a3 	rbit	r3, r3
 8008632:	61bb      	str	r3, [r7, #24]
  return result;
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	fab3 f383 	clz	r3, r3
 800863a:	b2db      	uxtb	r3, r3
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	fa01 f303 	lsl.w	r3, r1, r3
 8008644:	431a      	orrs	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	601a      	str	r2, [r3, #0]
}
 800864a:	bf00      	nop
 800864c:	3724      	adds	r7, #36	; 0x24
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <LL_GPIO_SetPinPull>:
{
 8008656:	b480      	push	{r7}
 8008658:	b089      	sub	sp, #36	; 0x24
 800865a:	af00      	add	r7, sp, #0
 800865c:	60f8      	str	r0, [r7, #12]
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	fa93 f3a3 	rbit	r3, r3
 8008670:	613b      	str	r3, [r7, #16]
  return result;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	fab3 f383 	clz	r3, r3
 8008678:	b2db      	uxtb	r3, r3
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	2103      	movs	r1, #3
 800867e:	fa01 f303 	lsl.w	r3, r1, r3
 8008682:	43db      	mvns	r3, r3
 8008684:	401a      	ands	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	fa93 f3a3 	rbit	r3, r3
 8008690:	61bb      	str	r3, [r7, #24]
  return result;
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	fab3 f383 	clz	r3, r3
 8008698:	b2db      	uxtb	r3, r3
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	fa01 f303 	lsl.w	r3, r1, r3
 80086a2:	431a      	orrs	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	60da      	str	r2, [r3, #12]
}
 80086a8:	bf00      	nop
 80086aa:	3724      	adds	r7, #36	; 0x24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80086d8:	4b08      	ldr	r3, [pc, #32]	; (80086fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80086da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086dc:	4907      	ldr	r1, [pc, #28]	; (80086fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80086e4:	4b05      	ldr	r3, [pc, #20]	; (80086fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80086e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4013      	ands	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80086ee:	68fb      	ldr	r3, [r7, #12]
}
 80086f0:	bf00      	nop
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	40021000 	.word	0x40021000

08008700 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08a      	sub	sp, #40	; 0x28
 8008704:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8008706:	f107 031c 	add.w	r3, r7, #28
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	605a      	str	r2, [r3, #4]
 8008710:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008712:	1d3b      	adds	r3, r7, #4
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	605a      	str	r2, [r3, #4]
 800871a:	609a      	str	r2, [r3, #8]
 800871c:	60da      	str	r2, [r3, #12]
 800871e:	611a      	str	r2, [r3, #16]
 8008720:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8008722:	2004      	movs	r0, #4
 8008724:	f7ff ffd4 	bl	80086d0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8008728:	2080      	movs	r0, #128	; 0x80
 800872a:	f7ff ffd1 	bl	80086d0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800872e:	2001      	movs	r0, #1
 8008730:	f7ff ffce 	bl	80086d0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8008734:	2002      	movs	r0, #2
 8008736:	f7ff ffcb 	bl	80086d0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 800873a:	2008      	movs	r0, #8
 800873c:	f7ff ffc8 	bl	80086d0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Spectrum_Enable_Pin|VBat_Sense_Enable_Pin|Revision_Enable_Pin|Screen_DC_Pin 
 8008740:	f242 01c6 	movw	r1, #8390	; 0x20c6
 8008744:	485e      	ldr	r0, [pc, #376]	; (80088c0 <MX_GPIO_Init+0x1c0>)
 8008746:	f7ff ffb5 	bl	80086b4 <LL_GPIO_ResetOutputPin>
                          |Screen_RST_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, Radio_Enable_Pin|Sara_Reset_Pin|Sara_Power_On_Pin|Screen_Busy_Pin 
 800874a:	f649 1170 	movw	r1, #39280	; 0x9970
 800874e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008752:	f7ff ffaf 	bl	80086b4 <LL_GPIO_ResetOutputPin>
                          |LED_Green_Pin|LED_Red_Pin|SD_Enable_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, GPS_Enable_Pin|Screen_Enable_Pin|Acceleromater_Enable_Pin|SPI_CS_Pin 
 8008756:	f241 0127 	movw	r1, #4135	; 0x1027
 800875a:	485a      	ldr	r0, [pc, #360]	; (80088c4 <MX_GPIO_Init+0x1c4>)
 800875c:	f7ff ffaa 	bl	80086b4 <LL_GPIO_ResetOutputPin>
                          |Sensor_Enable_Pin);

  /**/
  GPIO_InitStruct.Pin = Spectrum_Enable_Pin|VBat_Sense_Enable_Pin|Revision_Enable_Pin|Screen_DC_Pin 
 8008760:	f242 03c6 	movw	r3, #8390	; 0x20c6
 8008764:	607b      	str	r3, [r7, #4]
                          |Screen_RST_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008766:	2301      	movs	r3, #1
 8008768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800876e:	2300      	movs	r3, #0
 8008770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008772:	2300      	movs	r3, #0
 8008774:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008776:	1d3b      	adds	r3, r7, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4851      	ldr	r0, [pc, #324]	; (80088c0 <MX_GPIO_Init+0x1c0>)
 800877c:	f7fe f8f9 	bl	8006972 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Radio_NetStatus_Pin|SD_Detect_Pin;
 8008780:	2382      	movs	r3, #130	; 0x82
 8008782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008784:	2300      	movs	r3, #0
 8008786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800878c:	1d3b      	adds	r3, r7, #4
 800878e:	4619      	mov	r1, r3
 8008790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008794:	f7fe f8ed 	bl	8006972 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Radio_Enable_Pin|Sara_Reset_Pin|Sara_Power_On_Pin|Screen_Busy_Pin 
 8008798:	f649 1370 	movw	r3, #39280	; 0x9970
 800879c:	607b      	str	r3, [r7, #4]
                          |LED_Green_Pin|LED_Red_Pin|SD_Enable_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800879e:	2301      	movs	r3, #1
 80087a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80087aa:	2300      	movs	r3, #0
 80087ac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087ae:	1d3b      	adds	r3, r7, #4
 80087b0:	4619      	mov	r1, r3
 80087b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087b6:	f7fe f8dc 	bl	8006972 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPS_Enable_Pin|Screen_Enable_Pin|Acceleromater_Enable_Pin|SPI_CS_Pin 
 80087ba:	f241 0327 	movw	r3, #4135	; 0x1027
 80087be:	607b      	str	r3, [r7, #4]
                          |Sensor_Enable_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80087c0:	2301      	movs	r3, #1
 80087c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80087c4:	2300      	movs	r3, #0
 80087c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80087c8:	2300      	movs	r3, #0
 80087ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80087cc:	2300      	movs	r3, #0
 80087ce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087d0:	1d3b      	adds	r3, r7, #4
 80087d2:	4619      	mov	r1, r3
 80087d4:	483b      	ldr	r0, [pc, #236]	; (80088c4 <MX_GPIO_Init+0x1c4>)
 80087d6:	f7fe f8cc 	bl	8006972 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80087da:	2308      	movs	r3, #8
 80087dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80087de:	2303      	movs	r3, #3
 80087e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80087e2:	2300      	movs	r3, #0
 80087e4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80087e6:	1d3b      	adds	r3, r7, #4
 80087e8:	4619      	mov	r1, r3
 80087ea:	4837      	ldr	r0, [pc, #220]	; (80088c8 <MX_GPIO_Init+0x1c8>)
 80087ec:	f7fe f8c1 	bl	8006972 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 80087f0:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80087f4:	2000      	movs	r0, #0
 80087f6:	f7ff fed1 	bl	800859c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE4);
 80087fa:	4934      	ldr	r1, [pc, #208]	; (80088cc <MX_GPIO_Init+0x1cc>)
 80087fc:	2001      	movs	r0, #1
 80087fe:	f7ff fecd 	bl	800859c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8008802:	2301      	movs	r3, #1
 8008804:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8008806:	2300      	movs	r3, #0
 8008808:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800880a:	2301      	movs	r3, #1
 800880c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8008810:	2300      	movs	r3, #0
 8008812:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8008816:	2302      	movs	r3, #2
 8008818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800881c:	f107 031c 	add.w	r3, r7, #28
 8008820:	4618      	mov	r0, r3
 8008822:	f7fd feb5 	bl	8006590 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8008826:	2310      	movs	r3, #16
 8008828:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800882a:	2300      	movs	r3, #0
 800882c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800882e:	2301      	movs	r3, #1
 8008830:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8008834:	2300      	movs	r3, #0
 8008836:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800883a:	2301      	movs	r3, #1
 800883c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8008840:	f107 031c 	add.w	r3, r7, #28
 8008844:	4618      	mov	r0, r3
 8008846:	f7fd fea3 	bl	8006590 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(SendData_EXTI0_GPIO_Port, SendData_EXTI0_Pin, LL_GPIO_PULL_NO);
 800884a:	2200      	movs	r2, #0
 800884c:	2101      	movs	r1, #1
 800884e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008852:	f7ff ff00 	bl	8008656 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VBUS_Detect_EXTI4_GPIO_Port, VBUS_Detect_EXTI4_Pin, LL_GPIO_PULL_NO);
 8008856:	2200      	movs	r2, #0
 8008858:	2110      	movs	r1, #16
 800885a:	481a      	ldr	r0, [pc, #104]	; (80088c4 <MX_GPIO_Init+0x1c4>)
 800885c:	f7ff fefb 	bl	8008656 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(SendData_EXTI0_GPIO_Port, SendData_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8008860:	2200      	movs	r2, #0
 8008862:	2101      	movs	r1, #1
 8008864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008868:	f7ff fec6 	bl	80085f8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VBUS_Detect_EXTI4_GPIO_Port, VBUS_Detect_EXTI4_Pin, LL_GPIO_MODE_INPUT);
 800886c:	2200      	movs	r2, #0
 800886e:	2110      	movs	r1, #16
 8008870:	4814      	ldr	r0, [pc, #80]	; (80088c4 <MX_GPIO_Init+0x1c4>)
 8008872:	f7ff fec1 	bl	80085f8 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008876:	f7ff fe07 	bl	8008488 <__NVIC_GetPriorityGrouping>
 800887a:	4603      	mov	r3, r0
 800887c:	2200      	movs	r2, #0
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fe57 	bl	8008534 <NVIC_EncodePriority>
 8008886:	4603      	mov	r3, r0
 8008888:	4619      	mov	r1, r3
 800888a:	2006      	movs	r0, #6
 800888c:	f7ff fe28 	bl	80084e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8008890:	2006      	movs	r0, #6
 8008892:	f7ff fe07 	bl	80084a4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008896:	f7ff fdf7 	bl	8008488 <__NVIC_GetPriorityGrouping>
 800889a:	4603      	mov	r3, r0
 800889c:	2200      	movs	r2, #0
 800889e:	2100      	movs	r1, #0
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff fe47 	bl	8008534 <NVIC_EncodePriority>
 80088a6:	4603      	mov	r3, r0
 80088a8:	4619      	mov	r1, r3
 80088aa:	200a      	movs	r0, #10
 80088ac:	f7ff fe18 	bl	80084e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 80088b0:	200a      	movs	r0, #10
 80088b2:	f7ff fdf7 	bl	80084a4 <__NVIC_EnableIRQ>

}
 80088b6:	bf00      	nop
 80088b8:	3728      	adds	r7, #40	; 0x28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	48000800 	.word	0x48000800
 80088c4:	48000400 	.word	0x48000400
 80088c8:	48001c00 	.word	0x48001c00
 80088cc:	000f0001 	.word	0x000f0001

080088d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80088d4:	4b1b      	ldr	r3, [pc, #108]	; (8008944 <MX_I2C1_Init+0x74>)
 80088d6:	4a1c      	ldr	r2, [pc, #112]	; (8008948 <MX_I2C1_Init+0x78>)
 80088d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80088da:	4b1a      	ldr	r3, [pc, #104]	; (8008944 <MX_I2C1_Init+0x74>)
 80088dc:	4a1b      	ldr	r2, [pc, #108]	; (800894c <MX_I2C1_Init+0x7c>)
 80088de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80088e0:	4b18      	ldr	r3, [pc, #96]	; (8008944 <MX_I2C1_Init+0x74>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80088e6:	4b17      	ldr	r3, [pc, #92]	; (8008944 <MX_I2C1_Init+0x74>)
 80088e8:	2201      	movs	r2, #1
 80088ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80088ec:	4b15      	ldr	r3, [pc, #84]	; (8008944 <MX_I2C1_Init+0x74>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80088f2:	4b14      	ldr	r3, [pc, #80]	; (8008944 <MX_I2C1_Init+0x74>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80088f8:	4b12      	ldr	r3, [pc, #72]	; (8008944 <MX_I2C1_Init+0x74>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80088fe:	4b11      	ldr	r3, [pc, #68]	; (8008944 <MX_I2C1_Init+0x74>)
 8008900:	2200      	movs	r2, #0
 8008902:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008904:	4b0f      	ldr	r3, [pc, #60]	; (8008944 <MX_I2C1_Init+0x74>)
 8008906:	2200      	movs	r2, #0
 8008908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800890a:	480e      	ldr	r0, [pc, #56]	; (8008944 <MX_I2C1_Init+0x74>)
 800890c:	f7f9 f876 	bl	80019fc <HAL_I2C_Init>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008916:	f000 f9f3 	bl	8008d00 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800891a:	2100      	movs	r1, #0
 800891c:	4809      	ldr	r0, [pc, #36]	; (8008944 <MX_I2C1_Init+0x74>)
 800891e:	f7f9 f8fc 	bl	8001b1a <HAL_I2CEx_ConfigAnalogFilter>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008928:	f000 f9ea 	bl	8008d00 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800892c:	2100      	movs	r1, #0
 800892e:	4805      	ldr	r0, [pc, #20]	; (8008944 <MX_I2C1_Init+0x74>)
 8008930:	f7f9 f93e 	bl	8001bb0 <HAL_I2CEx_ConfigDigitalFilter>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800893a:	f000 f9e1 	bl	8008d00 <Error_Handler>
  }

}
 800893e:	bf00      	nop
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	2000c034 	.word	0x2000c034
 8008948:	40005400 	.word	0x40005400
 800894c:	00707cbb 	.word	0x00707cbb

08008950 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8008954:	4b1b      	ldr	r3, [pc, #108]	; (80089c4 <MX_I2C2_Init+0x74>)
 8008956:	4a1c      	ldr	r2, [pc, #112]	; (80089c8 <MX_I2C2_Init+0x78>)
 8008958:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800895a:	4b1a      	ldr	r3, [pc, #104]	; (80089c4 <MX_I2C2_Init+0x74>)
 800895c:	4a1b      	ldr	r2, [pc, #108]	; (80089cc <MX_I2C2_Init+0x7c>)
 800895e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008960:	4b18      	ldr	r3, [pc, #96]	; (80089c4 <MX_I2C2_Init+0x74>)
 8008962:	2200      	movs	r2, #0
 8008964:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008966:	4b17      	ldr	r3, [pc, #92]	; (80089c4 <MX_I2C2_Init+0x74>)
 8008968:	2201      	movs	r2, #1
 800896a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800896c:	4b15      	ldr	r3, [pc, #84]	; (80089c4 <MX_I2C2_Init+0x74>)
 800896e:	2200      	movs	r2, #0
 8008970:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008972:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <MX_I2C2_Init+0x74>)
 8008974:	2200      	movs	r2, #0
 8008976:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008978:	4b12      	ldr	r3, [pc, #72]	; (80089c4 <MX_I2C2_Init+0x74>)
 800897a:	2200      	movs	r2, #0
 800897c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800897e:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <MX_I2C2_Init+0x74>)
 8008980:	2200      	movs	r2, #0
 8008982:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008984:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <MX_I2C2_Init+0x74>)
 8008986:	2200      	movs	r2, #0
 8008988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800898a:	480e      	ldr	r0, [pc, #56]	; (80089c4 <MX_I2C2_Init+0x74>)
 800898c:	f7f9 f836 	bl	80019fc <HAL_I2C_Init>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8008996:	f000 f9b3 	bl	8008d00 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800899a:	2100      	movs	r1, #0
 800899c:	4809      	ldr	r0, [pc, #36]	; (80089c4 <MX_I2C2_Init+0x74>)
 800899e:	f7f9 f8bc 	bl	8001b1a <HAL_I2CEx_ConfigAnalogFilter>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80089a8:	f000 f9aa 	bl	8008d00 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80089ac:	2100      	movs	r1, #0
 80089ae:	4805      	ldr	r0, [pc, #20]	; (80089c4 <MX_I2C2_Init+0x74>)
 80089b0:	f7f9 f8fe 	bl	8001bb0 <HAL_I2CEx_ConfigDigitalFilter>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80089ba:	f000 f9a1 	bl	8008d00 <Error_Handler>
  }

}
 80089be:	bf00      	nop
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	2000c080 	.word	0x2000c080
 80089c8:	40005800 	.word	0x40005800
 80089cc:	00707cbb 	.word	0x00707cbb

080089d0 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0

  hi2c4.Instance = I2C4;
 80089d4:	4b1b      	ldr	r3, [pc, #108]	; (8008a44 <MX_I2C4_Init+0x74>)
 80089d6:	4a1c      	ldr	r2, [pc, #112]	; (8008a48 <MX_I2C4_Init+0x78>)
 80089d8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 80089da:	4b1a      	ldr	r3, [pc, #104]	; (8008a44 <MX_I2C4_Init+0x74>)
 80089dc:	4a1b      	ldr	r2, [pc, #108]	; (8008a4c <MX_I2C4_Init+0x7c>)
 80089de:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80089e0:	4b18      	ldr	r3, [pc, #96]	; (8008a44 <MX_I2C4_Init+0x74>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80089e6:	4b17      	ldr	r3, [pc, #92]	; (8008a44 <MX_I2C4_Init+0x74>)
 80089e8:	2201      	movs	r2, #1
 80089ea:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80089ec:	4b15      	ldr	r3, [pc, #84]	; (8008a44 <MX_I2C4_Init+0x74>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80089f2:	4b14      	ldr	r3, [pc, #80]	; (8008a44 <MX_I2C4_Init+0x74>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80089f8:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <MX_I2C4_Init+0x74>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80089fe:	4b11      	ldr	r3, [pc, #68]	; (8008a44 <MX_I2C4_Init+0x74>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008a04:	4b0f      	ldr	r3, [pc, #60]	; (8008a44 <MX_I2C4_Init+0x74>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8008a0a:	480e      	ldr	r0, [pc, #56]	; (8008a44 <MX_I2C4_Init+0x74>)
 8008a0c:	f7f8 fff6 	bl	80019fc <HAL_I2C_Init>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8008a16:	f000 f973 	bl	8008d00 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4809      	ldr	r0, [pc, #36]	; (8008a44 <MX_I2C4_Init+0x74>)
 8008a1e:	f7f9 f87c 	bl	8001b1a <HAL_I2CEx_ConfigAnalogFilter>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8008a28:	f000 f96a 	bl	8008d00 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4805      	ldr	r0, [pc, #20]	; (8008a44 <MX_I2C4_Init+0x74>)
 8008a30:	f7f9 f8be 	bl	8001bb0 <HAL_I2CEx_ConfigDigitalFilter>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8008a3a:	f000 f961 	bl	8008d00 <Error_Handler>
  }

}
 8008a3e:	bf00      	nop
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	2000bfe8 	.word	0x2000bfe8
 8008a48:	40008400 	.word	0x40008400
 8008a4c:	00707cbb 	.word	0x00707cbb

08008a50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08e      	sub	sp, #56	; 0x38
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	605a      	str	r2, [r3, #4]
 8008a62:	609a      	str	r2, [r3, #8]
 8008a64:	60da      	str	r2, [r3, #12]
 8008a66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a46      	ldr	r2, [pc, #280]	; (8008b88 <HAL_I2C_MspInit+0x138>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d129      	bne.n	8008ac6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a72:	4b46      	ldr	r3, [pc, #280]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a76:	4a45      	ldr	r2, [pc, #276]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008a78:	f043 0302 	orr.w	r3, r3, #2
 8008a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a7e:	4b43      	ldr	r3, [pc, #268]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	623b      	str	r3, [r7, #32]
 8008a88:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008a8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008a90:	2312      	movs	r3, #18
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a94:	2301      	movs	r3, #1
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	483a      	ldr	r0, [pc, #232]	; (8008b90 <HAL_I2C_MspInit+0x140>)
 8008aa8:	f7f8 fe16 	bl	80016d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008aac:	4b37      	ldr	r3, [pc, #220]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab0:	4a36      	ldr	r2, [pc, #216]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8008ab8:	4b34      	ldr	r3, [pc, #208]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ac0:	61fb      	str	r3, [r7, #28]
 8008ac2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8008ac4:	e05b      	b.n	8008b7e <HAL_I2C_MspInit+0x12e>
  else if(i2cHandle->Instance==I2C2)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a32      	ldr	r2, [pc, #200]	; (8008b94 <HAL_I2C_MspInit+0x144>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d129      	bne.n	8008b24 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ad0:	4b2e      	ldr	r3, [pc, #184]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad4:	4a2d      	ldr	r2, [pc, #180]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008ad6:	f043 0302 	orr.w	r3, r3, #2
 8008ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008adc:	4b2b      	ldr	r3, [pc, #172]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	61bb      	str	r3, [r7, #24]
 8008ae6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008ae8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008aee:	2312      	movs	r3, #18
 8008af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008af2:	2301      	movs	r3, #1
 8008af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008af6:	2303      	movs	r3, #3
 8008af8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008afa:	2304      	movs	r3, #4
 8008afc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b02:	4619      	mov	r1, r3
 8008b04:	4822      	ldr	r0, [pc, #136]	; (8008b90 <HAL_I2C_MspInit+0x140>)
 8008b06:	f7f8 fde7 	bl	80016d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008b0a:	4b20      	ldr	r3, [pc, #128]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0e:	4a1f      	ldr	r2, [pc, #124]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b14:	6593      	str	r3, [r2, #88]	; 0x58
 8008b16:	4b1d      	ldr	r3, [pc, #116]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	697b      	ldr	r3, [r7, #20]
}
 8008b22:	e02c      	b.n	8008b7e <HAL_I2C_MspInit+0x12e>
  else if(i2cHandle->Instance==I2C4)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a1b      	ldr	r2, [pc, #108]	; (8008b98 <HAL_I2C_MspInit+0x148>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d127      	bne.n	8008b7e <HAL_I2C_MspInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b2e:	4b17      	ldr	r3, [pc, #92]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b32:	4a16      	ldr	r2, [pc, #88]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008b34:	f043 0302 	orr.w	r3, r3, #2
 8008b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b3a:	4b14      	ldr	r3, [pc, #80]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	613b      	str	r3, [r7, #16]
 8008b44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008b46:	23c0      	movs	r3, #192	; 0xc0
 8008b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008b4a:	2312      	movs	r3, #18
 8008b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b52:	2303      	movs	r3, #3
 8008b54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C4;
 8008b56:	2305      	movs	r3, #5
 8008b58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b5e:	4619      	mov	r1, r3
 8008b60:	480b      	ldr	r0, [pc, #44]	; (8008b90 <HAL_I2C_MspInit+0x140>)
 8008b62:	f7f8 fdb9 	bl	80016d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8008b66:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b6a:	4a08      	ldr	r2, [pc, #32]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008b6c:	f043 0302 	orr.w	r3, r3, #2
 8008b70:	65d3      	str	r3, [r2, #92]	; 0x5c
 8008b72:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <HAL_I2C_MspInit+0x13c>)
 8008b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
}
 8008b7e:	bf00      	nop
 8008b80:	3738      	adds	r7, #56	; 0x38
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	40005400 	.word	0x40005400
 8008b8c:	40021000 	.word	0x40021000
 8008b90:	48000400 	.word	0x48000400
 8008b94:	40005800 	.word	0x40005800
 8008b98:	40008400 	.word	0x40008400

08008b9c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <MX_IWDG_Init+0x34>)
 8008ba2:	4a0c      	ldr	r2, [pc, #48]	; (8008bd4 <MX_IWDG_Init+0x38>)
 8008ba4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8008ba6:	4b0a      	ldr	r3, [pc, #40]	; (8008bd0 <MX_IWDG_Init+0x34>)
 8008ba8:	2206      	movs	r2, #6
 8008baa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8008bac:	4b08      	ldr	r3, [pc, #32]	; (8008bd0 <MX_IWDG_Init+0x34>)
 8008bae:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008bb2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8008bb4:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <MX_IWDG_Init+0x34>)
 8008bb6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008bba:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8008bbc:	4804      	ldr	r0, [pc, #16]	; (8008bd0 <MX_IWDG_Init+0x34>)
 8008bbe:	f7f9 f843 	bl	8001c48 <HAL_IWDG_Init>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8008bc8:	f000 f89a 	bl	8008d00 <Error_Handler>
  }

}
 8008bcc:	bf00      	nop
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	2000c0cc 	.word	0x2000c0cc
 8008bd4:	40003000 	.word	0x40003000

08008bd8 <MX_LPTIM2_Init>:

LPTIM_HandleTypeDef hlptim2;

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0

  hlptim2.Instance = LPTIM2;
 8008bdc:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <MX_LPTIM2_Init+0x50>)
 8008bde:	4a13      	ldr	r2, [pc, #76]	; (8008c2c <MX_LPTIM2_Init+0x54>)
 8008be0:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8008be2:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <MX_LPTIM2_Init+0x50>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8008be8:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <MX_LPTIM2_Init+0x50>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8008bee:	4b0e      	ldr	r3, [pc, #56]	; (8008c28 <MX_LPTIM2_Init+0x50>)
 8008bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bf4:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8008bf6:	4b0c      	ldr	r3, [pc, #48]	; (8008c28 <MX_LPTIM2_Init+0x50>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8008bfc:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <MX_LPTIM2_Init+0x50>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8008c02:	4b09      	ldr	r3, [pc, #36]	; (8008c28 <MX_LPTIM2_Init+0x50>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8008c08:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <MX_LPTIM2_Init+0x50>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8008c0e:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <MX_LPTIM2_Init+0x50>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8008c14:	4804      	ldr	r0, [pc, #16]	; (8008c28 <MX_LPTIM2_Init+0x50>)
 8008c16:	f7f9 f85d 	bl	8001cd4 <HAL_LPTIM_Init>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 8008c20:	f000 f86e 	bl	8008d00 <Error_Handler>
  }

}
 8008c24:	bf00      	nop
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	2000c0dc 	.word	0x2000c0dc
 8008c2c:	40009400 	.word	0x40009400

08008c30 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM2)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a0a      	ldr	r2, [pc, #40]	; (8008c68 <HAL_LPTIM_MspInit+0x38>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d10b      	bne.n	8008c5a <HAL_LPTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN LPTIM2_MspInit 0 */

  /* USER CODE END LPTIM2_MspInit 0 */
    /* LPTIM2 clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8008c42:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <HAL_LPTIM_MspInit+0x3c>)
 8008c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c46:	4a09      	ldr	r2, [pc, #36]	; (8008c6c <HAL_LPTIM_MspInit+0x3c>)
 8008c48:	f043 0320 	orr.w	r3, r3, #32
 8008c4c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8008c4e:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <HAL_LPTIM_MspInit+0x3c>)
 8008c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	60fb      	str	r3, [r7, #12]
 8008c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 8008c5a:	bf00      	nop
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	40009400 	.word	0x40009400
 8008c6c:	40021000 	.word	0x40021000

08008c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008c74:	f7f7 fc84 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008c78:	f7ff f92c 	bl	8007ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008c7c:	f7ff fd40 	bl	8008700 <MX_GPIO_Init>
  MX_CRC_Init();
 8008c80:	f7ff fb9a 	bl	80083b8 <MX_CRC_Init>
  MX_IWDG_Init();
 8008c84:	f7ff ff8a 	bl	8008b9c <MX_IWDG_Init>
  MX_SPI2_Init();
 8008c88:	f000 fa5a 	bl	8009140 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8008c8c:	f000 fd9c 	bl	80097c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8008c90:	f000 fdca 	bl	8009828 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8008c94:	f000 fe28 	bl	80098e8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8008c98:	f7ff fa56 	bl	8008148 <MX_ADC1_Init>
  MX_I2C1_Init();
 8008c9c:	f7ff fe18 	bl	80088d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8008ca0:	f7ff fe56 	bl	8008950 <MX_I2C2_Init>
  MX_I2C4_Init();
 8008ca4:	f7ff fe94 	bl	80089d0 <MX_I2C4_Init>
  MX_RTC_Init();
 8008ca8:	f000 f832 	bl	8008d10 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8008cac:	f000 f9c6 	bl	800903c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8008cb0:	f7ff fbc4 	bl	800843c <MX_FATFS_Init>
  MX_LPTIM2_Init();
 8008cb4:	f7ff ff90 	bl	8008bd8 <MX_LPTIM2_Init>
  MX_TIM2_Init();
 8008cb8:	f000 fc16 	bl	80094e8 <MX_TIM2_Init>

	  /* Add State machine for sensors and radio/GPS */



	  printf("This is a test printf\r\n");
 8008cbc:	480b      	ldr	r0, [pc, #44]	; (8008cec <main+0x7c>)
 8008cbe:	f001 f82f 	bl	8009d20 <puts>

	  debugPrint("Testing DebugPrint - Print", debugLevel_Print);
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	480a      	ldr	r0, [pc, #40]	; (8008cf0 <main+0x80>)
 8008cc6:	f7ff fa07 	bl	80080d8 <debugPrint>
	  debugPrint("Testing DebugPrint - Info", debugLevel_Info);
 8008cca:	2101      	movs	r1, #1
 8008ccc:	4809      	ldr	r0, [pc, #36]	; (8008cf4 <main+0x84>)
 8008cce:	f7ff fa03 	bl	80080d8 <debugPrint>
	  debugPrint("Testing DebugPrint - Warning", debugLevel_Warning);
 8008cd2:	2102      	movs	r1, #2
 8008cd4:	4808      	ldr	r0, [pc, #32]	; (8008cf8 <main+0x88>)
 8008cd6:	f7ff f9ff 	bl	80080d8 <debugPrint>
	  debugPrint("Testing DebugPrint - Error", debugLevel_Error);
 8008cda:	2103      	movs	r1, #3
 8008cdc:	4807      	ldr	r0, [pc, #28]	; (8008cfc <main+0x8c>)
 8008cde:	f7ff f9fb 	bl	80080d8 <debugPrint>

	  HAL_Delay(100);
 8008ce2:	2064      	movs	r0, #100	; 0x64
 8008ce4:	f7f7 fcbc 	bl	8000660 <HAL_Delay>
	  printf("This is a test printf\r\n");
 8008ce8:	e7e8      	b.n	8008cbc <main+0x4c>
 8008cea:	bf00      	nop
 8008cec:	0800aa28 	.word	0x0800aa28
 8008cf0:	0800aa40 	.word	0x0800aa40
 8008cf4:	0800aa5c 	.word	0x0800aa5c
 8008cf8:	0800aa78 	.word	0x0800aa78
 8008cfc:	0800aa98 	.word	0x0800aa98

08008d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008d00:	b480      	push	{r7}
 8008d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008d04:	bf00      	nop
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
	...

08008d10 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b092      	sub	sp, #72	; 0x48
 8008d14:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8008d16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	605a      	str	r2, [r3, #4]
 8008d20:	609a      	str	r2, [r3, #8]
 8008d22:	60da      	str	r2, [r3, #12]
 8008d24:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8008d26:	2300      	movs	r3, #0
 8008d28:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8008d2a:	1d3b      	adds	r3, r7, #4
 8008d2c:	222c      	movs	r2, #44	; 0x2c
 8008d2e:	2100      	movs	r1, #0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fed1 	bl	8009ad8 <memset>

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8008d36:	4b3f      	ldr	r3, [pc, #252]	; (8008e34 <MX_RTC_Init+0x124>)
 8008d38:	4a3f      	ldr	r2, [pc, #252]	; (8008e38 <MX_RTC_Init+0x128>)
 8008d3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008d3c:	4b3d      	ldr	r3, [pc, #244]	; (8008e34 <MX_RTC_Init+0x124>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008d42:	4b3c      	ldr	r3, [pc, #240]	; (8008e34 <MX_RTC_Init+0x124>)
 8008d44:	227f      	movs	r2, #127	; 0x7f
 8008d46:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008d48:	4b3a      	ldr	r3, [pc, #232]	; (8008e34 <MX_RTC_Init+0x124>)
 8008d4a:	22ff      	movs	r2, #255	; 0xff
 8008d4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008d4e:	4b39      	ldr	r3, [pc, #228]	; (8008e34 <MX_RTC_Init+0x124>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008d54:	4b37      	ldr	r3, [pc, #220]	; (8008e34 <MX_RTC_Init+0x124>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008d5a:	4b36      	ldr	r3, [pc, #216]	; (8008e34 <MX_RTC_Init+0x124>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008d60:	4b34      	ldr	r3, [pc, #208]	; (8008e34 <MX_RTC_Init+0x124>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008d66:	4833      	ldr	r0, [pc, #204]	; (8008e34 <MX_RTC_Init+0x124>)
 8008d68:	f7fa fa38 	bl	80031dc <HAL_RTC_Init>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8008d72:	f7ff ffc5 	bl	8008d00 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8008d90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d94:	2201      	movs	r2, #1
 8008d96:	4619      	mov	r1, r3
 8008d98:	4826      	ldr	r0, [pc, #152]	; (8008e34 <MX_RTC_Init+0x124>)
 8008d9a:	f7fa fa9a 	bl	80032d2 <HAL_RTC_SetTime>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8008da4:	f7ff ffac 	bl	8008d00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8008da8:	2301      	movs	r3, #1
 8008daa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8008dae:	2301      	movs	r3, #1
 8008db0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8008db4:	2301      	movs	r3, #1
 8008db6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8008dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	481a      	ldr	r0, [pc, #104]	; (8008e34 <MX_RTC_Init+0x124>)
 8008dca:	f7fa fb1f 	bl	800340c <HAL_RTC_SetDate>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8008dd4:	f7ff ff94 	bl	8008d00 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008de8:	2300      	movs	r3, #0
 8008dea:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008dec:	2300      	movs	r3, #0
 8008dee:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8008e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8008e08:	1d3b      	adds	r3, r7, #4
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4809      	ldr	r0, [pc, #36]	; (8008e34 <MX_RTC_Init+0x124>)
 8008e10:	f7fa fb83 	bl	800351a <HAL_RTC_SetAlarm>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8008e1a:	f7ff ff71 	bl	8008d00 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_B;
 8008e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e28:	62fb      	str	r3, [r7, #44]	; 0x2c

}
 8008e2a:	bf00      	nop
 8008e2c:	3748      	adds	r7, #72	; 0x48
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	2000c114 	.word	0x2000c114
 8008e38:	40002800 	.word	0x40002800

08008e3c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a08      	ldr	r2, [pc, #32]	; (8008e6c <HAL_RTC_MspInit+0x30>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d107      	bne.n	8008e5e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008e4e:	4b08      	ldr	r3, [pc, #32]	; (8008e70 <HAL_RTC_MspInit+0x34>)
 8008e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e54:	4a06      	ldr	r2, [pc, #24]	; (8008e70 <HAL_RTC_MspInit+0x34>)
 8008e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008e5e:	bf00      	nop
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	40002800 	.word	0x40002800
 8008e70:	40021000 	.word	0x40021000

08008e74 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008e7e:	4b0b      	ldr	r3, [pc, #44]	; (8008eac <SD_CheckStatus+0x38>)
 8008e80:	2201      	movs	r2, #1
 8008e82:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008e84:	f7ff fa68 	bl	8008358 <BSP_SD_GetCardState>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d107      	bne.n	8008e9e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008e8e:	4b07      	ldr	r3, [pc, #28]	; (8008eac <SD_CheckStatus+0x38>)
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	f023 0301 	bic.w	r3, r3, #1
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	4b04      	ldr	r3, [pc, #16]	; (8008eac <SD_CheckStatus+0x38>)
 8008e9c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008e9e:	4b03      	ldr	r3, [pc, #12]	; (8008eac <SD_CheckStatus+0x38>)
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	b2db      	uxtb	r3, r3
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	2000000c 	.word	0x2000000c

08008eb0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8008eba:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <SD_initialize+0x38>)
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008ec0:	f7ff f9e8 	bl	8008294 <BSP_SD_Init>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d107      	bne.n	8008eda <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff ffd1 	bl	8008e74 <SD_CheckStatus>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <SD_initialize+0x38>)
 8008ed8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008eda:	4b03      	ldr	r3, [pc, #12]	; (8008ee8 <SD_initialize+0x38>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	b2db      	uxtb	r3, r3
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	2000000c 	.word	0x2000000c

08008eec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff ffbb 	bl	8008e74 <SD_CheckStatus>
 8008efe:	4603      	mov	r3, r0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	607a      	str	r2, [r7, #4]
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	4603      	mov	r3, r0
 8008f16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	68b8      	ldr	r0, [r7, #8]
 8008f26:	f7ff f9db 	bl	80082e0 <BSP_SD_ReadBlocks>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d107      	bne.n	8008f40 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008f30:	bf00      	nop
 8008f32:	f7ff fa11 	bl	8008358 <BSP_SD_GetCardState>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1fa      	bne.n	8008f32 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b086      	sub	sp, #24
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
 8008f56:	4603      	mov	r3, r0
 8008f58:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	68b8      	ldr	r0, [r7, #8]
 8008f68:	f7ff f9d8 	bl	800831c <BSP_SD_WriteBlocks>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d107      	bne.n	8008f82 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008f72:	bf00      	nop
 8008f74:	f7ff f9f0 	bl	8008358 <BSP_SD_GetCardState>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1fa      	bne.n	8008f74 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08c      	sub	sp, #48	; 0x30
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	603a      	str	r2, [r7, #0]
 8008f96:	71fb      	strb	r3, [r7, #7]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008fa2:	4b25      	ldr	r3, [pc, #148]	; (8009038 <SD_ioctl+0xac>)
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <SD_ioctl+0x28>
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e03c      	b.n	800902e <SD_ioctl+0xa2>

  switch (cmd)
 8008fb4:	79bb      	ldrb	r3, [r7, #6]
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d834      	bhi.n	8009024 <SD_ioctl+0x98>
 8008fba:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <SD_ioctl+0x34>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08008fd1 	.word	0x08008fd1
 8008fc4:	08008fd9 	.word	0x08008fd9
 8008fc8:	08008ff1 	.word	0x08008ff1
 8008fcc:	0800900b 	.word	0x0800900b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fd6:	e028      	b.n	800902a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fd8:	f107 030c 	add.w	r3, r7, #12
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff f9cb 	bl	8008378 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fee:	e01c      	b.n	800902a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008ff0:	f107 030c 	add.w	r3, r7, #12
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff f9bf 	bl	8008378 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009008:	e00f      	b.n	800902a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800900a:	f107 030c 	add.w	r3, r7, #12
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff f9b2 	bl	8008378 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	0a5a      	lsrs	r2, r3, #9
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009022:	e002      	b.n	800902a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009024:	2304      	movs	r3, #4
 8009026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800902a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800902e:	4618      	mov	r0, r3
 8009030:	3730      	adds	r7, #48	; 0x30
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	2000000c 	.word	0x2000000c

0800903c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8009040:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <MX_SDMMC1_SD_Init+0x38>)
 8009042:	4a0d      	ldr	r2, [pc, #52]	; (8009078 <MX_SDMMC1_SD_Init+0x3c>)
 8009044:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8009046:	4b0b      	ldr	r3, [pc, #44]	; (8009074 <MX_SDMMC1_SD_Init+0x38>)
 8009048:	2200      	movs	r2, #0
 800904a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <MX_SDMMC1_SD_Init+0x38>)
 800904e:	2200      	movs	r2, #0
 8009050:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009052:	4b08      	ldr	r3, [pc, #32]	; (8009074 <MX_SDMMC1_SD_Init+0x38>)
 8009054:	2200      	movs	r2, #0
 8009056:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8009058:	4b06      	ldr	r3, [pc, #24]	; (8009074 <MX_SDMMC1_SD_Init+0x38>)
 800905a:	2200      	movs	r2, #0
 800905c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <MX_SDMMC1_SD_Init+0x38>)
 8009060:	2200      	movs	r2, #0
 8009062:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8009064:	4b03      	ldr	r3, [pc, #12]	; (8009074 <MX_SDMMC1_SD_Init+0x38>)
 8009066:	2200      	movs	r2, #0
 8009068:	619a      	str	r2, [r3, #24]

}
 800906a:	bf00      	nop
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	2000c138 	.word	0x2000c138
 8009078:	40012800 	.word	0x40012800

0800907c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	; 0x28
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009084:	f107 0314 	add.w	r3, r7, #20
 8009088:	2200      	movs	r2, #0
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	605a      	str	r2, [r3, #4]
 800908e:	609a      	str	r2, [r3, #8]
 8009090:	60da      	str	r2, [r3, #12]
 8009092:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a25      	ldr	r2, [pc, #148]	; (8009130 <HAL_SD_MspInit+0xb4>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d144      	bne.n	8009128 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800909e:	4b25      	ldr	r3, [pc, #148]	; (8009134 <HAL_SD_MspInit+0xb8>)
 80090a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a2:	4a24      	ldr	r2, [pc, #144]	; (8009134 <HAL_SD_MspInit+0xb8>)
 80090a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80090a8:	6613      	str	r3, [r2, #96]	; 0x60
 80090aa:	4b22      	ldr	r3, [pc, #136]	; (8009134 <HAL_SD_MspInit+0xb8>)
 80090ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090b2:	613b      	str	r3, [r7, #16]
 80090b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80090b6:	4b1f      	ldr	r3, [pc, #124]	; (8009134 <HAL_SD_MspInit+0xb8>)
 80090b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ba:	4a1e      	ldr	r2, [pc, #120]	; (8009134 <HAL_SD_MspInit+0xb8>)
 80090bc:	f043 0304 	orr.w	r3, r3, #4
 80090c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090c2:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <HAL_SD_MspInit+0xb8>)
 80090c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c6:	f003 0304 	and.w	r3, r3, #4
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80090ce:	4b19      	ldr	r3, [pc, #100]	; (8009134 <HAL_SD_MspInit+0xb8>)
 80090d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d2:	4a18      	ldr	r2, [pc, #96]	; (8009134 <HAL_SD_MspInit+0xb8>)
 80090d4:	f043 0308 	orr.w	r3, r3, #8
 80090d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090da:	4b16      	ldr	r3, [pc, #88]	; (8009134 <HAL_SD_MspInit+0xb8>)
 80090dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090de:	f003 0308 	and.w	r3, r3, #8
 80090e2:	60bb      	str	r3, [r7, #8]
 80090e4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80090e6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80090ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090ec:	2302      	movs	r3, #2
 80090ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090f4:	2303      	movs	r3, #3
 80090f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80090f8:	230c      	movs	r3, #12
 80090fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80090fc:	f107 0314 	add.w	r3, r7, #20
 8009100:	4619      	mov	r1, r3
 8009102:	480d      	ldr	r0, [pc, #52]	; (8009138 <HAL_SD_MspInit+0xbc>)
 8009104:	f7f8 fae8 	bl	80016d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009108:	2304      	movs	r3, #4
 800910a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800910c:	2302      	movs	r3, #2
 800910e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009110:	2300      	movs	r3, #0
 8009112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009114:	2303      	movs	r3, #3
 8009116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8009118:	230c      	movs	r3, #12
 800911a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800911c:	f107 0314 	add.w	r3, r7, #20
 8009120:	4619      	mov	r1, r3
 8009122:	4806      	ldr	r0, [pc, #24]	; (800913c <HAL_SD_MspInit+0xc0>)
 8009124:	f7f8 fad8 	bl	80016d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8009128:	bf00      	nop
 800912a:	3728      	adds	r7, #40	; 0x28
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	40012800 	.word	0x40012800
 8009134:	40021000 	.word	0x40021000
 8009138:	48000800 	.word	0x48000800
 800913c:	48000c00 	.word	0x48000c00

08009140 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8009144:	4b1b      	ldr	r3, [pc, #108]	; (80091b4 <MX_SPI2_Init+0x74>)
 8009146:	4a1c      	ldr	r2, [pc, #112]	; (80091b8 <MX_SPI2_Init+0x78>)
 8009148:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800914a:	4b1a      	ldr	r3, [pc, #104]	; (80091b4 <MX_SPI2_Init+0x74>)
 800914c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009150:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009152:	4b18      	ldr	r3, [pc, #96]	; (80091b4 <MX_SPI2_Init+0x74>)
 8009154:	2200      	movs	r2, #0
 8009156:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009158:	4b16      	ldr	r3, [pc, #88]	; (80091b4 <MX_SPI2_Init+0x74>)
 800915a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800915e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009160:	4b14      	ldr	r3, [pc, #80]	; (80091b4 <MX_SPI2_Init+0x74>)
 8009162:	2200      	movs	r2, #0
 8009164:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009166:	4b13      	ldr	r3, [pc, #76]	; (80091b4 <MX_SPI2_Init+0x74>)
 8009168:	2200      	movs	r2, #0
 800916a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800916c:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <MX_SPI2_Init+0x74>)
 800916e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009172:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009174:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <MX_SPI2_Init+0x74>)
 8009176:	2200      	movs	r2, #0
 8009178:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800917a:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <MX_SPI2_Init+0x74>)
 800917c:	2200      	movs	r2, #0
 800917e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009180:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <MX_SPI2_Init+0x74>)
 8009182:	2200      	movs	r2, #0
 8009184:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009186:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <MX_SPI2_Init+0x74>)
 8009188:	2200      	movs	r2, #0
 800918a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800918c:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <MX_SPI2_Init+0x74>)
 800918e:	2207      	movs	r2, #7
 8009190:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009192:	4b08      	ldr	r3, [pc, #32]	; (80091b4 <MX_SPI2_Init+0x74>)
 8009194:	2200      	movs	r2, #0
 8009196:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009198:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <MX_SPI2_Init+0x74>)
 800919a:	2208      	movs	r2, #8
 800919c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800919e:	4805      	ldr	r0, [pc, #20]	; (80091b4 <MX_SPI2_Init+0x74>)
 80091a0:	f7fb fd2c 	bl	8004bfc <HAL_SPI_Init>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80091aa:	f7ff fda9 	bl	8008d00 <Error_Handler>
  }

}
 80091ae:	bf00      	nop
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	2000c1bc 	.word	0x2000c1bc
 80091b8:	40003800 	.word	0x40003800

080091bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08a      	sub	sp, #40	; 0x28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091c4:	f107 0314 	add.w	r3, r7, #20
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	605a      	str	r2, [r3, #4]
 80091ce:	609a      	str	r2, [r3, #8]
 80091d0:	60da      	str	r2, [r3, #12]
 80091d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a17      	ldr	r2, [pc, #92]	; (8009238 <HAL_SPI_MspInit+0x7c>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d128      	bne.n	8009230 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80091de:	4b17      	ldr	r3, [pc, #92]	; (800923c <HAL_SPI_MspInit+0x80>)
 80091e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e2:	4a16      	ldr	r2, [pc, #88]	; (800923c <HAL_SPI_MspInit+0x80>)
 80091e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091e8:	6593      	str	r3, [r2, #88]	; 0x58
 80091ea:	4b14      	ldr	r3, [pc, #80]	; (800923c <HAL_SPI_MspInit+0x80>)
 80091ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091f2:	613b      	str	r3, [r7, #16]
 80091f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091f6:	4b11      	ldr	r3, [pc, #68]	; (800923c <HAL_SPI_MspInit+0x80>)
 80091f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fa:	4a10      	ldr	r2, [pc, #64]	; (800923c <HAL_SPI_MspInit+0x80>)
 80091fc:	f043 0302 	orr.w	r3, r3, #2
 8009200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009202:	4b0e      	ldr	r3, [pc, #56]	; (800923c <HAL_SPI_MspInit+0x80>)
 8009204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800920e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009214:	2302      	movs	r3, #2
 8009216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009218:	2300      	movs	r3, #0
 800921a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800921c:	2303      	movs	r3, #3
 800921e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009220:	2305      	movs	r3, #5
 8009222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009224:	f107 0314 	add.w	r3, r7, #20
 8009228:	4619      	mov	r1, r3
 800922a:	4805      	ldr	r0, [pc, #20]	; (8009240 <HAL_SPI_MspInit+0x84>)
 800922c:	f7f8 fa54 	bl	80016d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009230:	bf00      	nop
 8009232:	3728      	adds	r7, #40	; 0x28
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	40003800 	.word	0x40003800
 800923c:	40021000 	.word	0x40021000
 8009240:	48000400 	.word	0x48000400

08009244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800924a:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <HAL_MspInit+0x44>)
 800924c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800924e:	4a0e      	ldr	r2, [pc, #56]	; (8009288 <HAL_MspInit+0x44>)
 8009250:	f043 0301 	orr.w	r3, r3, #1
 8009254:	6613      	str	r3, [r2, #96]	; 0x60
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <HAL_MspInit+0x44>)
 8009258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	607b      	str	r3, [r7, #4]
 8009260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009262:	4b09      	ldr	r3, [pc, #36]	; (8009288 <HAL_MspInit+0x44>)
 8009264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009266:	4a08      	ldr	r2, [pc, #32]	; (8009288 <HAL_MspInit+0x44>)
 8009268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800926c:	6593      	str	r3, [r2, #88]	; 0x58
 800926e:	4b06      	ldr	r3, [pc, #24]	; (8009288 <HAL_MspInit+0x44>)
 8009270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800927a:	bf00      	nop
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	40021000 	.word	0x40021000

0800928c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8009294:	4b07      	ldr	r3, [pc, #28]	; (80092b4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8009296:	695a      	ldr	r2, [r3, #20]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4013      	ands	r3, r2
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d101      	bne.n	80092a6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e000      	b.n	80092a8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	40010400 	.word	0x40010400

080092b8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80092c0:	4a04      	ldr	r2, [pc, #16]	; (80092d4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6153      	str	r3, [r2, #20]
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	40010400 	.word	0x40010400

080092d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80092d8:	b480      	push	{r7}
 80092da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80092dc:	bf00      	nop
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80092e6:	b480      	push	{r7}
 80092e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80092ea:	e7fe      	b.n	80092ea <HardFault_Handler+0x4>

080092ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80092f0:	e7fe      	b.n	80092f0 <MemManage_Handler+0x4>

080092f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80092f2:	b480      	push	{r7}
 80092f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80092f6:	e7fe      	b.n	80092f6 <BusFault_Handler+0x4>

080092f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80092f8:	b480      	push	{r7}
 80092fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80092fc:	e7fe      	b.n	80092fc <UsageFault_Handler+0x4>

080092fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80092fe:	b480      	push	{r7}
 8009300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009302:	bf00      	nop
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800930c:	b480      	push	{r7}
 800930e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009310:	bf00      	nop
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800931a:	b480      	push	{r7}
 800931c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800931e:	bf00      	nop
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800932c:	f7f7 f97a 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009330:	bf00      	nop
 8009332:	bd80      	pop	{r7, pc}

08009334 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8009338:	2001      	movs	r0, #1
 800933a:	f7ff ffa7 	bl	800928c <LL_EXTI_IsActiveFlag_0_31>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <EXTI0_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8009344:	2001      	movs	r0, #1
 8009346:	f7ff ffb7 	bl	80092b8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800934a:	bf00      	nop
 800934c:	bd80      	pop	{r7, pc}

0800934e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8009352:	2010      	movs	r0, #16
 8009354:	f7ff ff9a 	bl	800928c <LL_EXTI_IsActiveFlag_0_31>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <EXTI4_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 800935e:	2010      	movs	r0, #16
 8009360:	f7ff ffaa 	bl	80092b8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009364:	bf00      	nop
 8009366:	bd80      	pop	{r7, pc}

08009368 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2_Callback();
 800936c:	f7fe fe56 	bl	800801c <USART2_Callback>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009370:	bf00      	nop
 8009372:	bd80      	pop	{r7, pc}

08009374 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART3_Callback();
 8009378:	f7fe fd7a 	bl	8007e70 <USART3_Callback>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800937c:	bf00      	nop
 800937e:	bd80      	pop	{r7, pc}

08009380 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800938c:	2300      	movs	r3, #0
 800938e:	617b      	str	r3, [r7, #20]
 8009390:	e00a      	b.n	80093a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009392:	f3af 8000 	nop.w
 8009396:	4601      	mov	r1, r0
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	60ba      	str	r2, [r7, #8]
 800939e:	b2ca      	uxtb	r2, r1
 80093a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	3301      	adds	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	dbf0      	blt.n	8009392 <_read+0x12>
	}

return len;
 80093b0:	687b      	ldr	r3, [r7, #4]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
	return -1;
 80093c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80093e2:	605a      	str	r2, [r3, #4]
	return 0;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <_isatty>:

int _isatty(int file)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
	return 1;
 80093fa:	2301      	movs	r3, #1
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
	return 0;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
	...

08009424 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800942c:	4b11      	ldr	r3, [pc, #68]	; (8009474 <_sbrk+0x50>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <_sbrk+0x16>
		heap_end = &end;
 8009434:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <_sbrk+0x50>)
 8009436:	4a10      	ldr	r2, [pc, #64]	; (8009478 <_sbrk+0x54>)
 8009438:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800943a:	4b0e      	ldr	r3, [pc, #56]	; (8009474 <_sbrk+0x50>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009440:	4b0c      	ldr	r3, [pc, #48]	; (8009474 <_sbrk+0x50>)
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	466a      	mov	r2, sp
 800944a:	4293      	cmp	r3, r2
 800944c:	d907      	bls.n	800945e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800944e:	f000 fb19 	bl	8009a84 <__errno>
 8009452:	4602      	mov	r2, r0
 8009454:	230c      	movs	r3, #12
 8009456:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009458:	f04f 33ff 	mov.w	r3, #4294967295
 800945c:	e006      	b.n	800946c <_sbrk+0x48>
	}

	heap_end += incr;
 800945e:	4b05      	ldr	r3, [pc, #20]	; (8009474 <_sbrk+0x50>)
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4413      	add	r3, r2
 8009466:	4a03      	ldr	r2, [pc, #12]	; (8009474 <_sbrk+0x50>)
 8009468:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800946a:	68fb      	ldr	r3, [r7, #12]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	200002a0 	.word	0x200002a0
 8009478:	2000c2e8 	.word	0x2000c2e8

0800947c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800947c:	b480      	push	{r7}
 800947e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009480:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <SystemInit+0x64>)
 8009482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009486:	4a16      	ldr	r2, [pc, #88]	; (80094e0 <SystemInit+0x64>)
 8009488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800948c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8009490:	4b14      	ldr	r3, [pc, #80]	; (80094e4 <SystemInit+0x68>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a13      	ldr	r2, [pc, #76]	; (80094e4 <SystemInit+0x68>)
 8009496:	f043 0301 	orr.w	r3, r3, #1
 800949a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800949c:	4b11      	ldr	r3, [pc, #68]	; (80094e4 <SystemInit+0x68>)
 800949e:	2200      	movs	r2, #0
 80094a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80094a2:	4b10      	ldr	r3, [pc, #64]	; (80094e4 <SystemInit+0x68>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a0f      	ldr	r2, [pc, #60]	; (80094e4 <SystemInit+0x68>)
 80094a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80094ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80094b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80094b2:	4b0c      	ldr	r3, [pc, #48]	; (80094e4 <SystemInit+0x68>)
 80094b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80094b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80094ba:	4b0a      	ldr	r3, [pc, #40]	; (80094e4 <SystemInit+0x68>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a09      	ldr	r2, [pc, #36]	; (80094e4 <SystemInit+0x68>)
 80094c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80094c6:	4b07      	ldr	r3, [pc, #28]	; (80094e4 <SystemInit+0x68>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80094cc:	4b04      	ldr	r3, [pc, #16]	; (80094e0 <SystemInit+0x64>)
 80094ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80094d2:	609a      	str	r2, [r3, #8]
#endif
}
 80094d4:	bf00      	nop
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	e000ed00 	.word	0xe000ed00
 80094e4:	40021000 	.word	0x40021000

080094e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08e      	sub	sp, #56	; 0x38
 80094ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80094ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	605a      	str	r2, [r3, #4]
 80094f8:	609a      	str	r2, [r3, #8]
 80094fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094fc:	f107 031c 	add.w	r3, r7, #28
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	605a      	str	r2, [r3, #4]
 8009506:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009508:	463b      	mov	r3, r7
 800950a:	2200      	movs	r2, #0
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	605a      	str	r2, [r3, #4]
 8009510:	609a      	str	r2, [r3, #8]
 8009512:	60da      	str	r2, [r3, #12]
 8009514:	611a      	str	r2, [r3, #16]
 8009516:	615a      	str	r2, [r3, #20]
 8009518:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800951a:	4b2b      	ldr	r3, [pc, #172]	; (80095c8 <MX_TIM2_Init+0xe0>)
 800951c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009522:	4b29      	ldr	r3, [pc, #164]	; (80095c8 <MX_TIM2_Init+0xe0>)
 8009524:	2200      	movs	r2, #0
 8009526:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009528:	4b27      	ldr	r3, [pc, #156]	; (80095c8 <MX_TIM2_Init+0xe0>)
 800952a:	2200      	movs	r2, #0
 800952c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800952e:	4b26      	ldr	r3, [pc, #152]	; (80095c8 <MX_TIM2_Init+0xe0>)
 8009530:	2200      	movs	r2, #0
 8009532:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009534:	4b24      	ldr	r3, [pc, #144]	; (80095c8 <MX_TIM2_Init+0xe0>)
 8009536:	2200      	movs	r2, #0
 8009538:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800953a:	4b23      	ldr	r3, [pc, #140]	; (80095c8 <MX_TIM2_Init+0xe0>)
 800953c:	2200      	movs	r2, #0
 800953e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009540:	4821      	ldr	r0, [pc, #132]	; (80095c8 <MX_TIM2_Init+0xe0>)
 8009542:	f7fb fbe5 	bl	8004d10 <HAL_TIM_Base_Init>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800954c:	f7ff fbd8 	bl	8008d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009554:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800955a:	4619      	mov	r1, r3
 800955c:	481a      	ldr	r0, [pc, #104]	; (80095c8 <MX_TIM2_Init+0xe0>)
 800955e:	f7fb fcb5 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8009568:	f7ff fbca 	bl	8008d00 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800956c:	4816      	ldr	r0, [pc, #88]	; (80095c8 <MX_TIM2_Init+0xe0>)
 800956e:	f7fb fbfa 	bl	8004d66 <HAL_TIM_OC_Init>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8009578:	f7ff fbc2 	bl	8008d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800957c:	2300      	movs	r3, #0
 800957e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009580:	2300      	movs	r3, #0
 8009582:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009584:	f107 031c 	add.w	r3, r7, #28
 8009588:	4619      	mov	r1, r3
 800958a:	480f      	ldr	r0, [pc, #60]	; (80095c8 <MX_TIM2_Init+0xe0>)
 800958c:	f7fc f8de 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8009596:	f7ff fbb3 	bl	8008d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800959a:	2300      	movs	r3, #0
 800959c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095aa:	463b      	mov	r3, r7
 80095ac:	2200      	movs	r2, #0
 80095ae:	4619      	mov	r1, r3
 80095b0:	4805      	ldr	r0, [pc, #20]	; (80095c8 <MX_TIM2_Init+0xe0>)
 80095b2:	f7fb fc0d 	bl	8004dd0 <HAL_TIM_OC_ConfigChannel>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80095bc:	f7ff fba0 	bl	8008d00 <Error_Handler>
  }

}
 80095c0:	bf00      	nop
 80095c2:	3738      	adds	r7, #56	; 0x38
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	2000c220 	.word	0x2000c220

080095cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095dc:	d10b      	bne.n	80095f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80095de:	4b09      	ldr	r3, [pc, #36]	; (8009604 <HAL_TIM_Base_MspInit+0x38>)
 80095e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e2:	4a08      	ldr	r2, [pc, #32]	; (8009604 <HAL_TIM_Base_MspInit+0x38>)
 80095e4:	f043 0301 	orr.w	r3, r3, #1
 80095e8:	6593      	str	r3, [r2, #88]	; 0x58
 80095ea:	4b06      	ldr	r3, [pc, #24]	; (8009604 <HAL_TIM_Base_MspInit+0x38>)
 80095ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	40021000 	.word	0x40021000

08009608 <__NVIC_GetPriorityGrouping>:
{
 8009608:	b480      	push	{r7}
 800960a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800960c:	4b04      	ldr	r3, [pc, #16]	; (8009620 <__NVIC_GetPriorityGrouping+0x18>)
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	0a1b      	lsrs	r3, r3, #8
 8009612:	f003 0307 	and.w	r3, r3, #7
}
 8009616:	4618      	mov	r0, r3
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	e000ed00 	.word	0xe000ed00

08009624 <__NVIC_EnableIRQ>:
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800962e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009632:	2b00      	cmp	r3, #0
 8009634:	db0b      	blt.n	800964e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009636:	79fb      	ldrb	r3, [r7, #7]
 8009638:	f003 021f 	and.w	r2, r3, #31
 800963c:	4907      	ldr	r1, [pc, #28]	; (800965c <__NVIC_EnableIRQ+0x38>)
 800963e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009642:	095b      	lsrs	r3, r3, #5
 8009644:	2001      	movs	r0, #1
 8009646:	fa00 f202 	lsl.w	r2, r0, r2
 800964a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800964e:	bf00      	nop
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	e000e100 	.word	0xe000e100

08009660 <__NVIC_SetPriority>:
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	6039      	str	r1, [r7, #0]
 800966a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800966c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009670:	2b00      	cmp	r3, #0
 8009672:	db0a      	blt.n	800968a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	b2da      	uxtb	r2, r3
 8009678:	490c      	ldr	r1, [pc, #48]	; (80096ac <__NVIC_SetPriority+0x4c>)
 800967a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800967e:	0112      	lsls	r2, r2, #4
 8009680:	b2d2      	uxtb	r2, r2
 8009682:	440b      	add	r3, r1
 8009684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009688:	e00a      	b.n	80096a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	b2da      	uxtb	r2, r3
 800968e:	4908      	ldr	r1, [pc, #32]	; (80096b0 <__NVIC_SetPriority+0x50>)
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	f003 030f 	and.w	r3, r3, #15
 8009696:	3b04      	subs	r3, #4
 8009698:	0112      	lsls	r2, r2, #4
 800969a:	b2d2      	uxtb	r2, r2
 800969c:	440b      	add	r3, r1
 800969e:	761a      	strb	r2, [r3, #24]
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	e000e100 	.word	0xe000e100
 80096b0:	e000ed00 	.word	0xe000ed00

080096b4 <NVIC_EncodePriority>:
{
 80096b4:	b480      	push	{r7}
 80096b6:	b089      	sub	sp, #36	; 0x24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	f1c3 0307 	rsb	r3, r3, #7
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	bf28      	it	cs
 80096d2:	2304      	movcs	r3, #4
 80096d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	3304      	adds	r3, #4
 80096da:	2b06      	cmp	r3, #6
 80096dc:	d902      	bls.n	80096e4 <NVIC_EncodePriority+0x30>
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	3b03      	subs	r3, #3
 80096e2:	e000      	b.n	80096e6 <NVIC_EncodePriority+0x32>
 80096e4:	2300      	movs	r3, #0
 80096e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80096e8:	f04f 32ff 	mov.w	r2, #4294967295
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	43da      	mvns	r2, r3
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	401a      	ands	r2, r3
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80096fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	fa01 f303 	lsl.w	r3, r1, r3
 8009706:	43d9      	mvns	r1, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800970c:	4313      	orrs	r3, r2
}
 800970e:	4618      	mov	r0, r3
 8009710:	3724      	adds	r7, #36	; 0x24
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <LL_USART_Enable>:
{
 800971a:	b480      	push	{r7}
 800971c:	b083      	sub	sp, #12
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f043 0201 	orr.w	r2, r3, #1
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	601a      	str	r2, [r3, #0]
}
 800972e:	bf00      	nop
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	609a      	str	r2, [r3, #8]
}
 800975a:	bf00      	nop
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
	...

08009768 <LL_AHB2_GRP1_EnableClock>:
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009770:	4b08      	ldr	r3, [pc, #32]	; (8009794 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8009772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009774:	4907      	ldr	r1, [pc, #28]	; (8009794 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4313      	orrs	r3, r2
 800977a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800977c:	4b05      	ldr	r3, [pc, #20]	; (8009794 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800977e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4013      	ands	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009786:	68fb      	ldr	r3, [r7, #12]
}
 8009788:	bf00      	nop
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	40021000 	.word	0x40021000

08009798 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80097a0:	4b08      	ldr	r3, [pc, #32]	; (80097c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80097a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097a4:	4907      	ldr	r1, [pc, #28]	; (80097c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80097ac:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80097ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4013      	ands	r3, r2
 80097b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80097b6:	68fb      	ldr	r3, [r7, #12]
}
 80097b8:	bf00      	nop
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	40021000 	.word	0x40021000

080097c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80097cc:	4b14      	ldr	r3, [pc, #80]	; (8009820 <MX_USART1_UART_Init+0x58>)
 80097ce:	4a15      	ldr	r2, [pc, #84]	; (8009824 <MX_USART1_UART_Init+0x5c>)
 80097d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80097d2:	4b13      	ldr	r3, [pc, #76]	; (8009820 <MX_USART1_UART_Init+0x58>)
 80097d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80097d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80097da:	4b11      	ldr	r3, [pc, #68]	; (8009820 <MX_USART1_UART_Init+0x58>)
 80097dc:	2200      	movs	r2, #0
 80097de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80097e0:	4b0f      	ldr	r3, [pc, #60]	; (8009820 <MX_USART1_UART_Init+0x58>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80097e6:	4b0e      	ldr	r3, [pc, #56]	; (8009820 <MX_USART1_UART_Init+0x58>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80097ec:	4b0c      	ldr	r3, [pc, #48]	; (8009820 <MX_USART1_UART_Init+0x58>)
 80097ee:	220c      	movs	r2, #12
 80097f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80097f2:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <MX_USART1_UART_Init+0x58>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80097f8:	4b09      	ldr	r3, [pc, #36]	; (8009820 <MX_USART1_UART_Init+0x58>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80097fe:	4b08      	ldr	r3, [pc, #32]	; (8009820 <MX_USART1_UART_Init+0x58>)
 8009800:	2200      	movs	r2, #0
 8009802:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009804:	4b06      	ldr	r3, [pc, #24]	; (8009820 <MX_USART1_UART_Init+0x58>)
 8009806:	2200      	movs	r2, #0
 8009808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800980a:	4805      	ldr	r0, [pc, #20]	; (8009820 <MX_USART1_UART_Init+0x58>)
 800980c:	f7fc f80c 	bl	8005828 <HAL_UART_Init>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8009816:	f7ff fa73 	bl	8008d00 <Error_Handler>
  }

}
 800981a:	bf00      	nop
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	2000c260 	.word	0x2000c260
 8009824:	40013800 	.word	0x40013800

08009828 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08e      	sub	sp, #56	; 0x38
 800982c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800982e:	f107 031c 	add.w	r3, r7, #28
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	605a      	str	r2, [r3, #4]
 8009838:	609a      	str	r2, [r3, #8]
 800983a:	60da      	str	r2, [r3, #12]
 800983c:	611a      	str	r2, [r3, #16]
 800983e:	615a      	str	r2, [r3, #20]
 8009840:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009842:	1d3b      	adds	r3, r7, #4
 8009844:	2200      	movs	r2, #0
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	605a      	str	r2, [r3, #4]
 800984a:	609a      	str	r2, [r3, #8]
 800984c:	60da      	str	r2, [r3, #12]
 800984e:	611a      	str	r2, [r3, #16]
 8009850:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8009852:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009856:	f7ff ff9f 	bl	8009798 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800985a:	2001      	movs	r0, #1
 800985c:	f7ff ff84 	bl	8009768 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8009860:	230c      	movs	r3, #12
 8009862:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009864:	2302      	movs	r3, #2
 8009866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8009868:	2303      	movs	r3, #3
 800986a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800986c:	2300      	movs	r3, #0
 800986e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8009874:	2307      	movs	r3, #7
 8009876:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009878:	1d3b      	adds	r3, r7, #4
 800987a:	4619      	mov	r1, r3
 800987c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009880:	f7fd f877 	bl	8006972 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8009884:	f7ff fec0 	bl	8009608 <__NVIC_GetPriorityGrouping>
 8009888:	4603      	mov	r3, r0
 800988a:	2200      	movs	r2, #0
 800988c:	2100      	movs	r1, #0
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff ff10 	bl	80096b4 <NVIC_EncodePriority>
 8009894:	4603      	mov	r3, r0
 8009896:	4619      	mov	r1, r3
 8009898:	2026      	movs	r0, #38	; 0x26
 800989a:	f7ff fee1 	bl	8009660 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800989e:	2026      	movs	r0, #38	; 0x26
 80098a0:	f7ff fec0 	bl	8009624 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80098a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80098a8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80098aa:	2300      	movs	r3, #0
 80098ac:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80098ae:	2300      	movs	r3, #0
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80098b2:	2300      	movs	r3, #0
 80098b4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80098b6:	230c      	movs	r3, #12
 80098b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80098ba:	2300      	movs	r3, #0
 80098bc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80098be:	2300      	movs	r3, #0
 80098c0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80098c2:	f107 031c 	add.w	r3, r7, #28
 80098c6:	4619      	mov	r1, r3
 80098c8:	4806      	ldr	r0, [pc, #24]	; (80098e4 <MX_USART2_UART_Init+0xbc>)
 80098ca:	f7fe fa05 	bl	8007cd8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80098ce:	4805      	ldr	r0, [pc, #20]	; (80098e4 <MX_USART2_UART_Init+0xbc>)
 80098d0:	f7ff ff33 	bl	800973a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80098d4:	4803      	ldr	r0, [pc, #12]	; (80098e4 <MX_USART2_UART_Init+0xbc>)
 80098d6:	f7ff ff20 	bl	800971a <LL_USART_Enable>

}
 80098da:	bf00      	nop
 80098dc:	3738      	adds	r7, #56	; 0x38
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	40004400 	.word	0x40004400

080098e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08e      	sub	sp, #56	; 0x38
 80098ec:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80098ee:	f107 031c 	add.w	r3, r7, #28
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	605a      	str	r2, [r3, #4]
 80098f8:	609a      	str	r2, [r3, #8]
 80098fa:	60da      	str	r2, [r3, #12]
 80098fc:	611a      	str	r2, [r3, #16]
 80098fe:	615a      	str	r2, [r3, #20]
 8009900:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009902:	1d3b      	adds	r3, r7, #4
 8009904:	2200      	movs	r2, #0
 8009906:	601a      	str	r2, [r3, #0]
 8009908:	605a      	str	r2, [r3, #4]
 800990a:	609a      	str	r2, [r3, #8]
 800990c:	60da      	str	r2, [r3, #12]
 800990e:	611a      	str	r2, [r3, #16]
 8009910:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8009912:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8009916:	f7ff ff3f 	bl	8009798 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800991a:	2004      	movs	r0, #4
 800991c:	f7ff ff24 	bl	8009768 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration  
  PC4   ------> USART3_TX
  PC5   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8009920:	2330      	movs	r3, #48	; 0x30
 8009922:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009924:	2302      	movs	r3, #2
 8009926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8009928:	2303      	movs	r3, #3
 800992a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800992c:	2300      	movs	r3, #0
 800992e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009930:	2300      	movs	r3, #0
 8009932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8009934:	2307      	movs	r3, #7
 8009936:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009938:	1d3b      	adds	r3, r7, #4
 800993a:	4619      	mov	r1, r3
 800993c:	4818      	ldr	r0, [pc, #96]	; (80099a0 <MX_USART3_UART_Init+0xb8>)
 800993e:	f7fd f818 	bl	8006972 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8009942:	f7ff fe61 	bl	8009608 <__NVIC_GetPriorityGrouping>
 8009946:	4603      	mov	r3, r0
 8009948:	2200      	movs	r2, #0
 800994a:	2100      	movs	r1, #0
 800994c:	4618      	mov	r0, r3
 800994e:	f7ff feb1 	bl	80096b4 <NVIC_EncodePriority>
 8009952:	4603      	mov	r3, r0
 8009954:	4619      	mov	r1, r3
 8009956:	2027      	movs	r0, #39	; 0x27
 8009958:	f7ff fe82 	bl	8009660 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800995c:	2027      	movs	r0, #39	; 0x27
 800995e:	f7ff fe61 	bl	8009624 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8009962:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8009966:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8009968:	2300      	movs	r3, #0
 800996a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800996c:	2300      	movs	r3, #0
 800996e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8009970:	2300      	movs	r3, #0
 8009972:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8009974:	230c      	movs	r3, #12
 8009976:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8009978:	2300      	movs	r3, #0
 800997a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800997c:	2300      	movs	r3, #0
 800997e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8009980:	f107 031c 	add.w	r3, r7, #28
 8009984:	4619      	mov	r1, r3
 8009986:	4807      	ldr	r0, [pc, #28]	; (80099a4 <MX_USART3_UART_Init+0xbc>)
 8009988:	f7fe f9a6 	bl	8007cd8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800998c:	4805      	ldr	r0, [pc, #20]	; (80099a4 <MX_USART3_UART_Init+0xbc>)
 800998e:	f7ff fed4 	bl	800973a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8009992:	4804      	ldr	r0, [pc, #16]	; (80099a4 <MX_USART3_UART_Init+0xbc>)
 8009994:	f7ff fec1 	bl	800971a <LL_USART_Enable>

}
 8009998:	bf00      	nop
 800999a:	3738      	adds	r7, #56	; 0x38
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	48000800 	.word	0x48000800
 80099a4:	40004800 	.word	0x40004800

080099a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08a      	sub	sp, #40	; 0x28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099b0:	f107 0314 	add.w	r3, r7, #20
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	605a      	str	r2, [r3, #4]
 80099ba:	609a      	str	r2, [r3, #8]
 80099bc:	60da      	str	r2, [r3, #12]
 80099be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a18      	ldr	r2, [pc, #96]	; (8009a28 <HAL_UART_MspInit+0x80>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d129      	bne.n	8009a1e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80099ca:	4b18      	ldr	r3, [pc, #96]	; (8009a2c <HAL_UART_MspInit+0x84>)
 80099cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099ce:	4a17      	ldr	r2, [pc, #92]	; (8009a2c <HAL_UART_MspInit+0x84>)
 80099d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099d4:	6613      	str	r3, [r2, #96]	; 0x60
 80099d6:	4b15      	ldr	r3, [pc, #84]	; (8009a2c <HAL_UART_MspInit+0x84>)
 80099d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099de:	613b      	str	r3, [r7, #16]
 80099e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099e2:	4b12      	ldr	r3, [pc, #72]	; (8009a2c <HAL_UART_MspInit+0x84>)
 80099e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e6:	4a11      	ldr	r2, [pc, #68]	; (8009a2c <HAL_UART_MspInit+0x84>)
 80099e8:	f043 0301 	orr.w	r3, r3, #1
 80099ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <HAL_UART_MspInit+0x84>)
 80099f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80099fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80099fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a00:	2302      	movs	r3, #2
 8009a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a04:	2300      	movs	r3, #0
 8009a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009a0c:	2307      	movs	r3, #7
 8009a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a10:	f107 0314 	add.w	r3, r7, #20
 8009a14:	4619      	mov	r1, r3
 8009a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a1a:	f7f7 fe5d 	bl	80016d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009a1e:	bf00      	nop
 8009a20:	3728      	adds	r7, #40	; 0x28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	40013800 	.word	0x40013800
 8009a2c:	40021000 	.word	0x40021000

08009a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009a68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009a34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009a36:	e003      	b.n	8009a40 <LoopCopyDataInit>

08009a38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009a38:	4b0c      	ldr	r3, [pc, #48]	; (8009a6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8009a3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009a3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009a3e:	3104      	adds	r1, #4

08009a40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009a40:	480b      	ldr	r0, [pc, #44]	; (8009a70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009a42:	4b0c      	ldr	r3, [pc, #48]	; (8009a74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8009a44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009a46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009a48:	d3f6      	bcc.n	8009a38 <CopyDataInit>
	ldr	r2, =_sbss
 8009a4a:	4a0b      	ldr	r2, [pc, #44]	; (8009a78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009a4c:	e002      	b.n	8009a54 <LoopFillZerobss>

08009a4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009a4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009a50:	f842 3b04 	str.w	r3, [r2], #4

08009a54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009a54:	4b09      	ldr	r3, [pc, #36]	; (8009a7c <LoopForever+0x16>)
	cmp	r2, r3
 8009a56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009a58:	d3f9      	bcc.n	8009a4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009a5a:	f7ff fd0f 	bl	800947c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009a5e:	f000 f817 	bl	8009a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009a62:	f7ff f905 	bl	8008c70 <main>

08009a66 <LoopForever>:

LoopForever:
    b LoopForever
 8009a66:	e7fe      	b.n	8009a66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009a68:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8009a6c:	0800abb8 	.word	0x0800abb8
	ldr	r0, =_sdata
 8009a70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009a74:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8009a78:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8009a7c:	2000c2e4 	.word	0x2000c2e4

08009a80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009a80:	e7fe      	b.n	8009a80 <ADC1_IRQHandler>
	...

08009a84 <__errno>:
 8009a84:	4b01      	ldr	r3, [pc, #4]	; (8009a8c <__errno+0x8>)
 8009a86:	6818      	ldr	r0, [r3, #0]
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	20000014 	.word	0x20000014

08009a90 <__libc_init_array>:
 8009a90:	b570      	push	{r4, r5, r6, lr}
 8009a92:	4e0d      	ldr	r6, [pc, #52]	; (8009ac8 <__libc_init_array+0x38>)
 8009a94:	4c0d      	ldr	r4, [pc, #52]	; (8009acc <__libc_init_array+0x3c>)
 8009a96:	1ba4      	subs	r4, r4, r6
 8009a98:	10a4      	asrs	r4, r4, #2
 8009a9a:	2500      	movs	r5, #0
 8009a9c:	42a5      	cmp	r5, r4
 8009a9e:	d109      	bne.n	8009ab4 <__libc_init_array+0x24>
 8009aa0:	4e0b      	ldr	r6, [pc, #44]	; (8009ad0 <__libc_init_array+0x40>)
 8009aa2:	4c0c      	ldr	r4, [pc, #48]	; (8009ad4 <__libc_init_array+0x44>)
 8009aa4:	f000 ff68 	bl	800a978 <_init>
 8009aa8:	1ba4      	subs	r4, r4, r6
 8009aaa:	10a4      	asrs	r4, r4, #2
 8009aac:	2500      	movs	r5, #0
 8009aae:	42a5      	cmp	r5, r4
 8009ab0:	d105      	bne.n	8009abe <__libc_init_array+0x2e>
 8009ab2:	bd70      	pop	{r4, r5, r6, pc}
 8009ab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ab8:	4798      	blx	r3
 8009aba:	3501      	adds	r5, #1
 8009abc:	e7ee      	b.n	8009a9c <__libc_init_array+0xc>
 8009abe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ac2:	4798      	blx	r3
 8009ac4:	3501      	adds	r5, #1
 8009ac6:	e7f2      	b.n	8009aae <__libc_init_array+0x1e>
 8009ac8:	0800abb0 	.word	0x0800abb0
 8009acc:	0800abb0 	.word	0x0800abb0
 8009ad0:	0800abb0 	.word	0x0800abb0
 8009ad4:	0800abb4 	.word	0x0800abb4

08009ad8 <memset>:
 8009ad8:	4402      	add	r2, r0
 8009ada:	4603      	mov	r3, r0
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d100      	bne.n	8009ae2 <memset+0xa>
 8009ae0:	4770      	bx	lr
 8009ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ae6:	e7f9      	b.n	8009adc <memset+0x4>

08009ae8 <_free_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4605      	mov	r5, r0
 8009aec:	2900      	cmp	r1, #0
 8009aee:	d045      	beq.n	8009b7c <_free_r+0x94>
 8009af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009af4:	1f0c      	subs	r4, r1, #4
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	bfb8      	it	lt
 8009afa:	18e4      	addlt	r4, r4, r3
 8009afc:	f000 fbc6 	bl	800a28c <__malloc_lock>
 8009b00:	4a1f      	ldr	r2, [pc, #124]	; (8009b80 <_free_r+0x98>)
 8009b02:	6813      	ldr	r3, [r2, #0]
 8009b04:	4610      	mov	r0, r2
 8009b06:	b933      	cbnz	r3, 8009b16 <_free_r+0x2e>
 8009b08:	6063      	str	r3, [r4, #4]
 8009b0a:	6014      	str	r4, [r2, #0]
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b12:	f000 bbbc 	b.w	800a28e <__malloc_unlock>
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	d90c      	bls.n	8009b34 <_free_r+0x4c>
 8009b1a:	6821      	ldr	r1, [r4, #0]
 8009b1c:	1862      	adds	r2, r4, r1
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	bf04      	itt	eq
 8009b22:	681a      	ldreq	r2, [r3, #0]
 8009b24:	685b      	ldreq	r3, [r3, #4]
 8009b26:	6063      	str	r3, [r4, #4]
 8009b28:	bf04      	itt	eq
 8009b2a:	1852      	addeq	r2, r2, r1
 8009b2c:	6022      	streq	r2, [r4, #0]
 8009b2e:	6004      	str	r4, [r0, #0]
 8009b30:	e7ec      	b.n	8009b0c <_free_r+0x24>
 8009b32:	4613      	mov	r3, r2
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	b10a      	cbz	r2, 8009b3c <_free_r+0x54>
 8009b38:	42a2      	cmp	r2, r4
 8009b3a:	d9fa      	bls.n	8009b32 <_free_r+0x4a>
 8009b3c:	6819      	ldr	r1, [r3, #0]
 8009b3e:	1858      	adds	r0, r3, r1
 8009b40:	42a0      	cmp	r0, r4
 8009b42:	d10b      	bne.n	8009b5c <_free_r+0x74>
 8009b44:	6820      	ldr	r0, [r4, #0]
 8009b46:	4401      	add	r1, r0
 8009b48:	1858      	adds	r0, r3, r1
 8009b4a:	4282      	cmp	r2, r0
 8009b4c:	6019      	str	r1, [r3, #0]
 8009b4e:	d1dd      	bne.n	8009b0c <_free_r+0x24>
 8009b50:	6810      	ldr	r0, [r2, #0]
 8009b52:	6852      	ldr	r2, [r2, #4]
 8009b54:	605a      	str	r2, [r3, #4]
 8009b56:	4401      	add	r1, r0
 8009b58:	6019      	str	r1, [r3, #0]
 8009b5a:	e7d7      	b.n	8009b0c <_free_r+0x24>
 8009b5c:	d902      	bls.n	8009b64 <_free_r+0x7c>
 8009b5e:	230c      	movs	r3, #12
 8009b60:	602b      	str	r3, [r5, #0]
 8009b62:	e7d3      	b.n	8009b0c <_free_r+0x24>
 8009b64:	6820      	ldr	r0, [r4, #0]
 8009b66:	1821      	adds	r1, r4, r0
 8009b68:	428a      	cmp	r2, r1
 8009b6a:	bf04      	itt	eq
 8009b6c:	6811      	ldreq	r1, [r2, #0]
 8009b6e:	6852      	ldreq	r2, [r2, #4]
 8009b70:	6062      	str	r2, [r4, #4]
 8009b72:	bf04      	itt	eq
 8009b74:	1809      	addeq	r1, r1, r0
 8009b76:	6021      	streq	r1, [r4, #0]
 8009b78:	605c      	str	r4, [r3, #4]
 8009b7a:	e7c7      	b.n	8009b0c <_free_r+0x24>
 8009b7c:	bd38      	pop	{r3, r4, r5, pc}
 8009b7e:	bf00      	nop
 8009b80:	200002a4 	.word	0x200002a4

08009b84 <_malloc_r>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	1ccd      	adds	r5, r1, #3
 8009b88:	f025 0503 	bic.w	r5, r5, #3
 8009b8c:	3508      	adds	r5, #8
 8009b8e:	2d0c      	cmp	r5, #12
 8009b90:	bf38      	it	cc
 8009b92:	250c      	movcc	r5, #12
 8009b94:	2d00      	cmp	r5, #0
 8009b96:	4606      	mov	r6, r0
 8009b98:	db01      	blt.n	8009b9e <_malloc_r+0x1a>
 8009b9a:	42a9      	cmp	r1, r5
 8009b9c:	d903      	bls.n	8009ba6 <_malloc_r+0x22>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	6033      	str	r3, [r6, #0]
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	bd70      	pop	{r4, r5, r6, pc}
 8009ba6:	f000 fb71 	bl	800a28c <__malloc_lock>
 8009baa:	4a21      	ldr	r2, [pc, #132]	; (8009c30 <_malloc_r+0xac>)
 8009bac:	6814      	ldr	r4, [r2, #0]
 8009bae:	4621      	mov	r1, r4
 8009bb0:	b991      	cbnz	r1, 8009bd8 <_malloc_r+0x54>
 8009bb2:	4c20      	ldr	r4, [pc, #128]	; (8009c34 <_malloc_r+0xb0>)
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	b91b      	cbnz	r3, 8009bc0 <_malloc_r+0x3c>
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f000 f8b9 	bl	8009d30 <_sbrk_r>
 8009bbe:	6020      	str	r0, [r4, #0]
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f000 f8b4 	bl	8009d30 <_sbrk_r>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d124      	bne.n	8009c16 <_malloc_r+0x92>
 8009bcc:	230c      	movs	r3, #12
 8009bce:	6033      	str	r3, [r6, #0]
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f000 fb5c 	bl	800a28e <__malloc_unlock>
 8009bd6:	e7e4      	b.n	8009ba2 <_malloc_r+0x1e>
 8009bd8:	680b      	ldr	r3, [r1, #0]
 8009bda:	1b5b      	subs	r3, r3, r5
 8009bdc:	d418      	bmi.n	8009c10 <_malloc_r+0x8c>
 8009bde:	2b0b      	cmp	r3, #11
 8009be0:	d90f      	bls.n	8009c02 <_malloc_r+0x7e>
 8009be2:	600b      	str	r3, [r1, #0]
 8009be4:	50cd      	str	r5, [r1, r3]
 8009be6:	18cc      	adds	r4, r1, r3
 8009be8:	4630      	mov	r0, r6
 8009bea:	f000 fb50 	bl	800a28e <__malloc_unlock>
 8009bee:	f104 000b 	add.w	r0, r4, #11
 8009bf2:	1d23      	adds	r3, r4, #4
 8009bf4:	f020 0007 	bic.w	r0, r0, #7
 8009bf8:	1ac3      	subs	r3, r0, r3
 8009bfa:	d0d3      	beq.n	8009ba4 <_malloc_r+0x20>
 8009bfc:	425a      	negs	r2, r3
 8009bfe:	50e2      	str	r2, [r4, r3]
 8009c00:	e7d0      	b.n	8009ba4 <_malloc_r+0x20>
 8009c02:	428c      	cmp	r4, r1
 8009c04:	684b      	ldr	r3, [r1, #4]
 8009c06:	bf16      	itet	ne
 8009c08:	6063      	strne	r3, [r4, #4]
 8009c0a:	6013      	streq	r3, [r2, #0]
 8009c0c:	460c      	movne	r4, r1
 8009c0e:	e7eb      	b.n	8009be8 <_malloc_r+0x64>
 8009c10:	460c      	mov	r4, r1
 8009c12:	6849      	ldr	r1, [r1, #4]
 8009c14:	e7cc      	b.n	8009bb0 <_malloc_r+0x2c>
 8009c16:	1cc4      	adds	r4, r0, #3
 8009c18:	f024 0403 	bic.w	r4, r4, #3
 8009c1c:	42a0      	cmp	r0, r4
 8009c1e:	d005      	beq.n	8009c2c <_malloc_r+0xa8>
 8009c20:	1a21      	subs	r1, r4, r0
 8009c22:	4630      	mov	r0, r6
 8009c24:	f000 f884 	bl	8009d30 <_sbrk_r>
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d0cf      	beq.n	8009bcc <_malloc_r+0x48>
 8009c2c:	6025      	str	r5, [r4, #0]
 8009c2e:	e7db      	b.n	8009be8 <_malloc_r+0x64>
 8009c30:	200002a4 	.word	0x200002a4
 8009c34:	200002a8 	.word	0x200002a8

08009c38 <iprintf>:
 8009c38:	b40f      	push	{r0, r1, r2, r3}
 8009c3a:	4b0a      	ldr	r3, [pc, #40]	; (8009c64 <iprintf+0x2c>)
 8009c3c:	b513      	push	{r0, r1, r4, lr}
 8009c3e:	681c      	ldr	r4, [r3, #0]
 8009c40:	b124      	cbz	r4, 8009c4c <iprintf+0x14>
 8009c42:	69a3      	ldr	r3, [r4, #24]
 8009c44:	b913      	cbnz	r3, 8009c4c <iprintf+0x14>
 8009c46:	4620      	mov	r0, r4
 8009c48:	f000 fa32 	bl	800a0b0 <__sinit>
 8009c4c:	ab05      	add	r3, sp, #20
 8009c4e:	9a04      	ldr	r2, [sp, #16]
 8009c50:	68a1      	ldr	r1, [r4, #8]
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 fb45 	bl	800a2e4 <_vfiprintf_r>
 8009c5a:	b002      	add	sp, #8
 8009c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c60:	b004      	add	sp, #16
 8009c62:	4770      	bx	lr
 8009c64:	20000014 	.word	0x20000014

08009c68 <_puts_r>:
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	460e      	mov	r6, r1
 8009c6c:	4605      	mov	r5, r0
 8009c6e:	b118      	cbz	r0, 8009c78 <_puts_r+0x10>
 8009c70:	6983      	ldr	r3, [r0, #24]
 8009c72:	b90b      	cbnz	r3, 8009c78 <_puts_r+0x10>
 8009c74:	f000 fa1c 	bl	800a0b0 <__sinit>
 8009c78:	69ab      	ldr	r3, [r5, #24]
 8009c7a:	68ac      	ldr	r4, [r5, #8]
 8009c7c:	b913      	cbnz	r3, 8009c84 <_puts_r+0x1c>
 8009c7e:	4628      	mov	r0, r5
 8009c80:	f000 fa16 	bl	800a0b0 <__sinit>
 8009c84:	4b23      	ldr	r3, [pc, #140]	; (8009d14 <_puts_r+0xac>)
 8009c86:	429c      	cmp	r4, r3
 8009c88:	d117      	bne.n	8009cba <_puts_r+0x52>
 8009c8a:	686c      	ldr	r4, [r5, #4]
 8009c8c:	89a3      	ldrh	r3, [r4, #12]
 8009c8e:	071b      	lsls	r3, r3, #28
 8009c90:	d51d      	bpl.n	8009cce <_puts_r+0x66>
 8009c92:	6923      	ldr	r3, [r4, #16]
 8009c94:	b1db      	cbz	r3, 8009cce <_puts_r+0x66>
 8009c96:	3e01      	subs	r6, #1
 8009c98:	68a3      	ldr	r3, [r4, #8]
 8009c9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	60a3      	str	r3, [r4, #8]
 8009ca2:	b9e9      	cbnz	r1, 8009ce0 <_puts_r+0x78>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	da2e      	bge.n	8009d06 <_puts_r+0x9e>
 8009ca8:	4622      	mov	r2, r4
 8009caa:	210a      	movs	r1, #10
 8009cac:	4628      	mov	r0, r5
 8009cae:	f000 f84f 	bl	8009d50 <__swbuf_r>
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	d011      	beq.n	8009cda <_puts_r+0x72>
 8009cb6:	200a      	movs	r0, #10
 8009cb8:	e011      	b.n	8009cde <_puts_r+0x76>
 8009cba:	4b17      	ldr	r3, [pc, #92]	; (8009d18 <_puts_r+0xb0>)
 8009cbc:	429c      	cmp	r4, r3
 8009cbe:	d101      	bne.n	8009cc4 <_puts_r+0x5c>
 8009cc0:	68ac      	ldr	r4, [r5, #8]
 8009cc2:	e7e3      	b.n	8009c8c <_puts_r+0x24>
 8009cc4:	4b15      	ldr	r3, [pc, #84]	; (8009d1c <_puts_r+0xb4>)
 8009cc6:	429c      	cmp	r4, r3
 8009cc8:	bf08      	it	eq
 8009cca:	68ec      	ldreq	r4, [r5, #12]
 8009ccc:	e7de      	b.n	8009c8c <_puts_r+0x24>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f000 f88f 	bl	8009df4 <__swsetup_r>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d0dd      	beq.n	8009c96 <_puts_r+0x2e>
 8009cda:	f04f 30ff 	mov.w	r0, #4294967295
 8009cde:	bd70      	pop	{r4, r5, r6, pc}
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	da04      	bge.n	8009cee <_puts_r+0x86>
 8009ce4:	69a2      	ldr	r2, [r4, #24]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	dc06      	bgt.n	8009cf8 <_puts_r+0x90>
 8009cea:	290a      	cmp	r1, #10
 8009cec:	d004      	beq.n	8009cf8 <_puts_r+0x90>
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	6022      	str	r2, [r4, #0]
 8009cf4:	7019      	strb	r1, [r3, #0]
 8009cf6:	e7cf      	b.n	8009c98 <_puts_r+0x30>
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	f000 f828 	bl	8009d50 <__swbuf_r>
 8009d00:	3001      	adds	r0, #1
 8009d02:	d1c9      	bne.n	8009c98 <_puts_r+0x30>
 8009d04:	e7e9      	b.n	8009cda <_puts_r+0x72>
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	200a      	movs	r0, #10
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	6022      	str	r2, [r4, #0]
 8009d0e:	7018      	strb	r0, [r3, #0]
 8009d10:	e7e5      	b.n	8009cde <_puts_r+0x76>
 8009d12:	bf00      	nop
 8009d14:	0800ab34 	.word	0x0800ab34
 8009d18:	0800ab54 	.word	0x0800ab54
 8009d1c:	0800ab14 	.word	0x0800ab14

08009d20 <puts>:
 8009d20:	4b02      	ldr	r3, [pc, #8]	; (8009d2c <puts+0xc>)
 8009d22:	4601      	mov	r1, r0
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	f7ff bf9f 	b.w	8009c68 <_puts_r>
 8009d2a:	bf00      	nop
 8009d2c:	20000014 	.word	0x20000014

08009d30 <_sbrk_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4c06      	ldr	r4, [pc, #24]	; (8009d4c <_sbrk_r+0x1c>)
 8009d34:	2300      	movs	r3, #0
 8009d36:	4605      	mov	r5, r0
 8009d38:	4608      	mov	r0, r1
 8009d3a:	6023      	str	r3, [r4, #0]
 8009d3c:	f7ff fb72 	bl	8009424 <_sbrk>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d102      	bne.n	8009d4a <_sbrk_r+0x1a>
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	b103      	cbz	r3, 8009d4a <_sbrk_r+0x1a>
 8009d48:	602b      	str	r3, [r5, #0]
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	2000c2e0 	.word	0x2000c2e0

08009d50 <__swbuf_r>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	460e      	mov	r6, r1
 8009d54:	4614      	mov	r4, r2
 8009d56:	4605      	mov	r5, r0
 8009d58:	b118      	cbz	r0, 8009d62 <__swbuf_r+0x12>
 8009d5a:	6983      	ldr	r3, [r0, #24]
 8009d5c:	b90b      	cbnz	r3, 8009d62 <__swbuf_r+0x12>
 8009d5e:	f000 f9a7 	bl	800a0b0 <__sinit>
 8009d62:	4b21      	ldr	r3, [pc, #132]	; (8009de8 <__swbuf_r+0x98>)
 8009d64:	429c      	cmp	r4, r3
 8009d66:	d12a      	bne.n	8009dbe <__swbuf_r+0x6e>
 8009d68:	686c      	ldr	r4, [r5, #4]
 8009d6a:	69a3      	ldr	r3, [r4, #24]
 8009d6c:	60a3      	str	r3, [r4, #8]
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	071a      	lsls	r2, r3, #28
 8009d72:	d52e      	bpl.n	8009dd2 <__swbuf_r+0x82>
 8009d74:	6923      	ldr	r3, [r4, #16]
 8009d76:	b363      	cbz	r3, 8009dd2 <__swbuf_r+0x82>
 8009d78:	6923      	ldr	r3, [r4, #16]
 8009d7a:	6820      	ldr	r0, [r4, #0]
 8009d7c:	1ac0      	subs	r0, r0, r3
 8009d7e:	6963      	ldr	r3, [r4, #20]
 8009d80:	b2f6      	uxtb	r6, r6
 8009d82:	4283      	cmp	r3, r0
 8009d84:	4637      	mov	r7, r6
 8009d86:	dc04      	bgt.n	8009d92 <__swbuf_r+0x42>
 8009d88:	4621      	mov	r1, r4
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f000 f926 	bl	8009fdc <_fflush_r>
 8009d90:	bb28      	cbnz	r0, 8009dde <__swbuf_r+0x8e>
 8009d92:	68a3      	ldr	r3, [r4, #8]
 8009d94:	3b01      	subs	r3, #1
 8009d96:	60a3      	str	r3, [r4, #8]
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	6022      	str	r2, [r4, #0]
 8009d9e:	701e      	strb	r6, [r3, #0]
 8009da0:	6963      	ldr	r3, [r4, #20]
 8009da2:	3001      	adds	r0, #1
 8009da4:	4283      	cmp	r3, r0
 8009da6:	d004      	beq.n	8009db2 <__swbuf_r+0x62>
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	07db      	lsls	r3, r3, #31
 8009dac:	d519      	bpl.n	8009de2 <__swbuf_r+0x92>
 8009dae:	2e0a      	cmp	r6, #10
 8009db0:	d117      	bne.n	8009de2 <__swbuf_r+0x92>
 8009db2:	4621      	mov	r1, r4
 8009db4:	4628      	mov	r0, r5
 8009db6:	f000 f911 	bl	8009fdc <_fflush_r>
 8009dba:	b190      	cbz	r0, 8009de2 <__swbuf_r+0x92>
 8009dbc:	e00f      	b.n	8009dde <__swbuf_r+0x8e>
 8009dbe:	4b0b      	ldr	r3, [pc, #44]	; (8009dec <__swbuf_r+0x9c>)
 8009dc0:	429c      	cmp	r4, r3
 8009dc2:	d101      	bne.n	8009dc8 <__swbuf_r+0x78>
 8009dc4:	68ac      	ldr	r4, [r5, #8]
 8009dc6:	e7d0      	b.n	8009d6a <__swbuf_r+0x1a>
 8009dc8:	4b09      	ldr	r3, [pc, #36]	; (8009df0 <__swbuf_r+0xa0>)
 8009dca:	429c      	cmp	r4, r3
 8009dcc:	bf08      	it	eq
 8009dce:	68ec      	ldreq	r4, [r5, #12]
 8009dd0:	e7cb      	b.n	8009d6a <__swbuf_r+0x1a>
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f000 f80d 	bl	8009df4 <__swsetup_r>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d0cc      	beq.n	8009d78 <__swbuf_r+0x28>
 8009dde:	f04f 37ff 	mov.w	r7, #4294967295
 8009de2:	4638      	mov	r0, r7
 8009de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009de6:	bf00      	nop
 8009de8:	0800ab34 	.word	0x0800ab34
 8009dec:	0800ab54 	.word	0x0800ab54
 8009df0:	0800ab14 	.word	0x0800ab14

08009df4 <__swsetup_r>:
 8009df4:	4b32      	ldr	r3, [pc, #200]	; (8009ec0 <__swsetup_r+0xcc>)
 8009df6:	b570      	push	{r4, r5, r6, lr}
 8009df8:	681d      	ldr	r5, [r3, #0]
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	b125      	cbz	r5, 8009e0a <__swsetup_r+0x16>
 8009e00:	69ab      	ldr	r3, [r5, #24]
 8009e02:	b913      	cbnz	r3, 8009e0a <__swsetup_r+0x16>
 8009e04:	4628      	mov	r0, r5
 8009e06:	f000 f953 	bl	800a0b0 <__sinit>
 8009e0a:	4b2e      	ldr	r3, [pc, #184]	; (8009ec4 <__swsetup_r+0xd0>)
 8009e0c:	429c      	cmp	r4, r3
 8009e0e:	d10f      	bne.n	8009e30 <__swsetup_r+0x3c>
 8009e10:	686c      	ldr	r4, [r5, #4]
 8009e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	0715      	lsls	r5, r2, #28
 8009e1a:	d42c      	bmi.n	8009e76 <__swsetup_r+0x82>
 8009e1c:	06d0      	lsls	r0, r2, #27
 8009e1e:	d411      	bmi.n	8009e44 <__swsetup_r+0x50>
 8009e20:	2209      	movs	r2, #9
 8009e22:	6032      	str	r2, [r6, #0]
 8009e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2e:	e03e      	b.n	8009eae <__swsetup_r+0xba>
 8009e30:	4b25      	ldr	r3, [pc, #148]	; (8009ec8 <__swsetup_r+0xd4>)
 8009e32:	429c      	cmp	r4, r3
 8009e34:	d101      	bne.n	8009e3a <__swsetup_r+0x46>
 8009e36:	68ac      	ldr	r4, [r5, #8]
 8009e38:	e7eb      	b.n	8009e12 <__swsetup_r+0x1e>
 8009e3a:	4b24      	ldr	r3, [pc, #144]	; (8009ecc <__swsetup_r+0xd8>)
 8009e3c:	429c      	cmp	r4, r3
 8009e3e:	bf08      	it	eq
 8009e40:	68ec      	ldreq	r4, [r5, #12]
 8009e42:	e7e6      	b.n	8009e12 <__swsetup_r+0x1e>
 8009e44:	0751      	lsls	r1, r2, #29
 8009e46:	d512      	bpl.n	8009e6e <__swsetup_r+0x7a>
 8009e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e4a:	b141      	cbz	r1, 8009e5e <__swsetup_r+0x6a>
 8009e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e50:	4299      	cmp	r1, r3
 8009e52:	d002      	beq.n	8009e5a <__swsetup_r+0x66>
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7ff fe47 	bl	8009ae8 <_free_r>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e5e:	89a3      	ldrh	r3, [r4, #12]
 8009e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e64:	81a3      	strh	r3, [r4, #12]
 8009e66:	2300      	movs	r3, #0
 8009e68:	6063      	str	r3, [r4, #4]
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	f043 0308 	orr.w	r3, r3, #8
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	6923      	ldr	r3, [r4, #16]
 8009e78:	b94b      	cbnz	r3, 8009e8e <__swsetup_r+0x9a>
 8009e7a:	89a3      	ldrh	r3, [r4, #12]
 8009e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e84:	d003      	beq.n	8009e8e <__swsetup_r+0x9a>
 8009e86:	4621      	mov	r1, r4
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f9bf 	bl	800a20c <__smakebuf_r>
 8009e8e:	89a2      	ldrh	r2, [r4, #12]
 8009e90:	f012 0301 	ands.w	r3, r2, #1
 8009e94:	d00c      	beq.n	8009eb0 <__swsetup_r+0xbc>
 8009e96:	2300      	movs	r3, #0
 8009e98:	60a3      	str	r3, [r4, #8]
 8009e9a:	6963      	ldr	r3, [r4, #20]
 8009e9c:	425b      	negs	r3, r3
 8009e9e:	61a3      	str	r3, [r4, #24]
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	b953      	cbnz	r3, 8009eba <__swsetup_r+0xc6>
 8009ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009eac:	d1ba      	bne.n	8009e24 <__swsetup_r+0x30>
 8009eae:	bd70      	pop	{r4, r5, r6, pc}
 8009eb0:	0792      	lsls	r2, r2, #30
 8009eb2:	bf58      	it	pl
 8009eb4:	6963      	ldrpl	r3, [r4, #20]
 8009eb6:	60a3      	str	r3, [r4, #8]
 8009eb8:	e7f2      	b.n	8009ea0 <__swsetup_r+0xac>
 8009eba:	2000      	movs	r0, #0
 8009ebc:	e7f7      	b.n	8009eae <__swsetup_r+0xba>
 8009ebe:	bf00      	nop
 8009ec0:	20000014 	.word	0x20000014
 8009ec4:	0800ab34 	.word	0x0800ab34
 8009ec8:	0800ab54 	.word	0x0800ab54
 8009ecc:	0800ab14 	.word	0x0800ab14

08009ed0 <__sflush_r>:
 8009ed0:	898a      	ldrh	r2, [r1, #12]
 8009ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	0710      	lsls	r0, r2, #28
 8009eda:	460c      	mov	r4, r1
 8009edc:	d458      	bmi.n	8009f90 <__sflush_r+0xc0>
 8009ede:	684b      	ldr	r3, [r1, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	dc05      	bgt.n	8009ef0 <__sflush_r+0x20>
 8009ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	dc02      	bgt.n	8009ef0 <__sflush_r+0x20>
 8009eea:	2000      	movs	r0, #0
 8009eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ef2:	2e00      	cmp	r6, #0
 8009ef4:	d0f9      	beq.n	8009eea <__sflush_r+0x1a>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009efc:	682f      	ldr	r7, [r5, #0]
 8009efe:	6a21      	ldr	r1, [r4, #32]
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	d032      	beq.n	8009f6a <__sflush_r+0x9a>
 8009f04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f06:	89a3      	ldrh	r3, [r4, #12]
 8009f08:	075a      	lsls	r2, r3, #29
 8009f0a:	d505      	bpl.n	8009f18 <__sflush_r+0x48>
 8009f0c:	6863      	ldr	r3, [r4, #4]
 8009f0e:	1ac0      	subs	r0, r0, r3
 8009f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f12:	b10b      	cbz	r3, 8009f18 <__sflush_r+0x48>
 8009f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f16:	1ac0      	subs	r0, r0, r3
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f1e:	6a21      	ldr	r1, [r4, #32]
 8009f20:	4628      	mov	r0, r5
 8009f22:	47b0      	blx	r6
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	d106      	bne.n	8009f38 <__sflush_r+0x68>
 8009f2a:	6829      	ldr	r1, [r5, #0]
 8009f2c:	291d      	cmp	r1, #29
 8009f2e:	d848      	bhi.n	8009fc2 <__sflush_r+0xf2>
 8009f30:	4a29      	ldr	r2, [pc, #164]	; (8009fd8 <__sflush_r+0x108>)
 8009f32:	40ca      	lsrs	r2, r1
 8009f34:	07d6      	lsls	r6, r2, #31
 8009f36:	d544      	bpl.n	8009fc2 <__sflush_r+0xf2>
 8009f38:	2200      	movs	r2, #0
 8009f3a:	6062      	str	r2, [r4, #4]
 8009f3c:	04d9      	lsls	r1, r3, #19
 8009f3e:	6922      	ldr	r2, [r4, #16]
 8009f40:	6022      	str	r2, [r4, #0]
 8009f42:	d504      	bpl.n	8009f4e <__sflush_r+0x7e>
 8009f44:	1c42      	adds	r2, r0, #1
 8009f46:	d101      	bne.n	8009f4c <__sflush_r+0x7c>
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	b903      	cbnz	r3, 8009f4e <__sflush_r+0x7e>
 8009f4c:	6560      	str	r0, [r4, #84]	; 0x54
 8009f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f50:	602f      	str	r7, [r5, #0]
 8009f52:	2900      	cmp	r1, #0
 8009f54:	d0c9      	beq.n	8009eea <__sflush_r+0x1a>
 8009f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f5a:	4299      	cmp	r1, r3
 8009f5c:	d002      	beq.n	8009f64 <__sflush_r+0x94>
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f7ff fdc2 	bl	8009ae8 <_free_r>
 8009f64:	2000      	movs	r0, #0
 8009f66:	6360      	str	r0, [r4, #52]	; 0x34
 8009f68:	e7c0      	b.n	8009eec <__sflush_r+0x1c>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	47b0      	blx	r6
 8009f70:	1c41      	adds	r1, r0, #1
 8009f72:	d1c8      	bne.n	8009f06 <__sflush_r+0x36>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0c5      	beq.n	8009f06 <__sflush_r+0x36>
 8009f7a:	2b1d      	cmp	r3, #29
 8009f7c:	d001      	beq.n	8009f82 <__sflush_r+0xb2>
 8009f7e:	2b16      	cmp	r3, #22
 8009f80:	d101      	bne.n	8009f86 <__sflush_r+0xb6>
 8009f82:	602f      	str	r7, [r5, #0]
 8009f84:	e7b1      	b.n	8009eea <__sflush_r+0x1a>
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f8c:	81a3      	strh	r3, [r4, #12]
 8009f8e:	e7ad      	b.n	8009eec <__sflush_r+0x1c>
 8009f90:	690f      	ldr	r7, [r1, #16]
 8009f92:	2f00      	cmp	r7, #0
 8009f94:	d0a9      	beq.n	8009eea <__sflush_r+0x1a>
 8009f96:	0793      	lsls	r3, r2, #30
 8009f98:	680e      	ldr	r6, [r1, #0]
 8009f9a:	bf08      	it	eq
 8009f9c:	694b      	ldreq	r3, [r1, #20]
 8009f9e:	600f      	str	r7, [r1, #0]
 8009fa0:	bf18      	it	ne
 8009fa2:	2300      	movne	r3, #0
 8009fa4:	eba6 0807 	sub.w	r8, r6, r7
 8009fa8:	608b      	str	r3, [r1, #8]
 8009faa:	f1b8 0f00 	cmp.w	r8, #0
 8009fae:	dd9c      	ble.n	8009eea <__sflush_r+0x1a>
 8009fb0:	4643      	mov	r3, r8
 8009fb2:	463a      	mov	r2, r7
 8009fb4:	6a21      	ldr	r1, [r4, #32]
 8009fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fb8:	4628      	mov	r0, r5
 8009fba:	47b0      	blx	r6
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	dc06      	bgt.n	8009fce <__sflush_r+0xfe>
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fc6:	81a3      	strh	r3, [r4, #12]
 8009fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fcc:	e78e      	b.n	8009eec <__sflush_r+0x1c>
 8009fce:	4407      	add	r7, r0
 8009fd0:	eba8 0800 	sub.w	r8, r8, r0
 8009fd4:	e7e9      	b.n	8009faa <__sflush_r+0xda>
 8009fd6:	bf00      	nop
 8009fd8:	20400001 	.word	0x20400001

08009fdc <_fflush_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	690b      	ldr	r3, [r1, #16]
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	b1db      	cbz	r3, 800a01e <_fflush_r+0x42>
 8009fe6:	b118      	cbz	r0, 8009ff0 <_fflush_r+0x14>
 8009fe8:	6983      	ldr	r3, [r0, #24]
 8009fea:	b90b      	cbnz	r3, 8009ff0 <_fflush_r+0x14>
 8009fec:	f000 f860 	bl	800a0b0 <__sinit>
 8009ff0:	4b0c      	ldr	r3, [pc, #48]	; (800a024 <_fflush_r+0x48>)
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	d109      	bne.n	800a00a <_fflush_r+0x2e>
 8009ff6:	686c      	ldr	r4, [r5, #4]
 8009ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ffc:	b17b      	cbz	r3, 800a01e <_fflush_r+0x42>
 8009ffe:	4621      	mov	r1, r4
 800a000:	4628      	mov	r0, r5
 800a002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a006:	f7ff bf63 	b.w	8009ed0 <__sflush_r>
 800a00a:	4b07      	ldr	r3, [pc, #28]	; (800a028 <_fflush_r+0x4c>)
 800a00c:	429c      	cmp	r4, r3
 800a00e:	d101      	bne.n	800a014 <_fflush_r+0x38>
 800a010:	68ac      	ldr	r4, [r5, #8]
 800a012:	e7f1      	b.n	8009ff8 <_fflush_r+0x1c>
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <_fflush_r+0x50>)
 800a016:	429c      	cmp	r4, r3
 800a018:	bf08      	it	eq
 800a01a:	68ec      	ldreq	r4, [r5, #12]
 800a01c:	e7ec      	b.n	8009ff8 <_fflush_r+0x1c>
 800a01e:	2000      	movs	r0, #0
 800a020:	bd38      	pop	{r3, r4, r5, pc}
 800a022:	bf00      	nop
 800a024:	0800ab34 	.word	0x0800ab34
 800a028:	0800ab54 	.word	0x0800ab54
 800a02c:	0800ab14 	.word	0x0800ab14

0800a030 <std>:
 800a030:	2300      	movs	r3, #0
 800a032:	b510      	push	{r4, lr}
 800a034:	4604      	mov	r4, r0
 800a036:	e9c0 3300 	strd	r3, r3, [r0]
 800a03a:	6083      	str	r3, [r0, #8]
 800a03c:	8181      	strh	r1, [r0, #12]
 800a03e:	6643      	str	r3, [r0, #100]	; 0x64
 800a040:	81c2      	strh	r2, [r0, #14]
 800a042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a046:	6183      	str	r3, [r0, #24]
 800a048:	4619      	mov	r1, r3
 800a04a:	2208      	movs	r2, #8
 800a04c:	305c      	adds	r0, #92	; 0x5c
 800a04e:	f7ff fd43 	bl	8009ad8 <memset>
 800a052:	4b05      	ldr	r3, [pc, #20]	; (800a068 <std+0x38>)
 800a054:	6263      	str	r3, [r4, #36]	; 0x24
 800a056:	4b05      	ldr	r3, [pc, #20]	; (800a06c <std+0x3c>)
 800a058:	62a3      	str	r3, [r4, #40]	; 0x28
 800a05a:	4b05      	ldr	r3, [pc, #20]	; (800a070 <std+0x40>)
 800a05c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a05e:	4b05      	ldr	r3, [pc, #20]	; (800a074 <std+0x44>)
 800a060:	6224      	str	r4, [r4, #32]
 800a062:	6323      	str	r3, [r4, #48]	; 0x30
 800a064:	bd10      	pop	{r4, pc}
 800a066:	bf00      	nop
 800a068:	0800a821 	.word	0x0800a821
 800a06c:	0800a843 	.word	0x0800a843
 800a070:	0800a87b 	.word	0x0800a87b
 800a074:	0800a89f 	.word	0x0800a89f

0800a078 <_cleanup_r>:
 800a078:	4901      	ldr	r1, [pc, #4]	; (800a080 <_cleanup_r+0x8>)
 800a07a:	f000 b885 	b.w	800a188 <_fwalk_reent>
 800a07e:	bf00      	nop
 800a080:	08009fdd 	.word	0x08009fdd

0800a084 <__sfmoreglue>:
 800a084:	b570      	push	{r4, r5, r6, lr}
 800a086:	1e4a      	subs	r2, r1, #1
 800a088:	2568      	movs	r5, #104	; 0x68
 800a08a:	4355      	muls	r5, r2
 800a08c:	460e      	mov	r6, r1
 800a08e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a092:	f7ff fd77 	bl	8009b84 <_malloc_r>
 800a096:	4604      	mov	r4, r0
 800a098:	b140      	cbz	r0, 800a0ac <__sfmoreglue+0x28>
 800a09a:	2100      	movs	r1, #0
 800a09c:	e9c0 1600 	strd	r1, r6, [r0]
 800a0a0:	300c      	adds	r0, #12
 800a0a2:	60a0      	str	r0, [r4, #8]
 800a0a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0a8:	f7ff fd16 	bl	8009ad8 <memset>
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}

0800a0b0 <__sinit>:
 800a0b0:	6983      	ldr	r3, [r0, #24]
 800a0b2:	b510      	push	{r4, lr}
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	bb33      	cbnz	r3, 800a106 <__sinit+0x56>
 800a0b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a0bc:	6503      	str	r3, [r0, #80]	; 0x50
 800a0be:	4b12      	ldr	r3, [pc, #72]	; (800a108 <__sinit+0x58>)
 800a0c0:	4a12      	ldr	r2, [pc, #72]	; (800a10c <__sinit+0x5c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6282      	str	r2, [r0, #40]	; 0x28
 800a0c6:	4298      	cmp	r0, r3
 800a0c8:	bf04      	itt	eq
 800a0ca:	2301      	moveq	r3, #1
 800a0cc:	6183      	streq	r3, [r0, #24]
 800a0ce:	f000 f81f 	bl	800a110 <__sfp>
 800a0d2:	6060      	str	r0, [r4, #4]
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f000 f81b 	bl	800a110 <__sfp>
 800a0da:	60a0      	str	r0, [r4, #8]
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f000 f817 	bl	800a110 <__sfp>
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	60e0      	str	r0, [r4, #12]
 800a0e6:	2104      	movs	r1, #4
 800a0e8:	6860      	ldr	r0, [r4, #4]
 800a0ea:	f7ff ffa1 	bl	800a030 <std>
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	2109      	movs	r1, #9
 800a0f2:	68a0      	ldr	r0, [r4, #8]
 800a0f4:	f7ff ff9c 	bl	800a030 <std>
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	2112      	movs	r1, #18
 800a0fc:	68e0      	ldr	r0, [r4, #12]
 800a0fe:	f7ff ff97 	bl	800a030 <std>
 800a102:	2301      	movs	r3, #1
 800a104:	61a3      	str	r3, [r4, #24]
 800a106:	bd10      	pop	{r4, pc}
 800a108:	0800ab10 	.word	0x0800ab10
 800a10c:	0800a079 	.word	0x0800a079

0800a110 <__sfp>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	4b1b      	ldr	r3, [pc, #108]	; (800a180 <__sfp+0x70>)
 800a114:	681e      	ldr	r6, [r3, #0]
 800a116:	69b3      	ldr	r3, [r6, #24]
 800a118:	4607      	mov	r7, r0
 800a11a:	b913      	cbnz	r3, 800a122 <__sfp+0x12>
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7ff ffc7 	bl	800a0b0 <__sinit>
 800a122:	3648      	adds	r6, #72	; 0x48
 800a124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a128:	3b01      	subs	r3, #1
 800a12a:	d503      	bpl.n	800a134 <__sfp+0x24>
 800a12c:	6833      	ldr	r3, [r6, #0]
 800a12e:	b133      	cbz	r3, 800a13e <__sfp+0x2e>
 800a130:	6836      	ldr	r6, [r6, #0]
 800a132:	e7f7      	b.n	800a124 <__sfp+0x14>
 800a134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a138:	b16d      	cbz	r5, 800a156 <__sfp+0x46>
 800a13a:	3468      	adds	r4, #104	; 0x68
 800a13c:	e7f4      	b.n	800a128 <__sfp+0x18>
 800a13e:	2104      	movs	r1, #4
 800a140:	4638      	mov	r0, r7
 800a142:	f7ff ff9f 	bl	800a084 <__sfmoreglue>
 800a146:	6030      	str	r0, [r6, #0]
 800a148:	2800      	cmp	r0, #0
 800a14a:	d1f1      	bne.n	800a130 <__sfp+0x20>
 800a14c:	230c      	movs	r3, #12
 800a14e:	603b      	str	r3, [r7, #0]
 800a150:	4604      	mov	r4, r0
 800a152:	4620      	mov	r0, r4
 800a154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a156:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <__sfp+0x74>)
 800a158:	6665      	str	r5, [r4, #100]	; 0x64
 800a15a:	e9c4 5500 	strd	r5, r5, [r4]
 800a15e:	60a5      	str	r5, [r4, #8]
 800a160:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a164:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a168:	2208      	movs	r2, #8
 800a16a:	4629      	mov	r1, r5
 800a16c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a170:	f7ff fcb2 	bl	8009ad8 <memset>
 800a174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a17c:	e7e9      	b.n	800a152 <__sfp+0x42>
 800a17e:	bf00      	nop
 800a180:	0800ab10 	.word	0x0800ab10
 800a184:	ffff0001 	.word	0xffff0001

0800a188 <_fwalk_reent>:
 800a188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a18c:	4680      	mov	r8, r0
 800a18e:	4689      	mov	r9, r1
 800a190:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a194:	2600      	movs	r6, #0
 800a196:	b914      	cbnz	r4, 800a19e <_fwalk_reent+0x16>
 800a198:	4630      	mov	r0, r6
 800a19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a1a2:	3f01      	subs	r7, #1
 800a1a4:	d501      	bpl.n	800a1aa <_fwalk_reent+0x22>
 800a1a6:	6824      	ldr	r4, [r4, #0]
 800a1a8:	e7f5      	b.n	800a196 <_fwalk_reent+0xe>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d907      	bls.n	800a1c0 <_fwalk_reent+0x38>
 800a1b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	d003      	beq.n	800a1c0 <_fwalk_reent+0x38>
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	47c8      	blx	r9
 800a1be:	4306      	orrs	r6, r0
 800a1c0:	3568      	adds	r5, #104	; 0x68
 800a1c2:	e7ee      	b.n	800a1a2 <_fwalk_reent+0x1a>

0800a1c4 <__swhatbuf_r>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	460e      	mov	r6, r1
 800a1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	b096      	sub	sp, #88	; 0x58
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	461d      	mov	r5, r3
 800a1d4:	da07      	bge.n	800a1e6 <__swhatbuf_r+0x22>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	89b3      	ldrh	r3, [r6, #12]
 800a1dc:	061a      	lsls	r2, r3, #24
 800a1de:	d410      	bmi.n	800a202 <__swhatbuf_r+0x3e>
 800a1e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e4:	e00e      	b.n	800a204 <__swhatbuf_r+0x40>
 800a1e6:	466a      	mov	r2, sp
 800a1e8:	f000 fb80 	bl	800a8ec <_fstat_r>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	dbf2      	blt.n	800a1d6 <__swhatbuf_r+0x12>
 800a1f0:	9a01      	ldr	r2, [sp, #4]
 800a1f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1fa:	425a      	negs	r2, r3
 800a1fc:	415a      	adcs	r2, r3
 800a1fe:	602a      	str	r2, [r5, #0]
 800a200:	e7ee      	b.n	800a1e0 <__swhatbuf_r+0x1c>
 800a202:	2340      	movs	r3, #64	; 0x40
 800a204:	2000      	movs	r0, #0
 800a206:	6023      	str	r3, [r4, #0]
 800a208:	b016      	add	sp, #88	; 0x58
 800a20a:	bd70      	pop	{r4, r5, r6, pc}

0800a20c <__smakebuf_r>:
 800a20c:	898b      	ldrh	r3, [r1, #12]
 800a20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a210:	079d      	lsls	r5, r3, #30
 800a212:	4606      	mov	r6, r0
 800a214:	460c      	mov	r4, r1
 800a216:	d507      	bpl.n	800a228 <__smakebuf_r+0x1c>
 800a218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	6123      	str	r3, [r4, #16]
 800a220:	2301      	movs	r3, #1
 800a222:	6163      	str	r3, [r4, #20]
 800a224:	b002      	add	sp, #8
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	ab01      	add	r3, sp, #4
 800a22a:	466a      	mov	r2, sp
 800a22c:	f7ff ffca 	bl	800a1c4 <__swhatbuf_r>
 800a230:	9900      	ldr	r1, [sp, #0]
 800a232:	4605      	mov	r5, r0
 800a234:	4630      	mov	r0, r6
 800a236:	f7ff fca5 	bl	8009b84 <_malloc_r>
 800a23a:	b948      	cbnz	r0, 800a250 <__smakebuf_r+0x44>
 800a23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a240:	059a      	lsls	r2, r3, #22
 800a242:	d4ef      	bmi.n	800a224 <__smakebuf_r+0x18>
 800a244:	f023 0303 	bic.w	r3, r3, #3
 800a248:	f043 0302 	orr.w	r3, r3, #2
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	e7e3      	b.n	800a218 <__smakebuf_r+0xc>
 800a250:	4b0d      	ldr	r3, [pc, #52]	; (800a288 <__smakebuf_r+0x7c>)
 800a252:	62b3      	str	r3, [r6, #40]	; 0x28
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	6020      	str	r0, [r4, #0]
 800a258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a25c:	81a3      	strh	r3, [r4, #12]
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	6163      	str	r3, [r4, #20]
 800a262:	9b01      	ldr	r3, [sp, #4]
 800a264:	6120      	str	r0, [r4, #16]
 800a266:	b15b      	cbz	r3, 800a280 <__smakebuf_r+0x74>
 800a268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26c:	4630      	mov	r0, r6
 800a26e:	f000 fb4f 	bl	800a910 <_isatty_r>
 800a272:	b128      	cbz	r0, 800a280 <__smakebuf_r+0x74>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	f023 0303 	bic.w	r3, r3, #3
 800a27a:	f043 0301 	orr.w	r3, r3, #1
 800a27e:	81a3      	strh	r3, [r4, #12]
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	431d      	orrs	r5, r3
 800a284:	81a5      	strh	r5, [r4, #12]
 800a286:	e7cd      	b.n	800a224 <__smakebuf_r+0x18>
 800a288:	0800a079 	.word	0x0800a079

0800a28c <__malloc_lock>:
 800a28c:	4770      	bx	lr

0800a28e <__malloc_unlock>:
 800a28e:	4770      	bx	lr

0800a290 <__sfputc_r>:
 800a290:	6893      	ldr	r3, [r2, #8]
 800a292:	3b01      	subs	r3, #1
 800a294:	2b00      	cmp	r3, #0
 800a296:	b410      	push	{r4}
 800a298:	6093      	str	r3, [r2, #8]
 800a29a:	da08      	bge.n	800a2ae <__sfputc_r+0x1e>
 800a29c:	6994      	ldr	r4, [r2, #24]
 800a29e:	42a3      	cmp	r3, r4
 800a2a0:	db01      	blt.n	800a2a6 <__sfputc_r+0x16>
 800a2a2:	290a      	cmp	r1, #10
 800a2a4:	d103      	bne.n	800a2ae <__sfputc_r+0x1e>
 800a2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2aa:	f7ff bd51 	b.w	8009d50 <__swbuf_r>
 800a2ae:	6813      	ldr	r3, [r2, #0]
 800a2b0:	1c58      	adds	r0, r3, #1
 800a2b2:	6010      	str	r0, [r2, #0]
 800a2b4:	7019      	strb	r1, [r3, #0]
 800a2b6:	4608      	mov	r0, r1
 800a2b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <__sfputs_r>:
 800a2be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	460f      	mov	r7, r1
 800a2c4:	4614      	mov	r4, r2
 800a2c6:	18d5      	adds	r5, r2, r3
 800a2c8:	42ac      	cmp	r4, r5
 800a2ca:	d101      	bne.n	800a2d0 <__sfputs_r+0x12>
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	e007      	b.n	800a2e0 <__sfputs_r+0x22>
 800a2d0:	463a      	mov	r2, r7
 800a2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff ffda 	bl	800a290 <__sfputc_r>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	d1f3      	bne.n	800a2c8 <__sfputs_r+0xa>
 800a2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2e4 <_vfiprintf_r>:
 800a2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	b09d      	sub	sp, #116	; 0x74
 800a2ec:	4617      	mov	r7, r2
 800a2ee:	461d      	mov	r5, r3
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	b118      	cbz	r0, 800a2fc <_vfiprintf_r+0x18>
 800a2f4:	6983      	ldr	r3, [r0, #24]
 800a2f6:	b90b      	cbnz	r3, 800a2fc <_vfiprintf_r+0x18>
 800a2f8:	f7ff feda 	bl	800a0b0 <__sinit>
 800a2fc:	4b7c      	ldr	r3, [pc, #496]	; (800a4f0 <_vfiprintf_r+0x20c>)
 800a2fe:	429c      	cmp	r4, r3
 800a300:	d158      	bne.n	800a3b4 <_vfiprintf_r+0xd0>
 800a302:	6874      	ldr	r4, [r6, #4]
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	0718      	lsls	r0, r3, #28
 800a308:	d55e      	bpl.n	800a3c8 <_vfiprintf_r+0xe4>
 800a30a:	6923      	ldr	r3, [r4, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d05b      	beq.n	800a3c8 <_vfiprintf_r+0xe4>
 800a310:	2300      	movs	r3, #0
 800a312:	9309      	str	r3, [sp, #36]	; 0x24
 800a314:	2320      	movs	r3, #32
 800a316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a31a:	2330      	movs	r3, #48	; 0x30
 800a31c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a320:	9503      	str	r5, [sp, #12]
 800a322:	f04f 0b01 	mov.w	fp, #1
 800a326:	46b8      	mov	r8, r7
 800a328:	4645      	mov	r5, r8
 800a32a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a32e:	b10b      	cbz	r3, 800a334 <_vfiprintf_r+0x50>
 800a330:	2b25      	cmp	r3, #37	; 0x25
 800a332:	d154      	bne.n	800a3de <_vfiprintf_r+0xfa>
 800a334:	ebb8 0a07 	subs.w	sl, r8, r7
 800a338:	d00b      	beq.n	800a352 <_vfiprintf_r+0x6e>
 800a33a:	4653      	mov	r3, sl
 800a33c:	463a      	mov	r2, r7
 800a33e:	4621      	mov	r1, r4
 800a340:	4630      	mov	r0, r6
 800a342:	f7ff ffbc 	bl	800a2be <__sfputs_r>
 800a346:	3001      	adds	r0, #1
 800a348:	f000 80c2 	beq.w	800a4d0 <_vfiprintf_r+0x1ec>
 800a34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a34e:	4453      	add	r3, sl
 800a350:	9309      	str	r3, [sp, #36]	; 0x24
 800a352:	f898 3000 	ldrb.w	r3, [r8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	f000 80ba 	beq.w	800a4d0 <_vfiprintf_r+0x1ec>
 800a35c:	2300      	movs	r3, #0
 800a35e:	f04f 32ff 	mov.w	r2, #4294967295
 800a362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a366:	9304      	str	r3, [sp, #16]
 800a368:	9307      	str	r3, [sp, #28]
 800a36a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a36e:	931a      	str	r3, [sp, #104]	; 0x68
 800a370:	46a8      	mov	r8, r5
 800a372:	2205      	movs	r2, #5
 800a374:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a378:	485e      	ldr	r0, [pc, #376]	; (800a4f4 <_vfiprintf_r+0x210>)
 800a37a:	f7f5 ff31 	bl	80001e0 <memchr>
 800a37e:	9b04      	ldr	r3, [sp, #16]
 800a380:	bb78      	cbnz	r0, 800a3e2 <_vfiprintf_r+0xfe>
 800a382:	06d9      	lsls	r1, r3, #27
 800a384:	bf44      	itt	mi
 800a386:	2220      	movmi	r2, #32
 800a388:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a38c:	071a      	lsls	r2, r3, #28
 800a38e:	bf44      	itt	mi
 800a390:	222b      	movmi	r2, #43	; 0x2b
 800a392:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a396:	782a      	ldrb	r2, [r5, #0]
 800a398:	2a2a      	cmp	r2, #42	; 0x2a
 800a39a:	d02a      	beq.n	800a3f2 <_vfiprintf_r+0x10e>
 800a39c:	9a07      	ldr	r2, [sp, #28]
 800a39e:	46a8      	mov	r8, r5
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	250a      	movs	r5, #10
 800a3a4:	4641      	mov	r1, r8
 800a3a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3aa:	3b30      	subs	r3, #48	; 0x30
 800a3ac:	2b09      	cmp	r3, #9
 800a3ae:	d969      	bls.n	800a484 <_vfiprintf_r+0x1a0>
 800a3b0:	b360      	cbz	r0, 800a40c <_vfiprintf_r+0x128>
 800a3b2:	e024      	b.n	800a3fe <_vfiprintf_r+0x11a>
 800a3b4:	4b50      	ldr	r3, [pc, #320]	; (800a4f8 <_vfiprintf_r+0x214>)
 800a3b6:	429c      	cmp	r4, r3
 800a3b8:	d101      	bne.n	800a3be <_vfiprintf_r+0xda>
 800a3ba:	68b4      	ldr	r4, [r6, #8]
 800a3bc:	e7a2      	b.n	800a304 <_vfiprintf_r+0x20>
 800a3be:	4b4f      	ldr	r3, [pc, #316]	; (800a4fc <_vfiprintf_r+0x218>)
 800a3c0:	429c      	cmp	r4, r3
 800a3c2:	bf08      	it	eq
 800a3c4:	68f4      	ldreq	r4, [r6, #12]
 800a3c6:	e79d      	b.n	800a304 <_vfiprintf_r+0x20>
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff fd12 	bl	8009df4 <__swsetup_r>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d09d      	beq.n	800a310 <_vfiprintf_r+0x2c>
 800a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d8:	b01d      	add	sp, #116	; 0x74
 800a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3de:	46a8      	mov	r8, r5
 800a3e0:	e7a2      	b.n	800a328 <_vfiprintf_r+0x44>
 800a3e2:	4a44      	ldr	r2, [pc, #272]	; (800a4f4 <_vfiprintf_r+0x210>)
 800a3e4:	1a80      	subs	r0, r0, r2
 800a3e6:	fa0b f000 	lsl.w	r0, fp, r0
 800a3ea:	4318      	orrs	r0, r3
 800a3ec:	9004      	str	r0, [sp, #16]
 800a3ee:	4645      	mov	r5, r8
 800a3f0:	e7be      	b.n	800a370 <_vfiprintf_r+0x8c>
 800a3f2:	9a03      	ldr	r2, [sp, #12]
 800a3f4:	1d11      	adds	r1, r2, #4
 800a3f6:	6812      	ldr	r2, [r2, #0]
 800a3f8:	9103      	str	r1, [sp, #12]
 800a3fa:	2a00      	cmp	r2, #0
 800a3fc:	db01      	blt.n	800a402 <_vfiprintf_r+0x11e>
 800a3fe:	9207      	str	r2, [sp, #28]
 800a400:	e004      	b.n	800a40c <_vfiprintf_r+0x128>
 800a402:	4252      	negs	r2, r2
 800a404:	f043 0302 	orr.w	r3, r3, #2
 800a408:	9207      	str	r2, [sp, #28]
 800a40a:	9304      	str	r3, [sp, #16]
 800a40c:	f898 3000 	ldrb.w	r3, [r8]
 800a410:	2b2e      	cmp	r3, #46	; 0x2e
 800a412:	d10e      	bne.n	800a432 <_vfiprintf_r+0x14e>
 800a414:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a418:	2b2a      	cmp	r3, #42	; 0x2a
 800a41a:	d138      	bne.n	800a48e <_vfiprintf_r+0x1aa>
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	1d1a      	adds	r2, r3, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	9203      	str	r2, [sp, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	bfb8      	it	lt
 800a428:	f04f 33ff 	movlt.w	r3, #4294967295
 800a42c:	f108 0802 	add.w	r8, r8, #2
 800a430:	9305      	str	r3, [sp, #20]
 800a432:	4d33      	ldr	r5, [pc, #204]	; (800a500 <_vfiprintf_r+0x21c>)
 800a434:	f898 1000 	ldrb.w	r1, [r8]
 800a438:	2203      	movs	r2, #3
 800a43a:	4628      	mov	r0, r5
 800a43c:	f7f5 fed0 	bl	80001e0 <memchr>
 800a440:	b140      	cbz	r0, 800a454 <_vfiprintf_r+0x170>
 800a442:	2340      	movs	r3, #64	; 0x40
 800a444:	1b40      	subs	r0, r0, r5
 800a446:	fa03 f000 	lsl.w	r0, r3, r0
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	4303      	orrs	r3, r0
 800a44e:	f108 0801 	add.w	r8, r8, #1
 800a452:	9304      	str	r3, [sp, #16]
 800a454:	f898 1000 	ldrb.w	r1, [r8]
 800a458:	482a      	ldr	r0, [pc, #168]	; (800a504 <_vfiprintf_r+0x220>)
 800a45a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a45e:	2206      	movs	r2, #6
 800a460:	f108 0701 	add.w	r7, r8, #1
 800a464:	f7f5 febc 	bl	80001e0 <memchr>
 800a468:	2800      	cmp	r0, #0
 800a46a:	d037      	beq.n	800a4dc <_vfiprintf_r+0x1f8>
 800a46c:	4b26      	ldr	r3, [pc, #152]	; (800a508 <_vfiprintf_r+0x224>)
 800a46e:	bb1b      	cbnz	r3, 800a4b8 <_vfiprintf_r+0x1d4>
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	3307      	adds	r3, #7
 800a474:	f023 0307 	bic.w	r3, r3, #7
 800a478:	3308      	adds	r3, #8
 800a47a:	9303      	str	r3, [sp, #12]
 800a47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a47e:	444b      	add	r3, r9
 800a480:	9309      	str	r3, [sp, #36]	; 0x24
 800a482:	e750      	b.n	800a326 <_vfiprintf_r+0x42>
 800a484:	fb05 3202 	mla	r2, r5, r2, r3
 800a488:	2001      	movs	r0, #1
 800a48a:	4688      	mov	r8, r1
 800a48c:	e78a      	b.n	800a3a4 <_vfiprintf_r+0xc0>
 800a48e:	2300      	movs	r3, #0
 800a490:	f108 0801 	add.w	r8, r8, #1
 800a494:	9305      	str	r3, [sp, #20]
 800a496:	4619      	mov	r1, r3
 800a498:	250a      	movs	r5, #10
 800a49a:	4640      	mov	r0, r8
 800a49c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4a0:	3a30      	subs	r2, #48	; 0x30
 800a4a2:	2a09      	cmp	r2, #9
 800a4a4:	d903      	bls.n	800a4ae <_vfiprintf_r+0x1ca>
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0c3      	beq.n	800a432 <_vfiprintf_r+0x14e>
 800a4aa:	9105      	str	r1, [sp, #20]
 800a4ac:	e7c1      	b.n	800a432 <_vfiprintf_r+0x14e>
 800a4ae:	fb05 2101 	mla	r1, r5, r1, r2
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4680      	mov	r8, r0
 800a4b6:	e7f0      	b.n	800a49a <_vfiprintf_r+0x1b6>
 800a4b8:	ab03      	add	r3, sp, #12
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	4622      	mov	r2, r4
 800a4be:	4b13      	ldr	r3, [pc, #76]	; (800a50c <_vfiprintf_r+0x228>)
 800a4c0:	a904      	add	r1, sp, #16
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f3af 8000 	nop.w
 800a4c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a4cc:	4681      	mov	r9, r0
 800a4ce:	d1d5      	bne.n	800a47c <_vfiprintf_r+0x198>
 800a4d0:	89a3      	ldrh	r3, [r4, #12]
 800a4d2:	065b      	lsls	r3, r3, #25
 800a4d4:	f53f af7e 	bmi.w	800a3d4 <_vfiprintf_r+0xf0>
 800a4d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4da:	e77d      	b.n	800a3d8 <_vfiprintf_r+0xf4>
 800a4dc:	ab03      	add	r3, sp, #12
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	4b0a      	ldr	r3, [pc, #40]	; (800a50c <_vfiprintf_r+0x228>)
 800a4e4:	a904      	add	r1, sp, #16
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	f000 f888 	bl	800a5fc <_printf_i>
 800a4ec:	e7ec      	b.n	800a4c8 <_vfiprintf_r+0x1e4>
 800a4ee:	bf00      	nop
 800a4f0:	0800ab34 	.word	0x0800ab34
 800a4f4:	0800ab74 	.word	0x0800ab74
 800a4f8:	0800ab54 	.word	0x0800ab54
 800a4fc:	0800ab14 	.word	0x0800ab14
 800a500:	0800ab7a 	.word	0x0800ab7a
 800a504:	0800ab7e 	.word	0x0800ab7e
 800a508:	00000000 	.word	0x00000000
 800a50c:	0800a2bf 	.word	0x0800a2bf

0800a510 <_printf_common>:
 800a510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a514:	4691      	mov	r9, r2
 800a516:	461f      	mov	r7, r3
 800a518:	688a      	ldr	r2, [r1, #8]
 800a51a:	690b      	ldr	r3, [r1, #16]
 800a51c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a520:	4293      	cmp	r3, r2
 800a522:	bfb8      	it	lt
 800a524:	4613      	movlt	r3, r2
 800a526:	f8c9 3000 	str.w	r3, [r9]
 800a52a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a52e:	4606      	mov	r6, r0
 800a530:	460c      	mov	r4, r1
 800a532:	b112      	cbz	r2, 800a53a <_printf_common+0x2a>
 800a534:	3301      	adds	r3, #1
 800a536:	f8c9 3000 	str.w	r3, [r9]
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	0699      	lsls	r1, r3, #26
 800a53e:	bf42      	ittt	mi
 800a540:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a544:	3302      	addmi	r3, #2
 800a546:	f8c9 3000 	strmi.w	r3, [r9]
 800a54a:	6825      	ldr	r5, [r4, #0]
 800a54c:	f015 0506 	ands.w	r5, r5, #6
 800a550:	d107      	bne.n	800a562 <_printf_common+0x52>
 800a552:	f104 0a19 	add.w	sl, r4, #25
 800a556:	68e3      	ldr	r3, [r4, #12]
 800a558:	f8d9 2000 	ldr.w	r2, [r9]
 800a55c:	1a9b      	subs	r3, r3, r2
 800a55e:	42ab      	cmp	r3, r5
 800a560:	dc28      	bgt.n	800a5b4 <_printf_common+0xa4>
 800a562:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a566:	6822      	ldr	r2, [r4, #0]
 800a568:	3300      	adds	r3, #0
 800a56a:	bf18      	it	ne
 800a56c:	2301      	movne	r3, #1
 800a56e:	0692      	lsls	r2, r2, #26
 800a570:	d42d      	bmi.n	800a5ce <_printf_common+0xbe>
 800a572:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a576:	4639      	mov	r1, r7
 800a578:	4630      	mov	r0, r6
 800a57a:	47c0      	blx	r8
 800a57c:	3001      	adds	r0, #1
 800a57e:	d020      	beq.n	800a5c2 <_printf_common+0xb2>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	68e5      	ldr	r5, [r4, #12]
 800a584:	f8d9 2000 	ldr.w	r2, [r9]
 800a588:	f003 0306 	and.w	r3, r3, #6
 800a58c:	2b04      	cmp	r3, #4
 800a58e:	bf08      	it	eq
 800a590:	1aad      	subeq	r5, r5, r2
 800a592:	68a3      	ldr	r3, [r4, #8]
 800a594:	6922      	ldr	r2, [r4, #16]
 800a596:	bf0c      	ite	eq
 800a598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a59c:	2500      	movne	r5, #0
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	bfc4      	itt	gt
 800a5a2:	1a9b      	subgt	r3, r3, r2
 800a5a4:	18ed      	addgt	r5, r5, r3
 800a5a6:	f04f 0900 	mov.w	r9, #0
 800a5aa:	341a      	adds	r4, #26
 800a5ac:	454d      	cmp	r5, r9
 800a5ae:	d11a      	bne.n	800a5e6 <_printf_common+0xd6>
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e008      	b.n	800a5c6 <_printf_common+0xb6>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	4652      	mov	r2, sl
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	47c0      	blx	r8
 800a5be:	3001      	adds	r0, #1
 800a5c0:	d103      	bne.n	800a5ca <_printf_common+0xba>
 800a5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ca:	3501      	adds	r5, #1
 800a5cc:	e7c3      	b.n	800a556 <_printf_common+0x46>
 800a5ce:	18e1      	adds	r1, r4, r3
 800a5d0:	1c5a      	adds	r2, r3, #1
 800a5d2:	2030      	movs	r0, #48	; 0x30
 800a5d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5d8:	4422      	add	r2, r4
 800a5da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5e2:	3302      	adds	r3, #2
 800a5e4:	e7c5      	b.n	800a572 <_printf_common+0x62>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	47c0      	blx	r8
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d0e6      	beq.n	800a5c2 <_printf_common+0xb2>
 800a5f4:	f109 0901 	add.w	r9, r9, #1
 800a5f8:	e7d8      	b.n	800a5ac <_printf_common+0x9c>
	...

0800a5fc <_printf_i>:
 800a5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a600:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a604:	460c      	mov	r4, r1
 800a606:	7e09      	ldrb	r1, [r1, #24]
 800a608:	b085      	sub	sp, #20
 800a60a:	296e      	cmp	r1, #110	; 0x6e
 800a60c:	4617      	mov	r7, r2
 800a60e:	4606      	mov	r6, r0
 800a610:	4698      	mov	r8, r3
 800a612:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a614:	f000 80b3 	beq.w	800a77e <_printf_i+0x182>
 800a618:	d822      	bhi.n	800a660 <_printf_i+0x64>
 800a61a:	2963      	cmp	r1, #99	; 0x63
 800a61c:	d036      	beq.n	800a68c <_printf_i+0x90>
 800a61e:	d80a      	bhi.n	800a636 <_printf_i+0x3a>
 800a620:	2900      	cmp	r1, #0
 800a622:	f000 80b9 	beq.w	800a798 <_printf_i+0x19c>
 800a626:	2958      	cmp	r1, #88	; 0x58
 800a628:	f000 8083 	beq.w	800a732 <_printf_i+0x136>
 800a62c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a630:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a634:	e032      	b.n	800a69c <_printf_i+0xa0>
 800a636:	2964      	cmp	r1, #100	; 0x64
 800a638:	d001      	beq.n	800a63e <_printf_i+0x42>
 800a63a:	2969      	cmp	r1, #105	; 0x69
 800a63c:	d1f6      	bne.n	800a62c <_printf_i+0x30>
 800a63e:	6820      	ldr	r0, [r4, #0]
 800a640:	6813      	ldr	r3, [r2, #0]
 800a642:	0605      	lsls	r5, r0, #24
 800a644:	f103 0104 	add.w	r1, r3, #4
 800a648:	d52a      	bpl.n	800a6a0 <_printf_i+0xa4>
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6011      	str	r1, [r2, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	da03      	bge.n	800a65a <_printf_i+0x5e>
 800a652:	222d      	movs	r2, #45	; 0x2d
 800a654:	425b      	negs	r3, r3
 800a656:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a65a:	486f      	ldr	r0, [pc, #444]	; (800a818 <_printf_i+0x21c>)
 800a65c:	220a      	movs	r2, #10
 800a65e:	e039      	b.n	800a6d4 <_printf_i+0xd8>
 800a660:	2973      	cmp	r1, #115	; 0x73
 800a662:	f000 809d 	beq.w	800a7a0 <_printf_i+0x1a4>
 800a666:	d808      	bhi.n	800a67a <_printf_i+0x7e>
 800a668:	296f      	cmp	r1, #111	; 0x6f
 800a66a:	d020      	beq.n	800a6ae <_printf_i+0xb2>
 800a66c:	2970      	cmp	r1, #112	; 0x70
 800a66e:	d1dd      	bne.n	800a62c <_printf_i+0x30>
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	f043 0320 	orr.w	r3, r3, #32
 800a676:	6023      	str	r3, [r4, #0]
 800a678:	e003      	b.n	800a682 <_printf_i+0x86>
 800a67a:	2975      	cmp	r1, #117	; 0x75
 800a67c:	d017      	beq.n	800a6ae <_printf_i+0xb2>
 800a67e:	2978      	cmp	r1, #120	; 0x78
 800a680:	d1d4      	bne.n	800a62c <_printf_i+0x30>
 800a682:	2378      	movs	r3, #120	; 0x78
 800a684:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a688:	4864      	ldr	r0, [pc, #400]	; (800a81c <_printf_i+0x220>)
 800a68a:	e055      	b.n	800a738 <_printf_i+0x13c>
 800a68c:	6813      	ldr	r3, [r2, #0]
 800a68e:	1d19      	adds	r1, r3, #4
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6011      	str	r1, [r2, #0]
 800a694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a69c:	2301      	movs	r3, #1
 800a69e:	e08c      	b.n	800a7ba <_printf_i+0x1be>
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6011      	str	r1, [r2, #0]
 800a6a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6a8:	bf18      	it	ne
 800a6aa:	b21b      	sxthne	r3, r3
 800a6ac:	e7cf      	b.n	800a64e <_printf_i+0x52>
 800a6ae:	6813      	ldr	r3, [r2, #0]
 800a6b0:	6825      	ldr	r5, [r4, #0]
 800a6b2:	1d18      	adds	r0, r3, #4
 800a6b4:	6010      	str	r0, [r2, #0]
 800a6b6:	0628      	lsls	r0, r5, #24
 800a6b8:	d501      	bpl.n	800a6be <_printf_i+0xc2>
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	e002      	b.n	800a6c4 <_printf_i+0xc8>
 800a6be:	0668      	lsls	r0, r5, #25
 800a6c0:	d5fb      	bpl.n	800a6ba <_printf_i+0xbe>
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	4854      	ldr	r0, [pc, #336]	; (800a818 <_printf_i+0x21c>)
 800a6c6:	296f      	cmp	r1, #111	; 0x6f
 800a6c8:	bf14      	ite	ne
 800a6ca:	220a      	movne	r2, #10
 800a6cc:	2208      	moveq	r2, #8
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6d4:	6865      	ldr	r5, [r4, #4]
 800a6d6:	60a5      	str	r5, [r4, #8]
 800a6d8:	2d00      	cmp	r5, #0
 800a6da:	f2c0 8095 	blt.w	800a808 <_printf_i+0x20c>
 800a6de:	6821      	ldr	r1, [r4, #0]
 800a6e0:	f021 0104 	bic.w	r1, r1, #4
 800a6e4:	6021      	str	r1, [r4, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d13d      	bne.n	800a766 <_printf_i+0x16a>
 800a6ea:	2d00      	cmp	r5, #0
 800a6ec:	f040 808e 	bne.w	800a80c <_printf_i+0x210>
 800a6f0:	4665      	mov	r5, ip
 800a6f2:	2a08      	cmp	r2, #8
 800a6f4:	d10b      	bne.n	800a70e <_printf_i+0x112>
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	07db      	lsls	r3, r3, #31
 800a6fa:	d508      	bpl.n	800a70e <_printf_i+0x112>
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	6862      	ldr	r2, [r4, #4]
 800a700:	429a      	cmp	r2, r3
 800a702:	bfde      	ittt	le
 800a704:	2330      	movle	r3, #48	; 0x30
 800a706:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a70a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a70e:	ebac 0305 	sub.w	r3, ip, r5
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	f8cd 8000 	str.w	r8, [sp]
 800a718:	463b      	mov	r3, r7
 800a71a:	aa03      	add	r2, sp, #12
 800a71c:	4621      	mov	r1, r4
 800a71e:	4630      	mov	r0, r6
 800a720:	f7ff fef6 	bl	800a510 <_printf_common>
 800a724:	3001      	adds	r0, #1
 800a726:	d14d      	bne.n	800a7c4 <_printf_i+0x1c8>
 800a728:	f04f 30ff 	mov.w	r0, #4294967295
 800a72c:	b005      	add	sp, #20
 800a72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a732:	4839      	ldr	r0, [pc, #228]	; (800a818 <_printf_i+0x21c>)
 800a734:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a738:	6813      	ldr	r3, [r2, #0]
 800a73a:	6821      	ldr	r1, [r4, #0]
 800a73c:	1d1d      	adds	r5, r3, #4
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6015      	str	r5, [r2, #0]
 800a742:	060a      	lsls	r2, r1, #24
 800a744:	d50b      	bpl.n	800a75e <_printf_i+0x162>
 800a746:	07ca      	lsls	r2, r1, #31
 800a748:	bf44      	itt	mi
 800a74a:	f041 0120 	orrmi.w	r1, r1, #32
 800a74e:	6021      	strmi	r1, [r4, #0]
 800a750:	b91b      	cbnz	r3, 800a75a <_printf_i+0x15e>
 800a752:	6822      	ldr	r2, [r4, #0]
 800a754:	f022 0220 	bic.w	r2, r2, #32
 800a758:	6022      	str	r2, [r4, #0]
 800a75a:	2210      	movs	r2, #16
 800a75c:	e7b7      	b.n	800a6ce <_printf_i+0xd2>
 800a75e:	064d      	lsls	r5, r1, #25
 800a760:	bf48      	it	mi
 800a762:	b29b      	uxthmi	r3, r3
 800a764:	e7ef      	b.n	800a746 <_printf_i+0x14a>
 800a766:	4665      	mov	r5, ip
 800a768:	fbb3 f1f2 	udiv	r1, r3, r2
 800a76c:	fb02 3311 	mls	r3, r2, r1, r3
 800a770:	5cc3      	ldrb	r3, [r0, r3]
 800a772:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a776:	460b      	mov	r3, r1
 800a778:	2900      	cmp	r1, #0
 800a77a:	d1f5      	bne.n	800a768 <_printf_i+0x16c>
 800a77c:	e7b9      	b.n	800a6f2 <_printf_i+0xf6>
 800a77e:	6813      	ldr	r3, [r2, #0]
 800a780:	6825      	ldr	r5, [r4, #0]
 800a782:	6961      	ldr	r1, [r4, #20]
 800a784:	1d18      	adds	r0, r3, #4
 800a786:	6010      	str	r0, [r2, #0]
 800a788:	0628      	lsls	r0, r5, #24
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	d501      	bpl.n	800a792 <_printf_i+0x196>
 800a78e:	6019      	str	r1, [r3, #0]
 800a790:	e002      	b.n	800a798 <_printf_i+0x19c>
 800a792:	066a      	lsls	r2, r5, #25
 800a794:	d5fb      	bpl.n	800a78e <_printf_i+0x192>
 800a796:	8019      	strh	r1, [r3, #0]
 800a798:	2300      	movs	r3, #0
 800a79a:	6123      	str	r3, [r4, #16]
 800a79c:	4665      	mov	r5, ip
 800a79e:	e7b9      	b.n	800a714 <_printf_i+0x118>
 800a7a0:	6813      	ldr	r3, [r2, #0]
 800a7a2:	1d19      	adds	r1, r3, #4
 800a7a4:	6011      	str	r1, [r2, #0]
 800a7a6:	681d      	ldr	r5, [r3, #0]
 800a7a8:	6862      	ldr	r2, [r4, #4]
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f7f5 fd17 	bl	80001e0 <memchr>
 800a7b2:	b108      	cbz	r0, 800a7b8 <_printf_i+0x1bc>
 800a7b4:	1b40      	subs	r0, r0, r5
 800a7b6:	6060      	str	r0, [r4, #4]
 800a7b8:	6863      	ldr	r3, [r4, #4]
 800a7ba:	6123      	str	r3, [r4, #16]
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7c2:	e7a7      	b.n	800a714 <_printf_i+0x118>
 800a7c4:	6923      	ldr	r3, [r4, #16]
 800a7c6:	462a      	mov	r2, r5
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	47c0      	blx	r8
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	d0aa      	beq.n	800a728 <_printf_i+0x12c>
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	079b      	lsls	r3, r3, #30
 800a7d6:	d413      	bmi.n	800a800 <_printf_i+0x204>
 800a7d8:	68e0      	ldr	r0, [r4, #12]
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	4298      	cmp	r0, r3
 800a7de:	bfb8      	it	lt
 800a7e0:	4618      	movlt	r0, r3
 800a7e2:	e7a3      	b.n	800a72c <_printf_i+0x130>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	464a      	mov	r2, r9
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	47c0      	blx	r8
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	d09a      	beq.n	800a728 <_printf_i+0x12c>
 800a7f2:	3501      	adds	r5, #1
 800a7f4:	68e3      	ldr	r3, [r4, #12]
 800a7f6:	9a03      	ldr	r2, [sp, #12]
 800a7f8:	1a9b      	subs	r3, r3, r2
 800a7fa:	42ab      	cmp	r3, r5
 800a7fc:	dcf2      	bgt.n	800a7e4 <_printf_i+0x1e8>
 800a7fe:	e7eb      	b.n	800a7d8 <_printf_i+0x1dc>
 800a800:	2500      	movs	r5, #0
 800a802:	f104 0919 	add.w	r9, r4, #25
 800a806:	e7f5      	b.n	800a7f4 <_printf_i+0x1f8>
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1ac      	bne.n	800a766 <_printf_i+0x16a>
 800a80c:	7803      	ldrb	r3, [r0, #0]
 800a80e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a812:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a816:	e76c      	b.n	800a6f2 <_printf_i+0xf6>
 800a818:	0800ab85 	.word	0x0800ab85
 800a81c:	0800ab96 	.word	0x0800ab96

0800a820 <__sread>:
 800a820:	b510      	push	{r4, lr}
 800a822:	460c      	mov	r4, r1
 800a824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a828:	f000 f894 	bl	800a954 <_read_r>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	bfab      	itete	ge
 800a830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a832:	89a3      	ldrhlt	r3, [r4, #12]
 800a834:	181b      	addge	r3, r3, r0
 800a836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a83a:	bfac      	ite	ge
 800a83c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a83e:	81a3      	strhlt	r3, [r4, #12]
 800a840:	bd10      	pop	{r4, pc}

0800a842 <__swrite>:
 800a842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a846:	461f      	mov	r7, r3
 800a848:	898b      	ldrh	r3, [r1, #12]
 800a84a:	05db      	lsls	r3, r3, #23
 800a84c:	4605      	mov	r5, r0
 800a84e:	460c      	mov	r4, r1
 800a850:	4616      	mov	r6, r2
 800a852:	d505      	bpl.n	800a860 <__swrite+0x1e>
 800a854:	2302      	movs	r3, #2
 800a856:	2200      	movs	r2, #0
 800a858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a85c:	f000 f868 	bl	800a930 <_lseek_r>
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a86a:	81a3      	strh	r3, [r4, #12]
 800a86c:	4632      	mov	r2, r6
 800a86e:	463b      	mov	r3, r7
 800a870:	4628      	mov	r0, r5
 800a872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a876:	f000 b817 	b.w	800a8a8 <_write_r>

0800a87a <__sseek>:
 800a87a:	b510      	push	{r4, lr}
 800a87c:	460c      	mov	r4, r1
 800a87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a882:	f000 f855 	bl	800a930 <_lseek_r>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	bf15      	itete	ne
 800a88c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a88e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a896:	81a3      	strheq	r3, [r4, #12]
 800a898:	bf18      	it	ne
 800a89a:	81a3      	strhne	r3, [r4, #12]
 800a89c:	bd10      	pop	{r4, pc}

0800a89e <__sclose>:
 800a89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a2:	f000 b813 	b.w	800a8cc <_close_r>
	...

0800a8a8 <_write_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4c07      	ldr	r4, [pc, #28]	; (800a8c8 <_write_r+0x20>)
 800a8ac:	4605      	mov	r5, r0
 800a8ae:	4608      	mov	r0, r1
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	6022      	str	r2, [r4, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f7fd fbe2 	bl	8008080 <_write>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d102      	bne.n	800a8c6 <_write_r+0x1e>
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	b103      	cbz	r3, 800a8c6 <_write_r+0x1e>
 800a8c4:	602b      	str	r3, [r5, #0]
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	2000c2e0 	.word	0x2000c2e0

0800a8cc <_close_r>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	4c06      	ldr	r4, [pc, #24]	; (800a8e8 <_close_r+0x1c>)
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	4608      	mov	r0, r1
 800a8d6:	6023      	str	r3, [r4, #0]
 800a8d8:	f7fe fd6f 	bl	80093ba <_close>
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	d102      	bne.n	800a8e6 <_close_r+0x1a>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	b103      	cbz	r3, 800a8e6 <_close_r+0x1a>
 800a8e4:	602b      	str	r3, [r5, #0]
 800a8e6:	bd38      	pop	{r3, r4, r5, pc}
 800a8e8:	2000c2e0 	.word	0x2000c2e0

0800a8ec <_fstat_r>:
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	4c07      	ldr	r4, [pc, #28]	; (800a90c <_fstat_r+0x20>)
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	f7fe fd6a 	bl	80093d2 <_fstat>
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	d102      	bne.n	800a908 <_fstat_r+0x1c>
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	b103      	cbz	r3, 800a908 <_fstat_r+0x1c>
 800a906:	602b      	str	r3, [r5, #0]
 800a908:	bd38      	pop	{r3, r4, r5, pc}
 800a90a:	bf00      	nop
 800a90c:	2000c2e0 	.word	0x2000c2e0

0800a910 <_isatty_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4c06      	ldr	r4, [pc, #24]	; (800a92c <_isatty_r+0x1c>)
 800a914:	2300      	movs	r3, #0
 800a916:	4605      	mov	r5, r0
 800a918:	4608      	mov	r0, r1
 800a91a:	6023      	str	r3, [r4, #0]
 800a91c:	f7fe fd69 	bl	80093f2 <_isatty>
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	d102      	bne.n	800a92a <_isatty_r+0x1a>
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	b103      	cbz	r3, 800a92a <_isatty_r+0x1a>
 800a928:	602b      	str	r3, [r5, #0]
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
 800a92c:	2000c2e0 	.word	0x2000c2e0

0800a930 <_lseek_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4c07      	ldr	r4, [pc, #28]	; (800a950 <_lseek_r+0x20>)
 800a934:	4605      	mov	r5, r0
 800a936:	4608      	mov	r0, r1
 800a938:	4611      	mov	r1, r2
 800a93a:	2200      	movs	r2, #0
 800a93c:	6022      	str	r2, [r4, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	f7fe fd62 	bl	8009408 <_lseek>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_lseek_r+0x1e>
 800a948:	6823      	ldr	r3, [r4, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_lseek_r+0x1e>
 800a94c:	602b      	str	r3, [r5, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	2000c2e0 	.word	0x2000c2e0

0800a954 <_read_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4c07      	ldr	r4, [pc, #28]	; (800a974 <_read_r+0x20>)
 800a958:	4605      	mov	r5, r0
 800a95a:	4608      	mov	r0, r1
 800a95c:	4611      	mov	r1, r2
 800a95e:	2200      	movs	r2, #0
 800a960:	6022      	str	r2, [r4, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	f7fe fd0c 	bl	8009380 <_read>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_read_r+0x1e>
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_read_r+0x1e>
 800a970:	602b      	str	r3, [r5, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	2000c2e0 	.word	0x2000c2e0

0800a978 <_init>:
 800a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97a:	bf00      	nop
 800a97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97e:	bc08      	pop	{r3}
 800a980:	469e      	mov	lr, r3
 800a982:	4770      	bx	lr

0800a984 <_fini>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	bf00      	nop
 800a988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98a:	bc08      	pop	{r3}
 800a98c:	469e      	mov	lr, r3
 800a98e:	4770      	bx	lr
