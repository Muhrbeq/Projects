
4GLL_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa40  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800fbd4  0800fbd4  0001fbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe94  0800fe94  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800fe94  0800fe94  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fe94  0800fe94  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe94  0800fe94  0001fe94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe98  0800fe98  0001fe98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800fe9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c8dc  200001e0  0801007c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cabc  0801007c  0002cabc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040e60  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b49  00000000  00000000  00061070  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002b48  00000000  00000000  00068bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002770  00000000  00000000  0006b708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000342bd  00000000  00000000  0006de78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030922  00000000  00000000  000a2135  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010d8e2  00000000  00000000  000d2a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0339  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b734  00000000  00000000  001e03b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001e0 	.word	0x200001e0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800fbbc 	.word	0x0800fbbc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001e4 	.word	0x200001e4
 80001d0:	0800fbbc 	.word	0x0800fbbc

080001d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001da:	2300      	movs	r3, #0
 80001dc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001de:	2003      	movs	r0, #3
 80001e0:	f001 fae6 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 f80d 	bl	8000204 <HAL_InitTick>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d002      	beq.n	80001f6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
 80001f4:	e001      	b.n	80001fa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001f6:	f00d ff99 	bl	800e12c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001fa:	79fb      	ldrb	r3, [r7, #7]
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800020c:	2300      	movs	r3, #0
 800020e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <HAL_InitTick+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d023      	beq.n	8000260 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000218:	4b16      	ldr	r3, [pc, #88]	; (8000274 <HAL_InitTick+0x70>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <HAL_InitTick+0x6c>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000226:	fbb3 f3f1 	udiv	r3, r3, r1
 800022a:	fbb2 f3f3 	udiv	r3, r2, r3
 800022e:	4618      	mov	r0, r3
 8000230:	f001 faf3 	bl	800181a <HAL_SYSTICK_Config>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d10f      	bne.n	800025a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b0f      	cmp	r3, #15
 800023e:	d809      	bhi.n	8000254 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000240:	2200      	movs	r2, #0
 8000242:	6879      	ldr	r1, [r7, #4]
 8000244:	f04f 30ff 	mov.w	r0, #4294967295
 8000248:	f001 fabd 	bl	80017c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800024c:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <HAL_InitTick+0x74>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	6013      	str	r3, [r2, #0]
 8000252:	e007      	b.n	8000264 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
 8000258:	e004      	b.n	8000264 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800025a:	2301      	movs	r3, #1
 800025c:	73fb      	strb	r3, [r7, #15]
 800025e:	e001      	b.n	8000264 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000260:	2301      	movs	r3, #1
 8000262:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000264:	7bfb      	ldrb	r3, [r7, #15]
}
 8000266:	4618      	mov	r0, r3
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000004 	.word	0x20000004
 8000274:	20000118 	.word	0x20000118
 8000278:	20000000 	.word	0x20000000

0800027c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <HAL_IncTick+0x20>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	461a      	mov	r2, r3
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_IncTick+0x24>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4413      	add	r3, r2
 800028c:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <HAL_IncTick+0x24>)
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000004 	.word	0x20000004
 80002a0:	2000031c 	.word	0x2000031c

080002a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  return uwTick;
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <HAL_GetTick+0x14>)
 80002aa:	681b      	ldr	r3, [r3, #0]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	2000031c 	.word	0x2000031c

080002bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002c4:	f7ff ffee 	bl	80002a4 <HAL_GetTick>
 80002c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002d4:	d005      	beq.n	80002e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <HAL_Delay+0x40>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	461a      	mov	r2, r3
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	4413      	add	r3, r2
 80002e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002e2:	bf00      	nop
 80002e4:	f7ff ffde 	bl	80002a4 <HAL_GetTick>
 80002e8:	4602      	mov	r2, r0
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	1ad3      	subs	r3, r2, r3
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d8f7      	bhi.n	80002e4 <HAL_Delay+0x28>
  {
  }
}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000004 	.word	0x20000004

08000300 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	431a      	orrs	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	609a      	str	r2, [r3, #8]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000326:	b480      	push	{r7}
 8000328:	b083      	sub	sp, #12
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	609a      	str	r2, [r3, #8]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800035c:	4618      	mov	r0, r3
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000368:	b480      	push	{r7}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
 8000374:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	3360      	adds	r3, #96	; 0x60
 800037a:	461a      	mov	r2, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	4413      	add	r3, r2
 8000382:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <LL_ADC_SetOffset+0x44>)
 800038a:	4013      	ands	r3, r2
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	430a      	orrs	r2, r1
 8000396:	4313      	orrs	r3, r2
 8000398:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003a0:	bf00      	nop
 80003a2:	371c      	adds	r7, #28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	03fff000 	.word	0x03fff000

080003b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	3360      	adds	r3, #96	; 0x60
 80003be:	461a      	mov	r2, r3
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	4413      	add	r3, r2
 80003c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80003dc:	b480      	push	{r7}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	3360      	adds	r3, #96	; 0x60
 80003ec:	461a      	mov	r2, r3
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	4413      	add	r3, r2
 80003f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	431a      	orrs	r2, r3
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000406:	bf00      	nop
 8000408:	371c      	adds	r7, #28
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	431a      	orrs	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	615a      	str	r2, [r3, #20]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000448:	2b00      	cmp	r3, #0
 800044a:	d101      	bne.n	8000450 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800044c:	2301      	movs	r3, #1
 800044e:	e000      	b.n	8000452 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800045e:	b480      	push	{r7}
 8000460:	b087      	sub	sp, #28
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	3330      	adds	r3, #48	; 0x30
 800046e:	461a      	mov	r2, r3
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	0a1b      	lsrs	r3, r3, #8
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	f003 030c 	and.w	r3, r3, #12
 800047a:	4413      	add	r3, r2
 800047c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	f003 031f 	and.w	r3, r3, #31
 8000488:	211f      	movs	r1, #31
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	43db      	mvns	r3, r3
 8000490:	401a      	ands	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	0e9b      	lsrs	r3, r3, #26
 8000496:	f003 011f 	and.w	r1, r3, #31
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	f003 031f 	and.w	r3, r3, #31
 80004a0:	fa01 f303 	lsl.w	r3, r1, r3
 80004a4:	431a      	orrs	r2, r3
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80004aa:	bf00      	nop
 80004ac:	371c      	adds	r7, #28
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b087      	sub	sp, #28
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	60f8      	str	r0, [r7, #12]
 80004be:	60b9      	str	r1, [r7, #8]
 80004c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	3314      	adds	r3, #20
 80004c6:	461a      	mov	r2, r3
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	0e5b      	lsrs	r3, r3, #25
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	f003 0304 	and.w	r3, r3, #4
 80004d2:	4413      	add	r3, r2
 80004d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	0d1b      	lsrs	r3, r3, #20
 80004de:	f003 031f 	and.w	r3, r3, #31
 80004e2:	2107      	movs	r1, #7
 80004e4:	fa01 f303 	lsl.w	r3, r1, r3
 80004e8:	43db      	mvns	r3, r3
 80004ea:	401a      	ands	r2, r3
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	0d1b      	lsrs	r3, r3, #20
 80004f0:	f003 031f 	and.w	r3, r3, #31
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	431a      	orrs	r2, r3
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000500:	bf00      	nop
 8000502:	371c      	adds	r7, #28
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000524:	43db      	mvns	r3, r3
 8000526:	401a      	ands	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f003 0318 	and.w	r3, r3, #24
 800052e:	4908      	ldr	r1, [pc, #32]	; (8000550 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000530:	40d9      	lsrs	r1, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	400b      	ands	r3, r1
 8000536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800053a:	431a      	orrs	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	0007ffff 	.word	0x0007ffff

08000554 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000564:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	6093      	str	r3, [r2, #8]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800058c:	d101      	bne.n	8000592 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800058e:	2301      	movs	r3, #1
 8000590:	e000      	b.n	8000594 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80005b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80005dc:	d101      	bne.n	80005e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80005de:	2301      	movs	r3, #1
 80005e0:	e000      	b.n	80005e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000604:	f043 0201 	orr.w	r2, r3, #1
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000628:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800062c:	f043 0202 	orr.w	r2, r3, #2
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b01      	cmp	r3, #1
 8000652:	d101      	bne.n	8000658 <LL_ADC_IsEnabled+0x18>
 8000654:	2301      	movs	r3, #1
 8000656:	e000      	b.n	800065a <LL_ADC_IsEnabled+0x1a>
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	2b02      	cmp	r3, #2
 8000678:	d101      	bne.n	800067e <LL_ADC_IsDisableOngoing+0x18>
 800067a:	2301      	movs	r3, #1
 800067c:	e000      	b.n	8000680 <LL_ADC_IsDisableOngoing+0x1a>
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800069c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006a0:	f043 0204 	orr.w	r2, r3, #4
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	d101      	bne.n	80006cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b08      	cmp	r3, #8
 80006ec:	d101      	bne.n	80006f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80006ee:	2301      	movs	r3, #1
 80006f0:	e000      	b.n	80006f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000708:	2300      	movs	r3, #0
 800070a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d101      	bne.n	800071a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e12d      	b.n	8000976 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	691b      	ldr	r3, [r3, #16]
 800071e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000724:	2b00      	cmp	r3, #0
 8000726:	d109      	bne.n	800073c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f00c fd63 	bl	800d1f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2200      	movs	r2, #0
 8000732:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff19 	bl	8000578 <LL_ADC_IsDeepPowerDownEnabled>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d004      	beq.n	8000756 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff feff 	bl	8000554 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff34 	bl	80005c8 <LL_ADC_IsInternalRegulatorEnabled>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d113      	bne.n	800078e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff18 	bl	80005a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000770:	4b83      	ldr	r3, [pc, #524]	; (8000980 <HAL_ADC_Init+0x280>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	099b      	lsrs	r3, r3, #6
 8000776:	4a83      	ldr	r2, [pc, #524]	; (8000984 <HAL_ADC_Init+0x284>)
 8000778:	fba2 2303 	umull	r2, r3, r2, r3
 800077c:	099b      	lsrs	r3, r3, #6
 800077e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000780:	e002      	b.n	8000788 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	3b01      	subs	r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f9      	bne.n	8000782 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff18 	bl	80005c8 <LL_ADC_IsInternalRegulatorEnabled>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10d      	bne.n	80007ba <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	f043 0210 	orr.w	r2, r3, #16
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007ae:	f043 0201 	orr.w	r2, r3, #1
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff78 	bl	80006b4 <LL_ADC_REG_IsConversionOngoing>
 80007c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	f040 80c8 	bne.w	8000964 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f040 80c4 	bne.w	8000964 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80007e4:	f043 0202 	orr.w	r2, r3, #2
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff25 	bl	8000640 <LL_ADC_IsEnabled>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10b      	bne.n	8000814 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007fc:	4862      	ldr	r0, [pc, #392]	; (8000988 <HAL_ADC_Init+0x288>)
 80007fe:	f7ff ff1f 	bl	8000640 <LL_ADC_IsEnabled>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d105      	bne.n	8000814 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	4619      	mov	r1, r3
 800080e:	485f      	ldr	r0, [pc, #380]	; (800098c <HAL_ADC_Init+0x28c>)
 8000810:	f7ff fd76 	bl	8000300 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7e5b      	ldrb	r3, [r3, #25]
 8000818:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800081e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000824:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800082a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000832:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000834:	4313      	orrs	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d106      	bne.n	8000850 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	3b01      	subs	r3, #1
 8000848:	045b      	lsls	r3, r3, #17
 800084a:	69ba      	ldr	r2, [r7, #24]
 800084c:	4313      	orrs	r3, r2
 800084e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000854:	2b00      	cmp	r3, #0
 8000856:	d009      	beq.n	800086c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000864:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000866:	69ba      	ldr	r2, [r7, #24]
 8000868:	4313      	orrs	r3, r2
 800086a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	68da      	ldr	r2, [r3, #12]
 8000872:	4b47      	ldr	r3, [pc, #284]	; (8000990 <HAL_ADC_Init+0x290>)
 8000874:	4013      	ands	r3, r2
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	6812      	ldr	r2, [r2, #0]
 800087a:	69b9      	ldr	r1, [r7, #24]
 800087c:	430b      	orrs	r3, r1
 800087e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff15 	bl	80006b4 <LL_ADC_REG_IsConversionOngoing>
 800088a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff22 	bl	80006da <LL_ADC_INJ_IsConversionOngoing>
 8000896:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d140      	bne.n	8000920 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d13d      	bne.n	8000920 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7e1b      	ldrb	r3, [r3, #24]
 80008ac:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008ae:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80008b6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008b8:	4313      	orrs	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008c6:	f023 0306 	bic.w	r3, r3, #6
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	6812      	ldr	r2, [r2, #0]
 80008ce:	69b9      	ldr	r1, [r7, #24]
 80008d0:	430b      	orrs	r3, r1
 80008d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d118      	bne.n	8000910 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80008e8:	f023 0304 	bic.w	r3, r3, #4
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80008f4:	4311      	orrs	r1, r2
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80008fa:	4311      	orrs	r1, r2
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000900:	430a      	orrs	r2, r1
 8000902:	431a      	orrs	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f042 0201 	orr.w	r2, r2, #1
 800090c:	611a      	str	r2, [r3, #16]
 800090e:	e007      	b.n	8000920 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	691a      	ldr	r2, [r3, #16]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f022 0201 	bic.w	r2, r2, #1
 800091e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10c      	bne.n	8000942 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f023 010f 	bic.w	r1, r3, #15
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	1e5a      	subs	r2, r3, #1
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	430a      	orrs	r2, r1
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
 8000940:	e007      	b.n	8000952 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f022 020f 	bic.w	r2, r2, #15
 8000950:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	f023 0303 	bic.w	r3, r3, #3
 800095a:	f043 0201 	orr.w	r2, r3, #1
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	659a      	str	r2, [r3, #88]	; 0x58
 8000962:	e007      	b.n	8000974 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000968:	f043 0210 	orr.w	r2, r3, #16
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000974:	7ffb      	ldrb	r3, [r7, #31]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000118 	.word	0x20000118
 8000984:	053e2d63 	.word	0x053e2d63
 8000988:	50040000 	.word	0x50040000
 800098c:	50040300 	.word	0x50040300
 8000990:	fff0c007 	.word	0xfff0c007

08000994 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fe87 	bl	80006b4 <LL_ADC_REG_IsConversionOngoing>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d14f      	bne.n	8000a4c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d101      	bne.n	80009ba <HAL_ADC_Start+0x26>
 80009b6:	2302      	movs	r3, #2
 80009b8:	e04b      	b.n	8000a52 <HAL_ADC_Start+0xbe>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2201      	movs	r2, #1
 80009be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 fce4 	bl	8001390 <ADC_Enable>
 80009c8:	4603      	mov	r3, r0
 80009ca:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d137      	bne.n	8000a42 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009f2:	d106      	bne.n	8000a02 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f8:	f023 0206 	bic.w	r2, r3, #6
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a00:	e002      	b.n	8000a08 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	221c      	movs	r2, #28
 8000a0e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d007      	beq.n	8000a36 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fe26 	bl	800068c <LL_ADC_REG_StartConversion>
 8000a40:	e006      	b.n	8000a50 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000a4a:	e001      	b.n	8000a50 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	2b08      	cmp	r3, #8
 8000a6a:	d102      	bne.n	8000a72 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e010      	b.n	8000a94 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d007      	beq.n	8000a90 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a84:	f043 0220 	orr.w	r2, r3, #32
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e068      	b.n	8000b62 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000a90:	2304      	movs	r3, #4
 8000a92:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000a94:	f7ff fc06 	bl	80002a4 <HAL_GetTick>
 8000a98:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000a9a:	e01a      	b.n	8000ad2 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa2:	d016      	beq.n	8000ad2 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000aa4:	f7ff fbfe 	bl	80002a4 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d302      	bcc.n	8000aba <HAL_ADC_PollForConversion+0x60>
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10b      	bne.n	8000ad2 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	f043 0204 	orr.w	r2, r3, #4
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e047      	b.n	8000b62 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0dd      	beq.n	8000a9c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fca1 	bl	8000438 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d01c      	beq.n	8000b36 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7e5b      	ldrb	r3, [r3, #25]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d118      	bne.n	8000b36 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	d111      	bne.n	8000b36 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d105      	bne.n	8000b36 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	f043 0201 	orr.w	r2, r3, #1
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d104      	bne.n	8000b4e <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2208      	movs	r2, #8
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	e008      	b.n	8000b60 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d103      	bne.n	8000b60 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	220c      	movs	r2, #12
 8000b5e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0b6      	sub	sp, #216	; 0xd8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d101      	bne.n	8000ba6 <HAL_ADC_ConfigChannel+0x22>
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	e3d4      	b.n	8001350 <HAL_ADC_ConfigChannel+0x7cc>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fd7e 	bl	80006b4 <LL_ADC_REG_IsConversionOngoing>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 83b9 	bne.w	8001332 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b05      	cmp	r3, #5
 8000bc6:	d824      	bhi.n	8000c12 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	3b02      	subs	r3, #2
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d81b      	bhi.n	8000c0a <HAL_ADC_ConfigChannel+0x86>
 8000bd2:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <HAL_ADC_ConfigChannel+0x54>)
 8000bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd8:	08000be9 	.word	0x08000be9
 8000bdc:	08000bf1 	.word	0x08000bf1
 8000be0:	08000bf9 	.word	0x08000bf9
 8000be4:	08000c01 	.word	0x08000c01
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	220c      	movs	r2, #12
 8000bec:	605a      	str	r2, [r3, #4]
          break;
 8000bee:	e011      	b.n	8000c14 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2212      	movs	r2, #18
 8000bf4:	605a      	str	r2, [r3, #4]
          break;
 8000bf6:	e00d      	b.n	8000c14 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2218      	movs	r2, #24
 8000bfc:	605a      	str	r2, [r3, #4]
          break;
 8000bfe:	e009      	b.n	8000c14 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c06:	605a      	str	r2, [r3, #4]
          break;
 8000c08:	e004      	b.n	8000c14 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2206      	movs	r2, #6
 8000c0e:	605a      	str	r2, [r3, #4]
          break;
 8000c10:	e000      	b.n	8000c14 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000c12:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	6859      	ldr	r1, [r3, #4]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	f7ff fc1c 	bl	800045e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fd42 	bl	80006b4 <LL_ADC_REG_IsConversionOngoing>
 8000c30:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fd4e 	bl	80006da <LL_ADC_INJ_IsConversionOngoing>
 8000c3e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 81c1 	bne.w	8000fce <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f040 81bc 	bne.w	8000fce <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c5e:	d10f      	bne.n	8000c80 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f7ff fc23 	bl	80004b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fbca 	bl	8000412 <LL_ADC_SetSamplingTimeCommonConfig>
 8000c7e:	e00e      	b.n	8000c9e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f7ff fc12 	bl	80004b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fbba 	bl	8000412 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	08db      	lsrs	r3, r3, #3
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d00a      	beq.n	8000cd6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6818      	ldr	r0, [r3, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	6919      	ldr	r1, [r3, #16]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000cd0:	f7ff fb4a 	bl	8000368 <LL_ADC_SetOffset>
 8000cd4:	e17b      	b.n	8000fce <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fb67 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10a      	bne.n	8000d02 <HAL_ADC_ConfigChannel+0x17e>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fb5c 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	0e9b      	lsrs	r3, r3, #26
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	e01e      	b.n	8000d40 <HAL_ADC_ConfigChannel+0x1bc>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fb51 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000d18:	fa93 f3a3 	rbit	r3, r3
 8000d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d101      	bne.n	8000d34 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8000d30:	2320      	movs	r3, #32
 8000d32:	e004      	b.n	8000d3e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8000d34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000d38:	fab3 f383 	clz	r3, r3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <HAL_ADC_ConfigChannel+0x1d4>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	0e9b      	lsrs	r3, r3, #26
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	e018      	b.n	8000d8a <HAL_ADC_ConfigChannel+0x206>
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8000d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8000d74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d101      	bne.n	8000d80 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	e004      	b.n	8000d8a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8000d80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d84:	fab3 f383 	clz	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d106      	bne.n	8000d9c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fb20 	bl	80003dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fb04 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10a      	bne.n	8000dc8 <HAL_ADC_ConfigChannel+0x244>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2101      	movs	r1, #1
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff faf9 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	0e9b      	lsrs	r3, r3, #26
 8000dc2:	f003 021f 	and.w	r2, r3, #31
 8000dc6:	e01e      	b.n	8000e06 <HAL_ADC_ConfigChannel+0x282>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff faee 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000dde:	fa93 f3a3 	rbit	r3, r3
 8000de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8000de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8000dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8000df6:	2320      	movs	r3, #32
 8000df8:	e004      	b.n	8000e04 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8000dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000dfe:	fab3 f383 	clz	r3, r3
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d105      	bne.n	8000e1e <HAL_ADC_ConfigChannel+0x29a>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	0e9b      	lsrs	r3, r3, #26
 8000e18:	f003 031f 	and.w	r3, r3, #31
 8000e1c:	e018      	b.n	8000e50 <HAL_ADC_ConfigChannel+0x2cc>
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8000e32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8000e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8000e42:	2320      	movs	r3, #32
 8000e44:	e004      	b.n	8000e50 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8000e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e4a:	fab3 f383 	clz	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d106      	bne.n	8000e62 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fabd 	bl	80003dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2102      	movs	r1, #2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff faa1 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10a      	bne.n	8000e8e <HAL_ADC_ConfigChannel+0x30a>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fa96 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	0e9b      	lsrs	r3, r3, #26
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	e01e      	b.n	8000ecc <HAL_ADC_ConfigChannel+0x348>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2102      	movs	r1, #2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fa8b 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8000eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000eb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8000eb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8000ebc:	2320      	movs	r3, #32
 8000ebe:	e004      	b.n	8000eca <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8000ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ec4:	fab3 f383 	clz	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x360>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	0e9b      	lsrs	r3, r3, #26
 8000ede:	f003 031f 	and.w	r3, r3, #31
 8000ee2:	e016      	b.n	8000f12 <HAL_ADC_ConfigChannel+0x38e>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8000ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8000efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8000f04:	2320      	movs	r3, #32
 8000f06:	e004      	b.n	8000f12 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8000f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f0c:	fab3 f383 	clz	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d106      	bne.n	8000f24 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fa5c 	bl	80003dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2103      	movs	r1, #3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fa40 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10a      	bne.n	8000f50 <HAL_ADC_ConfigChannel+0x3cc>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2103      	movs	r1, #3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fa35 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	0e9b      	lsrs	r3, r3, #26
 8000f4a:	f003 021f 	and.w	r2, r3, #31
 8000f4e:	e017      	b.n	8000f80 <HAL_ADC_ConfigChannel+0x3fc>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2103      	movs	r1, #3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa2a 	bl	80003b0 <LL_ADC_GetOffsetChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8000f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f6a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8000f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8000f72:	2320      	movs	r3, #32
 8000f74:	e003      	b.n	8000f7e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8000f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d105      	bne.n	8000f98 <HAL_ADC_ConfigChannel+0x414>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0e9b      	lsrs	r3, r3, #26
 8000f92:	f003 031f 	and.w	r3, r3, #31
 8000f96:	e011      	b.n	8000fbc <HAL_ADC_ConfigChannel+0x438>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fa0:	fa93 f3a3 	rbit	r3, r3
 8000fa4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8000faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	e003      	b.n	8000fbc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8000fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d106      	bne.n	8000fce <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fa07 	bl	80003dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fb34 	bl	8000640 <LL_ADC_IsEnabled>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f040 8140 	bne.w	8001260 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	6819      	ldr	r1, [r3, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	461a      	mov	r2, r3
 8000fee:	f7ff fa8d 	bl	800050c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	4a8f      	ldr	r2, [pc, #572]	; (8001234 <HAL_ADC_ConfigChannel+0x6b0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	f040 8131 	bne.w	8001260 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10b      	bne.n	8001026 <HAL_ADC_ConfigChannel+0x4a2>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	0e9b      	lsrs	r3, r3, #26
 8001014:	3301      	adds	r3, #1
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	2b09      	cmp	r3, #9
 800101c:	bf94      	ite	ls
 800101e:	2301      	movls	r3, #1
 8001020:	2300      	movhi	r3, #0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	e019      	b.n	800105a <HAL_ADC_ConfigChannel+0x4d6>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001036:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800103e:	2320      	movs	r3, #32
 8001040:	e003      	b.n	800104a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001044:	fab3 f383 	clz	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	3301      	adds	r3, #1
 800104c:	f003 031f 	and.w	r3, r3, #31
 8001050:	2b09      	cmp	r3, #9
 8001052:	bf94      	ite	ls
 8001054:	2301      	movls	r3, #1
 8001056:	2300      	movhi	r3, #0
 8001058:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800105a:	2b00      	cmp	r3, #0
 800105c:	d079      	beq.n	8001152 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001066:	2b00      	cmp	r3, #0
 8001068:	d107      	bne.n	800107a <HAL_ADC_ConfigChannel+0x4f6>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	0e9b      	lsrs	r3, r3, #26
 8001070:	3301      	adds	r3, #1
 8001072:	069b      	lsls	r3, r3, #26
 8001074:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001078:	e015      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x522>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800108a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800108c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001092:	2320      	movs	r3, #32
 8001094:	e003      	b.n	800109e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	069b      	lsls	r3, r3, #26
 80010a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x542>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	0e9b      	lsrs	r3, r3, #26
 80010b8:	3301      	adds	r3, #1
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	e017      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x572>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80010d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80010d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80010de:	2320      	movs	r3, #32
 80010e0:	e003      	b.n	80010ea <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80010e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e4:	fab3 f383 	clz	r3, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	3301      	adds	r3, #1
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	ea42 0103 	orr.w	r1, r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10a      	bne.n	800111c <HAL_ADC_ConfigChannel+0x598>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	0e9b      	lsrs	r3, r3, #26
 800110c:	3301      	adds	r3, #1
 800110e:	f003 021f 	and.w	r2, r3, #31
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	051b      	lsls	r3, r3, #20
 800111a:	e018      	b.n	800114e <HAL_ADC_ConfigChannel+0x5ca>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001124:	fa93 f3a3 	rbit	r3, r3
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800112e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001134:	2320      	movs	r3, #32
 8001136:	e003      	b.n	8001140 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800113a:	fab3 f383 	clz	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	3301      	adds	r3, #1
 8001142:	f003 021f 	and.w	r2, r3, #31
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800114e:	430b      	orrs	r3, r1
 8001150:	e081      	b.n	8001256 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800115a:	2b00      	cmp	r3, #0
 800115c:	d107      	bne.n	800116e <HAL_ADC_ConfigChannel+0x5ea>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0e9b      	lsrs	r3, r3, #26
 8001164:	3301      	adds	r3, #1
 8001166:	069b      	lsls	r3, r3, #26
 8001168:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800116c:	e015      	b.n	800119a <HAL_ADC_ConfigChannel+0x616>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001186:	2320      	movs	r3, #32
 8001188:	e003      	b.n	8001192 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800118a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118c:	fab3 f383 	clz	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	3301      	adds	r3, #1
 8001194:	069b      	lsls	r3, r3, #26
 8001196:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d109      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x636>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	0e9b      	lsrs	r3, r3, #26
 80011ac:	3301      	adds	r3, #1
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	2101      	movs	r1, #1
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	e017      	b.n	80011ea <HAL_ADC_ConfigChannel+0x666>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	61fb      	str	r3, [r7, #28]
  return result;
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80011d2:	2320      	movs	r3, #32
 80011d4:	e003      	b.n	80011de <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	ea42 0103 	orr.w	r1, r2, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <HAL_ADC_ConfigChannel+0x692>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	0e9b      	lsrs	r3, r3, #26
 8001200:	3301      	adds	r3, #1
 8001202:	f003 021f 	and.w	r2, r3, #31
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	3b1e      	subs	r3, #30
 800120e:	051b      	lsls	r3, r3, #20
 8001210:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001214:	e01e      	b.n	8001254 <HAL_ADC_ConfigChannel+0x6d0>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa93 f3a3 	rbit	r3, r3
 8001222:	613b      	str	r3, [r7, #16]
  return result;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d104      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800122e:	2320      	movs	r3, #32
 8001230:	e006      	b.n	8001240 <HAL_ADC_ConfigChannel+0x6bc>
 8001232:	bf00      	nop
 8001234:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	3301      	adds	r3, #1
 8001242:	f003 021f 	and.w	r2, r3, #31
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	3b1e      	subs	r3, #30
 800124e:	051b      	lsls	r3, r3, #20
 8001250:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001254:	430b      	orrs	r3, r1
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	6892      	ldr	r2, [r2, #8]
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff f92b 	bl	80004b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <HAL_ADC_ConfigChannel+0x7d4>)
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d06b      	beq.n	8001344 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800126c:	483b      	ldr	r0, [pc, #236]	; (800135c <HAL_ADC_ConfigChannel+0x7d8>)
 800126e:	f7ff f86d 	bl	800034c <LL_ADC_GetCommonPathInternalCh>
 8001272:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a39      	ldr	r2, [pc, #228]	; (8001360 <HAL_ADC_ConfigChannel+0x7dc>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d126      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d120      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a34      	ldr	r2, [pc, #208]	; (8001364 <HAL_ADC_ConfigChannel+0x7e0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d156      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800129a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800129e:	4619      	mov	r1, r3
 80012a0:	482e      	ldr	r0, [pc, #184]	; (800135c <HAL_ADC_ConfigChannel+0x7d8>)
 80012a2:	f7ff f840 	bl	8000326 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HAL_ADC_ConfigChannel+0x7e4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	099b      	lsrs	r3, r3, #6
 80012ac:	4a2f      	ldr	r2, [pc, #188]	; (800136c <HAL_ADC_ConfigChannel+0x7e8>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	099a      	lsrs	r2, r3, #6
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80012be:	e002      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f9      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80012cc:	e03a      	b.n	8001344 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a27      	ldr	r2, [pc, #156]	; (8001370 <HAL_ADC_ConfigChannel+0x7ec>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d113      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x77c>
 80012d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10d      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1e      	ldr	r2, [pc, #120]	; (8001364 <HAL_ADC_ConfigChannel+0x7e0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d12a      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012f6:	4619      	mov	r1, r3
 80012f8:	4818      	ldr	r0, [pc, #96]	; (800135c <HAL_ADC_ConfigChannel+0x7d8>)
 80012fa:	f7ff f814 	bl	8000326 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012fe:	e021      	b.n	8001344 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <HAL_ADC_ConfigChannel+0x7f0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d11c      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800130a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800130e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d116      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_ADC_ConfigChannel+0x7e0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d111      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001324:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001328:	4619      	mov	r1, r3
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <HAL_ADC_ConfigChannel+0x7d8>)
 800132c:	f7fe fffb 	bl	8000326 <LL_ADC_SetCommonPathInternalCh>
 8001330:	e008      	b.n	8001344 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	f043 0220 	orr.w	r2, r3, #32
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800134c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001350:	4618      	mov	r0, r3
 8001352:	37d8      	adds	r7, #216	; 0xd8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	80080000 	.word	0x80080000
 800135c:	50040300 	.word	0x50040300
 8001360:	c7520000 	.word	0xc7520000
 8001364:	50040000 	.word	0x50040000
 8001368:	20000118 	.word	0x20000118
 800136c:	053e2d63 	.word	0x053e2d63
 8001370:	cb840000 	.word	0xcb840000
 8001374:	80000001 	.word	0x80000001

08001378 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f94f 	bl	8000640 <LL_ADC_IsEnabled>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d146      	bne.n	8001436 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <ADC_Enable+0xb0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00d      	beq.n	80013d2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f043 0210 	orr.w	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e032      	b.n	8001438 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f90a 	bl	80005f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80013dc:	f7fe ff62 	bl	80002a4 <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013e2:	e021      	b.n	8001428 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f929 	bl	8000640 <LL_ADC_IsEnabled>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d104      	bne.n	80013fe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8f9 	bl	80005f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013fe:	f7fe ff51 	bl	80002a4 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d90d      	bls.n	8001428 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001410:	f043 0210 	orr.w	r2, r3, #16
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e007      	b.n	8001438 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	d1d6      	bne.n	80013e4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	8000003f 	.word	0x8000003f

08001444 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f908 	bl	8000666 <LL_ADC_IsDisableOngoing>
 8001456:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f8ef 	bl	8000640 <LL_ADC_IsEnabled>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d040      	beq.n	80014ea <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d13d      	bne.n	80014ea <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 030d 	and.w	r3, r3, #13
 8001478:	2b01      	cmp	r3, #1
 800147a:	d10c      	bne.n	8001496 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f8c9 	bl	8000618 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2203      	movs	r2, #3
 800148c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800148e:	f7fe ff09 	bl	80002a4 <HAL_GetTick>
 8001492:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001494:	e022      	b.n	80014dc <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	f043 0210 	orr.w	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	f043 0201 	orr.w	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e01c      	b.n	80014ec <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014b2:	f7fe fef7 	bl	80002a4 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d90d      	bls.n	80014dc <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c4:	f043 0210 	orr.w	r2, r3, #16
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	f043 0201 	orr.w	r2, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e007      	b.n	80014ec <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1e3      	bne.n	80014b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <LL_ADC_StartCalibration>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001506:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001510:	4313      	orrs	r3, r2
 8001512:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	609a      	str	r2, [r3, #8]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <LL_ADC_IsCalibrationOnGoing>:
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800153a:	d101      	bne.n	8001540 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_ADCEx_Calibration_Start+0x1c>
 8001566:	2302      	movs	r3, #2
 8001568:	e04d      	b.n	8001606 <HAL_ADCEx_Calibration_Start+0xb8>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ff66 	bl	8001444 <ADC_Disable>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d136      	bne.n	80015f0 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800158a:	f023 0302 	bic.w	r3, r3, #2
 800158e:	f043 0202 	orr.w	r2, r3, #2
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ffa9 	bl	80014f4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80015a2:	e014      	b.n	80015ce <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	3301      	adds	r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80015b0:	d30d      	bcc.n	80015ce <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f023 0312 	bic.w	r3, r3, #18
 80015ba:	f043 0210 	orr.w	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e01b      	b.n	8001606 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ffa7 	bl	8001526 <LL_ADC_IsCalibrationOnGoing>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1e2      	bne.n	80015a4 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	f023 0303 	bic.w	r3, r3, #3
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	659a      	str	r2, [r3, #88]	; 0x58
 80015ee:	e005      	b.n	80015fc <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	f043 0210 	orr.w	r2, r3, #16
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db0b      	blt.n	800169e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	4907      	ldr	r1, [pc, #28]	; (80016ac <__NVIC_EnableIRQ+0x38>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2001      	movs	r0, #1
 8001696:	fa00 f202 	lsl.w	r2, r0, r2
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db0a      	blt.n	80016da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	490c      	ldr	r1, [pc, #48]	; (80016fc <__NVIC_SetPriority+0x4c>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	440b      	add	r3, r1
 80016d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d8:	e00a      	b.n	80016f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <__NVIC_SetPriority+0x50>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3b04      	subs	r3, #4
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	761a      	strb	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f1c3 0307 	rsb	r3, r3, #7
 800171e:	2b04      	cmp	r3, #4
 8001720:	bf28      	it	cs
 8001722:	2304      	movcs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3304      	adds	r3, #4
 800172a:	2b06      	cmp	r3, #6
 800172c:	d902      	bls.n	8001734 <NVIC_EncodePriority+0x30>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b03      	subs	r3, #3
 8001732:	e000      	b.n	8001736 <NVIC_EncodePriority+0x32>
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	401a      	ands	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174c:	f04f 31ff 	mov.w	r1, #4294967295
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43d9      	mvns	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	4313      	orrs	r3, r2
         );
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f7ff ff8e 	bl	80016b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff29 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017d8:	f7ff ff3e 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7ff ff8e 	bl	8001704 <NVIC_EncodePriority>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff5d 	bl	80016b0 <__NVIC_SetPriority>
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff31 	bl	8001674 <__NVIC_EnableIRQ>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffa2 	bl	800176c <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e054      	b.n	80018f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7f5b      	ldrb	r3, [r3, #29]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d105      	bne.n	800185c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f00b fdc0 	bl	800d3dc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	791b      	ldrb	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_CRC_Init+0xc4>)
 8001870:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0218 	bic.w	r2, r2, #24
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	e00c      	b.n	800189e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6899      	ldr	r1, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	461a      	mov	r2, r3
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f834 	bl	80018fc <HAL_CRCEx_Polynomial_Set>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e028      	b.n	80018f0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	795b      	ldrb	r3, [r3, #5]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d105      	bne.n	80018b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f04f 32ff 	mov.w	r2, #4294967295
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	e004      	b.n	80018bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6912      	ldr	r2, [r2, #16]
 80018ba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699a      	ldr	r2, [r3, #24]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	04c11db7 	.word	0x04c11db7

080018fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800190c:	231f      	movs	r3, #31
 800190e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001910:	bf00      	nop
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	613a      	str	r2, [r7, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d009      	beq.n	8001930 <HAL_CRCEx_Polynomial_Set+0x34>
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b18      	cmp	r3, #24
 8001934:	d846      	bhi.n	80019c4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	080019cb 	.word	0x080019cb
 8001940:	080019c5 	.word	0x080019c5
 8001944:	080019c5 	.word	0x080019c5
 8001948:	080019c5 	.word	0x080019c5
 800194c:	080019c5 	.word	0x080019c5
 8001950:	080019c5 	.word	0x080019c5
 8001954:	080019c5 	.word	0x080019c5
 8001958:	080019c5 	.word	0x080019c5
 800195c:	080019b9 	.word	0x080019b9
 8001960:	080019c5 	.word	0x080019c5
 8001964:	080019c5 	.word	0x080019c5
 8001968:	080019c5 	.word	0x080019c5
 800196c:	080019c5 	.word	0x080019c5
 8001970:	080019c5 	.word	0x080019c5
 8001974:	080019c5 	.word	0x080019c5
 8001978:	080019c5 	.word	0x080019c5
 800197c:	080019ad 	.word	0x080019ad
 8001980:	080019c5 	.word	0x080019c5
 8001984:	080019c5 	.word	0x080019c5
 8001988:	080019c5 	.word	0x080019c5
 800198c:	080019c5 	.word	0x080019c5
 8001990:	080019c5 	.word	0x080019c5
 8001994:	080019c5 	.word	0x080019c5
 8001998:	080019c5 	.word	0x080019c5
 800199c:	080019a1 	.word	0x080019a1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d913      	bls.n	80019ce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80019aa:	e010      	b.n	80019ce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	d90f      	bls.n	80019d2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80019b6:	e00c      	b.n	80019d2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	d90b      	bls.n	80019d6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80019c2:	e008      	b.n	80019d6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	75fb      	strb	r3, [r7, #23]
      break;
 80019c8:	e006      	b.n	80019d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019ca:	bf00      	nop
 80019cc:	e004      	b.n	80019d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019ce:	bf00      	nop
 80019d0:	e002      	b.n	80019d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019d2:	bf00      	nop
 80019d4:	e000      	b.n	80019d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019d6:	bf00      	nop
  }
  if (status == HAL_OK)
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10d      	bne.n	80019fa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 0118 	bic.w	r1, r3, #24
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a16:	e154      	b.n	8001cc2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8146 	beq.w	8001cbc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d00b      	beq.n	8001a50 <HAL_GPIO_Init+0x48>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d007      	beq.n	8001a50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a44:	2b11      	cmp	r3, #17
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b12      	cmp	r3, #18
 8001a4e:	d130      	bne.n	8001ab2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a86:	2201      	movs	r2, #1
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	091b      	lsrs	r3, r3, #4
 8001a9c:	f003 0201 	and.w	r2, r3, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0xea>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d123      	bne.n	8001b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	08da      	lsrs	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	08da      	lsrs	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3208      	adds	r2, #8
 8001b34:	6939      	ldr	r1, [r7, #16]
 8001b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	2203      	movs	r2, #3
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0203 	and.w	r2, r3, #3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80a0 	beq.w	8001cbc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7c:	4b58      	ldr	r3, [pc, #352]	; (8001ce0 <HAL_GPIO_Init+0x2d8>)
 8001b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b80:	4a57      	ldr	r2, [pc, #348]	; (8001ce0 <HAL_GPIO_Init+0x2d8>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6613      	str	r3, [r2, #96]	; 0x60
 8001b88:	4b55      	ldr	r3, [pc, #340]	; (8001ce0 <HAL_GPIO_Init+0x2d8>)
 8001b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b94:	4a53      	ldr	r2, [pc, #332]	; (8001ce4 <HAL_GPIO_Init+0x2dc>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bbe:	d019      	beq.n	8001bf4 <HAL_GPIO_Init+0x1ec>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <HAL_GPIO_Init+0x2e0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d013      	beq.n	8001bf0 <HAL_GPIO_Init+0x1e8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a48      	ldr	r2, [pc, #288]	; (8001cec <HAL_GPIO_Init+0x2e4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d00d      	beq.n	8001bec <HAL_GPIO_Init+0x1e4>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a47      	ldr	r2, [pc, #284]	; (8001cf0 <HAL_GPIO_Init+0x2e8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d007      	beq.n	8001be8 <HAL_GPIO_Init+0x1e0>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a46      	ldr	r2, [pc, #280]	; (8001cf4 <HAL_GPIO_Init+0x2ec>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d101      	bne.n	8001be4 <HAL_GPIO_Init+0x1dc>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e008      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001be4:	2307      	movs	r3, #7
 8001be6:	e006      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001be8:	2303      	movs	r3, #3
 8001bea:	e004      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	f002 0203 	and.w	r2, r2, #3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	4093      	lsls	r3, r2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c06:	4937      	ldr	r1, [pc, #220]	; (8001ce4 <HAL_GPIO_Init+0x2dc>)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c14:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c38:	4a2f      	ldr	r2, [pc, #188]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c3e:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c62:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c68:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c8c:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb6:	4a10      	ldr	r2, [pc, #64]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f47f aea3 	bne.w	8001a18 <HAL_GPIO_Init+0x10>
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	48000800 	.word	0x48000800
 8001cf0:	48000c00 	.word	0x48000c00
 8001cf4:	48001000 	.word	0x48001000
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	e001      	b.n	8001d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d3c:	787b      	ldrb	r3, [r7, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 f806 	bl	8001d8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e081      	b.n	8001eb8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d106      	bne.n	8001dce <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f00b fcf3 	bl	800d7b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2224      	movs	r2, #36	; 0x24
 8001dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e02:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d107      	bne.n	8001e1c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	e006      	b.n	8001e2a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e28:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d104      	bne.n	8001e3c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e3a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e4e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	ea42 0103 	orr.w	r1, r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	021a      	lsls	r2, r3, #8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69d9      	ldr	r1, [r3, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1a      	ldr	r2, [r3, #32]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d138      	bne.n	8001f48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e032      	b.n	8001f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2224      	movs	r2, #36	; 0x24
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e000      	b.n	8001f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d139      	bne.n	8001fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e033      	b.n	8001fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2224      	movs	r2, #36	; 0x24
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e000      	b.n	8001fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fe0:	2302      	movs	r3, #2
  }
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e082      	b.n	8002108 <HAL_LPTIM_Init+0x118>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f00b fc9e 	bl	800d958 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d103      	bne.n	800203c <HAL_LPTIM_Init+0x4c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 0306 	bic.w	r3, r3, #6
 800203a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800204e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d103      	bne.n	8002060 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 03d8 	bic.w	r3, r3, #216	; 0xd8
 800205e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <HAL_LPTIM_Init+0x120>)
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002070:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002076:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800207c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002082:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d107      	bne.n	80020a2 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800209a:	4313      	orrs	r3, r2
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d104      	bne.n	80020b4 <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020bc:	4293      	cmp	r3, r2
 80020be:	d007      	beq.n	80020d0 <HAL_LPTIM_Init+0xe0>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 80020c8:	4313      	orrs	r3, r2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_LPTIM_Init+0x124>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d108      	bne.n	80020f4 <HAL_LPTIM_Init+0x104>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	621a      	str	r2, [r3, #32]
 80020f2:	e004      	b.n	80020fe <HAL_LPTIM_Init+0x10e>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020fc:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	ff19f1f8 	.word	0xff19f1f8
 8002114:	40007c00 	.word	0x40007c00

08002118 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	b08b      	sub	sp, #44	; 0x2c
 800211c:	af06      	add	r7, sp, #24
 800211e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e104      	b.n	8002334 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f00c fbe0 	bl	800e904 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2203      	movs	r2, #3
 8002148:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f007 f9f1 	bl	8009538 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	687e      	ldr	r6, [r7, #4]
 800215e:	466d      	mov	r5, sp
 8002160:	f106 0410 	add.w	r4, r6, #16
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	602b      	str	r3, [r5, #0]
 800216c:	1d33      	adds	r3, r6, #4
 800216e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002170:	6838      	ldr	r0, [r7, #0]
 8002172:	f007 f9b9 	bl	80094e8 <USB_CoreInit>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0d5      	b.n	8002334 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f007 f9ed 	bl	800956e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e04c      	b.n	8002234 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	3301      	adds	r3, #1
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	b298      	uxth	r0, r3
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	3336      	adds	r3, #54	; 0x36
 80021d8:	4602      	mov	r2, r0
 80021da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	440b      	add	r3, r1
 80021ec:	3303      	adds	r3, #3
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	3338      	adds	r3, #56	; 0x38
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	333c      	adds	r3, #60	; 0x3c
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	3340      	adds	r3, #64	; 0x40
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	3301      	adds	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	d3ad      	bcc.n	800219a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e044      	b.n	80022ce <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	3301      	adds	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3b5      	bcc.n	8002244 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	687e      	ldr	r6, [r7, #4]
 80022e0:	466d      	mov	r5, sp
 80022e2:	f106 0410 	add.w	r4, r6, #16
 80022e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	602b      	str	r3, [r5, #0]
 80022ee:	1d33      	adds	r3, r6, #4
 80022f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f2:	6838      	ldr	r0, [r7, #0]
 80022f4:	f007 f948 	bl	8009588 <USB_DevInit>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e014      	b.n	8002334 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f001 fa4b 	bl	80037be <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f009 f901 	bl	800b534 <USB_DevDisconnect>

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800233c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_PCD_Start+0x16>
 800234e:	2302      	movs	r3, #2
 8002350:	e012      	b.n	8002378 <HAL_PCD_Start+0x3c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f007 f8d3 	bl	800950a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f009 f8cc 	bl	800b506 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f009 f8e6 	bl	800b55e <USB_ReadInterrupts>
 8002392:	4603      	mov	r3, r0
 8002394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800239c:	d102      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fb43 	bl	8002a2a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f009 f8d8 	bl	800b55e <USB_ReadInterrupts>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b8:	d112      	bne.n	80023e0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023cc:	b292      	uxth	r2, r2
 80023ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f00c fb37 	bl	800ea46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023d8:	2100      	movs	r1, #0
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f91e 	bl	800261c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f009 f8ba 	bl	800b55e <USB_ReadInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023f4:	d10b      	bne.n	800240e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023fe:	b29a      	uxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002408:	b292      	uxth	r2, r2
 800240a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f009 f8a3 	bl	800b55e <USB_ReadInterrupts>
 8002418:	4603      	mov	r3, r0
 800241a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800241e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002422:	d10b      	bne.n	800243c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800242c:	b29a      	uxth	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002436:	b292      	uxth	r2, r2
 8002438:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f009 f88c 	bl	800b55e <USB_ReadInterrupts>
 8002446:	4603      	mov	r3, r0
 8002448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002450:	d133      	bne.n	80024ba <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800245a:	b29a      	uxth	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0204 	bic.w	r2, r2, #4
 8002464:	b292      	uxth	r2, r2
 8002466:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002472:	b29a      	uxth	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0208 	bic.w	r2, r2, #8
 800247c:	b292      	uxth	r2, r2
 800247e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002494:	2100      	movs	r1, #0
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f00c fd60 	bl	800ef5c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f00c fb0b 	bl	800eab8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024b4:	b292      	uxth	r2, r2
 80024b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f009 f84d 	bl	800b55e <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ce:	d126      	bne.n	800251e <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024d8:	b29a      	uxth	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0208 	orr.w	r2, r2, #8
 80024e2:	b292      	uxth	r2, r2
 80024e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024fa:	b292      	uxth	r2, r2
 80024fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002508:	b29a      	uxth	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0204 	orr.w	r2, r2, #4
 8002512:	b292      	uxth	r2, r2
 8002514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f00c fab3 	bl	800ea84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f009 f81b 	bl	800b55e <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b80      	cmp	r3, #128	; 0x80
 8002530:	d13f      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002544:	b292      	uxth	r2, r2
 8002546:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d12b      	bne.n	80025ac <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0204 	orr.w	r2, r2, #4
 8002566:	b292      	uxth	r2, r2
 8002568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0208 	orr.w	r2, r2, #8
 800257e:	b292      	uxth	r2, r2
 8002580:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002594:	b29b      	uxth	r3, r3
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025a2:	2101      	movs	r1, #1
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f00c fcd9 	bl	800ef5c <HAL_PCDEx_LPM_Callback>
 80025aa:	e002      	b.n	80025b2 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f00c fa69 	bl	800ea84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f008 ffd1 	bl	800b55e <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c6:	d10e      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025da:	b292      	uxth	r2, r2
 80025dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f00c fa22 	bl	800ea2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f008 ffb7 	bl	800b55e <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fa:	d10b      	bne.n	8002614 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002604:	b29a      	uxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800260e:	b292      	uxth	r2, r2
 8002610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_PCD_SetAddress+0x1a>
 8002632:	2302      	movs	r3, #2
 8002634:	e013      	b.n	800265e <HAL_PCD_SetAddress+0x42>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f008 ff45 	bl	800b4de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	4608      	mov	r0, r1
 8002670:	4611      	mov	r1, r2
 8002672:	461a      	mov	r2, r3
 8002674:	4603      	mov	r3, r0
 8002676:	70fb      	strb	r3, [r7, #3]
 8002678:	460b      	mov	r3, r1
 800267a:	803b      	strh	r3, [r7, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002688:	2b00      	cmp	r3, #0
 800268a:	da0e      	bge.n	80026aa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	705a      	strb	r2, [r3, #1]
 80026a8:	e00e      	b.n	80026c8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	f003 0207 	and.w	r2, r3, #7
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026d4:	883a      	ldrh	r2, [r7, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	78ba      	ldrb	r2, [r7, #2]
 80026de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	785b      	ldrb	r3, [r3, #1]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026f2:	78bb      	ldrb	r3, [r7, #2]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d102      	bne.n	80026fe <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_PCD_EP_Open+0xa6>
 8002708:	2302      	movs	r3, #2
 800270a:	e00e      	b.n	800272a <HAL_PCD_EP_Open+0xc4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68f9      	ldr	r1, [r7, #12]
 800271a:	4618      	mov	r0, r3
 800271c:	f006 ff56 	bl	80095cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002728:	7afb      	ldrb	r3, [r7, #11]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800273e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002742:	2b00      	cmp	r3, #0
 8002744:	da0e      	bge.n	8002764 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	705a      	strb	r2, [r3, #1]
 8002762:	e00e      	b.n	8002782 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	f003 0207 	and.w	r2, r3, #7
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_PCD_EP_Close+0x6a>
 8002798:	2302      	movs	r3, #2
 800279a:	e00e      	b.n	80027ba <HAL_PCD_EP_Close+0x88>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68f9      	ldr	r1, [r7, #12]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f007 fa7c 	bl	8009ca8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	460b      	mov	r3, r1
 80027d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d2:	7afb      	ldrb	r3, [r7, #11]
 80027d4:	f003 0207 	and.w	r2, r3, #7
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2200      	movs	r2, #0
 80027fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	b2da      	uxtb	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800280e:	7afb      	ldrb	r3, [r7, #11]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	2b00      	cmp	r3, #0
 8002816:	d106      	bne.n	8002826 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6979      	ldr	r1, [r7, #20]
 800281e:	4618      	mov	r0, r3
 8002820:	f007 fc2f 	bl	800a082 <USB_EPStartXfer>
 8002824:	e005      	b.n	8002832 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6979      	ldr	r1, [r7, #20]
 800282c:	4618      	mov	r0, r3
 800282e:	f007 fc28 	bl	800a082 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	460b      	mov	r3, r1
 800284a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800284c:	7afb      	ldrb	r3, [r7, #11]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2201      	movs	r2, #1
 8002886:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	b2da      	uxtb	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002894:	7afb      	ldrb	r3, [r7, #11]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6979      	ldr	r1, [r7, #20]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f007 fbec 	bl	800a082 <USB_EPStartXfer>
 80028aa:	e005      	b.n	80028b8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6979      	ldr	r1, [r7, #20]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f007 fbe5 	bl	800a082 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 0207 	and.w	r2, r3, #7
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d901      	bls.n	80028e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e04c      	b.n	800297a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da0e      	bge.n	8002906 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	705a      	strb	r2, [r3, #1]
 8002904:	e00c      	b.n	8002920 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_PCD_EP_SetStall+0x7e>
 800293c:	2302      	movs	r3, #2
 800293e:	e01c      	b.n	800297a <HAL_PCD_EP_SetStall+0xb8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68f9      	ldr	r1, [r7, #12]
 800294e:	4618      	mov	r0, r3
 8002950:	f008 fcc6 	bl	800b2e0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	2b00      	cmp	r3, #0
 800295c:	d108      	bne.n	8002970 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f008 fe07 	bl	800b57e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 020f 	and.w	r2, r3, #15
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d901      	bls.n	80029a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e040      	b.n	8002a22 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	da0e      	bge.n	80029c6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	705a      	strb	r2, [r3, #1]
 80029c4:	e00e      	b.n	80029e4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	f003 0207 	and.w	r2, r3, #7
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_PCD_EP_ClrStall+0x82>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e00e      	b.n	8002a22 <HAL_PCD_EP_ClrStall+0xa0>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68f9      	ldr	r1, [r7, #12]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f008 fcb5 	bl	800b382 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b08e      	sub	sp, #56	; 0x38
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a32:	e2d1      	b.n	8002fd8 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002a4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f040 8152 	bne.w	8002cf8 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d150      	bne.n	8002b00 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	81fb      	strh	r3, [r7, #14]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	89fb      	ldrh	r3, [r7, #14]
 8002a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3328      	adds	r3, #40	; 0x28
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	441a      	add	r2, r3
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002abe:	2100      	movs	r1, #0
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f00b ff98 	bl	800e9f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8282 	beq.w	8002fd8 <PCD_EP_ISR_Handler+0x5ae>
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f040 827d 	bne.w	8002fd8 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b292      	uxth	r2, r2
 8002af2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002afe:	e26b      	b.n	8002fd8 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d032      	beq.n	8002b80 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	f008 fd5f 	bl	800b618 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b66:	4013      	ands	r3, r2
 8002b68:	823b      	strh	r3, [r7, #16]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	8a3a      	ldrh	r2, [r7, #16]
 8002b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b74:	b292      	uxth	r2, r2
 8002b76:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00b ff0f 	bl	800e99c <HAL_PCD_SetupStageCallback>
 8002b7e:	e22b      	b.n	8002fd8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b80:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f280 8227 	bge.w	8002fd8 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b96:	4013      	ands	r3, r2
 8002b98:	83bb      	strh	r3, [r7, #28]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	8bba      	ldrh	r2, [r7, #28]
 8002ba0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d019      	beq.n	8002c0c <PCD_EP_ISR_Handler+0x1e2>
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d015      	beq.n	8002c0c <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	6959      	ldr	r1, [r3, #20]
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	f008 fd11 	bl	800b618 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	441a      	add	r2, r3
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c04:	2100      	movs	r1, #0
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f00b feda 	bl	800e9c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	4413      	add	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d112      	bne.n	8002c5a <PCD_EP_ISR_Handler+0x230>
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	801a      	strh	r2, [r3, #0]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	e02f      	b.n	8002cba <PCD_EP_ISR_Handler+0x290>
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002c60:	d813      	bhi.n	8002c8a <PCD_EP_ISR_Handler+0x260>
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	633b      	str	r3, [r7, #48]	; 0x30
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <PCD_EP_ISR_Handler+0x252>
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	3301      	adds	r3, #1
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	029b      	lsls	r3, r3, #10
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	801a      	strh	r2, [r3, #0]
 8002c88:	e017      	b.n	8002cba <PCD_EP_ISR_Handler+0x290>
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <PCD_EP_ISR_Handler+0x27a>
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	029b      	lsls	r3, r3, #10
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cca:	827b      	strh	r3, [r7, #18]
 8002ccc:	8a7b      	ldrh	r3, [r7, #18]
 8002cce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002cd2:	827b      	strh	r3, [r7, #18]
 8002cd4:	8a7b      	ldrh	r3, [r7, #18]
 8002cd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cda:	827b      	strh	r3, [r7, #18]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	8a7b      	ldrh	r3, [r7, #18]
 8002ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	8013      	strh	r3, [r2, #0]
 8002cf6:	e16f      	b.n	8002fd8 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d0a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f280 80e4 	bge.w	8002edc <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	853b      	strh	r3, [r7, #40]	; 0x28
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d42:	b292      	uxth	r2, r2
 8002d44:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d46:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	7b1b      	ldrb	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d120      	bne.n	8002da6 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d88:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002d8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8083 	beq.w	8002e98 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	6959      	ldr	r1, [r3, #20]
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	88da      	ldrh	r2, [r3, #6]
 8002d9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002da0:	f008 fc3a 	bl	800b618 <USB_ReadPMA>
 8002da4:	e078      	b.n	8002e98 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	78db      	ldrb	r3, [r3, #3]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d108      	bne.n	8002dc0 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002dae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002db0:	461a      	mov	r2, r3
 8002db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f91d 	bl	8002ff4 <HAL_PCD_EP_DB_Receive>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002dbe:	e06b      	b.n	8002e98 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	441a      	add	r2, r3
 8002dea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01f      	beq.n	8002e5a <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e3e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002e40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d028      	beq.n	8002e98 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	6959      	ldr	r1, [r3, #20]
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	891a      	ldrh	r2, [r3, #8]
 8002e52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e54:	f008 fbe0 	bl	800b618 <USB_ReadPMA>
 8002e58:	e01e      	b.n	8002e98 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e7e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002e80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	6959      	ldr	r1, [r3, #20]
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	895a      	ldrh	r2, [r3, #10]
 8002e92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e94:	f008 fbc0 	bl	800b618 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e9e:	441a      	add	r2, r3
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002eaa:	441a      	add	r2, r3
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <PCD_EP_ISR_Handler+0x498>
 8002eb8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d206      	bcs.n	8002ed0 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f00b fd79 	bl	800e9c0 <HAL_PCD_DataOutStageCallback>
 8002ece:	e005      	b.n	8002edc <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f007 f8d3 	bl	800a082 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002edc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d078      	beq.n	8002fd8 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ee6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f14:	843b      	strh	r3, [r7, #32]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	441a      	add	r2, r3
 8002f24:	8c3b      	ldrh	r3, [r7, #32]
 8002f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	78db      	ldrb	r3, [r3, #3]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d108      	bne.n	8002f4c <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d144      	bne.n	8002fcc <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002f42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d13f      	bne.n	8002fcc <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f70:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	8bfb      	ldrh	r3, [r7, #30]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d906      	bls.n	8002f8a <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	699a      	ldr	r2, [r3, #24]
 8002f80:	8bfb      	ldrh	r3, [r7, #30]
 8002f82:	1ad2      	subs	r2, r2, r3
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	619a      	str	r2, [r3, #24]
 8002f88:	e002      	b.n	8002f90 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f00b fd29 	bl	800e9f6 <HAL_PCD_DataInStageCallback>
 8002fa4:	e018      	b.n	8002fd8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	8bfb      	ldrh	r3, [r7, #30]
 8002fac:	441a      	add	r2, r3
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	8bfb      	ldrh	r3, [r7, #30]
 8002fb8:	441a      	add	r2, r3
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f007 f85c 	bl	800a082 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002fca:	e005      	b.n	8002fd8 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002fcc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f917 	bl	8003206 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	b21b      	sxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f6ff ad25 	blt.w	8002a34 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3738      	adds	r7, #56	; 0x38
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d07c      	beq.n	8003106 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003014:	b29b      	uxth	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	4413      	add	r3, r2
 8003026:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003030:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	8b7b      	ldrh	r3, [r7, #26]
 8003038:	429a      	cmp	r2, r3
 800303a:	d306      	bcc.n	800304a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	8b7b      	ldrh	r3, [r7, #26]
 8003042:	1ad2      	subs	r2, r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	619a      	str	r2, [r3, #24]
 8003048:	e002      	b.n	8003050 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2200      	movs	r2, #0
 800304e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d123      	bne.n	80030a0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b29b      	uxth	r3, r3
 800306a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	833b      	strh	r3, [r7, #24]
 8003074:	8b3b      	ldrh	r3, [r7, #24]
 8003076:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800307a:	833b      	strh	r3, [r7, #24]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	8b3b      	ldrh	r3, [r7, #24]
 800308c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800309c:	b29b      	uxth	r3, r3
 800309e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01f      	beq.n	80030ea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c4:	82fb      	strh	r3, [r7, #22]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	441a      	add	r2, r3
 80030d4:	8afb      	ldrh	r3, [r7, #22]
 80030d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030ea:	8b7b      	ldrh	r3, [r7, #26]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8085 	beq.w	80031fc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	6959      	ldr	r1, [r3, #20]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	891a      	ldrh	r2, [r3, #8]
 80030fe:	8b7b      	ldrh	r3, [r7, #26]
 8003100:	f008 fa8a 	bl	800b618 <USB_ReadPMA>
 8003104:	e07a      	b.n	80031fc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800310e:	b29b      	uxth	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	4413      	add	r3, r2
 8003120:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800312a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	8b7b      	ldrh	r3, [r7, #26]
 8003132:	429a      	cmp	r2, r3
 8003134:	d306      	bcc.n	8003144 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	8b7b      	ldrh	r3, [r7, #26]
 800313c:	1ad2      	subs	r2, r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	619a      	str	r2, [r3, #24]
 8003142:	e002      	b.n	800314a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2200      	movs	r2, #0
 8003148:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d123      	bne.n	800319a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316c:	83fb      	strh	r3, [r7, #30]
 800316e:	8bfb      	ldrh	r3, [r7, #30]
 8003170:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003174:	83fb      	strh	r3, [r7, #30]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	441a      	add	r2, r3
 8003184:	8bfb      	ldrh	r3, [r7, #30]
 8003186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800318a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800318e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003196:	b29b      	uxth	r3, r3
 8003198:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d11f      	bne.n	80031e4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	83bb      	strh	r3, [r7, #28]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	441a      	add	r2, r3
 80031ce:	8bbb      	ldrh	r3, [r7, #28]
 80031d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80031e4:	8b7b      	ldrh	r3, [r7, #26]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6959      	ldr	r1, [r3, #20]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	895a      	ldrh	r2, [r3, #10]
 80031f6:	8b7b      	ldrh	r3, [r7, #26]
 80031f8:	f008 fa0e 	bl	800b618 <USB_ReadPMA>
    }
  }

  return count;
 80031fc:	8b7b      	ldrh	r3, [r7, #26]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b092      	sub	sp, #72	; 0x48
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	4613      	mov	r3, r2
 8003212:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8130 	beq.w	8003480 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003228:	b29b      	uxth	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	4413      	add	r3, r2
 800323a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003244:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800324c:	429a      	cmp	r2, r3
 800324e:	d906      	bls.n	800325e <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003256:	1ad2      	subs	r2, r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	619a      	str	r2, [r3, #24]
 800325c:	e002      	b.n	8003264 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2200      	movs	r2, #0
 8003262:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d12c      	bne.n	80032c6 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	4619      	mov	r1, r3
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f00b fbbf 	bl	800e9f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 822d 	beq.w	80036de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	827b      	strh	r3, [r7, #18]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	441a      	add	r2, r3
 80032ae:	8a7b      	ldrh	r3, [r7, #18]
 80032b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	8013      	strh	r3, [r2, #0]
 80032c4:	e20b      	b.n	80036de <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01f      	beq.n	8003310 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330c:	b29b      	uxth	r3, r3
 800330e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003316:	2b01      	cmp	r3, #1
 8003318:	f040 81e1 	bne.w	80036de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003322:	441a      	add	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800332e:	441a      	add	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	6a1a      	ldr	r2, [r3, #32]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	429a      	cmp	r2, r3
 800333e:	d309      	bcc.n	8003354 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6a1a      	ldr	r2, [r3, #32]
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	1ad2      	subs	r2, r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	621a      	str	r2, [r3, #32]
 8003352:	e014      	b.n	800337e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d106      	bne.n	800336a <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 800335c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800335e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003368:	e009      	b.n	800337e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2200      	movs	r2, #0
 800337c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	785b      	ldrb	r3, [r3, #1]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d155      	bne.n	8003432 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003394:	b29b      	uxth	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	4413      	add	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	00da      	lsls	r2, r3, #3
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4413      	add	r3, r2
 80033a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d112      	bne.n	80033da <HAL_PCD_EP_DB_Transmit+0x1d4>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033be:	b29a      	uxth	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	801a      	strh	r2, [r3, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	801a      	strh	r2, [r3, #0]
 80033d8:	e047      	b.n	800346a <HAL_PCD_EP_DB_Transmit+0x264>
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	2b3e      	cmp	r3, #62	; 0x3e
 80033de:	d811      	bhi.n	8003404 <HAL_PCD_EP_DB_Transmit+0x1fe>
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x1f0>
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	3301      	adds	r3, #1
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	e032      	b.n	800346a <HAL_PCD_EP_DB_Transmit+0x264>
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <HAL_PCD_EP_DB_Transmit+0x214>
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	3b01      	subs	r3, #1
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	b29b      	uxth	r3, r3
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	b29b      	uxth	r3, r3
 8003422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342a:	b29a      	uxth	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	801a      	strh	r2, [r3, #0]
 8003430:	e01b      	b.n	800346a <HAL_PCD_EP_DB_Transmit+0x264>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	785b      	ldrb	r3, [r3, #1]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d117      	bne.n	800346a <HAL_PCD_EP_DB_Transmit+0x264>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	623b      	str	r3, [r7, #32]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003448:	b29b      	uxth	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	4413      	add	r3, r2
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	00da      	lsls	r2, r3, #3
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	4413      	add	r3, r2
 800345c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	b29a      	uxth	r2, r3
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6959      	ldr	r1, [r3, #20]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	891a      	ldrh	r2, [r3, #8]
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	b29b      	uxth	r3, r3
 800347a:	f008 f88c 	bl	800b596 <USB_WritePMA>
 800347e:	e12e      	b.n	80036de <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003488:	b29b      	uxth	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	4413      	add	r3, r2
 800349a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d306      	bcc.n	80034be <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034b6:	1ad2      	subs	r2, r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	619a      	str	r2, [r3, #24]
 80034bc:	e002      	b.n	80034c4 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2200      	movs	r2, #0
 80034c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d12c      	bne.n	8003526 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f00b fa8f 	bl	800e9f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f040 80fd 	bne.w	80036de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	441a      	add	r2, r3
 800350e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	b29b      	uxth	r3, r3
 8003522:	8013      	strh	r3, [r2, #0]
 8003524:	e0db      	b.n	80036de <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d11f      	bne.n	8003570 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	441a      	add	r2, r3
 800355a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800355c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356c:	b29b      	uxth	r3, r3
 800356e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003576:	2b01      	cmp	r3, #1
 8003578:	f040 80b1 	bne.w	80036de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003582:	441a      	add	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800358e:	441a      	add	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6a1a      	ldr	r2, [r3, #32]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	429a      	cmp	r2, r3
 800359e:	d309      	bcc.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	6a1a      	ldr	r2, [r3, #32]
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	1ad2      	subs	r2, r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	621a      	str	r2, [r3, #32]
 80035b2:	e014      	b.n	80035de <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80035bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035be:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035c8:	e009      	b.n	80035de <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2200      	movs	r2, #0
 80035d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	637b      	str	r3, [r7, #52]	; 0x34
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	785b      	ldrb	r3, [r3, #1]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d155      	bne.n	8003698 <HAL_PCD_EP_DB_Transmit+0x492>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003600:	4413      	add	r3, r2
 8003602:	647b      	str	r3, [r7, #68]	; 0x44
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	00da      	lsls	r2, r3, #3
 800360a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360c:	4413      	add	r3, r2
 800360e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003612:	643b      	str	r3, [r7, #64]	; 0x40
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	2b00      	cmp	r3, #0
 8003618:	d112      	bne.n	8003640 <HAL_PCD_EP_DB_Transmit+0x43a>
 800361a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003624:	b29a      	uxth	r2, r3
 8003626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003638:	b29a      	uxth	r2, r3
 800363a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363c:	801a      	strh	r2, [r3, #0]
 800363e:	e044      	b.n	80036ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003642:	2b3e      	cmp	r3, #62	; 0x3e
 8003644:	d811      	bhi.n	800366a <HAL_PCD_EP_DB_Transmit+0x464>
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_PCD_EP_DB_Transmit+0x456>
 8003656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003658:	3301      	adds	r3, #1
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800365c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365e:	b29b      	uxth	r3, r3
 8003660:	029b      	lsls	r3, r3, #10
 8003662:	b29a      	uxth	r2, r3
 8003664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003666:	801a      	strh	r2, [r3, #0]
 8003668:	e02f      	b.n	80036ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <HAL_PCD_EP_DB_Transmit+0x47a>
 800367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367c:	3b01      	subs	r3, #1
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003682:	b29b      	uxth	r3, r3
 8003684:	029b      	lsls	r3, r3, #10
 8003686:	b29b      	uxth	r3, r3
 8003688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800368c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003690:	b29a      	uxth	r2, r3
 8003692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	e018      	b.n	80036ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	785b      	ldrb	r3, [r3, #1]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d114      	bne.n	80036ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ae:	4413      	add	r3, r2
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	00da      	lsls	r2, r3, #3
 80036b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ba:	4413      	add	r3, r2
 80036bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036c0:	633b      	str	r3, [r7, #48]	; 0x30
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6959      	ldr	r1, [r3, #20]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	895a      	ldrh	r2, [r3, #10]
 80036d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f007 ff5c 	bl	800b596 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f8:	823b      	strh	r3, [r7, #16]
 80036fa:	8a3b      	ldrh	r3, [r7, #16]
 80036fc:	f083 0310 	eor.w	r3, r3, #16
 8003700:	823b      	strh	r3, [r7, #16]
 8003702:	8a3b      	ldrh	r3, [r7, #16]
 8003704:	f083 0320 	eor.w	r3, r3, #32
 8003708:	823b      	strh	r3, [r7, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	8a3b      	ldrh	r3, [r7, #16]
 800371a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800371e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372a:	b29b      	uxth	r3, r3
 800372c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3748      	adds	r7, #72	; 0x48
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	817b      	strh	r3, [r7, #10]
 8003746:	4613      	mov	r3, r2
 8003748:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800374a:	897b      	ldrh	r3, [r7, #10]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003756:	897b      	ldrh	r3, [r7, #10]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4413      	add	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	e009      	b.n	8003782 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800376e:	897a      	ldrh	r2, [r7, #10]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003782:	893b      	ldrh	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d107      	bne.n	8003798 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2200      	movs	r2, #0
 800378c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	b29a      	uxth	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	80da      	strh	r2, [r3, #6]
 8003796:	e00b      	b.n	80037b0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2201      	movs	r2, #1
 800379c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	f043 0302 	orr.w	r3, r3, #2
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a04      	ldr	r2, [pc, #16]	; (8003830 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800381e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003822:	6013      	str	r3, [r2, #0]
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40007000 	.word	0x40007000

08003834 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <HAL_PWREx_GetVoltageRange+0x18>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40007000 	.word	0x40007000

08003850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385e:	d130      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003860:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386c:	d038      	beq.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003876:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800387e:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2232      	movs	r2, #50	; 0x32
 8003884:	fb02 f303 	mul.w	r3, r2, r3
 8003888:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0c9b      	lsrs	r3, r3, #18
 8003890:	3301      	adds	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003894:	e002      	b.n	800389c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b01      	subs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a8:	d102      	bne.n	80038b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f2      	bne.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038bc:	d110      	bne.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e00f      	b.n	80038e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038c2:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ce:	d007      	beq.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d8:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40007000 	.word	0x40007000
 80038f4:	20000118 	.word	0x20000118
 80038f8:	431bde83 	.word	0x431bde83

080038fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a04      	ldr	r2, [pc, #16]	; (8003918 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800390a:	6053      	str	r3, [r2, #4]
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40007000 	.word	0x40007000

0800391c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f000 bc11 	b.w	8004152 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003930:	4ba0      	ldr	r3, [pc, #640]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800393a:	4b9e      	ldr	r3, [pc, #632]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80e4 	beq.w	8003b1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <HAL_RCC_OscConfig+0x4c>
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b0c      	cmp	r3, #12
 800395c:	f040 808b 	bne.w	8003a76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b01      	cmp	r3, #1
 8003964:	f040 8087 	bne.w	8003a76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003968:	4b92      	ldr	r3, [pc, #584]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_OscConfig+0x64>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e3e8      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1a      	ldr	r2, [r3, #32]
 8003984:	4b8b      	ldr	r3, [pc, #556]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <HAL_RCC_OscConfig+0x7e>
 8003990:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003998:	e005      	b.n	80039a6 <HAL_RCC_OscConfig+0x8a>
 800399a:	4b86      	ldr	r3, [pc, #536]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 800399c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d223      	bcs.n	80039f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fd78 	bl	80044a4 <RCC_SetFlashLatencyFromMSIRange>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e3c9      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039be:	4b7d      	ldr	r3, [pc, #500]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7c      	ldr	r2, [pc, #496]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b7a      	ldr	r3, [pc, #488]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4977      	ldr	r1, [pc, #476]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039dc:	4b75      	ldr	r3, [pc, #468]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	4972      	ldr	r1, [pc, #456]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
 80039f0:	e025      	b.n	8003a3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039f2:	4b70      	ldr	r3, [pc, #448]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6f      	ldr	r2, [pc, #444]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 80039f8:	f043 0308 	orr.w	r3, r3, #8
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	496a      	ldr	r1, [pc, #424]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a10:	4b68      	ldr	r3, [pc, #416]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	4965      	ldr	r1, [pc, #404]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fd38 	bl	80044a4 <RCC_SetFlashLatencyFromMSIRange>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e389      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a3e:	f000 fc6f 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8003a42:	4601      	mov	r1, r0
 8003a44:	4b5b      	ldr	r3, [pc, #364]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	4a5a      	ldr	r2, [pc, #360]	; (8003bb8 <HAL_RCC_OscConfig+0x29c>)
 8003a50:	5cd3      	ldrb	r3, [r2, r3]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	fa21 f303 	lsr.w	r3, r1, r3
 8003a5a:	4a58      	ldr	r2, [pc, #352]	; (8003bbc <HAL_RCC_OscConfig+0x2a0>)
 8003a5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a5e:	4b58      	ldr	r3, [pc, #352]	; (8003bc0 <HAL_RCC_OscConfig+0x2a4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fc fbce 	bl	8000204 <HAL_InitTick>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d052      	beq.n	8003b18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	e36d      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d032      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a7e:	4b4d      	ldr	r3, [pc, #308]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a4c      	ldr	r2, [pc, #304]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a8a:	f7fc fc0b 	bl	80002a4 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a92:	f7fc fc07 	bl	80002a4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e356      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa4:	4b43      	ldr	r3, [pc, #268]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ab0:	4b40      	ldr	r3, [pc, #256]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a3f      	ldr	r2, [pc, #252]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003ab6:	f043 0308 	orr.w	r3, r3, #8
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b3d      	ldr	r3, [pc, #244]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	493a      	ldr	r1, [pc, #232]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ace:	4b39      	ldr	r3, [pc, #228]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	4935      	ldr	r1, [pc, #212]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
 8003ae2:	e01a      	b.n	8003b1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ae4:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a32      	ldr	r2, [pc, #200]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003af0:	f7fc fbd8 	bl	80002a4 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003af8:	f7fc fbd4 	bl	80002a4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e323      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x1dc>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d073      	beq.n	8003c0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_OscConfig+0x21c>
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d10e      	bne.n	8003b50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d10b      	bne.n	8003b50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b38:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d063      	beq.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d15f      	bne.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e300      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b58:	d106      	bne.n	8003b68 <HAL_RCC_OscConfig+0x24c>
 8003b5a:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e01d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x288>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x270>
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a0c      	ldr	r2, [pc, #48]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x288>
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a05      	ldr	r2, [pc, #20]	; (8003bb4 <HAL_RCC_OscConfig+0x298>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01b      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fc fb7a 	bl	80002a4 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	e010      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2ba>
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	0800fde8 	.word	0x0800fde8
 8003bbc:	20000118 	.word	0x20000118
 8003bc0:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fc fb6e 	bl	80002a4 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e2bd      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd6:	4baf      	ldr	r3, [pc, #700]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x2a8>
 8003be2:	e014      	b.n	8003c0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fc fb5e 	bl	80002a4 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fc fb5a 	bl	80002a4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e2a9      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bfe:	4ba5      	ldr	r3, [pc, #660]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x2d0>
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d060      	beq.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_OscConfig+0x310>
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b0c      	cmp	r3, #12
 8003c24:	d119      	bne.n	8003c5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d116      	bne.n	8003c5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2c:	4b99      	ldr	r3, [pc, #612]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_OscConfig+0x328>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e286      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c44:	4b93      	ldr	r3, [pc, #588]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	4990      	ldr	r1, [pc, #576]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c58:	e040      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d023      	beq.n	8003caa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c62:	4b8c      	ldr	r3, [pc, #560]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a8b      	ldr	r2, [pc, #556]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fc fb19 	bl	80002a4 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c76:	f7fc fb15 	bl	80002a4 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e264      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c88:	4b82      	ldr	r3, [pc, #520]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b7f      	ldr	r3, [pc, #508]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	497c      	ldr	r1, [pc, #496]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	e018      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003caa:	4b7a      	ldr	r3, [pc, #488]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a79      	ldr	r2, [pc, #484]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fc faf5 	bl	80002a4 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7fc faf1 	bl	80002a4 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e240      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cd0:	4b70      	ldr	r3, [pc, #448]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d03c      	beq.n	8003d62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01c      	beq.n	8003d2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf0:	4b68      	ldr	r3, [pc, #416]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf6:	4a67      	ldr	r2, [pc, #412]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fc fad0 	bl	80002a4 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d08:	f7fc facc 	bl	80002a4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e21b      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d1a:	4b5e      	ldr	r3, [pc, #376]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ef      	beq.n	8003d08 <HAL_RCC_OscConfig+0x3ec>
 8003d28:	e01b      	b.n	8003d62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2a:	4b5a      	ldr	r3, [pc, #360]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d30:	4a58      	ldr	r2, [pc, #352]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fc fab3 	bl	80002a4 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fc faaf 	bl	80002a4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1fe      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d54:	4b4f      	ldr	r3, [pc, #316]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ef      	bne.n	8003d42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a6 	beq.w	8003ebc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d70:	2300      	movs	r3, #0
 8003d72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d74:	4b47      	ldr	r3, [pc, #284]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10d      	bne.n	8003d9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d80:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	4a43      	ldr	r2, [pc, #268]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d8c:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9c:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <HAL_RCC_OscConfig+0x57c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d118      	bne.n	8003dda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da8:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <HAL_RCC_OscConfig+0x57c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a3a      	ldr	r2, [pc, #232]	; (8003e98 <HAL_RCC_OscConfig+0x57c>)
 8003dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db4:	f7fc fa76 	bl	80002a4 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dbc:	f7fc fa72 	bl	80002a4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e1c1      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dce:	4b32      	ldr	r3, [pc, #200]	; (8003e98 <HAL_RCC_OscConfig+0x57c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d108      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4d8>
 8003de2:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	4a2a      	ldr	r2, [pc, #168]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df2:	e024      	b.n	8003e3e <HAL_RCC_OscConfig+0x522>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d110      	bne.n	8003e1e <HAL_RCC_OscConfig+0x502>
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	4a24      	ldr	r2, [pc, #144]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003e04:	f043 0304 	orr.w	r3, r3, #4
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e0c:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	4a20      	ldr	r2, [pc, #128]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e1c:	e00f      	b.n	8003e3e <HAL_RCC_OscConfig+0x522>
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e2e:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e34:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003e36:	f023 0304 	bic.w	r3, r3, #4
 8003e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e46:	f7fc fa2d 	bl	80002a4 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fc fa29 	bl	80002a4 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e176      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_OscConfig+0x578>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0ed      	beq.n	8003e4e <HAL_RCC_OscConfig+0x532>
 8003e72:	e01a      	b.n	8003eaa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fc fa16 	bl	80002a4 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e7a:	e00f      	b.n	8003e9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fc fa12 	bl	80002a4 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d906      	bls.n	8003e9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e15f      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e9c:	4baa      	ldr	r3, [pc, #680]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e8      	bne.n	8003e7c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eaa:	7ffb      	ldrb	r3, [r7, #31]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb0:	4ba5      	ldr	r3, [pc, #660]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	4aa4      	ldr	r2, [pc, #656]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d03c      	beq.n	8003f42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01c      	beq.n	8003f0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ed0:	4b9d      	ldr	r3, [pc, #628]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed6:	4a9c      	ldr	r2, [pc, #624]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fc f9e0 	bl	80002a4 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee8:	f7fc f9dc 	bl	80002a4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e12b      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003efa:	4b93      	ldr	r3, [pc, #588]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ef      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x5cc>
 8003f08:	e01b      	b.n	8003f42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f0a:	4b8f      	ldr	r3, [pc, #572]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f10:	4a8d      	ldr	r2, [pc, #564]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fc f9c3 	bl	80002a4 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f22:	f7fc f9bf 	bl	80002a4 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e10e      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f34:	4b84      	ldr	r3, [pc, #528]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ef      	bne.n	8003f22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8102 	beq.w	8004150 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	f040 80c5 	bne.w	80040e0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f56:	4b7c      	ldr	r3, [pc, #496]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f003 0203 	and.w	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d12c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	3b01      	subs	r3, #1
 8003f76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d123      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d113      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d109      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d067      	beq.n	8004094 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b0c      	cmp	r3, #12
 8003fc8:	d062      	beq.n	8004090 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fca:	4b5f      	ldr	r3, [pc, #380]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e0bb      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fda:	4b5b      	ldr	r3, [pc, #364]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a5a      	ldr	r2, [pc, #360]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8003fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fe4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fe6:	f7fc f95d 	bl	80002a4 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fc f959 	bl	80002a4 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e0a8      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004000:	4b51      	ldr	r3, [pc, #324]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400c:	4b4e      	ldr	r3, [pc, #312]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	4b4e      	ldr	r3, [pc, #312]	; (800414c <HAL_RCC_OscConfig+0x830>)
 8004012:	4013      	ands	r3, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800401c:	3a01      	subs	r2, #1
 800401e:	0112      	lsls	r2, r2, #4
 8004020:	4311      	orrs	r1, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004026:	0212      	lsls	r2, r2, #8
 8004028:	4311      	orrs	r1, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800402e:	0852      	lsrs	r2, r2, #1
 8004030:	3a01      	subs	r2, #1
 8004032:	0552      	lsls	r2, r2, #21
 8004034:	4311      	orrs	r1, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800403a:	0852      	lsrs	r2, r2, #1
 800403c:	3a01      	subs	r2, #1
 800403e:	0652      	lsls	r2, r2, #25
 8004040:	4311      	orrs	r1, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004046:	06d2      	lsls	r2, r2, #27
 8004048:	430a      	orrs	r2, r1
 800404a:	493f      	ldr	r1, [pc, #252]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 800404c:	4313      	orrs	r3, r2
 800404e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004050:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a3c      	ldr	r2, [pc, #240]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8004056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800405a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800405c:	4b3a      	ldr	r3, [pc, #232]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4a39      	ldr	r2, [pc, #228]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8004062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004068:	f7fc f91c 	bl	80002a4 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004070:	f7fc f918 	bl	80002a4 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e067      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	4b31      	ldr	r3, [pc, #196]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800408e:	e05f      	b.n	8004150 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e05e      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004094:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d157      	bne.n	8004150 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040a0:	4b29      	ldr	r3, [pc, #164]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a28      	ldr	r2, [pc, #160]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 80040a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040ac:	4b26      	ldr	r3, [pc, #152]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a25      	ldr	r2, [pc, #148]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 80040b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040b8:	f7fc f8f4 	bl	80002a4 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fc f8f0 	bl	80002a4 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e03f      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d2:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x7a4>
 80040de:	e037      	b.n	8004150 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d02d      	beq.n	8004142 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e6:	4b18      	ldr	r3, [pc, #96]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a17      	ldr	r2, [pc, #92]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 80040ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d105      	bne.n	800410a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80040fe:	4b12      	ldr	r3, [pc, #72]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	4a11      	ldr	r2, [pc, #68]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8004104:	f023 0303 	bic.w	r3, r3, #3
 8004108:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800410a:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4a0e      	ldr	r2, [pc, #56]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8004110:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004118:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411a:	f7fc f8c3 	bl	80002a4 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004122:	f7fc f8bf 	bl	80002a4 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e00e      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <HAL_RCC_OscConfig+0x82c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f0      	bne.n	8004122 <HAL_RCC_OscConfig+0x806>
 8004140:	e006      	b.n	8004150 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e005      	b.n	8004152 <HAL_RCC_OscConfig+0x836>
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000
 800414c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop

0800415c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0c8      	b.n	8004302 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004170:	4b66      	ldr	r3, [pc, #408]	; (800430c <HAL_RCC_ClockConfig+0x1b0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d910      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b63      	ldr	r3, [pc, #396]	; (800430c <HAL_RCC_ClockConfig+0x1b0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 0207 	bic.w	r2, r3, #7
 8004186:	4961      	ldr	r1, [pc, #388]	; (800430c <HAL_RCC_ClockConfig+0x1b0>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b5f      	ldr	r3, [pc, #380]	; (800430c <HAL_RCC_ClockConfig+0x1b0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0b0      	b.n	8004302 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d04c      	beq.n	8004246 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b4:	4b56      	ldr	r3, [pc, #344]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d121      	bne.n	8004204 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e09e      	b.n	8004302 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d107      	bne.n	80041dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041cc:	4b50      	ldr	r3, [pc, #320]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d115      	bne.n	8004204 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e092      	b.n	8004302 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041e4:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e086      	b.n	8004302 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f4:	4b46      	ldr	r3, [pc, #280]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e07e      	b.n	8004302 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004204:	4b42      	ldr	r3, [pc, #264]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f023 0203 	bic.w	r2, r3, #3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	493f      	ldr	r1, [pc, #252]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004216:	f7fc f845 	bl	80002a4 <HAL_GetTick>
 800421a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421c:	e00a      	b.n	8004234 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421e:	f7fc f841 	bl	80002a4 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	; 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e066      	b.n	8004302 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004234:	4b36      	ldr	r3, [pc, #216]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 020c 	and.w	r2, r3, #12
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	429a      	cmp	r2, r3
 8004244:	d1eb      	bne.n	800421e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004252:	4b2f      	ldr	r3, [pc, #188]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	492c      	ldr	r1, [pc, #176]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 8004260:	4313      	orrs	r3, r2
 8004262:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004264:	4b29      	ldr	r3, [pc, #164]	; (800430c <HAL_RCC_ClockConfig+0x1b0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d210      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b26      	ldr	r3, [pc, #152]	; (800430c <HAL_RCC_ClockConfig+0x1b0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 0207 	bic.w	r2, r3, #7
 800427a:	4924      	ldr	r1, [pc, #144]	; (800430c <HAL_RCC_ClockConfig+0x1b0>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b22      	ldr	r3, [pc, #136]	; (800430c <HAL_RCC_ClockConfig+0x1b0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e036      	b.n	8004302 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a0:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4918      	ldr	r1, [pc, #96]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4910      	ldr	r1, [pc, #64]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042d2:	f000 f825 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 80042d6:	4601      	mov	r1, r0
 80042d8:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <HAL_RCC_ClockConfig+0x1b4>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	4a0c      	ldr	r2, [pc, #48]	; (8004314 <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	5cd3      	ldrb	r3, [r2, r3]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	fa21 f303 	lsr.w	r3, r1, r3
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_RCC_ClockConfig+0x1c0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fb ff84 	bl	8000204 <HAL_InitTick>
 80042fc:	4603      	mov	r3, r0
 80042fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8004300:	7afb      	ldrb	r3, [r7, #11]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40022000 	.word	0x40022000
 8004310:	40021000 	.word	0x40021000
 8004314:	0800fde8 	.word	0x0800fde8
 8004318:	20000118 	.word	0x20000118
 800431c:	20000000 	.word	0x20000000

08004320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432e:	4b3d      	ldr	r3, [pc, #244]	; (8004424 <HAL_RCC_GetSysClockFreq+0x104>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004338:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <HAL_RCC_GetSysClockFreq+0x104>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_RCC_GetSysClockFreq+0x34>
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d121      	bne.n	8004392 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d11e      	bne.n	8004392 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004354:	4b33      	ldr	r3, [pc, #204]	; (8004424 <HAL_RCC_GetSysClockFreq+0x104>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d107      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004360:	4b30      	ldr	r3, [pc, #192]	; (8004424 <HAL_RCC_GetSysClockFreq+0x104>)
 8004362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	e005      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004370:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <HAL_RCC_GetSysClockFreq+0x104>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800437c:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <HAL_RCC_GetSysClockFreq+0x108>)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004384:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004390:	e00a      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b04      	cmp	r3, #4
 8004396:	d102      	bne.n	800439e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004398:	4b24      	ldr	r3, [pc, #144]	; (800442c <HAL_RCC_GetSysClockFreq+0x10c>)
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	e004      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043a4:	4b22      	ldr	r3, [pc, #136]	; (8004430 <HAL_RCC_GetSysClockFreq+0x110>)
 80043a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b0c      	cmp	r3, #12
 80043ac:	d133      	bne.n	8004416 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_RCC_GetSysClockFreq+0x104>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d002      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0xa4>
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d003      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0xaa>
 80043c2:	e005      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043c4:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_RCC_GetSysClockFreq+0x10c>)
 80043c6:	617b      	str	r3, [r7, #20]
      break;
 80043c8:	e005      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043ca:	4b19      	ldr	r3, [pc, #100]	; (8004430 <HAL_RCC_GetSysClockFreq+0x110>)
 80043cc:	617b      	str	r3, [r7, #20]
      break;
 80043ce:	e002      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	617b      	str	r3, [r7, #20]
      break;
 80043d4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d6:	4b13      	ldr	r3, [pc, #76]	; (8004424 <HAL_RCC_GetSysClockFreq+0x104>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	3301      	adds	r3, #1
 80043e2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <HAL_RCC_GetSysClockFreq+0x104>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	0a1b      	lsrs	r3, r3, #8
 80043ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	fb02 f203 	mul.w	r2, r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_RCC_GetSysClockFreq+0x104>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	0e5b      	lsrs	r3, r3, #25
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	3301      	adds	r3, #1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004416:	69bb      	ldr	r3, [r7, #24]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3724      	adds	r7, #36	; 0x24
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40021000 	.word	0x40021000
 8004428:	0800fe00 	.word	0x0800fe00
 800442c:	00f42400 	.word	0x00f42400
 8004430:	007a1200 	.word	0x007a1200

08004434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_RCC_GetHCLKFreq+0x14>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000118 	.word	0x20000118

0800444c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004450:	f7ff fff0 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004454:	4601      	mov	r1, r0
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4a04      	ldr	r2, [pc, #16]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004462:	5cd3      	ldrb	r3, [r2, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021000 	.word	0x40021000
 8004474:	0800fdf8 	.word	0x0800fdf8

08004478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800447c:	f7ff ffda 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004480:	4601      	mov	r1, r0
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0adb      	lsrs	r3, r3, #11
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800448e:	5cd3      	ldrb	r3, [r2, r3]
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	0800fdf8 	.word	0x0800fdf8

080044a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044b0:	4b2a      	ldr	r3, [pc, #168]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044bc:	f7ff f9ba 	bl	8003834 <HAL_PWREx_GetVoltageRange>
 80044c0:	6178      	str	r0, [r7, #20]
 80044c2:	e014      	b.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	4b25      	ldr	r3, [pc, #148]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	4a24      	ldr	r2, [pc, #144]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ce:	6593      	str	r3, [r2, #88]	; 0x58
 80044d0:	4b22      	ldr	r3, [pc, #136]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044dc:	f7ff f9aa 	bl	8003834 <HAL_PWREx_GetVoltageRange>
 80044e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044e2:	4b1e      	ldr	r3, [pc, #120]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e6:	4a1d      	ldr	r2, [pc, #116]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f4:	d10b      	bne.n	800450e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b80      	cmp	r3, #128	; 0x80
 80044fa:	d919      	bls.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004500:	d902      	bls.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004502:	2302      	movs	r3, #2
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	e013      	b.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004508:	2301      	movs	r3, #1
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	e010      	b.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b80      	cmp	r3, #128	; 0x80
 8004512:	d902      	bls.n	800451a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004514:	2303      	movs	r3, #3
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	e00a      	b.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b80      	cmp	r3, #128	; 0x80
 800451e:	d102      	bne.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004520:	2302      	movs	r3, #2
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e004      	b.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b70      	cmp	r3, #112	; 0x70
 800452a:	d101      	bne.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800452c:	2301      	movs	r3, #1
 800452e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 0207 	bic.w	r2, r3, #7
 8004538:	4909      	ldr	r1, [pc, #36]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	429a      	cmp	r2, r3
 800454c:	d001      	beq.n	8004552 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000
 8004560:	40022000 	.word	0x40022000

08004564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800456c:	2300      	movs	r3, #0
 800456e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004570:	2300      	movs	r3, #0
 8004572:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800457c:	2b00      	cmp	r3, #0
 800457e:	d02f      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004584:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004588:	d005      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800458a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800458e:	d015      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004594:	e00f      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004596:	4b5d      	ldr	r3, [pc, #372]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	4a5c      	ldr	r2, [pc, #368]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045a2:	e00c      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fe5c 	bl	8005268 <RCCEx_PLLSAI1_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045b4:	e003      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	74fb      	strb	r3, [r7, #19]
      break;
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80045bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10b      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045c4:	4b51      	ldr	r3, [pc, #324]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d2:	494e      	ldr	r1, [pc, #312]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045da:	e001      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 809e 	beq.w	800472a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045f2:	4b46      	ldr	r3, [pc, #280]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004608:	4b40      	ldr	r3, [pc, #256]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	4a3f      	ldr	r2, [pc, #252]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800460e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004612:	6593      	str	r3, [r2, #88]	; 0x58
 8004614:	4b3d      	ldr	r3, [pc, #244]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004620:	2301      	movs	r3, #1
 8004622:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004624:	4b3a      	ldr	r3, [pc, #232]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a39      	ldr	r2, [pc, #228]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004630:	f7fb fe38 	bl	80002a4 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004636:	e009      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004638:	f7fb fe34 	bl	80002a4 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d902      	bls.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	74fb      	strb	r3, [r7, #19]
        break;
 800464a:	e005      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800464c:	4b30      	ldr	r3, [pc, #192]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ef      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d15a      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800465e:	4b2b      	ldr	r3, [pc, #172]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004668:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01e      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	429a      	cmp	r2, r3
 8004678:	d019      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800467a:	4b24      	ldr	r3, [pc, #144]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004684:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004686:	4b21      	ldr	r3, [pc, #132]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	4a1f      	ldr	r2, [pc, #124]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800468e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	4a1b      	ldr	r2, [pc, #108]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800469e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046a6:	4a19      	ldr	r2, [pc, #100]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d016      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fb fdf4 	bl	80002a4 <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046be:	e00b      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c0:	f7fb fdf0 	bl	80002a4 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d902      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	74fb      	strb	r3, [r7, #19]
            break;
 80046d6:	e006      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d8:	4b0c      	ldr	r3, [pc, #48]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0ec      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80046e6:	7cfb      	ldrb	r3, [r7, #19]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10b      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ec:	4b07      	ldr	r3, [pc, #28]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046fa:	4904      	ldr	r1, [pc, #16]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004702:	e009      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	74bb      	strb	r3, [r7, #18]
 8004708:	e006      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
 8004710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004718:	7c7b      	ldrb	r3, [r7, #17]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d105      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471e:	4b9e      	ldr	r3, [pc, #632]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004722:	4a9d      	ldr	r2, [pc, #628]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004728:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004736:	4b98      	ldr	r3, [pc, #608]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f023 0203 	bic.w	r2, r3, #3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	4994      	ldr	r1, [pc, #592]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004758:	4b8f      	ldr	r3, [pc, #572]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f023 020c 	bic.w	r2, r3, #12
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	498c      	ldr	r1, [pc, #560]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800477a:	4b87      	ldr	r3, [pc, #540]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	4983      	ldr	r1, [pc, #524]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800479c:	4b7e      	ldr	r3, [pc, #504]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	497b      	ldr	r1, [pc, #492]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047be:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	4972      	ldr	r1, [pc, #456]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047e0:	4b6d      	ldr	r3, [pc, #436]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	496a      	ldr	r1, [pc, #424]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004802:	4b65      	ldr	r3, [pc, #404]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004810:	4961      	ldr	r1, [pc, #388]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004824:	4b5c      	ldr	r3, [pc, #368]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	4959      	ldr	r1, [pc, #356]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004846:	4b54      	ldr	r3, [pc, #336]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	4950      	ldr	r1, [pc, #320]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004868:	4b4b      	ldr	r3, [pc, #300]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	4948      	ldr	r1, [pc, #288]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800488a:	4b43      	ldr	r3, [pc, #268]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800488c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004890:	f023 0203 	bic.w	r2, r3, #3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	493f      	ldr	r1, [pc, #252]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d028      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048ac:	4b3a      	ldr	r3, [pc, #232]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ba:	4937      	ldr	r1, [pc, #220]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ca:	d106      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048cc:	4b32      	ldr	r3, [pc, #200]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a31      	ldr	r2, [pc, #196]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80048d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d6:	60d3      	str	r3, [r2, #12]
 80048d8:	e011      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e2:	d10c      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	2101      	movs	r1, #1
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fcbc 	bl	8005268 <RCCEx_PLLSAI1_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 80048fa:	7cfb      	ldrb	r3, [r7, #19]
 80048fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d028      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800490a:	4b23      	ldr	r3, [pc, #140]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004910:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004918:	491f      	ldr	r1, [pc, #124]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004928:	d106      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492a:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004934:	60d3      	str	r3, [r2, #12]
 8004936:	e011      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004940:	d10c      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	2101      	movs	r1, #1
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fc8d 	bl	8005268 <RCCEx_PLLSAI1_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02b      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004976:	4908      	ldr	r1, [pc, #32]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004986:	d109      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004988:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4a02      	ldr	r2, [pc, #8]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800498e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004992:	60d3      	str	r3, [r2, #12]
 8004994:	e014      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3304      	adds	r3, #4
 80049aa:	2101      	movs	r1, #1
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fc5b 	bl	8005268 <RCCEx_PLLSAI1_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80049bc:	7cfb      	ldrb	r3, [r7, #19]
 80049be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01c      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049cc:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049da:	4916      	ldr	r1, [pc, #88]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ea:	d10c      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	2102      	movs	r1, #2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fc38 	bl	8005268 <RCCEx_PLLSAI1_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	4904      	ldr	r1, [pc, #16]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a28:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40021000 	.word	0x40021000

08004a38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a4a:	d133      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004a4c:	4bb5      	ldr	r3, [pc, #724]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a56:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5e:	d012      	beq.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 8004a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a64:	d01b      	beq.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8004a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6a:	d000      	beq.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x36>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004a6c:	e3f2      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a6e:	4bad      	ldr	r3, [pc, #692]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	f040 83e6 	bne.w	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
        frequency = LSE_VALUE;
 8004a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a82:	61fb      	str	r3, [r7, #28]
      break;
 8004a84:	e3e1      	b.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004a86:	4ba7      	ldr	r3, [pc, #668]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	f040 83dc 	bne.w	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          frequency = LSI_VALUE;
 8004a96:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004a9a:	61fb      	str	r3, [r7, #28]
      break;
 8004a9c:	e3d7      	b.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a9e:	4ba1      	ldr	r3, [pc, #644]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aaa:	f040 83d2 	bne.w	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
        frequency = HSE_VALUE / 32U;
 8004aae:	4b9e      	ldr	r3, [pc, #632]	; (8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004ab0:	61fb      	str	r3, [r7, #28]
      break;
 8004ab2:	e3ce      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ab4:	4b9b      	ldr	r3, [pc, #620]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d023      	beq.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d02e      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d139      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004acc:	4b95      	ldr	r3, [pc, #596]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d116      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004ad8:	4b92      	ldr	r3, [pc, #584]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8004ae4:	4b8f      	ldr	r3, [pc, #572]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	e005      	b.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8004af0:	4b8c      	ldr	r3, [pc, #560]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	4a8b      	ldr	r2, [pc, #556]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b02:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004b04:	e01f      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        pllvco = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61bb      	str	r3, [r7, #24]
      break;
 8004b0a:	e01c      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b0c:	4b85      	ldr	r3, [pc, #532]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b18:	d102      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
      {
        pllvco = HSI_VALUE;
 8004b1a:	4b85      	ldr	r3, [pc, #532]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004b1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004b1e:	e012      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        pllvco = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61bb      	str	r3, [r7, #24]
      break;
 8004b24:	e00f      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b26:	4b7f      	ldr	r3, [pc, #508]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b32:	d102      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      {
        pllvco = HSE_VALUE;
 8004b34:	4b7f      	ldr	r3, [pc, #508]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004b36:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004b38:	e005      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        pllvco = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
      break;
 8004b3e:	e002      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    default:
      /* No source */
      pllvco = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61bb      	str	r3, [r7, #24]
      break;
 8004b44:	bf00      	nop
    }

    switch(PeriphClk)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b4c:	f000 82fb 	beq.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8004b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b54:	d81f      	bhi.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	f000 81ab 	beq.w	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d809      	bhi.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	f000 8128 	beq.w	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	f000 816f 	beq.w	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	f000 80eb 	beq.w	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004b72:	e36f      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
    switch(PeriphClk)
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	f000 825c 	beq.w	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d803      	bhi.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	f000 81cb 	beq.w	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;
 8004b84:	e366      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
    switch(PeriphClk)
 8004b86:	2b80      	cmp	r3, #128	; 0x80
 8004b88:	f000 8276 	beq.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b90:	f000 8295 	beq.w	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      break;
 8004b94:	e35e      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
    switch(PeriphClk)
 8004b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b9a:	f000 81f6 	beq.w	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8004b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba2:	d80a      	bhi.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba8:	d01a      	beq.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8004baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bae:	d01e      	beq.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8004bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb4:	f000 8308 	beq.w	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
      break;
 8004bb8:	e34c      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
    switch(PeriphClk)
 8004bba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bbe:	d016      	beq.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8004bc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bc4:	d804      	bhi.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8004bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bca:	f000 8221 	beq.w	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
      break;
 8004bce:	e341      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
    switch(PeriphClk)
 8004bd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bd4:	d00b      	beq.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8004bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bda:	f000 8293 	beq.w	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
      break;
 8004bde:	e339      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004be0:	69b9      	ldr	r1, [r7, #24]
 8004be2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004be6:	f000 fc2f 	bl	8005448 <RCCEx_GetSAIxPeriphCLKFreq>
 8004bea:	61f8      	str	r0, [r7, #28]
      break;
 8004bec:	e332      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004bee:	4b4d      	ldr	r3, [pc, #308]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004bf8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c00:	d056      	beq.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8004c02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c06:	d802      	bhi.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d07e      	beq.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
          break;
 8004c0c:	e09b      	b.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        switch(srcclk)
 8004c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c12:	d020      	beq.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
 8004c14:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004c18:	d000      	beq.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          break;
 8004c1a:	e094      	b.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004c1c:	4b41      	ldr	r3, [pc, #260]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d17a      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004c28:	4b3e      	ldr	r3, [pc, #248]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004c34:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	e005      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 8004c40:	4b38      	ldr	r3, [pc, #224]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	4a37      	ldr	r2, [pc, #220]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c52:	61fb      	str	r3, [r7, #28]
          break;
 8004c54:	e063      	b.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004c56:	4b33      	ldr	r3, [pc, #204]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c62:	d16b      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004c64:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c70:	d164      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c72:	4b2c      	ldr	r3, [pc, #176]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c7c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	fb02 f203 	mul.w	r2, r2, r3
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	3301      	adds	r3, #1
 8004c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c96:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004c98:	4b22      	ldr	r3, [pc, #136]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	0d5b      	lsrs	r3, r3, #21
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cac:	61fb      	str	r3, [r7, #28]
          break;
 8004cae:	e045      	b.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004cb0:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cbc:	d140      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004cbe:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cca:	d139      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004ccc:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	0a1b      	lsrs	r3, r3, #8
 8004cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	fb02 f203 	mul.w	r2, r2, r3
 8004ce0:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	3301      	adds	r3, #1
 8004cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004cf2:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	0d5b      	lsrs	r3, r3, #21
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d06:	61fb      	str	r3, [r7, #28]
          break;
 8004d08:	e01a      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d115      	bne.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = HSI48_VALUE;
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004d1a:	61fb      	str	r3, [r7, #28]
          break;
 8004d1c:	e012      	b.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          break;
 8004d1e:	bf00      	nop
 8004d20:	e298      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000
 8004d28:	0003d090 	.word	0x0003d090
 8004d2c:	0800fe00 	.word	0x0800fe00
 8004d30:	00f42400 	.word	0x00f42400
 8004d34:	007a1200 	.word	0x007a1200
 8004d38:	02dc6c00 	.word	0x02dc6c00
          break;
 8004d3c:	bf00      	nop
 8004d3e:	e289      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004d40:	bf00      	nop
 8004d42:	e287      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004d44:	bf00      	nop
        break;
 8004d46:	e285      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004d48:	4baf      	ldr	r3, [pc, #700]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d827      	bhi.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d79 	.word	0x08004d79
 8004d68:	08004d81 	.word	0x08004d81
 8004d6c:	08004d95 	.word	0x08004d95
          frequency = HAL_RCC_GetPCLK2Freq();
 8004d70:	f7ff fb82 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 8004d74:	61f8      	str	r0, [r7, #28]
          break;
 8004d76:	e01d      	b.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d78:	f7ff fad2 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8004d7c:	61f8      	str	r0, [r7, #28]
          break;
 8004d7e:	e019      	b.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d80:	4ba1      	ldr	r3, [pc, #644]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8c:	d10f      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x376>
            frequency = HSI_VALUE;
 8004d8e:	4b9f      	ldr	r3, [pc, #636]	; (800500c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004d90:	61fb      	str	r3, [r7, #28]
          break;
 8004d92:	e00c      	b.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d94:	4b9c      	ldr	r3, [pc, #624]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d107      	bne.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
            frequency = LSE_VALUE;
 8004da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da6:	61fb      	str	r3, [r7, #28]
          break;
 8004da8:	e003      	b.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          break;
 8004daa:	bf00      	nop
 8004dac:	e252      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004dae:	bf00      	nop
 8004db0:	e250      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004db2:	bf00      	nop
        break;
 8004db4:	e24e      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004db6:	4b94      	ldr	r3, [pc, #592]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f003 030c 	and.w	r3, r3, #12
 8004dc0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b0c      	cmp	r3, #12
 8004dc6:	d83a      	bhi.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004e05 	.word	0x08004e05
 8004dd4:	08004e3f 	.word	0x08004e3f
 8004dd8:	08004e3f 	.word	0x08004e3f
 8004ddc:	08004e3f 	.word	0x08004e3f
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	08004e3f 	.word	0x08004e3f
 8004de8:	08004e3f 	.word	0x08004e3f
 8004dec:	08004e3f 	.word	0x08004e3f
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e3f 	.word	0x08004e3f
 8004df8:	08004e3f 	.word	0x08004e3f
 8004dfc:	08004e3f 	.word	0x08004e3f
 8004e00:	08004e29 	.word	0x08004e29
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e04:	f7ff fb22 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8004e08:	61f8      	str	r0, [r7, #28]
          break;
 8004e0a:	e01d      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e0c:	f7ff fa88 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8004e10:	61f8      	str	r0, [r7, #28]
          break;
 8004e12:	e019      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e14:	4b7c      	ldr	r3, [pc, #496]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e20:	d10f      	bne.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
            frequency = HSI_VALUE;
 8004e22:	4b7a      	ldr	r3, [pc, #488]	; (800500c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004e24:	61fb      	str	r3, [r7, #28]
          break;
 8004e26:	e00c      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e28:	4b77      	ldr	r3, [pc, #476]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d107      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            frequency = LSE_VALUE;
 8004e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3a:	61fb      	str	r3, [r7, #28]
          break;
 8004e3c:	e003      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
          break;
 8004e3e:	bf00      	nop
 8004e40:	e208      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004e42:	bf00      	nop
 8004e44:	e206      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004e46:	bf00      	nop
        break;
 8004e48:	e204      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004e4a:	4b6f      	ldr	r3, [pc, #444]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e54:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d00d      	beq.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8004e5c:	2b10      	cmp	r3, #16
 8004e5e:	d802      	bhi.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          break;
 8004e64:	e024      	b.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
        switch(srcclk)
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8004e6a:	2b30      	cmp	r3, #48	; 0x30
 8004e6c:	d012      	beq.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          break;
 8004e6e:	e01f      	b.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e70:	f7ff faec 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8004e74:	61f8      	str	r0, [r7, #28]
          break;
 8004e76:	e01b      	b.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e78:	f7ff fa52 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8004e7c:	61f8      	str	r0, [r7, #28]
          break;
 8004e7e:	e017      	b.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e80:	4b61      	ldr	r3, [pc, #388]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d10d      	bne.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            frequency = HSI_VALUE;
 8004e8e:	4b5f      	ldr	r3, [pc, #380]	; (800500c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004e90:	61fb      	str	r3, [r7, #28]
          break;
 8004e92:	e00a      	b.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e94:	4b5c      	ldr	r3, [pc, #368]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d105      	bne.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x476>
            frequency = LSE_VALUE;
 8004ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ea6:	61fb      	str	r3, [r7, #28]
          break;
 8004ea8:	e001      	b.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x476>
          break;
 8004eaa:	bf00      	nop
 8004eac:	e1d2      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004eae:	bf00      	nop
        break;
 8004eb0:	e1d0      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004eb2:	4b55      	ldr	r3, [pc, #340]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ebc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d00d      	beq.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8004ec4:	2b40      	cmp	r3, #64	; 0x40
 8004ec6:	d802      	bhi.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
          break;
 8004ecc:	e024      	b.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
        switch(srcclk)
 8004ece:	2b80      	cmp	r3, #128	; 0x80
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8004ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ed4:	d012      	beq.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          break;
 8004ed6:	e01f      	b.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7ff fab8 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8004edc:	61f8      	str	r0, [r7, #28]
          break;
 8004ede:	e01b      	b.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ee0:	f7ff fa1e 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8004ee4:	61f8      	str	r0, [r7, #28]
          break;
 8004ee6:	e017      	b.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ee8:	4b47      	ldr	r3, [pc, #284]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef4:	d10d      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            frequency = HSI_VALUE;
 8004ef6:	4b45      	ldr	r3, [pc, #276]	; (800500c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ef8:	61fb      	str	r3, [r7, #28]
          break;
 8004efa:	e00a      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004efc:	4b42      	ldr	r3, [pc, #264]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d105      	bne.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
            frequency = LSE_VALUE;
 8004f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0e:	61fb      	str	r3, [r7, #28]
          break;
 8004f10:	e001      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          break;
 8004f12:	bf00      	nop
 8004f14:	e19e      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004f16:	bf00      	nop
        break;
 8004f18:	e19c      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004f1a:	4b3b      	ldr	r3, [pc, #236]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f24:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2c:	d010      	beq.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f32:	d802      	bhi.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
          break;
 8004f38:	e026      	b.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
        switch(srcclk)
 8004f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3e:	d00b      	beq.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8004f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f44:	d012      	beq.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>
          break;
 8004f46:	e01f      	b.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f48:	f7ff fa80 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8004f4c:	61f8      	str	r0, [r7, #28]
          break;
 8004f4e:	e01b      	b.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f50:	f7ff f9e6 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8004f54:	61f8      	str	r0, [r7, #28]
          break;
 8004f56:	e017      	b.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f58:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f64:	d10d      	bne.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
            frequency = HSI_VALUE;
 8004f66:	4b29      	ldr	r3, [pc, #164]	; (800500c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004f68:	61fb      	str	r3, [r7, #28]
          break;
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f6c:	4b26      	ldr	r3, [pc, #152]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d105      	bne.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
            frequency = LSE_VALUE;
 8004f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7e:	61fb      	str	r3, [r7, #28]
          break;
 8004f80:	e001      	b.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
          break;
 8004f82:	bf00      	nop
 8004f84:	e166      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004f86:	bf00      	nop
        break;
 8004f88:	e164      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004f8a:	4b1f      	ldr	r3, [pc, #124]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f94:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f9c:	d007      	beq.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x576>
 8004f9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fa2:	d000      	beq.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
          break;
 8004fa4:	e02f      	b.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fa6:	f7ff f9bb 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8004faa:	61f8      	str	r0, [r7, #28]
          break;
 8004fac:	e02b      	b.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004fae:	4b16      	ldr	r3, [pc, #88]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fba:	d123      	bne.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004fbc:	4b12      	ldr	r3, [pc, #72]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01d      	beq.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004fc8:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	fb02 f203 	mul.w	r2, r2, r3
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fec:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	0e5b      	lsrs	r3, r3, #25
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	61fb      	str	r3, [r7, #28]
          break;
 8005004:	bf00      	nop
        break;
 8005006:	e125      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 8005008:	40021000 	.word	0x40021000
 800500c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005010:	4b93      	ldr	r3, [pc, #588]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800501a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005022:	f7ff fa29 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 8005026:	61f8      	str	r0, [r7, #28]
        break;
 8005028:	e114      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          frequency = HAL_RCC_GetSysClockFreq();
 800502a:	f7ff f979 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 800502e:	61f8      	str	r0, [r7, #28]
        break;
 8005030:	e110      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005032:	4b8b      	ldr	r3, [pc, #556]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005038:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800503c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005044:	d009      	beq.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8005046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d000      	beq.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          break;
 8005050:	e011      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005052:	f7ff f9fb 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8005056:	61f8      	str	r0, [r7, #28]
          break;
 8005058:	e00d      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
          frequency = HAL_RCC_GetSysClockFreq();
 800505a:	f7ff f961 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 800505e:	61f8      	str	r0, [r7, #28]
          break;
 8005060:	e009      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005062:	4b7f      	ldr	r3, [pc, #508]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	d101      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
            frequency = HSI_VALUE;
 8005070:	4b7c      	ldr	r3, [pc, #496]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 8005072:	61fb      	str	r3, [r7, #28]
          break;
 8005074:	bf00      	nop
        break;
 8005076:	e0ed      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005078:	4b79      	ldr	r3, [pc, #484]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005082:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800508a:	d009      	beq.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800508c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d000      	beq.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          break;
 8005096:	e011      	b.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005098:	f7ff f9d8 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 800509c:	61f8      	str	r0, [r7, #28]
          break;
 800509e:	e00d      	b.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = HAL_RCC_GetSysClockFreq();
 80050a0:	f7ff f93e 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 80050a4:	61f8      	str	r0, [r7, #28]
          break;
 80050a6:	e009      	b.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050a8:	4b6d      	ldr	r3, [pc, #436]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b4:	d101      	bne.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
            frequency = HSI_VALUE;
 80050b6:	4b6b      	ldr	r3, [pc, #428]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 80050b8:	61fb      	str	r3, [r7, #28]
          break;
 80050ba:	bf00      	nop
        break;
 80050bc:	e0ca      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80050be:	4b68      	ldr	r3, [pc, #416]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050c8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d009      	beq.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80050d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050d6:	d00a      	beq.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d000      	beq.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
          break;
 80050dc:	e011      	b.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050de:	f7ff f9b5 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 80050e2:	61f8      	str	r0, [r7, #28]
          break;
 80050e4:	e00d      	b.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          frequency = HAL_RCC_GetSysClockFreq();
 80050e6:	f7ff f91b 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 80050ea:	61f8      	str	r0, [r7, #28]
          break;
 80050ec:	e009      	b.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050ee:	4b5c      	ldr	r3, [pc, #368]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fa:	d101      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
            frequency = HSI_VALUE;
 80050fc:	4b59      	ldr	r3, [pc, #356]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 80050fe:	61fb      	str	r3, [r7, #28]
          break;
 8005100:	bf00      	nop
        break;
 8005102:	e0a7      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005104:	4b56      	ldr	r3, [pc, #344]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d008      	beq.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8005116:	2b01      	cmp	r3, #1
 8005118:	d302      	bcc.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 800511a:	2b02      	cmp	r3, #2
 800511c:	d008      	beq.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          break;
 800511e:	e011      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005120:	f7ff f994 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8005124:	61f8      	str	r0, [r7, #28]
          break;
 8005126:	e00d      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005128:	f7ff f8fa 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 800512c:	61f8      	str	r0, [r7, #28]
          break;
 800512e:	e009      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005130:	4b4b      	ldr	r3, [pc, #300]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513c:	d101      	bne.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
            frequency = HSI_VALUE;
 800513e:	4b49      	ldr	r3, [pc, #292]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 8005140:	61fb      	str	r3, [r7, #28]
          break;
 8005142:	bf00      	nop
        break;
 8005144:	e086      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005146:	4b46      	ldr	r3, [pc, #280]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005150:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005158:	d010      	beq.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800515a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800515e:	d802      	bhi.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          break;
 8005164:	e02f      	b.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        switch(srcclk)
 8005166:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800516a:	d012      	beq.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800516c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005170:	d019      	beq.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          break;
 8005172:	e028      	b.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005174:	f7ff f96a 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8005178:	61f8      	str	r0, [r7, #28]
          break;
 800517a:	e024      	b.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800517c:	4b38      	ldr	r3, [pc, #224]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800517e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b02      	cmp	r3, #2
 8005188:	d118      	bne.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
              frequency = LSI_VALUE;
 800518a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800518e:	61fb      	str	r3, [r7, #28]
          break;
 8005190:	e014      	b.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005192:	4b33      	ldr	r3, [pc, #204]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519e:	d10f      	bne.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            frequency = HSI_VALUE;
 80051a0:	4b30      	ldr	r3, [pc, #192]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 80051a2:	61fb      	str	r3, [r7, #28]
          break;
 80051a4:	e00c      	b.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051a6:	4b2e      	ldr	r3, [pc, #184]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d107      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
            frequency = LSE_VALUE;
 80051b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b8:	61fb      	str	r3, [r7, #28]
          break;
 80051ba:	e003      	b.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          break;
 80051bc:	bf00      	nop
 80051be:	e049      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 80051c0:	bf00      	nop
 80051c2:	e047      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 80051c4:	bf00      	nop
        break;
 80051c6:	e045      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80051c8:	4b25      	ldr	r3, [pc, #148]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80051d2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051da:	d010      	beq.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80051dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e0:	d802      	bhi.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
          break;
 80051e6:	e02f      	b.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        switch(srcclk)
 80051e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051ec:	d012      	beq.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80051ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051f2:	d019      	beq.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          break;
 80051f4:	e028      	b.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          frequency = HAL_RCC_GetPCLK1Freq();
 80051f6:	f7ff f929 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 80051fa:	61f8      	str	r0, [r7, #28]
          break;
 80051fc:	e024      	b.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80051fe:	4b18      	ldr	r3, [pc, #96]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b02      	cmp	r3, #2
 800520a:	d118      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
              frequency = LSI_VALUE;
 800520c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005210:	61fb      	str	r3, [r7, #28]
          break;
 8005212:	e014      	b.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005214:	4b12      	ldr	r3, [pc, #72]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005220:	d10f      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
            frequency = HSI_VALUE;
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 8005224:	61fb      	str	r3, [r7, #28]
          break;
 8005226:	e00c      	b.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005228:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b02      	cmp	r3, #2
 8005234:	d107      	bne.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            frequency = LSE_VALUE;
 8005236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523a:	61fb      	str	r3, [r7, #28]
          break;
 800523c:	e003      	b.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          break;
 800523e:	bf00      	nop
 8005240:	e008      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8005242:	bf00      	nop
 8005244:	e006      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8005246:	bf00      	nop
        break;
 8005248:	e004      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
      break;
 800524a:	bf00      	nop
 800524c:	e002      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
      break;
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
      break;
 8005252:	bf00      	nop
    }
  }

  return(frequency);
 8005254:	69fb      	ldr	r3, [r7, #28]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40021000 	.word	0x40021000
 8005264:	00f42400 	.word	0x00f42400

08005268 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005276:	4b73      	ldr	r3, [pc, #460]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d018      	beq.n	80052b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005282:	4b70      	ldr	r3, [pc, #448]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0203 	and.w	r2, r3, #3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d10d      	bne.n	80052ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
       ||
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800529a:	4b6a      	ldr	r3, [pc, #424]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
       ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d044      	beq.n	8005338 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
 80052b2:	e041      	b.n	8005338 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d00c      	beq.n	80052d6 <RCCEx_PLLSAI1_Config+0x6e>
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d013      	beq.n	80052e8 <RCCEx_PLLSAI1_Config+0x80>
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d120      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052c4:	4b5f      	ldr	r3, [pc, #380]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d11d      	bne.n	800530c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052d4:	e01a      	b.n	800530c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052d6:	4b5b      	ldr	r3, [pc, #364]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d116      	bne.n	8005310 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052e6:	e013      	b.n	8005310 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052e8:	4b56      	ldr	r3, [pc, #344]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10f      	bne.n	8005314 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052f4:	4b53      	ldr	r3, [pc, #332]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d109      	bne.n	8005314 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005304:	e006      	b.n	8005314 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	73fb      	strb	r3, [r7, #15]
      break;
 800530a:	e004      	b.n	8005316 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800530c:	bf00      	nop
 800530e:	e002      	b.n	8005316 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005310:	bf00      	nop
 8005312:	e000      	b.n	8005316 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005314:	bf00      	nop
    }

    if(status == HAL_OK)
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10d      	bne.n	8005338 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800531c:	4b49      	ldr	r3, [pc, #292]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6819      	ldr	r1, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	3b01      	subs	r3, #1
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	430b      	orrs	r3, r1
 8005332:	4944      	ldr	r1, [pc, #272]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005334:	4313      	orrs	r3, r2
 8005336:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005338:	7bfb      	ldrb	r3, [r7, #15]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d17c      	bne.n	8005438 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800533e:	4b41      	ldr	r3, [pc, #260]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a40      	ldr	r2, [pc, #256]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005344:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800534a:	f7fa ffab 	bl	80002a4 <HAL_GetTick>
 800534e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005350:	e009      	b.n	8005366 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005352:	f7fa ffa7 	bl	80002a4 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d902      	bls.n	8005366 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	73fb      	strb	r3, [r7, #15]
        break;
 8005364:	e005      	b.n	8005372 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005366:	4b37      	ldr	r3, [pc, #220]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1ef      	bne.n	8005352 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d15f      	bne.n	8005438 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d110      	bne.n	80053a0 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800537e:	4b31      	ldr	r3, [pc, #196]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005386:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6892      	ldr	r2, [r2, #8]
 800538e:	0211      	lsls	r1, r2, #8
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	68d2      	ldr	r2, [r2, #12]
 8005394:	06d2      	lsls	r2, r2, #27
 8005396:	430a      	orrs	r2, r1
 8005398:	492a      	ldr	r1, [pc, #168]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 800539a:	4313      	orrs	r3, r2
 800539c:	610b      	str	r3, [r1, #16]
 800539e:	e027      	b.n	80053f0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d112      	bne.n	80053cc <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053a6:	4b27      	ldr	r3, [pc, #156]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80053ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6892      	ldr	r2, [r2, #8]
 80053b6:	0211      	lsls	r1, r2, #8
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6912      	ldr	r2, [r2, #16]
 80053bc:	0852      	lsrs	r2, r2, #1
 80053be:	3a01      	subs	r2, #1
 80053c0:	0552      	lsls	r2, r2, #21
 80053c2:	430a      	orrs	r2, r1
 80053c4:	491f      	ldr	r1, [pc, #124]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	610b      	str	r3, [r1, #16]
 80053ca:	e011      	b.n	80053f0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053cc:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6892      	ldr	r2, [r2, #8]
 80053dc:	0211      	lsls	r1, r2, #8
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6952      	ldr	r2, [r2, #20]
 80053e2:	0852      	lsrs	r2, r2, #1
 80053e4:	3a01      	subs	r2, #1
 80053e6:	0652      	lsls	r2, r2, #25
 80053e8:	430a      	orrs	r2, r1
 80053ea:	4916      	ldr	r1, [pc, #88]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053f0:	4b14      	ldr	r3, [pc, #80]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a13      	ldr	r2, [pc, #76]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7fa ff52 	bl	80002a4 <HAL_GetTick>
 8005400:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005402:	e009      	b.n	8005418 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005404:	f7fa ff4e 	bl	80002a4 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d902      	bls.n	8005418 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	73fb      	strb	r3, [r7, #15]
          break;
 8005416:	e005      	b.n	8005424 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0ef      	beq.n	8005404 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	4904      	ldr	r1, [pc, #16]	; (8005444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005434:	4313      	orrs	r3, r2
 8005436:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000

08005448 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005448:	b480      	push	{r7}
 800544a:	b089      	sub	sp, #36	; 0x24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005464:	d10b      	bne.n	800547e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005466:	4b53      	ldr	r3, [pc, #332]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005470:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005478:	d101      	bne.n	800547e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800547a:	4b4f      	ldr	r3, [pc, #316]	; (80055b8 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 800547c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f040 8090 	bne.w	80055a6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
  {
    pllvco = InputFrequency;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005490:	d143      	bne.n	800551a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 8005492:	4b48      	ldr	r3, [pc, #288]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800549e:	d132      	bne.n	8005506 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 80054a0:	4b44      	ldr	r3, [pc, #272]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d02c      	beq.n	8005506 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80054ac:	4b41      	ldr	r3, [pc, #260]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	3301      	adds	r3, #1
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80054c0:	4b3c      	ldr	r3, [pc, #240]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	0a1b      	lsrs	r3, r3, #8
 80054c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ca:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80054cc:	4b39      	ldr	r3, [pc, #228]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	0edb      	lsrs	r3, r3, #27
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80054de:	4b35      	ldr	r3, [pc, #212]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
          {
            pllp = 17U;
 80054ea:	2311      	movs	r3, #17
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	e001      	b.n	80054f4 <RCCEx_GetSAIxPeriphCLKFreq+0xac>
          }
          else
          {
            pllp = 7U;
 80054f0:	2307      	movs	r3, #7
 80054f2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	fb02 f203 	mul.w	r2, r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	e04f      	b.n	80055a6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005506:	4b2b      	ldr	r3, [pc, #172]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005512:	d148      	bne.n	80055a6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 8005514:	4b29      	ldr	r3, [pc, #164]	; (80055bc <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e045      	b.n	80055a6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d142      	bne.n	80055a6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005520:	4b24      	ldr	r3, [pc, #144]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800552c:	d132      	bne.n	8005594 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
 800552e:	4b21      	ldr	r3, [pc, #132]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d02c      	beq.n	8005594 <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800553a:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	3301      	adds	r3, #1
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800554e:	4b19      	ldr	r3, [pc, #100]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005558:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	0edb      	lsrs	r3, r3, #27
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800556c:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          {
            pllp = 17U;
 8005578:	2311      	movs	r3, #17
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	e001      	b.n	8005582 <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
          }
          else
          {
            pllp = 7U;
 800557e:	2307      	movs	r3, #7
 8005580:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	fb02 f203 	mul.w	r2, r2, r3
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e008      	b.n	80055a6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a0:	d101      	bne.n	80055a6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 80055a4:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80055a6:	69fb      	ldr	r3, [r7, #28]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3724      	adds	r7, #36	; 0x24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40021000 	.word	0x40021000
 80055b8:	001fff68 	.word	0x001fff68
 80055bc:	00f42400 	.word	0x00f42400

080055c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e042      	b.n	8005658 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	795b      	ldrb	r3, [r3, #5]
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f008 fae8 	bl	800dbb8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0204 	orr.w	r2, r2, #4
 80055fc:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d104      	bne.n	8005616 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2204      	movs	r2, #4
 8005610:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e020      	b.n	8005658 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005616:	f7fa fe45 	bl	80002a4 <HAL_GetTick>
 800561a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800561c:	e00e      	b.n	800563c <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800561e:	f7fa fe41 	bl	80002a4 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d907      	bls.n	800563c <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2204      	movs	r2, #4
 8005630:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2202      	movs	r2, #2
 8005636:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e00d      	b.n	8005658 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b04      	cmp	r3, #4
 8005648:	d0e9      	beq.n	800561e <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d06c      	beq.n	800574c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f008 fb4c 	bl	800dd24 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	22ca      	movs	r2, #202	; 0xca
 800569a:	625a      	str	r2, [r3, #36]	; 0x24
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2253      	movs	r2, #83	; 0x53
 80056a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 facd 	bl	8005c44 <RTC_EnterInitMode>
 80056aa:	4603      	mov	r3, r0
 80056ac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d14b      	bne.n	800574c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6812      	ldr	r2, [r2, #0]
 80056be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6899      	ldr	r1, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68d2      	ldr	r2, [r2, #12]
 80056ee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6919      	ldr	r1, [r3, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	041a      	lsls	r2, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fad1 	bl	8005cac <RTC_ExitInitMode>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11b      	bne.n	800574c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0203 	bic.w	r2, r2, #3
 8005722:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	22ff      	movs	r2, #255	; 0xff
 8005742:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005756:	b590      	push	{r4, r7, lr}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_RTC_SetTime+0x1a>
 800576c:	2302      	movs	r3, #2
 800576e:	e08b      	b.n	8005888 <HAL_RTC_SetTime+0x132>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	22ca      	movs	r2, #202	; 0xca
 8005786:	625a      	str	r2, [r3, #36]	; 0x24
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2253      	movs	r2, #83	; 0x53
 800578e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fa57 	bl	8005c44 <RTC_EnterInitMode>
 8005796:	4603      	mov	r3, r0
 8005798:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d163      	bne.n	8005868 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d126      	bne.n	80057f4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2200      	movs	r2, #0
 80057b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fab2 	bl	8005d28 <RTC_ByteToBcd2>
 80057c4:	4603      	mov	r3, r0
 80057c6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 faab 	bl	8005d28 <RTC_ByteToBcd2>
 80057d2:	4603      	mov	r3, r0
 80057d4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057d6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	789b      	ldrb	r3, [r3, #2]
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 faa3 	bl	8005d28 <RTC_ByteToBcd2>
 80057e2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057e4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	78db      	ldrb	r3, [r3, #3]
 80057ec:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	e018      	b.n	8005826 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d102      	bne.n	8005808 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2200      	movs	r2, #0
 8005806:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005814:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800581a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	78db      	ldrb	r3, [r3, #3]
 8005820:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005830:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005834:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005844:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6899      	ldr	r1, [r3, #8]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	431a      	orrs	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fa24 	bl	8005cac <RTC_ExitInitMode>
 8005864:	4603      	mov	r3, r0
 8005866:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	22ff      	movs	r2, #255	; 0xff
 800586e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d103      	bne.n	800587e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005886:	7cfb      	ldrb	r3, [r7, #19]
}
 8005888:	4618      	mov	r0, r3
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd90      	pop	{r4, r7, pc}

08005890 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_RTC_SetDate+0x1a>
 80058a6:	2302      	movs	r3, #2
 80058a8:	e075      	b.n	8005996 <HAL_RTC_SetDate+0x106>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2202      	movs	r2, #2
 80058b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10e      	bne.n	80058de <HAL_RTC_SetDate+0x4e>
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	785b      	ldrb	r3, [r3, #1]
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	330a      	adds	r3, #10
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d11c      	bne.n	800591e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fa1d 	bl	8005d28 <RTC_ByteToBcd2>
 80058ee:	4603      	mov	r3, r0
 80058f0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	785b      	ldrb	r3, [r3, #1]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fa16 	bl	8005d28 <RTC_ByteToBcd2>
 80058fc:	4603      	mov	r3, r0
 80058fe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005900:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	789b      	ldrb	r3, [r3, #2]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fa0e 	bl	8005d28 <RTC_ByteToBcd2>
 800590c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800590e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e00e      	b.n	800593c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	78db      	ldrb	r3, [r3, #3]
 8005922:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800592a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005930:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	22ca      	movs	r2, #202	; 0xca
 8005942:	625a      	str	r2, [r3, #36]	; 0x24
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2253      	movs	r2, #83	; 0x53
 800594a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f979 	bl	8005c44 <RTC_EnterInitMode>
 8005952:	4603      	mov	r3, r0
 8005954:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005956:	7cfb      	ldrb	r3, [r7, #19]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10c      	bne.n	8005976 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005966:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800596a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f99d 	bl	8005cac <RTC_ExitInitMode>
 8005972:	4603      	mov	r3, r0
 8005974:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	22ff      	movs	r2, #255	; 0xff
 800597c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800597e:	7cfb      	ldrb	r3, [r7, #19]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d103      	bne.n	800598c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005994:	7cfb      	ldrb	r3, [r7, #19]
}
 8005996:	4618      	mov	r0, r3
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	bd90      	pop	{r4, r7, pc}

0800599e <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800599e:	b590      	push	{r4, r7, lr}
 80059a0:	b089      	sub	sp, #36	; 0x24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_RTC_SetAlarm+0x1a>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e11b      	b.n	8005bf0 <HAL_RTC_SetAlarm+0x252>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d137      	bne.n	8005a3e <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d102      	bne.n	80059e2 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2200      	movs	r2, #0
 80059e0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f99e 	bl	8005d28 <RTC_ByteToBcd2>
 80059ec:	4603      	mov	r3, r0
 80059ee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 f997 	bl	8005d28 <RTC_ByteToBcd2>
 80059fa:	4603      	mov	r3, r0
 80059fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059fe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	789b      	ldrb	r3, [r3, #2]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 f98f 	bl	8005d28 <RTC_ByteToBcd2>
 8005a0a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a0c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	78db      	ldrb	r3, [r3, #3]
 8005a14:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a16:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 f981 	bl	8005d28 <RTC_ByteToBcd2>
 8005a26:	4603      	mov	r3, r0
 8005a28:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a2a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a32:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	e023      	b.n	8005a86 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d102      	bne.n	8005a52 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a5e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a64:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	78db      	ldrb	r3, [r3, #3]
 8005a6a:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a6c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a74:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a76:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a7c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a82:	4313      	orrs	r3, r2
 8005a84:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	22ca      	movs	r2, #202	; 0xca
 8005a98:	625a      	str	r2, [r3, #36]	; 0x24
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2253      	movs	r2, #83	; 0x53
 8005aa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aaa:	d14a      	bne.n	8005b42 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aba:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005acc:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005adc:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005ade:	f7fa fbe1 	bl	80002a4 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005ae4:	e015      	b.n	8005b12 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ae6:	f7fa fbdd 	bl	80002a4 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005af4:	d90d      	bls.n	8005b12 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	22ff      	movs	r2, #255	; 0xff
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2203      	movs	r2, #3
 8005b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e06e      	b.n	8005bf0 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0e2      	beq.n	8005ae6 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b3e:	609a      	str	r2, [r3, #8]
 8005b40:	e049      	b.n	8005bd6 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b50:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005b62:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b72:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8005b74:	f7fa fb96 	bl	80002a4 <HAL_GetTick>
 8005b78:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005b7a:	e015      	b.n	8005ba8 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b7c:	f7fa fb92 	bl	80002a4 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b8a:	d90d      	bls.n	8005ba8 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	22ff      	movs	r2, #255	; 0xff
 8005b92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2203      	movs	r2, #3
 8005b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e023      	b.n	8005bf0 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0e2      	beq.n	8005b7c <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	22ff      	movs	r2, #255	; 0xff
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3724      	adds	r7, #36	; 0x24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd90      	pop	{r4, r7, pc}

08005bf8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c0e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005c10:	f7fa fb48 	bl	80002a4 <HAL_GetTick>
 8005c14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c16:	e009      	b.n	8005c2c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c18:	f7fa fb44 	bl	80002a4 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c26:	d901      	bls.n	8005c2c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e007      	b.n	8005c3c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0ee      	beq.n	8005c18 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d120      	bne.n	8005ca0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f04f 32ff 	mov.w	r2, #4294967295
 8005c66:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c68:	f7fa fb1c 	bl	80002a4 <HAL_GetTick>
 8005c6c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c6e:	e00d      	b.n	8005c8c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005c70:	f7fa fb18 	bl	80002a4 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c7e:	d905      	bls.n	8005c8c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2203      	movs	r2, #3
 8005c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d102      	bne.n	8005ca0 <RTC_EnterInitMode+0x5c>
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d1e7      	bne.n	8005c70 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005cb8:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <RTC_ExitInitMode+0x78>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <RTC_ExitInitMode+0x78>)
 8005cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005cc4:	4b17      	ldr	r3, [pc, #92]	; (8005d24 <RTC_ExitInitMode+0x78>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10c      	bne.n	8005cea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ff91 	bl	8005bf8 <HAL_RTC_WaitForSynchro>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01e      	beq.n	8005d1a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2203      	movs	r2, #3
 8005ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	73fb      	strb	r3, [r7, #15]
 8005ce8:	e017      	b.n	8005d1a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005cea:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <RTC_ExitInitMode+0x78>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	4a0d      	ldr	r2, [pc, #52]	; (8005d24 <RTC_ExitInitMode+0x78>)
 8005cf0:	f023 0320 	bic.w	r3, r3, #32
 8005cf4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff ff7e 	bl	8005bf8 <HAL_RTC_WaitForSynchro>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2203      	movs	r2, #3
 8005d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <RTC_ExitInitMode+0x78>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	4a04      	ldr	r2, [pc, #16]	; (8005d24 <RTC_ExitInitMode+0x78>)
 8005d14:	f043 0320 	orr.w	r3, r3, #32
 8005d18:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40002800 	.word	0x40002800

08005d28 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005d3a:	e005      	b.n	8005d48 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005d42:	7afb      	ldrb	r3, [r7, #11]
 8005d44:	3b0a      	subs	r3, #10
 8005d46:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005d48:	7afb      	ldrb	r3, [r7, #11]
 8005d4a:	2b09      	cmp	r3, #9
 8005d4c:	d8f6      	bhi.n	8005d3c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	7afb      	ldrb	r3, [r7, #11]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	b2db      	uxtb	r3, r3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e022      	b.n	8005dc0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d105      	bne.n	8005d92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f008 f8e9 	bl	800df64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2203      	movs	r2, #3
 8005d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f814 	bl	8005dc8 <HAL_SD_InitCard>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e00a      	b.n	8005dc0 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005dc8:	b5b0      	push	{r4, r5, r7, lr}
 8005dca:	b090      	sub	sp, #64	; 0x40
 8005dcc:	af04      	add	r7, sp, #16
 8005dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61fb      	str	r3, [r7, #28]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005de4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005de8:	f7fe fe26 	bl	8004a38 <HAL_RCCEx_GetPeriphCLKFreq>
 8005dec:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d109      	bne.n	8005e08 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e08d      	b.n	8005f24 <HAL_SD_InitCard+0x15c>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk/400000U) - 2U);
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	09db      	lsrs	r3, r3, #7
 8005e0c:	4a47      	ldr	r2, [pc, #284]	; (8005f2c <HAL_SD_InitCard+0x164>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	3b02      	subs	r3, #2
 8005e16:	623b      	str	r3, [r7, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681d      	ldr	r5, [r3, #0]
 8005e1c:	466c      	mov	r4, sp
 8005e1e:	f107 0318 	add.w	r3, r7, #24
 8005e22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e2a:	f107 030c 	add.w	r3, r7, #12
 8005e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e30:	4628      	mov	r0, r5
 8005e32:	f002 fd03 	bl	800883c <SDMMC_Init>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8005e3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e06d      	b.n	8005f24 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e56:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f002 fd38 	bl	80088d2 <SDMMC_PowerState_ON>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8005e68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_SD_InitCard+0xac>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e057      	b.n	8005f24 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e82:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	3302      	adds	r3, #2
 8005e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005e90:	4a27      	ldr	r2, [pc, #156]	; (8005f30 <HAL_SD_InitCard+0x168>)
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	3301      	adds	r3, #1
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fa fa0e 	bl	80002bc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 ff01 	bl	8006ca8 <SD_PowerON>
 8005ea6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00b      	beq.n	8005ec6 <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e02e      	b.n	8005f24 <HAL_SD_InitCard+0x15c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fe20 	bl	8006b0c <SD_InitCard>
 8005ecc:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <HAL_SD_InitCard+0x124>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e01b      	b.n	8005f24 <HAL_SD_InitCard+0x15c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f002 fd7f 	bl	80089f8 <SDMMC_CmdBlockLength>
 8005efa:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00f      	beq.n	8005f22 <HAL_SD_InitCard+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a0b      	ldr	r2, [pc, #44]	; (8005f34 <HAL_SD_InitCard+0x16c>)
 8005f08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <HAL_SD_InitCard+0x15c>
  }

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3730      	adds	r7, #48	; 0x30
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f2c:	014f8b59 	.word	0x014f8b59
 8005f30:	00012110 	.word	0x00012110
 8005f34:	004005ff 	.word	0x004005ff

08005f38 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b092      	sub	sp, #72	; 0x48
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005f46:	f7fa f9ad 	bl	80002a4 <HAL_GetTick>
 8005f4a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d107      	bne.n	8005f6a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e1bd      	b.n	80062e6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	f040 81b0 	bne.w	80062d8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	441a      	add	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d907      	bls.n	8005f9c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e1a4      	b.n	80062e6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2203      	movs	r2, #3
 8005fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d002      	beq.n	8005fba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	025b      	lsls	r3, r3, #9
 8005fb8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fba:	f04f 33ff 	mov.w	r3, #4294967295
 8005fbe:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	025b      	lsls	r3, r3, #9
 8005fc4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005fc6:	2390      	movs	r3, #144	; 0x90
 8005fc8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005fca:	2302      	movs	r3, #2
 8005fcc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f107 0214 	add.w	r2, r7, #20
 8005fde:	4611      	mov	r1, r2
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f002 fcdd 	bl	80089a0 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d90a      	bls.n	8006002 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f002 fd41 	bl	8008a80 <SDMMC_CmdReadMultiBlock>
 8005ffe:	6478      	str	r0, [r7, #68]	; 0x44
 8006000:	e009      	b.n	8006016 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800600e:	4618      	mov	r0, r3
 8006010:	f002 fd14 	bl	8008a3c <SDMMC_CmdReadSingleBlock>
 8006014:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006018:	2b00      	cmp	r3, #0
 800601a:	d012      	beq.n	8006042 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a7a      	ldr	r2, [pc, #488]	; (800620c <HAL_SD_ReadBlocks+0x2d4>)
 8006022:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800602a:	431a      	orrs	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e151      	b.n	80062e6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006046:	e061      	b.n	800610c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d03c      	beq.n	80060d0 <HAL_SD_ReadBlocks+0x198>
 8006056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d039      	beq.n	80060d0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800605c:	2300      	movs	r3, #0
 800605e:	643b      	str	r3, [r7, #64]	; 0x40
 8006060:	e033      	b.n	80060ca <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f002 fc15 	bl	8008896 <SDMMC_ReadFIFO>
 800606c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006070:	b2da      	uxtb	r2, r3
 8006072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006074:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006078:	3301      	adds	r3, #1
 800607a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800607c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607e:	3b01      	subs	r3, #1
 8006080:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	0a1b      	lsrs	r3, r3, #8
 8006086:	b2da      	uxtb	r2, r3
 8006088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608e:	3301      	adds	r3, #1
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006094:	3b01      	subs	r3, #1
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	b2da      	uxtb	r2, r3
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a4:	3301      	adds	r3, #1
 80060a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80060a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060aa:	3b01      	subs	r3, #1
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	0e1b      	lsrs	r3, r3, #24
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	3301      	adds	r3, #1
 80060bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80060be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c0:	3b01      	subs	r3, #1
 80060c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80060c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c6:	3301      	adds	r3, #1
 80060c8:	643b      	str	r3, [r7, #64]	; 0x40
 80060ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060cc:	2b07      	cmp	r3, #7
 80060ce:	d9c8      	bls.n	8006062 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80060d0:	f7fa f8e8 	bl	80002a4 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060dc:	429a      	cmp	r2, r3
 80060de:	d902      	bls.n	80060e6 <HAL_SD_ReadBlocks+0x1ae>
 80060e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d112      	bne.n	800610c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a48      	ldr	r2, [pc, #288]	; (800620c <HAL_SD_ReadBlocks+0x2d4>)
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e0ec      	b.n	80062e6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006116:	2b00      	cmp	r3, #0
 8006118:	d096      	beq.n	8006048 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006124:	2b00      	cmp	r3, #0
 8006126:	d022      	beq.n	800616e <HAL_SD_ReadBlocks+0x236>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d91f      	bls.n	800616e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	2b03      	cmp	r3, #3
 8006134:	d01b      	beq.n	800616e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f002 fd06 	bl	8008b4c <SDMMC_CmdStopTransfer>
 8006140:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006144:	2b00      	cmp	r3, #0
 8006146:	d012      	beq.n	800616e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2f      	ldr	r2, [pc, #188]	; (800620c <HAL_SD_ReadBlocks+0x2d4>)
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006156:	431a      	orrs	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e0bb      	b.n	80062e6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d012      	beq.n	80061a2 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a22      	ldr	r2, [pc, #136]	; (800620c <HAL_SD_ReadBlocks+0x2d4>)
 8006182:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	f043 0208 	orr.w	r2, r3, #8
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e0a1      	b.n	80062e6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d012      	beq.n	80061d6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a15      	ldr	r2, [pc, #84]	; (800620c <HAL_SD_ReadBlocks+0x2d4>)
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	f043 0202 	orr.w	r2, r3, #2
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e087      	b.n	80062e6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d064      	beq.n	80062ae <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a08      	ldr	r2, [pc, #32]	; (800620c <HAL_SD_ReadBlocks+0x2d4>)
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	f043 0220 	orr.w	r2, r3, #32
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e06d      	b.n	80062e6 <HAL_SD_ReadBlocks+0x3ae>
 800620a:	bf00      	nop
 800620c:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f002 fb3e 	bl	8008896 <SDMMC_ReadFIFO>
 800621a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	b2da      	uxtb	r2, r3
 8006220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006222:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006226:	3301      	adds	r3, #1
 8006228:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800622a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622c:	3b01      	subs	r3, #1
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	0a1b      	lsrs	r3, r3, #8
 8006234:	b2da      	uxtb	r2, r3
 8006236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006238:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800623a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623c:	3301      	adds	r3, #1
 800623e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006242:	3b01      	subs	r3, #1
 8006244:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	0c1b      	lsrs	r3, r3, #16
 800624a:	b2da      	uxtb	r2, r3
 800624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	3301      	adds	r3, #1
 8006254:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006258:	3b01      	subs	r3, #1
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625e:	0e1b      	lsrs	r3, r3, #24
 8006260:	b2da      	uxtb	r2, r3
 8006262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006264:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	3301      	adds	r3, #1
 800626a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800626c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626e:	3b01      	subs	r3, #1
 8006270:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006272:	f7fa f817 	bl	80002a4 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800627e:	429a      	cmp	r2, r3
 8006280:	d902      	bls.n	8006288 <HAL_SD_ReadBlocks+0x350>
 8006282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006284:	2b00      	cmp	r3, #0
 8006286:	d112      	bne.n	80062ae <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a18      	ldr	r2, [pc, #96]	; (80062f0 <HAL_SD_ReadBlocks+0x3b8>)
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e01b      	b.n	80062e6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_SD_ReadBlocks+0x38a>
 80062bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1a6      	bne.n	8006210 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e006      	b.n	80062e6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
  }
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3748      	adds	r7, #72	; 0x48
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	004005ff 	.word	0x004005ff

080062f4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b092      	sub	sp, #72	; 0x48
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006302:	f7f9 ffcf 	bl	80002a4 <HAL_GetTick>
 8006306:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d107      	bne.n	8006326 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e165      	b.n	80065f2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b01      	cmp	r3, #1
 8006330:	f040 8158 	bne.w	80065e4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800633a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	441a      	add	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006344:	429a      	cmp	r2, r3
 8006346:	d907      	bls.n	8006358 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e14c      	b.n	80065f2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2203      	movs	r2, #3
 800635c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2200      	movs	r2, #0
 8006366:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636c:	2b01      	cmp	r3, #1
 800636e:	d002      	beq.n	8006376 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006372:	025b      	lsls	r3, r3, #9
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006376:	f04f 33ff 	mov.w	r3, #4294967295
 800637a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	025b      	lsls	r3, r3, #9
 8006380:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006382:	2390      	movs	r3, #144	; 0x90
 8006384:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006386:	2300      	movs	r3, #0
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800638a:	2300      	movs	r3, #0
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800638e:	2301      	movs	r3, #1
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f107 0218 	add.w	r2, r7, #24
 800639a:	4611      	mov	r1, r2
 800639c:	4618      	mov	r0, r3
 800639e:	f002 faff 	bl	80089a0 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d90a      	bls.n	80063be <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063b4:	4618      	mov	r0, r3
 80063b6:	f002 fba7 	bl	8008b08 <SDMMC_CmdWriteMultiBlock>
 80063ba:	6478      	str	r0, [r7, #68]	; 0x44
 80063bc:	e009      	b.n	80063d2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2210      	movs	r2, #16
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063ca:	4618      	mov	r0, r3
 80063cc:	f002 fb7a 	bl	8008ac4 <SDMMC_CmdWriteSingleBlock>
 80063d0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80063d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d012      	beq.n	80063fe <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a87      	ldr	r2, [pc, #540]	; (80065fc <HAL_SD_WriteBlocks+0x308>)
 80063de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e6:	431a      	orrs	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e0f9      	b.n	80065f2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006402:	e065      	b.n	80064d0 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d040      	beq.n	8006494 <HAL_SD_WriteBlocks+0x1a0>
 8006412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d03d      	beq.n	8006494 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006418:	2300      	movs	r3, #0
 800641a:	643b      	str	r3, [r7, #64]	; 0x40
 800641c:	e037      	b.n	800648e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	3301      	adds	r3, #1
 8006428:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800642a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642c:	3b01      	subs	r3, #1
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	021a      	lsls	r2, r3, #8
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800643c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643e:	3301      	adds	r3, #1
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006444:	3b01      	subs	r3, #1
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	041a      	lsls	r2, r3, #16
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006456:	3301      	adds	r3, #1
 8006458:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800645a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645c:	3b01      	subs	r3, #1
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	061a      	lsls	r2, r3, #24
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800646c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646e:	3301      	adds	r3, #1
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006474:	3b01      	subs	r3, #1
 8006476:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f107 0214 	add.w	r2, r7, #20
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f002 fa14 	bl	80088b0 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800648a:	3301      	adds	r3, #1
 800648c:	643b      	str	r3, [r7, #64]	; 0x40
 800648e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006490:	2b07      	cmp	r3, #7
 8006492:	d9c4      	bls.n	800641e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006494:	f7f9 ff06 	bl	80002a4 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d902      	bls.n	80064aa <HAL_SD_WriteBlocks+0x1b6>
 80064a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d112      	bne.n	80064d0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a53      	ldr	r2, [pc, #332]	; (80065fc <HAL_SD_WriteBlocks+0x308>)
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b8:	431a      	orrs	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e090      	b.n	80065f2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d092      	beq.n	8006404 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d022      	beq.n	8006532 <HAL_SD_WriteBlocks+0x23e>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d91f      	bls.n	8006532 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d01b      	beq.n	8006532 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f002 fb24 	bl	8008b4c <SDMMC_CmdStopTransfer>
 8006504:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006508:	2b00      	cmp	r3, #0
 800650a:	d012      	beq.n	8006532 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a3a      	ldr	r2, [pc, #232]	; (80065fc <HAL_SD_WriteBlocks+0x308>)
 8006512:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800651a:	431a      	orrs	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e05f      	b.n	80065f2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d012      	beq.n	8006566 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2d      	ldr	r2, [pc, #180]	; (80065fc <HAL_SD_WriteBlocks+0x308>)
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	f043 0208 	orr.w	r2, r3, #8
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e045      	b.n	80065f2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d012      	beq.n	800659a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a20      	ldr	r2, [pc, #128]	; (80065fc <HAL_SD_WriteBlocks+0x308>)
 800657a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	f043 0202 	orr.w	r2, r3, #2
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e02b      	b.n	80065f2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d012      	beq.n	80065ce <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a13      	ldr	r2, [pc, #76]	; (80065fc <HAL_SD_WriteBlocks+0x308>)
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	f043 0210 	orr.w	r2, r3, #16
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e011      	b.n	80065f2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80065d6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	e006      	b.n	80065f2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
  }
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3748      	adds	r7, #72	; 0x48
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	004005ff 	.word	0x004005ff

08006600 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800660e:	0f9b      	lsrs	r3, r3, #30
 8006610:	b2da      	uxtb	r2, r3
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800661a:	0e9b      	lsrs	r3, r3, #26
 800661c:	b2db      	uxtb	r3, r3
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	b2da      	uxtb	r2, r3
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800662c:	0e1b      	lsrs	r3, r3, #24
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	b2da      	uxtb	r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800663e:	0c1b      	lsrs	r3, r3, #16
 8006640:	b2da      	uxtb	r2, r3
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664a:	0a1b      	lsrs	r3, r3, #8
 800664c:	b2da      	uxtb	r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006656:	b2da      	uxtb	r2, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006660:	0d1b      	lsrs	r3, r3, #20
 8006662:	b29a      	uxth	r2, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	b2da      	uxtb	r2, r3
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800667e:	0bdb      	lsrs	r3, r3, #15
 8006680:	b2db      	uxtb	r3, r3
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	b2da      	uxtb	r2, r3
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006690:	0b9b      	lsrs	r3, r3, #14
 8006692:	b2db      	uxtb	r3, r3
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	b2da      	uxtb	r2, r3
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a2:	0b5b      	lsrs	r3, r3, #13
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b4:	0b1b      	lsrs	r3, r3, #12
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2200      	movs	r2, #0
 80066c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d163      	bne.n	8006798 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066d4:	009a      	lsls	r2, r3, #2
 80066d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066da:	4013      	ands	r3, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80066e0:	0f92      	lsrs	r2, r2, #30
 80066e2:	431a      	orrs	r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ec:	0edb      	lsrs	r3, r3, #27
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fe:	0e1b      	lsrs	r3, r3, #24
 8006700:	b2db      	uxtb	r3, r3
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	b2da      	uxtb	r2, r3
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006710:	0d5b      	lsrs	r3, r3, #21
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	b2da      	uxtb	r2, r3
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006722:	0c9b      	lsrs	r3, r3, #18
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	b2da      	uxtb	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006734:	0bdb      	lsrs	r3, r3, #15
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	b2da      	uxtb	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	7e1b      	ldrb	r3, [r3, #24]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	3302      	adds	r3, #2
 8006758:	2201      	movs	r2, #1
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006762:	fb02 f203 	mul.w	r2, r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	7a1b      	ldrb	r3, [r3, #8]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	2201      	movs	r2, #1
 8006776:	409a      	lsls	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006784:	0a52      	lsrs	r2, r2, #9
 8006786:	fb02 f203 	mul.w	r2, r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006794:	661a      	str	r2, [r3, #96]	; 0x60
 8006796:	e031      	b.n	80067fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679c:	2b01      	cmp	r3, #1
 800679e:	d11d      	bne.n	80067dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ae:	0c1b      	lsrs	r3, r3, #16
 80067b0:	431a      	orrs	r2, r3
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	3301      	adds	r3, #1
 80067bc:	029a      	lsls	r2, r3, #10
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067d0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	661a      	str	r2, [r3, #96]	; 0x60
 80067da:	e00f      	b.n	80067fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a58      	ldr	r2, [pc, #352]	; (8006944 <HAL_SD_GetCardCSD+0x344>)
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e09d      	b.n	8006938 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006800:	0b9b      	lsrs	r3, r3, #14
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	b2da      	uxtb	r2, r3
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006812:	09db      	lsrs	r3, r3, #7
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681a:	b2da      	uxtb	r2, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006824:	b2db      	uxtb	r3, r3
 8006826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800682a:	b2da      	uxtb	r2, r3
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006834:	0fdb      	lsrs	r3, r3, #31
 8006836:	b2da      	uxtb	r2, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	0f5b      	lsrs	r3, r3, #29
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	b2da      	uxtb	r2, r3
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	0e9b      	lsrs	r3, r3, #26
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	b2da      	uxtb	r2, r3
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006864:	0d9b      	lsrs	r3, r3, #22
 8006866:	b2db      	uxtb	r3, r3
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	b2da      	uxtb	r2, r3
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	0d5b      	lsrs	r3, r3, #21
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	0c1b      	lsrs	r3, r3, #16
 8006894:	b2db      	uxtb	r3, r3
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	b2da      	uxtb	r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a6:	0bdb      	lsrs	r3, r3, #15
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ba:	0b9b      	lsrs	r3, r3, #14
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	0b5b      	lsrs	r3, r3, #13
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	0b1b      	lsrs	r3, r3, #12
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f6:	0a9b      	lsrs	r3, r3, #10
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	b2db      	uxtb	r3, r3
 800690e:	f003 0303 	and.w	r3, r3, #3
 8006912:	b2da      	uxtb	r2, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691e:	085b      	lsrs	r3, r3, #1
 8006920:	b2db      	uxtb	r3, r3
 8006922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006926:	b2da      	uxtb	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	004005ff 	.word	0x004005ff

08006948 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80069a0:	b5b0      	push	{r4, r5, r7, lr}
 80069a2:	b08e      	sub	sp, #56	; 0x38
 80069a4:	af04      	add	r7, sp, #16
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2203      	movs	r2, #3
 80069b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d02e      	beq.n	8006a1e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c6:	d106      	bne.n	80069d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
 80069d4:	e029      	b.n	8006a2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069dc:	d10a      	bne.n	80069f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa18 	bl	8006e14 <SD_WideBus_Enable>
 80069e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	639a      	str	r2, [r3, #56]	; 0x38
 80069f2:	e01a      	b.n	8006a2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fa55 	bl	8006eaa <SD_WideBus_Disable>
 8006a00:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	639a      	str	r2, [r3, #56]	; 0x38
 8006a0e:	e00c      	b.n	8006a2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
 8006a1c:	e005      	b.n	8006a2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a24      	ldr	r2, [pc, #144]	; (8006ac8 <HAL_SD_ConfigWideBusOperation+0x128>)
 8006a38:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a40:	e01f      	b.n	8006a82 <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681d      	ldr	r5, [r3, #0]
 8006a68:	466c      	mov	r4, sp
 8006a6a:	f107 0314 	add.w	r3, r7, #20
 8006a6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a76:	f107 0308 	add.w	r3, r7, #8
 8006a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f001 fedd 	bl	800883c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f001 ffb4 	bl	80089f8 <SDMMC_CmdBlockLength>
 8006a90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00c      	beq.n	8006ab2 <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a0a      	ldr	r2, [pc, #40]	; (8006ac8 <HAL_SD_ConfigWideBusOperation+0x128>)
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3728      	adds	r7, #40	; 0x28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	004005ff 	.word	0x004005ff

08006acc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006ad8:	f107 030c 	add.w	r3, r7, #12
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f970 	bl	8006dc4 <SD_SendStatus>
 8006ae4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	0a5b      	lsrs	r3, r3, #9
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006b02:	693b      	ldr	r3, [r7, #16]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b0c:	b5b0      	push	{r4, r5, r7, lr}
 8006b0e:	b094      	sub	sp, #80	; 0x50
 8006b10:	af04      	add	r7, sp, #16
 8006b12:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006b14:	2301      	movs	r3, #1
 8006b16:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 fee7 	bl	80088f0 <SDMMC_GetPowerState>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006b2c:	e0b7      	b.n	8006c9e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d02f      	beq.n	8006b96 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f002 f910 	bl	8008d60 <SDMMC_CmdSendCID>
 8006b40:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <SD_InitCard+0x40>
    {
      return errorstate;
 8006b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4a:	e0a8      	b.n	8006c9e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2100      	movs	r1, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 ff11 	bl	800897a <SDMMC_GetResponse>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2104      	movs	r1, #4
 8006b64:	4618      	mov	r0, r3
 8006b66:	f001 ff08 	bl	800897a <SDMMC_GetResponse>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2108      	movs	r1, #8
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 feff 	bl	800897a <SDMMC_GetResponse>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	210c      	movs	r1, #12
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 fef6 	bl	800897a <SDMMC_GetResponse>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d00d      	beq.n	8006bba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f107 020e 	add.w	r2, r7, #14
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f002 f916 	bl	8008dda <SDMMC_CmdSetRelAdd>
 8006bae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <SD_InitCard+0xae>
    {
      return errorstate;
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb8:	e071      	b.n	8006c9e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d036      	beq.n	8006c30 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006bc2:	89fb      	ldrh	r3, [r7, #14]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd2:	041b      	lsls	r3, r3, #16
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f002 f8e0 	bl	8008d9c <SDMMC_CmdSendCSD>
 8006bdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be6:	e05a      	b.n	8006c9e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2100      	movs	r1, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 fec3 	bl	800897a <SDMMC_GetResponse>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2104      	movs	r1, #4
 8006c00:	4618      	mov	r0, r3
 8006c02:	f001 feba 	bl	800897a <SDMMC_GetResponse>
 8006c06:	4602      	mov	r2, r0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2108      	movs	r1, #8
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 feb1 	bl	800897a <SDMMC_GetResponse>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	210c      	movs	r1, #12
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 fea8 	bl	800897a <SDMMC_GetResponse>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2104      	movs	r1, #4
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 fe9f 	bl	800897a <SDMMC_GetResponse>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	0d1a      	lsrs	r2, r3, #20
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006c44:	f107 0310 	add.w	r3, r7, #16
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff fcd8 	bl	8006600 <HAL_SD_GetCardCSD>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c5a:	e020      	b.n	8006c9e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6819      	ldr	r1, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c64:	041b      	lsls	r3, r3, #16
 8006c66:	f04f 0400 	mov.w	r4, #0
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4623      	mov	r3, r4
 8006c6e:	4608      	mov	r0, r1
 8006c70:	f001 ff8e 	bl	8008b90 <SDMMC_CmdSelDesel>
 8006c74:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <SD_InitCard+0x174>
  {
    return errorstate;
 8006c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7e:	e00e      	b.n	8006c9e <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681d      	ldr	r5, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	466c      	mov	r4, sp
 8006c88:	f103 0210 	add.w	r2, r3, #16
 8006c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c92:	3304      	adds	r3, #4
 8006c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c96:	4628      	mov	r0, r5
 8006c98:	f001 fdd0 	bl	800883c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3740      	adds	r7, #64	; 0x40
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006ca8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f001 ff88 	bl	8008bd6 <SDMMC_CmdGoIdleState>
 8006cc6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	e072      	b.n	8006db8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 ff9b 	bl	8008c12 <SDMMC_CmdOperCond>
 8006cdc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00d      	beq.n	8006d00 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 ff71 	bl	8008bd6 <SDMMC_CmdGoIdleState>
 8006cf4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d004      	beq.n	8006d06 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	e05b      	b.n	8006db8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d137      	bne.n	8006d7e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2100      	movs	r1, #0
 8006d14:	4618      	mov	r0, r3
 8006d16:	f001 ff9b 	bl	8008c50 <SDMMC_CmdAppCommand>
 8006d1a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d02d      	beq.n	8006d7e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d26:	e047      	b.n	8006db8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 ff8e 	bl	8008c50 <SDMMC_CmdAppCommand>
 8006d34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <SD_PowerON+0x98>
    {
      return errorstate;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	e03b      	b.n	8006db8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	491e      	ldr	r1, [pc, #120]	; (8006dc0 <SD_PowerON+0x118>)
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 ffa4 	bl	8008c94 <SDMMC_CmdAppOperCommand>
 8006d4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d58:	e02e      	b.n	8006db8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f001 fe0a 	bl	800897a <SDMMC_GetResponse>
 8006d66:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	0fdb      	lsrs	r3, r3, #31
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <SD_PowerON+0xcc>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <SD_PowerON+0xce>
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]

    count++;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d802      	bhi.n	8006d8e <SD_PowerON+0xe6>
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0cc      	beq.n	8006d28 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d902      	bls.n	8006d9e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d9c:	e00c      	b.n	8006db8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	645a      	str	r2, [r3, #68]	; 0x44
 8006dae:	e002      	b.n	8006db6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	c1100000 	.word	0xc1100000

08006dc4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d102      	bne.n	8006dda <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006dd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dd8:	e018      	b.n	8006e0c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de2:	041b      	lsls	r3, r3, #16
 8006de4:	4619      	mov	r1, r3
 8006de6:	4610      	mov	r0, r2
 8006de8:	f002 f818 	bl	8008e1c <SDMMC_CmdSendStatus>
 8006dec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	e009      	b.n	8006e0c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f001 fdbb 	bl	800897a <SDMMC_GetResponse>
 8006e04:	4602      	mov	r2, r0
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	2300      	movs	r3, #0
 8006e22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 fda5 	bl	800897a <SDMMC_GetResponse>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e3a:	d102      	bne.n	8006e42 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e40:	e02f      	b.n	8006ea2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e42:	f107 030c 	add.w	r3, r7, #12
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f879 	bl	8006f40 <SD_FindSCR>
 8006e4e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	e023      	b.n	8006ea2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01c      	beq.n	8006e9e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6c:	041b      	lsls	r3, r3, #16
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f001 feed 	bl	8008c50 <SDMMC_CmdAppCommand>
 8006e76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	e00f      	b.n	8006ea2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2102      	movs	r1, #2
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 ff26 	bl	8008cda <SDMMC_CmdBusWidth>
 8006e8e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	e003      	b.n	8006ea2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e001      	b.n	8006ea2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b086      	sub	sp, #24
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 fd5a 	bl	800897a <SDMMC_GetResponse>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ed0:	d102      	bne.n	8006ed8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ed2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ed6:	e02f      	b.n	8006f38 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ed8:	f107 030c 	add.w	r3, r7, #12
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f82e 	bl	8006f40 <SD_FindSCR>
 8006ee4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	e023      	b.n	8006f38 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01c      	beq.n	8006f34 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f001 fea2 	bl	8008c50 <SDMMC_CmdAppCommand>
 8006f0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	e00f      	b.n	8006f38 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f001 fedb 	bl	8008cda <SDMMC_CmdBusWidth>
 8006f24:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	e003      	b.n	8006f38 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	e001      	b.n	8006f38 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006f40:	b590      	push	{r4, r7, lr}
 8006f42:	b08f      	sub	sp, #60	; 0x3c
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f4a:	f7f9 f9ab 	bl	80002a4 <HAL_GetTick>
 8006f4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006f54:	2300      	movs	r3, #0
 8006f56:	60bb      	str	r3, [r7, #8]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2108      	movs	r1, #8
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 fd46 	bl	80089f8 <SDMMC_CmdBlockLength>
 8006f6c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	e0a9      	b.n	80070cc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f80:	041b      	lsls	r3, r3, #16
 8006f82:	4619      	mov	r1, r3
 8006f84:	4610      	mov	r0, r2
 8006f86:	f001 fe63 	bl	8008c50 <SDMMC_CmdAppCommand>
 8006f8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	e09a      	b.n	80070cc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f96:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006f9c:	2308      	movs	r3, #8
 8006f9e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006fa0:	2330      	movs	r3, #48	; 0x30
 8006fa2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006fac:	2301      	movs	r3, #1
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f107 0210 	add.w	r2, r7, #16
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 fcf0 	bl	80089a0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 feaa 	bl	8008d1e <SDMMC_CmdSendSCR>
 8006fca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d022      	beq.n	8007018 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	e07a      	b.n	80070cc <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00e      	beq.n	8007002 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6819      	ldr	r1, [r3, #0]
 8006fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	f107 0208 	add.w	r2, r7, #8
 8006ff0:	18d4      	adds	r4, r2, r3
 8006ff2:	4608      	mov	r0, r1
 8006ff4:	f001 fc4f 	bl	8008896 <SDMMC_ReadFIFO>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	6023      	str	r3, [r4, #0]
      index++;
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffe:	3301      	adds	r3, #1
 8007000:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007002:	f7f9 f94f 	bl	80002a4 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007010:	d102      	bne.n	8007018 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007012:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007016:	e059      	b.n	80070cc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800701e:	f240 432a 	movw	r3, #1066	; 0x42a
 8007022:	4013      	ands	r3, r2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d0d6      	beq.n	8006fd6 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2208      	movs	r2, #8
 800703c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800703e:	2308      	movs	r3, #8
 8007040:	e044      	b.n	80070cc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2202      	movs	r2, #2
 8007056:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007058:	2302      	movs	r3, #2
 800705a:	e037      	b.n	80070cc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d005      	beq.n	8007076 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2220      	movs	r2, #32
 8007070:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007072:	2320      	movs	r3, #32
 8007074:	e02a      	b.n	80070cc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f240 523a 	movw	r2, #1338	; 0x53a
 800707e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	061a      	lsls	r2, r3, #24
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800708c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	0a1b      	lsrs	r3, r3, #8
 8007092:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007096:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	0e1b      	lsrs	r3, r3, #24
 800709c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a0:	601a      	str	r2, [r3, #0]
    scr++;
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	3304      	adds	r3, #4
 80070a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	061a      	lsls	r2, r3, #24
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	0a1b      	lsrs	r3, r3, #8
 80070ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	0e1b      	lsrs	r3, r3, #24
 80070c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	373c      	adds	r7, #60	; 0x3c
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd90      	pop	{r4, r7, pc}

080070d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e095      	b.n	8007212 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d108      	bne.n	8007100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f6:	d009      	beq.n	800710c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	61da      	str	r2, [r3, #28]
 80070fe:	e005      	b.n	800710c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f006 ffbc 	bl	800e0a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007142:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800714c:	d902      	bls.n	8007154 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	e002      	b.n	800715a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007158:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007162:	d007      	beq.n	8007174 <HAL_SPI_Init+0xa0>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800716c:	d002      	beq.n	8007174 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b6:	ea42 0103 	orr.w	r1, r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	0c1b      	lsrs	r3, r3, #16
 80071d0:	f003 0204 	and.w	r2, r3, #4
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	431a      	orrs	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e2:	f003 0308 	and.w	r3, r3, #8
 80071e6:	431a      	orrs	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80071f0:	ea42 0103 	orr.w	r1, r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e049      	b.n	80072c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f007 f913 	bl	800e46c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3304      	adds	r3, #4
 8007256:	4619      	mov	r1, r3
 8007258:	4610      	mov	r0, r2
 800725a:	f000 f9c7 	bl	80075ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e049      	b.n	800736e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d106      	bne.n	80072f4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f841 	bl	8007376 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3304      	adds	r3, #4
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f000 f970 	bl	80075ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e064      	b.n	8007470 <HAL_TIM_OC_ConfigChannel+0xe4>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b14      	cmp	r3, #20
 80073b2:	d857      	bhi.n	8007464 <HAL_TIM_OC_ConfigChannel+0xd8>
 80073b4:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <HAL_TIM_OC_ConfigChannel+0x30>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	08007411 	.word	0x08007411
 80073c0:	08007465 	.word	0x08007465
 80073c4:	08007465 	.word	0x08007465
 80073c8:	08007465 	.word	0x08007465
 80073cc:	0800741f 	.word	0x0800741f
 80073d0:	08007465 	.word	0x08007465
 80073d4:	08007465 	.word	0x08007465
 80073d8:	08007465 	.word	0x08007465
 80073dc:	0800742d 	.word	0x0800742d
 80073e0:	08007465 	.word	0x08007465
 80073e4:	08007465 	.word	0x08007465
 80073e8:	08007465 	.word	0x08007465
 80073ec:	0800743b 	.word	0x0800743b
 80073f0:	08007465 	.word	0x08007465
 80073f4:	08007465 	.word	0x08007465
 80073f8:	08007465 	.word	0x08007465
 80073fc:	08007449 	.word	0x08007449
 8007400:	08007465 	.word	0x08007465
 8007404:	08007465 	.word	0x08007465
 8007408:	08007465 	.word	0x08007465
 800740c:	08007457 	.word	0x08007457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68b9      	ldr	r1, [r7, #8]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f956 	bl	80076c8 <TIM_OC1_SetConfig>
      break;
 800741c:	e023      	b.n	8007466 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68b9      	ldr	r1, [r7, #8]
 8007424:	4618      	mov	r0, r3
 8007426:	f000 f9cb 	bl	80077c0 <TIM_OC2_SetConfig>
      break;
 800742a:	e01c      	b.n	8007466 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fa3e 	bl	80078b4 <TIM_OC3_SetConfig>
      break;
 8007438:	e015      	b.n	8007466 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 faaf 	bl	80079a4 <TIM_OC4_SetConfig>
      break;
 8007446:	e00e      	b.n	8007466 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fb06 	bl	8007a60 <TIM_OC5_SetConfig>
      break;
 8007454:	e007      	b.n	8007466 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fb57 	bl	8007b10 <TIM_OC6_SetConfig>
      break;
 8007462:	e000      	b.n	8007466 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8007464:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_TIM_ConfigClockSource+0x18>
 800748c:	2302      	movs	r3, #2
 800748e:	e0a8      	b.n	80075e2 <HAL_TIM_ConfigClockSource+0x16a>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b40      	cmp	r3, #64	; 0x40
 80074ca:	d067      	beq.n	800759c <HAL_TIM_ConfigClockSource+0x124>
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d80b      	bhi.n	80074e8 <HAL_TIM_ConfigClockSource+0x70>
 80074d0:	2b10      	cmp	r3, #16
 80074d2:	d073      	beq.n	80075bc <HAL_TIM_ConfigClockSource+0x144>
 80074d4:	2b10      	cmp	r3, #16
 80074d6:	d802      	bhi.n	80074de <HAL_TIM_ConfigClockSource+0x66>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d06f      	beq.n	80075bc <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074dc:	e078      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d06c      	beq.n	80075bc <HAL_TIM_ConfigClockSource+0x144>
 80074e2:	2b30      	cmp	r3, #48	; 0x30
 80074e4:	d06a      	beq.n	80075bc <HAL_TIM_ConfigClockSource+0x144>
      break;
 80074e6:	e073      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80074e8:	2b70      	cmp	r3, #112	; 0x70
 80074ea:	d00d      	beq.n	8007508 <HAL_TIM_ConfigClockSource+0x90>
 80074ec:	2b70      	cmp	r3, #112	; 0x70
 80074ee:	d804      	bhi.n	80074fa <HAL_TIM_ConfigClockSource+0x82>
 80074f0:	2b50      	cmp	r3, #80	; 0x50
 80074f2:	d033      	beq.n	800755c <HAL_TIM_ConfigClockSource+0xe4>
 80074f4:	2b60      	cmp	r3, #96	; 0x60
 80074f6:	d041      	beq.n	800757c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80074f8:	e06a      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80074fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074fe:	d066      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0x156>
 8007500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007504:	d017      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007506:	e063      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	6899      	ldr	r1, [r3, #8]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f000 fbce 	bl	8007cb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800752a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	609a      	str	r2, [r3, #8]
      break;
 8007534:	e04c      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	6899      	ldr	r1, [r3, #8]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f000 fbb7 	bl	8007cb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007558:	609a      	str	r2, [r3, #8]
      break;
 800755a:	e039      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	6859      	ldr	r1, [r3, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	461a      	mov	r2, r3
 800756a:	f000 fb2b 	bl	8007bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2150      	movs	r1, #80	; 0x50
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fb84 	bl	8007c82 <TIM_ITRx_SetConfig>
      break;
 800757a:	e029      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	6859      	ldr	r1, [r3, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	461a      	mov	r2, r3
 800758a:	f000 fb4a 	bl	8007c22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2160      	movs	r1, #96	; 0x60
 8007594:	4618      	mov	r0, r3
 8007596:	f000 fb74 	bl	8007c82 <TIM_ITRx_SetConfig>
      break;
 800759a:	e019      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6818      	ldr	r0, [r3, #0]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	6859      	ldr	r1, [r3, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	461a      	mov	r2, r3
 80075aa:	f000 fb0b 	bl	8007bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2140      	movs	r1, #64	; 0x40
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fb64 	bl	8007c82 <TIM_ITRx_SetConfig>
      break;
 80075ba:	e009      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f000 fb5b 	bl	8007c82 <TIM_ITRx_SetConfig>
        break;
 80075cc:	e000      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80075ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a2e      	ldr	r2, [pc, #184]	; (80076b8 <TIM_Base_SetConfig+0xcc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d007      	beq.n	8007614 <TIM_Base_SetConfig+0x28>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760a:	d003      	beq.n	8007614 <TIM_Base_SetConfig+0x28>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a2b      	ldr	r2, [pc, #172]	; (80076bc <TIM_Base_SetConfig+0xd0>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d108      	bne.n	8007626 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a23      	ldr	r2, [pc, #140]	; (80076b8 <TIM_Base_SetConfig+0xcc>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00f      	beq.n	800764e <TIM_Base_SetConfig+0x62>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007634:	d00b      	beq.n	800764e <TIM_Base_SetConfig+0x62>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a20      	ldr	r2, [pc, #128]	; (80076bc <TIM_Base_SetConfig+0xd0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d007      	beq.n	800764e <TIM_Base_SetConfig+0x62>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <TIM_Base_SetConfig+0xd4>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d003      	beq.n	800764e <TIM_Base_SetConfig+0x62>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a1e      	ldr	r2, [pc, #120]	; (80076c4 <TIM_Base_SetConfig+0xd8>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d108      	bne.n	8007660 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	689a      	ldr	r2, [r3, #8]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a0c      	ldr	r2, [pc, #48]	; (80076b8 <TIM_Base_SetConfig+0xcc>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d007      	beq.n	800769c <TIM_Base_SetConfig+0xb0>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a0c      	ldr	r2, [pc, #48]	; (80076c0 <TIM_Base_SetConfig+0xd4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_Base_SetConfig+0xb0>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a0b      	ldr	r2, [pc, #44]	; (80076c4 <TIM_Base_SetConfig+0xd8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d103      	bne.n	80076a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	615a      	str	r2, [r3, #20]
}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40014400 	.word	0x40014400

080076c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	f023 0201 	bic.w	r2, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f023 0302 	bic.w	r3, r3, #2
 8007714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a24      	ldr	r2, [pc, #144]	; (80077b4 <TIM_OC1_SetConfig+0xec>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d007      	beq.n	8007738 <TIM_OC1_SetConfig+0x70>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a23      	ldr	r2, [pc, #140]	; (80077b8 <TIM_OC1_SetConfig+0xf0>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d003      	beq.n	8007738 <TIM_OC1_SetConfig+0x70>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a22      	ldr	r2, [pc, #136]	; (80077bc <TIM_OC1_SetConfig+0xf4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d10c      	bne.n	8007752 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f023 0308 	bic.w	r3, r3, #8
 800773e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	4313      	orrs	r3, r2
 8007748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f023 0304 	bic.w	r3, r3, #4
 8007750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a17      	ldr	r2, [pc, #92]	; (80077b4 <TIM_OC1_SetConfig+0xec>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d007      	beq.n	800776a <TIM_OC1_SetConfig+0xa2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a16      	ldr	r2, [pc, #88]	; (80077b8 <TIM_OC1_SetConfig+0xf0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d003      	beq.n	800776a <TIM_OC1_SetConfig+0xa2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a15      	ldr	r2, [pc, #84]	; (80077bc <TIM_OC1_SetConfig+0xf4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d111      	bne.n	800778e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	4313      	orrs	r3, r2
 8007782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	4313      	orrs	r3, r2
 800778c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	621a      	str	r2, [r3, #32]
}
 80077a8:	bf00      	nop
 80077aa:	371c      	adds	r7, #28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40014000 	.word	0x40014000
 80077bc:	40014400 	.word	0x40014400

080077c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	f023 0210 	bic.w	r2, r3, #16
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	4313      	orrs	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f023 0320 	bic.w	r3, r3, #32
 800780e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	4313      	orrs	r3, r2
 800781a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a22      	ldr	r2, [pc, #136]	; (80078a8 <TIM_OC2_SetConfig+0xe8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d10d      	bne.n	8007840 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800782a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a19      	ldr	r2, [pc, #100]	; (80078a8 <TIM_OC2_SetConfig+0xe8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d007      	beq.n	8007858 <TIM_OC2_SetConfig+0x98>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a18      	ldr	r2, [pc, #96]	; (80078ac <TIM_OC2_SetConfig+0xec>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d003      	beq.n	8007858 <TIM_OC2_SetConfig+0x98>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a17      	ldr	r2, [pc, #92]	; (80078b0 <TIM_OC2_SetConfig+0xf0>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d113      	bne.n	8007880 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800785e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	621a      	str	r2, [r3, #32]
}
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	40012c00 	.word	0x40012c00
 80078ac:	40014000 	.word	0x40014000
 80078b0:	40014400 	.word	0x40014400

080078b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0303 	bic.w	r3, r3, #3
 80078ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	021b      	lsls	r3, r3, #8
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a21      	ldr	r2, [pc, #132]	; (8007998 <TIM_OC3_SetConfig+0xe4>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d10d      	bne.n	8007932 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800791c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a18      	ldr	r2, [pc, #96]	; (8007998 <TIM_OC3_SetConfig+0xe4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d007      	beq.n	800794a <TIM_OC3_SetConfig+0x96>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a17      	ldr	r2, [pc, #92]	; (800799c <TIM_OC3_SetConfig+0xe8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d003      	beq.n	800794a <TIM_OC3_SetConfig+0x96>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a16      	ldr	r2, [pc, #88]	; (80079a0 <TIM_OC3_SetConfig+0xec>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d113      	bne.n	8007972 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	621a      	str	r2, [r3, #32]
}
 800798c:	bf00      	nop
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	40012c00 	.word	0x40012c00
 800799c:	40014000 	.word	0x40014000
 80079a0:	40014400 	.word	0x40014400

080079a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	021b      	lsls	r3, r3, #8
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	031b      	lsls	r3, r3, #12
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <TIM_OC4_SetConfig+0xb0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d007      	beq.n	8007a18 <TIM_OC4_SetConfig+0x74>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a13      	ldr	r2, [pc, #76]	; (8007a58 <TIM_OC4_SetConfig+0xb4>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d003      	beq.n	8007a18 <TIM_OC4_SetConfig+0x74>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a12      	ldr	r2, [pc, #72]	; (8007a5c <TIM_OC4_SetConfig+0xb8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d109      	bne.n	8007a2c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	019b      	lsls	r3, r3, #6
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	621a      	str	r2, [r3, #32]
}
 8007a46:	bf00      	nop
 8007a48:	371c      	adds	r7, #28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40012c00 	.word	0x40012c00
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40014400 	.word	0x40014400

08007a60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007aa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	041b      	lsls	r3, r3, #16
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a13      	ldr	r2, [pc, #76]	; (8007b04 <TIM_OC5_SetConfig+0xa4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_OC5_SetConfig+0x6a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a12      	ldr	r2, [pc, #72]	; (8007b08 <TIM_OC5_SetConfig+0xa8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_OC5_SetConfig+0x6a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a11      	ldr	r2, [pc, #68]	; (8007b0c <TIM_OC5_SetConfig+0xac>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d109      	bne.n	8007ade <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	021b      	lsls	r3, r3, #8
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	621a      	str	r2, [r3, #32]
}
 8007af8:	bf00      	nop
 8007afa:	371c      	adds	r7, #28
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	40012c00 	.word	0x40012c00
 8007b08:	40014000 	.word	0x40014000
 8007b0c:	40014400 	.word	0x40014400

08007b10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	051b      	lsls	r3, r3, #20
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <TIM_OC6_SetConfig+0xa8>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d007      	beq.n	8007b7c <TIM_OC6_SetConfig+0x6c>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a13      	ldr	r2, [pc, #76]	; (8007bbc <TIM_OC6_SetConfig+0xac>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_OC6_SetConfig+0x6c>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a12      	ldr	r2, [pc, #72]	; (8007bc0 <TIM_OC6_SetConfig+0xb0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d109      	bne.n	8007b90 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	029b      	lsls	r3, r3, #10
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40012c00 	.word	0x40012c00
 8007bbc:	40014000 	.word	0x40014000
 8007bc0:	40014400 	.word	0x40014400

08007bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	f023 0201 	bic.w	r2, r3, #1
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f023 030a 	bic.w	r3, r3, #10
 8007c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b087      	sub	sp, #28
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	f023 0210 	bic.w	r2, r3, #16
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	031b      	lsls	r3, r3, #12
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	011b      	lsls	r3, r3, #4
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f043 0307 	orr.w	r3, r3, #7
 8007ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	609a      	str	r2, [r3, #8]
}
 8007cac:	bf00      	nop
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	021a      	lsls	r2, r3, #8
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	609a      	str	r2, [r3, #8]
}
 8007cec:	bf00      	nop
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e054      	b.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a24      	ldr	r2, [pc, #144]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d108      	bne.n	8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a17      	ldr	r2, [pc, #92]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00e      	beq.n	8007d8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d78:	d009      	beq.n	8007d8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a13      	ldr	r2, [pc, #76]	; (8007dcc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d004      	beq.n	8007d8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a11      	ldr	r2, [pc, #68]	; (8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d10c      	bne.n	8007da8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40012c00 	.word	0x40012c00
 8007dcc:	40000400 	.word	0x40000400
 8007dd0:	40014000 	.word	0x40014000

08007dd4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b08b      	sub	sp, #44	; 0x2c
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	fa93 f3a3 	rbit	r3, r3
 8007dee:	613b      	str	r3, [r7, #16]
  return result;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007dfa:	2320      	movs	r3, #32
 8007dfc:	e003      	b.n	8007e06 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	fab3 f383 	clz	r3, r3
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	2103      	movs	r1, #3
 8007e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e0e:	43db      	mvns	r3, r3
 8007e10:	401a      	ands	r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	fa93 f3a3 	rbit	r3, r3
 8007e1c:	61fb      	str	r3, [r7, #28]
  return result;
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007e28:	2320      	movs	r3, #32
 8007e2a:	e003      	b.n	8007e34 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	fab3 f383 	clz	r3, r3
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	601a      	str	r2, [r3, #0]
}
 8007e42:	bf00      	nop
 8007e44:	372c      	adds	r7, #44	; 0x2c
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	43db      	mvns	r3, r3
 8007e62:	401a      	ands	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	fb01 f303 	mul.w	r3, r1, r3
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	605a      	str	r2, [r3, #4]
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b08b      	sub	sp, #44	; 0x2c
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	fa93 f3a3 	rbit	r3, r3
 8007e98:	613b      	str	r3, [r7, #16]
  return result;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007ea4:	2320      	movs	r3, #32
 8007ea6:	e003      	b.n	8007eb0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	fab3 f383 	clz	r3, r3
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	2103      	movs	r1, #3
 8007eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb8:	43db      	mvns	r3, r3
 8007eba:	401a      	ands	r2, r3
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	fa93 f3a3 	rbit	r3, r3
 8007ec6:	61fb      	str	r3, [r7, #28]
  return result;
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007ed2:	2320      	movs	r3, #32
 8007ed4:	e003      	b.n	8007ede <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	fab3 f383 	clz	r3, r3
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007eec:	bf00      	nop
 8007eee:	372c      	adds	r7, #44	; 0x2c
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b08b      	sub	sp, #44	; 0x2c
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	68da      	ldr	r2, [r3, #12]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	fa93 f3a3 	rbit	r3, r3
 8007f12:	613b      	str	r3, [r7, #16]
  return result;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007f1e:	2320      	movs	r3, #32
 8007f20:	e003      	b.n	8007f2a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	fab3 f383 	clz	r3, r3
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	2103      	movs	r1, #3
 8007f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f32:	43db      	mvns	r3, r3
 8007f34:	401a      	ands	r2, r3
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	fa93 f3a3 	rbit	r3, r3
 8007f40:	61fb      	str	r3, [r7, #28]
  return result;
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007f4c:	2320      	movs	r3, #32
 8007f4e:	e003      	b.n	8007f58 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	fab3 f383 	clz	r3, r3
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f60:	431a      	orrs	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	60da      	str	r2, [r3, #12]
}
 8007f66:	bf00      	nop
 8007f68:	372c      	adds	r7, #44	; 0x2c
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b08b      	sub	sp, #44	; 0x2c
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a1a      	ldr	r2, [r3, #32]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	fa93 f3a3 	rbit	r3, r3
 8007f8c:	613b      	str	r3, [r7, #16]
  return result;
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007f98:	2320      	movs	r3, #32
 8007f9a:	e003      	b.n	8007fa4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	fab3 f383 	clz	r3, r3
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	210f      	movs	r1, #15
 8007fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fac:	43db      	mvns	r3, r3
 8007fae:	401a      	ands	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	fa93 f3a3 	rbit	r3, r3
 8007fba:	61fb      	str	r3, [r7, #28]
  return result;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007fc6:	2320      	movs	r3, #32
 8007fc8:	e003      	b.n	8007fd2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	fab3 f383 	clz	r3, r3
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007fe0:	bf00      	nop
 8007fe2:	372c      	adds	r7, #44	; 0x2c
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b08b      	sub	sp, #44	; 0x2c
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	fa93 f3a3 	rbit	r3, r3
 8008008:	613b      	str	r3, [r7, #16]
  return result;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008014:	2320      	movs	r3, #32
 8008016:	e003      	b.n	8008020 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	fab3 f383 	clz	r3, r3
 800801e:	b2db      	uxtb	r3, r3
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	210f      	movs	r1, #15
 8008024:	fa01 f303 	lsl.w	r3, r1, r3
 8008028:	43db      	mvns	r3, r3
 800802a:	401a      	ands	r2, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	0a1b      	lsrs	r3, r3, #8
 8008030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	fa93 f3a3 	rbit	r3, r3
 8008038:	61fb      	str	r3, [r7, #28]
  return result;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008044:	2320      	movs	r3, #32
 8008046:	e003      	b.n	8008050 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	fab3 f383 	clz	r3, r3
 800804e:	b2db      	uxtb	r3, r3
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	fa01 f303 	lsl.w	r3, r1, r3
 8008058:	431a      	orrs	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800805e:	bf00      	nop
 8008060:	372c      	adds	r7, #44	; 0x2c
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b088      	sub	sp, #32
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	fa93 f3a3 	rbit	r3, r3
 8008080:	60fb      	str	r3, [r7, #12]
  return result;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <LL_GPIO_Init+0x26>
    return 32U;
 800808c:	2320      	movs	r3, #32
 800808e:	e003      	b.n	8008098 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	fab3 f383 	clz	r3, r3
 8008096:	b2db      	uxtb	r3, r3
 8008098:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800809a:	e040      	b.n	800811e <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	2101      	movs	r1, #1
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	fa01 f303 	lsl.w	r3, r1, r3
 80080a8:	4013      	ands	r3, r2
 80080aa:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d032      	beq.n	8008118 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	461a      	mov	r2, r3
 80080b8:	69b9      	ldr	r1, [r7, #24]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff fe8a 	bl	8007dd4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d003      	beq.n	80080d0 <LL_GPIO_Init+0x66>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d106      	bne.n	80080de <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	461a      	mov	r2, r3
 80080d6:	69b9      	ldr	r1, [r7, #24]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff fed0 	bl	8007e7e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	461a      	mov	r2, r3
 80080e4:	69b9      	ldr	r1, [r7, #24]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7ff ff06 	bl	8007ef8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d111      	bne.n	8008118 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2bff      	cmp	r3, #255	; 0xff
 80080f8:	d807      	bhi.n	800810a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	461a      	mov	r2, r3
 8008100:	69b9      	ldr	r1, [r7, #24]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff ff35 	bl	8007f72 <LL_GPIO_SetAFPin_0_7>
 8008108:	e006      	b.n	8008118 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	461a      	mov	r2, r3
 8008110:	69b9      	ldr	r1, [r7, #24]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff ff6a 	bl	8007fec <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	3301      	adds	r3, #1
 800811c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	fa22 f303 	lsr.w	r3, r2, r3
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1b7      	bne.n	800809c <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d003      	beq.n	800813c <LL_GPIO_Init+0xd2>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d107      	bne.n	800814c <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	6819      	ldr	r1, [r3, #0]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	461a      	mov	r2, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff fe81 	bl	8007e4e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3720      	adds	r7, #32
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800815c:	4b07      	ldr	r3, [pc, #28]	; (800817c <LL_RCC_HSI_IsReady+0x24>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008168:	d101      	bne.n	800816e <LL_RCC_HSI_IsReady+0x16>
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <LL_RCC_HSI_IsReady+0x18>
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	40021000 	.word	0x40021000

08008180 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8008184:	4b07      	ldr	r3, [pc, #28]	; (80081a4 <LL_RCC_LSE_IsReady+0x24>)
 8008186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b02      	cmp	r3, #2
 8008190:	d101      	bne.n	8008196 <LL_RCC_LSE_IsReady+0x16>
 8008192:	2301      	movs	r3, #1
 8008194:	e000      	b.n	8008198 <LL_RCC_LSE_IsReady+0x18>
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	40021000 	.word	0x40021000

080081a8 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80081ac:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d101      	bne.n	80081bc <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	40021000 	.word	0x40021000

080081cc <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80081d0:	4b04      	ldr	r3, [pc, #16]	; (80081e4 <LL_RCC_MSI_GetRange+0x18>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40021000 	.word	0x40021000

080081e8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80081ec:	4b04      	ldr	r3, [pc, #16]	; (8008200 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80081ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	40021000 	.word	0x40021000

08008204 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <LL_RCC_GetSysClkSource+0x18>)
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 030c 	and.w	r3, r3, #12
}
 8008210:	4618      	mov	r0, r3
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	40021000 	.word	0x40021000

08008220 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008224:	4b04      	ldr	r3, [pc, #16]	; (8008238 <LL_RCC_GetAHBPrescaler+0x18>)
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800822c:	4618      	mov	r0, r3
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40021000 	.word	0x40021000

0800823c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008240:	4b04      	ldr	r3, [pc, #16]	; (8008254 <LL_RCC_GetAPB1Prescaler+0x18>)
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008248:	4618      	mov	r0, r3
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40021000 	.word	0x40021000

08008258 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8008258:	b480      	push	{r7}
 800825a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800825c:	4b04      	ldr	r3, [pc, #16]	; (8008270 <LL_RCC_GetAPB2Prescaler+0x18>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008264:	4618      	mov	r0, r3
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40021000 	.word	0x40021000

08008274 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800827c:	4b06      	ldr	r3, [pc, #24]	; (8008298 <LL_RCC_GetUSARTClockSource+0x24>)
 800827e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	401a      	ands	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	041b      	lsls	r3, r3, #16
 800828a:	4313      	orrs	r3, r2
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	40021000 	.word	0x40021000

0800829c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80082a4:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <LL_RCC_GetUARTClockSource+0x24>)
 80082a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	401a      	ands	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	041b      	lsls	r3, r3, #16
 80082b2:	4313      	orrs	r3, r2
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	40021000 	.word	0x40021000

080082c4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <LL_RCC_PLL_GetMainSource+0x18>)
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f003 0303 	and.w	r3, r3, #3
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40021000 	.word	0x40021000

080082e0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80082e4:	4b04      	ldr	r3, [pc, #16]	; (80082f8 <LL_RCC_PLL_GetN+0x18>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	0a1b      	lsrs	r3, r3, #8
 80082ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	40021000 	.word	0x40021000

080082fc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80082fc:	b480      	push	{r7}
 80082fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008300:	4b04      	ldr	r3, [pc, #16]	; (8008314 <LL_RCC_PLL_GetR+0x18>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8008308:	4618      	mov	r0, r3
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	40021000 	.word	0x40021000

08008318 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008318:	b480      	push	{r7}
 800831a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800831c:	4b04      	ldr	r3, [pc, #16]	; (8008330 <LL_RCC_PLL_GetDivider+0x18>)
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008324:	4618      	mov	r0, r3
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40021000 	.word	0x40021000

08008334 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800833c:	2300      	movs	r3, #0
 800833e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b03      	cmp	r3, #3
 8008344:	d137      	bne.n	80083b6 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff ff94 	bl	8008274 <LL_RCC_GetUSARTClockSource>
 800834c:	4603      	mov	r3, r0
 800834e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008352:	2b03      	cmp	r3, #3
 8008354:	f200 80b2 	bhi.w	80084bc <LL_RCC_GetUSARTClockFreq+0x188>
 8008358:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800835a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835e:	bf00      	nop
 8008360:	0800839f 	.word	0x0800839f
 8008364:	08008371 	.word	0x08008371
 8008368:	08008379 	.word	0x08008379
 800836c:	0800838b 	.word	0x0800838b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8008370:	f000 f910 	bl	8008594 <RCC_GetSystemClockFreq>
 8008374:	60f8      	str	r0, [r7, #12]
        break;
 8008376:	e0b2      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8008378:	f7ff feee 	bl	8008158 <LL_RCC_HSI_IsReady>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 809e 	beq.w	80084c0 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8008384:	4b58      	ldr	r3, [pc, #352]	; (80084e8 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8008386:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008388:	e09a      	b.n	80084c0 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800838a:	f7ff fef9 	bl	8008180 <LL_RCC_LSE_IsReady>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 8097 	beq.w	80084c4 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8008396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800839a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800839c:	e092      	b.n	80084c4 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800839e:	f000 f8f9 	bl	8008594 <RCC_GetSystemClockFreq>
 80083a2:	4603      	mov	r3, r0
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 f985 	bl	80086b4 <RCC_GetHCLKClockFreq>
 80083aa:	4603      	mov	r3, r0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 f9ab 	bl	8008708 <RCC_GetPCLK2ClockFreq>
 80083b2:	60f8      	str	r0, [r7, #12]
        break;
 80083b4:	e093      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b0c      	cmp	r3, #12
 80083ba:	d146      	bne.n	800844a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff ff59 	bl	8008274 <LL_RCC_GetUSARTClockSource>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80083c8:	2b0c      	cmp	r3, #12
 80083ca:	d87d      	bhi.n	80084c8 <LL_RCC_GetUSARTClockFreq+0x194>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	08008433 	.word	0x08008433
 80083d8:	080084c9 	.word	0x080084c9
 80083dc:	080084c9 	.word	0x080084c9
 80083e0:	080084c9 	.word	0x080084c9
 80083e4:	08008409 	.word	0x08008409
 80083e8:	080084c9 	.word	0x080084c9
 80083ec:	080084c9 	.word	0x080084c9
 80083f0:	080084c9 	.word	0x080084c9
 80083f4:	08008411 	.word	0x08008411
 80083f8:	080084c9 	.word	0x080084c9
 80083fc:	080084c9 	.word	0x080084c9
 8008400:	080084c9 	.word	0x080084c9
 8008404:	08008421 	.word	0x08008421
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8008408:	f000 f8c4 	bl	8008594 <RCC_GetSystemClockFreq>
 800840c:	60f8      	str	r0, [r7, #12]
        break;
 800840e:	e066      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8008410:	f7ff fea2 	bl	8008158 <LL_RCC_HSI_IsReady>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d058      	beq.n	80084cc <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 800841a:	4b33      	ldr	r3, [pc, #204]	; (80084e8 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800841c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800841e:	e055      	b.n	80084cc <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8008420:	f7ff feae 	bl	8008180 <LL_RCC_LSE_IsReady>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d052      	beq.n	80084d0 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 800842a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800842e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008430:	e04e      	b.n	80084d0 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008432:	f000 f8af 	bl	8008594 <RCC_GetSystemClockFreq>
 8008436:	4603      	mov	r3, r0
 8008438:	4618      	mov	r0, r3
 800843a:	f000 f93b 	bl	80086b4 <RCC_GetHCLKClockFreq>
 800843e:	4603      	mov	r3, r0
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f94d 	bl	80086e0 <RCC_GetPCLK1ClockFreq>
 8008446:	60f8      	str	r0, [r7, #12]
        break;
 8008448:	e049      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b30      	cmp	r3, #48	; 0x30
 800844e:	d141      	bne.n	80084d4 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff ff0f 	bl	8008274 <LL_RCC_GetUSARTClockSource>
 8008456:	4603      	mov	r3, r0
 8008458:	4a24      	ldr	r2, [pc, #144]	; (80084ec <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00d      	beq.n	800847a <LL_RCC_GetUSARTClockFreq+0x146>
 800845e:	4a23      	ldr	r2, [pc, #140]	; (80084ec <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d803      	bhi.n	800846c <LL_RCC_GetUSARTClockFreq+0x138>
 8008464:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008468:	d01c      	beq.n	80084a4 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 800846a:	e038      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800846c:	4a20      	ldr	r2, [pc, #128]	; (80084f0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d007      	beq.n	8008482 <LL_RCC_GetUSARTClockFreq+0x14e>
 8008472:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8008476:	d00c      	beq.n	8008492 <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8008478:	e031      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 800847a:	f000 f88b 	bl	8008594 <RCC_GetSystemClockFreq>
 800847e:	60f8      	str	r0, [r7, #12]
          break;
 8008480:	e02d      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 8008482:	f7ff fe69 	bl	8008158 <LL_RCC_HSI_IsReady>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d025      	beq.n	80084d8 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 800848c:	4b16      	ldr	r3, [pc, #88]	; (80084e8 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800848e:	60fb      	str	r3, [r7, #12]
          break;
 8008490:	e022      	b.n	80084d8 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 8008492:	f7ff fe75 	bl	8008180 <LL_RCC_LSE_IsReady>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01f      	beq.n	80084dc <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 800849c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084a0:	60fb      	str	r3, [r7, #12]
          break;
 80084a2:	e01b      	b.n	80084dc <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80084a4:	f000 f876 	bl	8008594 <RCC_GetSystemClockFreq>
 80084a8:	4603      	mov	r3, r0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f902 	bl	80086b4 <RCC_GetHCLKClockFreq>
 80084b0:	4603      	mov	r3, r0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f914 	bl	80086e0 <RCC_GetPCLK1ClockFreq>
 80084b8:	60f8      	str	r0, [r7, #12]
          break;
 80084ba:	e010      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80084bc:	bf00      	nop
 80084be:	e00e      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80084c0:	bf00      	nop
 80084c2:	e00c      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80084c4:	bf00      	nop
 80084c6:	e00a      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80084c8:	bf00      	nop
 80084ca:	e008      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80084cc:	bf00      	nop
 80084ce:	e006      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80084d0:	bf00      	nop
 80084d2:	e004      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 80084d4:	bf00      	nop
 80084d6:	e002      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 80084d8:	bf00      	nop
 80084da:	e000      	b.n	80084de <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 80084dc:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80084de:	68fb      	ldr	r3, [r7, #12]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	00f42400 	.word	0x00f42400
 80084ec:	00300010 	.word	0x00300010
 80084f0:	00300020 	.word	0x00300020

080084f4 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2bc0      	cmp	r3, #192	; 0xc0
 8008504:	d135      	bne.n	8008572 <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff fec8 	bl	800829c <LL_RCC_GetUARTClockSource>
 800850c:	4603      	mov	r3, r0
 800850e:	4a1e      	ldr	r2, [pc, #120]	; (8008588 <LL_RCC_GetUARTClockFreq+0x94>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d00d      	beq.n	8008530 <LL_RCC_GetUARTClockFreq+0x3c>
 8008514:	4a1c      	ldr	r2, [pc, #112]	; (8008588 <LL_RCC_GetUARTClockFreq+0x94>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d803      	bhi.n	8008522 <LL_RCC_GetUARTClockFreq+0x2e>
 800851a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800851e:	d01c      	beq.n	800855a <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8008520:	e02c      	b.n	800857c <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8008522:	4a1a      	ldr	r2, [pc, #104]	; (800858c <LL_RCC_GetUARTClockFreq+0x98>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d007      	beq.n	8008538 <LL_RCC_GetUARTClockFreq+0x44>
 8008528:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800852c:	d00c      	beq.n	8008548 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 800852e:	e025      	b.n	800857c <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 8008530:	f000 f830 	bl	8008594 <RCC_GetSystemClockFreq>
 8008534:	60f8      	str	r0, [r7, #12]
        break;
 8008536:	e021      	b.n	800857c <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 8008538:	f7ff fe0e 	bl	8008158 <LL_RCC_HSI_IsReady>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d019      	beq.n	8008576 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 8008542:	4b13      	ldr	r3, [pc, #76]	; (8008590 <LL_RCC_GetUARTClockFreq+0x9c>)
 8008544:	60fb      	str	r3, [r7, #12]
        break;
 8008546:	e016      	b.n	8008576 <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 8008548:	f7ff fe1a 	bl	8008180 <LL_RCC_LSE_IsReady>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d013      	beq.n	800857a <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 8008552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008556:	60fb      	str	r3, [r7, #12]
        break;
 8008558:	e00f      	b.n	800857a <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800855a:	f000 f81b 	bl	8008594 <RCC_GetSystemClockFreq>
 800855e:	4603      	mov	r3, r0
 8008560:	4618      	mov	r0, r3
 8008562:	f000 f8a7 	bl	80086b4 <RCC_GetHCLKClockFreq>
 8008566:	4603      	mov	r3, r0
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f8b9 	bl	80086e0 <RCC_GetPCLK1ClockFreq>
 800856e:	60f8      	str	r0, [r7, #12]
        break;
 8008570:	e004      	b.n	800857c <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 8008572:	bf00      	nop
 8008574:	e002      	b.n	800857c <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8008576:	bf00      	nop
 8008578:	e000      	b.n	800857c <LL_RCC_GetUARTClockFreq+0x88>
        break;
 800857a:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800857c:	68fb      	ldr	r3, [r7, #12]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	00c00040 	.word	0x00c00040
 800858c:	00c00080 	.word	0x00c00080
 8008590:	00f42400 	.word	0x00f42400

08008594 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800859a:	f7ff fe33 	bl	8008204 <LL_RCC_GetSysClkSource>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b0c      	cmp	r3, #12
 80085a2:	d851      	bhi.n	8008648 <RCC_GetSystemClockFreq+0xb4>
 80085a4:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <RCC_GetSystemClockFreq+0x18>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	080085e1 	.word	0x080085e1
 80085b0:	08008649 	.word	0x08008649
 80085b4:	08008649 	.word	0x08008649
 80085b8:	08008649 	.word	0x08008649
 80085bc:	08008635 	.word	0x08008635
 80085c0:	08008649 	.word	0x08008649
 80085c4:	08008649 	.word	0x08008649
 80085c8:	08008649 	.word	0x08008649
 80085cc:	0800863b 	.word	0x0800863b
 80085d0:	08008649 	.word	0x08008649
 80085d4:	08008649 	.word	0x08008649
 80085d8:	08008649 	.word	0x08008649
 80085dc:	08008641 	.word	0x08008641
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80085e0:	f7ff fde2 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d111      	bne.n	800860e <RCC_GetSystemClockFreq+0x7a>
 80085ea:	f7ff fddd 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d004      	beq.n	80085fe <RCC_GetSystemClockFreq+0x6a>
 80085f4:	f7ff fdea 	bl	80081cc <LL_RCC_MSI_GetRange>
 80085f8:	4603      	mov	r3, r0
 80085fa:	0a1b      	lsrs	r3, r3, #8
 80085fc:	e003      	b.n	8008606 <RCC_GetSystemClockFreq+0x72>
 80085fe:	f7ff fdf3 	bl	80081e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8008602:	4603      	mov	r3, r0
 8008604:	0a1b      	lsrs	r3, r3, #8
 8008606:	4a28      	ldr	r2, [pc, #160]	; (80086a8 <RCC_GetSystemClockFreq+0x114>)
 8008608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800860c:	e010      	b.n	8008630 <RCC_GetSystemClockFreq+0x9c>
 800860e:	f7ff fdcb 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d004      	beq.n	8008622 <RCC_GetSystemClockFreq+0x8e>
 8008618:	f7ff fdd8 	bl	80081cc <LL_RCC_MSI_GetRange>
 800861c:	4603      	mov	r3, r0
 800861e:	091b      	lsrs	r3, r3, #4
 8008620:	e003      	b.n	800862a <RCC_GetSystemClockFreq+0x96>
 8008622:	f7ff fde1 	bl	80081e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8008626:	4603      	mov	r3, r0
 8008628:	091b      	lsrs	r3, r3, #4
 800862a:	4a1f      	ldr	r2, [pc, #124]	; (80086a8 <RCC_GetSystemClockFreq+0x114>)
 800862c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008630:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8008632:	e033      	b.n	800869c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8008634:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <RCC_GetSystemClockFreq+0x118>)
 8008636:	607b      	str	r3, [r7, #4]
      break;
 8008638:	e030      	b.n	800869c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800863a:	4b1d      	ldr	r3, [pc, #116]	; (80086b0 <RCC_GetSystemClockFreq+0x11c>)
 800863c:	607b      	str	r3, [r7, #4]
      break;
 800863e:	e02d      	b.n	800869c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8008640:	f000 f876 	bl	8008730 <RCC_PLL_GetFreqDomain_SYS>
 8008644:	6078      	str	r0, [r7, #4]
      break;
 8008646:	e029      	b.n	800869c <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008648:	f7ff fdae 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d111      	bne.n	8008676 <RCC_GetSystemClockFreq+0xe2>
 8008652:	f7ff fda9 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <RCC_GetSystemClockFreq+0xd2>
 800865c:	f7ff fdb6 	bl	80081cc <LL_RCC_MSI_GetRange>
 8008660:	4603      	mov	r3, r0
 8008662:	0a1b      	lsrs	r3, r3, #8
 8008664:	e003      	b.n	800866e <RCC_GetSystemClockFreq+0xda>
 8008666:	f7ff fdbf 	bl	80081e8 <LL_RCC_MSI_GetRangeAfterStandby>
 800866a:	4603      	mov	r3, r0
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	4a0e      	ldr	r2, [pc, #56]	; (80086a8 <RCC_GetSystemClockFreq+0x114>)
 8008670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008674:	e010      	b.n	8008698 <RCC_GetSystemClockFreq+0x104>
 8008676:	f7ff fd97 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <RCC_GetSystemClockFreq+0xf6>
 8008680:	f7ff fda4 	bl	80081cc <LL_RCC_MSI_GetRange>
 8008684:	4603      	mov	r3, r0
 8008686:	091b      	lsrs	r3, r3, #4
 8008688:	e003      	b.n	8008692 <RCC_GetSystemClockFreq+0xfe>
 800868a:	f7ff fdad 	bl	80081e8 <LL_RCC_MSI_GetRangeAfterStandby>
 800868e:	4603      	mov	r3, r0
 8008690:	091b      	lsrs	r3, r3, #4
 8008692:	4a05      	ldr	r2, [pc, #20]	; (80086a8 <RCC_GetSystemClockFreq+0x114>)
 8008694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008698:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800869a:	bf00      	nop
  }

  return frequency;
 800869c:	687b      	ldr	r3, [r7, #4]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	0800fe00 	.word	0x0800fe00
 80086ac:	00f42400 	.word	0x00f42400
 80086b0:	007a1200 	.word	0x007a1200

080086b4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80086bc:	f7ff fdb0 	bl	8008220 <LL_RCC_GetAHBPrescaler>
 80086c0:	4603      	mov	r3, r0
 80086c2:	091b      	lsrs	r3, r3, #4
 80086c4:	f003 030f 	and.w	r3, r3, #15
 80086c8:	4a04      	ldr	r2, [pc, #16]	; (80086dc <RCC_GetHCLKClockFreq+0x28>)
 80086ca:	5cd3      	ldrb	r3, [r2, r3]
 80086cc:	461a      	mov	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	40d3      	lsrs	r3, r2
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	0800fde8 	.word	0x0800fde8

080086e0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80086e8:	f7ff fda8 	bl	800823c <LL_RCC_GetAPB1Prescaler>
 80086ec:	4603      	mov	r3, r0
 80086ee:	0a1b      	lsrs	r3, r3, #8
 80086f0:	4a04      	ldr	r2, [pc, #16]	; (8008704 <RCC_GetPCLK1ClockFreq+0x24>)
 80086f2:	5cd3      	ldrb	r3, [r2, r3]
 80086f4:	461a      	mov	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	40d3      	lsrs	r3, r2
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	0800fdf8 	.word	0x0800fdf8

08008708 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8008710:	f7ff fda2 	bl	8008258 <LL_RCC_GetAPB2Prescaler>
 8008714:	4603      	mov	r3, r0
 8008716:	0adb      	lsrs	r3, r3, #11
 8008718:	4a04      	ldr	r2, [pc, #16]	; (800872c <RCC_GetPCLK2ClockFreq+0x24>)
 800871a:	5cd3      	ldrb	r3, [r2, r3]
 800871c:	461a      	mov	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	40d3      	lsrs	r3, r2
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	0800fdf8 	.word	0x0800fdf8

08008730 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8008730:	b590      	push	{r4, r7, lr}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008736:	f7ff fdc5 	bl	80082c4 <LL_RCC_PLL_GetMainSource>
 800873a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b02      	cmp	r3, #2
 8008740:	d02d      	beq.n	800879e <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8008742:	2b03      	cmp	r3, #3
 8008744:	d02e      	beq.n	80087a4 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8008746:	2b01      	cmp	r3, #1
 8008748:	d12f      	bne.n	80087aa <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800874a:	f7ff fd2d 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d111      	bne.n	8008778 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8008754:	f7ff fd28 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d004      	beq.n	8008768 <RCC_PLL_GetFreqDomain_SYS+0x38>
 800875e:	f7ff fd35 	bl	80081cc <LL_RCC_MSI_GetRange>
 8008762:	4603      	mov	r3, r0
 8008764:	0a1b      	lsrs	r3, r3, #8
 8008766:	e003      	b.n	8008770 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8008768:	f7ff fd3e 	bl	80081e8 <LL_RCC_MSI_GetRangeAfterStandby>
 800876c:	4603      	mov	r3, r0
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	4a2f      	ldr	r2, [pc, #188]	; (8008830 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8008772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008776:	e010      	b.n	800879a <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8008778:	f7ff fd16 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d004      	beq.n	800878c <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8008782:	f7ff fd23 	bl	80081cc <LL_RCC_MSI_GetRange>
 8008786:	4603      	mov	r3, r0
 8008788:	091b      	lsrs	r3, r3, #4
 800878a:	e003      	b.n	8008794 <RCC_PLL_GetFreqDomain_SYS+0x64>
 800878c:	f7ff fd2c 	bl	80081e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8008790:	4603      	mov	r3, r0
 8008792:	091b      	lsrs	r3, r3, #4
 8008794:	4a26      	ldr	r2, [pc, #152]	; (8008830 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8008796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800879a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800879c:	e02f      	b.n	80087fe <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800879e:	4b25      	ldr	r3, [pc, #148]	; (8008834 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 80087a0:	607b      	str	r3, [r7, #4]
      break;
 80087a2:	e02c      	b.n	80087fe <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80087a4:	4b24      	ldr	r3, [pc, #144]	; (8008838 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 80087a6:	607b      	str	r3, [r7, #4]
      break;
 80087a8:	e029      	b.n	80087fe <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80087aa:	f7ff fcfd 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d111      	bne.n	80087d8 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 80087b4:	f7ff fcf8 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d004      	beq.n	80087c8 <RCC_PLL_GetFreqDomain_SYS+0x98>
 80087be:	f7ff fd05 	bl	80081cc <LL_RCC_MSI_GetRange>
 80087c2:	4603      	mov	r3, r0
 80087c4:	0a1b      	lsrs	r3, r3, #8
 80087c6:	e003      	b.n	80087d0 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 80087c8:	f7ff fd0e 	bl	80081e8 <LL_RCC_MSI_GetRangeAfterStandby>
 80087cc:	4603      	mov	r3, r0
 80087ce:	0a1b      	lsrs	r3, r3, #8
 80087d0:	4a17      	ldr	r2, [pc, #92]	; (8008830 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80087d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087d6:	e010      	b.n	80087fa <RCC_PLL_GetFreqDomain_SYS+0xca>
 80087d8:	f7ff fce6 	bl	80081a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d004      	beq.n	80087ec <RCC_PLL_GetFreqDomain_SYS+0xbc>
 80087e2:	f7ff fcf3 	bl	80081cc <LL_RCC_MSI_GetRange>
 80087e6:	4603      	mov	r3, r0
 80087e8:	091b      	lsrs	r3, r3, #4
 80087ea:	e003      	b.n	80087f4 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 80087ec:	f7ff fcfc 	bl	80081e8 <LL_RCC_MSI_GetRangeAfterStandby>
 80087f0:	4603      	mov	r3, r0
 80087f2:	091b      	lsrs	r3, r3, #4
 80087f4:	4a0e      	ldr	r2, [pc, #56]	; (8008830 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80087f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087fa:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80087fc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80087fe:	f7ff fd8b 	bl	8008318 <LL_RCC_PLL_GetDivider>
 8008802:	4603      	mov	r3, r0
 8008804:	091b      	lsrs	r3, r3, #4
 8008806:	3301      	adds	r3, #1
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	fbb2 f4f3 	udiv	r4, r2, r3
 800880e:	f7ff fd67 	bl	80082e0 <LL_RCC_PLL_GetN>
 8008812:	4603      	mov	r3, r0
 8008814:	fb03 f404 	mul.w	r4, r3, r4
 8008818:	f7ff fd70 	bl	80082fc <LL_RCC_PLL_GetR>
 800881c:	4603      	mov	r3, r0
 800881e:	0e5b      	lsrs	r3, r3, #25
 8008820:	3301      	adds	r3, #1
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	bd90      	pop	{r4, r7, pc}
 8008830:	0800fe00 	.word	0x0800fe00
 8008834:	00f42400 	.word	0x00f42400
 8008838:	007a1200 	.word	0x007a1200

0800883c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800883c:	b084      	sub	sp, #16
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	f107 001c 	add.w	r0, r7, #28
 800884a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800885a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800885e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008862:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008866:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800886a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800887a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	b004      	add	sp, #16
 8008894:	4770      	bx	lr

08008896 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2203      	movs	r2, #3
 80088de:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80088e0:	2002      	movs	r0, #2
 80088e2:	f7f7 fceb 	bl	80002bc <HAL_Delay>

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0303 	and.w	r3, r3, #3
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800892a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008930:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008936:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008946:	f023 030f 	bic.w	r3, r3, #15
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	431a      	orrs	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	b2db      	uxtb	r3, r3
}
 800896e:	4618      	mov	r0, r3
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800897a:	b480      	push	{r7}
 800897c:	b085      	sub	sp, #20
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3314      	adds	r3, #20
 8008988:	461a      	mov	r2, r3
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	4413      	add	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089c6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80089cc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80089d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	431a      	orrs	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0

}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a06:	2310      	movs	r3, #16
 8008a08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a0a:	2340      	movs	r3, #64	; 0x40
 8008a0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a18:	f107 0308 	add.w	r3, r7, #8
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7ff ff74 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a28:	2110      	movs	r1, #16
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa18 	bl	8008e60 <SDMMC_GetCmdResp1>
 8008a30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a32:	69fb      	ldr	r3, [r7, #28]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3720      	adds	r7, #32
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008a4a:	2311      	movs	r3, #17
 8008a4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a4e:	2340      	movs	r3, #64	; 0x40
 8008a50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a52:	2300      	movs	r3, #0
 8008a54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a5c:	f107 0308 	add.w	r3, r7, #8
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7ff ff52 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a6c:	2111      	movs	r1, #17
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f9f6 	bl	8008e60 <SDMMC_GetCmdResp1>
 8008a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a76:	69fb      	ldr	r3, [r7, #28]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3720      	adds	r7, #32
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b088      	sub	sp, #32
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008a8e:	2312      	movs	r3, #18
 8008a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a92:	2340      	movs	r3, #64	; 0x40
 8008a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a96:	2300      	movs	r3, #0
 8008a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008aa0:	f107 0308 	add.w	r3, r7, #8
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff ff30 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab0:	2112      	movs	r1, #18
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f9d4 	bl	8008e60 <SDMMC_GetCmdResp1>
 8008ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008aba:	69fb      	ldr	r3, [r7, #28]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3720      	adds	r7, #32
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008ad2:	2318      	movs	r3, #24
 8008ad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ad6:	2340      	movs	r3, #64	; 0x40
 8008ad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ada:	2300      	movs	r3, #0
 8008adc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ae2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ae4:	f107 0308 	add.w	r3, r7, #8
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7ff ff0e 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af4:	2118      	movs	r1, #24
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f9b2 	bl	8008e60 <SDMMC_GetCmdResp1>
 8008afc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008afe:	69fb      	ldr	r3, [r7, #28]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3720      	adds	r7, #32
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008b16:	2319      	movs	r3, #25
 8008b18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b1a:	2340      	movs	r3, #64	; 0x40
 8008b1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b28:	f107 0308 	add.w	r3, r7, #8
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff feec 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b38:	2119      	movs	r1, #25
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f990 	bl	8008e60 <SDMMC_GetCmdResp1>
 8008b40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b42:	69fb      	ldr	r3, [r7, #28]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3720      	adds	r7, #32
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008b58:	230c      	movs	r3, #12
 8008b5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b5c:	2340      	movs	r3, #64	; 0x40
 8008b5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b68:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b6a:	f107 0308 	add.w	r3, r7, #8
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff fecb 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008b76:	4a05      	ldr	r2, [pc, #20]	; (8008b8c <SDMMC_CmdStopTransfer+0x40>)
 8008b78:	210c      	movs	r1, #12
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f970 	bl	8008e60 <SDMMC_GetCmdResp1>
 8008b80:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008b82:	69fb      	ldr	r3, [r7, #28]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3720      	adds	r7, #32
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	05f5e100 	.word	0x05f5e100

08008b90 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08a      	sub	sp, #40	; 0x28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008ba0:	2307      	movs	r3, #7
 8008ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ba4:	2340      	movs	r3, #64	; 0x40
 8008ba6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bb0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bb2:	f107 0310 	add.w	r3, r7, #16
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f7ff fea7 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc2:	2107      	movs	r1, #7
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 f94b 	bl	8008e60 <SDMMC_GetCmdResp1>
 8008bca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3728      	adds	r7, #40	; 0x28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b088      	sub	sp, #32
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008be6:	2300      	movs	r3, #0
 8008be8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bea:	2300      	movs	r3, #0
 8008bec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bf4:	f107 0308 	add.w	r3, r7, #8
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff fe86 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fb65 	bl	80092d0 <SDMMC_GetCmdError>
 8008c06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c08:	69fb      	ldr	r3, [r7, #28]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b088      	sub	sp, #32
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008c1a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008c1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008c20:	2308      	movs	r3, #8
 8008c22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c24:	2340      	movs	r3, #64	; 0x40
 8008c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c32:	f107 0308 	add.w	r3, r7, #8
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7ff fe67 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 faf8 	bl	8009234 <SDMMC_GetCmdResp7>
 8008c44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c46:	69fb      	ldr	r3, [r7, #28]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3720      	adds	r7, #32
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b088      	sub	sp, #32
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008c5e:	2337      	movs	r3, #55	; 0x37
 8008c60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c62:	2340      	movs	r3, #64	; 0x40
 8008c64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c66:	2300      	movs	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c70:	f107 0308 	add.w	r3, r7, #8
 8008c74:	4619      	mov	r1, r3
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7ff fe48 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c80:	2137      	movs	r1, #55	; 0x37
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f8ec 	bl	8008e60 <SDMMC_GetCmdResp1>
 8008c88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c8a:	69fb      	ldr	r3, [r7, #28]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3720      	adds	r7, #32
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b088      	sub	sp, #32
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ca8:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008caa:	2329      	movs	r3, #41	; 0x29
 8008cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cae:	2340      	movs	r3, #64	; 0x40
 8008cb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cbc:	f107 0308 	add.w	r3, r7, #8
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff fe22 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f9ff 	bl	80090cc <SDMMC_GetCmdResp3>
 8008cce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3720      	adds	r7, #32
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b088      	sub	sp, #32
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008ce8:	2306      	movs	r3, #6
 8008cea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cec:	2340      	movs	r3, #64	; 0x40
 8008cee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cfa:	f107 0308 	add.w	r3, r7, #8
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fe03 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d0a:	2106      	movs	r1, #6
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f8a7 	bl	8008e60 <SDMMC_GetCmdResp1>
 8008d12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d14:	69fb      	ldr	r3, [r7, #28]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3720      	adds	r7, #32
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b088      	sub	sp, #32
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d26:	2300      	movs	r3, #0
 8008d28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008d2a:	2333      	movs	r3, #51	; 0x33
 8008d2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d2e:	2340      	movs	r3, #64	; 0x40
 8008d30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d32:	2300      	movs	r3, #0
 8008d34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d3c:	f107 0308 	add.w	r3, r7, #8
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff fde2 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d4c:	2133      	movs	r1, #51	; 0x33
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f886 	bl	8008e60 <SDMMC_GetCmdResp1>
 8008d54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d56:	69fb      	ldr	r3, [r7, #28]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b088      	sub	sp, #32
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008d70:	23c0      	movs	r3, #192	; 0xc0
 8008d72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d74:	2300      	movs	r3, #0
 8008d76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d7e:	f107 0308 	add.w	r3, r7, #8
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff fdc1 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f956 	bl	800903c <SDMMC_GetCmdResp2>
 8008d90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d92:	69fb      	ldr	r3, [r7, #28]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3720      	adds	r7, #32
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008daa:	2309      	movs	r3, #9
 8008dac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008dae:	23c0      	movs	r3, #192	; 0xc0
 8008db0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dbc:	f107 0308 	add.w	r3, r7, #8
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff fda2 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f937 	bl	800903c <SDMMC_GetCmdResp2>
 8008dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3720      	adds	r7, #32
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b088      	sub	sp, #32
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008de8:	2303      	movs	r3, #3
 8008dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dec:	2340      	movs	r3, #64	; 0x40
 8008dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008df8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dfa:	f107 0308 	add.w	r3, r7, #8
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7ff fd83 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	2103      	movs	r1, #3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f99c 	bl	8009148 <SDMMC_GetCmdResp6>
 8008e10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e12:	69fb      	ldr	r3, [r7, #28]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3720      	adds	r7, #32
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008e2a:	230d      	movs	r3, #13
 8008e2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e2e:	2340      	movs	r3, #64	; 0x40
 8008e30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e32:	2300      	movs	r3, #0
 8008e34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e3c:	f107 0308 	add.w	r3, r7, #8
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7ff fd62 	bl	800890c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e4c:	210d      	movs	r1, #13
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f806 	bl	8008e60 <SDMMC_GetCmdResp1>
 8008e54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e56:	69fb      	ldr	r3, [r7, #28]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3720      	adds	r7, #32
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	607a      	str	r2, [r7, #4]
 8008e6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008e6e:	4b70      	ldr	r3, [pc, #448]	; (8009030 <SDMMC_GetCmdResp1+0x1d0>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a70      	ldr	r2, [pc, #448]	; (8009034 <SDMMC_GetCmdResp1+0x1d4>)
 8008e74:	fba2 2303 	umull	r2, r3, r2, r3
 8008e78:	0a5a      	lsrs	r2, r3, #9
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	fb02 f303 	mul.w	r3, r2, r3
 8008e80:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	1e5a      	subs	r2, r3, #1
 8008e86:	61fa      	str	r2, [r7, #28]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e90:	e0c9      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e96:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0ef      	beq.n	8008e82 <SDMMC_GetCmdResp1+0x22>
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1ea      	bne.n	8008e82 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d004      	beq.n	8008ec2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2204      	movs	r2, #4
 8008ebc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ebe:	2304      	movs	r3, #4
 8008ec0:	e0b1      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d004      	beq.n	8008ed8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e0a6      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	22c5      	movs	r2, #197	; 0xc5
 8008edc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7ff fd3e 	bl	8008960 <SDMMC_GetCommandResponse>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d001      	beq.n	8008ef2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e099      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff fd40 	bl	800897a <SDMMC_GetResponse>
 8008efa:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	4b4e      	ldr	r3, [pc, #312]	; (8009038 <SDMMC_GetCmdResp1+0x1d8>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	e08d      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	da02      	bge.n	8008f16 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008f10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f14:	e087      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008f20:	2340      	movs	r3, #64	; 0x40
 8008f22:	e080      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008f2e:	2380      	movs	r3, #128	; 0x80
 8008f30:	e079      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f40:	e071      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f50:	e069      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f60:	e061      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008f6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f70:	e059      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f80:	e051      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f90:	e049      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008fa0:	e041      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fb0:	e039      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fc0:	e031      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d002      	beq.n	8008fd2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008fcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008fd0:	e029      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008fdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fe0:	e021      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008fec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ff0:	e019      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008ffc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009000:	e011      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800900c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009010:	e009      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800901c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009020:	e001      	b.n	8009026 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009026:	4618      	mov	r0, r3
 8009028:	3720      	adds	r7, #32
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000118 	.word	0x20000118
 8009034:	10624dd3 	.word	0x10624dd3
 8009038:	fdffe008 	.word	0xfdffe008

0800903c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009044:	4b1f      	ldr	r3, [pc, #124]	; (80090c4 <SDMMC_GetCmdResp2+0x88>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a1f      	ldr	r2, [pc, #124]	; (80090c8 <SDMMC_GetCmdResp2+0x8c>)
 800904a:	fba2 2303 	umull	r2, r3, r2, r3
 800904e:	0a5b      	lsrs	r3, r3, #9
 8009050:	f241 3288 	movw	r2, #5000	; 0x1388
 8009054:	fb02 f303 	mul.w	r3, r2, r3
 8009058:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	1e5a      	subs	r2, r3, #1
 800905e:	60fa      	str	r2, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d102      	bne.n	800906a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009064:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009068:	e026      	b.n	80090b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0ef      	beq.n	800905a <SDMMC_GetCmdResp2+0x1e>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1ea      	bne.n	800905a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d004      	beq.n	800909a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2204      	movs	r2, #4
 8009094:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009096:	2304      	movs	r3, #4
 8009098:	e00e      	b.n	80090b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d004      	beq.n	80090b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e003      	b.n	80090b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	22c5      	movs	r2, #197	; 0xc5
 80090b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	20000118 	.word	0x20000118
 80090c8:	10624dd3 	.word	0x10624dd3

080090cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090d4:	4b1a      	ldr	r3, [pc, #104]	; (8009140 <SDMMC_GetCmdResp3+0x74>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a1a      	ldr	r2, [pc, #104]	; (8009144 <SDMMC_GetCmdResp3+0x78>)
 80090da:	fba2 2303 	umull	r2, r3, r2, r3
 80090de:	0a5b      	lsrs	r3, r3, #9
 80090e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e4:	fb02 f303 	mul.w	r3, r2, r3
 80090e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	1e5a      	subs	r2, r3, #1
 80090ee:	60fa      	str	r2, [r7, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d102      	bne.n	80090fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090f8:	e01b      	b.n	8009132 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0ef      	beq.n	80090ea <SDMMC_GetCmdResp3+0x1e>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1ea      	bne.n	80090ea <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2204      	movs	r2, #4
 8009124:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009126:	2304      	movs	r3, #4
 8009128:	e003      	b.n	8009132 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	22c5      	movs	r2, #197	; 0xc5
 800912e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	20000118 	.word	0x20000118
 8009144:	10624dd3 	.word	0x10624dd3

08009148 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b088      	sub	sp, #32
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	460b      	mov	r3, r1
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009156:	4b35      	ldr	r3, [pc, #212]	; (800922c <SDMMC_GetCmdResp6+0xe4>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a35      	ldr	r2, [pc, #212]	; (8009230 <SDMMC_GetCmdResp6+0xe8>)
 800915c:	fba2 2303 	umull	r2, r3, r2, r3
 8009160:	0a5b      	lsrs	r3, r3, #9
 8009162:	f241 3288 	movw	r2, #5000	; 0x1388
 8009166:	fb02 f303 	mul.w	r3, r2, r3
 800916a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	1e5a      	subs	r2, r3, #1
 8009170:	61fa      	str	r2, [r7, #28]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d102      	bne.n	800917c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009176:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800917a:	e052      	b.n	8009222 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009180:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0ef      	beq.n	800916c <SDMMC_GetCmdResp6+0x24>
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1ea      	bne.n	800916c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919a:	f003 0304 	and.w	r3, r3, #4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d004      	beq.n	80091ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2204      	movs	r2, #4
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091a8:	2304      	movs	r3, #4
 80091aa:	e03a      	b.n	8009222 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d004      	beq.n	80091c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2201      	movs	r2, #1
 80091bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091be:	2301      	movs	r3, #1
 80091c0:	e02f      	b.n	8009222 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f7ff fbcc 	bl	8008960 <SDMMC_GetCommandResponse>
 80091c8:	4603      	mov	r3, r0
 80091ca:	461a      	mov	r2, r3
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d001      	beq.n	80091d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e025      	b.n	8009222 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	22c5      	movs	r2, #197	; 0xc5
 80091da:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80091dc:	2100      	movs	r1, #0
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f7ff fbcb 	bl	800897a <SDMMC_GetResponse>
 80091e4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d106      	bne.n	80091fe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	0c1b      	lsrs	r3, r3, #16
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80091fa:	2300      	movs	r3, #0
 80091fc:	e011      	b.n	8009222 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800920c:	e009      	b.n	8009222 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800921c:	e001      	b.n	8009222 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800921e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009222:	4618      	mov	r0, r3
 8009224:	3720      	adds	r7, #32
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000118 	.word	0x20000118
 8009230:	10624dd3 	.word	0x10624dd3

08009234 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800923c:	4b22      	ldr	r3, [pc, #136]	; (80092c8 <SDMMC_GetCmdResp7+0x94>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a22      	ldr	r2, [pc, #136]	; (80092cc <SDMMC_GetCmdResp7+0x98>)
 8009242:	fba2 2303 	umull	r2, r3, r2, r3
 8009246:	0a5b      	lsrs	r3, r3, #9
 8009248:	f241 3288 	movw	r2, #5000	; 0x1388
 800924c:	fb02 f303 	mul.w	r3, r2, r3
 8009250:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	1e5a      	subs	r2, r3, #1
 8009256:	60fa      	str	r2, [r7, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d102      	bne.n	8009262 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800925c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009260:	e02c      	b.n	80092bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009266:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0ef      	beq.n	8009252 <SDMMC_GetCmdResp7+0x1e>
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1ea      	bne.n	8009252 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009280:	f003 0304 	and.w	r3, r3, #4
 8009284:	2b00      	cmp	r3, #0
 8009286:	d004      	beq.n	8009292 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2204      	movs	r2, #4
 800928c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800928e:	2304      	movs	r3, #4
 8009290:	e014      	b.n	80092bc <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	d004      	beq.n	80092a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e009      	b.n	80092bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2240      	movs	r2, #64	; 0x40
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80092ba:	2300      	movs	r3, #0

}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	20000118 	.word	0x20000118
 80092cc:	10624dd3 	.word	0x10624dd3

080092d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092d8:	4b11      	ldr	r3, [pc, #68]	; (8009320 <SDMMC_GetCmdError+0x50>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a11      	ldr	r2, [pc, #68]	; (8009324 <SDMMC_GetCmdError+0x54>)
 80092de:	fba2 2303 	umull	r2, r3, r2, r3
 80092e2:	0a5b      	lsrs	r3, r3, #9
 80092e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e8:	fb02 f303 	mul.w	r3, r2, r3
 80092ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	1e5a      	subs	r2, r3, #1
 80092f2:	60fa      	str	r2, [r7, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d102      	bne.n	80092fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092fc:	e009      	b.n	8009312 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009306:	2b00      	cmp	r3, #0
 8009308:	d0f1      	beq.n	80092ee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	22c5      	movs	r2, #197	; 0xc5
 800930e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20000118 	.word	0x20000118
 8009324:	10624dd3 	.word	0x10624dd3

08009328 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b01      	cmp	r3, #1
 800933a:	d101      	bne.n	8009340 <LL_USART_IsEnabled+0x18>
 800933c:	2301      	movs	r3, #1
 800933e:	e000      	b.n	8009342 <LL_USART_IsEnabled+0x1a>
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 800934e:	b480      	push	{r7}
 8009350:	b083      	sub	sp, #12
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	605a      	str	r2, [r3, #4]
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	431a      	orrs	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	609a      	str	r2, [r3, #8]
}
 800938e:	bf00      	nop
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 800939a:	b480      	push	{r7}
 800939c:	b087      	sub	sp, #28
 800939e:	af00      	add	r7, sp, #0
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	607a      	str	r2, [r7, #4]
 80093a6:	603b      	str	r3, [r7, #0]
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ae:	d11a      	bne.n	80093e6 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	005a      	lsls	r2, r3, #1
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	085b      	lsrs	r3, r3, #1
 80093b8:	441a      	add	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80093ca:	4013      	ands	r3, r2
 80093cc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	085b      	lsrs	r3, r3, #1
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	f003 0307 	and.w	r3, r3, #7
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4313      	orrs	r3, r2
 80093dc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 80093e4:	e00a      	b.n	80093fc <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	085a      	lsrs	r2, r3, #1
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	441a      	add	r2, r3
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	60da      	str	r2, [r3, #12]
}
 80093fc:	bf00      	nop
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8009416:	2300      	movs	r3, #0
 8009418:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff ff84 	bl	8009328 <LL_USART_IsEnabled>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d151      	bne.n	80094ca <LL_USART_Init+0xc2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	4b2a      	ldr	r3, [pc, #168]	; (80094d4 <LL_USART_Init+0xcc>)
 800942c:	4013      	ands	r3, r2
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	6851      	ldr	r1, [r2, #4]
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	68d2      	ldr	r2, [r2, #12]
 8009436:	4311      	orrs	r1, r2
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	6912      	ldr	r2, [r2, #16]
 800943c:	4311      	orrs	r1, r2
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	6992      	ldr	r2, [r2, #24]
 8009442:	430a      	orrs	r2, r1
 8009444:	431a      	orrs	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff ff7c 	bl	800934e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff ff89 	bl	8009374 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a1c      	ldr	r2, [pc, #112]	; (80094d8 <LL_USART_Init+0xd0>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d104      	bne.n	8009474 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800946a:	2003      	movs	r0, #3
 800946c:	f7fe ff62 	bl	8008334 <LL_RCC_GetUSARTClockFreq>
 8009470:	60b8      	str	r0, [r7, #8]
 8009472:	e019      	b.n	80094a8 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a19      	ldr	r2, [pc, #100]	; (80094dc <LL_USART_Init+0xd4>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d104      	bne.n	8009486 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800947c:	200c      	movs	r0, #12
 800947e:	f7fe ff59 	bl	8008334 <LL_RCC_GetUSARTClockFreq>
 8009482:	60b8      	str	r0, [r7, #8]
 8009484:	e010      	b.n	80094a8 <LL_USART_Init+0xa0>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a15      	ldr	r2, [pc, #84]	; (80094e0 <LL_USART_Init+0xd8>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d104      	bne.n	8009498 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800948e:	2030      	movs	r0, #48	; 0x30
 8009490:	f7fe ff50 	bl	8008334 <LL_RCC_GetUSARTClockFreq>
 8009494:	60b8      	str	r0, [r7, #8]
 8009496:	e007      	b.n	80094a8 <LL_USART_Init+0xa0>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a12      	ldr	r2, [pc, #72]	; (80094e4 <LL_USART_Init+0xdc>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d103      	bne.n	80094a8 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80094a0:	20c0      	movs	r0, #192	; 0xc0
 80094a2:	f7ff f827 	bl	80084f4 <LL_RCC_GetUARTClockFreq>
 80094a6:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00d      	beq.n	80094ca <LL_USART_Init+0xc2>
        && (USART_InitStruct->BaudRate != 0U))
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d009      	beq.n	80094ca <LL_USART_Init+0xc2>
    {
      status = SUCCESS;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	699a      	ldr	r2, [r3, #24]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68b9      	ldr	r1, [r7, #8]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7ff ff68 	bl	800939a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	efff69f3 	.word	0xefff69f3
 80094d8:	40013800 	.word	0x40013800
 80094dc:	40004400 	.word	0x40004400
 80094e0:	40004800 	.word	0x40004800
 80094e4:	40004c00 	.word	0x40004c00

080094e8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80094e8:	b084      	sub	sp, #16
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	f107 0014 	add.w	r0, r7, #20
 80094f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	b004      	add	sp, #16
 8009508:	4770      	bx	lr

0800950a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800950a:	b480      	push	{r7}
 800950c:	b085      	sub	sp, #20
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800951a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800951e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	b29a      	uxth	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009540:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009544:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800954c:	b29a      	uxth	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	b29b      	uxth	r3, r3
 8009552:	43db      	mvns	r3, r3
 8009554:	b29b      	uxth	r3, r3
 8009556:	4013      	ands	r3, r2
 8009558:	b29a      	uxth	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	460b      	mov	r3, r1
 8009578:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009588:	b084      	sub	sp, #16
 800958a:	b480      	push	{r7}
 800958c:	b083      	sub	sp, #12
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	f107 0014 	add.w	r0, r7, #20
 8009596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	b004      	add	sp, #16
 80095c8:	4770      	bx	lr
	...

080095cc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b09b      	sub	sp, #108	; 0x6c
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80095ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	78db      	ldrb	r3, [r3, #3]
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d81f      	bhi.n	800963e <USB_ActivateEndpoint+0x72>
 80095fe:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <USB_ActivateEndpoint+0x38>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	08009615 	.word	0x08009615
 8009608:	08009631 	.word	0x08009631
 800960c:	08009647 	.word	0x08009647
 8009610:	08009623 	.word	0x08009623
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009614:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009618:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800961c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009620:	e012      	b.n	8009648 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009622:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009626:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800962a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800962e:	e00b      	b.n	8009648 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009630:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009634:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009638:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800963c:	e004      	b.n	8009648 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8009644:	e000      	b.n	8009648 <USB_ActivateEndpoint+0x7c>
      break;
 8009646:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	441a      	add	r2, r3
 8009652:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800965a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800965e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009666:	b29b      	uxth	r3, r3
 8009668:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	b29b      	uxth	r3, r3
 8009678:	b21b      	sxth	r3, r3
 800967a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800967e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009682:	b21a      	sxth	r2, r3
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	b21b      	sxth	r3, r3
 800968a:	4313      	orrs	r3, r2
 800968c:	b21b      	sxth	r3, r3
 800968e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	441a      	add	r2, r3
 800969c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80096a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	7b1b      	ldrb	r3, [r3, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f040 8149 	bne.w	8009950 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	785b      	ldrb	r3, [r3, #1]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f000 8084 	beq.w	80097d0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	617b      	str	r3, [r7, #20]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	461a      	mov	r2, r3
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	4413      	add	r3, r2
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	00da      	lsls	r2, r3, #3
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096ea:	613b      	str	r3, [r7, #16]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	88db      	ldrh	r3, [r3, #6]
 80096f0:	085b      	lsrs	r3, r3, #1
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	81fb      	strh	r3, [r7, #14]
 800970a:	89fb      	ldrh	r3, [r7, #14]
 800970c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009710:	2b00      	cmp	r3, #0
 8009712:	d01b      	beq.n	800974c <USB_ActivateEndpoint+0x180>
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972a:	81bb      	strh	r3, [r7, #12]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	441a      	add	r2, r3
 8009736:	89bb      	ldrh	r3, [r7, #12]
 8009738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800973c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009744:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009748:	b29b      	uxth	r3, r3
 800974a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	78db      	ldrb	r3, [r3, #3]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d020      	beq.n	8009796 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	881b      	ldrh	r3, [r3, #0]
 8009760:	b29b      	uxth	r3, r3
 8009762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800976a:	813b      	strh	r3, [r7, #8]
 800976c:	893b      	ldrh	r3, [r7, #8]
 800976e:	f083 0320 	eor.w	r3, r3, #32
 8009772:	813b      	strh	r3, [r7, #8]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	441a      	add	r2, r3
 800977e:	893b      	ldrh	r3, [r7, #8]
 8009780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800978c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009790:	b29b      	uxth	r3, r3
 8009792:	8013      	strh	r3, [r2, #0]
 8009794:	e27f      	b.n	8009c96 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ac:	817b      	strh	r3, [r7, #10]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	441a      	add	r2, r3
 80097b8:	897b      	ldrh	r3, [r7, #10]
 80097ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	8013      	strh	r3, [r2, #0]
 80097ce:	e262      	b.n	8009c96 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097da:	b29b      	uxth	r3, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	4413      	add	r3, r2
 80097e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	00da      	lsls	r2, r3, #3
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ec:	4413      	add	r3, r2
 80097ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	88db      	ldrh	r3, [r3, #6]
 80097f8:	085b      	lsrs	r3, r3, #1
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	b29a      	uxth	r2, r3
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	627b      	str	r3, [r7, #36]	; 0x24
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800980e:	b29b      	uxth	r3, r3
 8009810:	461a      	mov	r2, r3
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	4413      	add	r3, r2
 8009816:	627b      	str	r3, [r7, #36]	; 0x24
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	00da      	lsls	r2, r3, #3
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	4413      	add	r3, r2
 8009822:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009826:	623b      	str	r3, [r7, #32]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d112      	bne.n	8009856 <USB_ActivateEndpoint+0x28a>
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	b29b      	uxth	r3, r3
 8009836:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800983a:	b29a      	uxth	r2, r3
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	801a      	strh	r2, [r3, #0]
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	b29b      	uxth	r3, r3
 8009846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800984a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800984e:	b29a      	uxth	r2, r3
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	801a      	strh	r2, [r3, #0]
 8009854:	e02f      	b.n	80098b6 <USB_ActivateEndpoint+0x2ea>
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	2b3e      	cmp	r3, #62	; 0x3e
 800985c:	d813      	bhi.n	8009886 <USB_ActivateEndpoint+0x2ba>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	085b      	lsrs	r3, r3, #1
 8009864:	663b      	str	r3, [r7, #96]	; 0x60
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <USB_ActivateEndpoint+0x2ac>
 8009872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009874:	3301      	adds	r3, #1
 8009876:	663b      	str	r3, [r7, #96]	; 0x60
 8009878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800987a:	b29b      	uxth	r3, r3
 800987c:	029b      	lsls	r3, r3, #10
 800987e:	b29a      	uxth	r2, r3
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	801a      	strh	r2, [r3, #0]
 8009884:	e017      	b.n	80098b6 <USB_ActivateEndpoint+0x2ea>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	095b      	lsrs	r3, r3, #5
 800988c:	663b      	str	r3, [r7, #96]	; 0x60
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f003 031f 	and.w	r3, r3, #31
 8009896:	2b00      	cmp	r3, #0
 8009898:	d102      	bne.n	80098a0 <USB_ActivateEndpoint+0x2d4>
 800989a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800989c:	3b01      	subs	r3, #1
 800989e:	663b      	str	r3, [r7, #96]	; 0x60
 80098a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	029b      	lsls	r3, r3, #10
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	83fb      	strh	r3, [r7, #30]
 80098c4:	8bfb      	ldrh	r3, [r7, #30]
 80098c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d01b      	beq.n	8009906 <USB_ActivateEndpoint+0x33a>
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	b29b      	uxth	r3, r3
 80098dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098e4:	83bb      	strh	r3, [r7, #28]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	441a      	add	r2, r3
 80098f0:	8bbb      	ldrh	r3, [r7, #28]
 80098f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009902:	b29b      	uxth	r3, r3
 8009904:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	b29b      	uxth	r3, r3
 8009914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991c:	837b      	strh	r3, [r7, #26]
 800991e:	8b7b      	ldrh	r3, [r7, #26]
 8009920:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009924:	837b      	strh	r3, [r7, #26]
 8009926:	8b7b      	ldrh	r3, [r7, #26]
 8009928:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800992c:	837b      	strh	r3, [r7, #26]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	441a      	add	r2, r3
 8009938:	8b7b      	ldrh	r3, [r7, #26]
 800993a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800993e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800994a:	b29b      	uxth	r3, r3
 800994c:	8013      	strh	r3, [r2, #0]
 800994e:	e1a2      	b.n	8009c96 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	b29b      	uxth	r3, r3
 800995e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009966:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	441a      	add	r2, r3
 8009974:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800997c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009980:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009988:	b29b      	uxth	r3, r3
 800998a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009996:	b29b      	uxth	r3, r3
 8009998:	461a      	mov	r2, r3
 800999a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800999c:	4413      	add	r3, r2
 800999e:	65bb      	str	r3, [r7, #88]	; 0x58
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	00da      	lsls	r2, r3, #3
 80099a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099ae:	657b      	str	r3, [r7, #84]	; 0x54
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	891b      	ldrh	r3, [r3, #8]
 80099b4:	085b      	lsrs	r3, r3, #1
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099be:	801a      	strh	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	653b      	str	r3, [r7, #80]	; 0x50
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	461a      	mov	r2, r3
 80099ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099d0:	4413      	add	r3, r2
 80099d2:	653b      	str	r3, [r7, #80]	; 0x50
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	00da      	lsls	r2, r3, #3
 80099da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099dc:	4413      	add	r3, r2
 80099de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80099e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	895b      	ldrh	r3, [r3, #10]
 80099e8:	085b      	lsrs	r3, r3, #1
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	785b      	ldrb	r3, [r3, #1]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f040 8091 	bne.w	8009b20 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009a0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d01b      	beq.n	8009a4e <USB_ActivateEndpoint+0x482>
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a2c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	441a      	add	r2, r3
 8009a38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	873b      	strh	r3, [r7, #56]	; 0x38
 8009a5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d01b      	beq.n	8009a9e <USB_ActivateEndpoint+0x4d2>
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a7c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	441a      	add	r2, r3
 8009a88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009ab6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009ab8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009abc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009abe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009ac0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ac4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	441a      	add	r2, r3
 8009ad0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afc:	867b      	strh	r3, [r7, #50]	; 0x32
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	441a      	add	r2, r3
 8009b08:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	8013      	strh	r3, [r2, #0]
 8009b1e:	e0ba      	b.n	8009c96 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009b30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01d      	beq.n	8009b78 <USB_ActivateEndpoint+0x5ac>
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	441a      	add	r2, r3
 8009b60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009b88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d01d      	beq.n	8009bd0 <USB_ActivateEndpoint+0x604>
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009baa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	441a      	add	r2, r3
 8009bb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	78db      	ldrb	r3, [r3, #3]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d024      	beq.n	8009c22 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009bf2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009bf6:	f083 0320 	eor.w	r3, r3, #32
 8009bfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	441a      	add	r2, r3
 8009c08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	8013      	strh	r3, [r2, #0]
 8009c20:	e01d      	b.n	8009c5e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	441a      	add	r2, r3
 8009c46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c74:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	441a      	add	r2, r3
 8009c80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009c96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	376c      	adds	r7, #108	; 0x6c
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop

08009ca8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b08d      	sub	sp, #52	; 0x34
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	7b1b      	ldrb	r3, [r3, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f040 808e 	bne.w	8009dd8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	785b      	ldrb	r3, [r3, #1]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d044      	beq.n	8009d4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	81bb      	strh	r3, [r7, #12]
 8009cd2:	89bb      	ldrh	r3, [r7, #12]
 8009cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d01b      	beq.n	8009d14 <USB_DeactivateEndpoint+0x6c>
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	881b      	ldrh	r3, [r3, #0]
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf2:	817b      	strh	r3, [r7, #10]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	441a      	add	r2, r3
 8009cfe:	897b      	ldrh	r3, [r7, #10]
 8009d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	881b      	ldrh	r3, [r3, #0]
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d2a:	813b      	strh	r3, [r7, #8]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	441a      	add	r2, r3
 8009d36:	893b      	ldrh	r3, [r7, #8]
 8009d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	8013      	strh	r3, [r2, #0]
 8009d4c:	e192      	b.n	800a074 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	881b      	ldrh	r3, [r3, #0]
 8009d5a:	827b      	strh	r3, [r7, #18]
 8009d5c:	8a7b      	ldrh	r3, [r7, #18]
 8009d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d01b      	beq.n	8009d9e <USB_DeactivateEndpoint+0xf6>
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d7c:	823b      	strh	r3, [r7, #16]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	441a      	add	r2, r3
 8009d88:	8a3b      	ldrh	r3, [r7, #16]
 8009d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	881b      	ldrh	r3, [r3, #0]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db4:	81fb      	strh	r3, [r7, #14]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	441a      	add	r2, r3
 8009dc0:	89fb      	ldrh	r3, [r7, #14]
 8009dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	8013      	strh	r3, [r2, #0]
 8009dd6:	e14d      	b.n	800a074 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	785b      	ldrb	r3, [r3, #1]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f040 80a5 	bne.w	8009f2c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	843b      	strh	r3, [r7, #32]
 8009df0:	8c3b      	ldrh	r3, [r7, #32]
 8009df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d01b      	beq.n	8009e32 <USB_DeactivateEndpoint+0x18a>
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e10:	83fb      	strh	r3, [r7, #30]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	441a      	add	r2, r3
 8009e1c:	8bfb      	ldrh	r3, [r7, #30]
 8009e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	83bb      	strh	r3, [r7, #28]
 8009e40:	8bbb      	ldrh	r3, [r7, #28]
 8009e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d01b      	beq.n	8009e82 <USB_DeactivateEndpoint+0x1da>
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	881b      	ldrh	r3, [r3, #0]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e60:	837b      	strh	r3, [r7, #26]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	441a      	add	r2, r3
 8009e6c:	8b7b      	ldrh	r3, [r7, #26]
 8009e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e98:	833b      	strh	r3, [r7, #24]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	441a      	add	r2, r3
 8009ea4:	8b3b      	ldrh	r3, [r7, #24]
 8009ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed0:	82fb      	strh	r3, [r7, #22]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	441a      	add	r2, r3
 8009edc:	8afb      	ldrh	r3, [r7, #22]
 8009ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f08:	82bb      	strh	r3, [r7, #20]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	441a      	add	r2, r3
 8009f14:	8abb      	ldrh	r3, [r7, #20]
 8009f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	8013      	strh	r3, [r2, #0]
 8009f2a:	e0a3      	b.n	800a074 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009f3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d01b      	beq.n	8009f7c <USB_DeactivateEndpoint+0x2d4>
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	881b      	ldrh	r3, [r3, #0]
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	441a      	add	r2, r3
 8009f66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009f8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d01b      	beq.n	8009fcc <USB_DeactivateEndpoint+0x324>
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009faa:	853b      	strh	r3, [r7, #40]	; 0x28
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	441a      	add	r2, r3
 8009fb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	441a      	add	r2, r3
 8009fee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a000:	b29b      	uxth	r3, r3
 800a002:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a01a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	441a      	add	r2, r3
 800a026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a02c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a038:	b29b      	uxth	r3, r3
 800a03a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a04e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a052:	847b      	strh	r3, [r7, #34]	; 0x22
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	441a      	add	r2, r3
 800a05e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a06c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a070:	b29b      	uxth	r3, r3
 800a072:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3734      	adds	r7, #52	; 0x34
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b0c4      	sub	sp, #272	; 0x110
 800a086:	af00      	add	r7, sp, #0
 800a088:	1d3b      	adds	r3, r7, #4
 800a08a:	6018      	str	r0, [r3, #0]
 800a08c:	463b      	mov	r3, r7
 800a08e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a090:	463b      	mov	r3, r7
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	785b      	ldrb	r3, [r3, #1]
 800a096:	2b01      	cmp	r3, #1
 800a098:	f040 8566 	bne.w	800ab68 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a09c:	463b      	mov	r3, r7
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	699a      	ldr	r2, [r3, #24]
 800a0a2:	463b      	mov	r3, r7
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d905      	bls.n	800a0b8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a0b6:	e004      	b.n	800a0c2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a0b8:	463b      	mov	r3, r7
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	7b1b      	ldrb	r3, [r3, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d12c      	bne.n	800a126 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a0cc:	463b      	mov	r3, r7
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6959      	ldr	r1, [r3, #20]
 800a0d2:	463b      	mov	r3, r7
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	88da      	ldrh	r2, [r3, #6]
 800a0d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	1d38      	adds	r0, r7, #4
 800a0e0:	6800      	ldr	r0, [r0, #0]
 800a0e2:	f001 fa58 	bl	800b596 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a0e6:	1d3b      	adds	r3, r7, #4
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	617b      	str	r3, [r7, #20]
 800a0ec:	1d3b      	adds	r3, r7, #4
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	617b      	str	r3, [r7, #20]
 800a0fe:	463b      	mov	r3, r7
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	00da      	lsls	r2, r3, #3
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	4413      	add	r3, r2
 800a10a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800a10e:	f107 0310 	add.w	r3, r7, #16
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a118:	b29a      	uxth	r2, r3
 800a11a:	f107 0310 	add.w	r3, r7, #16
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	801a      	strh	r2, [r3, #0]
 800a122:	f000 bcec 	b.w	800aafe <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a126:	463b      	mov	r3, r7
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	78db      	ldrb	r3, [r3, #3]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	f040 8356 	bne.w	800a7de <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a132:	463b      	mov	r3, r7
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6a1a      	ldr	r2, [r3, #32]
 800a138:	463b      	mov	r3, r7
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	429a      	cmp	r2, r3
 800a140:	f240 82fa 	bls.w	800a738 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a144:	1d3b      	adds	r3, r7, #4
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	463b      	mov	r3, r7
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	881b      	ldrh	r3, [r3, #0]
 800a154:	b29b      	uxth	r3, r3
 800a156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a15a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800a162:	1d3b      	adds	r3, r7, #4
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	463b      	mov	r3, r7
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	441a      	add	r2, r3
 800a170:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a17c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a184:	b29b      	uxth	r3, r3
 800a186:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800a188:	463b      	mov	r3, r7
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a192:	463b      	mov	r3, r7
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6a1a      	ldr	r2, [r3, #32]
 800a198:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a19c:	1ad2      	subs	r2, r2, r3
 800a19e:	463b      	mov	r3, r7
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a1a4:	1d3b      	adds	r3, r7, #4
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	463b      	mov	r3, r7
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 815e 	beq.w	800a47c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a1c0:	1d3b      	adds	r3, r7, #4
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a1c6:	463b      	mov	r3, r7
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	785b      	ldrb	r3, [r3, #1]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d164      	bne.n	800a29a <USB_EPStartXfer+0x218>
 800a1d0:	1d3b      	adds	r3, r7, #4
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1d6:	1d3b      	adds	r3, r7, #4
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e4:	4413      	add	r3, r2
 800a1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1e8:	463b      	mov	r3, r7
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	00da      	lsls	r2, r3, #3
 800a1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a1f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d112      	bne.n	800a228 <USB_EPStartXfer+0x1a6>
 800a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	b29b      	uxth	r3, r3
 800a208:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	801a      	strh	r2, [r3, #0]
 800a212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	b29b      	uxth	r3, r3
 800a218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a21c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a220:	b29a      	uxth	r2, r3
 800a222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a224:	801a      	strh	r2, [r3, #0]
 800a226:	e054      	b.n	800a2d2 <USB_EPStartXfer+0x250>
 800a228:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a22c:	2b3e      	cmp	r3, #62	; 0x3e
 800a22e:	d817      	bhi.n	800a260 <USB_EPStartXfer+0x1de>
 800a230:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a234:	085b      	lsrs	r3, r3, #1
 800a236:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a23a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	2b00      	cmp	r3, #0
 800a244:	d004      	beq.n	800a250 <USB_EPStartXfer+0x1ce>
 800a246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a24a:	3301      	adds	r3, #1
 800a24c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a254:	b29b      	uxth	r3, r3
 800a256:	029b      	lsls	r3, r3, #10
 800a258:	b29a      	uxth	r2, r3
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	801a      	strh	r2, [r3, #0]
 800a25e:	e038      	b.n	800a2d2 <USB_EPStartXfer+0x250>
 800a260:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a264:	095b      	lsrs	r3, r3, #5
 800a266:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a26a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a26e:	f003 031f 	and.w	r3, r3, #31
 800a272:	2b00      	cmp	r3, #0
 800a274:	d104      	bne.n	800a280 <USB_EPStartXfer+0x1fe>
 800a276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a27a:	3b01      	subs	r3, #1
 800a27c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a284:	b29b      	uxth	r3, r3
 800a286:	029b      	lsls	r3, r3, #10
 800a288:	b29b      	uxth	r3, r3
 800a28a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a28e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a292:	b29a      	uxth	r2, r3
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	801a      	strh	r2, [r3, #0]
 800a298:	e01b      	b.n	800a2d2 <USB_EPStartXfer+0x250>
 800a29a:	463b      	mov	r3, r7
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	785b      	ldrb	r3, [r3, #1]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d116      	bne.n	800a2d2 <USB_EPStartXfer+0x250>
 800a2a4:	1d3b      	adds	r3, r7, #4
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b2:	4413      	add	r3, r2
 800a2b4:	637b      	str	r3, [r7, #52]	; 0x34
 800a2b6:	463b      	mov	r3, r7
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	00da      	lsls	r2, r3, #3
 800a2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2c6:	633b      	str	r3, [r7, #48]	; 0x30
 800a2c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a2d2:	463b      	mov	r3, r7
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	895b      	ldrh	r3, [r3, #10]
 800a2d8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2dc:	463b      	mov	r3, r7
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6959      	ldr	r1, [r3, #20]
 800a2e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a2ec:	1d38      	adds	r0, r7, #4
 800a2ee:	6800      	ldr	r0, [r0, #0]
 800a2f0:	f001 f951 	bl	800b596 <USB_WritePMA>
            ep->xfer_buff += len;
 800a2f4:	463b      	mov	r3, r7
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	695a      	ldr	r2, [r3, #20]
 800a2fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2fe:	441a      	add	r2, r3
 800a300:	463b      	mov	r3, r7
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a306:	463b      	mov	r3, r7
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6a1a      	ldr	r2, [r3, #32]
 800a30c:	463b      	mov	r3, r7
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	429a      	cmp	r2, r3
 800a314:	d90e      	bls.n	800a334 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800a316:	463b      	mov	r3, r7
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800a320:	463b      	mov	r3, r7
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6a1a      	ldr	r2, [r3, #32]
 800a326:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a32a:	1ad2      	subs	r2, r2, r3
 800a32c:	463b      	mov	r3, r7
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	621a      	str	r2, [r3, #32]
 800a332:	e008      	b.n	800a346 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a334:	463b      	mov	r3, r7
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800a33e:	463b      	mov	r3, r7
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2200      	movs	r2, #0
 800a344:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a346:	463b      	mov	r3, r7
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	785b      	ldrb	r3, [r3, #1]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d164      	bne.n	800a41a <USB_EPStartXfer+0x398>
 800a350:	1d3b      	adds	r3, r7, #4
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	61fb      	str	r3, [r7, #28]
 800a356:	1d3b      	adds	r3, r7, #4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a35e:	b29b      	uxth	r3, r3
 800a360:	461a      	mov	r2, r3
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	4413      	add	r3, r2
 800a366:	61fb      	str	r3, [r7, #28]
 800a368:	463b      	mov	r3, r7
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	00da      	lsls	r2, r3, #3
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	4413      	add	r3, r2
 800a374:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a378:	61bb      	str	r3, [r7, #24]
 800a37a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d112      	bne.n	800a3a8 <USB_EPStartXfer+0x326>
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29b      	uxth	r3, r3
 800a388:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	801a      	strh	r2, [r3, #0]
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	881b      	ldrh	r3, [r3, #0]
 800a396:	b29b      	uxth	r3, r3
 800a398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a39c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	801a      	strh	r2, [r3, #0]
 800a3a6:	e057      	b.n	800a458 <USB_EPStartXfer+0x3d6>
 800a3a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a3ac:	2b3e      	cmp	r3, #62	; 0x3e
 800a3ae:	d817      	bhi.n	800a3e0 <USB_EPStartXfer+0x35e>
 800a3b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a3b4:	085b      	lsrs	r3, r3, #1
 800a3b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d004      	beq.n	800a3d0 <USB_EPStartXfer+0x34e>
 800a3c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	029b      	lsls	r3, r3, #10
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	801a      	strh	r2, [r3, #0]
 800a3de:	e03b      	b.n	800a458 <USB_EPStartXfer+0x3d6>
 800a3e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a3e4:	095b      	lsrs	r3, r3, #5
 800a3e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a3ee:	f003 031f 	and.w	r3, r3, #31
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d104      	bne.n	800a400 <USB_EPStartXfer+0x37e>
 800a3f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a400:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a404:	b29b      	uxth	r3, r3
 800a406:	029b      	lsls	r3, r3, #10
 800a408:	b29b      	uxth	r3, r3
 800a40a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a40e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a412:	b29a      	uxth	r2, r3
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	801a      	strh	r2, [r3, #0]
 800a418:	e01e      	b.n	800a458 <USB_EPStartXfer+0x3d6>
 800a41a:	463b      	mov	r3, r7
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	785b      	ldrb	r3, [r3, #1]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d119      	bne.n	800a458 <USB_EPStartXfer+0x3d6>
 800a424:	1d3b      	adds	r3, r7, #4
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
 800a42a:	1d3b      	adds	r3, r7, #4
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a432:	b29b      	uxth	r3, r3
 800a434:	461a      	mov	r2, r3
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	4413      	add	r3, r2
 800a43a:	627b      	str	r3, [r7, #36]	; 0x24
 800a43c:	463b      	mov	r3, r7
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	00da      	lsls	r2, r3, #3
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	4413      	add	r3, r2
 800a448:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a44c:	623b      	str	r3, [r7, #32]
 800a44e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a452:	b29a      	uxth	r2, r3
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a458:	463b      	mov	r3, r7
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	891b      	ldrh	r3, [r3, #8]
 800a45e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a462:	463b      	mov	r3, r7
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6959      	ldr	r1, [r3, #20]
 800a468:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a472:	1d38      	adds	r0, r7, #4
 800a474:	6800      	ldr	r0, [r0, #0]
 800a476:	f001 f88e 	bl	800b596 <USB_WritePMA>
 800a47a:	e340      	b.n	800aafe <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a47c:	463b      	mov	r3, r7
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	785b      	ldrb	r3, [r3, #1]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d164      	bne.n	800a550 <USB_EPStartXfer+0x4ce>
 800a486:	1d3b      	adds	r3, r7, #4
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a48c:	1d3b      	adds	r3, r7, #4
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a494:	b29b      	uxth	r3, r3
 800a496:	461a      	mov	r2, r3
 800a498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a49a:	4413      	add	r3, r2
 800a49c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a49e:	463b      	mov	r3, r7
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	00da      	lsls	r2, r3, #3
 800a4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d112      	bne.n	800a4de <USB_EPStartXfer+0x45c>
 800a4b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4c6:	801a      	strh	r2, [r3, #0]
 800a4c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4da:	801a      	strh	r2, [r3, #0]
 800a4dc:	e057      	b.n	800a58e <USB_EPStartXfer+0x50c>
 800a4de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4e2:	2b3e      	cmp	r3, #62	; 0x3e
 800a4e4:	d817      	bhi.n	800a516 <USB_EPStartXfer+0x494>
 800a4e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4ea:	085b      	lsrs	r3, r3, #1
 800a4ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a4f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d004      	beq.n	800a506 <USB_EPStartXfer+0x484>
 800a4fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a500:	3301      	adds	r3, #1
 800a502:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	029b      	lsls	r3, r3, #10
 800a50e:	b29a      	uxth	r2, r3
 800a510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a512:	801a      	strh	r2, [r3, #0]
 800a514:	e03b      	b.n	800a58e <USB_EPStartXfer+0x50c>
 800a516:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a51a:	095b      	lsrs	r3, r3, #5
 800a51c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a524:	f003 031f 	and.w	r3, r3, #31
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d104      	bne.n	800a536 <USB_EPStartXfer+0x4b4>
 800a52c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a530:	3b01      	subs	r3, #1
 800a532:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	029b      	lsls	r3, r3, #10
 800a53e:	b29b      	uxth	r3, r3
 800a540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a548:	b29a      	uxth	r2, r3
 800a54a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a54c:	801a      	strh	r2, [r3, #0]
 800a54e:	e01e      	b.n	800a58e <USB_EPStartXfer+0x50c>
 800a550:	463b      	mov	r3, r7
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	785b      	ldrb	r3, [r3, #1]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d119      	bne.n	800a58e <USB_EPStartXfer+0x50c>
 800a55a:	1d3b      	adds	r3, r7, #4
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	657b      	str	r3, [r7, #84]	; 0x54
 800a560:	1d3b      	adds	r3, r7, #4
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a568:	b29b      	uxth	r3, r3
 800a56a:	461a      	mov	r2, r3
 800a56c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a56e:	4413      	add	r3, r2
 800a570:	657b      	str	r3, [r7, #84]	; 0x54
 800a572:	463b      	mov	r3, r7
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	00da      	lsls	r2, r3, #3
 800a57a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a57c:	4413      	add	r3, r2
 800a57e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a582:	653b      	str	r3, [r7, #80]	; 0x50
 800a584:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a588:	b29a      	uxth	r2, r3
 800a58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a58c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a58e:	463b      	mov	r3, r7
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	891b      	ldrh	r3, [r3, #8]
 800a594:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a598:	463b      	mov	r3, r7
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6959      	ldr	r1, [r3, #20]
 800a59e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a5a8:	1d38      	adds	r0, r7, #4
 800a5aa:	6800      	ldr	r0, [r0, #0]
 800a5ac:	f000 fff3 	bl	800b596 <USB_WritePMA>
            ep->xfer_buff += len;
 800a5b0:	463b      	mov	r3, r7
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	695a      	ldr	r2, [r3, #20]
 800a5b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a5ba:	441a      	add	r2, r3
 800a5bc:	463b      	mov	r3, r7
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a5c2:	463b      	mov	r3, r7
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6a1a      	ldr	r2, [r3, #32]
 800a5c8:	463b      	mov	r3, r7
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d90e      	bls.n	800a5f0 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800a5d2:	463b      	mov	r3, r7
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800a5dc:	463b      	mov	r3, r7
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6a1a      	ldr	r2, [r3, #32]
 800a5e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a5e6:	1ad2      	subs	r2, r2, r3
 800a5e8:	463b      	mov	r3, r7
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	621a      	str	r2, [r3, #32]
 800a5ee:	e008      	b.n	800a602 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800a5f0:	463b      	mov	r3, r7
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800a5fa:	463b      	mov	r3, r7
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2200      	movs	r2, #0
 800a600:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a602:	1d3b      	adds	r3, r7, #4
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	647b      	str	r3, [r7, #68]	; 0x44
 800a608:	463b      	mov	r3, r7
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d164      	bne.n	800a6dc <USB_EPStartXfer+0x65a>
 800a612:	1d3b      	adds	r3, r7, #4
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a618:	1d3b      	adds	r3, r7, #4
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a620:	b29b      	uxth	r3, r3
 800a622:	461a      	mov	r2, r3
 800a624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a626:	4413      	add	r3, r2
 800a628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a62a:	463b      	mov	r3, r7
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	00da      	lsls	r2, r3, #3
 800a632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a634:	4413      	add	r3, r2
 800a636:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a63a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a63c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a640:	2b00      	cmp	r3, #0
 800a642:	d112      	bne.n	800a66a <USB_EPStartXfer+0x5e8>
 800a644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	b29b      	uxth	r3, r3
 800a64a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a64e:	b29a      	uxth	r2, r3
 800a650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a652:	801a      	strh	r2, [r3, #0]
 800a654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a65e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a662:	b29a      	uxth	r2, r3
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	801a      	strh	r2, [r3, #0]
 800a668:	e054      	b.n	800a714 <USB_EPStartXfer+0x692>
 800a66a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a66e:	2b3e      	cmp	r3, #62	; 0x3e
 800a670:	d817      	bhi.n	800a6a2 <USB_EPStartXfer+0x620>
 800a672:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a676:	085b      	lsrs	r3, r3, #1
 800a678:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a67c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a680:	f003 0301 	and.w	r3, r3, #1
 800a684:	2b00      	cmp	r3, #0
 800a686:	d004      	beq.n	800a692 <USB_EPStartXfer+0x610>
 800a688:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a68c:	3301      	adds	r3, #1
 800a68e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a696:	b29b      	uxth	r3, r3
 800a698:	029b      	lsls	r3, r3, #10
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	801a      	strh	r2, [r3, #0]
 800a6a0:	e038      	b.n	800a714 <USB_EPStartXfer+0x692>
 800a6a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a6a6:	095b      	lsrs	r3, r3, #5
 800a6a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a6b0:	f003 031f 	and.w	r3, r3, #31
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d104      	bne.n	800a6c2 <USB_EPStartXfer+0x640>
 800a6b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	029b      	lsls	r3, r3, #10
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d8:	801a      	strh	r2, [r3, #0]
 800a6da:	e01b      	b.n	800a714 <USB_EPStartXfer+0x692>
 800a6dc:	463b      	mov	r3, r7
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	785b      	ldrb	r3, [r3, #1]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d116      	bne.n	800a714 <USB_EPStartXfer+0x692>
 800a6e6:	1d3b      	adds	r3, r7, #4
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f4:	4413      	add	r3, r2
 800a6f6:	647b      	str	r3, [r7, #68]	; 0x44
 800a6f8:	463b      	mov	r3, r7
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	00da      	lsls	r2, r3, #3
 800a700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a702:	4413      	add	r3, r2
 800a704:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a708:	643b      	str	r3, [r7, #64]	; 0x40
 800a70a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a70e:	b29a      	uxth	r2, r3
 800a710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a712:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a714:	463b      	mov	r3, r7
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	895b      	ldrh	r3, [r3, #10]
 800a71a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a71e:	463b      	mov	r3, r7
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6959      	ldr	r1, [r3, #20]
 800a724:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a728:	b29b      	uxth	r3, r3
 800a72a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a72e:	1d38      	adds	r0, r7, #4
 800a730:	6800      	ldr	r0, [r0, #0]
 800a732:	f000 ff30 	bl	800b596 <USB_WritePMA>
 800a736:	e1e2      	b.n	800aafe <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800a738:	463b      	mov	r3, r7
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a742:	1d3b      	adds	r3, r7, #4
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	463b      	mov	r3, r7
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	b29b      	uxth	r3, r3
 800a754:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a75c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a760:	1d3b      	adds	r3, r7, #4
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	463b      	mov	r3, r7
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	441a      	add	r2, r3
 800a76e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a77a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a77e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a782:	b29b      	uxth	r3, r3
 800a784:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a786:	1d3b      	adds	r3, r7, #4
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	663b      	str	r3, [r7, #96]	; 0x60
 800a78c:	1d3b      	adds	r3, r7, #4
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a794:	b29b      	uxth	r3, r3
 800a796:	461a      	mov	r2, r3
 800a798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a79a:	4413      	add	r3, r2
 800a79c:	663b      	str	r3, [r7, #96]	; 0x60
 800a79e:	463b      	mov	r3, r7
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	00da      	lsls	r2, r3, #3
 800a7a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a7ba:	463b      	mov	r3, r7
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	891b      	ldrh	r3, [r3, #8]
 800a7c0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7c4:	463b      	mov	r3, r7
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6959      	ldr	r1, [r3, #20]
 800a7ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a7d4:	1d38      	adds	r0, r7, #4
 800a7d6:	6800      	ldr	r0, [r0, #0]
 800a7d8:	f000 fedd 	bl	800b596 <USB_WritePMA>
 800a7dc:	e18f      	b.n	800aafe <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a7de:	1d3b      	adds	r3, r7, #4
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	463b      	mov	r3, r7
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4413      	add	r3, r2
 800a7ec:	881b      	ldrh	r3, [r3, #0]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 808f 	beq.w	800a918 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a7fa:	1d3b      	adds	r3, r7, #4
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	67bb      	str	r3, [r7, #120]	; 0x78
 800a800:	463b      	mov	r3, r7
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d164      	bne.n	800a8d4 <USB_EPStartXfer+0x852>
 800a80a:	1d3b      	adds	r3, r7, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	673b      	str	r3, [r7, #112]	; 0x70
 800a810:	1d3b      	adds	r3, r7, #4
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a818:	b29b      	uxth	r3, r3
 800a81a:	461a      	mov	r2, r3
 800a81c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a81e:	4413      	add	r3, r2
 800a820:	673b      	str	r3, [r7, #112]	; 0x70
 800a822:	463b      	mov	r3, r7
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	00da      	lsls	r2, r3, #3
 800a82a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a82c:	4413      	add	r3, r2
 800a82e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a832:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a834:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d112      	bne.n	800a862 <USB_EPStartXfer+0x7e0>
 800a83c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a83e:	881b      	ldrh	r3, [r3, #0]
 800a840:	b29b      	uxth	r3, r3
 800a842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a846:	b29a      	uxth	r2, r3
 800a848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a84a:	801a      	strh	r2, [r3, #0]
 800a84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a84e:	881b      	ldrh	r3, [r3, #0]
 800a850:	b29b      	uxth	r3, r3
 800a852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a85e:	801a      	strh	r2, [r3, #0]
 800a860:	e054      	b.n	800a90c <USB_EPStartXfer+0x88a>
 800a862:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a866:	2b3e      	cmp	r3, #62	; 0x3e
 800a868:	d817      	bhi.n	800a89a <USB_EPStartXfer+0x818>
 800a86a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a86e:	085b      	lsrs	r3, r3, #1
 800a870:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a874:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d004      	beq.n	800a88a <USB_EPStartXfer+0x808>
 800a880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a884:	3301      	adds	r3, #1
 800a886:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a88e:	b29b      	uxth	r3, r3
 800a890:	029b      	lsls	r3, r3, #10
 800a892:	b29a      	uxth	r2, r3
 800a894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a896:	801a      	strh	r2, [r3, #0]
 800a898:	e038      	b.n	800a90c <USB_EPStartXfer+0x88a>
 800a89a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a89e:	095b      	lsrs	r3, r3, #5
 800a8a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a8a8:	f003 031f 	and.w	r3, r3, #31
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d104      	bne.n	800a8ba <USB_EPStartXfer+0x838>
 800a8b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	029b      	lsls	r3, r3, #10
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d0:	801a      	strh	r2, [r3, #0]
 800a8d2:	e01b      	b.n	800a90c <USB_EPStartXfer+0x88a>
 800a8d4:	463b      	mov	r3, r7
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d116      	bne.n	800a90c <USB_EPStartXfer+0x88a>
 800a8de:	1d3b      	adds	r3, r7, #4
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ec:	4413      	add	r3, r2
 800a8ee:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8f0:	463b      	mov	r3, r7
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	00da      	lsls	r2, r3, #3
 800a8f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a900:	677b      	str	r3, [r7, #116]	; 0x74
 800a902:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a906:	b29a      	uxth	r2, r3
 800a908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a90a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a90c:	463b      	mov	r3, r7
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	895b      	ldrh	r3, [r3, #10]
 800a912:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800a916:	e097      	b.n	800aa48 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a918:	463b      	mov	r3, r7
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	785b      	ldrb	r3, [r3, #1]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d168      	bne.n	800a9f4 <USB_EPStartXfer+0x972>
 800a922:	1d3b      	adds	r3, r7, #4
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a92a:	1d3b      	adds	r3, r7, #4
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a932:	b29b      	uxth	r3, r3
 800a934:	461a      	mov	r2, r3
 800a936:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a93a:	4413      	add	r3, r2
 800a93c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a940:	463b      	mov	r3, r7
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	00da      	lsls	r2, r3, #3
 800a948:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a94c:	4413      	add	r3, r2
 800a94e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a952:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a954:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d112      	bne.n	800a982 <USB_EPStartXfer+0x900>
 800a95c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a95e:	881b      	ldrh	r3, [r3, #0]
 800a960:	b29b      	uxth	r3, r3
 800a962:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a966:	b29a      	uxth	r2, r3
 800a968:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a96a:	801a      	strh	r2, [r3, #0]
 800a96c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	b29b      	uxth	r3, r3
 800a972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a97e:	801a      	strh	r2, [r3, #0]
 800a980:	e05d      	b.n	800aa3e <USB_EPStartXfer+0x9bc>
 800a982:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a986:	2b3e      	cmp	r3, #62	; 0x3e
 800a988:	d817      	bhi.n	800a9ba <USB_EPStartXfer+0x938>
 800a98a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a98e:	085b      	lsrs	r3, r3, #1
 800a990:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a994:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d004      	beq.n	800a9aa <USB_EPStartXfer+0x928>
 800a9a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a9aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	029b      	lsls	r3, r3, #10
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9b6:	801a      	strh	r2, [r3, #0]
 800a9b8:	e041      	b.n	800aa3e <USB_EPStartXfer+0x9bc>
 800a9ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9be:	095b      	lsrs	r3, r3, #5
 800a9c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a9c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9c8:	f003 031f 	and.w	r3, r3, #31
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d104      	bne.n	800a9da <USB_EPStartXfer+0x958>
 800a9d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a9da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	029b      	lsls	r3, r3, #10
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9f0:	801a      	strh	r2, [r3, #0]
 800a9f2:	e024      	b.n	800aa3e <USB_EPStartXfer+0x9bc>
 800a9f4:	463b      	mov	r3, r7
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	785b      	ldrb	r3, [r3, #1]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d11f      	bne.n	800aa3e <USB_EPStartXfer+0x9bc>
 800a9fe:	1d3b      	adds	r3, r7, #4
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa06:	1d3b      	adds	r3, r7, #4
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	461a      	mov	r2, r3
 800aa12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa16:	4413      	add	r3, r2
 800aa18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa1c:	463b      	mov	r3, r7
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	00da      	lsls	r2, r3, #3
 800aa24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa28:	4413      	add	r3, r2
 800aa2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aa3e:	463b      	mov	r3, r7
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	891b      	ldrh	r3, [r3, #8]
 800aa44:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa48:	463b      	mov	r3, r7
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6959      	ldr	r1, [r3, #20]
 800aa4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800aa58:	1d38      	adds	r0, r7, #4
 800aa5a:	6800      	ldr	r0, [r0, #0]
 800aa5c:	f000 fd9b 	bl	800b596 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800aa60:	463b      	mov	r3, r7
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	785b      	ldrb	r3, [r3, #1]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d122      	bne.n	800aab0 <USB_EPStartXfer+0xa2e>
 800aa6a:	1d3b      	adds	r3, r7, #4
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	463b      	mov	r3, r7
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa84:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800aa88:	1d3b      	adds	r3, r7, #4
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	463b      	mov	r3, r7
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	441a      	add	r2, r3
 800aa96:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800aa9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	8013      	strh	r3, [r2, #0]
 800aaae:	e026      	b.n	800aafe <USB_EPStartXfer+0xa7c>
 800aab0:	463b      	mov	r3, r7
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	785b      	ldrb	r3, [r3, #1]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d121      	bne.n	800aafe <USB_EPStartXfer+0xa7c>
 800aaba:	1d3b      	adds	r3, r7, #4
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	463b      	mov	r3, r7
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aad4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800aad8:	1d3b      	adds	r3, r7, #4
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	463b      	mov	r3, r7
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	441a      	add	r2, r3
 800aae6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800aaea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aaf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aafe:	1d3b      	adds	r3, r7, #4
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	463b      	mov	r3, r7
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4413      	add	r3, r2
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	f107 020e 	add.w	r2, r7, #14
 800ab14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab1c:	8013      	strh	r3, [r2, #0]
 800ab1e:	f107 030e 	add.w	r3, r7, #14
 800ab22:	f107 020e 	add.w	r2, r7, #14
 800ab26:	8812      	ldrh	r2, [r2, #0]
 800ab28:	f082 0210 	eor.w	r2, r2, #16
 800ab2c:	801a      	strh	r2, [r3, #0]
 800ab2e:	f107 030e 	add.w	r3, r7, #14
 800ab32:	f107 020e 	add.w	r2, r7, #14
 800ab36:	8812      	ldrh	r2, [r2, #0]
 800ab38:	f082 0220 	eor.w	r2, r2, #32
 800ab3c:	801a      	strh	r2, [r3, #0]
 800ab3e:	1d3b      	adds	r3, r7, #4
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	463b      	mov	r3, r7
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	441a      	add	r2, r3
 800ab4c:	f107 030e 	add.w	r3, r7, #14
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	8013      	strh	r3, [r2, #0]
 800ab66:	e3b5      	b.n	800b2d4 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ab68:	463b      	mov	r3, r7
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	7b1b      	ldrb	r3, [r3, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f040 8090 	bne.w	800ac94 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800ab74:	463b      	mov	r3, r7
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	699a      	ldr	r2, [r3, #24]
 800ab7a:	463b      	mov	r3, r7
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d90e      	bls.n	800aba2 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800ab84:	463b      	mov	r3, r7
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800ab8e:	463b      	mov	r3, r7
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	699a      	ldr	r2, [r3, #24]
 800ab94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ab98:	1ad2      	subs	r2, r2, r3
 800ab9a:	463b      	mov	r3, r7
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	619a      	str	r2, [r3, #24]
 800aba0:	e008      	b.n	800abb4 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800aba2:	463b      	mov	r3, r7
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800abac:	463b      	mov	r3, r7
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2200      	movs	r2, #0
 800abb2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800abb4:	1d3b      	adds	r3, r7, #4
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800abbc:	1d3b      	adds	r3, r7, #4
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	461a      	mov	r2, r3
 800abc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abcc:	4413      	add	r3, r2
 800abce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800abd2:	463b      	mov	r3, r7
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	00da      	lsls	r2, r3, #3
 800abda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abde:	4413      	add	r3, r2
 800abe0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abe4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abe8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800abec:	2b00      	cmp	r3, #0
 800abee:	d116      	bne.n	800ac1e <USB_EPStartXfer+0xb9c>
 800abf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac02:	801a      	strh	r2, [r3, #0]
 800ac04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac08:	881b      	ldrh	r3, [r3, #0]
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac1a:	801a      	strh	r2, [r3, #0]
 800ac1c:	e32c      	b.n	800b278 <USB_EPStartXfer+0x11f6>
 800ac1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac22:	2b3e      	cmp	r3, #62	; 0x3e
 800ac24:	d818      	bhi.n	800ac58 <USB_EPStartXfer+0xbd6>
 800ac26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac2a:	085b      	lsrs	r3, r3, #1
 800ac2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac34:	f003 0301 	and.w	r3, r3, #1
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d004      	beq.n	800ac46 <USB_EPStartXfer+0xbc4>
 800ac3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ac40:	3301      	adds	r3, #1
 800ac42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	029b      	lsls	r3, r3, #10
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac54:	801a      	strh	r2, [r3, #0]
 800ac56:	e30f      	b.n	800b278 <USB_EPStartXfer+0x11f6>
 800ac58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac5c:	095b      	lsrs	r3, r3, #5
 800ac5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac66:	f003 031f 	and.w	r3, r3, #31
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d104      	bne.n	800ac78 <USB_EPStartXfer+0xbf6>
 800ac6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ac72:	3b01      	subs	r3, #1
 800ac74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	029b      	lsls	r3, r3, #10
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac90:	801a      	strh	r2, [r3, #0]
 800ac92:	e2f1      	b.n	800b278 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800ac94:	463b      	mov	r3, r7
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	78db      	ldrb	r3, [r3, #3]
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	f040 818f 	bne.w	800afbe <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800aca0:	463b      	mov	r3, r7
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	785b      	ldrb	r3, [r3, #1]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d175      	bne.n	800ad96 <USB_EPStartXfer+0xd14>
 800acaa:	1d3b      	adds	r3, r7, #4
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acb2:	1d3b      	adds	r3, r7, #4
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acba:	b29b      	uxth	r3, r3
 800acbc:	461a      	mov	r2, r3
 800acbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800acc2:	4413      	add	r3, r2
 800acc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acc8:	463b      	mov	r3, r7
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	00da      	lsls	r2, r3, #3
 800acd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800acd4:	4413      	add	r3, r2
 800acd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800acda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800acde:	463b      	mov	r3, r7
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d116      	bne.n	800ad16 <USB_EPStartXfer+0xc94>
 800ace8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acec:	881b      	ldrh	r3, [r3, #0]
 800acee:	b29b      	uxth	r3, r3
 800acf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acfa:	801a      	strh	r2, [r3, #0]
 800acfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad00:	881b      	ldrh	r3, [r3, #0]
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad12:	801a      	strh	r2, [r3, #0]
 800ad14:	e065      	b.n	800ade2 <USB_EPStartXfer+0xd60>
 800ad16:	463b      	mov	r3, r7
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	2b3e      	cmp	r3, #62	; 0x3e
 800ad1e:	d81a      	bhi.n	800ad56 <USB_EPStartXfer+0xcd4>
 800ad20:	463b      	mov	r3, r7
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	085b      	lsrs	r3, r3, #1
 800ad28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad2c:	463b      	mov	r3, r7
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d004      	beq.n	800ad44 <USB_EPStartXfer+0xcc2>
 800ad3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad3e:	3301      	adds	r3, #1
 800ad40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	029b      	lsls	r3, r3, #10
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad52:	801a      	strh	r2, [r3, #0]
 800ad54:	e045      	b.n	800ade2 <USB_EPStartXfer+0xd60>
 800ad56:	463b      	mov	r3, r7
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	095b      	lsrs	r3, r3, #5
 800ad5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad62:	463b      	mov	r3, r7
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	691b      	ldr	r3, [r3, #16]
 800ad68:	f003 031f 	and.w	r3, r3, #31
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d104      	bne.n	800ad7a <USB_EPStartXfer+0xcf8>
 800ad70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad74:	3b01      	subs	r3, #1
 800ad76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	029b      	lsls	r3, r3, #10
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad92:	801a      	strh	r2, [r3, #0]
 800ad94:	e025      	b.n	800ade2 <USB_EPStartXfer+0xd60>
 800ad96:	463b      	mov	r3, r7
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	785b      	ldrb	r3, [r3, #1]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d120      	bne.n	800ade2 <USB_EPStartXfer+0xd60>
 800ada0:	1d3b      	adds	r3, r7, #4
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ada8:	1d3b      	adds	r3, r7, #4
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	461a      	mov	r2, r3
 800adb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800adb8:	4413      	add	r3, r2
 800adba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800adbe:	463b      	mov	r3, r7
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	00da      	lsls	r2, r3, #3
 800adc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800adca:	4413      	add	r3, r2
 800adcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800add0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800add4:	463b      	mov	r3, r7
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	b29a      	uxth	r2, r3
 800addc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ade0:	801a      	strh	r2, [r3, #0]
 800ade2:	1d3b      	adds	r3, r7, #4
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800adea:	463b      	mov	r3, r7
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	785b      	ldrb	r3, [r3, #1]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d175      	bne.n	800aee0 <USB_EPStartXfer+0xe5e>
 800adf4:	1d3b      	adds	r3, r7, #4
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800adfc:	1d3b      	adds	r3, r7, #4
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	461a      	mov	r2, r3
 800ae08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ae12:	463b      	mov	r3, r7
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	00da      	lsls	r2, r3, #3
 800ae1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae1e:	4413      	add	r3, r2
 800ae20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae28:	463b      	mov	r3, r7
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d116      	bne.n	800ae60 <USB_EPStartXfer+0xdde>
 800ae32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae44:	801a      	strh	r2, [r3, #0]
 800ae46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae5c:	801a      	strh	r2, [r3, #0]
 800ae5e:	e061      	b.n	800af24 <USB_EPStartXfer+0xea2>
 800ae60:	463b      	mov	r3, r7
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	2b3e      	cmp	r3, #62	; 0x3e
 800ae68:	d81a      	bhi.n	800aea0 <USB_EPStartXfer+0xe1e>
 800ae6a:	463b      	mov	r3, r7
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	085b      	lsrs	r3, r3, #1
 800ae72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae76:	463b      	mov	r3, r7
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	f003 0301 	and.w	r3, r3, #1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d004      	beq.n	800ae8e <USB_EPStartXfer+0xe0c>
 800ae84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae88:	3301      	adds	r3, #1
 800ae8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	029b      	lsls	r3, r3, #10
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae9c:	801a      	strh	r2, [r3, #0]
 800ae9e:	e041      	b.n	800af24 <USB_EPStartXfer+0xea2>
 800aea0:	463b      	mov	r3, r7
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	095b      	lsrs	r3, r3, #5
 800aea8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aeac:	463b      	mov	r3, r7
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	f003 031f 	and.w	r3, r3, #31
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d104      	bne.n	800aec4 <USB_EPStartXfer+0xe42>
 800aeba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aebe:	3b01      	subs	r3, #1
 800aec0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	029b      	lsls	r3, r3, #10
 800aecc:	b29b      	uxth	r3, r3
 800aece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aedc:	801a      	strh	r2, [r3, #0]
 800aede:	e021      	b.n	800af24 <USB_EPStartXfer+0xea2>
 800aee0:	463b      	mov	r3, r7
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	785b      	ldrb	r3, [r3, #1]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d11c      	bne.n	800af24 <USB_EPStartXfer+0xea2>
 800aeea:	1d3b      	adds	r3, r7, #4
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	461a      	mov	r2, r3
 800aef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aefa:	4413      	add	r3, r2
 800aefc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800af00:	463b      	mov	r3, r7
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	00da      	lsls	r2, r3, #3
 800af08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af0c:	4413      	add	r3, r2
 800af0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800af16:	463b      	mov	r3, r7
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	b29a      	uxth	r2, r3
 800af1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800af22:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800af24:	463b      	mov	r3, r7
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	69db      	ldr	r3, [r3, #28]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 81a4 	beq.w	800b278 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800af30:	1d3b      	adds	r3, r7, #4
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	463b      	mov	r3, r7
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800af44:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800af48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d005      	beq.n	800af5c <USB_EPStartXfer+0xeda>
 800af50:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800af54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10d      	bne.n	800af78 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800af5c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800af60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800af64:	2b00      	cmp	r3, #0
 800af66:	f040 8187 	bne.w	800b278 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800af6a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800af6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af72:	2b00      	cmp	r3, #0
 800af74:	f040 8180 	bne.w	800b278 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800af78:	1d3b      	adds	r3, r7, #4
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	463b      	mov	r3, r7
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af92:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800af96:	1d3b      	adds	r3, r7, #4
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	463b      	mov	r3, r7
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	441a      	add	r2, r3
 800afa4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800afa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800afb8:	b29b      	uxth	r3, r3
 800afba:	8013      	strh	r3, [r2, #0]
 800afbc:	e15c      	b.n	800b278 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800afbe:	463b      	mov	r3, r7
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	78db      	ldrb	r3, [r3, #3]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	f040 8155 	bne.w	800b274 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800afca:	463b      	mov	r3, r7
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	699a      	ldr	r2, [r3, #24]
 800afd0:	463b      	mov	r3, r7
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d90e      	bls.n	800aff8 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800afda:	463b      	mov	r3, r7
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800afe4:	463b      	mov	r3, r7
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	699a      	ldr	r2, [r3, #24]
 800afea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800afee:	1ad2      	subs	r2, r2, r3
 800aff0:	463b      	mov	r3, r7
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	619a      	str	r2, [r3, #24]
 800aff6:	e008      	b.n	800b00a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800aff8:	463b      	mov	r3, r7
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800b002:	463b      	mov	r3, r7
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2200      	movs	r2, #0
 800b008:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b00a:	463b      	mov	r3, r7
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	785b      	ldrb	r3, [r3, #1]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d16f      	bne.n	800b0f4 <USB_EPStartXfer+0x1072>
 800b014:	1d3b      	adds	r3, r7, #4
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b01c:	1d3b      	adds	r3, r7, #4
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b024:	b29b      	uxth	r3, r3
 800b026:	461a      	mov	r2, r3
 800b028:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b02c:	4413      	add	r3, r2
 800b02e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b032:	463b      	mov	r3, r7
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	00da      	lsls	r2, r3, #3
 800b03a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b03e:	4413      	add	r3, r2
 800b040:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b044:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b048:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d116      	bne.n	800b07e <USB_EPStartXfer+0xffc>
 800b050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	b29b      	uxth	r3, r3
 800b058:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b062:	801a      	strh	r2, [r3, #0]
 800b064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b068:	881b      	ldrh	r3, [r3, #0]
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b074:	b29a      	uxth	r2, r3
 800b076:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b07a:	801a      	strh	r2, [r3, #0]
 800b07c:	e05f      	b.n	800b13e <USB_EPStartXfer+0x10bc>
 800b07e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b082:	2b3e      	cmp	r3, #62	; 0x3e
 800b084:	d818      	bhi.n	800b0b8 <USB_EPStartXfer+0x1036>
 800b086:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b08a:	085b      	lsrs	r3, r3, #1
 800b08c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b090:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d004      	beq.n	800b0a6 <USB_EPStartXfer+0x1024>
 800b09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	029b      	lsls	r3, r3, #10
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b0b4:	801a      	strh	r2, [r3, #0]
 800b0b6:	e042      	b.n	800b13e <USB_EPStartXfer+0x10bc>
 800b0b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b0bc:	095b      	lsrs	r3, r3, #5
 800b0be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b0c6:	f003 031f 	and.w	r3, r3, #31
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d104      	bne.n	800b0d8 <USB_EPStartXfer+0x1056>
 800b0ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	029b      	lsls	r3, r3, #10
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b0f0:	801a      	strh	r2, [r3, #0]
 800b0f2:	e024      	b.n	800b13e <USB_EPStartXfer+0x10bc>
 800b0f4:	463b      	mov	r3, r7
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	785b      	ldrb	r3, [r3, #1]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d11f      	bne.n	800b13e <USB_EPStartXfer+0x10bc>
 800b0fe:	1d3b      	adds	r3, r7, #4
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b106:	1d3b      	adds	r3, r7, #4
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b10e:	b29b      	uxth	r3, r3
 800b110:	461a      	mov	r2, r3
 800b112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b116:	4413      	add	r3, r2
 800b118:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b11c:	463b      	mov	r3, r7
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	00da      	lsls	r2, r3, #3
 800b124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b128:	4413      	add	r3, r2
 800b12a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b12e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b132:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b136:	b29a      	uxth	r2, r3
 800b138:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b13c:	801a      	strh	r2, [r3, #0]
 800b13e:	1d3b      	adds	r3, r7, #4
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b146:	463b      	mov	r3, r7
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	785b      	ldrb	r3, [r3, #1]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d16f      	bne.n	800b230 <USB_EPStartXfer+0x11ae>
 800b150:	1d3b      	adds	r3, r7, #4
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b158:	1d3b      	adds	r3, r7, #4
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b160:	b29b      	uxth	r3, r3
 800b162:	461a      	mov	r2, r3
 800b164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b168:	4413      	add	r3, r2
 800b16a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b16e:	463b      	mov	r3, r7
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	00da      	lsls	r2, r3, #3
 800b176:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b17a:	4413      	add	r3, r2
 800b17c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b184:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d116      	bne.n	800b1ba <USB_EPStartXfer+0x1138>
 800b18c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	b29b      	uxth	r3, r3
 800b194:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b198:	b29a      	uxth	r2, r3
 800b19a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b19e:	801a      	strh	r2, [r3, #0]
 800b1a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1b6:	801a      	strh	r2, [r3, #0]
 800b1b8:	e05e      	b.n	800b278 <USB_EPStartXfer+0x11f6>
 800b1ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1be:	2b3e      	cmp	r3, #62	; 0x3e
 800b1c0:	d818      	bhi.n	800b1f4 <USB_EPStartXfer+0x1172>
 800b1c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1c6:	085b      	lsrs	r3, r3, #1
 800b1c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b1cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <USB_EPStartXfer+0x1160>
 800b1d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1dc:	3301      	adds	r3, #1
 800b1de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b1e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	029b      	lsls	r3, r3, #10
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1f0:	801a      	strh	r2, [r3, #0]
 800b1f2:	e041      	b.n	800b278 <USB_EPStartXfer+0x11f6>
 800b1f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1f8:	095b      	lsrs	r3, r3, #5
 800b1fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b1fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b202:	f003 031f 	and.w	r3, r3, #31
 800b206:	2b00      	cmp	r3, #0
 800b208:	d104      	bne.n	800b214 <USB_EPStartXfer+0x1192>
 800b20a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b20e:	3b01      	subs	r3, #1
 800b210:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b218:	b29b      	uxth	r3, r3
 800b21a:	029b      	lsls	r3, r3, #10
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b226:	b29a      	uxth	r2, r3
 800b228:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b22c:	801a      	strh	r2, [r3, #0]
 800b22e:	e023      	b.n	800b278 <USB_EPStartXfer+0x11f6>
 800b230:	463b      	mov	r3, r7
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	785b      	ldrb	r3, [r3, #1]
 800b236:	2b01      	cmp	r3, #1
 800b238:	d11e      	bne.n	800b278 <USB_EPStartXfer+0x11f6>
 800b23a:	1d3b      	adds	r3, r7, #4
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b242:	b29b      	uxth	r3, r3
 800b244:	461a      	mov	r2, r3
 800b246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b24a:	4413      	add	r3, r2
 800b24c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b250:	463b      	mov	r3, r7
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	00da      	lsls	r2, r3, #3
 800b258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b25c:	4413      	add	r3, r2
 800b25e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b262:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b266:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b270:	801a      	strh	r2, [r3, #0]
 800b272:	e001      	b.n	800b278 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e02e      	b.n	800b2d6 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b278:	1d3b      	adds	r3, r7, #4
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	463b      	mov	r3, r7
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	4413      	add	r3, r2
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b292:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800b296:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b29a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b29e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800b2a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b2a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b2aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800b2ae:	1d3b      	adds	r3, r7, #4
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	463b      	mov	r3, r7
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	441a      	add	r2, r3
 800b2bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b2c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	785b      	ldrb	r3, [r3, #1]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d020      	beq.n	800b334 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b308:	81bb      	strh	r3, [r7, #12]
 800b30a:	89bb      	ldrh	r3, [r7, #12]
 800b30c:	f083 0310 	eor.w	r3, r3, #16
 800b310:	81bb      	strh	r3, [r7, #12]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	441a      	add	r2, r3
 800b31c:	89bb      	ldrh	r3, [r7, #12]
 800b31e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b32a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b32e:	b29b      	uxth	r3, r3
 800b330:	8013      	strh	r3, [r2, #0]
 800b332:	e01f      	b.n	800b374 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	881b      	ldrh	r3, [r3, #0]
 800b340:	b29b      	uxth	r3, r3
 800b342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b34a:	81fb      	strh	r3, [r7, #14]
 800b34c:	89fb      	ldrh	r3, [r7, #14]
 800b34e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b352:	81fb      	strh	r3, [r7, #14]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	441a      	add	r2, r3
 800b35e:	89fb      	ldrh	r3, [r7, #14]
 800b360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b36c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b370:	b29b      	uxth	r3, r3
 800b372:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b382:	b480      	push	{r7}
 800b384:	b087      	sub	sp, #28
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
 800b38a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	7b1b      	ldrb	r3, [r3, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	f040 809d 	bne.w	800b4d0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	785b      	ldrb	r3, [r3, #1]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d04c      	beq.n	800b438 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	823b      	strh	r3, [r7, #16]
 800b3ac:	8a3b      	ldrh	r3, [r7, #16]
 800b3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d01b      	beq.n	800b3ee <USB_EPClearStall+0x6c>
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	881b      	ldrh	r3, [r3, #0]
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3cc:	81fb      	strh	r3, [r7, #14]
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	441a      	add	r2, r3
 800b3d8:	89fb      	ldrh	r3, [r7, #14]
 800b3da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	78db      	ldrb	r3, [r3, #3]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d06c      	beq.n	800b4d0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	b29b      	uxth	r3, r3
 800b404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b40c:	81bb      	strh	r3, [r7, #12]
 800b40e:	89bb      	ldrh	r3, [r7, #12]
 800b410:	f083 0320 	eor.w	r3, r3, #32
 800b414:	81bb      	strh	r3, [r7, #12]
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	441a      	add	r2, r3
 800b420:	89bb      	ldrh	r3, [r7, #12]
 800b422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b42a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b432:	b29b      	uxth	r3, r3
 800b434:	8013      	strh	r3, [r2, #0]
 800b436:	e04b      	b.n	800b4d0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	82fb      	strh	r3, [r7, #22]
 800b446:	8afb      	ldrh	r3, [r7, #22]
 800b448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01b      	beq.n	800b488 <USB_EPClearStall+0x106>
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	881b      	ldrh	r3, [r3, #0]
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b466:	82bb      	strh	r3, [r7, #20]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	441a      	add	r2, r3
 800b472:	8abb      	ldrh	r3, [r7, #20]
 800b474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b47c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b484:	b29b      	uxth	r3, r3
 800b486:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	b29b      	uxth	r3, r3
 800b496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b49e:	827b      	strh	r3, [r7, #18]
 800b4a0:	8a7b      	ldrh	r3, [r7, #18]
 800b4a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b4a6:	827b      	strh	r3, [r7, #18]
 800b4a8:	8a7b      	ldrh	r3, [r7, #18]
 800b4aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b4ae:	827b      	strh	r3, [r7, #18]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	441a      	add	r2, r3
 800b4ba:	8a7b      	ldrh	r3, [r7, #18]
 800b4bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	371c      	adds	r7, #28
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b083      	sub	sp, #12
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b4ea:	78fb      	ldrb	r3, [r7, #3]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d103      	bne.n	800b4f8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2280      	movs	r2, #128	; 0x80
 800b4f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	370c      	adds	r7, #12
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b506:	b480      	push	{r7}
 800b508:	b083      	sub	sp, #12
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b514:	b29b      	uxth	r3, r3
 800b516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b51a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b51e:	b29a      	uxth	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b542:	b29b      	uxth	r3, r3
 800b544:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b548:	b29a      	uxth	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b55e:	b480      	push	{r7}
 800b560:	b085      	sub	sp, #20
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b570:	68fb      	ldr	r3, [r7, #12]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b57e:	b480      	push	{r7}
 800b580:	b083      	sub	sp, #12
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b596:	b480      	push	{r7}
 800b598:	b08d      	sub	sp, #52	; 0x34
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	60f8      	str	r0, [r7, #12]
 800b59e:	60b9      	str	r1, [r7, #8]
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	80fb      	strh	r3, [r7, #6]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b5ac:	88bb      	ldrh	r3, [r7, #4]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	085b      	lsrs	r3, r3, #1
 800b5b2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b5bc:	88fa      	ldrh	r2, [r7, #6]
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5c6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b5c8:	6a3b      	ldr	r3, [r7, #32]
 800b5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5cc:	e01b      	b.n	800b606 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	021b      	lsls	r3, r3, #8
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f6:	3302      	adds	r3, #2
 800b5f8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b602:	3b01      	subs	r3, #1
 800b604:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1e0      	bne.n	800b5ce <USB_WritePMA+0x38>
  }
}
 800b60c:	bf00      	nop
 800b60e:	3734      	adds	r7, #52	; 0x34
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b618:	b480      	push	{r7}
 800b61a:	b08b      	sub	sp, #44	; 0x2c
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	4611      	mov	r1, r2
 800b624:	461a      	mov	r2, r3
 800b626:	460b      	mov	r3, r1
 800b628:	80fb      	strh	r3, [r7, #6]
 800b62a:	4613      	mov	r3, r2
 800b62c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b62e:	88bb      	ldrh	r3, [r7, #4]
 800b630:	085b      	lsrs	r3, r3, #1
 800b632:	b29b      	uxth	r3, r3
 800b634:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b63e:	88fa      	ldrh	r2, [r7, #6]
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	4413      	add	r3, r2
 800b644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b648:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
 800b64e:	e018      	b.n	800b682 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	b29b      	uxth	r3, r3
 800b656:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	3302      	adds	r3, #2
 800b65c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	b2da      	uxtb	r2, r3
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	3301      	adds	r3, #1
 800b66a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	0a1b      	lsrs	r3, r3, #8
 800b670:	b2da      	uxtb	r2, r3
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	3301      	adds	r3, #1
 800b67a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	3b01      	subs	r3, #1
 800b680:	627b      	str	r3, [r7, #36]	; 0x24
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1e3      	bne.n	800b650 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b688:	88bb      	ldrh	r3, [r7, #4]
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	b29b      	uxth	r3, r3
 800b690:	2b00      	cmp	r3, #0
 800b692:	d007      	beq.n	800b6a4 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	881b      	ldrh	r3, [r3, #0]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	701a      	strb	r2, [r3, #0]
  }
}
 800b6a4:	bf00      	nop
 800b6a6:	372c      	adds	r7, #44	; 0x2c
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800b6bc:	2010      	movs	r0, #16
 800b6be:	f003 fdfd 	bl	800f2bc <malloc>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d105      	bne.n	800b6d8 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	e01b      	b.n	800b710 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	7c1b      	ldrb	r3, [r3, #16]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d103      	bne.n	800b6f0 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2207      	movs	r2, #7
 800b6ec:	875a      	strh	r2, [r3, #58]	; 0x3a
 800b6ee:	e002      	b.n	800b6f6 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	220a      	movs	r2, #10
 800b6f4:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800b6f6:	2304      	movs	r3, #4
 800b6f8:	2203      	movs	r2, #3
 800b6fa:	2181      	movs	r1, #129	; 0x81
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f003 fa79 	bl	800ebf4 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800b724:	2181      	movs	r1, #129	; 0x81
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f003 faa2 	bl	800ec70 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d009      	beq.n	800b756 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b748:	4618      	mov	r0, r3
 800b74a:	f003 fdbf 	bl	800f2cc <free>
    pdev->pClassData = NULL;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b770:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b776:	2300      	movs	r3, #0
 800b778:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b782:	2b00      	cmp	r3, #0
 800b784:	d045      	beq.n	800b812 <USBD_HID_Setup+0xb2>
 800b786:	2b20      	cmp	r3, #32
 800b788:	f040 80d4 	bne.w	800b934 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	785b      	ldrb	r3, [r3, #1]
 800b790:	3b02      	subs	r3, #2
 800b792:	2b09      	cmp	r3, #9
 800b794:	d835      	bhi.n	800b802 <USBD_HID_Setup+0xa2>
 800b796:	a201      	add	r2, pc, #4	; (adr r2, 800b79c <USBD_HID_Setup+0x3c>)
 800b798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79c:	0800b7f3 	.word	0x0800b7f3
 800b7a0:	0800b7d3 	.word	0x0800b7d3
 800b7a4:	0800b803 	.word	0x0800b803
 800b7a8:	0800b803 	.word	0x0800b803
 800b7ac:	0800b803 	.word	0x0800b803
 800b7b0:	0800b803 	.word	0x0800b803
 800b7b4:	0800b803 	.word	0x0800b803
 800b7b8:	0800b803 	.word	0x0800b803
 800b7bc:	0800b7e1 	.word	0x0800b7e1
 800b7c0:	0800b7c5 	.word	0x0800b7c5
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	885b      	ldrh	r3, [r3, #2]
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	601a      	str	r2, [r3, #0]
      break;
 800b7d0:	e01e      	b.n	800b810 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f001 f97c 	bl	800cad6 <USBD_CtlSendData>
      break;
 800b7de:	e017      	b.n	800b810 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	885b      	ldrh	r3, [r3, #2]
 800b7e4:	0a1b      	lsrs	r3, r3, #8
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	605a      	str	r2, [r3, #4]
      break;
 800b7f0:	e00e      	b.n	800b810 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	3304      	adds	r3, #4
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f001 f96b 	bl	800cad6 <USBD_CtlSendData>
      break;
 800b800:	e006      	b.n	800b810 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f001 f8f5 	bl	800c9f4 <USBD_CtlError>
      ret = USBD_FAIL;
 800b80a:	2303      	movs	r3, #3
 800b80c:	75fb      	strb	r3, [r7, #23]
      break;
 800b80e:	bf00      	nop
    }
    break;
 800b810:	e097      	b.n	800b942 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	785b      	ldrb	r3, [r3, #1]
 800b816:	2b0b      	cmp	r3, #11
 800b818:	f200 8083 	bhi.w	800b922 <USBD_HID_Setup+0x1c2>
 800b81c:	a201      	add	r2, pc, #4	; (adr r2, 800b824 <USBD_HID_Setup+0xc4>)
 800b81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b822:	bf00      	nop
 800b824:	0800b855 	.word	0x0800b855
 800b828:	0800b931 	.word	0x0800b931
 800b82c:	0800b923 	.word	0x0800b923
 800b830:	0800b923 	.word	0x0800b923
 800b834:	0800b923 	.word	0x0800b923
 800b838:	0800b923 	.word	0x0800b923
 800b83c:	0800b87d 	.word	0x0800b87d
 800b840:	0800b923 	.word	0x0800b923
 800b844:	0800b923 	.word	0x0800b923
 800b848:	0800b923 	.word	0x0800b923
 800b84c:	0800b8d5 	.word	0x0800b8d5
 800b850:	0800b8fd 	.word	0x0800b8fd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d107      	bne.n	800b86e <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b85e:	f107 030a 	add.w	r3, r7, #10
 800b862:	2202      	movs	r2, #2
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f001 f935 	bl	800cad6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b86c:	e061      	b.n	800b932 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f001 f8bf 	bl	800c9f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800b876:	2303      	movs	r3, #3
 800b878:	75fb      	strb	r3, [r7, #23]
      break;
 800b87a:	e05a      	b.n	800b932 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	885b      	ldrh	r3, [r3, #2]
 800b880:	0a1b      	lsrs	r3, r3, #8
 800b882:	b29b      	uxth	r3, r3
 800b884:	2b22      	cmp	r3, #34	; 0x22
 800b886:	d108      	bne.n	800b89a <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	88db      	ldrh	r3, [r3, #6]
 800b88c:	2b4a      	cmp	r3, #74	; 0x4a
 800b88e:	bf28      	it	cs
 800b890:	234a      	movcs	r3, #74	; 0x4a
 800b892:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 800b894:	4b2d      	ldr	r3, [pc, #180]	; (800b94c <USBD_HID_Setup+0x1ec>)
 800b896:	613b      	str	r3, [r7, #16]
 800b898:	e015      	b.n	800b8c6 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	885b      	ldrh	r3, [r3, #2]
 800b89e:	0a1b      	lsrs	r3, r3, #8
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	2b21      	cmp	r3, #33	; 0x21
 800b8a4:	d108      	bne.n	800b8b8 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 800b8a6:	4b2a      	ldr	r3, [pc, #168]	; (800b950 <USBD_HID_Setup+0x1f0>)
 800b8a8:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	88db      	ldrh	r3, [r3, #6]
 800b8ae:	2b09      	cmp	r3, #9
 800b8b0:	bf28      	it	cs
 800b8b2:	2309      	movcs	r3, #9
 800b8b4:	82bb      	strh	r3, [r7, #20]
 800b8b6:	e006      	b.n	800b8c6 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f001 f89a 	bl	800c9f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	75fb      	strb	r3, [r7, #23]
        break;
 800b8c4:	e035      	b.n	800b932 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b8c6:	8abb      	ldrh	r3, [r7, #20]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	6939      	ldr	r1, [r7, #16]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f001 f902 	bl	800cad6 <USBD_CtlSendData>
      break;
 800b8d2:	e02e      	b.n	800b932 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d107      	bne.n	800b8ee <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f001 f8f5 	bl	800cad6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b8ec:	e021      	b.n	800b932 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f001 f87f 	bl	800c9f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b8fa:	e01a      	b.n	800b932 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b902:	2b03      	cmp	r3, #3
 800b904:	d106      	bne.n	800b914 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	885b      	ldrh	r3, [r3, #2]
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	461a      	mov	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b912:	e00e      	b.n	800b932 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f001 f86c 	bl	800c9f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800b91c:	2303      	movs	r3, #3
 800b91e:	75fb      	strb	r3, [r7, #23]
      break;
 800b920:	e007      	b.n	800b932 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f001 f865 	bl	800c9f4 <USBD_CtlError>
      ret = USBD_FAIL;
 800b92a:	2303      	movs	r3, #3
 800b92c:	75fb      	strb	r3, [r7, #23]
      break;
 800b92e:	e000      	b.n	800b932 <USBD_HID_Setup+0x1d2>
      break;
 800b930:	bf00      	nop
    }
    break;
 800b932:	e006      	b.n	800b942 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 800b934:	6839      	ldr	r1, [r7, #0]
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f001 f85c 	bl	800c9f4 <USBD_CtlError>
    ret = USBD_FAIL;
 800b93c:	2303      	movs	r3, #3
 800b93e:	75fb      	strb	r3, [r7, #23]
    break;
 800b940:	bf00      	nop
  }

  return (uint8_t)ret;
 800b942:	7dfb      	ldrb	r3, [r7, #23]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	200000c4 	.word	0x200000c4
 800b950:	200000ac 	.word	0x200000ac

0800b954 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2222      	movs	r2, #34	; 0x22
 800b960:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800b962:	4b03      	ldr	r3, [pc, #12]	; (800b970 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800b964:	4618      	mov	r0, r3
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	20000040 	.word	0x20000040

0800b974 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2222      	movs	r2, #34	; 0x22
 800b980:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800b982:	4b03      	ldr	r3, [pc, #12]	; (800b990 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800b984:	4618      	mov	r0, r3
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	20000064 	.word	0x20000064

0800b994 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2222      	movs	r2, #34	; 0x22
 800b9a0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800b9a2:	4b03      	ldr	r3, [pc, #12]	; (800b9b0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	20000088 	.word	0x20000088

0800b9b4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	220a      	movs	r2, #10
 800b9e4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800b9e6:	4b03      	ldr	r3, [pc, #12]	; (800b9f4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	200000b8 	.word	0x200000b8

0800b9f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	4613      	mov	r3, r2
 800ba04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d101      	bne.n	800ba10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e01f      	b.n	800ba50 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d003      	beq.n	800ba36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	79fa      	ldrb	r2, [r7, #7]
 800ba42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f003 f853 	bl	800eaf0 <USBD_LL_Init>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d101      	bne.n	800ba70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e016      	b.n	800ba9e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00b      	beq.n	800ba9c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8c:	f107 020e 	add.w	r2, r7, #14
 800ba90:	4610      	mov	r0, r2
 800ba92:	4798      	blx	r3
 800ba94:	4602      	mov	r2, r0
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f003 f86e 	bl	800eb90 <USBD_LL_Start>
 800bab4:	4603      	mov	r3, r0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bae0:	2303      	movs	r3, #3
 800bae2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baea:	2b00      	cmp	r3, #0
 800baec:	d009      	beq.n	800bb02 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	78fa      	ldrb	r2, [r7, #3]
 800baf8:	4611      	mov	r1, r2
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	4798      	blx	r3
 800bafe:	4603      	mov	r3, r0
 800bb00:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	460b      	mov	r3, r1
 800bb16:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d007      	beq.n	800bb32 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	78fa      	ldrb	r2, [r7, #3]
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	4798      	blx	r3
  }

  return USBD_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f000 ff16 	bl	800c980 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb62:	461a      	mov	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb70:	f003 031f 	and.w	r3, r3, #31
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d00e      	beq.n	800bb96 <USBD_LL_SetupStage+0x5a>
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d302      	bcc.n	800bb82 <USBD_LL_SetupStage+0x46>
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d014      	beq.n	800bbaa <USBD_LL_SetupStage+0x6e>
 800bb80:	e01d      	b.n	800bbbe <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f9d6 	bl	800bf3c <USBD_StdDevReq>
 800bb90:	4603      	mov	r3, r0
 800bb92:	73fb      	strb	r3, [r7, #15]
      break;
 800bb94:	e020      	b.n	800bbd8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fa3a 	bl	800c018 <USBD_StdItfReq>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]
      break;
 800bba8:	e016      	b.n	800bbd8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fa76 	bl	800c0a4 <USBD_StdEPReq>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73fb      	strb	r3, [r7, #15]
      break;
 800bbbc:	e00c      	b.n	800bbd8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bbc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f003 f885 	bl	800ecdc <USBD_LL_StallEP>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd6:	bf00      	nop
  }

  return ret;
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b086      	sub	sp, #24
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	460b      	mov	r3, r1
 800bbec:	607a      	str	r2, [r7, #4]
 800bbee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bbf0:	7afb      	ldrb	r3, [r7, #11]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d137      	bne.n	800bc66 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bbfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d14a      	bne.n	800bc9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	689a      	ldr	r2, [r3, #8]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d913      	bls.n	800bc3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	1ad2      	subs	r2, r2, r3
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	bf28      	it	cs
 800bc2e:	4613      	movcs	r3, r2
 800bc30:	461a      	mov	r2, r3
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f000 ff7a 	bl	800cb2e <USBD_CtlContinueRx>
 800bc3a:	e030      	b.n	800bc9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00a      	beq.n	800bc5e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc4e:	2b03      	cmp	r3, #3
 800bc50:	d105      	bne.n	800bc5e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f000 ff76 	bl	800cb50 <USBD_CtlSendStatus>
 800bc64:	e01b      	b.n	800bc9e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d013      	beq.n	800bc9a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	d10e      	bne.n	800bc9a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	7afa      	ldrb	r2, [r7, #11]
 800bc86:	4611      	mov	r1, r2
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	4798      	blx	r3
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d003      	beq.n	800bc9e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bc96:	7dfb      	ldrb	r3, [r7, #23]
 800bc98:	e002      	b.n	800bca0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e000      	b.n	800bca0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3718      	adds	r7, #24
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bcb6:	7afb      	ldrb	r3, [r7, #11]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d16a      	bne.n	800bd92 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3314      	adds	r3, #20
 800bcc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d155      	bne.n	800bd78 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	689a      	ldr	r2, [r3, #8]
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d914      	bls.n	800bd02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	689a      	ldr	r2, [r3, #8]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	1ad2      	subs	r2, r2, r3
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	461a      	mov	r2, r3
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f000 ff0c 	bl	800cb0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f003 f8f6 	bl	800eeec <USBD_LL_PrepareReceive>
 800bd00:	e03a      	b.n	800bd78 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	68da      	ldr	r2, [r3, #12]
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d11c      	bne.n	800bd48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d316      	bcc.n	800bd48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d20f      	bcs.n	800bd48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 feed 	bl	800cb0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	2100      	movs	r1, #0
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f003 f8d3 	bl	800eeec <USBD_LL_PrepareReceive>
 800bd46:	e017      	b.n	800bd78 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00a      	beq.n	800bd6a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d105      	bne.n	800bd6a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd6a:	2180      	movs	r1, #128	; 0x80
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f002 ffb5 	bl	800ecdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f000 feff 	bl	800cb76 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d123      	bne.n	800bdca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f7ff fe9b 	bl	800babe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bd90:	e01b      	b.n	800bdca <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d013      	beq.n	800bdc6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d10e      	bne.n	800bdc6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdae:	695b      	ldr	r3, [r3, #20]
 800bdb0:	7afa      	ldrb	r2, [r7, #11]
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	4798      	blx	r3
 800bdb8:	4603      	mov	r3, r0
 800bdba:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bdbc:	7dfb      	ldrb	r3, [r7, #23]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
 800bdc4:	e002      	b.n	800bdcc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e000      	b.n	800bdcc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be00:	2b00      	cmp	r3, #0
 800be02:	d009      	beq.n	800be18 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	6852      	ldr	r2, [r2, #4]
 800be10:	b2d2      	uxtb	r2, r2
 800be12:	4611      	mov	r1, r2
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be18:	2340      	movs	r3, #64	; 0x40
 800be1a:	2200      	movs	r2, #0
 800be1c:	2100      	movs	r1, #0
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f002 fee8 	bl	800ebf4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2201      	movs	r2, #1
 800be28:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2240      	movs	r2, #64	; 0x40
 800be30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be34:	2340      	movs	r3, #64	; 0x40
 800be36:	2200      	movs	r2, #0
 800be38:	2180      	movs	r1, #128	; 0x80
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f002 feda 	bl	800ebf4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2240      	movs	r2, #64	; 0x40
 800be4a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be56:	b480      	push	{r7}
 800be58:	b083      	sub	sp, #12
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	460b      	mov	r3, r1
 800be60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	78fa      	ldrb	r2, [r7, #3]
 800be66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be76:	b480      	push	{r7}
 800be78:	b083      	sub	sp, #12
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2204      	movs	r2, #4
 800be8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beae:	2b04      	cmp	r3, #4
 800beb0:	d105      	bne.n	800bebe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beda:	2b03      	cmp	r3, #3
 800bedc:	d10b      	bne.n	800bef6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bee4:	69db      	ldr	r3, [r3, #28]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d005      	beq.n	800bef6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b087      	sub	sp, #28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	3301      	adds	r3, #1
 800bf16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf1e:	8a3b      	ldrh	r3, [r7, #16]
 800bf20:	021b      	lsls	r3, r3, #8
 800bf22:	b21a      	sxth	r2, r3
 800bf24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	b21b      	sxth	r3, r3
 800bf2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf2e:	89fb      	ldrh	r3, [r7, #14]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	371c      	adds	r7, #28
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf52:	2b20      	cmp	r3, #32
 800bf54:	d004      	beq.n	800bf60 <USBD_StdDevReq+0x24>
 800bf56:	2b40      	cmp	r3, #64	; 0x40
 800bf58:	d002      	beq.n	800bf60 <USBD_StdDevReq+0x24>
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00a      	beq.n	800bf74 <USBD_StdDevReq+0x38>
 800bf5e:	e050      	b.n	800c002 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	6839      	ldr	r1, [r7, #0]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	4798      	blx	r3
 800bf6e:	4603      	mov	r3, r0
 800bf70:	73fb      	strb	r3, [r7, #15]
    break;
 800bf72:	e04b      	b.n	800c00c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	785b      	ldrb	r3, [r3, #1]
 800bf78:	2b09      	cmp	r3, #9
 800bf7a:	d83c      	bhi.n	800bff6 <USBD_StdDevReq+0xba>
 800bf7c:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <USBD_StdDevReq+0x48>)
 800bf7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf82:	bf00      	nop
 800bf84:	0800bfd9 	.word	0x0800bfd9
 800bf88:	0800bfed 	.word	0x0800bfed
 800bf8c:	0800bff7 	.word	0x0800bff7
 800bf90:	0800bfe3 	.word	0x0800bfe3
 800bf94:	0800bff7 	.word	0x0800bff7
 800bf98:	0800bfb7 	.word	0x0800bfb7
 800bf9c:	0800bfad 	.word	0x0800bfad
 800bfa0:	0800bff7 	.word	0x0800bff7
 800bfa4:	0800bfcf 	.word	0x0800bfcf
 800bfa8:	0800bfc1 	.word	0x0800bfc1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f9d0 	bl	800c354 <USBD_GetDescriptor>
      break;
 800bfb4:	e024      	b.n	800c000 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fb5f 	bl	800c67c <USBD_SetAddress>
      break;
 800bfbe:	e01f      	b.n	800c000 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 fb9c 	bl	800c700 <USBD_SetConfig>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	73fb      	strb	r3, [r7, #15]
      break;
 800bfcc:	e018      	b.n	800c000 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800bfce:	6839      	ldr	r1, [r7, #0]
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 fc39 	bl	800c848 <USBD_GetConfig>
      break;
 800bfd6:	e013      	b.n	800c000 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fc68 	bl	800c8b0 <USBD_GetStatus>
      break;
 800bfe0:	e00e      	b.n	800c000 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fc96 	bl	800c916 <USBD_SetFeature>
      break;
 800bfea:	e009      	b.n	800c000 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fca5 	bl	800c93e <USBD_ClrFeature>
      break;
 800bff4:	e004      	b.n	800c000 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fcfb 	bl	800c9f4 <USBD_CtlError>
      break;
 800bffe:	bf00      	nop
    }
    break;
 800c000:	e004      	b.n	800c00c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fcf5 	bl	800c9f4 <USBD_CtlError>
    break;
 800c00a:	bf00      	nop
  }

  return ret;
 800c00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop

0800c018 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c022:	2300      	movs	r3, #0
 800c024:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c02e:	2b20      	cmp	r3, #32
 800c030:	d003      	beq.n	800c03a <USBD_StdItfReq+0x22>
 800c032:	2b40      	cmp	r3, #64	; 0x40
 800c034:	d001      	beq.n	800c03a <USBD_StdItfReq+0x22>
 800c036:	2b00      	cmp	r3, #0
 800c038:	d12a      	bne.n	800c090 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c040:	3b01      	subs	r3, #1
 800c042:	2b02      	cmp	r3, #2
 800c044:	d81d      	bhi.n	800c082 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	889b      	ldrh	r3, [r3, #4]
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d813      	bhi.n	800c078 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	6839      	ldr	r1, [r7, #0]
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	4798      	blx	r3
 800c05e:	4603      	mov	r3, r0
 800c060:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	88db      	ldrh	r3, [r3, #6]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d110      	bne.n	800c08c <USBD_StdItfReq+0x74>
 800c06a:	7bfb      	ldrb	r3, [r7, #15]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10d      	bne.n	800c08c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fd6d 	bl	800cb50 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c076:	e009      	b.n	800c08c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fcba 	bl	800c9f4 <USBD_CtlError>
      break;
 800c080:	e004      	b.n	800c08c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fcb5 	bl	800c9f4 <USBD_CtlError>
      break;
 800c08a:	e000      	b.n	800c08e <USBD_StdItfReq+0x76>
      break;
 800c08c:	bf00      	nop
    }
    break;
 800c08e:	e004      	b.n	800c09a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fcae 	bl	800c9f4 <USBD_CtlError>
    break;
 800c098:	bf00      	nop
  }

  return ret;
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	889b      	ldrh	r3, [r3, #4]
 800c0b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0c0:	2b20      	cmp	r3, #32
 800c0c2:	d004      	beq.n	800c0ce <USBD_StdEPReq+0x2a>
 800c0c4:	2b40      	cmp	r3, #64	; 0x40
 800c0c6:	d002      	beq.n	800c0ce <USBD_StdEPReq+0x2a>
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00a      	beq.n	800c0e2 <USBD_StdEPReq+0x3e>
 800c0cc:	e137      	b.n	800c33e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	4798      	blx	r3
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e0:	e132      	b.n	800c348 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	785b      	ldrb	r3, [r3, #1]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d03e      	beq.n	800c168 <USBD_StdEPReq+0xc4>
 800c0ea:	2b03      	cmp	r3, #3
 800c0ec:	d002      	beq.n	800c0f4 <USBD_StdEPReq+0x50>
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d079      	beq.n	800c1e6 <USBD_StdEPReq+0x142>
 800c0f2:	e11e      	b.n	800c332 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0fa:	2b02      	cmp	r3, #2
 800c0fc:	d002      	beq.n	800c104 <USBD_StdEPReq+0x60>
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	d015      	beq.n	800c12e <USBD_StdEPReq+0x8a>
 800c102:	e02b      	b.n	800c15c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c104:	7bbb      	ldrb	r3, [r7, #14]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00c      	beq.n	800c124 <USBD_StdEPReq+0x80>
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	2b80      	cmp	r3, #128	; 0x80
 800c10e:	d009      	beq.n	800c124 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c110:	7bbb      	ldrb	r3, [r7, #14]
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f002 fde1 	bl	800ecdc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c11a:	2180      	movs	r1, #128	; 0x80
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f002 fddd 	bl	800ecdc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c122:	e020      	b.n	800c166 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fc64 	bl	800c9f4 <USBD_CtlError>
        break;
 800c12c:	e01b      	b.n	800c166 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	885b      	ldrh	r3, [r3, #2]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10e      	bne.n	800c154 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c136:	7bbb      	ldrb	r3, [r7, #14]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00b      	beq.n	800c154 <USBD_StdEPReq+0xb0>
 800c13c:	7bbb      	ldrb	r3, [r7, #14]
 800c13e:	2b80      	cmp	r3, #128	; 0x80
 800c140:	d008      	beq.n	800c154 <USBD_StdEPReq+0xb0>
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	88db      	ldrh	r3, [r3, #6]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d104      	bne.n	800c154 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f002 fdc4 	bl	800ecdc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fcfb 	bl	800cb50 <USBD_CtlSendStatus>

        break;
 800c15a:	e004      	b.n	800c166 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fc48 	bl	800c9f4 <USBD_CtlError>
        break;
 800c164:	bf00      	nop
      }
      break;
 800c166:	e0e9      	b.n	800c33c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d002      	beq.n	800c178 <USBD_StdEPReq+0xd4>
 800c172:	2b03      	cmp	r3, #3
 800c174:	d015      	beq.n	800c1a2 <USBD_StdEPReq+0xfe>
 800c176:	e02f      	b.n	800c1d8 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c178:	7bbb      	ldrb	r3, [r7, #14]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00c      	beq.n	800c198 <USBD_StdEPReq+0xf4>
 800c17e:	7bbb      	ldrb	r3, [r7, #14]
 800c180:	2b80      	cmp	r3, #128	; 0x80
 800c182:	d009      	beq.n	800c198 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c184:	7bbb      	ldrb	r3, [r7, #14]
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f002 fda7 	bl	800ecdc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c18e:	2180      	movs	r1, #128	; 0x80
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f002 fda3 	bl	800ecdc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c196:	e025      	b.n	800c1e4 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fc2a 	bl	800c9f4 <USBD_CtlError>
        break;
 800c1a0:	e020      	b.n	800c1e4 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	885b      	ldrh	r3, [r3, #2]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d11b      	bne.n	800c1e2 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
 800c1ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d004      	beq.n	800c1be <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f002 fdc5 	bl	800ed48 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fcc6 	bl	800cb50 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	4798      	blx	r3
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c1d6:	e004      	b.n	800c1e2 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fc0a 	bl	800c9f4 <USBD_CtlError>
        break;
 800c1e0:	e000      	b.n	800c1e4 <USBD_StdEPReq+0x140>
        break;
 800c1e2:	bf00      	nop
      }
      break;
 800c1e4:	e0aa      	b.n	800c33c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d002      	beq.n	800c1f6 <USBD_StdEPReq+0x152>
 800c1f0:	2b03      	cmp	r3, #3
 800c1f2:	d032      	beq.n	800c25a <USBD_StdEPReq+0x1b6>
 800c1f4:	e097      	b.n	800c326 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d007      	beq.n	800c20c <USBD_StdEPReq+0x168>
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
 800c1fe:	2b80      	cmp	r3, #128	; 0x80
 800c200:	d004      	beq.n	800c20c <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fbf5 	bl	800c9f4 <USBD_CtlError>
          break;
 800c20a:	e091      	b.n	800c330 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c20c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c210:	2b00      	cmp	r3, #0
 800c212:	da0b      	bge.n	800c22c <USBD_StdEPReq+0x188>
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c21a:	4613      	mov	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	4413      	add	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	3310      	adds	r3, #16
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	4413      	add	r3, r2
 800c228:	3304      	adds	r3, #4
 800c22a:	e00b      	b.n	800c244 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c22c:	7bbb      	ldrb	r3, [r7, #14]
 800c22e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c232:	4613      	mov	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4413      	add	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	4413      	add	r3, r2
 800c242:	3304      	adds	r3, #4
 800c244:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	2202      	movs	r2, #2
 800c250:	4619      	mov	r1, r3
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fc3f 	bl	800cad6 <USBD_CtlSendData>
        break;
 800c258:	e06a      	b.n	800c330 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c25a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	da11      	bge.n	800c286 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c262:	7bbb      	ldrb	r3, [r7, #14]
 800c264:	f003 020f 	and.w	r2, r3, #15
 800c268:	6879      	ldr	r1, [r7, #4]
 800c26a:	4613      	mov	r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	440b      	add	r3, r1
 800c274:	3324      	adds	r3, #36	; 0x24
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d117      	bne.n	800c2ac <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fbb8 	bl	800c9f4 <USBD_CtlError>
            break;
 800c284:	e054      	b.n	800c330 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c286:	7bbb      	ldrb	r3, [r7, #14]
 800c288:	f003 020f 	and.w	r2, r3, #15
 800c28c:	6879      	ldr	r1, [r7, #4]
 800c28e:	4613      	mov	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	440b      	add	r3, r1
 800c298:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d104      	bne.n	800c2ac <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800c2a2:	6839      	ldr	r1, [r7, #0]
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 fba5 	bl	800c9f4 <USBD_CtlError>
            break;
 800c2aa:	e041      	b.n	800c330 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	da0b      	bge.n	800c2cc <USBD_StdEPReq+0x228>
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
 800c2b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	4413      	add	r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	3310      	adds	r3, #16
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	e00b      	b.n	800c2e4 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
 800c2ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4413      	add	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c2e6:	7bbb      	ldrb	r3, [r7, #14]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <USBD_StdEPReq+0x24e>
 800c2ec:	7bbb      	ldrb	r3, [r7, #14]
 800c2ee:	2b80      	cmp	r3, #128	; 0x80
 800c2f0:	d103      	bne.n	800c2fa <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	601a      	str	r2, [r3, #0]
 800c2f8:	e00e      	b.n	800c318 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2fa:	7bbb      	ldrb	r3, [r7, #14]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f002 fd58 	bl	800edb4 <USBD_LL_IsStallEP>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d003      	beq.n	800c312 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2201      	movs	r2, #1
 800c30e:	601a      	str	r2, [r3, #0]
 800c310:	e002      	b.n	800c318 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	2200      	movs	r2, #0
 800c316:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	2202      	movs	r2, #2
 800c31c:	4619      	mov	r1, r3
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fbd9 	bl	800cad6 <USBD_CtlSendData>
          break;
 800c324:	e004      	b.n	800c330 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800c326:	6839      	ldr	r1, [r7, #0]
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 fb63 	bl	800c9f4 <USBD_CtlError>
        break;
 800c32e:	bf00      	nop
      }
      break;
 800c330:	e004      	b.n	800c33c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800c332:	6839      	ldr	r1, [r7, #0]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 fb5d 	bl	800c9f4 <USBD_CtlError>
      break;
 800c33a:	bf00      	nop
    }
    break;
 800c33c:	e004      	b.n	800c348 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fb57 	bl	800c9f4 <USBD_CtlError>
    break;
 800c346:	bf00      	nop
  }

  return ret;
 800c348:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
	...

0800c354 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c35e:	2300      	movs	r3, #0
 800c360:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c362:	2300      	movs	r3, #0
 800c364:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c366:	2300      	movs	r3, #0
 800c368:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	885b      	ldrh	r3, [r3, #2]
 800c36e:	0a1b      	lsrs	r3, r3, #8
 800c370:	b29b      	uxth	r3, r3
 800c372:	3b01      	subs	r3, #1
 800c374:	2b0e      	cmp	r3, #14
 800c376:	f200 8152 	bhi.w	800c61e <USBD_GetDescriptor+0x2ca>
 800c37a:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <USBD_GetDescriptor+0x2c>)
 800c37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c380:	0800c3f1 	.word	0x0800c3f1
 800c384:	0800c409 	.word	0x0800c409
 800c388:	0800c449 	.word	0x0800c449
 800c38c:	0800c61f 	.word	0x0800c61f
 800c390:	0800c61f 	.word	0x0800c61f
 800c394:	0800c5bf 	.word	0x0800c5bf
 800c398:	0800c5eb 	.word	0x0800c5eb
 800c39c:	0800c61f 	.word	0x0800c61f
 800c3a0:	0800c61f 	.word	0x0800c61f
 800c3a4:	0800c61f 	.word	0x0800c61f
 800c3a8:	0800c61f 	.word	0x0800c61f
 800c3ac:	0800c61f 	.word	0x0800c61f
 800c3b0:	0800c61f 	.word	0x0800c61f
 800c3b4:	0800c61f 	.word	0x0800c61f
 800c3b8:	0800c3bd 	.word	0x0800c3bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c2:	69db      	ldr	r3, [r3, #28]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00b      	beq.n	800c3e0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ce:	69db      	ldr	r3, [r3, #28]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	7c12      	ldrb	r2, [r2, #16]
 800c3d4:	f107 0108 	add.w	r1, r7, #8
 800c3d8:	4610      	mov	r0, r2
 800c3da:	4798      	blx	r3
 800c3dc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c3de:	e126      	b.n	800c62e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 fb06 	bl	800c9f4 <USBD_CtlError>
      err++;
 800c3e8:	7afb      	ldrb	r3, [r7, #11]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	72fb      	strb	r3, [r7, #11]
    break;
 800c3ee:	e11e      	b.n	800c62e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	7c12      	ldrb	r2, [r2, #16]
 800c3fc:	f107 0108 	add.w	r1, r7, #8
 800c400:	4610      	mov	r0, r2
 800c402:	4798      	blx	r3
 800c404:	60f8      	str	r0, [r7, #12]
    break;
 800c406:	e112      	b.n	800c62e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	7c1b      	ldrb	r3, [r3, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10d      	bne.n	800c42c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c418:	f107 0208 	add.w	r2, r7, #8
 800c41c:	4610      	mov	r0, r2
 800c41e:	4798      	blx	r3
 800c420:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	3301      	adds	r3, #1
 800c426:	2202      	movs	r2, #2
 800c428:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c42a:	e100      	b.n	800c62e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c434:	f107 0208 	add.w	r2, r7, #8
 800c438:	4610      	mov	r0, r2
 800c43a:	4798      	blx	r3
 800c43c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	3301      	adds	r3, #1
 800c442:	2202      	movs	r2, #2
 800c444:	701a      	strb	r2, [r3, #0]
    break;
 800c446:	e0f2      	b.n	800c62e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	885b      	ldrh	r3, [r3, #2]
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b05      	cmp	r3, #5
 800c450:	f200 80ac 	bhi.w	800c5ac <USBD_GetDescriptor+0x258>
 800c454:	a201      	add	r2, pc, #4	; (adr r2, 800c45c <USBD_GetDescriptor+0x108>)
 800c456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45a:	bf00      	nop
 800c45c:	0800c475 	.word	0x0800c475
 800c460:	0800c4a9 	.word	0x0800c4a9
 800c464:	0800c4dd 	.word	0x0800c4dd
 800c468:	0800c511 	.word	0x0800c511
 800c46c:	0800c545 	.word	0x0800c545
 800c470:	0800c579 	.word	0x0800c579
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	7c12      	ldrb	r2, [r2, #16]
 800c48c:	f107 0108 	add.w	r1, r7, #8
 800c490:	4610      	mov	r0, r2
 800c492:	4798      	blx	r3
 800c494:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c496:	e091      	b.n	800c5bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 faaa 	bl	800c9f4 <USBD_CtlError>
        err++;
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	72fb      	strb	r3, [r7, #11]
      break;
 800c4a6:	e089      	b.n	800c5bc <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00b      	beq.n	800c4cc <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	7c12      	ldrb	r2, [r2, #16]
 800c4c0:	f107 0108 	add.w	r1, r7, #8
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4798      	blx	r3
 800c4c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4ca:	e077      	b.n	800c5bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fa90 	bl	800c9f4 <USBD_CtlError>
        err++;
 800c4d4:	7afb      	ldrb	r3, [r7, #11]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	72fb      	strb	r3, [r7, #11]
      break;
 800c4da:	e06f      	b.n	800c5bc <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00b      	beq.n	800c500 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	7c12      	ldrb	r2, [r2, #16]
 800c4f4:	f107 0108 	add.w	r1, r7, #8
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	4798      	blx	r3
 800c4fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4fe:	e05d      	b.n	800c5bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fa76 	bl	800c9f4 <USBD_CtlError>
        err++;
 800c508:	7afb      	ldrb	r3, [r7, #11]
 800c50a:	3301      	adds	r3, #1
 800c50c:	72fb      	strb	r3, [r7, #11]
      break;
 800c50e:	e055      	b.n	800c5bc <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c516:	691b      	ldr	r3, [r3, #16]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00b      	beq.n	800c534 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	7c12      	ldrb	r2, [r2, #16]
 800c528:	f107 0108 	add.w	r1, r7, #8
 800c52c:	4610      	mov	r0, r2
 800c52e:	4798      	blx	r3
 800c530:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c532:	e043      	b.n	800c5bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fa5c 	bl	800c9f4 <USBD_CtlError>
        err++;
 800c53c:	7afb      	ldrb	r3, [r7, #11]
 800c53e:	3301      	adds	r3, #1
 800c540:	72fb      	strb	r3, [r7, #11]
      break;
 800c542:	e03b      	b.n	800c5bc <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c54a:	695b      	ldr	r3, [r3, #20]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00b      	beq.n	800c568 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	7c12      	ldrb	r2, [r2, #16]
 800c55c:	f107 0108 	add.w	r1, r7, #8
 800c560:	4610      	mov	r0, r2
 800c562:	4798      	blx	r3
 800c564:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c566:	e029      	b.n	800c5bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fa42 	bl	800c9f4 <USBD_CtlError>
        err++;
 800c570:	7afb      	ldrb	r3, [r7, #11]
 800c572:	3301      	adds	r3, #1
 800c574:	72fb      	strb	r3, [r7, #11]
      break;
 800c576:	e021      	b.n	800c5bc <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00b      	beq.n	800c59c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c58a:	699b      	ldr	r3, [r3, #24]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	7c12      	ldrb	r2, [r2, #16]
 800c590:	f107 0108 	add.w	r1, r7, #8
 800c594:	4610      	mov	r0, r2
 800c596:	4798      	blx	r3
 800c598:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c59a:	e00f      	b.n	800c5bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fa28 	bl	800c9f4 <USBD_CtlError>
        err++;
 800c5a4:	7afb      	ldrb	r3, [r7, #11]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	72fb      	strb	r3, [r7, #11]
      break;
 800c5aa:	e007      	b.n	800c5bc <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fa20 	bl	800c9f4 <USBD_CtlError>
      err++;
 800c5b4:	7afb      	ldrb	r3, [r7, #11]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c5ba:	bf00      	nop
    }
    break;
 800c5bc:	e037      	b.n	800c62e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	7c1b      	ldrb	r3, [r3, #16]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d109      	bne.n	800c5da <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ce:	f107 0208 	add.w	r2, r7, #8
 800c5d2:	4610      	mov	r0, r2
 800c5d4:	4798      	blx	r3
 800c5d6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c5d8:	e029      	b.n	800c62e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c5da:	6839      	ldr	r1, [r7, #0]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 fa09 	bl	800c9f4 <USBD_CtlError>
      err++;
 800c5e2:	7afb      	ldrb	r3, [r7, #11]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	72fb      	strb	r3, [r7, #11]
    break;
 800c5e8:	e021      	b.n	800c62e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	7c1b      	ldrb	r3, [r3, #16]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10d      	bne.n	800c60e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5fa:	f107 0208 	add.w	r2, r7, #8
 800c5fe:	4610      	mov	r0, r2
 800c600:	4798      	blx	r3
 800c602:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	3301      	adds	r3, #1
 800c608:	2207      	movs	r2, #7
 800c60a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c60c:	e00f      	b.n	800c62e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c60e:	6839      	ldr	r1, [r7, #0]
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 f9ef 	bl	800c9f4 <USBD_CtlError>
      err++;
 800c616:	7afb      	ldrb	r3, [r7, #11]
 800c618:	3301      	adds	r3, #1
 800c61a:	72fb      	strb	r3, [r7, #11]
    break;
 800c61c:	e007      	b.n	800c62e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f9e7 	bl	800c9f4 <USBD_CtlError>
    err++;
 800c626:	7afb      	ldrb	r3, [r7, #11]
 800c628:	3301      	adds	r3, #1
 800c62a:	72fb      	strb	r3, [r7, #11]
    break;
 800c62c:	bf00      	nop
  }

  if (err != 0U)
 800c62e:	7afb      	ldrb	r3, [r7, #11]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d11e      	bne.n	800c672 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	88db      	ldrh	r3, [r3, #6]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d016      	beq.n	800c66a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800c63c:	893b      	ldrh	r3, [r7, #8]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00e      	beq.n	800c660 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	88da      	ldrh	r2, [r3, #6]
 800c646:	893b      	ldrh	r3, [r7, #8]
 800c648:	4293      	cmp	r3, r2
 800c64a:	bf28      	it	cs
 800c64c:	4613      	movcs	r3, r2
 800c64e:	b29b      	uxth	r3, r3
 800c650:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c652:	893b      	ldrh	r3, [r7, #8]
 800c654:	461a      	mov	r2, r3
 800c656:	68f9      	ldr	r1, [r7, #12]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 fa3c 	bl	800cad6 <USBD_CtlSendData>
 800c65e:	e009      	b.n	800c674 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c660:	6839      	ldr	r1, [r7, #0]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f9c6 	bl	800c9f4 <USBD_CtlError>
 800c668:	e004      	b.n	800c674 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fa70 	bl	800cb50 <USBD_CtlSendStatus>
 800c670:	e000      	b.n	800c674 <USBD_GetDescriptor+0x320>
    return;
 800c672:	bf00      	nop
    }
  }
}
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop

0800c67c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	889b      	ldrh	r3, [r3, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d130      	bne.n	800c6f0 <USBD_SetAddress+0x74>
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	88db      	ldrh	r3, [r3, #6]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d12c      	bne.n	800c6f0 <USBD_SetAddress+0x74>
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	885b      	ldrh	r3, [r3, #2]
 800c69a:	2b7f      	cmp	r3, #127	; 0x7f
 800c69c:	d828      	bhi.n	800c6f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	885b      	ldrh	r3, [r3, #2]
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	d104      	bne.n	800c6be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f99c 	bl	800c9f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6bc:	e01c      	b.n	800c6f8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	7bfa      	ldrb	r2, [r7, #15]
 800c6c2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f002 fba0 	bl	800ee10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 fa3d 	bl	800cb50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d004      	beq.n	800c6e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2202      	movs	r2, #2
 800c6e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6e4:	e008      	b.n	800c6f8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ee:	e003      	b.n	800c6f8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f97e 	bl	800c9f4 <USBD_CtlError>
  }
}
 800c6f8:	bf00      	nop
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	885b      	ldrh	r3, [r3, #2]
 800c712:	b2da      	uxtb	r2, r3
 800c714:	4b4b      	ldr	r3, [pc, #300]	; (800c844 <USBD_SetConfig+0x144>)
 800c716:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c718:	4b4a      	ldr	r3, [pc, #296]	; (800c844 <USBD_SetConfig+0x144>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d905      	bls.n	800c72c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 f966 	bl	800c9f4 <USBD_CtlError>
    return USBD_FAIL;
 800c728:	2303      	movs	r3, #3
 800c72a:	e087      	b.n	800c83c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c732:	2b02      	cmp	r3, #2
 800c734:	d002      	beq.n	800c73c <USBD_SetConfig+0x3c>
 800c736:	2b03      	cmp	r3, #3
 800c738:	d025      	beq.n	800c786 <USBD_SetConfig+0x86>
 800c73a:	e071      	b.n	800c820 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c73c:	4b41      	ldr	r3, [pc, #260]	; (800c844 <USBD_SetConfig+0x144>)
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d01c      	beq.n	800c77e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c744:	4b3f      	ldr	r3, [pc, #252]	; (800c844 <USBD_SetConfig+0x144>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	461a      	mov	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c74e:	4b3d      	ldr	r3, [pc, #244]	; (800c844 <USBD_SetConfig+0x144>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f7ff f9bd 	bl	800bad4 <USBD_SetClassConfig>
 800c75a:	4603      	mov	r3, r0
 800c75c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c75e:	7bfb      	ldrb	r3, [r7, #15]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d004      	beq.n	800c76e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c764:	6839      	ldr	r1, [r7, #0]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 f944 	bl	800c9f4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c76c:	e065      	b.n	800c83a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f9ee 	bl	800cb50 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2203      	movs	r2, #3
 800c778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c77c:	e05d      	b.n	800c83a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f9e6 	bl	800cb50 <USBD_CtlSendStatus>
    break;
 800c784:	e059      	b.n	800c83a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c786:	4b2f      	ldr	r3, [pc, #188]	; (800c844 <USBD_SetConfig+0x144>)
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d112      	bne.n	800c7b4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2202      	movs	r2, #2
 800c792:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c796:	4b2b      	ldr	r3, [pc, #172]	; (800c844 <USBD_SetConfig+0x144>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	461a      	mov	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7a0:	4b28      	ldr	r3, [pc, #160]	; (800c844 <USBD_SetConfig+0x144>)
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff f9b0 	bl	800bb0c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 f9cf 	bl	800cb50 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c7b2:	e042      	b.n	800c83a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c7b4:	4b23      	ldr	r3, [pc, #140]	; (800c844 <USBD_SetConfig+0x144>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d02a      	beq.n	800c818 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7ff f99e 	bl	800bb0c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c7d0:	4b1c      	ldr	r3, [pc, #112]	; (800c844 <USBD_SetConfig+0x144>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7da:	4b1a      	ldr	r3, [pc, #104]	; (800c844 <USBD_SetConfig+0x144>)
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7ff f977 	bl	800bad4 <USBD_SetClassConfig>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d00f      	beq.n	800c810 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c7f0:	6839      	ldr	r1, [r7, #0]
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f8fe 	bl	800c9f4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	4619      	mov	r1, r3
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7ff f983 	bl	800bb0c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2202      	movs	r2, #2
 800c80a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c80e:	e014      	b.n	800c83a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 f99d 	bl	800cb50 <USBD_CtlSendStatus>
    break;
 800c816:	e010      	b.n	800c83a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f999 	bl	800cb50 <USBD_CtlSendStatus>
    break;
 800c81e:	e00c      	b.n	800c83a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c820:	6839      	ldr	r1, [r7, #0]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f8e6 	bl	800c9f4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c828:	4b06      	ldr	r3, [pc, #24]	; (800c844 <USBD_SetConfig+0x144>)
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff f96c 	bl	800bb0c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c834:	2303      	movs	r3, #3
 800c836:	73fb      	strb	r3, [r7, #15]
    break;
 800c838:	bf00      	nop
  }

  return ret;
 800c83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3710      	adds	r7, #16
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	200001fc 	.word	0x200001fc

0800c848 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	88db      	ldrh	r3, [r3, #6]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d004      	beq.n	800c864 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 f8c9 	bl	800c9f4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c862:	e021      	b.n	800c8a8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	db17      	blt.n	800c89e <USBD_GetConfig+0x56>
 800c86e:	2b02      	cmp	r3, #2
 800c870:	dd02      	ble.n	800c878 <USBD_GetConfig+0x30>
 800c872:	2b03      	cmp	r3, #3
 800c874:	d00b      	beq.n	800c88e <USBD_GetConfig+0x46>
 800c876:	e012      	b.n	800c89e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	3308      	adds	r3, #8
 800c882:	2201      	movs	r2, #1
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 f925 	bl	800cad6 <USBD_CtlSendData>
      break;
 800c88c:	e00c      	b.n	800c8a8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	3304      	adds	r3, #4
 800c892:	2201      	movs	r2, #1
 800c894:	4619      	mov	r1, r3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f91d 	bl	800cad6 <USBD_CtlSendData>
      break;
 800c89c:	e004      	b.n	800c8a8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c89e:	6839      	ldr	r1, [r7, #0]
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f8a7 	bl	800c9f4 <USBD_CtlError>
      break;
 800c8a6:	bf00      	nop
}
 800c8a8:	bf00      	nop
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	d81e      	bhi.n	800c904 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	88db      	ldrh	r3, [r3, #6]
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d004      	beq.n	800c8d8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 f88f 	bl	800c9f4 <USBD_CtlError>
      break;
 800c8d6:	e01a      	b.n	800c90e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d005      	beq.n	800c8f4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	f043 0202 	orr.w	r2, r3, #2
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	330c      	adds	r3, #12
 800c8f8:	2202      	movs	r2, #2
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f8ea 	bl	800cad6 <USBD_CtlSendData>
    break;
 800c902:	e004      	b.n	800c90e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f874 	bl	800c9f4 <USBD_CtlError>
    break;
 800c90c:	bf00      	nop
  }
}
 800c90e:	bf00      	nop
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b082      	sub	sp, #8
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	885b      	ldrh	r3, [r3, #2]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d106      	bne.n	800c936 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f90d 	bl	800cb50 <USBD_CtlSendStatus>
  }
}
 800c936:	bf00      	nop
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c94e:	3b01      	subs	r3, #1
 800c950:	2b02      	cmp	r3, #2
 800c952:	d80b      	bhi.n	800c96c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	885b      	ldrh	r3, [r3, #2]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d10c      	bne.n	800c976 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f8f3 	bl	800cb50 <USBD_CtlSendStatus>
      }
      break;
 800c96a:	e004      	b.n	800c976 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f840 	bl	800c9f4 <USBD_CtlError>
      break;
 800c974:	e000      	b.n	800c978 <USBD_ClrFeature+0x3a>
      break;
 800c976:	bf00      	nop
  }
}
 800c978:	bf00      	nop
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	781a      	ldrb	r2, [r3, #0]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	3301      	adds	r3, #1
 800c99a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	781a      	ldrb	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f7ff faa8 	bl	800bf00 <SWAPBYTE>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f7ff fa9b 	bl	800bf00 <SWAPBYTE>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f7ff fa8e 	bl	800bf00 <SWAPBYTE>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	80da      	strh	r2, [r3, #6]
}
 800c9ec:	bf00      	nop
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9fe:	2180      	movs	r1, #128	; 0x80
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f002 f96b 	bl	800ecdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca06:	2100      	movs	r1, #0
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f002 f967 	bl	800ecdc <USBD_LL_StallEP>
}
 800ca0e:	bf00      	nop
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b086      	sub	sp, #24
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	60f8      	str	r0, [r7, #12]
 800ca1e:	60b9      	str	r1, [r7, #8]
 800ca20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca22:	2300      	movs	r3, #0
 800ca24:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d036      	beq.n	800ca9a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ca30:	6938      	ldr	r0, [r7, #16]
 800ca32:	f000 f836 	bl	800caa2 <USBD_GetLen>
 800ca36:	4603      	mov	r3, r0
 800ca38:	3301      	adds	r3, #1
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	005b      	lsls	r3, r3, #1
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca44:	7dfb      	ldrb	r3, [r7, #23]
 800ca46:	68ba      	ldr	r2, [r7, #8]
 800ca48:	4413      	add	r3, r2
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	7812      	ldrb	r2, [r2, #0]
 800ca4e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca50:	7dfb      	ldrb	r3, [r7, #23]
 800ca52:	3301      	adds	r3, #1
 800ca54:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca56:	7dfb      	ldrb	r3, [r7, #23]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	4413      	add	r3, r2
 800ca5c:	2203      	movs	r2, #3
 800ca5e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	3301      	adds	r3, #1
 800ca64:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca66:	e013      	b.n	800ca90 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca68:	7dfb      	ldrb	r3, [r7, #23]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	693a      	ldr	r2, [r7, #16]
 800ca70:	7812      	ldrb	r2, [r2, #0]
 800ca72:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	3301      	adds	r3, #1
 800ca78:	613b      	str	r3, [r7, #16]
    idx++;
 800ca7a:	7dfb      	ldrb	r3, [r7, #23]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	4413      	add	r3, r2
 800ca86:	2200      	movs	r2, #0
 800ca88:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca8a:	7dfb      	ldrb	r3, [r7, #23]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1e7      	bne.n	800ca68 <USBD_GetString+0x52>
 800ca98:	e000      	b.n	800ca9c <USBD_GetString+0x86>
    return;
 800ca9a:	bf00      	nop
  }
}
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800caa2:	b480      	push	{r7}
 800caa4:	b085      	sub	sp, #20
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cab2:	e005      	b.n	800cac0 <USBD_GetLen+0x1e>
  {
    len++;
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
 800cab6:	3301      	adds	r3, #1
 800cab8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	3301      	adds	r3, #1
 800cabe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1f5      	bne.n	800cab4 <USBD_GetLen+0x12>
  }

  return len;
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b084      	sub	sp, #16
 800cada:	af00      	add	r7, sp, #0
 800cadc:	60f8      	str	r0, [r7, #12]
 800cade:	60b9      	str	r1, [r7, #8]
 800cae0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2202      	movs	r2, #2
 800cae6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	68ba      	ldr	r2, [r7, #8]
 800cafa:	2100      	movs	r1, #0
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f002 f9bd 	bl	800ee7c <USBD_LL_Transmit>

  return USBD_OK;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f002 f9ac 	bl	800ee7c <USBD_LL_Transmit>

  return USBD_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b084      	sub	sp, #16
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	60f8      	str	r0, [r7, #12]
 800cb36:	60b9      	str	r1, [r7, #8]
 800cb38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	2100      	movs	r1, #0
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f002 f9d3 	bl	800eeec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2204      	movs	r2, #4
 800cb5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb60:	2300      	movs	r3, #0
 800cb62:	2200      	movs	r2, #0
 800cb64:	2100      	movs	r1, #0
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f002 f988 	bl	800ee7c <USBD_LL_Transmit>

  return USBD_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2205      	movs	r2, #5
 800cb82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb86:	2300      	movs	r3, #0
 800cb88:	2200      	movs	r2, #0
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f002 f9ad 	bl	800eeec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b087      	sub	sp, #28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	4613      	mov	r3, r2
 800cba8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cbb2:	4b1f      	ldr	r3, [pc, #124]	; (800cc30 <FATFS_LinkDriverEx+0x94>)
 800cbb4:	7a5b      	ldrb	r3, [r3, #9]
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d131      	bne.n	800cc20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cbbc:	4b1c      	ldr	r3, [pc, #112]	; (800cc30 <FATFS_LinkDriverEx+0x94>)
 800cbbe:	7a5b      	ldrb	r3, [r3, #9]
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	4b1a      	ldr	r3, [pc, #104]	; (800cc30 <FATFS_LinkDriverEx+0x94>)
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cbca:	4b19      	ldr	r3, [pc, #100]	; (800cc30 <FATFS_LinkDriverEx+0x94>)
 800cbcc:	7a5b      	ldrb	r3, [r3, #9]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	4a17      	ldr	r2, [pc, #92]	; (800cc30 <FATFS_LinkDriverEx+0x94>)
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	4413      	add	r3, r2
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cbda:	4b15      	ldr	r3, [pc, #84]	; (800cc30 <FATFS_LinkDriverEx+0x94>)
 800cbdc:	7a5b      	ldrb	r3, [r3, #9]
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	4b13      	ldr	r3, [pc, #76]	; (800cc30 <FATFS_LinkDriverEx+0x94>)
 800cbe4:	4413      	add	r3, r2
 800cbe6:	79fa      	ldrb	r2, [r7, #7]
 800cbe8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cbea:	4b11      	ldr	r3, [pc, #68]	; (800cc30 <FATFS_LinkDriverEx+0x94>)
 800cbec:	7a5b      	ldrb	r3, [r3, #9]
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	1c5a      	adds	r2, r3, #1
 800cbf2:	b2d1      	uxtb	r1, r2
 800cbf4:	4a0e      	ldr	r2, [pc, #56]	; (800cc30 <FATFS_LinkDriverEx+0x94>)
 800cbf6:	7251      	strb	r1, [r2, #9]
 800cbf8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cbfa:	7dbb      	ldrb	r3, [r7, #22]
 800cbfc:	3330      	adds	r3, #48	; 0x30
 800cbfe:	b2da      	uxtb	r2, r3
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	3301      	adds	r3, #1
 800cc08:	223a      	movs	r2, #58	; 0x3a
 800cc0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	3302      	adds	r3, #2
 800cc10:	222f      	movs	r2, #47	; 0x2f
 800cc12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	3303      	adds	r3, #3
 800cc18:	2200      	movs	r2, #0
 800cc1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	371c      	adds	r7, #28
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop
 800cc30:	20000200 	.word	0x20000200

0800cc34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc3e:	2200      	movs	r2, #0
 800cc40:	6839      	ldr	r1, [r7, #0]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7ff ffaa 	bl	800cb9c <FATFS_LinkDriverEx>
 800cc48:	4603      	mov	r3, r0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <CheckResetCause>:
 * ##########################################
 *  */

/* Check what the cause of reset is */
uint8_t CheckResetCause(void)
{
 800cc54:	b480      	push	{r7}
 800cc56:	af00      	add	r7, sp, #0
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800cc58:	4b25      	ldr	r3, [pc, #148]	; (800ccf0 <CheckResetCause+0x9c>)
 800cc5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	da01      	bge.n	800cc66 <CheckResetCause+0x12>
	{
		return 1;
 800cc62:	2301      	movs	r3, #1
 800cc64:	e03f      	b.n	800cce6 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800cc66:	4b22      	ldr	r3, [pc, #136]	; (800ccf0 <CheckResetCause+0x9c>)
 800cc68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d001      	beq.n	800cc78 <CheckResetCause+0x24>
	{
		return 2;
 800cc74:	2302      	movs	r3, #2
 800cc76:	e036      	b.n	800cce6 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800cc78:	4b1d      	ldr	r3, [pc, #116]	; (800ccf0 <CheckResetCause+0x9c>)
 800cc7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <CheckResetCause+0x36>
	{
		//If IWDG resets, can be cause of fatal error
		return 3;
 800cc86:	2303      	movs	r3, #3
 800cc88:	e02d      	b.n	800cce6 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800cc8a:	4b19      	ldr	r3, [pc, #100]	; (800ccf0 <CheckResetCause+0x9c>)
 800cc8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d001      	beq.n	800cc9c <CheckResetCause+0x48>
	{
		return 4;
 800cc98:	2304      	movs	r3, #4
 800cc9a:	e024      	b.n	800cce6 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800cc9c:	4b14      	ldr	r3, [pc, #80]	; (800ccf0 <CheckResetCause+0x9c>)
 800cc9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d001      	beq.n	800ccae <CheckResetCause+0x5a>
	{
		return 5;
 800ccaa:	2305      	movs	r3, #5
 800ccac:	e01b      	b.n	800cce6 <CheckResetCause+0x92>
	}
	// Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to ensure first that the reset cause is
	// NOT a POR/PDR reset. See note below.
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800ccae:	4b10      	ldr	r3, [pc, #64]	; (800ccf0 <CheckResetCause+0x9c>)
 800ccb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ccb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d001      	beq.n	800ccc0 <CheckResetCause+0x6c>
	{
		return 6;
 800ccbc:	2306      	movs	r3, #6
 800ccbe:	e012      	b.n	800cce6 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_FWRST))
 800ccc0:	4b0b      	ldr	r3, [pc, #44]	; (800ccf0 <CheckResetCause+0x9c>)
 800ccc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ccc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d001      	beq.n	800ccd2 <CheckResetCause+0x7e>
	{
		return 7;
 800ccce:	2307      	movs	r3, #7
 800ccd0:	e009      	b.n	800cce6 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_OBLRST))
 800ccd2:	4b07      	ldr	r3, [pc, #28]	; (800ccf0 <CheckResetCause+0x9c>)
 800ccd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ccd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <CheckResetCause+0x90>
	{
		return 8;
 800cce0:	2308      	movs	r3, #8
 800cce2:	e000      	b.n	800cce6 <CheckResetCause+0x92>
	}
	else
	{
		return 0;
 800cce4:	2300      	movs	r3, #0
	}

	__HAL_RCC_CLEAR_RESET_FLAGS();
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	40021000 	.word	0x40021000

0800ccf4 <RevisionControl_SetState>:
RevisionControl_State RevState = REVISION_ERROR;
uint8_t revisionControl_Counter = 0;

/* Set state of revision control */
void RevisionControl_SetState(RevisionControl_State rState)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	71fb      	strb	r3, [r7, #7]
	RevState = rState;
 800ccfe:	4a04      	ldr	r2, [pc, #16]	; (800cd10 <RevisionControl_SetState+0x1c>)
 800cd00:	79fb      	ldrb	r3, [r7, #7]
 800cd02:	7013      	strb	r3, [r2, #0]
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	2000020c 	.word	0x2000020c

0800cd14 <RevisionControl_GetState>:

/* Get state of revision control */
RevisionControl_State RevisionControl_GetState(void)
{
 800cd14:	b480      	push	{r7}
 800cd16:	af00      	add	r7, sp, #0
	return RevState;
 800cd18:	4b03      	ldr	r3, [pc, #12]	; (800cd28 <RevisionControl_GetState+0x14>)
 800cd1a:	781b      	ldrb	r3, [r3, #0]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	2000020c 	.word	0x2000020c

0800cd2c <RevisionControl_EnableRead>:

/* Set GPIO high to enable revision reader */
static HAL_StatusTypeDef RevisionControl_EnableRead(void)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Revision_Enable_GPIO_Port, Revision_Enable_Pin, GPIO_PIN_SET);
 800cd32:	2201      	movs	r2, #1
 800cd34:	2104      	movs	r1, #4
 800cd36:	480d      	ldr	r0, [pc, #52]	; (800cd6c <RevisionControl_EnableRead+0x40>)
 800cd38:	f7f4 fff8 	bl	8001d2c <HAL_GPIO_WritePin>

	uint16_t counter = 0;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	80fb      	strh	r3, [r7, #6]
	while(counter < 1000)
 800cd40:	e00b      	b.n	800cd5a <RevisionControl_EnableRead+0x2e>
	{
		if(HAL_GPIO_ReadPin(Revision_Enable_GPIO_Port, Revision_Enable_Pin) == GPIO_PIN_SET)
 800cd42:	2104      	movs	r1, #4
 800cd44:	4809      	ldr	r0, [pc, #36]	; (800cd6c <RevisionControl_EnableRead+0x40>)
 800cd46:	f7f4 ffd9 	bl	8001cfc <HAL_GPIO_ReadPin>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d101      	bne.n	800cd54 <RevisionControl_EnableRead+0x28>
		{
			return HAL_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	e007      	b.n	800cd64 <RevisionControl_EnableRead+0x38>
		}
		counter++;
 800cd54:	88fb      	ldrh	r3, [r7, #6]
 800cd56:	3301      	adds	r3, #1
 800cd58:	80fb      	strh	r3, [r7, #6]
	while(counter < 1000)
 800cd5a:	88fb      	ldrh	r3, [r7, #6]
 800cd5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd60:	d3ef      	bcc.n	800cd42 <RevisionControl_EnableRead+0x16>
	}
	return HAL_ERROR;
 800cd62:	2301      	movs	r3, #1
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	48000800 	.word	0x48000800

0800cd70 <RevisionControl_DisableRead>:

/* Set GPIO low to disable revision reader */
static HAL_StatusTypeDef RevisionControl_DisableRead(void)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Revision_Enable_GPIO_Port, Revision_Enable_Pin, GPIO_PIN_RESET);
 800cd76:	2200      	movs	r2, #0
 800cd78:	2104      	movs	r1, #4
 800cd7a:	480d      	ldr	r0, [pc, #52]	; (800cdb0 <RevisionControl_DisableRead+0x40>)
 800cd7c:	f7f4 ffd6 	bl	8001d2c <HAL_GPIO_WritePin>

	uint16_t counter = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	80fb      	strh	r3, [r7, #6]
	while(counter < 1000)
 800cd84:	e00b      	b.n	800cd9e <RevisionControl_DisableRead+0x2e>
	{
		if(HAL_GPIO_ReadPin(Revision_Enable_GPIO_Port, Revision_Enable_Pin) == GPIO_PIN_RESET)
 800cd86:	2104      	movs	r1, #4
 800cd88:	4809      	ldr	r0, [pc, #36]	; (800cdb0 <RevisionControl_DisableRead+0x40>)
 800cd8a:	f7f4 ffb7 	bl	8001cfc <HAL_GPIO_ReadPin>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <RevisionControl_DisableRead+0x28>
		{
			return HAL_OK;
 800cd94:	2300      	movs	r3, #0
 800cd96:	e007      	b.n	800cda8 <RevisionControl_DisableRead+0x38>
		}
		counter++;
 800cd98:	88fb      	ldrh	r3, [r7, #6]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	80fb      	strh	r3, [r7, #6]
	while(counter < 1000)
 800cd9e:	88fb      	ldrh	r3, [r7, #6]
 800cda0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cda4:	d3ef      	bcc.n	800cd86 <RevisionControl_DisableRead+0x16>
	}
	return HAL_ERROR;
 800cda6:	2301      	movs	r3, #1
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	48000800 	.word	0x48000800

0800cdb4 <RevisionControl_CalibrationStart>:

static HAL_StatusTypeDef RevisionControl_CalibrationStart(void)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	af00      	add	r7, sp, #0
	if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) == HAL_OK)
 800cdb8:	217f      	movs	r1, #127	; 0x7f
 800cdba:	4805      	ldr	r0, [pc, #20]	; (800cdd0 <RevisionControl_CalibrationStart+0x1c>)
 800cdbc:	f7f4 fbc7 	bl	800154e <HAL_ADCEx_Calibration_Start>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <RevisionControl_CalibrationStart+0x16>
	{
		return HAL_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	e000      	b.n	800cdcc <RevisionControl_CalibrationStart+0x18>
	}
	return HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	2000bb7c 	.word	0x2000bb7c

0800cdd4 <RevisionControl_Start>:

static HAL_StatusTypeDef RevisionControl_Start(void)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	af00      	add	r7, sp, #0
	if(HAL_ADC_Start(&hadc1) == HAL_OK)
 800cdd8:	4805      	ldr	r0, [pc, #20]	; (800cdf0 <RevisionControl_Start+0x1c>)
 800cdda:	f7f3 fddb 	bl	8000994 <HAL_ADC_Start>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d101      	bne.n	800cde8 <RevisionControl_Start+0x14>
	{
		return HAL_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	e000      	b.n	800cdea <RevisionControl_Start+0x16>
	}
	return HAL_ERROR;
 800cde8:	2301      	movs	r3, #1
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	2000bb7c 	.word	0x2000bb7c

0800cdf4 <RevisionControl_PollConversion>:

static HAL_StatusTypeDef RevisionControl_PollConversion(void)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	af00      	add	r7, sp, #0
	if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 800cdf8:	210a      	movs	r1, #10
 800cdfa:	4805      	ldr	r0, [pc, #20]	; (800ce10 <RevisionControl_PollConversion+0x1c>)
 800cdfc:	f7f3 fe2d 	bl	8000a5a <HAL_ADC_PollForConversion>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d101      	bne.n	800ce0a <RevisionControl_PollConversion+0x16>
	{
		return HAL_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	e000      	b.n	800ce0c <RevisionControl_PollConversion+0x18>
	}
	return HAL_ERROR;
 800ce0a:	2301      	movs	r3, #1
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	2000bb7c 	.word	0x2000bb7c

0800ce14 <RevisionControl_GetADCState>:

static HAL_StatusTypeDef RevisionControl_GetADCState(void)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_REG_EOC)
 800ce18:	4806      	ldr	r0, [pc, #24]	; (800ce34 <RevisionControl_GetADCState+0x20>)
 800ce1a:	f7f4 faad 	bl	8001378 <HAL_ADC_GetState>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce28:	d101      	bne.n	800ce2e <RevisionControl_GetADCState+0x1a>
				== HAL_ADC_STATE_REG_EOC)
	{
		return HAL_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e000      	b.n	800ce30 <RevisionControl_GetADCState+0x1c>
	}
	return HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	2000bb7c 	.word	0x2000bb7c

0800ce38 <RevisionControl_GetADCValue>:

static uint16_t RevisionControl_GetADCValue(void)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 800ce3c:	4803      	ldr	r0, [pc, #12]	; (800ce4c <RevisionControl_GetADCValue+0x14>)
 800ce3e:	f7f3 fe94 	bl	8000b6a <HAL_ADC_GetValue>
 800ce42:	4603      	mov	r3, r0
 800ce44:	b29b      	uxth	r3, r3
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	2000bb7c 	.word	0x2000bb7c

0800ce50 <RevisionControl_CheckRevision>:

static RevisionControl_Revision RevisionControl_CheckRevision(void)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
	__IO uint16_t adcValue = RevisionControl_GetADCValue();
 800ce56:	f7ff ffef 	bl	800ce38 <RevisionControl_GetADCValue>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	80fb      	strh	r3, [r7, #6]

	if(adcValue > 4000)//adcValue > 800 && adcValue < 1200)
 800ce5e:	88fb      	ldrh	r3, [r7, #6]
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800ce66:	d901      	bls.n	800ce6c <RevisionControl_CheckRevision+0x1c>
	{
		return REVISION_V1;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e000      	b.n	800ce6e <RevisionControl_CheckRevision+0x1e>
	}
	else
	{
		return REVISION_ERROR;
 800ce6c:	2300      	movs	r3, #0
	}
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
	...

0800ce78 <RevisionControl_StateMachine>:

void RevisionControl_StateMachine(void)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
	RevisionControl_State rState = RevisionControl_GetState();
 800ce7e:	f7ff ff49 	bl	800cd14 <RevisionControl_GetState>
 800ce82:	4603      	mov	r3, r0
 800ce84:	71fb      	strb	r3, [r7, #7]

	if(revisionControl_Counter > 100)
 800ce86:	4b56      	ldr	r3, [pc, #344]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	2b64      	cmp	r3, #100	; 0x64
 800ce8c:	d908      	bls.n	800cea0 <RevisionControl_StateMachine+0x28>
	{
		/* Error occur */
		TRACE("[Revision Control] - FAILED\r\n");
 800ce8e:	4855      	ldr	r0, [pc, #340]	; (800cfe4 <RevisionControl_StateMachine+0x16c>)
 800ce90:	f002 fb30 	bl	800f4f4 <puts>
		RevisionControl_SetState(REVISIONSTATE_ERROR);
 800ce94:	2008      	movs	r0, #8
 800ce96:	f7ff ff2d 	bl	800ccf4 <RevisionControl_SetState>
		revisionBoard = REVISION_ERROR;
 800ce9a:	4b53      	ldr	r3, [pc, #332]	; (800cfe8 <RevisionControl_StateMachine+0x170>)
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	701a      	strb	r2, [r3, #0]
	}

	switch(rState)
 800cea0:	79fb      	ldrb	r3, [r7, #7]
 800cea2:	2b06      	cmp	r3, #6
 800cea4:	f200 8094 	bhi.w	800cfd0 <RevisionControl_StateMachine+0x158>
 800cea8:	a201      	add	r2, pc, #4	; (adr r2, 800ceb0 <RevisionControl_StateMachine+0x38>)
 800ceaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceae:	bf00      	nop
 800ceb0:	0800cecd 	.word	0x0800cecd
 800ceb4:	0800cef3 	.word	0x0800cef3
 800ceb8:	0800cf19 	.word	0x0800cf19
 800cebc:	0800cf3f 	.word	0x0800cf3f
 800cec0:	0800cf65 	.word	0x0800cf65
 800cec4:	0800cf8b 	.word	0x0800cf8b
 800cec8:	0800cfa5 	.word	0x0800cfa5
	{
		case REVISIONSTATE_ENABLE:
			if(RevisionControl_EnableRead() == HAL_OK)
 800cecc:	f7ff ff2e 	bl	800cd2c <RevisionControl_EnableRead>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d106      	bne.n	800cee4 <RevisionControl_StateMachine+0x6c>
			{
				RevisionControl_SetState(REVISIONSTATE_CALIBRATIONSTART);
 800ced6:	2001      	movs	r0, #1
 800ced8:	f7ff ff0c 	bl	800ccf4 <RevisionControl_SetState>
				TRACE_DEBUG("RevisionControl EnableRead passed\r\n");
 800cedc:	4843      	ldr	r0, [pc, #268]	; (800cfec <RevisionControl_StateMachine+0x174>)
 800cede:	f002 fb09 	bl	800f4f4 <puts>
			}
			else
			{
				revisionControl_Counter++;
			}
			break;
 800cee2:	e079      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
				revisionControl_Counter++;
 800cee4:	4b3e      	ldr	r3, [pc, #248]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	3301      	adds	r3, #1
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	4b3c      	ldr	r3, [pc, #240]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800ceee:	701a      	strb	r2, [r3, #0]
			break;
 800cef0:	e072      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
		case REVISIONSTATE_CALIBRATIONSTART:
			if(RevisionControl_CalibrationStart() == HAL_OK)
 800cef2:	f7ff ff5f 	bl	800cdb4 <RevisionControl_CalibrationStart>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d106      	bne.n	800cf0a <RevisionControl_StateMachine+0x92>
			{
				RevisionControl_SetState(REVISIONSTATE_START);
 800cefc:	2002      	movs	r0, #2
 800cefe:	f7ff fef9 	bl	800ccf4 <RevisionControl_SetState>
				TRACE_DEBUG("RevisionControl Calibration start passed\r\n");
 800cf02:	483b      	ldr	r0, [pc, #236]	; (800cff0 <RevisionControl_StateMachine+0x178>)
 800cf04:	f002 faf6 	bl	800f4f4 <puts>
			}
			else
			{
				revisionControl_Counter++;
			}
			break;
 800cf08:	e066      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
				revisionControl_Counter++;
 800cf0a:	4b35      	ldr	r3, [pc, #212]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	4b33      	ldr	r3, [pc, #204]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800cf14:	701a      	strb	r2, [r3, #0]
			break;
 800cf16:	e05f      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
		case REVISIONSTATE_START:
			if(RevisionControl_Start() == HAL_OK)
 800cf18:	f7ff ff5c 	bl	800cdd4 <RevisionControl_Start>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <RevisionControl_StateMachine+0xb8>
			{
				RevisionControl_SetState(REVISIONSTATE_POLLCONVERSION);
 800cf22:	2003      	movs	r0, #3
 800cf24:	f7ff fee6 	bl	800ccf4 <RevisionControl_SetState>
				TRACE_DEBUG("RevisionControl start passed\r\n");
 800cf28:	4832      	ldr	r0, [pc, #200]	; (800cff4 <RevisionControl_StateMachine+0x17c>)
 800cf2a:	f002 fae3 	bl	800f4f4 <puts>
			}
			else
			{
				revisionControl_Counter++;
			}
			break;
 800cf2e:	e053      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
				revisionControl_Counter++;
 800cf30:	4b2b      	ldr	r3, [pc, #172]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	3301      	adds	r3, #1
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	4b29      	ldr	r3, [pc, #164]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800cf3a:	701a      	strb	r2, [r3, #0]
			break;
 800cf3c:	e04c      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
		case REVISIONSTATE_POLLCONVERSION:
			if(RevisionControl_PollConversion() == HAL_OK)
 800cf3e:	f7ff ff59 	bl	800cdf4 <RevisionControl_PollConversion>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d106      	bne.n	800cf56 <RevisionControl_StateMachine+0xde>
			{
				RevisionControl_SetState(REVISIONSTATE_GETADCSTATE);
 800cf48:	2004      	movs	r0, #4
 800cf4a:	f7ff fed3 	bl	800ccf4 <RevisionControl_SetState>
				TRACE_DEBUG("RevisionControl Poll conversion passed\r\n");
 800cf4e:	482a      	ldr	r0, [pc, #168]	; (800cff8 <RevisionControl_StateMachine+0x180>)
 800cf50:	f002 fad0 	bl	800f4f4 <puts>
			}
			else
			{
				revisionControl_Counter++;
			}
			break;
 800cf54:	e040      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
				revisionControl_Counter++;
 800cf56:	4b22      	ldr	r3, [pc, #136]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	b2da      	uxtb	r2, r3
 800cf5e:	4b20      	ldr	r3, [pc, #128]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800cf60:	701a      	strb	r2, [r3, #0]
			break;
 800cf62:	e039      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
		case REVISIONSTATE_GETADCSTATE:
			if(RevisionControl_GetADCState() == HAL_OK)
 800cf64:	f7ff ff56 	bl	800ce14 <RevisionControl_GetADCState>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d106      	bne.n	800cf7c <RevisionControl_StateMachine+0x104>
			{
				RevisionControl_SetState(REVISIONSTATE_CHECKREVISION);
 800cf6e:	2005      	movs	r0, #5
 800cf70:	f7ff fec0 	bl	800ccf4 <RevisionControl_SetState>
				TRACE_DEBUG("RevisionControl Get ADC state passed\r\n");
 800cf74:	4821      	ldr	r0, [pc, #132]	; (800cffc <RevisionControl_StateMachine+0x184>)
 800cf76:	f002 fabd 	bl	800f4f4 <puts>
			}
			else
			{
				revisionControl_Counter++;
			}
			break;
 800cf7a:	e02d      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
				revisionControl_Counter++;
 800cf7c:	4b18      	ldr	r3, [pc, #96]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	3301      	adds	r3, #1
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	4b16      	ldr	r3, [pc, #88]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800cf86:	701a      	strb	r2, [r3, #0]
			break;
 800cf88:	e026      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
		case REVISIONSTATE_CHECKREVISION:
			revisionBoard = RevisionControl_CheckRevision();
 800cf8a:	f7ff ff61 	bl	800ce50 <RevisionControl_CheckRevision>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	461a      	mov	r2, r3
 800cf92:	4b15      	ldr	r3, [pc, #84]	; (800cfe8 <RevisionControl_StateMachine+0x170>)
 800cf94:	701a      	strb	r2, [r3, #0]
			RevisionControl_SetState(REVISIONSTATE_DISABLE);
 800cf96:	2006      	movs	r0, #6
 800cf98:	f7ff feac 	bl	800ccf4 <RevisionControl_SetState>
			TRACE_DEBUG("RevisionControl Check Revision passed\r\n");
 800cf9c:	4818      	ldr	r0, [pc, #96]	; (800d000 <RevisionControl_StateMachine+0x188>)
 800cf9e:	f002 faa9 	bl	800f4f4 <puts>
			break;
 800cfa2:	e019      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
		case REVISIONSTATE_DISABLE:
			if(RevisionControl_DisableRead() == HAL_OK)
 800cfa4:	f7ff fee4 	bl	800cd70 <RevisionControl_DisableRead>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d109      	bne.n	800cfc2 <RevisionControl_StateMachine+0x14a>
			{
				RevisionControl_SetState(REVISIONSTATE_DONE);
 800cfae:	2007      	movs	r0, #7
 800cfb0:	f7ff fea0 	bl	800ccf4 <RevisionControl_SetState>
				TRACE_DEBUG("RevisionControl Disable read passed\r\n");
 800cfb4:	4813      	ldr	r0, [pc, #76]	; (800d004 <RevisionControl_StateMachine+0x18c>)
 800cfb6:	f002 fa9d 	bl	800f4f4 <puts>
				TRACE("[Revision Control] - PASSED\r\n");
 800cfba:	4813      	ldr	r0, [pc, #76]	; (800d008 <RevisionControl_StateMachine+0x190>)
 800cfbc:	f002 fa9a 	bl	800f4f4 <puts>
			}
			else
			{
				revisionControl_Counter++;
			}
			break;
 800cfc0:	e00a      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
				revisionControl_Counter++;
 800cfc2:	4b07      	ldr	r3, [pc, #28]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	4b05      	ldr	r3, [pc, #20]	; (800cfe0 <RevisionControl_StateMachine+0x168>)
 800cfcc:	701a      	strb	r2, [r3, #0]
			break;
 800cfce:	e003      	b.n	800cfd8 <RevisionControl_StateMachine+0x160>
		default:
			TRACE_DEBUG("RevisionControl ERROR, disabling state machine\r\n");
 800cfd0:	480e      	ldr	r0, [pc, #56]	; (800d00c <RevisionControl_StateMachine+0x194>)
 800cfd2:	f002 fa8f 	bl	800f4f4 <puts>
			break;
 800cfd6:	bf00      	nop
			/* DeInit ADC and bind GPIOs to analog inputs */

	}

}
 800cfd8:	bf00      	nop
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	2000020d 	.word	0x2000020d
 800cfe4:	0800fbd4 	.word	0x0800fbd4
 800cfe8:	2000bb79 	.word	0x2000bb79
 800cfec:	0800fbf4 	.word	0x0800fbf4
 800cff0:	0800fc18 	.word	0x0800fc18
 800cff4:	0800fc44 	.word	0x0800fc44
 800cff8:	0800fc64 	.word	0x0800fc64
 800cffc:	0800fc8c 	.word	0x0800fc8c
 800d000:	0800fcb4 	.word	0x0800fcb4
 800d004:	0800fcdc 	.word	0x0800fcdc
 800d008:	0800fd04 	.word	0x0800fd04
 800d00c:	0800fd24 	.word	0x0800fd24

0800d010 <USART2_Callback>:

volatile uint8_t uart2_Buffer[TX_BUFF_SIZE] = { 0 };

/* Usart2 IRQ handler */
void USART2_Callback(void)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0

	/* Check if RXNE flag high */
	if ((USART2->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 800d016:	4b14      	ldr	r3, [pc, #80]	; (800d068 <USART2_Callback+0x58>)
 800d018:	69db      	ldr	r3, [r3, #28]
 800d01a:	f003 0320 	and.w	r3, r3, #32
 800d01e:	2b20      	cmp	r3, #32
 800d020:	d11c      	bne.n	800d05c <USART2_Callback+0x4c>
	{
		/* Read Data Register on USART1 (Sara module) */
		uint8_t data = USART2->RDR;
 800d022:	4b11      	ldr	r3, [pc, #68]	; (800d068 <USART2_Callback+0x58>)
 800d024:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d026:	b29b      	uxth	r3, r3
 800d028:	71fb      	strb	r3, [r7, #7]

		/* Disable \r and \n from buffer */
		if (data != '\r')
 800d02a:	79fb      	ldrb	r3, [r7, #7]
 800d02c:	2b0d      	cmp	r3, #13
 800d02e:	d00e      	beq.n	800d04e <USART2_Callback+0x3e>
		{
			if (data != '\n')
 800d030:	79fb      	ldrb	r3, [r7, #7]
 800d032:	2b0a      	cmp	r3, #10
 800d034:	d00b      	beq.n	800d04e <USART2_Callback+0x3e>
			{
				/* Add data to Buffer */
				uart2_Buffer[uart2.Head] = data;
 800d036:	4b0d      	ldr	r3, [pc, #52]	; (800d06c <USART2_Callback+0x5c>)
 800d038:	881b      	ldrh	r3, [r3, #0]
 800d03a:	4619      	mov	r1, r3
 800d03c:	4a0c      	ldr	r2, [pc, #48]	; (800d070 <USART2_Callback+0x60>)
 800d03e:	79fb      	ldrb	r3, [r7, #7]
 800d040:	5453      	strb	r3, [r2, r1]
				uart2.Head++;
 800d042:	4b0a      	ldr	r3, [pc, #40]	; (800d06c <USART2_Callback+0x5c>)
 800d044:	881b      	ldrh	r3, [r3, #0]
 800d046:	3301      	adds	r3, #1
 800d048:	b29a      	uxth	r2, r3
 800d04a:	4b08      	ldr	r3, [pc, #32]	; (800d06c <USART2_Callback+0x5c>)
 800d04c:	801a      	strh	r2, [r3, #0]
			}
		}

		/* Overflow Safety */
		if (uart2.Head > TX_BUFF_SIZE - 1)
 800d04e:	4b07      	ldr	r3, [pc, #28]	; (800d06c <USART2_Callback+0x5c>)
 800d050:	881b      	ldrh	r3, [r3, #0]
 800d052:	2bff      	cmp	r3, #255	; 0xff
 800d054:	d902      	bls.n	800d05c <USART2_Callback+0x4c>
		{
			uart2.Head = 0;
 800d056:	4b05      	ldr	r3, [pc, #20]	; (800d06c <USART2_Callback+0x5c>)
 800d058:	2200      	movs	r2, #0
 800d05a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	40004400 	.word	0x40004400
 800d06c:	2000bb58 	.word	0x2000bb58
 800d070:	20000210 	.word	0x20000210

0800d074 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	69db      	ldr	r3, [r3, #28]
 800d080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d084:	2b80      	cmp	r3, #128	; 0x80
 800d086:	d101      	bne.n	800d08c <LL_USART_IsActiveFlag_TXE+0x18>
 800d088:	2301      	movs	r3, #1
 800d08a:	e000      	b.n	800d08e <LL_USART_IsActiveFlag_TXE+0x1a>
 800d08c:	2300      	movs	r3, #0
}
 800d08e:	4618      	mov	r0, r3
 800d090:	370c      	adds	r7, #12
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr

0800d09a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800d09a:	b480      	push	{r7}
 800d09c:	b083      	sub	sp, #12
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800d0a6:	78fb      	ldrb	r3, [r7, #3]
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800d0ae:	bf00      	nop
 800d0b0:	370c      	adds	r7, #12
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
	...

0800d0bc <_write>:
				 printf("string\r\n");
				 or
				 printf("Variable 1: %d\r\n, var1); to get the variable printed
--------------------------------------------------------------------------------------------------*/
int _write(int file, char *data, int len)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b086      	sub	sp, #24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d00a      	beq.n	800d0e4 <_write+0x28>
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d007      	beq.n	800d0e4 <_write+0x28>
	{
		errno = EBADF;
 800d0d4:	f002 f8c8 	bl	800f268 <__errno>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	2309      	movs	r3, #9
 800d0dc:	6013      	str	r3, [r2, #0]
		return -1;
 800d0de:	f04f 33ff 	mov.w	r3, #4294967295
 800d0e2:	e01c      	b.n	800d11e <_write+0x62>
	}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	617b      	str	r3, [r7, #20]
 800d0e8:	e014      	b.n	800d114 <_write+0x58>
	{
		while (!LL_USART_IsActiveFlag_TXE(USART_Generic))
 800d0ea:	bf00      	nop
 800d0ec:	4b0e      	ldr	r3, [pc, #56]	; (800d128 <_write+0x6c>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7ff ffbf 	bl	800d074 <LL_USART_IsActiveFlag_TXE>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d0f7      	beq.n	800d0ec <_write+0x30>
		{
		}

		LL_USART_TransmitData8(USART_Generic, *data++);
 800d0fc:	4b0a      	ldr	r3, [pc, #40]	; (800d128 <_write+0x6c>)
 800d0fe:	6818      	ldr	r0, [r3, #0]
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	1c5a      	adds	r2, r3, #1
 800d104:	60ba      	str	r2, [r7, #8]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	4619      	mov	r1, r3
 800d10a:	f7ff ffc6 	bl	800d09a <LL_USART_TransmitData8>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	3301      	adds	r3, #1
 800d112:	617b      	str	r3, [r7, #20]
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	429a      	cmp	r2, r3
 800d11a:	dbe6      	blt.n	800d0ea <_write+0x2e>
	/* Wait for TC flag to be raised for last char */
//	while (!LL_USART_IsActiveFlag_TC(LPUART1))
//	{
//	}

	return 0;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3718      	adds	r7, #24
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	20000110 	.word	0x20000110

0800d12c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800d132:	463b      	mov	r3, r7
 800d134:	2200      	movs	r2, #0
 800d136:	601a      	str	r2, [r3, #0]
 800d138:	605a      	str	r2, [r3, #4]
 800d13a:	609a      	str	r2, [r3, #8]
 800d13c:	60da      	str	r2, [r3, #12]
 800d13e:	611a      	str	r2, [r3, #16]
 800d140:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800d142:	4b29      	ldr	r3, [pc, #164]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d144:	4a29      	ldr	r2, [pc, #164]	; (800d1ec <MX_ADC1_Init+0xc0>)
 800d146:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800d148:	4b27      	ldr	r3, [pc, #156]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d14a:	2200      	movs	r2, #0
 800d14c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d14e:	4b26      	ldr	r3, [pc, #152]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d150:	2200      	movs	r2, #0
 800d152:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d154:	4b24      	ldr	r3, [pc, #144]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d156:	2200      	movs	r2, #0
 800d158:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800d15a:	4b23      	ldr	r3, [pc, #140]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d160:	4b21      	ldr	r3, [pc, #132]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d162:	2204      	movs	r2, #4
 800d164:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800d166:	4b20      	ldr	r3, [pc, #128]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d168:	2200      	movs	r2, #0
 800d16a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800d16c:	4b1e      	ldr	r3, [pc, #120]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d16e:	2200      	movs	r2, #0
 800d170:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800d172:	4b1d      	ldr	r3, [pc, #116]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d174:	2201      	movs	r2, #1
 800d176:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d178:	4b1b      	ldr	r3, [pc, #108]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d180:	4b19      	ldr	r3, [pc, #100]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d182:	2200      	movs	r2, #0
 800d184:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d186:	4b18      	ldr	r3, [pc, #96]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d188:	2200      	movs	r2, #0
 800d18a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800d18c:	4b16      	ldr	r3, [pc, #88]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d18e:	2200      	movs	r2, #0
 800d190:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800d194:	4b14      	ldr	r3, [pc, #80]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d196:	2200      	movs	r2, #0
 800d198:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800d19a:	4b13      	ldr	r3, [pc, #76]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d1a2:	4811      	ldr	r0, [pc, #68]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d1a4:	f7f3 faac 	bl	8000700 <HAL_ADC_Init>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800d1ae:	f000 fce7 	bl	800db80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800d1b2:	4b0f      	ldr	r3, [pc, #60]	; (800d1f0 <MX_ADC1_Init+0xc4>)
 800d1b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800d1b6:	2306      	movs	r3, #6
 800d1b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800d1be:	237f      	movs	r3, #127	; 0x7f
 800d1c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800d1c2:	2304      	movs	r3, #4
 800d1c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d1ca:	463b      	mov	r3, r7
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	4806      	ldr	r0, [pc, #24]	; (800d1e8 <MX_ADC1_Init+0xbc>)
 800d1d0:	f7f3 fcd8 	bl	8000b84 <HAL_ADC_ConfigChannel>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d001      	beq.n	800d1de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800d1da:	f000 fcd1 	bl	800db80 <Error_Handler>
  }

}
 800d1de:	bf00      	nop
 800d1e0:	3718      	adds	r7, #24
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	2000bb7c 	.word	0x2000bb7c
 800d1ec:	50040000 	.word	0x50040000
 800d1f0:	10c00010 	.word	0x10c00010

0800d1f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08a      	sub	sp, #40	; 0x28
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1fc:	f107 0314 	add.w	r3, r7, #20
 800d200:	2200      	movs	r2, #0
 800d202:	601a      	str	r2, [r3, #0]
 800d204:	605a      	str	r2, [r3, #4]
 800d206:	609a      	str	r2, [r3, #8]
 800d208:	60da      	str	r2, [r3, #12]
 800d20a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a15      	ldr	r2, [pc, #84]	; (800d268 <HAL_ADC_MspInit+0x74>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d123      	bne.n	800d25e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800d216:	4b15      	ldr	r3, [pc, #84]	; (800d26c <HAL_ADC_MspInit+0x78>)
 800d218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d21a:	4a14      	ldr	r2, [pc, #80]	; (800d26c <HAL_ADC_MspInit+0x78>)
 800d21c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d220:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d222:	4b12      	ldr	r3, [pc, #72]	; (800d26c <HAL_ADC_MspInit+0x78>)
 800d224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d22a:	613b      	str	r3, [r7, #16]
 800d22c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d22e:	4b0f      	ldr	r3, [pc, #60]	; (800d26c <HAL_ADC_MspInit+0x78>)
 800d230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d232:	4a0e      	ldr	r2, [pc, #56]	; (800d26c <HAL_ADC_MspInit+0x78>)
 800d234:	f043 0304 	orr.w	r3, r3, #4
 800d238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d23a:	4b0c      	ldr	r3, [pc, #48]	; (800d26c <HAL_ADC_MspInit+0x78>)
 800d23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d23e:	f003 0304 	and.w	r3, r3, #4
 800d242:	60fb      	str	r3, [r7, #12]
 800d244:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_Revision_Pin;
 800d246:	2308      	movs	r3, #8
 800d248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800d24a:	230b      	movs	r3, #11
 800d24c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d24e:	2300      	movs	r3, #0
 800d250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Revision_GPIO_Port, &GPIO_InitStruct);
 800d252:	f107 0314 	add.w	r3, r7, #20
 800d256:	4619      	mov	r1, r3
 800d258:	4805      	ldr	r0, [pc, #20]	; (800d270 <HAL_ADC_MspInit+0x7c>)
 800d25a:	f7f4 fbd5 	bl	8001a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800d25e:	bf00      	nop
 800d260:	3728      	adds	r7, #40	; 0x28
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	50040000 	.word	0x50040000
 800d26c:	40021000 	.word	0x40021000
 800d270:	48000800 	.word	0x48000800

0800d274 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d27e:	f000 f879 	bl	800d374 <BSP_SD_IsDetected>
 800d282:	4603      	mov	r3, r0
 800d284:	2b01      	cmp	r3, #1
 800d286:	d001      	beq.n	800d28c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d288:	2302      	movs	r3, #2
 800d28a:	e012      	b.n	800d2b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d28c:	480b      	ldr	r0, [pc, #44]	; (800d2bc <BSP_SD_Init+0x48>)
 800d28e:	f7f8 fd6b 	bl	8005d68 <HAL_SD_Init>
 800d292:	4603      	mov	r3, r0
 800d294:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d296:	79fb      	ldrb	r3, [r7, #7]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d109      	bne.n	800d2b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d29c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d2a0:	4806      	ldr	r0, [pc, #24]	; (800d2bc <BSP_SD_Init+0x48>)
 800d2a2:	f7f9 fb7d 	bl	80069a0 <HAL_SD_ConfigWideBusOperation>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d2b0:	79fb      	ldrb	r3, [r7, #7]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	2000c1c0 	.word	0x2000c1c0

0800d2c0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b088      	sub	sp, #32
 800d2c4:	af02      	add	r7, sp, #8
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
 800d2cc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	68f9      	ldr	r1, [r7, #12]
 800d2dc:	4806      	ldr	r0, [pc, #24]	; (800d2f8 <BSP_SD_ReadBlocks+0x38>)
 800d2de:	f7f8 fe2b 	bl	8005f38 <HAL_SD_ReadBlocks>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3718      	adds	r7, #24
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	2000c1c0 	.word	0x2000c1c0

0800d2fc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b088      	sub	sp, #32
 800d300:	af02      	add	r7, sp, #8
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d30a:	2300      	movs	r3, #0
 800d30c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	68f9      	ldr	r1, [r7, #12]
 800d318:	4806      	ldr	r0, [pc, #24]	; (800d334 <BSP_SD_WriteBlocks+0x38>)
 800d31a:	f7f8 ffeb 	bl	80062f4 <HAL_SD_WriteBlocks>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d001      	beq.n	800d328 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d324:	2301      	movs	r3, #1
 800d326:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d328:	7dfb      	ldrb	r3, [r7, #23]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3718      	adds	r7, #24
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	2000c1c0 	.word	0x2000c1c0

0800d338 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d33c:	4805      	ldr	r0, [pc, #20]	; (800d354 <BSP_SD_GetCardState+0x1c>)
 800d33e:	f7f9 fbc5 	bl	8006acc <HAL_SD_GetCardState>
 800d342:	4603      	mov	r3, r0
 800d344:	2b04      	cmp	r3, #4
 800d346:	bf14      	ite	ne
 800d348:	2301      	movne	r3, #1
 800d34a:	2300      	moveq	r3, #0
 800d34c:	b2db      	uxtb	r3, r3
}
 800d34e:	4618      	mov	r0, r3
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	2000c1c0 	.word	0x2000c1c0

0800d358 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d360:	6879      	ldr	r1, [r7, #4]
 800d362:	4803      	ldr	r0, [pc, #12]	; (800d370 <BSP_SD_GetCardInfo+0x18>)
 800d364:	f7f9 faf0 	bl	8006948 <HAL_SD_GetCardInfo>
}
 800d368:	bf00      	nop
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	2000c1c0 	.word	0x2000c1c0

0800d374 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d37a:	2301      	movs	r3, #1
 800d37c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d37e:	f000 f85f 	bl	800d440 <BSP_PlatformIsDetected>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d101      	bne.n	800d38c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d388:	2300      	movs	r3, #0
 800d38a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d38c:	79fb      	ldrb	r3, [r7, #7]
 800d38e:	b2db      	uxtb	r3, r3
}
 800d390:	4618      	mov	r0, r3
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800d39c:	4b0d      	ldr	r3, [pc, #52]	; (800d3d4 <MX_CRC_Init+0x3c>)
 800d39e:	4a0e      	ldr	r2, [pc, #56]	; (800d3d8 <MX_CRC_Init+0x40>)
 800d3a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d3a2:	4b0c      	ldr	r3, [pc, #48]	; (800d3d4 <MX_CRC_Init+0x3c>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800d3a8:	4b0a      	ldr	r3, [pc, #40]	; (800d3d4 <MX_CRC_Init+0x3c>)
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800d3ae:	4b09      	ldr	r3, [pc, #36]	; (800d3d4 <MX_CRC_Init+0x3c>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800d3b4:	4b07      	ldr	r3, [pc, #28]	; (800d3d4 <MX_CRC_Init+0x3c>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800d3ba:	4b06      	ldr	r3, [pc, #24]	; (800d3d4 <MX_CRC_Init+0x3c>)
 800d3bc:	2201      	movs	r2, #1
 800d3be:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800d3c0:	4804      	ldr	r0, [pc, #16]	; (800d3d4 <MX_CRC_Init+0x3c>)
 800d3c2:	f7f4 fa37 	bl	8001834 <HAL_CRC_Init>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800d3cc:	f000 fbd8 	bl	800db80 <Error_Handler>
  }

}
 800d3d0:	bf00      	nop
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	2000bbe4 	.word	0x2000bbe4
 800d3d8:	40023000 	.word	0x40023000

0800d3dc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b085      	sub	sp, #20
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4a0a      	ldr	r2, [pc, #40]	; (800d414 <HAL_CRC_MspInit+0x38>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d10b      	bne.n	800d406 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800d3ee:	4b0a      	ldr	r3, [pc, #40]	; (800d418 <HAL_CRC_MspInit+0x3c>)
 800d3f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3f2:	4a09      	ldr	r2, [pc, #36]	; (800d418 <HAL_CRC_MspInit+0x3c>)
 800d3f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d3f8:	6493      	str	r3, [r2, #72]	; 0x48
 800d3fa:	4b07      	ldr	r3, [pc, #28]	; (800d418 <HAL_CRC_MspInit+0x3c>)
 800d3fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d402:	60fb      	str	r3, [r7, #12]
 800d404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800d406:	bf00      	nop
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	40023000 	.word	0x40023000
 800d418:	40021000 	.word	0x40021000

0800d41c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d420:	4904      	ldr	r1, [pc, #16]	; (800d434 <MX_FATFS_Init+0x18>)
 800d422:	4805      	ldr	r0, [pc, #20]	; (800d438 <MX_FATFS_Init+0x1c>)
 800d424:	f7ff fc06 	bl	800cc34 <FATFS_LinkDriver>
 800d428:	4603      	mov	r3, r0
 800d42a:	461a      	mov	r2, r3
 800d42c:	4b03      	ldr	r3, [pc, #12]	; (800d43c <MX_FATFS_Init+0x20>)
 800d42e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d430:	bf00      	nop
 800d432:	bd80      	pop	{r7, pc}
 800d434:	2000bc0c 	.word	0x2000bc0c
 800d438:	0800fdd4 	.word	0x0800fdd4
 800d43c:	2000bc08 	.word	0x2000bc08

0800d440 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d446:	2301      	movs	r3, #1
 800d448:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d44a:	2180      	movs	r1, #128	; 0x80
 800d44c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d450:	f7f4 fc54 	bl	8001cfc <HAL_GPIO_ReadPin>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d45a:	2300      	movs	r3, #0
 800d45c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d45e:	79fb      	ldrb	r3, [r7, #7]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b08a      	sub	sp, #40	; 0x28
 800d46c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d46e:	f107 0314 	add.w	r3, r7, #20
 800d472:	2200      	movs	r2, #0
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	605a      	str	r2, [r3, #4]
 800d478:	609a      	str	r2, [r3, #8]
 800d47a:	60da      	str	r2, [r3, #12]
 800d47c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d47e:	4b67      	ldr	r3, [pc, #412]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d482:	4a66      	ldr	r2, [pc, #408]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d484:	f043 0304 	orr.w	r3, r3, #4
 800d488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d48a:	4b64      	ldr	r3, [pc, #400]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d48e:	f003 0304 	and.w	r3, r3, #4
 800d492:	613b      	str	r3, [r7, #16]
 800d494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d496:	4b61      	ldr	r3, [pc, #388]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d49a:	4a60      	ldr	r2, [pc, #384]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d4a2:	4b5e      	ldr	r3, [pc, #376]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d4a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4aa:	60fb      	str	r3, [r7, #12]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4ae:	4b5b      	ldr	r3, [pc, #364]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4b2:	4a5a      	ldr	r2, [pc, #360]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d4b4:	f043 0301 	orr.w	r3, r3, #1
 800d4b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d4ba:	4b58      	ldr	r3, [pc, #352]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	60bb      	str	r3, [r7, #8]
 800d4c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d4c6:	4b55      	ldr	r3, [pc, #340]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d4c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ca:	4a54      	ldr	r2, [pc, #336]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d4cc:	f043 0302 	orr.w	r3, r3, #2
 800d4d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d4d2:	4b52      	ldr	r3, [pc, #328]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4d6:	f003 0302 	and.w	r3, r3, #2
 800d4da:	607b      	str	r3, [r7, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d4de:	4b4f      	ldr	r3, [pc, #316]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d4e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4e2:	4a4e      	ldr	r2, [pc, #312]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d4e4:	f043 0308 	orr.w	r3, r3, #8
 800d4e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d4ea:	4b4c      	ldr	r3, [pc, #304]	; (800d61c <MX_GPIO_Init+0x1b4>)
 800d4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ee:	f003 0308 	and.w	r3, r3, #8
 800d4f2:	603b      	str	r3, [r7, #0]
 800d4f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Spectrum_Enable_Pin|LED_Green_Pin|LED_Red_Pin|Revision_Enable_Pin
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f242 01c7 	movw	r1, #8391	; 0x20c7
 800d4fc:	4848      	ldr	r0, [pc, #288]	; (800d620 <MX_GPIO_Init+0x1b8>)
 800d4fe:	f7f4 fc15 	bl	8001d2c <HAL_GPIO_WritePin>
                          |Screen_DC_Pin|Screen_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Radio_Enable_Pin|Sara_Reset_Pin|Sara_Power_On_Pin|Screen_Busy_Pin
 800d502:	2200      	movs	r2, #0
 800d504:	f248 1170 	movw	r1, #33136	; 0x8170
 800d508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d50c:	f7f4 fc0e 	bl	8001d2c <HAL_GPIO_WritePin>
                          |SD_Enable_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Screen_Enable_Pin|Acceleromater_Enable_Pin|SPI_CS_Pin|Sensor_Enable_Pin, GPIO_PIN_RESET);
 800d510:	2200      	movs	r2, #0
 800d512:	f241 0126 	movw	r1, #4134	; 0x1026
 800d516:	4843      	ldr	r0, [pc, #268]	; (800d624 <MX_GPIO_Init+0x1bc>)
 800d518:	f7f4 fc08 	bl	8001d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = Spectrum_Enable_Pin|LED_Green_Pin|LED_Red_Pin|Revision_Enable_Pin
 800d51c:	f242 03c7 	movw	r3, #8391	; 0x20c7
 800d520:	617b      	str	r3, [r7, #20]
                          |Screen_DC_Pin|Screen_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d522:	2301      	movs	r3, #1
 800d524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d526:	2300      	movs	r3, #0
 800d528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d52a:	2300      	movs	r3, #0
 800d52c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d52e:	f107 0314 	add.w	r3, r7, #20
 800d532:	4619      	mov	r1, r3
 800d534:	483a      	ldr	r0, [pc, #232]	; (800d620 <MX_GPIO_Init+0x1b8>)
 800d536:	f7f4 fa67 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SendData_EXTI0_Pin;
 800d53a:	2301      	movs	r3, #1
 800d53c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d53e:	4b3a      	ldr	r3, [pc, #232]	; (800d628 <MX_GPIO_Init+0x1c0>)
 800d540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d542:	2300      	movs	r3, #0
 800d544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SendData_EXTI0_GPIO_Port, &GPIO_InitStruct);
 800d546:	f107 0314 	add.w	r3, r7, #20
 800d54a:	4619      	mov	r1, r3
 800d54c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d550:	f7f4 fa5a 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Radio_NetStatus_Pin|SD_Detect_Pin;
 800d554:	2382      	movs	r3, #130	; 0x82
 800d556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d558:	2300      	movs	r3, #0
 800d55a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d55c:	2300      	movs	r3, #0
 800d55e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d560:	f107 0314 	add.w	r3, r7, #20
 800d564:	4619      	mov	r1, r3
 800d566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d56a:	f7f4 fa4d 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Radio_Enable_Pin|Sara_Reset_Pin|Sara_Power_On_Pin|Screen_Busy_Pin
 800d56e:	f248 1370 	movw	r3, #33136	; 0x8170
 800d572:	617b      	str	r3, [r7, #20]
                          |SD_Enable_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d574:	2301      	movs	r3, #1
 800d576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d578:	2300      	movs	r3, #0
 800d57a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d57c:	2300      	movs	r3, #0
 800d57e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d580:	f107 0314 	add.w	r3, r7, #20
 800d584:	4619      	mov	r1, r3
 800d586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d58a:	f7f4 fa3d 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d58e:	2301      	movs	r3, #1
 800d590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d592:	2303      	movs	r3, #3
 800d594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d596:	2300      	movs	r3, #0
 800d598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d59a:	f107 0314 	add.w	r3, r7, #20
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4820      	ldr	r0, [pc, #128]	; (800d624 <MX_GPIO_Init+0x1bc>)
 800d5a2:	f7f4 fa31 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Screen_Enable_Pin|Acceleromater_Enable_Pin|SPI_CS_Pin|Sensor_Enable_Pin;
 800d5a6:	f241 0326 	movw	r3, #4134	; 0x1026
 800d5aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d5b8:	f107 0314 	add.w	r3, r7, #20
 800d5bc:	4619      	mov	r1, r3
 800d5be:	4819      	ldr	r0, [pc, #100]	; (800d624 <MX_GPIO_Init+0x1bc>)
 800d5c0:	f7f4 fa22 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_Detect_EXTI4_Pin;
 800d5c4:	2310      	movs	r3, #16
 800d5c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d5c8:	4b18      	ldr	r3, [pc, #96]	; (800d62c <MX_GPIO_Init+0x1c4>)
 800d5ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_Detect_EXTI4_GPIO_Port, &GPIO_InitStruct);
 800d5d0:	f107 0314 	add.w	r3, r7, #20
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	4813      	ldr	r0, [pc, #76]	; (800d624 <MX_GPIO_Init+0x1bc>)
 800d5d8:	f7f4 fa16 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d5dc:	2308      	movs	r3, #8
 800d5de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d5e0:	2303      	movs	r3, #3
 800d5e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d5e8:	f107 0314 	add.w	r3, r7, #20
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	4810      	ldr	r0, [pc, #64]	; (800d630 <MX_GPIO_Init+0x1c8>)
 800d5f0:	f7f4 fa0a 	bl	8001a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	2006      	movs	r0, #6
 800d5fa:	f7f4 f8e4 	bl	80017c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800d5fe:	2006      	movs	r0, #6
 800d600:	f7f4 f8fd 	bl	80017fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800d604:	2200      	movs	r2, #0
 800d606:	2100      	movs	r1, #0
 800d608:	200a      	movs	r0, #10
 800d60a:	f7f4 f8dc 	bl	80017c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800d60e:	200a      	movs	r0, #10
 800d610:	f7f4 f8f5 	bl	80017fe <HAL_NVIC_EnableIRQ>

}
 800d614:	bf00      	nop
 800d616:	3728      	adds	r7, #40	; 0x28
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	40021000 	.word	0x40021000
 800d620:	48000800 	.word	0x48000800
 800d624:	48000400 	.word	0x48000400
 800d628:	10210000 	.word	0x10210000
 800d62c:	10110000 	.word	0x10110000
 800d630:	48001c00 	.word	0x48001c00

0800d634 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800d638:	4b1b      	ldr	r3, [pc, #108]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d63a:	4a1c      	ldr	r2, [pc, #112]	; (800d6ac <MX_I2C1_Init+0x78>)
 800d63c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800d63e:	4b1a      	ldr	r3, [pc, #104]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d640:	4a1b      	ldr	r2, [pc, #108]	; (800d6b0 <MX_I2C1_Init+0x7c>)
 800d642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800d644:	4b18      	ldr	r3, [pc, #96]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d646:	2200      	movs	r2, #0
 800d648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d64a:	4b17      	ldr	r3, [pc, #92]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d64c:	2201      	movs	r2, #1
 800d64e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d650:	4b15      	ldr	r3, [pc, #84]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d652:	2200      	movs	r2, #0
 800d654:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800d656:	4b14      	ldr	r3, [pc, #80]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d658:	2200      	movs	r2, #0
 800d65a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d65c:	4b12      	ldr	r3, [pc, #72]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d65e:	2200      	movs	r2, #0
 800d660:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d662:	4b11      	ldr	r3, [pc, #68]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d664:	2200      	movs	r2, #0
 800d666:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d668:	4b0f      	ldr	r3, [pc, #60]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d66e:	480e      	ldr	r0, [pc, #56]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d670:	f7f4 fb97 	bl	8001da2 <HAL_I2C_Init>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d001      	beq.n	800d67e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800d67a:	f000 fa81 	bl	800db80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800d67e:	2100      	movs	r1, #0
 800d680:	4809      	ldr	r0, [pc, #36]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d682:	f7f4 fc1d 	bl	8001ec0 <HAL_I2CEx_ConfigAnalogFilter>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800d68c:	f000 fa78 	bl	800db80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800d690:	2100      	movs	r1, #0
 800d692:	4805      	ldr	r0, [pc, #20]	; (800d6a8 <MX_I2C1_Init+0x74>)
 800d694:	f7f4 fc5f 	bl	8001f56 <HAL_I2CEx_ConfigDigitalFilter>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800d69e:	f000 fa6f 	bl	800db80 <Error_Handler>
  }

}
 800d6a2:	bf00      	nop
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	2000c0bc 	.word	0x2000c0bc
 800d6ac:	40005400 	.word	0x40005400
 800d6b0:	00707cbb 	.word	0x00707cbb

0800d6b4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800d6b8:	4b1b      	ldr	r3, [pc, #108]	; (800d728 <MX_I2C2_Init+0x74>)
 800d6ba:	4a1c      	ldr	r2, [pc, #112]	; (800d72c <MX_I2C2_Init+0x78>)
 800d6bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800d6be:	4b1a      	ldr	r3, [pc, #104]	; (800d728 <MX_I2C2_Init+0x74>)
 800d6c0:	4a1b      	ldr	r2, [pc, #108]	; (800d730 <MX_I2C2_Init+0x7c>)
 800d6c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800d6c4:	4b18      	ldr	r3, [pc, #96]	; (800d728 <MX_I2C2_Init+0x74>)
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d6ca:	4b17      	ldr	r3, [pc, #92]	; (800d728 <MX_I2C2_Init+0x74>)
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d6d0:	4b15      	ldr	r3, [pc, #84]	; (800d728 <MX_I2C2_Init+0x74>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800d6d6:	4b14      	ldr	r3, [pc, #80]	; (800d728 <MX_I2C2_Init+0x74>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d6dc:	4b12      	ldr	r3, [pc, #72]	; (800d728 <MX_I2C2_Init+0x74>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d6e2:	4b11      	ldr	r3, [pc, #68]	; (800d728 <MX_I2C2_Init+0x74>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d6e8:	4b0f      	ldr	r3, [pc, #60]	; (800d728 <MX_I2C2_Init+0x74>)
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800d6ee:	480e      	ldr	r0, [pc, #56]	; (800d728 <MX_I2C2_Init+0x74>)
 800d6f0:	f7f4 fb57 	bl	8001da2 <HAL_I2C_Init>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800d6fa:	f000 fa41 	bl	800db80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800d6fe:	2100      	movs	r1, #0
 800d700:	4809      	ldr	r0, [pc, #36]	; (800d728 <MX_I2C2_Init+0x74>)
 800d702:	f7f4 fbdd 	bl	8001ec0 <HAL_I2CEx_ConfigAnalogFilter>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800d70c:	f000 fa38 	bl	800db80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800d710:	2100      	movs	r1, #0
 800d712:	4805      	ldr	r0, [pc, #20]	; (800d728 <MX_I2C2_Init+0x74>)
 800d714:	f7f4 fc1f 	bl	8001f56 <HAL_I2CEx_ConfigDigitalFilter>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800d71e:	f000 fa2f 	bl	800db80 <Error_Handler>
  }

}
 800d722:	bf00      	nop
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	2000c108 	.word	0x2000c108
 800d72c:	40005800 	.word	0x40005800
 800d730:	00707cbb 	.word	0x00707cbb

0800d734 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	af00      	add	r7, sp, #0

  hi2c4.Instance = I2C4;
 800d738:	4b1b      	ldr	r3, [pc, #108]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d73a:	4a1c      	ldr	r2, [pc, #112]	; (800d7ac <MX_I2C4_Init+0x78>)
 800d73c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 800d73e:	4b1a      	ldr	r3, [pc, #104]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d740:	4a1b      	ldr	r2, [pc, #108]	; (800d7b0 <MX_I2C4_Init+0x7c>)
 800d742:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800d744:	4b18      	ldr	r3, [pc, #96]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d746:	2200      	movs	r2, #0
 800d748:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d74a:	4b17      	ldr	r3, [pc, #92]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d74c:	2201      	movs	r2, #1
 800d74e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d750:	4b15      	ldr	r3, [pc, #84]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d752:	2200      	movs	r2, #0
 800d754:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800d756:	4b14      	ldr	r3, [pc, #80]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d758:	2200      	movs	r2, #0
 800d75a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d75c:	4b12      	ldr	r3, [pc, #72]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d75e:	2200      	movs	r2, #0
 800d760:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d762:	4b11      	ldr	r3, [pc, #68]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d764:	2200      	movs	r2, #0
 800d766:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d768:	4b0f      	ldr	r3, [pc, #60]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800d76e:	480e      	ldr	r0, [pc, #56]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d770:	f7f4 fb17 	bl	8001da2 <HAL_I2C_Init>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800d77a:	f000 fa01 	bl	800db80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800d77e:	2100      	movs	r1, #0
 800d780:	4809      	ldr	r0, [pc, #36]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d782:	f7f4 fb9d 	bl	8001ec0 <HAL_I2CEx_ConfigAnalogFilter>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d001      	beq.n	800d790 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800d78c:	f000 f9f8 	bl	800db80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800d790:	2100      	movs	r1, #0
 800d792:	4805      	ldr	r0, [pc, #20]	; (800d7a8 <MX_I2C4_Init+0x74>)
 800d794:	f7f4 fbdf 	bl	8001f56 <HAL_I2CEx_ConfigDigitalFilter>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d001      	beq.n	800d7a2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800d79e:	f000 f9ef 	bl	800db80 <Error_Handler>
  }

}
 800d7a2:	bf00      	nop
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	2000c070 	.word	0x2000c070
 800d7ac:	40008400 	.word	0x40008400
 800d7b0:	00707cbb 	.word	0x00707cbb

0800d7b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b08e      	sub	sp, #56	; 0x38
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	605a      	str	r2, [r3, #4]
 800d7c6:	609a      	str	r2, [r3, #8]
 800d7c8:	60da      	str	r2, [r3, #12]
 800d7ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a46      	ldr	r2, [pc, #280]	; (800d8ec <HAL_I2C_MspInit+0x138>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d129      	bne.n	800d82a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d7d6:	4b46      	ldr	r3, [pc, #280]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7da:	4a45      	ldr	r2, [pc, #276]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d7dc:	f043 0302 	orr.w	r3, r3, #2
 800d7e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7e2:	4b43      	ldr	r3, [pc, #268]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d7e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7e6:	f003 0302 	and.w	r3, r3, #2
 800d7ea:	623b      	str	r3, [r7, #32]
 800d7ec:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800d7ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d7f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d7f4:	2312      	movs	r3, #18
 800d7f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7fc:	2303      	movs	r3, #3
 800d7fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d800:	2304      	movs	r3, #4
 800d802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d808:	4619      	mov	r1, r3
 800d80a:	483a      	ldr	r0, [pc, #232]	; (800d8f4 <HAL_I2C_MspInit+0x140>)
 800d80c:	f7f4 f8fc 	bl	8001a08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d810:	4b37      	ldr	r3, [pc, #220]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d814:	4a36      	ldr	r2, [pc, #216]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d816:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d81a:	6593      	str	r3, [r2, #88]	; 0x58
 800d81c:	4b34      	ldr	r3, [pc, #208]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d81e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d824:	61fb      	str	r3, [r7, #28]
 800d826:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800d828:	e05b      	b.n	800d8e2 <HAL_I2C_MspInit+0x12e>
  else if(i2cHandle->Instance==I2C2)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a32      	ldr	r2, [pc, #200]	; (800d8f8 <HAL_I2C_MspInit+0x144>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d129      	bne.n	800d888 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d834:	4b2e      	ldr	r3, [pc, #184]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d838:	4a2d      	ldr	r2, [pc, #180]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d83a:	f043 0302 	orr.w	r3, r3, #2
 800d83e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d840:	4b2b      	ldr	r3, [pc, #172]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d844:	f003 0302 	and.w	r3, r3, #2
 800d848:	61bb      	str	r3, [r7, #24]
 800d84a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800d84c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d852:	2312      	movs	r3, #18
 800d854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d856:	2301      	movs	r3, #1
 800d858:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d85a:	2303      	movs	r3, #3
 800d85c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800d85e:	2304      	movs	r3, #4
 800d860:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d866:	4619      	mov	r1, r3
 800d868:	4822      	ldr	r0, [pc, #136]	; (800d8f4 <HAL_I2C_MspInit+0x140>)
 800d86a:	f7f4 f8cd 	bl	8001a08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800d86e:	4b20      	ldr	r3, [pc, #128]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d872:	4a1f      	ldr	r2, [pc, #124]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d878:	6593      	str	r3, [r2, #88]	; 0x58
 800d87a:	4b1d      	ldr	r3, [pc, #116]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d87e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d882:	617b      	str	r3, [r7, #20]
 800d884:	697b      	ldr	r3, [r7, #20]
}
 800d886:	e02c      	b.n	800d8e2 <HAL_I2C_MspInit+0x12e>
  else if(i2cHandle->Instance==I2C4)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a1b      	ldr	r2, [pc, #108]	; (800d8fc <HAL_I2C_MspInit+0x148>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d127      	bne.n	800d8e2 <HAL_I2C_MspInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d892:	4b17      	ldr	r3, [pc, #92]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d896:	4a16      	ldr	r2, [pc, #88]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d898:	f043 0302 	orr.w	r3, r3, #2
 800d89c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d89e:	4b14      	ldr	r3, [pc, #80]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8a2:	f003 0302 	and.w	r3, r3, #2
 800d8a6:	613b      	str	r3, [r7, #16]
 800d8a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d8aa:	23c0      	movs	r3, #192	; 0xc0
 800d8ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d8ae:	2312      	movs	r3, #18
 800d8b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8b6:	2303      	movs	r3, #3
 800d8b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C4;
 800d8ba:	2305      	movs	r3, #5
 800d8bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	480b      	ldr	r0, [pc, #44]	; (800d8f4 <HAL_I2C_MspInit+0x140>)
 800d8c6:	f7f4 f89f 	bl	8001a08 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800d8ca:	4b09      	ldr	r3, [pc, #36]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d8cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ce:	4a08      	ldr	r2, [pc, #32]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d8d0:	f043 0302 	orr.w	r3, r3, #2
 800d8d4:	65d3      	str	r3, [r2, #92]	; 0x5c
 800d8d6:	4b06      	ldr	r3, [pc, #24]	; (800d8f0 <HAL_I2C_MspInit+0x13c>)
 800d8d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8da:	f003 0302 	and.w	r3, r3, #2
 800d8de:	60fb      	str	r3, [r7, #12]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
}
 800d8e2:	bf00      	nop
 800d8e4:	3738      	adds	r7, #56	; 0x38
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	40005400 	.word	0x40005400
 800d8f0:	40021000 	.word	0x40021000
 800d8f4:	48000400 	.word	0x48000400
 800d8f8:	40005800 	.word	0x40005800
 800d8fc:	40008400 	.word	0x40008400

0800d900 <MX_LPTIM2_Init>:

LPTIM_HandleTypeDef hlptim2;

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	af00      	add	r7, sp, #0

  hlptim2.Instance = LPTIM2;
 800d904:	4b12      	ldr	r3, [pc, #72]	; (800d950 <MX_LPTIM2_Init+0x50>)
 800d906:	4a13      	ldr	r2, [pc, #76]	; (800d954 <MX_LPTIM2_Init+0x54>)
 800d908:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800d90a:	4b11      	ldr	r3, [pc, #68]	; (800d950 <MX_LPTIM2_Init+0x50>)
 800d90c:	2200      	movs	r2, #0
 800d90e:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800d910:	4b0f      	ldr	r3, [pc, #60]	; (800d950 <MX_LPTIM2_Init+0x50>)
 800d912:	2200      	movs	r2, #0
 800d914:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800d916:	4b0e      	ldr	r3, [pc, #56]	; (800d950 <MX_LPTIM2_Init+0x50>)
 800d918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d91c:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800d91e:	4b0c      	ldr	r3, [pc, #48]	; (800d950 <MX_LPTIM2_Init+0x50>)
 800d920:	2200      	movs	r2, #0
 800d922:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800d924:	4b0a      	ldr	r3, [pc, #40]	; (800d950 <MX_LPTIM2_Init+0x50>)
 800d926:	2200      	movs	r2, #0
 800d928:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800d92a:	4b09      	ldr	r3, [pc, #36]	; (800d950 <MX_LPTIM2_Init+0x50>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800d930:	4b07      	ldr	r3, [pc, #28]	; (800d950 <MX_LPTIM2_Init+0x50>)
 800d932:	2200      	movs	r2, #0
 800d934:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800d936:	4b06      	ldr	r3, [pc, #24]	; (800d950 <MX_LPTIM2_Init+0x50>)
 800d938:	2200      	movs	r2, #0
 800d93a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800d93c:	4804      	ldr	r0, [pc, #16]	; (800d950 <MX_LPTIM2_Init+0x50>)
 800d93e:	f7f4 fb57 	bl	8001ff0 <HAL_LPTIM_Init>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 800d948:	f000 f91a 	bl	800db80 <Error_Handler>
  }

}
 800d94c:	bf00      	nop
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	2000c154 	.word	0x2000c154
 800d954:	40009400 	.word	0x40009400

0800d958 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM2)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a0a      	ldr	r2, [pc, #40]	; (800d990 <HAL_LPTIM_MspInit+0x38>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d10b      	bne.n	800d982 <HAL_LPTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN LPTIM2_MspInit 0 */

  /* USER CODE END LPTIM2_MspInit 0 */
    /* LPTIM2 clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800d96a:	4b0a      	ldr	r3, [pc, #40]	; (800d994 <HAL_LPTIM_MspInit+0x3c>)
 800d96c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d96e:	4a09      	ldr	r2, [pc, #36]	; (800d994 <HAL_LPTIM_MspInit+0x3c>)
 800d970:	f043 0320 	orr.w	r3, r3, #32
 800d974:	65d3      	str	r3, [r2, #92]	; 0x5c
 800d976:	4b07      	ldr	r3, [pc, #28]	; (800d994 <HAL_LPTIM_MspInit+0x3c>)
 800d978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d97a:	f003 0320 	and.w	r3, r3, #32
 800d97e:	60fb      	str	r3, [r7, #12]
 800d980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 800d982:	bf00      	nop
 800d984:	3714      	adds	r7, #20
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	40009400 	.word	0x40009400
 800d994:	40021000 	.word	0x40021000

0800d998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d99e:	f7f2 fc19 	bl	80001d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d9a2:	f000 f843 	bl	800da2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d9a6:	f7ff fd5f 	bl	800d468 <MX_GPIO_Init>
  MX_CRC_Init();
 800d9aa:	f7ff fcf5 	bl	800d398 <MX_CRC_Init>
  //MX_IWDG_Init();
  MX_SPI2_Init();
 800d9ae:	f000 fb3b 	bl	800e028 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800d9b2:	f000 fe71 	bl	800e698 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800d9b6:	f000 fecf 	bl	800e758 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800d9ba:	f000 ff2d 	bl	800e818 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800d9be:	f7ff fbb5 	bl	800d12c <MX_ADC1_Init>
  MX_I2C1_Init();
 800d9c2:	f7ff fe37 	bl	800d634 <MX_I2C1_Init>
  MX_I2C2_Init();
 800d9c6:	f7ff fe75 	bl	800d6b4 <MX_I2C2_Init>
  MX_I2C4_Init();
 800d9ca:	f7ff feb3 	bl	800d734 <MX_I2C4_Init>
  MX_RTC_Init();
 800d9ce:	f000 f913 	bl	800dbf8 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 800d9d2:	f000 faa7 	bl	800df24 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800d9d6:	f7ff fd21 	bl	800d41c <MX_FATFS_Init>
  MX_LPTIM2_Init();
 800d9da:	f7ff ff91 	bl	800d900 <MX_LPTIM2_Init>
  MX_TIM2_Init();
 800d9de:	f000 fcd1 	bl	800e384 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800d9e2:	f000 ff69 	bl	800e8b8 <MX_USB_DEVICE_Init>
  MX_RNG_Init();
 800d9e6:	f000 f8d3 	bl	800db90 <MX_RNG_Init>
   *
   *
   *
   * */

  uint8_t ResetCause = CheckResetCause();
 800d9ea:	f7ff f933 	bl	800cc54 <CheckResetCause>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	71fb      	strb	r3, [r7, #7]
  TRACE("[ResetCheck] - PASSED\r\n");
 800d9f2:	480c      	ldr	r0, [pc, #48]	; (800da24 <main+0x8c>)
 800d9f4:	f001 fd7e 	bl	800f4f4 <puts>

  while(RevisionControl_GetState() != REVISIONSTATE_DONE &&
 800d9f8:	e001      	b.n	800d9fe <main+0x66>
		  RevisionControl_GetState() != REVISIONSTATE_ERROR)
  {
	  RevisionControl_StateMachine();
 800d9fa:	f7ff fa3d 	bl	800ce78 <RevisionControl_StateMachine>
  while(RevisionControl_GetState() != REVISIONSTATE_DONE &&
 800d9fe:	f7ff f989 	bl	800cd14 <RevisionControl_GetState>
 800da02:	4603      	mov	r3, r0
 800da04:	2b07      	cmp	r3, #7
 800da06:	d004      	beq.n	800da12 <main+0x7a>
		  RevisionControl_GetState() != REVISIONSTATE_ERROR)
 800da08:	f7ff f984 	bl	800cd14 <RevisionControl_GetState>
 800da0c:	4603      	mov	r3, r0
  while(RevisionControl_GetState() != REVISIONSTATE_DONE &&
 800da0e:	2b08      	cmp	r3, #8
 800da10:	d1f3      	bne.n	800d9fa <main+0x62>
  }

  /* DISPLAY ALL INIT */

  TRACE("[Main] - Entering While-loop\r\n");
 800da12:	4805      	ldr	r0, [pc, #20]	; (800da28 <main+0x90>)
 800da14:	f001 fd6e 	bl	800f4f4 <puts>
//	  debugPrint("Testing DebugPrint - Print", debugLevel_Print);
//	  debugPrint("Testing DebugPrint - Info", debugLevel_Info);
//	  debugPrint("Testing DebugPrint - Warning", debugLevel_Warning);
//	  debugPrint("Testing DebugPrint - Error", debugLevel_Error);

	  HAL_Delay(300);
 800da18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800da1c:	f7f2 fc4e 	bl	80002bc <HAL_Delay>
 800da20:	e7fa      	b.n	800da18 <main+0x80>
 800da22:	bf00      	nop
 800da24:	0800fd54 	.word	0x0800fd54
 800da28:	0800fd6c 	.word	0x0800fd6c

0800da2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b0b0      	sub	sp, #192	; 0xc0
 800da30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800da32:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800da36:	2244      	movs	r2, #68	; 0x44
 800da38:	2100      	movs	r1, #0
 800da3a:	4618      	mov	r0, r3
 800da3c:	f001 fc4e 	bl	800f2dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800da40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800da44:	2200      	movs	r2, #0
 800da46:	601a      	str	r2, [r3, #0]
 800da48:	605a      	str	r2, [r3, #4]
 800da4a:	609a      	str	r2, [r3, #8]
 800da4c:	60da      	str	r2, [r3, #12]
 800da4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800da50:	463b      	mov	r3, r7
 800da52:	2268      	movs	r2, #104	; 0x68
 800da54:	2100      	movs	r1, #0
 800da56:	4618      	mov	r0, r3
 800da58:	f001 fc40 	bl	800f2dc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800da5c:	f7f5 feda 	bl	8003814 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800da60:	4b45      	ldr	r3, [pc, #276]	; (800db78 <SystemClock_Config+0x14c>)
 800da62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da66:	4a44      	ldr	r2, [pc, #272]	; (800db78 <SystemClock_Config+0x14c>)
 800da68:	f023 0318 	bic.w	r3, r3, #24
 800da6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 800da70:	230d      	movs	r3, #13
 800da72:	67fb      	str	r3, [r7, #124]	; 0x7c
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800da74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800da78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800da7c:	2301      	movs	r3, #1
 800da7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800da82:	2301      	movs	r3, #1
 800da84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800da88:	2302      	movs	r3, #2
 800da8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800da8e:	2303      	movs	r3, #3
 800da90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800da94:	2301      	movs	r3, #1
 800da96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 8;
 800da9a:	2308      	movs	r3, #8
 800da9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800daa0:	2307      	movs	r3, #7
 800daa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800daa6:	2302      	movs	r3, #2
 800daa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800daac:	2302      	movs	r3, #2
 800daae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800dab2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7f5 ff30 	bl	800391c <HAL_RCC_OscConfig>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d001      	beq.n	800dac6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800dac2:	f000 f85d 	bl	800db80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dac6:	230f      	movs	r3, #15
 800dac8:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800daca:	2303      	movs	r3, #3
 800dacc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800dace:	2300      	movs	r3, #0
 800dad0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800dad2:	2300      	movs	r3, #0
 800dad4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800dad6:	2300      	movs	r3, #0
 800dad8:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800dada:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dade:	2101      	movs	r1, #1
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7f6 fb3b 	bl	800415c <HAL_RCC_ClockConfig>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800daec:	f000 f848 	bl	800db80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800daf0:	4b22      	ldr	r3, [pc, #136]	; (800db7c <SystemClock_Config+0x150>)
 800daf2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_LPTIM2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800daf4:	2300      	movs	r3, #0
 800daf6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800daf8:	2300      	movs	r3, #0
 800dafa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800dafc:	2300      	movs	r3, #0
 800dafe:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800db00:	2300      	movs	r3, #0
 800db02:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800db04:	2300      	movs	r3, #0
 800db06:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800db08:	2300      	movs	r3, #0
 800db0a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 800db0c:	2300      	movs	r3, #0
 800db0e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800db10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db14:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800db16:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db1a:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800db1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800db20:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800db22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800db26:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800db28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800db2c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800db2e:	2303      	movs	r3, #3
 800db30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800db32:	2301      	movs	r3, #1
 800db34:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800db36:	230c      	movs	r3, #12
 800db38:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800db3a:	2307      	movs	r3, #7
 800db3c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800db3e:	2302      	movs	r3, #2
 800db40:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800db42:	2302      	movs	r3, #2
 800db44:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800db46:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800db4a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800db4c:	463b      	mov	r3, r7
 800db4e:	4618      	mov	r0, r3
 800db50:	f7f6 fd08 	bl	8004564 <HAL_RCCEx_PeriphCLKConfig>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d001      	beq.n	800db5e <SystemClock_Config+0x132>
  {
    Error_Handler();
 800db5a:	f000 f811 	bl	800db80 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800db5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800db62:	f7f5 fe75 	bl	8003850 <HAL_PWREx_ControlVoltageScaling>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d001      	beq.n	800db70 <SystemClock_Config+0x144>
  {
    Error_Handler();
 800db6c:	f000 f808 	bl	800db80 <Error_Handler>
  }
}
 800db70:	bf00      	nop
 800db72:	37c0      	adds	r7, #192	; 0xc0
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	40021000 	.word	0x40021000
 800db7c:	001e64c7 	.word	0x001e64c7

0800db80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800db80:	b480      	push	{r7}
 800db82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800db84:	bf00      	nop
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
	...

0800db90 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 800db94:	4b06      	ldr	r3, [pc, #24]	; (800dbb0 <MX_RNG_Init+0x20>)
 800db96:	4a07      	ldr	r2, [pc, #28]	; (800dbb4 <MX_RNG_Init+0x24>)
 800db98:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800db9a:	4805      	ldr	r0, [pc, #20]	; (800dbb0 <MX_RNG_Init+0x20>)
 800db9c:	f7f7 fd10 	bl	80055c0 <HAL_RNG_Init>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d001      	beq.n	800dbaa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800dba6:	f7ff ffeb 	bl	800db80 <Error_Handler>
  }

}
 800dbaa:	bf00      	nop
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	2000c18c 	.word	0x2000c18c
 800dbb4:	50060800 	.word	0x50060800

0800dbb8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b085      	sub	sp, #20
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a0a      	ldr	r2, [pc, #40]	; (800dbf0 <HAL_RNG_MspInit+0x38>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d10b      	bne.n	800dbe2 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800dbca:	4b0a      	ldr	r3, [pc, #40]	; (800dbf4 <HAL_RNG_MspInit+0x3c>)
 800dbcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbce:	4a09      	ldr	r2, [pc, #36]	; (800dbf4 <HAL_RNG_MspInit+0x3c>)
 800dbd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dbd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dbd6:	4b07      	ldr	r3, [pc, #28]	; (800dbf4 <HAL_RNG_MspInit+0x3c>)
 800dbd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800dbe2:	bf00      	nop
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr
 800dbee:	bf00      	nop
 800dbf0:	50060800 	.word	0x50060800
 800dbf4:	40021000 	.word	0x40021000

0800dbf8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b092      	sub	sp, #72	; 0x48
 800dbfc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800dbfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dc02:	2200      	movs	r2, #0
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	605a      	str	r2, [r3, #4]
 800dc08:	609a      	str	r2, [r3, #8]
 800dc0a:	60da      	str	r2, [r3, #12]
 800dc0c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800dc0e:	2300      	movs	r3, #0
 800dc10:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800dc12:	1d3b      	adds	r3, r7, #4
 800dc14:	222c      	movs	r2, #44	; 0x2c
 800dc16:	2100      	movs	r1, #0
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f001 fb5f 	bl	800f2dc <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800dc1e:	4b3f      	ldr	r3, [pc, #252]	; (800dd1c <MX_RTC_Init+0x124>)
 800dc20:	4a3f      	ldr	r2, [pc, #252]	; (800dd20 <MX_RTC_Init+0x128>)
 800dc22:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800dc24:	4b3d      	ldr	r3, [pc, #244]	; (800dd1c <MX_RTC_Init+0x124>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800dc2a:	4b3c      	ldr	r3, [pc, #240]	; (800dd1c <MX_RTC_Init+0x124>)
 800dc2c:	227f      	movs	r2, #127	; 0x7f
 800dc2e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800dc30:	4b3a      	ldr	r3, [pc, #232]	; (800dd1c <MX_RTC_Init+0x124>)
 800dc32:	22ff      	movs	r2, #255	; 0xff
 800dc34:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800dc36:	4b39      	ldr	r3, [pc, #228]	; (800dd1c <MX_RTC_Init+0x124>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800dc3c:	4b37      	ldr	r3, [pc, #220]	; (800dd1c <MX_RTC_Init+0x124>)
 800dc3e:	2200      	movs	r2, #0
 800dc40:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800dc42:	4b36      	ldr	r3, [pc, #216]	; (800dd1c <MX_RTC_Init+0x124>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800dc48:	4b34      	ldr	r3, [pc, #208]	; (800dd1c <MX_RTC_Init+0x124>)
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800dc4e:	4833      	ldr	r0, [pc, #204]	; (800dd1c <MX_RTC_Init+0x124>)
 800dc50:	f7f7 fd06 	bl	8005660 <HAL_RTC_Init>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d001      	beq.n	800dc5e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800dc5a:	f7ff ff91 	bl	800db80 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 800dc64:	2300      	movs	r3, #0
 800dc66:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800dc70:	2300      	movs	r3, #0
 800dc72:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800dc74:	2300      	movs	r3, #0
 800dc76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800dc78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	4619      	mov	r1, r3
 800dc80:	4826      	ldr	r0, [pc, #152]	; (800dd1c <MX_RTC_Init+0x124>)
 800dc82:	f7f7 fd68 	bl	8005756 <HAL_RTC_SetTime>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d001      	beq.n	800dc90 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800dc8c:	f7ff ff78 	bl	800db80 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800dc90:	2301      	movs	r3, #1
 800dc92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800dc96:	2301      	movs	r3, #1
 800dc98:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800dca8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dcac:	2201      	movs	r2, #1
 800dcae:	4619      	mov	r1, r3
 800dcb0:	481a      	ldr	r0, [pc, #104]	; (800dd1c <MX_RTC_Init+0x124>)
 800dcb2:	f7f7 fded 	bl	8005890 <HAL_RTC_SetDate>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d001      	beq.n	800dcc0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800dcbc:	f7ff ff60 	bl	800db80 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800dccc:	2300      	movs	r3, #0
 800dcce:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800dce0:	2300      	movs	r3, #0
 800dce2:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800dce4:	2301      	movs	r3, #1
 800dce6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800dcea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800dcf0:	1d3b      	adds	r3, r7, #4
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	4809      	ldr	r0, [pc, #36]	; (800dd1c <MX_RTC_Init+0x124>)
 800dcf8:	f7f7 fe51 	bl	800599e <HAL_RTC_SetAlarm>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d001      	beq.n	800dd06 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800dd02:	f7ff ff3d 	bl	800db80 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800dd06:	2301      	movs	r3, #1
 800dd08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_B;
 800dd0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd10:	62fb      	str	r3, [r7, #44]	; 0x2c

}
 800dd12:	bf00      	nop
 800dd14:	3748      	adds	r7, #72	; 0x48
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	2000c19c 	.word	0x2000c19c
 800dd20:	40002800 	.word	0x40002800

0800dd24 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a08      	ldr	r2, [pc, #32]	; (800dd54 <HAL_RTC_MspInit+0x30>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d107      	bne.n	800dd46 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800dd36:	4b08      	ldr	r3, [pc, #32]	; (800dd58 <HAL_RTC_MspInit+0x34>)
 800dd38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd3c:	4a06      	ldr	r2, [pc, #24]	; (800dd58 <HAL_RTC_MspInit+0x34>)
 800dd3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800dd46:	bf00      	nop
 800dd48:	370c      	adds	r7, #12
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	40002800 	.word	0x40002800
 800dd58:	40021000 	.word	0x40021000

0800dd5c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	4603      	mov	r3, r0
 800dd64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dd66:	4b0b      	ldr	r3, [pc, #44]	; (800dd94 <SD_CheckStatus+0x38>)
 800dd68:	2201      	movs	r2, #1
 800dd6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dd6c:	f7ff fae4 	bl	800d338 <BSP_SD_GetCardState>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d107      	bne.n	800dd86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dd76:	4b07      	ldr	r3, [pc, #28]	; (800dd94 <SD_CheckStatus+0x38>)
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	f023 0301 	bic.w	r3, r3, #1
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	4b04      	ldr	r3, [pc, #16]	; (800dd94 <SD_CheckStatus+0x38>)
 800dd84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dd86:	4b03      	ldr	r3, [pc, #12]	; (800dd94 <SD_CheckStatus+0x38>)
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	b2db      	uxtb	r3, r3
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20000114 	.word	0x20000114

0800dd98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dda2:	4b0b      	ldr	r3, [pc, #44]	; (800ddd0 <SD_initialize+0x38>)
 800dda4:	2201      	movs	r2, #1
 800dda6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dda8:	f7ff fa64 	bl	800d274 <BSP_SD_Init>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d107      	bne.n	800ddc2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ddb2:	79fb      	ldrb	r3, [r7, #7]
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7ff ffd1 	bl	800dd5c <SD_CheckStatus>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	4b04      	ldr	r3, [pc, #16]	; (800ddd0 <SD_initialize+0x38>)
 800ddc0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ddc2:	4b03      	ldr	r3, [pc, #12]	; (800ddd0 <SD_initialize+0x38>)
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	b2db      	uxtb	r3, r3
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	20000114 	.word	0x20000114

0800ddd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	4603      	mov	r3, r0
 800dddc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ddde:	79fb      	ldrb	r3, [r7, #7]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7ff ffbb 	bl	800dd5c <SD_CheckStatus>
 800dde6:	4603      	mov	r3, r0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60b9      	str	r1, [r7, #8]
 800ddf8:	607a      	str	r2, [r7, #4]
 800ddfa:	603b      	str	r3, [r7, #0]
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de00:	2301      	movs	r3, #1
 800de02:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800de04:	f04f 33ff 	mov.w	r3, #4294967295
 800de08:	683a      	ldr	r2, [r7, #0]
 800de0a:	6879      	ldr	r1, [r7, #4]
 800de0c:	68b8      	ldr	r0, [r7, #8]
 800de0e:	f7ff fa57 	bl	800d2c0 <BSP_SD_ReadBlocks>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d107      	bne.n	800de28 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800de18:	bf00      	nop
 800de1a:	f7ff fa8d 	bl	800d338 <BSP_SD_GetCardState>
 800de1e:	4603      	mov	r3, r0
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1fa      	bne.n	800de1a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800de24:	2300      	movs	r3, #0
 800de26:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800de28:	7dfb      	ldrb	r3, [r7, #23]
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3718      	adds	r7, #24
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800de32:	b580      	push	{r7, lr}
 800de34:	b086      	sub	sp, #24
 800de36:	af00      	add	r7, sp, #0
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
 800de3c:	603b      	str	r3, [r7, #0]
 800de3e:	4603      	mov	r3, r0
 800de40:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de42:	2301      	movs	r3, #1
 800de44:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800de46:	f04f 33ff 	mov.w	r3, #4294967295
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	6879      	ldr	r1, [r7, #4]
 800de4e:	68b8      	ldr	r0, [r7, #8]
 800de50:	f7ff fa54 	bl	800d2fc <BSP_SD_WriteBlocks>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d107      	bne.n	800de6a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800de5a:	bf00      	nop
 800de5c:	f7ff fa6c 	bl	800d338 <BSP_SD_GetCardState>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1fa      	bne.n	800de5c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800de66:	2300      	movs	r3, #0
 800de68:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800de6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3718      	adds	r7, #24
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b08c      	sub	sp, #48	; 0x30
 800de78:	af00      	add	r7, sp, #0
 800de7a:	4603      	mov	r3, r0
 800de7c:	603a      	str	r2, [r7, #0]
 800de7e:	71fb      	strb	r3, [r7, #7]
 800de80:	460b      	mov	r3, r1
 800de82:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800de84:	2301      	movs	r3, #1
 800de86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800de8a:	4b25      	ldr	r3, [pc, #148]	; (800df20 <SD_ioctl+0xac>)
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	f003 0301 	and.w	r3, r3, #1
 800de94:	2b00      	cmp	r3, #0
 800de96:	d001      	beq.n	800de9c <SD_ioctl+0x28>
 800de98:	2303      	movs	r3, #3
 800de9a:	e03c      	b.n	800df16 <SD_ioctl+0xa2>

  switch (cmd)
 800de9c:	79bb      	ldrb	r3, [r7, #6]
 800de9e:	2b03      	cmp	r3, #3
 800dea0:	d834      	bhi.n	800df0c <SD_ioctl+0x98>
 800dea2:	a201      	add	r2, pc, #4	; (adr r2, 800dea8 <SD_ioctl+0x34>)
 800dea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea8:	0800deb9 	.word	0x0800deb9
 800deac:	0800dec1 	.word	0x0800dec1
 800deb0:	0800ded9 	.word	0x0800ded9
 800deb4:	0800def3 	.word	0x0800def3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800deb8:	2300      	movs	r3, #0
 800deba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800debe:	e028      	b.n	800df12 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dec0:	f107 030c 	add.w	r3, r7, #12
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7ff fa47 	bl	800d358 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800deca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ded6:	e01c      	b.n	800df12 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ded8:	f107 030c 	add.w	r3, r7, #12
 800dedc:	4618      	mov	r0, r3
 800dede:	f7ff fa3b 	bl	800d358 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800deea:	2300      	movs	r3, #0
 800deec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800def0:	e00f      	b.n	800df12 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800def2:	f107 030c 	add.w	r3, r7, #12
 800def6:	4618      	mov	r0, r3
 800def8:	f7ff fa2e 	bl	800d358 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800defc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defe:	0a5a      	lsrs	r2, r3, #9
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df04:	2300      	movs	r3, #0
 800df06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df0a:	e002      	b.n	800df12 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800df0c:	2304      	movs	r3, #4
 800df0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800df12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800df16:	4618      	mov	r0, r3
 800df18:	3730      	adds	r7, #48	; 0x30
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	20000114 	.word	0x20000114

0800df24 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800df24:	b480      	push	{r7}
 800df26:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 800df28:	4b0c      	ldr	r3, [pc, #48]	; (800df5c <MX_SDMMC1_SD_Init+0x38>)
 800df2a:	4a0d      	ldr	r2, [pc, #52]	; (800df60 <MX_SDMMC1_SD_Init+0x3c>)
 800df2c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800df2e:	4b0b      	ldr	r3, [pc, #44]	; (800df5c <MX_SDMMC1_SD_Init+0x38>)
 800df30:	2200      	movs	r2, #0
 800df32:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800df34:	4b09      	ldr	r3, [pc, #36]	; (800df5c <MX_SDMMC1_SD_Init+0x38>)
 800df36:	2200      	movs	r2, #0
 800df38:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800df3a:	4b08      	ldr	r3, [pc, #32]	; (800df5c <MX_SDMMC1_SD_Init+0x38>)
 800df3c:	2200      	movs	r2, #0
 800df3e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800df40:	4b06      	ldr	r3, [pc, #24]	; (800df5c <MX_SDMMC1_SD_Init+0x38>)
 800df42:	2200      	movs	r2, #0
 800df44:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800df46:	4b05      	ldr	r3, [pc, #20]	; (800df5c <MX_SDMMC1_SD_Init+0x38>)
 800df48:	2200      	movs	r2, #0
 800df4a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800df4c:	4b03      	ldr	r3, [pc, #12]	; (800df5c <MX_SDMMC1_SD_Init+0x38>)
 800df4e:	2200      	movs	r2, #0
 800df50:	619a      	str	r2, [r3, #24]

}
 800df52:	bf00      	nop
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr
 800df5c:	2000c1c0 	.word	0x2000c1c0
 800df60:	40012800 	.word	0x40012800

0800df64 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b08a      	sub	sp, #40	; 0x28
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df6c:	f107 0314 	add.w	r3, r7, #20
 800df70:	2200      	movs	r2, #0
 800df72:	601a      	str	r2, [r3, #0]
 800df74:	605a      	str	r2, [r3, #4]
 800df76:	609a      	str	r2, [r3, #8]
 800df78:	60da      	str	r2, [r3, #12]
 800df7a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a25      	ldr	r2, [pc, #148]	; (800e018 <HAL_SD_MspInit+0xb4>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d144      	bne.n	800e010 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800df86:	4b25      	ldr	r3, [pc, #148]	; (800e01c <HAL_SD_MspInit+0xb8>)
 800df88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df8a:	4a24      	ldr	r2, [pc, #144]	; (800e01c <HAL_SD_MspInit+0xb8>)
 800df8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800df90:	6613      	str	r3, [r2, #96]	; 0x60
 800df92:	4b22      	ldr	r3, [pc, #136]	; (800e01c <HAL_SD_MspInit+0xb8>)
 800df94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df9a:	613b      	str	r3, [r7, #16]
 800df9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800df9e:	4b1f      	ldr	r3, [pc, #124]	; (800e01c <HAL_SD_MspInit+0xb8>)
 800dfa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfa2:	4a1e      	ldr	r2, [pc, #120]	; (800e01c <HAL_SD_MspInit+0xb8>)
 800dfa4:	f043 0304 	orr.w	r3, r3, #4
 800dfa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dfaa:	4b1c      	ldr	r3, [pc, #112]	; (800e01c <HAL_SD_MspInit+0xb8>)
 800dfac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfae:	f003 0304 	and.w	r3, r3, #4
 800dfb2:	60fb      	str	r3, [r7, #12]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800dfb6:	4b19      	ldr	r3, [pc, #100]	; (800e01c <HAL_SD_MspInit+0xb8>)
 800dfb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfba:	4a18      	ldr	r2, [pc, #96]	; (800e01c <HAL_SD_MspInit+0xb8>)
 800dfbc:	f043 0308 	orr.w	r3, r3, #8
 800dfc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dfc2:	4b16      	ldr	r3, [pc, #88]	; (800e01c <HAL_SD_MspInit+0xb8>)
 800dfc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfc6:	f003 0308 	and.w	r3, r3, #8
 800dfca:	60bb      	str	r3, [r7, #8]
 800dfcc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800dfce:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800dfd2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfd4:	2302      	movs	r3, #2
 800dfd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800dfe0:	230c      	movs	r3, #12
 800dfe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dfe4:	f107 0314 	add.w	r3, r7, #20
 800dfe8:	4619      	mov	r1, r3
 800dfea:	480d      	ldr	r0, [pc, #52]	; (800e020 <HAL_SD_MspInit+0xbc>)
 800dfec:	f7f3 fd0c 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800dff0:	2304      	movs	r3, #4
 800dff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dff4:	2302      	movs	r3, #2
 800dff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dff8:	2300      	movs	r3, #0
 800dffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dffc:	2303      	movs	r3, #3
 800dffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800e000:	230c      	movs	r3, #12
 800e002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e004:	f107 0314 	add.w	r3, r7, #20
 800e008:	4619      	mov	r1, r3
 800e00a:	4806      	ldr	r0, [pc, #24]	; (800e024 <HAL_SD_MspInit+0xc0>)
 800e00c:	f7f3 fcfc 	bl	8001a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800e010:	bf00      	nop
 800e012:	3728      	adds	r7, #40	; 0x28
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	40012800 	.word	0x40012800
 800e01c:	40021000 	.word	0x40021000
 800e020:	48000800 	.word	0x48000800
 800e024:	48000c00 	.word	0x48000c00

0800e028 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800e02c:	4b1b      	ldr	r3, [pc, #108]	; (800e09c <MX_SPI2_Init+0x74>)
 800e02e:	4a1c      	ldr	r2, [pc, #112]	; (800e0a0 <MX_SPI2_Init+0x78>)
 800e030:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800e032:	4b1a      	ldr	r3, [pc, #104]	; (800e09c <MX_SPI2_Init+0x74>)
 800e034:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e038:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800e03a:	4b18      	ldr	r3, [pc, #96]	; (800e09c <MX_SPI2_Init+0x74>)
 800e03c:	2200      	movs	r2, #0
 800e03e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800e040:	4b16      	ldr	r3, [pc, #88]	; (800e09c <MX_SPI2_Init+0x74>)
 800e042:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800e046:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e048:	4b14      	ldr	r3, [pc, #80]	; (800e09c <MX_SPI2_Init+0x74>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e04e:	4b13      	ldr	r3, [pc, #76]	; (800e09c <MX_SPI2_Init+0x74>)
 800e050:	2200      	movs	r2, #0
 800e052:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800e054:	4b11      	ldr	r3, [pc, #68]	; (800e09c <MX_SPI2_Init+0x74>)
 800e056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e05a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e05c:	4b0f      	ldr	r3, [pc, #60]	; (800e09c <MX_SPI2_Init+0x74>)
 800e05e:	2200      	movs	r2, #0
 800e060:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e062:	4b0e      	ldr	r3, [pc, #56]	; (800e09c <MX_SPI2_Init+0x74>)
 800e064:	2200      	movs	r2, #0
 800e066:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800e068:	4b0c      	ldr	r3, [pc, #48]	; (800e09c <MX_SPI2_Init+0x74>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e06e:	4b0b      	ldr	r3, [pc, #44]	; (800e09c <MX_SPI2_Init+0x74>)
 800e070:	2200      	movs	r2, #0
 800e072:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800e074:	4b09      	ldr	r3, [pc, #36]	; (800e09c <MX_SPI2_Init+0x74>)
 800e076:	2207      	movs	r2, #7
 800e078:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800e07a:	4b08      	ldr	r3, [pc, #32]	; (800e09c <MX_SPI2_Init+0x74>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800e080:	4b06      	ldr	r3, [pc, #24]	; (800e09c <MX_SPI2_Init+0x74>)
 800e082:	2208      	movs	r2, #8
 800e084:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800e086:	4805      	ldr	r0, [pc, #20]	; (800e09c <MX_SPI2_Init+0x74>)
 800e088:	f7f9 f824 	bl	80070d4 <HAL_SPI_Init>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d001      	beq.n	800e096 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800e092:	f7ff fd75 	bl	800db80 <Error_Handler>
  }

}
 800e096:	bf00      	nop
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	2000c244 	.word	0x2000c244
 800e0a0:	40003800 	.word	0x40003800

0800e0a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b08a      	sub	sp, #40	; 0x28
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e0ac:	f107 0314 	add.w	r3, r7, #20
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	605a      	str	r2, [r3, #4]
 800e0b6:	609a      	str	r2, [r3, #8]
 800e0b8:	60da      	str	r2, [r3, #12]
 800e0ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4a17      	ldr	r2, [pc, #92]	; (800e120 <HAL_SPI_MspInit+0x7c>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d128      	bne.n	800e118 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e0c6:	4b17      	ldr	r3, [pc, #92]	; (800e124 <HAL_SPI_MspInit+0x80>)
 800e0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0ca:	4a16      	ldr	r2, [pc, #88]	; (800e124 <HAL_SPI_MspInit+0x80>)
 800e0cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e0d0:	6593      	str	r3, [r2, #88]	; 0x58
 800e0d2:	4b14      	ldr	r3, [pc, #80]	; (800e124 <HAL_SPI_MspInit+0x80>)
 800e0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0da:	613b      	str	r3, [r7, #16]
 800e0dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e0de:	4b11      	ldr	r3, [pc, #68]	; (800e124 <HAL_SPI_MspInit+0x80>)
 800e0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0e2:	4a10      	ldr	r2, [pc, #64]	; (800e124 <HAL_SPI_MspInit+0x80>)
 800e0e4:	f043 0302 	orr.w	r3, r3, #2
 800e0e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e0ea:	4b0e      	ldr	r3, [pc, #56]	; (800e124 <HAL_SPI_MspInit+0x80>)
 800e0ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0ee:	f003 0302 	and.w	r3, r3, #2
 800e0f2:	60fb      	str	r3, [r7, #12]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800e0f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800e0fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0fc:	2302      	movs	r3, #2
 800e0fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e100:	2300      	movs	r3, #0
 800e102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e104:	2303      	movs	r3, #3
 800e106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e108:	2305      	movs	r3, #5
 800e10a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e10c:	f107 0314 	add.w	r3, r7, #20
 800e110:	4619      	mov	r1, r3
 800e112:	4805      	ldr	r0, [pc, #20]	; (800e128 <HAL_SPI_MspInit+0x84>)
 800e114:	f7f3 fc78 	bl	8001a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800e118:	bf00      	nop
 800e11a:	3728      	adds	r7, #40	; 0x28
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	40003800 	.word	0x40003800
 800e124:	40021000 	.word	0x40021000
 800e128:	48000400 	.word	0x48000400

0800e12c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e132:	4b0f      	ldr	r3, [pc, #60]	; (800e170 <HAL_MspInit+0x44>)
 800e134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e136:	4a0e      	ldr	r2, [pc, #56]	; (800e170 <HAL_MspInit+0x44>)
 800e138:	f043 0301 	orr.w	r3, r3, #1
 800e13c:	6613      	str	r3, [r2, #96]	; 0x60
 800e13e:	4b0c      	ldr	r3, [pc, #48]	; (800e170 <HAL_MspInit+0x44>)
 800e140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e142:	f003 0301 	and.w	r3, r3, #1
 800e146:	607b      	str	r3, [r7, #4]
 800e148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e14a:	4b09      	ldr	r3, [pc, #36]	; (800e170 <HAL_MspInit+0x44>)
 800e14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e14e:	4a08      	ldr	r2, [pc, #32]	; (800e170 <HAL_MspInit+0x44>)
 800e150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e154:	6593      	str	r3, [r2, #88]	; 0x58
 800e156:	4b06      	ldr	r3, [pc, #24]	; (800e170 <HAL_MspInit+0x44>)
 800e158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e15e:	603b      	str	r3, [r7, #0]
 800e160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e162:	bf00      	nop
 800e164:	370c      	adds	r7, #12
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr
 800e16e:	bf00      	nop
 800e170:	40021000 	.word	0x40021000

0800e174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e174:	b480      	push	{r7}
 800e176:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e178:	bf00      	nop
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr

0800e182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e182:	b480      	push	{r7}
 800e184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e186:	e7fe      	b.n	800e186 <HardFault_Handler+0x4>

0800e188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e188:	b480      	push	{r7}
 800e18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e18c:	e7fe      	b.n	800e18c <MemManage_Handler+0x4>

0800e18e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e18e:	b480      	push	{r7}
 800e190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e192:	e7fe      	b.n	800e192 <BusFault_Handler+0x4>

0800e194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e194:	b480      	push	{r7}
 800e196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e198:	e7fe      	b.n	800e198 <UsageFault_Handler+0x4>

0800e19a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e19a:	b480      	push	{r7}
 800e19c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e19e:	bf00      	nop
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e1ac:	bf00      	nop
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr

0800e1b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e1b6:	b480      	push	{r7}
 800e1b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e1ba:	bf00      	nop
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e1c8:	f7f2 f858 	bl	800027c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e1cc:	bf00      	nop
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
/*
 * Button pressed!!
 * */
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800e1d4:	2001      	movs	r0, #1
 800e1d6:	f7f3 fdc1 	bl	8001d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800e1da:	bf00      	nop
 800e1dc:	bd80      	pop	{r7, pc}

0800e1de <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
/*
 * USB Connected!
 *  */
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800e1e2:	2010      	movs	r0, #16
 800e1e4:	f7f3 fdba 	bl	8001d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800e1e8:	bf00      	nop
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	af00      	add	r7, sp, #0
	 * */
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e1f0:	bf00      	nop
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2_Callback();
 800e1fe:	f7fe ff07 	bl	800d010 <USART2_Callback>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800e202:	bf00      	nop
 800e204:	bd80      	pop	{r7, pc}
	...

0800e208 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800e20c:	4802      	ldr	r0, [pc, #8]	; (800e218 <USB_IRQHandler+0x10>)
 800e20e:	f7f4 f8b7 	bl	8002380 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800e212:	bf00      	nop
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	2000c5c4 	.word	0x2000c5c4

0800e21c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b086      	sub	sp, #24
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e228:	2300      	movs	r3, #0
 800e22a:	617b      	str	r3, [r7, #20]
 800e22c:	e00a      	b.n	800e244 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800e22e:	f3af 8000 	nop.w
 800e232:	4601      	mov	r1, r0
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	1c5a      	adds	r2, r3, #1
 800e238:	60ba      	str	r2, [r7, #8]
 800e23a:	b2ca      	uxtb	r2, r1
 800e23c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	3301      	adds	r3, #1
 800e242:	617b      	str	r3, [r7, #20]
 800e244:	697a      	ldr	r2, [r7, #20]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	429a      	cmp	r2, r3
 800e24a:	dbf0      	blt.n	800e22e <_read+0x12>
	}

return len;
 800e24c:	687b      	ldr	r3, [r7, #4]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <_close>:
	}
	return len;
}

int _close(int file)
{
 800e256:	b480      	push	{r7}
 800e258:	b083      	sub	sp, #12
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
	return -1;
 800e25e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e262:	4618      	mov	r0, r3
 800e264:	370c      	adds	r7, #12
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr

0800e26e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e26e:	b480      	push	{r7}
 800e270:	b083      	sub	sp, #12
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e27e:	605a      	str	r2, [r3, #4]
	return 0;
 800e280:	2300      	movs	r3, #0
}
 800e282:	4618      	mov	r0, r3
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <_isatty>:

int _isatty(int file)
{
 800e28e:	b480      	push	{r7}
 800e290:	b083      	sub	sp, #12
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
	return 1;
 800e296:	2301      	movs	r3, #1
}
 800e298:	4618      	mov	r0, r3
 800e29a:	370c      	adds	r7, #12
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	60b9      	str	r1, [r7, #8]
 800e2ae:	607a      	str	r2, [r7, #4]
	return 0;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3714      	adds	r7, #20
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr
	...

0800e2c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800e2c8:	4b11      	ldr	r3, [pc, #68]	; (800e310 <_sbrk+0x50>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d102      	bne.n	800e2d6 <_sbrk+0x16>
		heap_end = &end;
 800e2d0:	4b0f      	ldr	r3, [pc, #60]	; (800e310 <_sbrk+0x50>)
 800e2d2:	4a10      	ldr	r2, [pc, #64]	; (800e314 <_sbrk+0x54>)
 800e2d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800e2d6:	4b0e      	ldr	r3, [pc, #56]	; (800e310 <_sbrk+0x50>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800e2dc:	4b0c      	ldr	r3, [pc, #48]	; (800e310 <_sbrk+0x50>)
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	466a      	mov	r2, sp
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d907      	bls.n	800e2fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800e2ea:	f000 ffbd 	bl	800f268 <__errno>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	230c      	movs	r3, #12
 800e2f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800e2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f8:	e006      	b.n	800e308 <_sbrk+0x48>
	}

	heap_end += incr;
 800e2fa:	4b05      	ldr	r3, [pc, #20]	; (800e310 <_sbrk+0x50>)
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4413      	add	r3, r2
 800e302:	4a03      	ldr	r2, [pc, #12]	; (800e310 <_sbrk+0x50>)
 800e304:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800e306:	68fb      	ldr	r3, [r7, #12]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	20000310 	.word	0x20000310
 800e314:	2000cac0 	.word	0x2000cac0

0800e318 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800e318:	b480      	push	{r7}
 800e31a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e31c:	4b17      	ldr	r3, [pc, #92]	; (800e37c <SystemInit+0x64>)
 800e31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e322:	4a16      	ldr	r2, [pc, #88]	; (800e37c <SystemInit+0x64>)
 800e324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800e32c:	4b14      	ldr	r3, [pc, #80]	; (800e380 <SystemInit+0x68>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a13      	ldr	r2, [pc, #76]	; (800e380 <SystemInit+0x68>)
 800e332:	f043 0301 	orr.w	r3, r3, #1
 800e336:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800e338:	4b11      	ldr	r3, [pc, #68]	; (800e380 <SystemInit+0x68>)
 800e33a:	2200      	movs	r2, #0
 800e33c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800e33e:	4b10      	ldr	r3, [pc, #64]	; (800e380 <SystemInit+0x68>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4a0f      	ldr	r2, [pc, #60]	; (800e380 <SystemInit+0x68>)
 800e344:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800e348:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800e34c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800e34e:	4b0c      	ldr	r3, [pc, #48]	; (800e380 <SystemInit+0x68>)
 800e350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e354:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e356:	4b0a      	ldr	r3, [pc, #40]	; (800e380 <SystemInit+0x68>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a09      	ldr	r2, [pc, #36]	; (800e380 <SystemInit+0x68>)
 800e35c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e360:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800e362:	4b07      	ldr	r3, [pc, #28]	; (800e380 <SystemInit+0x68>)
 800e364:	2200      	movs	r2, #0
 800e366:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e368:	4b04      	ldr	r3, [pc, #16]	; (800e37c <SystemInit+0x64>)
 800e36a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e36e:	609a      	str	r2, [r3, #8]
#endif
}
 800e370:	bf00      	nop
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	e000ed00 	.word	0xe000ed00
 800e380:	40021000 	.word	0x40021000

0800e384 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b08e      	sub	sp, #56	; 0x38
 800e388:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e38a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e38e:	2200      	movs	r2, #0
 800e390:	601a      	str	r2, [r3, #0]
 800e392:	605a      	str	r2, [r3, #4]
 800e394:	609a      	str	r2, [r3, #8]
 800e396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e398:	f107 031c 	add.w	r3, r7, #28
 800e39c:	2200      	movs	r2, #0
 800e39e:	601a      	str	r2, [r3, #0]
 800e3a0:	605a      	str	r2, [r3, #4]
 800e3a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e3a4:	463b      	mov	r3, r7
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	601a      	str	r2, [r3, #0]
 800e3aa:	605a      	str	r2, [r3, #4]
 800e3ac:	609a      	str	r2, [r3, #8]
 800e3ae:	60da      	str	r2, [r3, #12]
 800e3b0:	611a      	str	r2, [r3, #16]
 800e3b2:	615a      	str	r2, [r3, #20]
 800e3b4:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800e3b6:	4b2c      	ldr	r3, [pc, #176]	; (800e468 <MX_TIM2_Init+0xe4>)
 800e3b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e3bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e3be:	4b2a      	ldr	r3, [pc, #168]	; (800e468 <MX_TIM2_Init+0xe4>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e3c4:	4b28      	ldr	r3, [pc, #160]	; (800e468 <MX_TIM2_Init+0xe4>)
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800e3ca:	4b27      	ldr	r3, [pc, #156]	; (800e468 <MX_TIM2_Init+0xe4>)
 800e3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e3d2:	4b25      	ldr	r3, [pc, #148]	; (800e468 <MX_TIM2_Init+0xe4>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e3d8:	4b23      	ldr	r3, [pc, #140]	; (800e468 <MX_TIM2_Init+0xe4>)
 800e3da:	2200      	movs	r2, #0
 800e3dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e3de:	4822      	ldr	r0, [pc, #136]	; (800e468 <MX_TIM2_Init+0xe4>)
 800e3e0:	f7f8 ff1b 	bl	800721a <HAL_TIM_Base_Init>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d001      	beq.n	800e3ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800e3ea:	f7ff fbc9 	bl	800db80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e3ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e3f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	481b      	ldr	r0, [pc, #108]	; (800e468 <MX_TIM2_Init+0xe4>)
 800e3fc:	f7f9 f83c 	bl	8007478 <HAL_TIM_ConfigClockSource>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800e406:	f7ff fbbb 	bl	800db80 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800e40a:	4817      	ldr	r0, [pc, #92]	; (800e468 <MX_TIM2_Init+0xe4>)
 800e40c:	f7f8 ff5c 	bl	80072c8 <HAL_TIM_OC_Init>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800e416:	f7ff fbb3 	bl	800db80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e41a:	2300      	movs	r3, #0
 800e41c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e41e:	2300      	movs	r3, #0
 800e420:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e422:	f107 031c 	add.w	r3, r7, #28
 800e426:	4619      	mov	r1, r3
 800e428:	480f      	ldr	r0, [pc, #60]	; (800e468 <MX_TIM2_Init+0xe4>)
 800e42a:	f7f9 fc65 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d001      	beq.n	800e438 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800e434:	f7ff fba4 	bl	800db80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800e438:	2300      	movs	r3, #0
 800e43a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800e43c:	2300      	movs	r3, #0
 800e43e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e440:	2300      	movs	r3, #0
 800e442:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e444:	2300      	movs	r3, #0
 800e446:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e448:	463b      	mov	r3, r7
 800e44a:	2200      	movs	r2, #0
 800e44c:	4619      	mov	r1, r3
 800e44e:	4806      	ldr	r0, [pc, #24]	; (800e468 <MX_TIM2_Init+0xe4>)
 800e450:	f7f8 ff9c 	bl	800738c <HAL_TIM_OC_ConfigChannel>
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	d001      	beq.n	800e45e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800e45a:	f7ff fb91 	bl	800db80 <Error_Handler>
  }

}
 800e45e:	bf00      	nop
 800e460:	3738      	adds	r7, #56	; 0x38
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	2000c2a8 	.word	0x2000c2a8

0800e46c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e47c:	d10b      	bne.n	800e496 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e47e:	4b09      	ldr	r3, [pc, #36]	; (800e4a4 <HAL_TIM_Base_MspInit+0x38>)
 800e480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e482:	4a08      	ldr	r2, [pc, #32]	; (800e4a4 <HAL_TIM_Base_MspInit+0x38>)
 800e484:	f043 0301 	orr.w	r3, r3, #1
 800e488:	6593      	str	r3, [r2, #88]	; 0x58
 800e48a:	4b06      	ldr	r3, [pc, #24]	; (800e4a4 <HAL_TIM_Base_MspInit+0x38>)
 800e48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e48e:	f003 0301 	and.w	r3, r3, #1
 800e492:	60fb      	str	r3, [r7, #12]
 800e494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800e496:	bf00      	nop
 800e498:	3714      	adds	r7, #20
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop
 800e4a4:	40021000 	.word	0x40021000

0800e4a8 <__NVIC_GetPriorityGrouping>:
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e4ac:	4b04      	ldr	r3, [pc, #16]	; (800e4c0 <__NVIC_GetPriorityGrouping+0x18>)
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	0a1b      	lsrs	r3, r3, #8
 800e4b2:	f003 0307 	and.w	r3, r3, #7
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	e000ed00 	.word	0xe000ed00

0800e4c4 <__NVIC_EnableIRQ>:
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e4ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	db0b      	blt.n	800e4ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e4d6:	79fb      	ldrb	r3, [r7, #7]
 800e4d8:	f003 021f 	and.w	r2, r3, #31
 800e4dc:	4907      	ldr	r1, [pc, #28]	; (800e4fc <__NVIC_EnableIRQ+0x38>)
 800e4de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4e2:	095b      	lsrs	r3, r3, #5
 800e4e4:	2001      	movs	r0, #1
 800e4e6:	fa00 f202 	lsl.w	r2, r0, r2
 800e4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e4ee:	bf00      	nop
 800e4f0:	370c      	adds	r7, #12
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
 800e4fa:	bf00      	nop
 800e4fc:	e000e100 	.word	0xe000e100

0800e500 <__NVIC_SetPriority>:
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	4603      	mov	r3, r0
 800e508:	6039      	str	r1, [r7, #0]
 800e50a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e50c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e510:	2b00      	cmp	r3, #0
 800e512:	db0a      	blt.n	800e52a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	b2da      	uxtb	r2, r3
 800e518:	490c      	ldr	r1, [pc, #48]	; (800e54c <__NVIC_SetPriority+0x4c>)
 800e51a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e51e:	0112      	lsls	r2, r2, #4
 800e520:	b2d2      	uxtb	r2, r2
 800e522:	440b      	add	r3, r1
 800e524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e528:	e00a      	b.n	800e540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	b2da      	uxtb	r2, r3
 800e52e:	4908      	ldr	r1, [pc, #32]	; (800e550 <__NVIC_SetPriority+0x50>)
 800e530:	79fb      	ldrb	r3, [r7, #7]
 800e532:	f003 030f 	and.w	r3, r3, #15
 800e536:	3b04      	subs	r3, #4
 800e538:	0112      	lsls	r2, r2, #4
 800e53a:	b2d2      	uxtb	r2, r2
 800e53c:	440b      	add	r3, r1
 800e53e:	761a      	strb	r2, [r3, #24]
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr
 800e54c:	e000e100 	.word	0xe000e100
 800e550:	e000ed00 	.word	0xe000ed00

0800e554 <NVIC_EncodePriority>:
{
 800e554:	b480      	push	{r7}
 800e556:	b089      	sub	sp, #36	; 0x24
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f003 0307 	and.w	r3, r3, #7
 800e566:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	f1c3 0307 	rsb	r3, r3, #7
 800e56e:	2b04      	cmp	r3, #4
 800e570:	bf28      	it	cs
 800e572:	2304      	movcs	r3, #4
 800e574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	3304      	adds	r3, #4
 800e57a:	2b06      	cmp	r3, #6
 800e57c:	d902      	bls.n	800e584 <NVIC_EncodePriority+0x30>
 800e57e:	69fb      	ldr	r3, [r7, #28]
 800e580:	3b03      	subs	r3, #3
 800e582:	e000      	b.n	800e586 <NVIC_EncodePriority+0x32>
 800e584:	2300      	movs	r3, #0
 800e586:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e588:	f04f 32ff 	mov.w	r2, #4294967295
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	fa02 f303 	lsl.w	r3, r2, r3
 800e592:	43da      	mvns	r2, r3
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	401a      	ands	r2, r3
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e59c:	f04f 31ff 	mov.w	r1, #4294967295
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	fa01 f303 	lsl.w	r3, r1, r3
 800e5a6:	43d9      	mvns	r1, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e5ac:	4313      	orrs	r3, r2
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3724      	adds	r7, #36	; 0x24
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <LL_USART_Enable>:
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	b083      	sub	sp, #12
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f043 0201 	orr.w	r2, r3, #1
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	601a      	str	r2, [r3, #0]
}
 800e5ce:	bf00      	nop
 800e5d0:	370c      	adds	r7, #12
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr

0800e5da <LL_USART_ConfigAsyncMode>:
{
 800e5da:	b480      	push	{r7}
 800e5dc:	b083      	sub	sp, #12
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	609a      	str	r2, [r3, #8]
}
 800e5fa:	bf00      	nop
 800e5fc:	370c      	adds	r7, #12
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr
	...

0800e608 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e610:	4b08      	ldr	r3, [pc, #32]	; (800e634 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e614:	4907      	ldr	r1, [pc, #28]	; (800e634 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	4313      	orrs	r3, r2
 800e61a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e61c:	4b05      	ldr	r3, [pc, #20]	; (800e634 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e61e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	4013      	ands	r3, r2
 800e624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e626:	68fb      	ldr	r3, [r7, #12]
}
 800e628:	bf00      	nop
 800e62a:	3714      	adds	r7, #20
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr
 800e634:	40021000 	.word	0x40021000

0800e638 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800e640:	4b08      	ldr	r3, [pc, #32]	; (800e664 <LL_APB1_GRP1_EnableClock+0x2c>)
 800e642:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e644:	4907      	ldr	r1, [pc, #28]	; (800e664 <LL_APB1_GRP1_EnableClock+0x2c>)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4313      	orrs	r3, r2
 800e64a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800e64c:	4b05      	ldr	r3, [pc, #20]	; (800e664 <LL_APB1_GRP1_EnableClock+0x2c>)
 800e64e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4013      	ands	r3, r2
 800e654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e656:	68fb      	ldr	r3, [r7, #12]
}
 800e658:	bf00      	nop
 800e65a:	3714      	adds	r7, #20
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr
 800e664:	40021000 	.word	0x40021000

0800e668 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800e668:	b480      	push	{r7}
 800e66a:	b085      	sub	sp, #20
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800e670:	4b08      	ldr	r3, [pc, #32]	; (800e694 <LL_APB2_GRP1_EnableClock+0x2c>)
 800e672:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e674:	4907      	ldr	r1, [pc, #28]	; (800e694 <LL_APB2_GRP1_EnableClock+0x2c>)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	4313      	orrs	r3, r2
 800e67a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800e67c:	4b05      	ldr	r3, [pc, #20]	; (800e694 <LL_APB2_GRP1_EnableClock+0x2c>)
 800e67e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4013      	ands	r3, r2
 800e684:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e686:	68fb      	ldr	r3, [r7, #12]
}
 800e688:	bf00      	nop
 800e68a:	3714      	adds	r7, #20
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr
 800e694:	40021000 	.word	0x40021000

0800e698 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b08e      	sub	sp, #56	; 0x38
 800e69c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800e69e:	f107 031c 	add.w	r3, r7, #28
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	605a      	str	r2, [r3, #4]
 800e6a8:	609a      	str	r2, [r3, #8]
 800e6aa:	60da      	str	r2, [r3, #12]
 800e6ac:	611a      	str	r2, [r3, #16]
 800e6ae:	615a      	str	r2, [r3, #20]
 800e6b0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6b2:	1d3b      	adds	r3, r7, #4
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	601a      	str	r2, [r3, #0]
 800e6b8:	605a      	str	r2, [r3, #4]
 800e6ba:	609a      	str	r2, [r3, #8]
 800e6bc:	60da      	str	r2, [r3, #12]
 800e6be:	611a      	str	r2, [r3, #16]
 800e6c0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800e6c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e6c6:	f7ff ffcf 	bl	800e668 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800e6ca:	2001      	movs	r0, #1
 800e6cc:	f7ff ff9c 	bl	800e608 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800e6d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e6d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e6d6:	2302      	movs	r3, #2
 800e6d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e6da:	2303      	movs	r3, #3
 800e6dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800e6e6:	2307      	movs	r3, #7
 800e6e8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6ea:	1d3b      	adds	r3, r7, #4
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e6f2:	f7f9 fcba 	bl	800806a <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800e6f6:	f7ff fed7 	bl	800e4a8 <__NVIC_GetPriorityGrouping>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	2100      	movs	r1, #0
 800e700:	4618      	mov	r0, r3
 800e702:	f7ff ff27 	bl	800e554 <NVIC_EncodePriority>
 800e706:	4603      	mov	r3, r0
 800e708:	4619      	mov	r1, r3
 800e70a:	2025      	movs	r0, #37	; 0x25
 800e70c:	f7ff fef8 	bl	800e500 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800e710:	2025      	movs	r0, #37	; 0x25
 800e712:	f7ff fed7 	bl	800e4c4 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800e716:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e71a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800e71c:	2300      	movs	r3, #0
 800e71e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800e720:	2300      	movs	r3, #0
 800e722:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800e724:	2300      	movs	r3, #0
 800e726:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800e728:	230c      	movs	r3, #12
 800e72a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800e72c:	2300      	movs	r3, #0
 800e72e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800e730:	2300      	movs	r3, #0
 800e732:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800e734:	f107 031c 	add.w	r3, r7, #28
 800e738:	4619      	mov	r1, r3
 800e73a:	4806      	ldr	r0, [pc, #24]	; (800e754 <MX_USART1_UART_Init+0xbc>)
 800e73c:	f7fa fe64 	bl	8009408 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800e740:	4804      	ldr	r0, [pc, #16]	; (800e754 <MX_USART1_UART_Init+0xbc>)
 800e742:	f7ff ff4a 	bl	800e5da <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800e746:	4803      	ldr	r0, [pc, #12]	; (800e754 <MX_USART1_UART_Init+0xbc>)
 800e748:	f7ff ff37 	bl	800e5ba <LL_USART_Enable>

}
 800e74c:	bf00      	nop
 800e74e:	3738      	adds	r7, #56	; 0x38
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	40013800 	.word	0x40013800

0800e758 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b08e      	sub	sp, #56	; 0x38
 800e75c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800e75e:	f107 031c 	add.w	r3, r7, #28
 800e762:	2200      	movs	r2, #0
 800e764:	601a      	str	r2, [r3, #0]
 800e766:	605a      	str	r2, [r3, #4]
 800e768:	609a      	str	r2, [r3, #8]
 800e76a:	60da      	str	r2, [r3, #12]
 800e76c:	611a      	str	r2, [r3, #16]
 800e76e:	615a      	str	r2, [r3, #20]
 800e770:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e772:	1d3b      	adds	r3, r7, #4
 800e774:	2200      	movs	r2, #0
 800e776:	601a      	str	r2, [r3, #0]
 800e778:	605a      	str	r2, [r3, #4]
 800e77a:	609a      	str	r2, [r3, #8]
 800e77c:	60da      	str	r2, [r3, #12]
 800e77e:	611a      	str	r2, [r3, #16]
 800e780:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800e782:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800e786:	f7ff ff57 	bl	800e638 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800e78a:	2001      	movs	r0, #1
 800e78c:	f7ff ff3c 	bl	800e608 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800e790:	230c      	movs	r3, #12
 800e792:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e794:	2302      	movs	r3, #2
 800e796:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e798:	2303      	movs	r3, #3
 800e79a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800e79c:	2300      	movs	r3, #0
 800e79e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800e7a4:	2307      	movs	r3, #7
 800e7a6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7a8:	1d3b      	adds	r3, r7, #4
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e7b0:	f7f9 fc5b 	bl	800806a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800e7b4:	f7ff fe78 	bl	800e4a8 <__NVIC_GetPriorityGrouping>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	2100      	movs	r1, #0
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7ff fec8 	bl	800e554 <NVIC_EncodePriority>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	2026      	movs	r0, #38	; 0x26
 800e7ca:	f7ff fe99 	bl	800e500 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800e7ce:	2026      	movs	r0, #38	; 0x26
 800e7d0:	f7ff fe78 	bl	800e4c4 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800e7d4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e7d8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800e7e6:	230c      	movs	r3, #12
 800e7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800e7f2:	f107 031c 	add.w	r3, r7, #28
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	4806      	ldr	r0, [pc, #24]	; (800e814 <MX_USART2_UART_Init+0xbc>)
 800e7fa:	f7fa fe05 	bl	8009408 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800e7fe:	4805      	ldr	r0, [pc, #20]	; (800e814 <MX_USART2_UART_Init+0xbc>)
 800e800:	f7ff feeb 	bl	800e5da <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800e804:	4803      	ldr	r0, [pc, #12]	; (800e814 <MX_USART2_UART_Init+0xbc>)
 800e806:	f7ff fed8 	bl	800e5ba <LL_USART_Enable>

}
 800e80a:	bf00      	nop
 800e80c:	3738      	adds	r7, #56	; 0x38
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
 800e812:	bf00      	nop
 800e814:	40004400 	.word	0x40004400

0800e818 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b08e      	sub	sp, #56	; 0x38
 800e81c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800e81e:	f107 031c 	add.w	r3, r7, #28
 800e822:	2200      	movs	r2, #0
 800e824:	601a      	str	r2, [r3, #0]
 800e826:	605a      	str	r2, [r3, #4]
 800e828:	609a      	str	r2, [r3, #8]
 800e82a:	60da      	str	r2, [r3, #12]
 800e82c:	611a      	str	r2, [r3, #16]
 800e82e:	615a      	str	r2, [r3, #20]
 800e830:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e832:	1d3b      	adds	r3, r7, #4
 800e834:	2200      	movs	r2, #0
 800e836:	601a      	str	r2, [r3, #0]
 800e838:	605a      	str	r2, [r3, #4]
 800e83a:	609a      	str	r2, [r3, #8]
 800e83c:	60da      	str	r2, [r3, #12]
 800e83e:	611a      	str	r2, [r3, #16]
 800e840:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800e842:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800e846:	f7ff fef7 	bl	800e638 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800e84a:	2004      	movs	r0, #4
 800e84c:	f7ff fedc 	bl	800e608 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC4   ------> USART3_TX
  PC5   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800e850:	2330      	movs	r3, #48	; 0x30
 800e852:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e854:	2302      	movs	r3, #2
 800e856:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e858:	2303      	movs	r3, #3
 800e85a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800e85c:	2300      	movs	r3, #0
 800e85e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e860:	2300      	movs	r3, #0
 800e862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800e864:	2307      	movs	r3, #7
 800e866:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e868:	1d3b      	adds	r3, r7, #4
 800e86a:	4619      	mov	r1, r3
 800e86c:	4810      	ldr	r0, [pc, #64]	; (800e8b0 <MX_USART3_UART_Init+0x98>)
 800e86e:	f7f9 fbfc 	bl	800806a <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 800e872:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e876:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800e878:	2300      	movs	r3, #0
 800e87a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800e87c:	2300      	movs	r3, #0
 800e87e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800e880:	2300      	movs	r3, #0
 800e882:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800e884:	230c      	movs	r3, #12
 800e886:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800e888:	2300      	movs	r3, #0
 800e88a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800e88c:	2300      	movs	r3, #0
 800e88e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800e890:	f107 031c 	add.w	r3, r7, #28
 800e894:	4619      	mov	r1, r3
 800e896:	4807      	ldr	r0, [pc, #28]	; (800e8b4 <MX_USART3_UART_Init+0x9c>)
 800e898:	f7fa fdb6 	bl	8009408 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800e89c:	4805      	ldr	r0, [pc, #20]	; (800e8b4 <MX_USART3_UART_Init+0x9c>)
 800e89e:	f7ff fe9c 	bl	800e5da <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800e8a2:	4804      	ldr	r0, [pc, #16]	; (800e8b4 <MX_USART3_UART_Init+0x9c>)
 800e8a4:	f7ff fe89 	bl	800e5ba <LL_USART_Enable>

}
 800e8a8:	bf00      	nop
 800e8aa:	3738      	adds	r7, #56	; 0x38
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	48000800 	.word	0x48000800
 800e8b4:	40004800 	.word	0x40004800

0800e8b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	490e      	ldr	r1, [pc, #56]	; (800e8f8 <MX_USB_DEVICE_Init+0x40>)
 800e8c0:	480e      	ldr	r0, [pc, #56]	; (800e8fc <MX_USB_DEVICE_Init+0x44>)
 800e8c2:	f7fd f899 	bl	800b9f8 <USBD_Init>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e8cc:	f7ff f958 	bl	800db80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800e8d0:	490b      	ldr	r1, [pc, #44]	; (800e900 <MX_USB_DEVICE_Init+0x48>)
 800e8d2:	480a      	ldr	r0, [pc, #40]	; (800e8fc <MX_USB_DEVICE_Init+0x44>)
 800e8d4:	f7fd f8c0 	bl	800ba58 <USBD_RegisterClass>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d001      	beq.n	800e8e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e8de:	f7ff f94f 	bl	800db80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e8e2:	4806      	ldr	r0, [pc, #24]	; (800e8fc <MX_USB_DEVICE_Init+0x44>)
 800e8e4:	f7fd f8df 	bl	800baa6 <USBD_Start>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d001      	beq.n	800e8f2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800e8ee:	f7ff f947 	bl	800db80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e8f2:	bf00      	nop
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	2000011c 	.word	0x2000011c
 800e8fc:	2000c2f4 	.word	0x2000c2f4
 800e900:	20000008 	.word	0x20000008

0800e904 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b08a      	sub	sp, #40	; 0x28
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e90c:	f107 0314 	add.w	r3, r7, #20
 800e910:	2200      	movs	r2, #0
 800e912:	601a      	str	r2, [r3, #0]
 800e914:	605a      	str	r2, [r3, #4]
 800e916:	609a      	str	r2, [r3, #8]
 800e918:	60da      	str	r2, [r3, #12]
 800e91a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4a1c      	ldr	r2, [pc, #112]	; (800e994 <HAL_PCD_MspInit+0x90>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d131      	bne.n	800e98a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e926:	4b1c      	ldr	r3, [pc, #112]	; (800e998 <HAL_PCD_MspInit+0x94>)
 800e928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e92a:	4a1b      	ldr	r2, [pc, #108]	; (800e998 <HAL_PCD_MspInit+0x94>)
 800e92c:	f043 0301 	orr.w	r3, r3, #1
 800e930:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e932:	4b19      	ldr	r3, [pc, #100]	; (800e998 <HAL_PCD_MspInit+0x94>)
 800e934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e936:	f003 0301 	and.w	r3, r3, #1
 800e93a:	613b      	str	r3, [r7, #16]
 800e93c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e93e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e944:	2302      	movs	r3, #2
 800e946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e948:	2300      	movs	r3, #0
 800e94a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e94c:	2303      	movs	r3, #3
 800e94e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800e950:	230a      	movs	r3, #10
 800e952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e954:	f107 0314 	add.w	r3, r7, #20
 800e958:	4619      	mov	r1, r3
 800e95a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e95e:	f7f3 f853 	bl	8001a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e962:	4b0d      	ldr	r3, [pc, #52]	; (800e998 <HAL_PCD_MspInit+0x94>)
 800e964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e966:	4a0c      	ldr	r2, [pc, #48]	; (800e998 <HAL_PCD_MspInit+0x94>)
 800e968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e96c:	6593      	str	r3, [r2, #88]	; 0x58
 800e96e:	4b0a      	ldr	r3, [pc, #40]	; (800e998 <HAL_PCD_MspInit+0x94>)
 800e970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e972:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e976:	60fb      	str	r3, [r7, #12]
 800e978:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e97a:	2200      	movs	r2, #0
 800e97c:	2100      	movs	r1, #0
 800e97e:	2043      	movs	r0, #67	; 0x43
 800e980:	f7f2 ff21 	bl	80017c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e984:	2043      	movs	r0, #67	; 0x43
 800e986:	f7f2 ff3a 	bl	80017fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e98a:	bf00      	nop
 800e98c:	3728      	adds	r7, #40	; 0x28
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	40006800 	.word	0x40006800
 800e998:	40021000 	.word	0x40021000

0800e99c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	4610      	mov	r0, r2
 800e9b4:	f7fd f8c2 	bl	800bb3c <USBD_LL_SetupStage>
}
 800e9b8:	bf00      	nop
 800e9ba:	3708      	adds	r7, #8
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800e9d2:	78fa      	ldrb	r2, [r7, #3]
 800e9d4:	6879      	ldr	r1, [r7, #4]
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4413      	add	r3, r2
 800e9dc:	00db      	lsls	r3, r3, #3
 800e9de:	440b      	add	r3, r1
 800e9e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	78fb      	ldrb	r3, [r7, #3]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	f7fd f8fa 	bl	800bbe2 <USBD_LL_DataOutStage>
}
 800e9ee:	bf00      	nop
 800e9f0:	3708      	adds	r7, #8
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9f6:	b580      	push	{r7, lr}
 800e9f8:	b082      	sub	sp, #8
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
 800e9fe:	460b      	mov	r3, r1
 800ea00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ea08:	78fa      	ldrb	r2, [r7, #3]
 800ea0a:	6879      	ldr	r1, [r7, #4]
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	009b      	lsls	r3, r3, #2
 800ea10:	4413      	add	r3, r2
 800ea12:	00db      	lsls	r3, r3, #3
 800ea14:	440b      	add	r3, r1
 800ea16:	333c      	adds	r3, #60	; 0x3c
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	78fb      	ldrb	r3, [r7, #3]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	f7fd f943 	bl	800bca8 <USBD_LL_DataInStage>
}
 800ea22:	bf00      	nop
 800ea24:	3708      	adds	r7, #8
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b082      	sub	sp, #8
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7fd fa47 	bl	800becc <USBD_LL_SOF>
}
 800ea3e:	bf00      	nop
 800ea40:	3708      	adds	r7, #8
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b084      	sub	sp, #16
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	689b      	ldr	r3, [r3, #8]
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	d001      	beq.n	800ea5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ea5a:	f7ff f891 	bl	800db80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ea64:	7bfa      	ldrb	r2, [r7, #15]
 800ea66:	4611      	mov	r1, r2
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fd f9f4 	bl	800be56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fd f9ad 	bl	800bdd4 <USBD_LL_Reset>
}
 800ea7a:	bf00      	nop
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
	...

0800ea84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fd f9ef 	bl	800be76 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	699b      	ldr	r3, [r3, #24]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d005      	beq.n	800eaac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eaa0:	4b04      	ldr	r3, [pc, #16]	; (800eab4 <HAL_PCD_SuspendCallback+0x30>)
 800eaa2:	691b      	ldr	r3, [r3, #16]
 800eaa4:	4a03      	ldr	r2, [pc, #12]	; (800eab4 <HAL_PCD_SuspendCallback+0x30>)
 800eaa6:	f043 0306 	orr.w	r3, r3, #6
 800eaaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eaac:	bf00      	nop
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	e000ed00 	.word	0xe000ed00

0800eab8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	699b      	ldr	r3, [r3, #24]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d007      	beq.n	800ead8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eac8:	4b08      	ldr	r3, [pc, #32]	; (800eaec <HAL_PCD_ResumeCallback+0x34>)
 800eaca:	691b      	ldr	r3, [r3, #16]
 800eacc:	4a07      	ldr	r2, [pc, #28]	; (800eaec <HAL_PCD_ResumeCallback+0x34>)
 800eace:	f023 0306 	bic.w	r3, r3, #6
 800ead2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ead4:	f000 fa78 	bl	800efc8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fd f9de 	bl	800bea0 <USBD_LL_Resume>
}
 800eae4:	bf00      	nop
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	e000ed00 	.word	0xe000ed00

0800eaf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800eaf8:	f7f4 ff00 	bl	80038fc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800eafc:	4a22      	ldr	r2, [pc, #136]	; (800eb88 <USBD_LL_Init+0x98>)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	4a20      	ldr	r2, [pc, #128]	; (800eb88 <USBD_LL_Init+0x98>)
 800eb08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800eb0c:	4b1e      	ldr	r3, [pc, #120]	; (800eb88 <USBD_LL_Init+0x98>)
 800eb0e:	4a1f      	ldr	r2, [pc, #124]	; (800eb8c <USBD_LL_Init+0x9c>)
 800eb10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800eb12:	4b1d      	ldr	r3, [pc, #116]	; (800eb88 <USBD_LL_Init+0x98>)
 800eb14:	2208      	movs	r2, #8
 800eb16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800eb18:	4b1b      	ldr	r3, [pc, #108]	; (800eb88 <USBD_LL_Init+0x98>)
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb1e:	4b1a      	ldr	r3, [pc, #104]	; (800eb88 <USBD_LL_Init+0x98>)
 800eb20:	2202      	movs	r2, #2
 800eb22:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800eb24:	4b18      	ldr	r3, [pc, #96]	; (800eb88 <USBD_LL_Init+0x98>)
 800eb26:	2200      	movs	r2, #0
 800eb28:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800eb2a:	4b17      	ldr	r3, [pc, #92]	; (800eb88 <USBD_LL_Init+0x98>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800eb30:	4b15      	ldr	r3, [pc, #84]	; (800eb88 <USBD_LL_Init+0x98>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800eb36:	4b14      	ldr	r3, [pc, #80]	; (800eb88 <USBD_LL_Init+0x98>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800eb3c:	4812      	ldr	r0, [pc, #72]	; (800eb88 <USBD_LL_Init+0x98>)
 800eb3e:	f7f3 faeb 	bl	8002118 <HAL_PCD_Init>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d001      	beq.n	800eb4c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800eb48:	f7ff f81a 	bl	800db80 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb52:	2318      	movs	r3, #24
 800eb54:	2200      	movs	r2, #0
 800eb56:	2100      	movs	r1, #0
 800eb58:	f7f4 fdee 	bl	8003738 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb62:	2358      	movs	r3, #88	; 0x58
 800eb64:	2200      	movs	r2, #0
 800eb66:	2180      	movs	r1, #128	; 0x80
 800eb68:	f7f4 fde6 	bl	8003738 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb76:	2200      	movs	r2, #0
 800eb78:	2181      	movs	r1, #129	; 0x81
 800eb7a:	f7f4 fddd 	bl	8003738 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	2000c5c4 	.word	0x2000c5c4
 800eb8c:	40006800 	.word	0x40006800

0800eb90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7f3 fbc8 	bl	800233c <HAL_PCD_Start>
 800ebac:	4603      	mov	r3, r0
 800ebae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ebb0:	7bbb      	ldrb	r3, [r7, #14]
 800ebb2:	2b03      	cmp	r3, #3
 800ebb4:	d816      	bhi.n	800ebe4 <USBD_LL_Start+0x54>
 800ebb6:	a201      	add	r2, pc, #4	; (adr r2, 800ebbc <USBD_LL_Start+0x2c>)
 800ebb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebbc:	0800ebcd 	.word	0x0800ebcd
 800ebc0:	0800ebd3 	.word	0x0800ebd3
 800ebc4:	0800ebd9 	.word	0x0800ebd9
 800ebc8:	0800ebdf 	.word	0x0800ebdf
    case HAL_OK :
      usb_status = USBD_OK;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	73fb      	strb	r3, [r7, #15]
    break;
 800ebd0:	e00b      	b.n	800ebea <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebd2:	2303      	movs	r3, #3
 800ebd4:	73fb      	strb	r3, [r7, #15]
    break;
 800ebd6:	e008      	b.n	800ebea <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	73fb      	strb	r3, [r7, #15]
    break;
 800ebdc:	e005      	b.n	800ebea <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebde:	2303      	movs	r3, #3
 800ebe0:	73fb      	strb	r3, [r7, #15]
    break;
 800ebe2:	e002      	b.n	800ebea <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ebe4:	2303      	movs	r3, #3
 800ebe6:	73fb      	strb	r3, [r7, #15]
    break;
 800ebe8:	bf00      	nop
  }
  return usb_status;
 800ebea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	4608      	mov	r0, r1
 800ebfe:	4611      	mov	r1, r2
 800ec00:	461a      	mov	r2, r3
 800ec02:	4603      	mov	r3, r0
 800ec04:	70fb      	strb	r3, [r7, #3]
 800ec06:	460b      	mov	r3, r1
 800ec08:	70bb      	strb	r3, [r7, #2]
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec12:	2300      	movs	r3, #0
 800ec14:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ec1c:	78bb      	ldrb	r3, [r7, #2]
 800ec1e:	883a      	ldrh	r2, [r7, #0]
 800ec20:	78f9      	ldrb	r1, [r7, #3]
 800ec22:	f7f3 fd20 	bl	8002666 <HAL_PCD_EP_Open>
 800ec26:	4603      	mov	r3, r0
 800ec28:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ec2a:	7bbb      	ldrb	r3, [r7, #14]
 800ec2c:	2b03      	cmp	r3, #3
 800ec2e:	d817      	bhi.n	800ec60 <USBD_LL_OpenEP+0x6c>
 800ec30:	a201      	add	r2, pc, #4	; (adr r2, 800ec38 <USBD_LL_OpenEP+0x44>)
 800ec32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec36:	bf00      	nop
 800ec38:	0800ec49 	.word	0x0800ec49
 800ec3c:	0800ec4f 	.word	0x0800ec4f
 800ec40:	0800ec55 	.word	0x0800ec55
 800ec44:	0800ec5b 	.word	0x0800ec5b
    case HAL_OK :
      usb_status = USBD_OK;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec4c:	e00b      	b.n	800ec66 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec4e:	2303      	movs	r3, #3
 800ec50:	73fb      	strb	r3, [r7, #15]
    break;
 800ec52:	e008      	b.n	800ec66 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec54:	2301      	movs	r3, #1
 800ec56:	73fb      	strb	r3, [r7, #15]
    break;
 800ec58:	e005      	b.n	800ec66 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec5a:	2303      	movs	r3, #3
 800ec5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec5e:	e002      	b.n	800ec66 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ec60:	2303      	movs	r3, #3
 800ec62:	73fb      	strb	r3, [r7, #15]
    break;
 800ec64:	bf00      	nop
  }
  return usb_status;
 800ec66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec8a:	78fa      	ldrb	r2, [r7, #3]
 800ec8c:	4611      	mov	r1, r2
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7f3 fd4f 	bl	8002732 <HAL_PCD_EP_Close>
 800ec94:	4603      	mov	r3, r0
 800ec96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ec98:	7bbb      	ldrb	r3, [r7, #14]
 800ec9a:	2b03      	cmp	r3, #3
 800ec9c:	d816      	bhi.n	800eccc <USBD_LL_CloseEP+0x5c>
 800ec9e:	a201      	add	r2, pc, #4	; (adr r2, 800eca4 <USBD_LL_CloseEP+0x34>)
 800eca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca4:	0800ecb5 	.word	0x0800ecb5
 800eca8:	0800ecbb 	.word	0x0800ecbb
 800ecac:	0800ecc1 	.word	0x0800ecc1
 800ecb0:	0800ecc7 	.word	0x0800ecc7
    case HAL_OK :
      usb_status = USBD_OK;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ecb8:	e00b      	b.n	800ecd2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ecba:	2303      	movs	r3, #3
 800ecbc:	73fb      	strb	r3, [r7, #15]
    break;
 800ecbe:	e008      	b.n	800ecd2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	73fb      	strb	r3, [r7, #15]
    break;
 800ecc4:	e005      	b.n	800ecd2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ecc6:	2303      	movs	r3, #3
 800ecc8:	73fb      	strb	r3, [r7, #15]
    break;
 800ecca:	e002      	b.n	800ecd2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eccc:	2303      	movs	r3, #3
 800ecce:	73fb      	strb	r3, [r7, #15]
    break;
 800ecd0:	bf00      	nop
  }
  return usb_status;
 800ecd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3710      	adds	r7, #16
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	460b      	mov	r3, r1
 800ece6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ece8:	2300      	movs	r3, #0
 800ecea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecec:	2300      	movs	r3, #0
 800ecee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ecf6:	78fa      	ldrb	r2, [r7, #3]
 800ecf8:	4611      	mov	r1, r2
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7f3 fde1 	bl	80028c2 <HAL_PCD_EP_SetStall>
 800ed00:	4603      	mov	r3, r0
 800ed02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ed04:	7bbb      	ldrb	r3, [r7, #14]
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d816      	bhi.n	800ed38 <USBD_LL_StallEP+0x5c>
 800ed0a:	a201      	add	r2, pc, #4	; (adr r2, 800ed10 <USBD_LL_StallEP+0x34>)
 800ed0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed10:	0800ed21 	.word	0x0800ed21
 800ed14:	0800ed27 	.word	0x0800ed27
 800ed18:	0800ed2d 	.word	0x0800ed2d
 800ed1c:	0800ed33 	.word	0x0800ed33
    case HAL_OK :
      usb_status = USBD_OK;
 800ed20:	2300      	movs	r3, #0
 800ed22:	73fb      	strb	r3, [r7, #15]
    break;
 800ed24:	e00b      	b.n	800ed3e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed26:	2303      	movs	r3, #3
 800ed28:	73fb      	strb	r3, [r7, #15]
    break;
 800ed2a:	e008      	b.n	800ed3e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed30:	e005      	b.n	800ed3e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed32:	2303      	movs	r3, #3
 800ed34:	73fb      	strb	r3, [r7, #15]
    break;
 800ed36:	e002      	b.n	800ed3e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ed38:	2303      	movs	r3, #3
 800ed3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed3c:	bf00      	nop
  }
  return usb_status;
 800ed3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3710      	adds	r7, #16
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed62:	78fa      	ldrb	r2, [r7, #3]
 800ed64:	4611      	mov	r1, r2
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7f3 fe0b 	bl	8002982 <HAL_PCD_EP_ClrStall>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ed70:	7bbb      	ldrb	r3, [r7, #14]
 800ed72:	2b03      	cmp	r3, #3
 800ed74:	d816      	bhi.n	800eda4 <USBD_LL_ClearStallEP+0x5c>
 800ed76:	a201      	add	r2, pc, #4	; (adr r2, 800ed7c <USBD_LL_ClearStallEP+0x34>)
 800ed78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7c:	0800ed8d 	.word	0x0800ed8d
 800ed80:	0800ed93 	.word	0x0800ed93
 800ed84:	0800ed99 	.word	0x0800ed99
 800ed88:	0800ed9f 	.word	0x0800ed9f
    case HAL_OK :
      usb_status = USBD_OK;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed90:	e00b      	b.n	800edaa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed92:	2303      	movs	r3, #3
 800ed94:	73fb      	strb	r3, [r7, #15]
    break;
 800ed96:	e008      	b.n	800edaa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed9c:	e005      	b.n	800edaa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed9e:	2303      	movs	r3, #3
 800eda0:	73fb      	strb	r3, [r7, #15]
    break;
 800eda2:	e002      	b.n	800edaa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eda4:	2303      	movs	r3, #3
 800eda6:	73fb      	strb	r3, [r7, #15]
    break;
 800eda8:	bf00      	nop
  }
  return usb_status;
 800edaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800edac:	4618      	mov	r0, r3
 800edae:	3710      	adds	r7, #16
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b085      	sub	sp, #20
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	460b      	mov	r3, r1
 800edbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800edc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800edc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	da0c      	bge.n	800edea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800edd0:	78fb      	ldrb	r3, [r7, #3]
 800edd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edd6:	68f9      	ldr	r1, [r7, #12]
 800edd8:	1c5a      	adds	r2, r3, #1
 800edda:	4613      	mov	r3, r2
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	4413      	add	r3, r2
 800ede0:	00db      	lsls	r3, r3, #3
 800ede2:	440b      	add	r3, r1
 800ede4:	3302      	adds	r3, #2
 800ede6:	781b      	ldrb	r3, [r3, #0]
 800ede8:	e00b      	b.n	800ee02 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800edea:	78fb      	ldrb	r3, [r7, #3]
 800edec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800edf0:	68f9      	ldr	r1, [r7, #12]
 800edf2:	4613      	mov	r3, r2
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	4413      	add	r3, r2
 800edf8:	00db      	lsls	r3, r3, #3
 800edfa:	440b      	add	r3, r1
 800edfc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ee00:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3714      	adds	r7, #20
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr
	...

0800ee10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	460b      	mov	r3, r1
 800ee1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee20:	2300      	movs	r3, #0
 800ee22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee2a:	78fa      	ldrb	r2, [r7, #3]
 800ee2c:	4611      	mov	r1, r2
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7f3 fbf4 	bl	800261c <HAL_PCD_SetAddress>
 800ee34:	4603      	mov	r3, r0
 800ee36:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ee38:	7bbb      	ldrb	r3, [r7, #14]
 800ee3a:	2b03      	cmp	r3, #3
 800ee3c:	d816      	bhi.n	800ee6c <USBD_LL_SetUSBAddress+0x5c>
 800ee3e:	a201      	add	r2, pc, #4	; (adr r2, 800ee44 <USBD_LL_SetUSBAddress+0x34>)
 800ee40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee44:	0800ee55 	.word	0x0800ee55
 800ee48:	0800ee5b 	.word	0x0800ee5b
 800ee4c:	0800ee61 	.word	0x0800ee61
 800ee50:	0800ee67 	.word	0x0800ee67
    case HAL_OK :
      usb_status = USBD_OK;
 800ee54:	2300      	movs	r3, #0
 800ee56:	73fb      	strb	r3, [r7, #15]
    break;
 800ee58:	e00b      	b.n	800ee72 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee5a:	2303      	movs	r3, #3
 800ee5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ee5e:	e008      	b.n	800ee72 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee60:	2301      	movs	r3, #1
 800ee62:	73fb      	strb	r3, [r7, #15]
    break;
 800ee64:	e005      	b.n	800ee72 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee66:	2303      	movs	r3, #3
 800ee68:	73fb      	strb	r3, [r7, #15]
    break;
 800ee6a:	e002      	b.n	800ee72 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ee6c:	2303      	movs	r3, #3
 800ee6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee70:	bf00      	nop
  }
  return usb_status;
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	607a      	str	r2, [r7, #4]
 800ee86:	603b      	str	r3, [r7, #0]
 800ee88:	460b      	mov	r3, r1
 800ee8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee90:	2300      	movs	r3, #0
 800ee92:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee9a:	7af9      	ldrb	r1, [r7, #11]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	f7f3 fccc 	bl	800283c <HAL_PCD_EP_Transmit>
 800eea4:	4603      	mov	r3, r0
 800eea6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800eea8:	7dbb      	ldrb	r3, [r7, #22]
 800eeaa:	2b03      	cmp	r3, #3
 800eeac:	d816      	bhi.n	800eedc <USBD_LL_Transmit+0x60>
 800eeae:	a201      	add	r2, pc, #4	; (adr r2, 800eeb4 <USBD_LL_Transmit+0x38>)
 800eeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb4:	0800eec5 	.word	0x0800eec5
 800eeb8:	0800eecb 	.word	0x0800eecb
 800eebc:	0800eed1 	.word	0x0800eed1
 800eec0:	0800eed7 	.word	0x0800eed7
    case HAL_OK :
      usb_status = USBD_OK;
 800eec4:	2300      	movs	r3, #0
 800eec6:	75fb      	strb	r3, [r7, #23]
    break;
 800eec8:	e00b      	b.n	800eee2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eeca:	2303      	movs	r3, #3
 800eecc:	75fb      	strb	r3, [r7, #23]
    break;
 800eece:	e008      	b.n	800eee2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eed0:	2301      	movs	r3, #1
 800eed2:	75fb      	strb	r3, [r7, #23]
    break;
 800eed4:	e005      	b.n	800eee2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eed6:	2303      	movs	r3, #3
 800eed8:	75fb      	strb	r3, [r7, #23]
    break;
 800eeda:	e002      	b.n	800eee2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800eedc:	2303      	movs	r3, #3
 800eede:	75fb      	strb	r3, [r7, #23]
    break;
 800eee0:	bf00      	nop
  }
  return usb_status;
 800eee2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3718      	adds	r7, #24
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	607a      	str	r2, [r7, #4]
 800eef6:	603b      	str	r3, [r7, #0]
 800eef8:	460b      	mov	r3, r1
 800eefa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eefc:	2300      	movs	r3, #0
 800eefe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef00:	2300      	movs	r3, #0
 800ef02:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ef0a:	7af9      	ldrb	r1, [r7, #11]
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	f7f3 fc57 	bl	80027c2 <HAL_PCD_EP_Receive>
 800ef14:	4603      	mov	r3, r0
 800ef16:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ef18:	7dbb      	ldrb	r3, [r7, #22]
 800ef1a:	2b03      	cmp	r3, #3
 800ef1c:	d816      	bhi.n	800ef4c <USBD_LL_PrepareReceive+0x60>
 800ef1e:	a201      	add	r2, pc, #4	; (adr r2, 800ef24 <USBD_LL_PrepareReceive+0x38>)
 800ef20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef24:	0800ef35 	.word	0x0800ef35
 800ef28:	0800ef3b 	.word	0x0800ef3b
 800ef2c:	0800ef41 	.word	0x0800ef41
 800ef30:	0800ef47 	.word	0x0800ef47
    case HAL_OK :
      usb_status = USBD_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	75fb      	strb	r3, [r7, #23]
    break;
 800ef38:	e00b      	b.n	800ef52 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef3a:	2303      	movs	r3, #3
 800ef3c:	75fb      	strb	r3, [r7, #23]
    break;
 800ef3e:	e008      	b.n	800ef52 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef40:	2301      	movs	r3, #1
 800ef42:	75fb      	strb	r3, [r7, #23]
    break;
 800ef44:	e005      	b.n	800ef52 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef46:	2303      	movs	r3, #3
 800ef48:	75fb      	strb	r3, [r7, #23]
    break;
 800ef4a:	e002      	b.n	800ef52 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ef4c:	2303      	movs	r3, #3
 800ef4e:	75fb      	strb	r3, [r7, #23]
    break;
 800ef50:	bf00      	nop
  }
  return usb_status;
 800ef52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3718      	adds	r7, #24
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	460b      	mov	r3, r1
 800ef66:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ef68:	78fb      	ldrb	r3, [r7, #3]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d002      	beq.n	800ef74 <HAL_PCDEx_LPM_Callback+0x18>
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d013      	beq.n	800ef9a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ef72:	e023      	b.n	800efbc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	699b      	ldr	r3, [r3, #24]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d007      	beq.n	800ef8c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ef7c:	f000 f824 	bl	800efc8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef80:	4b10      	ldr	r3, [pc, #64]	; (800efc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800ef82:	691b      	ldr	r3, [r3, #16]
 800ef84:	4a0f      	ldr	r2, [pc, #60]	; (800efc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800ef86:	f023 0306 	bic.w	r3, r3, #6
 800ef8a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fc ff84 	bl	800bea0 <USBD_LL_Resume>
    break;
 800ef98:	e010      	b.n	800efbc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7fc ff68 	bl	800be76 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	699b      	ldr	r3, [r3, #24]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d005      	beq.n	800efba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800efae:	4b05      	ldr	r3, [pc, #20]	; (800efc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800efb0:	691b      	ldr	r3, [r3, #16]
 800efb2:	4a04      	ldr	r2, [pc, #16]	; (800efc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800efb4:	f043 0306 	orr.w	r3, r3, #6
 800efb8:	6113      	str	r3, [r2, #16]
    break;
 800efba:	bf00      	nop
}
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	e000ed00 	.word	0xe000ed00

0800efc8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800efcc:	f7fe fd2e 	bl	800da2c <SystemClock_Config>
}
 800efd0:	bf00      	nop
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	4603      	mov	r3, r0
 800efdc:	6039      	str	r1, [r7, #0]
 800efde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	2212      	movs	r2, #18
 800efe4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800efe6:	4b03      	ldr	r3, [pc, #12]	; (800eff4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800efe8:	4618      	mov	r0, r3
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	2000013c 	.word	0x2000013c

0800eff8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	4603      	mov	r3, r0
 800f000:	6039      	str	r1, [r7, #0]
 800f002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	2204      	movs	r2, #4
 800f008:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f00a:	4b03      	ldr	r3, [pc, #12]	; (800f018 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr
 800f018:	2000015c 	.word	0x2000015c

0800f01c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	4603      	mov	r3, r0
 800f024:	6039      	str	r1, [r7, #0]
 800f026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f028:	79fb      	ldrb	r3, [r7, #7]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d105      	bne.n	800f03a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	4907      	ldr	r1, [pc, #28]	; (800f050 <USBD_FS_ProductStrDescriptor+0x34>)
 800f032:	4808      	ldr	r0, [pc, #32]	; (800f054 <USBD_FS_ProductStrDescriptor+0x38>)
 800f034:	f7fd fcef 	bl	800ca16 <USBD_GetString>
 800f038:	e004      	b.n	800f044 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f03a:	683a      	ldr	r2, [r7, #0]
 800f03c:	4904      	ldr	r1, [pc, #16]	; (800f050 <USBD_FS_ProductStrDescriptor+0x34>)
 800f03e:	4805      	ldr	r0, [pc, #20]	; (800f054 <USBD_FS_ProductStrDescriptor+0x38>)
 800f040:	f7fd fce9 	bl	800ca16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f044:	4b02      	ldr	r3, [pc, #8]	; (800f050 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f046:	4618      	mov	r0, r3
 800f048:	3708      	adds	r7, #8
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	2000c8b8 	.word	0x2000c8b8
 800f054:	0800fd8c 	.word	0x0800fd8c

0800f058 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	4603      	mov	r3, r0
 800f060:	6039      	str	r1, [r7, #0]
 800f062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f064:	683a      	ldr	r2, [r7, #0]
 800f066:	4904      	ldr	r1, [pc, #16]	; (800f078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f068:	4804      	ldr	r0, [pc, #16]	; (800f07c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f06a:	f7fd fcd4 	bl	800ca16 <USBD_GetString>
  return USBD_StrDesc;
 800f06e:	4b02      	ldr	r3, [pc, #8]	; (800f078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f070:	4618      	mov	r0, r3
 800f072:	3708      	adds	r7, #8
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	2000c8b8 	.word	0x2000c8b8
 800f07c:	0800fda4 	.word	0x0800fda4

0800f080 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	4603      	mov	r3, r0
 800f088:	6039      	str	r1, [r7, #0]
 800f08a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	221a      	movs	r2, #26
 800f090:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f092:	f000 f855 	bl	800f140 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f096:	4b02      	ldr	r3, [pc, #8]	; (800f0a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3708      	adds	r7, #8
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	20000160 	.word	0x20000160

0800f0a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	6039      	str	r1, [r7, #0]
 800f0ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f0b0:	79fb      	ldrb	r3, [r7, #7]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d105      	bne.n	800f0c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f0b6:	683a      	ldr	r2, [r7, #0]
 800f0b8:	4907      	ldr	r1, [pc, #28]	; (800f0d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f0ba:	4808      	ldr	r0, [pc, #32]	; (800f0dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800f0bc:	f7fd fcab 	bl	800ca16 <USBD_GetString>
 800f0c0:	e004      	b.n	800f0cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f0c2:	683a      	ldr	r2, [r7, #0]
 800f0c4:	4904      	ldr	r1, [pc, #16]	; (800f0d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f0c6:	4805      	ldr	r0, [pc, #20]	; (800f0dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800f0c8:	f7fd fca5 	bl	800ca16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f0cc:	4b02      	ldr	r3, [pc, #8]	; (800f0d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3708      	adds	r7, #8
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	2000c8b8 	.word	0x2000c8b8
 800f0dc:	0800fdb8 	.word	0x0800fdb8

0800f0e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	6039      	str	r1, [r7, #0]
 800f0ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f0ec:	79fb      	ldrb	r3, [r7, #7]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d105      	bne.n	800f0fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f0f2:	683a      	ldr	r2, [r7, #0]
 800f0f4:	4907      	ldr	r1, [pc, #28]	; (800f114 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f0f6:	4808      	ldr	r0, [pc, #32]	; (800f118 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f0f8:	f7fd fc8d 	bl	800ca16 <USBD_GetString>
 800f0fc:	e004      	b.n	800f108 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f0fe:	683a      	ldr	r2, [r7, #0]
 800f100:	4904      	ldr	r1, [pc, #16]	; (800f114 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f102:	4805      	ldr	r0, [pc, #20]	; (800f118 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f104:	f7fd fc87 	bl	800ca16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f108:	4b02      	ldr	r3, [pc, #8]	; (800f114 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	2000c8b8 	.word	0x2000c8b8
 800f118:	0800fdc4 	.word	0x0800fdc4

0800f11c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	6039      	str	r1, [r7, #0]
 800f126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	220c      	movs	r2, #12
 800f12c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f12e:	4b03      	ldr	r3, [pc, #12]	; (800f13c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f130:	4618      	mov	r0, r3
 800f132:	370c      	adds	r7, #12
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr
 800f13c:	20000150 	.word	0x20000150

0800f140 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f146:	4b0f      	ldr	r3, [pc, #60]	; (800f184 <Get_SerialNum+0x44>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f14c:	4b0e      	ldr	r3, [pc, #56]	; (800f188 <Get_SerialNum+0x48>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f152:	4b0e      	ldr	r3, [pc, #56]	; (800f18c <Get_SerialNum+0x4c>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4413      	add	r3, r2
 800f15e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d009      	beq.n	800f17a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f166:	2208      	movs	r2, #8
 800f168:	4909      	ldr	r1, [pc, #36]	; (800f190 <Get_SerialNum+0x50>)
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f000 f814 	bl	800f198 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f170:	2204      	movs	r2, #4
 800f172:	4908      	ldr	r1, [pc, #32]	; (800f194 <Get_SerialNum+0x54>)
 800f174:	68b8      	ldr	r0, [r7, #8]
 800f176:	f000 f80f 	bl	800f198 <IntToUnicode>
  }
}
 800f17a:	bf00      	nop
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	1fff7590 	.word	0x1fff7590
 800f188:	1fff7594 	.word	0x1fff7594
 800f18c:	1fff7598 	.word	0x1fff7598
 800f190:	20000162 	.word	0x20000162
 800f194:	20000172 	.word	0x20000172

0800f198 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f198:	b480      	push	{r7}
 800f19a:	b087      	sub	sp, #28
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	75fb      	strb	r3, [r7, #23]
 800f1ae:	e027      	b.n	800f200 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	0f1b      	lsrs	r3, r3, #28
 800f1b4:	2b09      	cmp	r3, #9
 800f1b6:	d80b      	bhi.n	800f1d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	0f1b      	lsrs	r3, r3, #28
 800f1bc:	b2da      	uxtb	r2, r3
 800f1be:	7dfb      	ldrb	r3, [r7, #23]
 800f1c0:	005b      	lsls	r3, r3, #1
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	440b      	add	r3, r1
 800f1c8:	3230      	adds	r2, #48	; 0x30
 800f1ca:	b2d2      	uxtb	r2, r2
 800f1cc:	701a      	strb	r2, [r3, #0]
 800f1ce:	e00a      	b.n	800f1e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	0f1b      	lsrs	r3, r3, #28
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	7dfb      	ldrb	r3, [r7, #23]
 800f1d8:	005b      	lsls	r3, r3, #1
 800f1da:	4619      	mov	r1, r3
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	440b      	add	r3, r1
 800f1e0:	3237      	adds	r2, #55	; 0x37
 800f1e2:	b2d2      	uxtb	r2, r2
 800f1e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	011b      	lsls	r3, r3, #4
 800f1ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f1ec:	7dfb      	ldrb	r3, [r7, #23]
 800f1ee:	005b      	lsls	r3, r3, #1
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	68ba      	ldr	r2, [r7, #8]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f1fa:	7dfb      	ldrb	r3, [r7, #23]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	75fb      	strb	r3, [r7, #23]
 800f200:	7dfa      	ldrb	r2, [r7, #23]
 800f202:	79fb      	ldrb	r3, [r7, #7]
 800f204:	429a      	cmp	r2, r3
 800f206:	d3d3      	bcc.n	800f1b0 <IntToUnicode+0x18>
  }
}
 800f208:	bf00      	nop
 800f20a:	371c      	adds	r7, #28
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800f214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f24c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800f218:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800f21a:	e003      	b.n	800f224 <LoopCopyDataInit>

0800f21c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800f21c:	4b0c      	ldr	r3, [pc, #48]	; (800f250 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800f21e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800f220:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800f222:	3104      	adds	r1, #4

0800f224 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800f224:	480b      	ldr	r0, [pc, #44]	; (800f254 <LoopForever+0xa>)
	ldr	r3, =_edata
 800f226:	4b0c      	ldr	r3, [pc, #48]	; (800f258 <LoopForever+0xe>)
	adds	r2, r0, r1
 800f228:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800f22a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800f22c:	d3f6      	bcc.n	800f21c <CopyDataInit>
	ldr	r2, =_sbss
 800f22e:	4a0b      	ldr	r2, [pc, #44]	; (800f25c <LoopForever+0x12>)
	b	LoopFillZerobss
 800f230:	e002      	b.n	800f238 <LoopFillZerobss>

0800f232 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800f232:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800f234:	f842 3b04 	str.w	r3, [r2], #4

0800f238 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800f238:	4b09      	ldr	r3, [pc, #36]	; (800f260 <LoopForever+0x16>)
	cmp	r2, r3
 800f23a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800f23c:	d3f9      	bcc.n	800f232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800f23e:	f7ff f86b 	bl	800e318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f242:	f000 f817 	bl	800f274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800f246:	f7fe fba7 	bl	800d998 <main>

0800f24a <LoopForever>:

LoopForever:
    b LoopForever
 800f24a:	e7fe      	b.n	800f24a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800f24c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800f250:	0800fe9c 	.word	0x0800fe9c
	ldr	r0, =_sdata
 800f254:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800f258:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 800f25c:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 800f260:	2000cabc 	.word	0x2000cabc

0800f264 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800f264:	e7fe      	b.n	800f264 <ADC1_IRQHandler>
	...

0800f268 <__errno>:
 800f268:	4b01      	ldr	r3, [pc, #4]	; (800f270 <__errno+0x8>)
 800f26a:	6818      	ldr	r0, [r3, #0]
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	2000017c 	.word	0x2000017c

0800f274 <__libc_init_array>:
 800f274:	b570      	push	{r4, r5, r6, lr}
 800f276:	4e0d      	ldr	r6, [pc, #52]	; (800f2ac <__libc_init_array+0x38>)
 800f278:	4c0d      	ldr	r4, [pc, #52]	; (800f2b0 <__libc_init_array+0x3c>)
 800f27a:	1ba4      	subs	r4, r4, r6
 800f27c:	10a4      	asrs	r4, r4, #2
 800f27e:	2500      	movs	r5, #0
 800f280:	42a5      	cmp	r5, r4
 800f282:	d109      	bne.n	800f298 <__libc_init_array+0x24>
 800f284:	4e0b      	ldr	r6, [pc, #44]	; (800f2b4 <__libc_init_array+0x40>)
 800f286:	4c0c      	ldr	r4, [pc, #48]	; (800f2b8 <__libc_init_array+0x44>)
 800f288:	f000 fc98 	bl	800fbbc <_init>
 800f28c:	1ba4      	subs	r4, r4, r6
 800f28e:	10a4      	asrs	r4, r4, #2
 800f290:	2500      	movs	r5, #0
 800f292:	42a5      	cmp	r5, r4
 800f294:	d105      	bne.n	800f2a2 <__libc_init_array+0x2e>
 800f296:	bd70      	pop	{r4, r5, r6, pc}
 800f298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f29c:	4798      	blx	r3
 800f29e:	3501      	adds	r5, #1
 800f2a0:	e7ee      	b.n	800f280 <__libc_init_array+0xc>
 800f2a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f2a6:	4798      	blx	r3
 800f2a8:	3501      	adds	r5, #1
 800f2aa:	e7f2      	b.n	800f292 <__libc_init_array+0x1e>
 800f2ac:	0800fe94 	.word	0x0800fe94
 800f2b0:	0800fe94 	.word	0x0800fe94
 800f2b4:	0800fe94 	.word	0x0800fe94
 800f2b8:	0800fe98 	.word	0x0800fe98

0800f2bc <malloc>:
 800f2bc:	4b02      	ldr	r3, [pc, #8]	; (800f2c8 <malloc+0xc>)
 800f2be:	4601      	mov	r1, r0
 800f2c0:	6818      	ldr	r0, [r3, #0]
 800f2c2:	f000 b861 	b.w	800f388 <_malloc_r>
 800f2c6:	bf00      	nop
 800f2c8:	2000017c 	.word	0x2000017c

0800f2cc <free>:
 800f2cc:	4b02      	ldr	r3, [pc, #8]	; (800f2d8 <free+0xc>)
 800f2ce:	4601      	mov	r1, r0
 800f2d0:	6818      	ldr	r0, [r3, #0]
 800f2d2:	f000 b80b 	b.w	800f2ec <_free_r>
 800f2d6:	bf00      	nop
 800f2d8:	2000017c 	.word	0x2000017c

0800f2dc <memset>:
 800f2dc:	4402      	add	r2, r0
 800f2de:	4603      	mov	r3, r0
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d100      	bne.n	800f2e6 <memset+0xa>
 800f2e4:	4770      	bx	lr
 800f2e6:	f803 1b01 	strb.w	r1, [r3], #1
 800f2ea:	e7f9      	b.n	800f2e0 <memset+0x4>

0800f2ec <_free_r>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	2900      	cmp	r1, #0
 800f2f2:	d045      	beq.n	800f380 <_free_r+0x94>
 800f2f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2f8:	1f0c      	subs	r4, r1, #4
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	bfb8      	it	lt
 800f2fe:	18e4      	addlt	r4, r4, r3
 800f300:	f000 fbae 	bl	800fa60 <__malloc_lock>
 800f304:	4a1f      	ldr	r2, [pc, #124]	; (800f384 <_free_r+0x98>)
 800f306:	6813      	ldr	r3, [r2, #0]
 800f308:	4610      	mov	r0, r2
 800f30a:	b933      	cbnz	r3, 800f31a <_free_r+0x2e>
 800f30c:	6063      	str	r3, [r4, #4]
 800f30e:	6014      	str	r4, [r2, #0]
 800f310:	4628      	mov	r0, r5
 800f312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f316:	f000 bba4 	b.w	800fa62 <__malloc_unlock>
 800f31a:	42a3      	cmp	r3, r4
 800f31c:	d90c      	bls.n	800f338 <_free_r+0x4c>
 800f31e:	6821      	ldr	r1, [r4, #0]
 800f320:	1862      	adds	r2, r4, r1
 800f322:	4293      	cmp	r3, r2
 800f324:	bf04      	itt	eq
 800f326:	681a      	ldreq	r2, [r3, #0]
 800f328:	685b      	ldreq	r3, [r3, #4]
 800f32a:	6063      	str	r3, [r4, #4]
 800f32c:	bf04      	itt	eq
 800f32e:	1852      	addeq	r2, r2, r1
 800f330:	6022      	streq	r2, [r4, #0]
 800f332:	6004      	str	r4, [r0, #0]
 800f334:	e7ec      	b.n	800f310 <_free_r+0x24>
 800f336:	4613      	mov	r3, r2
 800f338:	685a      	ldr	r2, [r3, #4]
 800f33a:	b10a      	cbz	r2, 800f340 <_free_r+0x54>
 800f33c:	42a2      	cmp	r2, r4
 800f33e:	d9fa      	bls.n	800f336 <_free_r+0x4a>
 800f340:	6819      	ldr	r1, [r3, #0]
 800f342:	1858      	adds	r0, r3, r1
 800f344:	42a0      	cmp	r0, r4
 800f346:	d10b      	bne.n	800f360 <_free_r+0x74>
 800f348:	6820      	ldr	r0, [r4, #0]
 800f34a:	4401      	add	r1, r0
 800f34c:	1858      	adds	r0, r3, r1
 800f34e:	4282      	cmp	r2, r0
 800f350:	6019      	str	r1, [r3, #0]
 800f352:	d1dd      	bne.n	800f310 <_free_r+0x24>
 800f354:	6810      	ldr	r0, [r2, #0]
 800f356:	6852      	ldr	r2, [r2, #4]
 800f358:	605a      	str	r2, [r3, #4]
 800f35a:	4401      	add	r1, r0
 800f35c:	6019      	str	r1, [r3, #0]
 800f35e:	e7d7      	b.n	800f310 <_free_r+0x24>
 800f360:	d902      	bls.n	800f368 <_free_r+0x7c>
 800f362:	230c      	movs	r3, #12
 800f364:	602b      	str	r3, [r5, #0]
 800f366:	e7d3      	b.n	800f310 <_free_r+0x24>
 800f368:	6820      	ldr	r0, [r4, #0]
 800f36a:	1821      	adds	r1, r4, r0
 800f36c:	428a      	cmp	r2, r1
 800f36e:	bf04      	itt	eq
 800f370:	6811      	ldreq	r1, [r2, #0]
 800f372:	6852      	ldreq	r2, [r2, #4]
 800f374:	6062      	str	r2, [r4, #4]
 800f376:	bf04      	itt	eq
 800f378:	1809      	addeq	r1, r1, r0
 800f37a:	6021      	streq	r1, [r4, #0]
 800f37c:	605c      	str	r4, [r3, #4]
 800f37e:	e7c7      	b.n	800f310 <_free_r+0x24>
 800f380:	bd38      	pop	{r3, r4, r5, pc}
 800f382:	bf00      	nop
 800f384:	20000314 	.word	0x20000314

0800f388 <_malloc_r>:
 800f388:	b570      	push	{r4, r5, r6, lr}
 800f38a:	1ccd      	adds	r5, r1, #3
 800f38c:	f025 0503 	bic.w	r5, r5, #3
 800f390:	3508      	adds	r5, #8
 800f392:	2d0c      	cmp	r5, #12
 800f394:	bf38      	it	cc
 800f396:	250c      	movcc	r5, #12
 800f398:	2d00      	cmp	r5, #0
 800f39a:	4606      	mov	r6, r0
 800f39c:	db01      	blt.n	800f3a2 <_malloc_r+0x1a>
 800f39e:	42a9      	cmp	r1, r5
 800f3a0:	d903      	bls.n	800f3aa <_malloc_r+0x22>
 800f3a2:	230c      	movs	r3, #12
 800f3a4:	6033      	str	r3, [r6, #0]
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	bd70      	pop	{r4, r5, r6, pc}
 800f3aa:	f000 fb59 	bl	800fa60 <__malloc_lock>
 800f3ae:	4a21      	ldr	r2, [pc, #132]	; (800f434 <_malloc_r+0xac>)
 800f3b0:	6814      	ldr	r4, [r2, #0]
 800f3b2:	4621      	mov	r1, r4
 800f3b4:	b991      	cbnz	r1, 800f3dc <_malloc_r+0x54>
 800f3b6:	4c20      	ldr	r4, [pc, #128]	; (800f438 <_malloc_r+0xb0>)
 800f3b8:	6823      	ldr	r3, [r4, #0]
 800f3ba:	b91b      	cbnz	r3, 800f3c4 <_malloc_r+0x3c>
 800f3bc:	4630      	mov	r0, r6
 800f3be:	f000 f8a1 	bl	800f504 <_sbrk_r>
 800f3c2:	6020      	str	r0, [r4, #0]
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	4630      	mov	r0, r6
 800f3c8:	f000 f89c 	bl	800f504 <_sbrk_r>
 800f3cc:	1c43      	adds	r3, r0, #1
 800f3ce:	d124      	bne.n	800f41a <_malloc_r+0x92>
 800f3d0:	230c      	movs	r3, #12
 800f3d2:	6033      	str	r3, [r6, #0]
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	f000 fb44 	bl	800fa62 <__malloc_unlock>
 800f3da:	e7e4      	b.n	800f3a6 <_malloc_r+0x1e>
 800f3dc:	680b      	ldr	r3, [r1, #0]
 800f3de:	1b5b      	subs	r3, r3, r5
 800f3e0:	d418      	bmi.n	800f414 <_malloc_r+0x8c>
 800f3e2:	2b0b      	cmp	r3, #11
 800f3e4:	d90f      	bls.n	800f406 <_malloc_r+0x7e>
 800f3e6:	600b      	str	r3, [r1, #0]
 800f3e8:	50cd      	str	r5, [r1, r3]
 800f3ea:	18cc      	adds	r4, r1, r3
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	f000 fb38 	bl	800fa62 <__malloc_unlock>
 800f3f2:	f104 000b 	add.w	r0, r4, #11
 800f3f6:	1d23      	adds	r3, r4, #4
 800f3f8:	f020 0007 	bic.w	r0, r0, #7
 800f3fc:	1ac3      	subs	r3, r0, r3
 800f3fe:	d0d3      	beq.n	800f3a8 <_malloc_r+0x20>
 800f400:	425a      	negs	r2, r3
 800f402:	50e2      	str	r2, [r4, r3]
 800f404:	e7d0      	b.n	800f3a8 <_malloc_r+0x20>
 800f406:	428c      	cmp	r4, r1
 800f408:	684b      	ldr	r3, [r1, #4]
 800f40a:	bf16      	itet	ne
 800f40c:	6063      	strne	r3, [r4, #4]
 800f40e:	6013      	streq	r3, [r2, #0]
 800f410:	460c      	movne	r4, r1
 800f412:	e7eb      	b.n	800f3ec <_malloc_r+0x64>
 800f414:	460c      	mov	r4, r1
 800f416:	6849      	ldr	r1, [r1, #4]
 800f418:	e7cc      	b.n	800f3b4 <_malloc_r+0x2c>
 800f41a:	1cc4      	adds	r4, r0, #3
 800f41c:	f024 0403 	bic.w	r4, r4, #3
 800f420:	42a0      	cmp	r0, r4
 800f422:	d005      	beq.n	800f430 <_malloc_r+0xa8>
 800f424:	1a21      	subs	r1, r4, r0
 800f426:	4630      	mov	r0, r6
 800f428:	f000 f86c 	bl	800f504 <_sbrk_r>
 800f42c:	3001      	adds	r0, #1
 800f42e:	d0cf      	beq.n	800f3d0 <_malloc_r+0x48>
 800f430:	6025      	str	r5, [r4, #0]
 800f432:	e7db      	b.n	800f3ec <_malloc_r+0x64>
 800f434:	20000314 	.word	0x20000314
 800f438:	20000318 	.word	0x20000318

0800f43c <_puts_r>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	460e      	mov	r6, r1
 800f440:	4605      	mov	r5, r0
 800f442:	b118      	cbz	r0, 800f44c <_puts_r+0x10>
 800f444:	6983      	ldr	r3, [r0, #24]
 800f446:	b90b      	cbnz	r3, 800f44c <_puts_r+0x10>
 800f448:	f000 fa1c 	bl	800f884 <__sinit>
 800f44c:	69ab      	ldr	r3, [r5, #24]
 800f44e:	68ac      	ldr	r4, [r5, #8]
 800f450:	b913      	cbnz	r3, 800f458 <_puts_r+0x1c>
 800f452:	4628      	mov	r0, r5
 800f454:	f000 fa16 	bl	800f884 <__sinit>
 800f458:	4b23      	ldr	r3, [pc, #140]	; (800f4e8 <_puts_r+0xac>)
 800f45a:	429c      	cmp	r4, r3
 800f45c:	d117      	bne.n	800f48e <_puts_r+0x52>
 800f45e:	686c      	ldr	r4, [r5, #4]
 800f460:	89a3      	ldrh	r3, [r4, #12]
 800f462:	071b      	lsls	r3, r3, #28
 800f464:	d51d      	bpl.n	800f4a2 <_puts_r+0x66>
 800f466:	6923      	ldr	r3, [r4, #16]
 800f468:	b1db      	cbz	r3, 800f4a2 <_puts_r+0x66>
 800f46a:	3e01      	subs	r6, #1
 800f46c:	68a3      	ldr	r3, [r4, #8]
 800f46e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f472:	3b01      	subs	r3, #1
 800f474:	60a3      	str	r3, [r4, #8]
 800f476:	b9e9      	cbnz	r1, 800f4b4 <_puts_r+0x78>
 800f478:	2b00      	cmp	r3, #0
 800f47a:	da2e      	bge.n	800f4da <_puts_r+0x9e>
 800f47c:	4622      	mov	r2, r4
 800f47e:	210a      	movs	r1, #10
 800f480:	4628      	mov	r0, r5
 800f482:	f000 f84f 	bl	800f524 <__swbuf_r>
 800f486:	3001      	adds	r0, #1
 800f488:	d011      	beq.n	800f4ae <_puts_r+0x72>
 800f48a:	200a      	movs	r0, #10
 800f48c:	e011      	b.n	800f4b2 <_puts_r+0x76>
 800f48e:	4b17      	ldr	r3, [pc, #92]	; (800f4ec <_puts_r+0xb0>)
 800f490:	429c      	cmp	r4, r3
 800f492:	d101      	bne.n	800f498 <_puts_r+0x5c>
 800f494:	68ac      	ldr	r4, [r5, #8]
 800f496:	e7e3      	b.n	800f460 <_puts_r+0x24>
 800f498:	4b15      	ldr	r3, [pc, #84]	; (800f4f0 <_puts_r+0xb4>)
 800f49a:	429c      	cmp	r4, r3
 800f49c:	bf08      	it	eq
 800f49e:	68ec      	ldreq	r4, [r5, #12]
 800f4a0:	e7de      	b.n	800f460 <_puts_r+0x24>
 800f4a2:	4621      	mov	r1, r4
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	f000 f88f 	bl	800f5c8 <__swsetup_r>
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	d0dd      	beq.n	800f46a <_puts_r+0x2e>
 800f4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b2:	bd70      	pop	{r4, r5, r6, pc}
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	da04      	bge.n	800f4c2 <_puts_r+0x86>
 800f4b8:	69a2      	ldr	r2, [r4, #24]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	dc06      	bgt.n	800f4cc <_puts_r+0x90>
 800f4be:	290a      	cmp	r1, #10
 800f4c0:	d004      	beq.n	800f4cc <_puts_r+0x90>
 800f4c2:	6823      	ldr	r3, [r4, #0]
 800f4c4:	1c5a      	adds	r2, r3, #1
 800f4c6:	6022      	str	r2, [r4, #0]
 800f4c8:	7019      	strb	r1, [r3, #0]
 800f4ca:	e7cf      	b.n	800f46c <_puts_r+0x30>
 800f4cc:	4622      	mov	r2, r4
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	f000 f828 	bl	800f524 <__swbuf_r>
 800f4d4:	3001      	adds	r0, #1
 800f4d6:	d1c9      	bne.n	800f46c <_puts_r+0x30>
 800f4d8:	e7e9      	b.n	800f4ae <_puts_r+0x72>
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	200a      	movs	r0, #10
 800f4de:	1c5a      	adds	r2, r3, #1
 800f4e0:	6022      	str	r2, [r4, #0]
 800f4e2:	7018      	strb	r0, [r3, #0]
 800f4e4:	e7e5      	b.n	800f4b2 <_puts_r+0x76>
 800f4e6:	bf00      	nop
 800f4e8:	0800fe54 	.word	0x0800fe54
 800f4ec:	0800fe74 	.word	0x0800fe74
 800f4f0:	0800fe34 	.word	0x0800fe34

0800f4f4 <puts>:
 800f4f4:	4b02      	ldr	r3, [pc, #8]	; (800f500 <puts+0xc>)
 800f4f6:	4601      	mov	r1, r0
 800f4f8:	6818      	ldr	r0, [r3, #0]
 800f4fa:	f7ff bf9f 	b.w	800f43c <_puts_r>
 800f4fe:	bf00      	nop
 800f500:	2000017c 	.word	0x2000017c

0800f504 <_sbrk_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4c06      	ldr	r4, [pc, #24]	; (800f520 <_sbrk_r+0x1c>)
 800f508:	2300      	movs	r3, #0
 800f50a:	4605      	mov	r5, r0
 800f50c:	4608      	mov	r0, r1
 800f50e:	6023      	str	r3, [r4, #0]
 800f510:	f7fe fed6 	bl	800e2c0 <_sbrk>
 800f514:	1c43      	adds	r3, r0, #1
 800f516:	d102      	bne.n	800f51e <_sbrk_r+0x1a>
 800f518:	6823      	ldr	r3, [r4, #0]
 800f51a:	b103      	cbz	r3, 800f51e <_sbrk_r+0x1a>
 800f51c:	602b      	str	r3, [r5, #0]
 800f51e:	bd38      	pop	{r3, r4, r5, pc}
 800f520:	2000cab8 	.word	0x2000cab8

0800f524 <__swbuf_r>:
 800f524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f526:	460e      	mov	r6, r1
 800f528:	4614      	mov	r4, r2
 800f52a:	4605      	mov	r5, r0
 800f52c:	b118      	cbz	r0, 800f536 <__swbuf_r+0x12>
 800f52e:	6983      	ldr	r3, [r0, #24]
 800f530:	b90b      	cbnz	r3, 800f536 <__swbuf_r+0x12>
 800f532:	f000 f9a7 	bl	800f884 <__sinit>
 800f536:	4b21      	ldr	r3, [pc, #132]	; (800f5bc <__swbuf_r+0x98>)
 800f538:	429c      	cmp	r4, r3
 800f53a:	d12a      	bne.n	800f592 <__swbuf_r+0x6e>
 800f53c:	686c      	ldr	r4, [r5, #4]
 800f53e:	69a3      	ldr	r3, [r4, #24]
 800f540:	60a3      	str	r3, [r4, #8]
 800f542:	89a3      	ldrh	r3, [r4, #12]
 800f544:	071a      	lsls	r2, r3, #28
 800f546:	d52e      	bpl.n	800f5a6 <__swbuf_r+0x82>
 800f548:	6923      	ldr	r3, [r4, #16]
 800f54a:	b363      	cbz	r3, 800f5a6 <__swbuf_r+0x82>
 800f54c:	6923      	ldr	r3, [r4, #16]
 800f54e:	6820      	ldr	r0, [r4, #0]
 800f550:	1ac0      	subs	r0, r0, r3
 800f552:	6963      	ldr	r3, [r4, #20]
 800f554:	b2f6      	uxtb	r6, r6
 800f556:	4283      	cmp	r3, r0
 800f558:	4637      	mov	r7, r6
 800f55a:	dc04      	bgt.n	800f566 <__swbuf_r+0x42>
 800f55c:	4621      	mov	r1, r4
 800f55e:	4628      	mov	r0, r5
 800f560:	f000 f926 	bl	800f7b0 <_fflush_r>
 800f564:	bb28      	cbnz	r0, 800f5b2 <__swbuf_r+0x8e>
 800f566:	68a3      	ldr	r3, [r4, #8]
 800f568:	3b01      	subs	r3, #1
 800f56a:	60a3      	str	r3, [r4, #8]
 800f56c:	6823      	ldr	r3, [r4, #0]
 800f56e:	1c5a      	adds	r2, r3, #1
 800f570:	6022      	str	r2, [r4, #0]
 800f572:	701e      	strb	r6, [r3, #0]
 800f574:	6963      	ldr	r3, [r4, #20]
 800f576:	3001      	adds	r0, #1
 800f578:	4283      	cmp	r3, r0
 800f57a:	d004      	beq.n	800f586 <__swbuf_r+0x62>
 800f57c:	89a3      	ldrh	r3, [r4, #12]
 800f57e:	07db      	lsls	r3, r3, #31
 800f580:	d519      	bpl.n	800f5b6 <__swbuf_r+0x92>
 800f582:	2e0a      	cmp	r6, #10
 800f584:	d117      	bne.n	800f5b6 <__swbuf_r+0x92>
 800f586:	4621      	mov	r1, r4
 800f588:	4628      	mov	r0, r5
 800f58a:	f000 f911 	bl	800f7b0 <_fflush_r>
 800f58e:	b190      	cbz	r0, 800f5b6 <__swbuf_r+0x92>
 800f590:	e00f      	b.n	800f5b2 <__swbuf_r+0x8e>
 800f592:	4b0b      	ldr	r3, [pc, #44]	; (800f5c0 <__swbuf_r+0x9c>)
 800f594:	429c      	cmp	r4, r3
 800f596:	d101      	bne.n	800f59c <__swbuf_r+0x78>
 800f598:	68ac      	ldr	r4, [r5, #8]
 800f59a:	e7d0      	b.n	800f53e <__swbuf_r+0x1a>
 800f59c:	4b09      	ldr	r3, [pc, #36]	; (800f5c4 <__swbuf_r+0xa0>)
 800f59e:	429c      	cmp	r4, r3
 800f5a0:	bf08      	it	eq
 800f5a2:	68ec      	ldreq	r4, [r5, #12]
 800f5a4:	e7cb      	b.n	800f53e <__swbuf_r+0x1a>
 800f5a6:	4621      	mov	r1, r4
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	f000 f80d 	bl	800f5c8 <__swsetup_r>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	d0cc      	beq.n	800f54c <__swbuf_r+0x28>
 800f5b2:	f04f 37ff 	mov.w	r7, #4294967295
 800f5b6:	4638      	mov	r0, r7
 800f5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	0800fe54 	.word	0x0800fe54
 800f5c0:	0800fe74 	.word	0x0800fe74
 800f5c4:	0800fe34 	.word	0x0800fe34

0800f5c8 <__swsetup_r>:
 800f5c8:	4b32      	ldr	r3, [pc, #200]	; (800f694 <__swsetup_r+0xcc>)
 800f5ca:	b570      	push	{r4, r5, r6, lr}
 800f5cc:	681d      	ldr	r5, [r3, #0]
 800f5ce:	4606      	mov	r6, r0
 800f5d0:	460c      	mov	r4, r1
 800f5d2:	b125      	cbz	r5, 800f5de <__swsetup_r+0x16>
 800f5d4:	69ab      	ldr	r3, [r5, #24]
 800f5d6:	b913      	cbnz	r3, 800f5de <__swsetup_r+0x16>
 800f5d8:	4628      	mov	r0, r5
 800f5da:	f000 f953 	bl	800f884 <__sinit>
 800f5de:	4b2e      	ldr	r3, [pc, #184]	; (800f698 <__swsetup_r+0xd0>)
 800f5e0:	429c      	cmp	r4, r3
 800f5e2:	d10f      	bne.n	800f604 <__swsetup_r+0x3c>
 800f5e4:	686c      	ldr	r4, [r5, #4]
 800f5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	0715      	lsls	r5, r2, #28
 800f5ee:	d42c      	bmi.n	800f64a <__swsetup_r+0x82>
 800f5f0:	06d0      	lsls	r0, r2, #27
 800f5f2:	d411      	bmi.n	800f618 <__swsetup_r+0x50>
 800f5f4:	2209      	movs	r2, #9
 800f5f6:	6032      	str	r2, [r6, #0]
 800f5f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5fc:	81a3      	strh	r3, [r4, #12]
 800f5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f602:	e03e      	b.n	800f682 <__swsetup_r+0xba>
 800f604:	4b25      	ldr	r3, [pc, #148]	; (800f69c <__swsetup_r+0xd4>)
 800f606:	429c      	cmp	r4, r3
 800f608:	d101      	bne.n	800f60e <__swsetup_r+0x46>
 800f60a:	68ac      	ldr	r4, [r5, #8]
 800f60c:	e7eb      	b.n	800f5e6 <__swsetup_r+0x1e>
 800f60e:	4b24      	ldr	r3, [pc, #144]	; (800f6a0 <__swsetup_r+0xd8>)
 800f610:	429c      	cmp	r4, r3
 800f612:	bf08      	it	eq
 800f614:	68ec      	ldreq	r4, [r5, #12]
 800f616:	e7e6      	b.n	800f5e6 <__swsetup_r+0x1e>
 800f618:	0751      	lsls	r1, r2, #29
 800f61a:	d512      	bpl.n	800f642 <__swsetup_r+0x7a>
 800f61c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f61e:	b141      	cbz	r1, 800f632 <__swsetup_r+0x6a>
 800f620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f624:	4299      	cmp	r1, r3
 800f626:	d002      	beq.n	800f62e <__swsetup_r+0x66>
 800f628:	4630      	mov	r0, r6
 800f62a:	f7ff fe5f 	bl	800f2ec <_free_r>
 800f62e:	2300      	movs	r3, #0
 800f630:	6363      	str	r3, [r4, #52]	; 0x34
 800f632:	89a3      	ldrh	r3, [r4, #12]
 800f634:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f638:	81a3      	strh	r3, [r4, #12]
 800f63a:	2300      	movs	r3, #0
 800f63c:	6063      	str	r3, [r4, #4]
 800f63e:	6923      	ldr	r3, [r4, #16]
 800f640:	6023      	str	r3, [r4, #0]
 800f642:	89a3      	ldrh	r3, [r4, #12]
 800f644:	f043 0308 	orr.w	r3, r3, #8
 800f648:	81a3      	strh	r3, [r4, #12]
 800f64a:	6923      	ldr	r3, [r4, #16]
 800f64c:	b94b      	cbnz	r3, 800f662 <__swsetup_r+0x9a>
 800f64e:	89a3      	ldrh	r3, [r4, #12]
 800f650:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f658:	d003      	beq.n	800f662 <__swsetup_r+0x9a>
 800f65a:	4621      	mov	r1, r4
 800f65c:	4630      	mov	r0, r6
 800f65e:	f000 f9bf 	bl	800f9e0 <__smakebuf_r>
 800f662:	89a2      	ldrh	r2, [r4, #12]
 800f664:	f012 0301 	ands.w	r3, r2, #1
 800f668:	d00c      	beq.n	800f684 <__swsetup_r+0xbc>
 800f66a:	2300      	movs	r3, #0
 800f66c:	60a3      	str	r3, [r4, #8]
 800f66e:	6963      	ldr	r3, [r4, #20]
 800f670:	425b      	negs	r3, r3
 800f672:	61a3      	str	r3, [r4, #24]
 800f674:	6923      	ldr	r3, [r4, #16]
 800f676:	b953      	cbnz	r3, 800f68e <__swsetup_r+0xc6>
 800f678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f67c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f680:	d1ba      	bne.n	800f5f8 <__swsetup_r+0x30>
 800f682:	bd70      	pop	{r4, r5, r6, pc}
 800f684:	0792      	lsls	r2, r2, #30
 800f686:	bf58      	it	pl
 800f688:	6963      	ldrpl	r3, [r4, #20]
 800f68a:	60a3      	str	r3, [r4, #8]
 800f68c:	e7f2      	b.n	800f674 <__swsetup_r+0xac>
 800f68e:	2000      	movs	r0, #0
 800f690:	e7f7      	b.n	800f682 <__swsetup_r+0xba>
 800f692:	bf00      	nop
 800f694:	2000017c 	.word	0x2000017c
 800f698:	0800fe54 	.word	0x0800fe54
 800f69c:	0800fe74 	.word	0x0800fe74
 800f6a0:	0800fe34 	.word	0x0800fe34

0800f6a4 <__sflush_r>:
 800f6a4:	898a      	ldrh	r2, [r1, #12]
 800f6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6aa:	4605      	mov	r5, r0
 800f6ac:	0710      	lsls	r0, r2, #28
 800f6ae:	460c      	mov	r4, r1
 800f6b0:	d458      	bmi.n	800f764 <__sflush_r+0xc0>
 800f6b2:	684b      	ldr	r3, [r1, #4]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	dc05      	bgt.n	800f6c4 <__sflush_r+0x20>
 800f6b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	dc02      	bgt.n	800f6c4 <__sflush_r+0x20>
 800f6be:	2000      	movs	r0, #0
 800f6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6c6:	2e00      	cmp	r6, #0
 800f6c8:	d0f9      	beq.n	800f6be <__sflush_r+0x1a>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f6d0:	682f      	ldr	r7, [r5, #0]
 800f6d2:	6a21      	ldr	r1, [r4, #32]
 800f6d4:	602b      	str	r3, [r5, #0]
 800f6d6:	d032      	beq.n	800f73e <__sflush_r+0x9a>
 800f6d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f6da:	89a3      	ldrh	r3, [r4, #12]
 800f6dc:	075a      	lsls	r2, r3, #29
 800f6de:	d505      	bpl.n	800f6ec <__sflush_r+0x48>
 800f6e0:	6863      	ldr	r3, [r4, #4]
 800f6e2:	1ac0      	subs	r0, r0, r3
 800f6e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f6e6:	b10b      	cbz	r3, 800f6ec <__sflush_r+0x48>
 800f6e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f6ea:	1ac0      	subs	r0, r0, r3
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6f2:	6a21      	ldr	r1, [r4, #32]
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	47b0      	blx	r6
 800f6f8:	1c43      	adds	r3, r0, #1
 800f6fa:	89a3      	ldrh	r3, [r4, #12]
 800f6fc:	d106      	bne.n	800f70c <__sflush_r+0x68>
 800f6fe:	6829      	ldr	r1, [r5, #0]
 800f700:	291d      	cmp	r1, #29
 800f702:	d848      	bhi.n	800f796 <__sflush_r+0xf2>
 800f704:	4a29      	ldr	r2, [pc, #164]	; (800f7ac <__sflush_r+0x108>)
 800f706:	40ca      	lsrs	r2, r1
 800f708:	07d6      	lsls	r6, r2, #31
 800f70a:	d544      	bpl.n	800f796 <__sflush_r+0xf2>
 800f70c:	2200      	movs	r2, #0
 800f70e:	6062      	str	r2, [r4, #4]
 800f710:	04d9      	lsls	r1, r3, #19
 800f712:	6922      	ldr	r2, [r4, #16]
 800f714:	6022      	str	r2, [r4, #0]
 800f716:	d504      	bpl.n	800f722 <__sflush_r+0x7e>
 800f718:	1c42      	adds	r2, r0, #1
 800f71a:	d101      	bne.n	800f720 <__sflush_r+0x7c>
 800f71c:	682b      	ldr	r3, [r5, #0]
 800f71e:	b903      	cbnz	r3, 800f722 <__sflush_r+0x7e>
 800f720:	6560      	str	r0, [r4, #84]	; 0x54
 800f722:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f724:	602f      	str	r7, [r5, #0]
 800f726:	2900      	cmp	r1, #0
 800f728:	d0c9      	beq.n	800f6be <__sflush_r+0x1a>
 800f72a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f72e:	4299      	cmp	r1, r3
 800f730:	d002      	beq.n	800f738 <__sflush_r+0x94>
 800f732:	4628      	mov	r0, r5
 800f734:	f7ff fdda 	bl	800f2ec <_free_r>
 800f738:	2000      	movs	r0, #0
 800f73a:	6360      	str	r0, [r4, #52]	; 0x34
 800f73c:	e7c0      	b.n	800f6c0 <__sflush_r+0x1c>
 800f73e:	2301      	movs	r3, #1
 800f740:	4628      	mov	r0, r5
 800f742:	47b0      	blx	r6
 800f744:	1c41      	adds	r1, r0, #1
 800f746:	d1c8      	bne.n	800f6da <__sflush_r+0x36>
 800f748:	682b      	ldr	r3, [r5, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d0c5      	beq.n	800f6da <__sflush_r+0x36>
 800f74e:	2b1d      	cmp	r3, #29
 800f750:	d001      	beq.n	800f756 <__sflush_r+0xb2>
 800f752:	2b16      	cmp	r3, #22
 800f754:	d101      	bne.n	800f75a <__sflush_r+0xb6>
 800f756:	602f      	str	r7, [r5, #0]
 800f758:	e7b1      	b.n	800f6be <__sflush_r+0x1a>
 800f75a:	89a3      	ldrh	r3, [r4, #12]
 800f75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f760:	81a3      	strh	r3, [r4, #12]
 800f762:	e7ad      	b.n	800f6c0 <__sflush_r+0x1c>
 800f764:	690f      	ldr	r7, [r1, #16]
 800f766:	2f00      	cmp	r7, #0
 800f768:	d0a9      	beq.n	800f6be <__sflush_r+0x1a>
 800f76a:	0793      	lsls	r3, r2, #30
 800f76c:	680e      	ldr	r6, [r1, #0]
 800f76e:	bf08      	it	eq
 800f770:	694b      	ldreq	r3, [r1, #20]
 800f772:	600f      	str	r7, [r1, #0]
 800f774:	bf18      	it	ne
 800f776:	2300      	movne	r3, #0
 800f778:	eba6 0807 	sub.w	r8, r6, r7
 800f77c:	608b      	str	r3, [r1, #8]
 800f77e:	f1b8 0f00 	cmp.w	r8, #0
 800f782:	dd9c      	ble.n	800f6be <__sflush_r+0x1a>
 800f784:	4643      	mov	r3, r8
 800f786:	463a      	mov	r2, r7
 800f788:	6a21      	ldr	r1, [r4, #32]
 800f78a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f78c:	4628      	mov	r0, r5
 800f78e:	47b0      	blx	r6
 800f790:	2800      	cmp	r0, #0
 800f792:	dc06      	bgt.n	800f7a2 <__sflush_r+0xfe>
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f79a:	81a3      	strh	r3, [r4, #12]
 800f79c:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a0:	e78e      	b.n	800f6c0 <__sflush_r+0x1c>
 800f7a2:	4407      	add	r7, r0
 800f7a4:	eba8 0800 	sub.w	r8, r8, r0
 800f7a8:	e7e9      	b.n	800f77e <__sflush_r+0xda>
 800f7aa:	bf00      	nop
 800f7ac:	20400001 	.word	0x20400001

0800f7b0 <_fflush_r>:
 800f7b0:	b538      	push	{r3, r4, r5, lr}
 800f7b2:	690b      	ldr	r3, [r1, #16]
 800f7b4:	4605      	mov	r5, r0
 800f7b6:	460c      	mov	r4, r1
 800f7b8:	b1db      	cbz	r3, 800f7f2 <_fflush_r+0x42>
 800f7ba:	b118      	cbz	r0, 800f7c4 <_fflush_r+0x14>
 800f7bc:	6983      	ldr	r3, [r0, #24]
 800f7be:	b90b      	cbnz	r3, 800f7c4 <_fflush_r+0x14>
 800f7c0:	f000 f860 	bl	800f884 <__sinit>
 800f7c4:	4b0c      	ldr	r3, [pc, #48]	; (800f7f8 <_fflush_r+0x48>)
 800f7c6:	429c      	cmp	r4, r3
 800f7c8:	d109      	bne.n	800f7de <_fflush_r+0x2e>
 800f7ca:	686c      	ldr	r4, [r5, #4]
 800f7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7d0:	b17b      	cbz	r3, 800f7f2 <_fflush_r+0x42>
 800f7d2:	4621      	mov	r1, r4
 800f7d4:	4628      	mov	r0, r5
 800f7d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7da:	f7ff bf63 	b.w	800f6a4 <__sflush_r>
 800f7de:	4b07      	ldr	r3, [pc, #28]	; (800f7fc <_fflush_r+0x4c>)
 800f7e0:	429c      	cmp	r4, r3
 800f7e2:	d101      	bne.n	800f7e8 <_fflush_r+0x38>
 800f7e4:	68ac      	ldr	r4, [r5, #8]
 800f7e6:	e7f1      	b.n	800f7cc <_fflush_r+0x1c>
 800f7e8:	4b05      	ldr	r3, [pc, #20]	; (800f800 <_fflush_r+0x50>)
 800f7ea:	429c      	cmp	r4, r3
 800f7ec:	bf08      	it	eq
 800f7ee:	68ec      	ldreq	r4, [r5, #12]
 800f7f0:	e7ec      	b.n	800f7cc <_fflush_r+0x1c>
 800f7f2:	2000      	movs	r0, #0
 800f7f4:	bd38      	pop	{r3, r4, r5, pc}
 800f7f6:	bf00      	nop
 800f7f8:	0800fe54 	.word	0x0800fe54
 800f7fc:	0800fe74 	.word	0x0800fe74
 800f800:	0800fe34 	.word	0x0800fe34

0800f804 <std>:
 800f804:	2300      	movs	r3, #0
 800f806:	b510      	push	{r4, lr}
 800f808:	4604      	mov	r4, r0
 800f80a:	e9c0 3300 	strd	r3, r3, [r0]
 800f80e:	6083      	str	r3, [r0, #8]
 800f810:	8181      	strh	r1, [r0, #12]
 800f812:	6643      	str	r3, [r0, #100]	; 0x64
 800f814:	81c2      	strh	r2, [r0, #14]
 800f816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f81a:	6183      	str	r3, [r0, #24]
 800f81c:	4619      	mov	r1, r3
 800f81e:	2208      	movs	r2, #8
 800f820:	305c      	adds	r0, #92	; 0x5c
 800f822:	f7ff fd5b 	bl	800f2dc <memset>
 800f826:	4b05      	ldr	r3, [pc, #20]	; (800f83c <std+0x38>)
 800f828:	6263      	str	r3, [r4, #36]	; 0x24
 800f82a:	4b05      	ldr	r3, [pc, #20]	; (800f840 <std+0x3c>)
 800f82c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f82e:	4b05      	ldr	r3, [pc, #20]	; (800f844 <std+0x40>)
 800f830:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f832:	4b05      	ldr	r3, [pc, #20]	; (800f848 <std+0x44>)
 800f834:	6224      	str	r4, [r4, #32]
 800f836:	6323      	str	r3, [r4, #48]	; 0x30
 800f838:	bd10      	pop	{r4, pc}
 800f83a:	bf00      	nop
 800f83c:	0800fa65 	.word	0x0800fa65
 800f840:	0800fa87 	.word	0x0800fa87
 800f844:	0800fabf 	.word	0x0800fabf
 800f848:	0800fae3 	.word	0x0800fae3

0800f84c <_cleanup_r>:
 800f84c:	4901      	ldr	r1, [pc, #4]	; (800f854 <_cleanup_r+0x8>)
 800f84e:	f000 b885 	b.w	800f95c <_fwalk_reent>
 800f852:	bf00      	nop
 800f854:	0800f7b1 	.word	0x0800f7b1

0800f858 <__sfmoreglue>:
 800f858:	b570      	push	{r4, r5, r6, lr}
 800f85a:	1e4a      	subs	r2, r1, #1
 800f85c:	2568      	movs	r5, #104	; 0x68
 800f85e:	4355      	muls	r5, r2
 800f860:	460e      	mov	r6, r1
 800f862:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f866:	f7ff fd8f 	bl	800f388 <_malloc_r>
 800f86a:	4604      	mov	r4, r0
 800f86c:	b140      	cbz	r0, 800f880 <__sfmoreglue+0x28>
 800f86e:	2100      	movs	r1, #0
 800f870:	e9c0 1600 	strd	r1, r6, [r0]
 800f874:	300c      	adds	r0, #12
 800f876:	60a0      	str	r0, [r4, #8]
 800f878:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f87c:	f7ff fd2e 	bl	800f2dc <memset>
 800f880:	4620      	mov	r0, r4
 800f882:	bd70      	pop	{r4, r5, r6, pc}

0800f884 <__sinit>:
 800f884:	6983      	ldr	r3, [r0, #24]
 800f886:	b510      	push	{r4, lr}
 800f888:	4604      	mov	r4, r0
 800f88a:	bb33      	cbnz	r3, 800f8da <__sinit+0x56>
 800f88c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f890:	6503      	str	r3, [r0, #80]	; 0x50
 800f892:	4b12      	ldr	r3, [pc, #72]	; (800f8dc <__sinit+0x58>)
 800f894:	4a12      	ldr	r2, [pc, #72]	; (800f8e0 <__sinit+0x5c>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	6282      	str	r2, [r0, #40]	; 0x28
 800f89a:	4298      	cmp	r0, r3
 800f89c:	bf04      	itt	eq
 800f89e:	2301      	moveq	r3, #1
 800f8a0:	6183      	streq	r3, [r0, #24]
 800f8a2:	f000 f81f 	bl	800f8e4 <__sfp>
 800f8a6:	6060      	str	r0, [r4, #4]
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f000 f81b 	bl	800f8e4 <__sfp>
 800f8ae:	60a0      	str	r0, [r4, #8]
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f000 f817 	bl	800f8e4 <__sfp>
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	60e0      	str	r0, [r4, #12]
 800f8ba:	2104      	movs	r1, #4
 800f8bc:	6860      	ldr	r0, [r4, #4]
 800f8be:	f7ff ffa1 	bl	800f804 <std>
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	2109      	movs	r1, #9
 800f8c6:	68a0      	ldr	r0, [r4, #8]
 800f8c8:	f7ff ff9c 	bl	800f804 <std>
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	2112      	movs	r1, #18
 800f8d0:	68e0      	ldr	r0, [r4, #12]
 800f8d2:	f7ff ff97 	bl	800f804 <std>
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	61a3      	str	r3, [r4, #24]
 800f8da:	bd10      	pop	{r4, pc}
 800f8dc:	0800fe30 	.word	0x0800fe30
 800f8e0:	0800f84d 	.word	0x0800f84d

0800f8e4 <__sfp>:
 800f8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e6:	4b1b      	ldr	r3, [pc, #108]	; (800f954 <__sfp+0x70>)
 800f8e8:	681e      	ldr	r6, [r3, #0]
 800f8ea:	69b3      	ldr	r3, [r6, #24]
 800f8ec:	4607      	mov	r7, r0
 800f8ee:	b913      	cbnz	r3, 800f8f6 <__sfp+0x12>
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	f7ff ffc7 	bl	800f884 <__sinit>
 800f8f6:	3648      	adds	r6, #72	; 0x48
 800f8f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	d503      	bpl.n	800f908 <__sfp+0x24>
 800f900:	6833      	ldr	r3, [r6, #0]
 800f902:	b133      	cbz	r3, 800f912 <__sfp+0x2e>
 800f904:	6836      	ldr	r6, [r6, #0]
 800f906:	e7f7      	b.n	800f8f8 <__sfp+0x14>
 800f908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f90c:	b16d      	cbz	r5, 800f92a <__sfp+0x46>
 800f90e:	3468      	adds	r4, #104	; 0x68
 800f910:	e7f4      	b.n	800f8fc <__sfp+0x18>
 800f912:	2104      	movs	r1, #4
 800f914:	4638      	mov	r0, r7
 800f916:	f7ff ff9f 	bl	800f858 <__sfmoreglue>
 800f91a:	6030      	str	r0, [r6, #0]
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d1f1      	bne.n	800f904 <__sfp+0x20>
 800f920:	230c      	movs	r3, #12
 800f922:	603b      	str	r3, [r7, #0]
 800f924:	4604      	mov	r4, r0
 800f926:	4620      	mov	r0, r4
 800f928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f92a:	4b0b      	ldr	r3, [pc, #44]	; (800f958 <__sfp+0x74>)
 800f92c:	6665      	str	r5, [r4, #100]	; 0x64
 800f92e:	e9c4 5500 	strd	r5, r5, [r4]
 800f932:	60a5      	str	r5, [r4, #8]
 800f934:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f938:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f93c:	2208      	movs	r2, #8
 800f93e:	4629      	mov	r1, r5
 800f940:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f944:	f7ff fcca 	bl	800f2dc <memset>
 800f948:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f94c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f950:	e7e9      	b.n	800f926 <__sfp+0x42>
 800f952:	bf00      	nop
 800f954:	0800fe30 	.word	0x0800fe30
 800f958:	ffff0001 	.word	0xffff0001

0800f95c <_fwalk_reent>:
 800f95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f960:	4680      	mov	r8, r0
 800f962:	4689      	mov	r9, r1
 800f964:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f968:	2600      	movs	r6, #0
 800f96a:	b914      	cbnz	r4, 800f972 <_fwalk_reent+0x16>
 800f96c:	4630      	mov	r0, r6
 800f96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f972:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f976:	3f01      	subs	r7, #1
 800f978:	d501      	bpl.n	800f97e <_fwalk_reent+0x22>
 800f97a:	6824      	ldr	r4, [r4, #0]
 800f97c:	e7f5      	b.n	800f96a <_fwalk_reent+0xe>
 800f97e:	89ab      	ldrh	r3, [r5, #12]
 800f980:	2b01      	cmp	r3, #1
 800f982:	d907      	bls.n	800f994 <_fwalk_reent+0x38>
 800f984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f988:	3301      	adds	r3, #1
 800f98a:	d003      	beq.n	800f994 <_fwalk_reent+0x38>
 800f98c:	4629      	mov	r1, r5
 800f98e:	4640      	mov	r0, r8
 800f990:	47c8      	blx	r9
 800f992:	4306      	orrs	r6, r0
 800f994:	3568      	adds	r5, #104	; 0x68
 800f996:	e7ee      	b.n	800f976 <_fwalk_reent+0x1a>

0800f998 <__swhatbuf_r>:
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	460e      	mov	r6, r1
 800f99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9a0:	2900      	cmp	r1, #0
 800f9a2:	b096      	sub	sp, #88	; 0x58
 800f9a4:	4614      	mov	r4, r2
 800f9a6:	461d      	mov	r5, r3
 800f9a8:	da07      	bge.n	800f9ba <__swhatbuf_r+0x22>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	602b      	str	r3, [r5, #0]
 800f9ae:	89b3      	ldrh	r3, [r6, #12]
 800f9b0:	061a      	lsls	r2, r3, #24
 800f9b2:	d410      	bmi.n	800f9d6 <__swhatbuf_r+0x3e>
 800f9b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9b8:	e00e      	b.n	800f9d8 <__swhatbuf_r+0x40>
 800f9ba:	466a      	mov	r2, sp
 800f9bc:	f000 f8b8 	bl	800fb30 <_fstat_r>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	dbf2      	blt.n	800f9aa <__swhatbuf_r+0x12>
 800f9c4:	9a01      	ldr	r2, [sp, #4]
 800f9c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f9ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f9ce:	425a      	negs	r2, r3
 800f9d0:	415a      	adcs	r2, r3
 800f9d2:	602a      	str	r2, [r5, #0]
 800f9d4:	e7ee      	b.n	800f9b4 <__swhatbuf_r+0x1c>
 800f9d6:	2340      	movs	r3, #64	; 0x40
 800f9d8:	2000      	movs	r0, #0
 800f9da:	6023      	str	r3, [r4, #0]
 800f9dc:	b016      	add	sp, #88	; 0x58
 800f9de:	bd70      	pop	{r4, r5, r6, pc}

0800f9e0 <__smakebuf_r>:
 800f9e0:	898b      	ldrh	r3, [r1, #12]
 800f9e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9e4:	079d      	lsls	r5, r3, #30
 800f9e6:	4606      	mov	r6, r0
 800f9e8:	460c      	mov	r4, r1
 800f9ea:	d507      	bpl.n	800f9fc <__smakebuf_r+0x1c>
 800f9ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f9f0:	6023      	str	r3, [r4, #0]
 800f9f2:	6123      	str	r3, [r4, #16]
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	6163      	str	r3, [r4, #20]
 800f9f8:	b002      	add	sp, #8
 800f9fa:	bd70      	pop	{r4, r5, r6, pc}
 800f9fc:	ab01      	add	r3, sp, #4
 800f9fe:	466a      	mov	r2, sp
 800fa00:	f7ff ffca 	bl	800f998 <__swhatbuf_r>
 800fa04:	9900      	ldr	r1, [sp, #0]
 800fa06:	4605      	mov	r5, r0
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f7ff fcbd 	bl	800f388 <_malloc_r>
 800fa0e:	b948      	cbnz	r0, 800fa24 <__smakebuf_r+0x44>
 800fa10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa14:	059a      	lsls	r2, r3, #22
 800fa16:	d4ef      	bmi.n	800f9f8 <__smakebuf_r+0x18>
 800fa18:	f023 0303 	bic.w	r3, r3, #3
 800fa1c:	f043 0302 	orr.w	r3, r3, #2
 800fa20:	81a3      	strh	r3, [r4, #12]
 800fa22:	e7e3      	b.n	800f9ec <__smakebuf_r+0xc>
 800fa24:	4b0d      	ldr	r3, [pc, #52]	; (800fa5c <__smakebuf_r+0x7c>)
 800fa26:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa28:	89a3      	ldrh	r3, [r4, #12]
 800fa2a:	6020      	str	r0, [r4, #0]
 800fa2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa30:	81a3      	strh	r3, [r4, #12]
 800fa32:	9b00      	ldr	r3, [sp, #0]
 800fa34:	6163      	str	r3, [r4, #20]
 800fa36:	9b01      	ldr	r3, [sp, #4]
 800fa38:	6120      	str	r0, [r4, #16]
 800fa3a:	b15b      	cbz	r3, 800fa54 <__smakebuf_r+0x74>
 800fa3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa40:	4630      	mov	r0, r6
 800fa42:	f000 f887 	bl	800fb54 <_isatty_r>
 800fa46:	b128      	cbz	r0, 800fa54 <__smakebuf_r+0x74>
 800fa48:	89a3      	ldrh	r3, [r4, #12]
 800fa4a:	f023 0303 	bic.w	r3, r3, #3
 800fa4e:	f043 0301 	orr.w	r3, r3, #1
 800fa52:	81a3      	strh	r3, [r4, #12]
 800fa54:	89a3      	ldrh	r3, [r4, #12]
 800fa56:	431d      	orrs	r5, r3
 800fa58:	81a5      	strh	r5, [r4, #12]
 800fa5a:	e7cd      	b.n	800f9f8 <__smakebuf_r+0x18>
 800fa5c:	0800f84d 	.word	0x0800f84d

0800fa60 <__malloc_lock>:
 800fa60:	4770      	bx	lr

0800fa62 <__malloc_unlock>:
 800fa62:	4770      	bx	lr

0800fa64 <__sread>:
 800fa64:	b510      	push	{r4, lr}
 800fa66:	460c      	mov	r4, r1
 800fa68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa6c:	f000 f894 	bl	800fb98 <_read_r>
 800fa70:	2800      	cmp	r0, #0
 800fa72:	bfab      	itete	ge
 800fa74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa76:	89a3      	ldrhlt	r3, [r4, #12]
 800fa78:	181b      	addge	r3, r3, r0
 800fa7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa7e:	bfac      	ite	ge
 800fa80:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa82:	81a3      	strhlt	r3, [r4, #12]
 800fa84:	bd10      	pop	{r4, pc}

0800fa86 <__swrite>:
 800fa86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa8a:	461f      	mov	r7, r3
 800fa8c:	898b      	ldrh	r3, [r1, #12]
 800fa8e:	05db      	lsls	r3, r3, #23
 800fa90:	4605      	mov	r5, r0
 800fa92:	460c      	mov	r4, r1
 800fa94:	4616      	mov	r6, r2
 800fa96:	d505      	bpl.n	800faa4 <__swrite+0x1e>
 800fa98:	2302      	movs	r3, #2
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faa0:	f000 f868 	bl	800fb74 <_lseek_r>
 800faa4:	89a3      	ldrh	r3, [r4, #12]
 800faa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800faaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800faae:	81a3      	strh	r3, [r4, #12]
 800fab0:	4632      	mov	r2, r6
 800fab2:	463b      	mov	r3, r7
 800fab4:	4628      	mov	r0, r5
 800fab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800faba:	f000 b817 	b.w	800faec <_write_r>

0800fabe <__sseek>:
 800fabe:	b510      	push	{r4, lr}
 800fac0:	460c      	mov	r4, r1
 800fac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fac6:	f000 f855 	bl	800fb74 <_lseek_r>
 800faca:	1c43      	adds	r3, r0, #1
 800facc:	89a3      	ldrh	r3, [r4, #12]
 800face:	bf15      	itete	ne
 800fad0:	6560      	strne	r0, [r4, #84]	; 0x54
 800fad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fada:	81a3      	strheq	r3, [r4, #12]
 800fadc:	bf18      	it	ne
 800fade:	81a3      	strhne	r3, [r4, #12]
 800fae0:	bd10      	pop	{r4, pc}

0800fae2 <__sclose>:
 800fae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fae6:	f000 b813 	b.w	800fb10 <_close_r>
	...

0800faec <_write_r>:
 800faec:	b538      	push	{r3, r4, r5, lr}
 800faee:	4c07      	ldr	r4, [pc, #28]	; (800fb0c <_write_r+0x20>)
 800faf0:	4605      	mov	r5, r0
 800faf2:	4608      	mov	r0, r1
 800faf4:	4611      	mov	r1, r2
 800faf6:	2200      	movs	r2, #0
 800faf8:	6022      	str	r2, [r4, #0]
 800fafa:	461a      	mov	r2, r3
 800fafc:	f7fd fade 	bl	800d0bc <_write>
 800fb00:	1c43      	adds	r3, r0, #1
 800fb02:	d102      	bne.n	800fb0a <_write_r+0x1e>
 800fb04:	6823      	ldr	r3, [r4, #0]
 800fb06:	b103      	cbz	r3, 800fb0a <_write_r+0x1e>
 800fb08:	602b      	str	r3, [r5, #0]
 800fb0a:	bd38      	pop	{r3, r4, r5, pc}
 800fb0c:	2000cab8 	.word	0x2000cab8

0800fb10 <_close_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	4c06      	ldr	r4, [pc, #24]	; (800fb2c <_close_r+0x1c>)
 800fb14:	2300      	movs	r3, #0
 800fb16:	4605      	mov	r5, r0
 800fb18:	4608      	mov	r0, r1
 800fb1a:	6023      	str	r3, [r4, #0]
 800fb1c:	f7fe fb9b 	bl	800e256 <_close>
 800fb20:	1c43      	adds	r3, r0, #1
 800fb22:	d102      	bne.n	800fb2a <_close_r+0x1a>
 800fb24:	6823      	ldr	r3, [r4, #0]
 800fb26:	b103      	cbz	r3, 800fb2a <_close_r+0x1a>
 800fb28:	602b      	str	r3, [r5, #0]
 800fb2a:	bd38      	pop	{r3, r4, r5, pc}
 800fb2c:	2000cab8 	.word	0x2000cab8

0800fb30 <_fstat_r>:
 800fb30:	b538      	push	{r3, r4, r5, lr}
 800fb32:	4c07      	ldr	r4, [pc, #28]	; (800fb50 <_fstat_r+0x20>)
 800fb34:	2300      	movs	r3, #0
 800fb36:	4605      	mov	r5, r0
 800fb38:	4608      	mov	r0, r1
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	6023      	str	r3, [r4, #0]
 800fb3e:	f7fe fb96 	bl	800e26e <_fstat>
 800fb42:	1c43      	adds	r3, r0, #1
 800fb44:	d102      	bne.n	800fb4c <_fstat_r+0x1c>
 800fb46:	6823      	ldr	r3, [r4, #0]
 800fb48:	b103      	cbz	r3, 800fb4c <_fstat_r+0x1c>
 800fb4a:	602b      	str	r3, [r5, #0]
 800fb4c:	bd38      	pop	{r3, r4, r5, pc}
 800fb4e:	bf00      	nop
 800fb50:	2000cab8 	.word	0x2000cab8

0800fb54 <_isatty_r>:
 800fb54:	b538      	push	{r3, r4, r5, lr}
 800fb56:	4c06      	ldr	r4, [pc, #24]	; (800fb70 <_isatty_r+0x1c>)
 800fb58:	2300      	movs	r3, #0
 800fb5a:	4605      	mov	r5, r0
 800fb5c:	4608      	mov	r0, r1
 800fb5e:	6023      	str	r3, [r4, #0]
 800fb60:	f7fe fb95 	bl	800e28e <_isatty>
 800fb64:	1c43      	adds	r3, r0, #1
 800fb66:	d102      	bne.n	800fb6e <_isatty_r+0x1a>
 800fb68:	6823      	ldr	r3, [r4, #0]
 800fb6a:	b103      	cbz	r3, 800fb6e <_isatty_r+0x1a>
 800fb6c:	602b      	str	r3, [r5, #0]
 800fb6e:	bd38      	pop	{r3, r4, r5, pc}
 800fb70:	2000cab8 	.word	0x2000cab8

0800fb74 <_lseek_r>:
 800fb74:	b538      	push	{r3, r4, r5, lr}
 800fb76:	4c07      	ldr	r4, [pc, #28]	; (800fb94 <_lseek_r+0x20>)
 800fb78:	4605      	mov	r5, r0
 800fb7a:	4608      	mov	r0, r1
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	2200      	movs	r2, #0
 800fb80:	6022      	str	r2, [r4, #0]
 800fb82:	461a      	mov	r2, r3
 800fb84:	f7fe fb8e 	bl	800e2a4 <_lseek>
 800fb88:	1c43      	adds	r3, r0, #1
 800fb8a:	d102      	bne.n	800fb92 <_lseek_r+0x1e>
 800fb8c:	6823      	ldr	r3, [r4, #0]
 800fb8e:	b103      	cbz	r3, 800fb92 <_lseek_r+0x1e>
 800fb90:	602b      	str	r3, [r5, #0]
 800fb92:	bd38      	pop	{r3, r4, r5, pc}
 800fb94:	2000cab8 	.word	0x2000cab8

0800fb98 <_read_r>:
 800fb98:	b538      	push	{r3, r4, r5, lr}
 800fb9a:	4c07      	ldr	r4, [pc, #28]	; (800fbb8 <_read_r+0x20>)
 800fb9c:	4605      	mov	r5, r0
 800fb9e:	4608      	mov	r0, r1
 800fba0:	4611      	mov	r1, r2
 800fba2:	2200      	movs	r2, #0
 800fba4:	6022      	str	r2, [r4, #0]
 800fba6:	461a      	mov	r2, r3
 800fba8:	f7fe fb38 	bl	800e21c <_read>
 800fbac:	1c43      	adds	r3, r0, #1
 800fbae:	d102      	bne.n	800fbb6 <_read_r+0x1e>
 800fbb0:	6823      	ldr	r3, [r4, #0]
 800fbb2:	b103      	cbz	r3, 800fbb6 <_read_r+0x1e>
 800fbb4:	602b      	str	r3, [r5, #0]
 800fbb6:	bd38      	pop	{r3, r4, r5, pc}
 800fbb8:	2000cab8 	.word	0x2000cab8

0800fbbc <_init>:
 800fbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbbe:	bf00      	nop
 800fbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbc2:	bc08      	pop	{r3}
 800fbc4:	469e      	mov	lr, r3
 800fbc6:	4770      	bx	lr

0800fbc8 <_fini>:
 800fbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbca:	bf00      	nop
 800fbcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbce:	bc08      	pop	{r3}
 800fbd0:	469e      	mov	lr, r3
 800fbd2:	4770      	bx	lr
