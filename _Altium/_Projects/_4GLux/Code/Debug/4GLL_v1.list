
4GLL_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800ffe8  0800ffe8  0001ffe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010280  08010280  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  08010280  08010280  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010280  08010280  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010280  08010280  00020280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010284  08010284  00020284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08010288  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c8d8  200001e0  08010468  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000cab8  08010468  0003cab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e1b7  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000076d6  00000000  00000000  0006e3c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002998  00000000  00000000  00075aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000025e0  00000000  00000000  00078438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033b77  00000000  00000000  0007aa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002ec47  00000000  00000000  000ae58f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010d16f  00000000  00000000  000dd1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ea345  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b168  00000000  00000000  001ea3c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ffd0 	.word	0x0800ffd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800ffd0 	.word	0x0800ffd0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800029a:	2003      	movs	r0, #3
 800029c:	f001 f842 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80002a0:	2000      	movs	r0, #0
 80002a2:	f000 f80d 	bl	80002c0 <HAL_InitTick>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d002      	beq.n	80002b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80002ac:	2301      	movs	r3, #1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	e001      	b.n	80002b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80002b2:	f00d fe65 	bl	800df80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80002b6:	79fb      	ldrb	r3, [r7, #7]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80002c8:	2300      	movs	r3, #0
 80002ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <HAL_InitTick+0x6c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d023      	beq.n	800031c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <HAL_InitTick+0x70>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <HAL_InitTick+0x6c>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4619      	mov	r1, r3
 80002de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 f84f 	bl	800138e <HAL_SYSTICK_Config>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d10f      	bne.n	8000316 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b0f      	cmp	r3, #15
 80002fa:	d809      	bhi.n	8000310 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002fc:	2200      	movs	r2, #0
 80002fe:	6879      	ldr	r1, [r7, #4]
 8000300:	f04f 30ff 	mov.w	r0, #4294967295
 8000304:	f001 f819 	bl	800133a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <HAL_InitTick+0x74>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	e007      	b.n	8000320 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000310:	2301      	movs	r3, #1
 8000312:	73fb      	strb	r3, [r7, #15]
 8000314:	e004      	b.n	8000320 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000316:	2301      	movs	r3, #1
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	e001      	b.n	8000320 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800031c:	2301      	movs	r3, #1
 800031e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000320:	7bfb      	ldrb	r3, [r7, #15]
}
 8000322:	4618      	mov	r0, r3
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000004 	.word	0x20000004
 8000330:	20000118 	.word	0x20000118
 8000334:	20000000 	.word	0x20000000

08000338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <HAL_IncTick+0x20>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	461a      	mov	r2, r3
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <HAL_IncTick+0x24>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4413      	add	r3, r2
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <HAL_IncTick+0x24>)
 800034a:	6013      	str	r3, [r2, #0]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000004 	.word	0x20000004
 800035c:	20000318 	.word	0x20000318

08000360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  return uwTick;
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <HAL_GetTick+0x14>)
 8000366:	681b      	ldr	r3, [r3, #0]
}
 8000368:	4618      	mov	r0, r3
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	20000318 	.word	0x20000318

08000378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000380:	f7ff ffee 	bl	8000360 <HAL_GetTick>
 8000384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000390:	d005      	beq.n	800039e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <HAL_Delay+0x40>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	461a      	mov	r2, r3
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	4413      	add	r3, r2
 800039c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800039e:	bf00      	nop
 80003a0:	f7ff ffde 	bl	8000360 <HAL_GetTick>
 80003a4:	4602      	mov	r2, r0
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	1ad3      	subs	r3, r2, r3
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d8f7      	bhi.n	80003a0 <HAL_Delay+0x28>
  {
  }
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000004 	.word	0x20000004

080003bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	431a      	orrs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	431a      	orrs	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	609a      	str	r2, [r3, #8]
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000424:	b480      	push	{r7}
 8000426:	b087      	sub	sp, #28
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	3360      	adds	r3, #96	; 0x60
 8000436:	461a      	mov	r2, r3
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4413      	add	r3, r2
 800043e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <LL_ADC_SetOffset+0x44>)
 8000446:	4013      	ands	r3, r2
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	430a      	orrs	r2, r1
 8000452:	4313      	orrs	r3, r2
 8000454:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800045c:	bf00      	nop
 800045e:	371c      	adds	r7, #28
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	03fff000 	.word	0x03fff000

0800046c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	3360      	adds	r3, #96	; 0x60
 800047a:	461a      	mov	r2, r3
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	4413      	add	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800048c:	4618      	mov	r0, r3
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000498:	b480      	push	{r7}
 800049a:	b087      	sub	sp, #28
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3360      	adds	r3, #96	; 0x60
 80004a8:	461a      	mov	r2, r3
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	4413      	add	r3, r2
 80004b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	431a      	orrs	r2, r3
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80004c2:	bf00      	nop
 80004c4:	371c      	adds	r7, #28
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	431a      	orrs	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	615a      	str	r2, [r3, #20]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b087      	sub	sp, #28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	3330      	adds	r3, #48	; 0x30
 8000504:	461a      	mov	r2, r3
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	0a1b      	lsrs	r3, r3, #8
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	f003 030c 	and.w	r3, r3, #12
 8000510:	4413      	add	r3, r2
 8000512:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	f003 031f 	and.w	r3, r3, #31
 800051e:	211f      	movs	r1, #31
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	43db      	mvns	r3, r3
 8000526:	401a      	ands	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	0e9b      	lsrs	r3, r3, #26
 800052c:	f003 011f 	and.w	r1, r3, #31
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	f003 031f 	and.w	r3, r3, #31
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	431a      	orrs	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000540:	bf00      	nop
 8000542:	371c      	adds	r7, #28
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800054c:	b480      	push	{r7}
 800054e:	b087      	sub	sp, #28
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3314      	adds	r3, #20
 800055c:	461a      	mov	r2, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	0e5b      	lsrs	r3, r3, #25
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	f003 0304 	and.w	r3, r3, #4
 8000568:	4413      	add	r3, r2
 800056a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	0d1b      	lsrs	r3, r3, #20
 8000574:	f003 031f 	and.w	r3, r3, #31
 8000578:	2107      	movs	r1, #7
 800057a:	fa01 f303 	lsl.w	r3, r1, r3
 800057e:	43db      	mvns	r3, r3
 8000580:	401a      	ands	r2, r3
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	0d1b      	lsrs	r3, r3, #20
 8000586:	f003 031f 	and.w	r3, r3, #31
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	431a      	orrs	r2, r3
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000596:	bf00      	nop
 8000598:	371c      	adds	r7, #28
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005bc:	43db      	mvns	r3, r3
 80005be:	401a      	ands	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0318 	and.w	r3, r3, #24
 80005c6:	4908      	ldr	r1, [pc, #32]	; (80005e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80005c8:	40d9      	lsrs	r1, r3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	400b      	ands	r3, r1
 80005ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005d2:	431a      	orrs	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	0007ffff 	.word	0x0007ffff

080005ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80005fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	6093      	str	r3, [r2, #8]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000624:	d101      	bne.n	800062a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000626:	2301      	movs	r3, #1
 8000628:	e000      	b.n	800062c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800064c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000674:	d101      	bne.n	800067a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b01      	cmp	r3, #1
 800069a:	d101      	bne.n	80006a0 <LL_ADC_IsEnabled+0x18>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <LL_ADC_IsEnabled+0x1a>
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d101      	bne.n	80006c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	2b08      	cmp	r3, #8
 80006e6:	d101      	bne.n	80006ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80006e8:	2301      	movs	r3, #1
 80006ea:	e000      	b.n	80006ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
	...

080006fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000704:	2300      	movs	r3, #0
 8000706:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	e12d      	b.n	8000972 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000720:	2b00      	cmp	r3, #0
 8000722:	d109      	bne.n	8000738 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f00c fc31 	bl	800cf8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff67 	bl	8000610 <LL_ADC_IsDeepPowerDownEnabled>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d004      	beq.n	8000752 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff4d 	bl	80005ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff82 	bl	8000660 <LL_ADC_IsInternalRegulatorEnabled>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d113      	bne.n	800078a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff66 	bl	8000638 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800076c:	4b83      	ldr	r3, [pc, #524]	; (800097c <HAL_ADC_Init+0x280>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	099b      	lsrs	r3, r3, #6
 8000772:	4a83      	ldr	r2, [pc, #524]	; (8000980 <HAL_ADC_Init+0x284>)
 8000774:	fba2 2303 	umull	r2, r3, r2, r3
 8000778:	099b      	lsrs	r3, r3, #6
 800077a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800077c:	e002      	b.n	8000784 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	3b01      	subs	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1f9      	bne.n	800077e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff66 	bl	8000660 <LL_ADC_IsInternalRegulatorEnabled>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10d      	bne.n	80007b6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	f043 0210 	orr.w	r2, r3, #16
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007aa:	f043 0201 	orr.w	r2, r3, #1
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff77 	bl	80006ae <LL_ADC_REG_IsConversionOngoing>
 80007c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f040 80c8 	bne.w	8000960 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 80c4 	bne.w	8000960 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80007e0:	f043 0202 	orr.w	r2, r3, #2
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff4b 	bl	8000688 <LL_ADC_IsEnabled>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10b      	bne.n	8000810 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007f8:	4862      	ldr	r0, [pc, #392]	; (8000984 <HAL_ADC_Init+0x288>)
 80007fa:	f7ff ff45 	bl	8000688 <LL_ADC_IsEnabled>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d105      	bne.n	8000810 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	4619      	mov	r1, r3
 800080a:	485f      	ldr	r0, [pc, #380]	; (8000988 <HAL_ADC_Init+0x28c>)
 800080c:	f7ff fdd6 	bl	80003bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7e5b      	ldrb	r3, [r3, #25]
 8000814:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800081a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000820:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000826:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800082e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000830:	4313      	orrs	r3, r2
 8000832:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d106      	bne.n	800084c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	3b01      	subs	r3, #1
 8000844:	045b      	lsls	r3, r3, #17
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	4313      	orrs	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000850:	2b00      	cmp	r3, #0
 8000852:	d009      	beq.n	8000868 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000858:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000860:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	4313      	orrs	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	68da      	ldr	r2, [r3, #12]
 800086e:	4b47      	ldr	r3, [pc, #284]	; (800098c <HAL_ADC_Init+0x290>)
 8000870:	4013      	ands	r3, r2
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	69b9      	ldr	r1, [r7, #24]
 8000878:	430b      	orrs	r3, r1
 800087a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff14 	bl	80006ae <LL_ADC_REG_IsConversionOngoing>
 8000886:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff21 	bl	80006d4 <LL_ADC_INJ_IsConversionOngoing>
 8000892:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d140      	bne.n	800091c <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d13d      	bne.n	800091c <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7e1b      	ldrb	r3, [r3, #24]
 80008a8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008aa:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80008b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008b4:	4313      	orrs	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008c2:	f023 0306 	bic.w	r3, r3, #6
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	69b9      	ldr	r1, [r7, #24]
 80008cc:	430b      	orrs	r3, r1
 80008ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d118      	bne.n	800090c <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	691b      	ldr	r3, [r3, #16]
 80008e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80008e4:	f023 0304 	bic.w	r3, r3, #4
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80008f0:	4311      	orrs	r1, r2
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80008f6:	4311      	orrs	r1, r2
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80008fc:	430a      	orrs	r2, r1
 80008fe:	431a      	orrs	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f042 0201 	orr.w	r2, r2, #1
 8000908:	611a      	str	r2, [r3, #16]
 800090a:	e007      	b.n	800091c <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	691a      	ldr	r2, [r3, #16]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f022 0201 	bic.w	r2, r2, #1
 800091a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d10c      	bne.n	800093e <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f023 010f 	bic.w	r1, r3, #15
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	1e5a      	subs	r2, r3, #1
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	430a      	orrs	r2, r1
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
 800093c:	e007      	b.n	800094e <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f022 020f 	bic.w	r2, r2, #15
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	f023 0303 	bic.w	r3, r3, #3
 8000956:	f043 0201 	orr.w	r2, r3, #1
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	659a      	str	r2, [r3, #88]	; 0x58
 800095e:	e007      	b.n	8000970 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000964:	f043 0210 	orr.w	r2, r3, #16
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000970:	7ffb      	ldrb	r3, [r7, #31]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3720      	adds	r7, #32
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000118 	.word	0x20000118
 8000980:	053e2d63 	.word	0x053e2d63
 8000984:	50040000 	.word	0x50040000
 8000988:	50040300 	.word	0x50040300
 800098c:	fff0c007 	.word	0xfff0c007

08000990 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b0b6      	sub	sp, #216	; 0xd8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d101      	bne.n	80009b2 <HAL_ADC_ConfigChannel+0x22>
 80009ae:	2302      	movs	r3, #2
 80009b0:	e3d4      	b.n	800115c <HAL_ADC_ConfigChannel+0x7cc>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe75 	bl	80006ae <LL_ADC_REG_IsConversionOngoing>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f040 83b9 	bne.w	800113e <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b05      	cmp	r3, #5
 80009d2:	d824      	bhi.n	8000a1e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	3b02      	subs	r3, #2
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d81b      	bhi.n	8000a16 <HAL_ADC_ConfigChannel+0x86>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <HAL_ADC_ConfigChannel+0x54>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	080009f5 	.word	0x080009f5
 80009e8:	080009fd 	.word	0x080009fd
 80009ec:	08000a05 	.word	0x08000a05
 80009f0:	08000a0d 	.word	0x08000a0d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	220c      	movs	r2, #12
 80009f8:	605a      	str	r2, [r3, #4]
          break;
 80009fa:	e011      	b.n	8000a20 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	2212      	movs	r2, #18
 8000a00:	605a      	str	r2, [r3, #4]
          break;
 8000a02:	e00d      	b.n	8000a20 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2218      	movs	r2, #24
 8000a08:	605a      	str	r2, [r3, #4]
          break;
 8000a0a:	e009      	b.n	8000a20 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a12:	605a      	str	r2, [r3, #4]
          break;
 8000a14:	e004      	b.n	8000a20 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	2206      	movs	r2, #6
 8000a1a:	605a      	str	r2, [r3, #4]
          break;
 8000a1c:	e000      	b.n	8000a20 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000a1e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	6859      	ldr	r1, [r3, #4]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f7ff fd61 	bl	80004f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe39 	bl	80006ae <LL_ADC_REG_IsConversionOngoing>
 8000a3c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fe45 	bl	80006d4 <LL_ADC_INJ_IsConversionOngoing>
 8000a4a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000a4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f040 81c1 	bne.w	8000dda <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000a58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f040 81bc 	bne.w	8000dda <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a6a:	d10f      	bne.n	8000a8c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2200      	movs	r2, #0
 8000a76:	4619      	mov	r1, r3
 8000a78:	f7ff fd68 	bl	800054c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fd22 	bl	80004ce <LL_ADC_SetSamplingTimeCommonConfig>
 8000a8a:	e00e      	b.n	8000aaa <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	6819      	ldr	r1, [r3, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	f7ff fd57 	bl	800054c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd12 	bl	80004ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	695a      	ldr	r2, [r3, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	08db      	lsrs	r3, r3, #3
 8000ab6:	f003 0303 	and.w	r3, r3, #3
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d00a      	beq.n	8000ae2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	6919      	ldr	r1, [r3, #16]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000adc:	f7ff fca2 	bl	8000424 <LL_ADC_SetOffset>
 8000ae0:	e17b      	b.n	8000dda <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fcbf 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10a      	bne.n	8000b0e <HAL_ADC_ConfigChannel+0x17e>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fcb4 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	0e9b      	lsrs	r3, r3, #26
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	e01e      	b.n	8000b4c <HAL_ADC_ConfigChannel+0x1bc>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fca9 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000b24:	fa93 f3a3 	rbit	r3, r3
 8000b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000b30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	e004      	b.n	8000b4a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8000b40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000b44:	fab3 f383 	clz	r3, r3
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d105      	bne.n	8000b64 <HAL_ADC_ConfigChannel+0x1d4>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	0e9b      	lsrs	r3, r3, #26
 8000b5e:	f003 031f 	and.w	r3, r3, #31
 8000b62:	e018      	b.n	8000b96 <HAL_ADC_ConfigChannel+0x206>
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b70:	fa93 f3a3 	rbit	r3, r3
 8000b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8000b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8000b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8000b88:	2320      	movs	r3, #32
 8000b8a:	e004      	b.n	8000b96 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8000b8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000b90:	fab3 f383 	clz	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d106      	bne.n	8000ba8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fc78 	bl	8000498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fc5c 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10a      	bne.n	8000bd4 <HAL_ADC_ConfigChannel+0x244>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fc51 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	0e9b      	lsrs	r3, r3, #26
 8000bce:	f003 021f 	and.w	r2, r3, #31
 8000bd2:	e01e      	b.n	8000c12 <HAL_ADC_ConfigChannel+0x282>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fc46 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000bea:	fa93 f3a3 	rbit	r3, r3
 8000bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8000bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8000bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8000c02:	2320      	movs	r3, #32
 8000c04:	e004      	b.n	8000c10 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8000c06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c0a:	fab3 f383 	clz	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d105      	bne.n	8000c2a <HAL_ADC_ConfigChannel+0x29a>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	0e9b      	lsrs	r3, r3, #26
 8000c24:	f003 031f 	and.w	r3, r3, #31
 8000c28:	e018      	b.n	8000c5c <HAL_ADC_ConfigChannel+0x2cc>
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c36:	fa93 f3a3 	rbit	r3, r3
 8000c3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8000c3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8000c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8000c4e:	2320      	movs	r3, #32
 8000c50:	e004      	b.n	8000c5c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8000c52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000c56:	fab3 f383 	clz	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d106      	bne.n	8000c6e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2200      	movs	r2, #0
 8000c66:	2101      	movs	r1, #1
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fc15 	bl	8000498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2102      	movs	r1, #2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fbf9 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10a      	bne.n	8000c9a <HAL_ADC_ConfigChannel+0x30a>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2102      	movs	r1, #2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fbee 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	0e9b      	lsrs	r3, r3, #26
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	e01e      	b.n	8000cd8 <HAL_ADC_ConfigChannel+0x348>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fbe3 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000cb0:	fa93 f3a3 	rbit	r3, r3
 8000cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8000cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8000cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8000cc8:	2320      	movs	r3, #32
 8000cca:	e004      	b.n	8000cd6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8000ccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cd0:	fab3 f383 	clz	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d105      	bne.n	8000cf0 <HAL_ADC_ConfigChannel+0x360>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	0e9b      	lsrs	r3, r3, #26
 8000cea:	f003 031f 	and.w	r3, r3, #31
 8000cee:	e016      	b.n	8000d1e <HAL_ADC_ConfigChannel+0x38e>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cfc:	fa93 f3a3 	rbit	r3, r3
 8000d00:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8000d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8000d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8000d10:	2320      	movs	r3, #32
 8000d12:	e004      	b.n	8000d1e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8000d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d106      	bne.n	8000d30 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2200      	movs	r2, #0
 8000d28:	2102      	movs	r1, #2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fbb4 	bl	8000498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2103      	movs	r1, #3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb98 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10a      	bne.n	8000d5c <HAL_ADC_ConfigChannel+0x3cc>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2103      	movs	r1, #3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fb8d 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	0e9b      	lsrs	r3, r3, #26
 8000d56:	f003 021f 	and.w	r2, r3, #31
 8000d5a:	e017      	b.n	8000d8c <HAL_ADC_ConfigChannel+0x3fc>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2103      	movs	r1, #3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fb82 	bl	800046c <LL_ADC_GetOffsetChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d6e:	fa93 f3a3 	rbit	r3, r3
 8000d72:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8000d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d76:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8000d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	e003      	b.n	8000d8a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8000d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d84:	fab3 f383 	clz	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d105      	bne.n	8000da4 <HAL_ADC_ConfigChannel+0x414>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	0e9b      	lsrs	r3, r3, #26
 8000d9e:	f003 031f 	and.w	r3, r3, #31
 8000da2:	e011      	b.n	8000dc8 <HAL_ADC_ConfigChannel+0x438>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dac:	fa93 f3a3 	rbit	r3, r3
 8000db0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000db2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000db4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8000db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	e003      	b.n	8000dc8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8000dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d106      	bne.n	8000dda <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fb5f 	bl	8000498 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fc52 	bl	8000688 <LL_ADC_IsEnabled>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8140 	bne.w	800106c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	6819      	ldr	r1, [r3, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	f7ff fbd3 	bl	80005a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	4a8f      	ldr	r2, [pc, #572]	; (8001040 <HAL_ADC_ConfigChannel+0x6b0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	f040 8131 	bne.w	800106c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10b      	bne.n	8000e32 <HAL_ADC_ConfigChannel+0x4a2>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0e9b      	lsrs	r3, r3, #26
 8000e20:	3301      	adds	r3, #1
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	2b09      	cmp	r3, #9
 8000e28:	bf94      	ite	ls
 8000e2a:	2301      	movls	r3, #1
 8000e2c:	2300      	movhi	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	e019      	b.n	8000e66 <HAL_ADC_ConfigChannel+0x4d6>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e3a:	fa93 f3a3 	rbit	r3, r3
 8000e3e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8000e40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e42:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8000e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8000e4a:	2320      	movs	r3, #32
 8000e4c:	e003      	b.n	8000e56 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8000e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	3301      	adds	r3, #1
 8000e58:	f003 031f 	and.w	r3, r3, #31
 8000e5c:	2b09      	cmp	r3, #9
 8000e5e:	bf94      	ite	ls
 8000e60:	2301      	movls	r3, #1
 8000e62:	2300      	movhi	r3, #0
 8000e64:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d079      	beq.n	8000f5e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d107      	bne.n	8000e86 <HAL_ADC_ConfigChannel+0x4f6>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	0e9b      	lsrs	r3, r3, #26
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	069b      	lsls	r3, r3, #26
 8000e80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e84:	e015      	b.n	8000eb2 <HAL_ADC_ConfigChannel+0x522>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e8e:	fa93 f3a3 	rbit	r3, r3
 8000e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e96:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8000e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	e003      	b.n	8000eaa <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8000ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	3301      	adds	r3, #1
 8000eac:	069b      	lsls	r3, r3, #26
 8000eae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d109      	bne.n	8000ed2 <HAL_ADC_ConfigChannel+0x542>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	0e9b      	lsrs	r3, r3, #26
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	2101      	movs	r1, #1
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	e017      	b.n	8000f02 <HAL_ADC_ConfigChannel+0x572>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eda:	fa93 f3a3 	rbit	r3, r3
 8000ede:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8000ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8000ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8000eea:	2320      	movs	r3, #32
 8000eec:	e003      	b.n	8000ef6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8000eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ef0:	fab3 f383 	clz	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f003 031f 	and.w	r3, r3, #31
 8000efc:	2101      	movs	r1, #1
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	ea42 0103 	orr.w	r1, r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10a      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x598>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	0e9b      	lsrs	r3, r3, #26
 8000f18:	3301      	adds	r3, #1
 8000f1a:	f003 021f 	and.w	r2, r3, #31
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	051b      	lsls	r3, r3, #20
 8000f26:	e018      	b.n	8000f5a <HAL_ADC_ConfigChannel+0x5ca>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8000f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8000f40:	2320      	movs	r3, #32
 8000f42:	e003      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8000f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f46:	fab3 f383 	clz	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	f003 021f 	and.w	r2, r3, #31
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f5a:	430b      	orrs	r3, r1
 8000f5c:	e081      	b.n	8001062 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d107      	bne.n	8000f7a <HAL_ADC_ConfigChannel+0x5ea>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	0e9b      	lsrs	r3, r3, #26
 8000f70:	3301      	adds	r3, #1
 8000f72:	069b      	lsls	r3, r3, #26
 8000f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f78:	e015      	b.n	8000fa6 <HAL_ADC_ConfigChannel+0x616>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8000f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8000f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8000f92:	2320      	movs	r3, #32
 8000f94:	e003      	b.n	8000f9e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8000f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f98:	fab3 f383 	clz	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	069b      	lsls	r3, r3, #26
 8000fa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d109      	bne.n	8000fc6 <HAL_ADC_ConfigChannel+0x636>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	0e9b      	lsrs	r3, r3, #26
 8000fb8:	3301      	adds	r3, #1
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	e017      	b.n	8000ff6 <HAL_ADC_ConfigChannel+0x666>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	61fb      	str	r3, [r7, #28]
  return result;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	e003      	b.n	8000fea <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3301      	adds	r3, #1
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	ea42 0103 	orr.w	r1, r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10d      	bne.n	8001022 <HAL_ADC_ConfigChannel+0x692>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	0e9b      	lsrs	r3, r3, #26
 800100c:	3301      	adds	r3, #1
 800100e:	f003 021f 	and.w	r2, r3, #31
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	3b1e      	subs	r3, #30
 800101a:	051b      	lsls	r3, r3, #20
 800101c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001020:	e01e      	b.n	8001060 <HAL_ADC_ConfigChannel+0x6d0>
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	613b      	str	r3, [r7, #16]
  return result;
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d104      	bne.n	8001044 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800103a:	2320      	movs	r3, #32
 800103c:	e006      	b.n	800104c <HAL_ADC_ConfigChannel+0x6bc>
 800103e:	bf00      	nop
 8001040:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fab3 f383 	clz	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	3301      	adds	r3, #1
 800104e:	f003 021f 	and.w	r2, r3, #31
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	3b1e      	subs	r3, #30
 800105a:	051b      	lsls	r3, r3, #20
 800105c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001060:	430b      	orrs	r3, r1
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	6892      	ldr	r2, [r2, #8]
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fa70 	bl	800054c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <HAL_ADC_ConfigChannel+0x7d4>)
 8001072:	4013      	ands	r3, r2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d06b      	beq.n	8001150 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001078:	483b      	ldr	r0, [pc, #236]	; (8001168 <HAL_ADC_ConfigChannel+0x7d8>)
 800107a:	f7ff f9c5 	bl	8000408 <LL_ADC_GetCommonPathInternalCh>
 800107e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a39      	ldr	r2, [pc, #228]	; (800116c <HAL_ADC_ConfigChannel+0x7dc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d126      	bne.n	80010da <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800108c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d120      	bne.n	80010da <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a34      	ldr	r2, [pc, #208]	; (8001170 <HAL_ADC_ConfigChannel+0x7e0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d156      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010aa:	4619      	mov	r1, r3
 80010ac:	482e      	ldr	r0, [pc, #184]	; (8001168 <HAL_ADC_ConfigChannel+0x7d8>)
 80010ae:	f7ff f998 	bl	80003e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HAL_ADC_ConfigChannel+0x7e4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	099b      	lsrs	r3, r3, #6
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_ADC_ConfigChannel+0x7e8>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	099a      	lsrs	r2, r3, #6
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80010ca:	e002      	b.n	80010d2 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f9      	bne.n	80010cc <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010d8:	e03a      	b.n	8001150 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a27      	ldr	r2, [pc, #156]	; (800117c <HAL_ADC_ConfigChannel+0x7ec>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d113      	bne.n	800110c <HAL_ADC_ConfigChannel+0x77c>
 80010e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10d      	bne.n	800110c <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <HAL_ADC_ConfigChannel+0x7e0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12a      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001102:	4619      	mov	r1, r3
 8001104:	4818      	ldr	r0, [pc, #96]	; (8001168 <HAL_ADC_ConfigChannel+0x7d8>)
 8001106:	f7ff f96c 	bl	80003e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800110a:	e021      	b.n	8001150 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <HAL_ADC_ConfigChannel+0x7f0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d11c      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d116      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <HAL_ADC_ConfigChannel+0x7e0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d111      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800112c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001134:	4619      	mov	r1, r3
 8001136:	480c      	ldr	r0, [pc, #48]	; (8001168 <HAL_ADC_ConfigChannel+0x7d8>)
 8001138:	f7ff f953 	bl	80003e2 <LL_ADC_SetCommonPathInternalCh>
 800113c:	e008      	b.n	8001150 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	f043 0220 	orr.w	r2, r3, #32
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001158:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800115c:	4618      	mov	r0, r3
 800115e:	37d8      	adds	r7, #216	; 0xd8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	80080000 	.word	0x80080000
 8001168:	50040300 	.word	0x50040300
 800116c:	c7520000 	.word	0xc7520000
 8001170:	50040000 	.word	0x50040000
 8001174:	20000118 	.word	0x20000118
 8001178:	053e2d63 	.word	0x053e2d63
 800117c:	cb840000 	.word	0xcb840000
 8001180:	80000001 	.word	0x80000001

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff3e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff31 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e054      	b.n	8001464 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7f5b      	ldrb	r3, [r3, #29]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d105      	bne.n	80013d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f00b fed2 	bl	800d174 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	791b      	ldrb	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a22      	ldr	r2, [pc, #136]	; (800146c <HAL_CRC_Init+0xc4>)
 80013e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0218 	bic.w	r2, r2, #24
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	e00c      	b.n	8001412 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6899      	ldr	r1, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	461a      	mov	r2, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f834 	bl	8001470 <HAL_CRCEx_Polynomial_Set>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e028      	b.n	8001464 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	795b      	ldrb	r3, [r3, #5]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d105      	bne.n	8001426 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f04f 32ff 	mov.w	r2, #4294967295
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	e004      	b.n	8001430 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6912      	ldr	r2, [r2, #16]
 800142e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	04c11db7 	.word	0x04c11db7

08001470 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001480:	231f      	movs	r3, #31
 8001482:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001484:	bf00      	nop
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	613a      	str	r2, [r7, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d009      	beq.n	80014a4 <HAL_CRCEx_Polynomial_Set+0x34>
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b18      	cmp	r3, #24
 80014a8:	d846      	bhi.n	8001538 <HAL_CRCEx_Polynomial_Set+0xc8>
 80014aa:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	0800153f 	.word	0x0800153f
 80014b4:	08001539 	.word	0x08001539
 80014b8:	08001539 	.word	0x08001539
 80014bc:	08001539 	.word	0x08001539
 80014c0:	08001539 	.word	0x08001539
 80014c4:	08001539 	.word	0x08001539
 80014c8:	08001539 	.word	0x08001539
 80014cc:	08001539 	.word	0x08001539
 80014d0:	0800152d 	.word	0x0800152d
 80014d4:	08001539 	.word	0x08001539
 80014d8:	08001539 	.word	0x08001539
 80014dc:	08001539 	.word	0x08001539
 80014e0:	08001539 	.word	0x08001539
 80014e4:	08001539 	.word	0x08001539
 80014e8:	08001539 	.word	0x08001539
 80014ec:	08001539 	.word	0x08001539
 80014f0:	08001521 	.word	0x08001521
 80014f4:	08001539 	.word	0x08001539
 80014f8:	08001539 	.word	0x08001539
 80014fc:	08001539 	.word	0x08001539
 8001500:	08001539 	.word	0x08001539
 8001504:	08001539 	.word	0x08001539
 8001508:	08001539 	.word	0x08001539
 800150c:	08001539 	.word	0x08001539
 8001510:	08001515 	.word	0x08001515
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	2b06      	cmp	r3, #6
 8001518:	d913      	bls.n	8001542 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800151e:	e010      	b.n	8001542 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2b07      	cmp	r3, #7
 8001524:	d90f      	bls.n	8001546 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800152a:	e00c      	b.n	8001546 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	d90b      	bls.n	800154a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001536:	e008      	b.n	800154a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	75fb      	strb	r3, [r7, #23]
      break;
 800153c:	e006      	b.n	800154c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800153e:	bf00      	nop
 8001540:	e004      	b.n	800154c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001542:	bf00      	nop
 8001544:	e002      	b.n	800154c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001546:	bf00      	nop
 8001548:	e000      	b.n	800154c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800154a:	bf00      	nop
  }
  if (status == HAL_OK)
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10d      	bne.n	800156e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f023 0118 	bic.w	r1, r3, #24
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	430a      	orrs	r2, r1
 800156c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800156e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001570:	4618      	mov	r0, r3
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e154      	b.n	8001836 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8146 	beq.w	8001830 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d00b      	beq.n	80015c4 <HAL_GPIO_Init+0x48>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d007      	beq.n	80015c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b8:	2b11      	cmp	r3, #17
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b12      	cmp	r3, #18
 80015c2:	d130      	bne.n	8001626 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015fa:	2201      	movs	r2, #1
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	f003 0201 	and.w	r2, r3, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0xea>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b12      	cmp	r3, #18
 8001664:	d123      	bne.n	80016ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3208      	adds	r2, #8
 800166e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0203 	and.w	r2, r3, #3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80a0 	beq.w	8001830 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f0:	4b58      	ldr	r3, [pc, #352]	; (8001854 <HAL_GPIO_Init+0x2d8>)
 80016f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f4:	4a57      	ldr	r2, [pc, #348]	; (8001854 <HAL_GPIO_Init+0x2d8>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6613      	str	r3, [r2, #96]	; 0x60
 80016fc:	4b55      	ldr	r3, [pc, #340]	; (8001854 <HAL_GPIO_Init+0x2d8>)
 80016fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001708:	4a53      	ldr	r2, [pc, #332]	; (8001858 <HAL_GPIO_Init+0x2dc>)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001732:	d019      	beq.n	8001768 <HAL_GPIO_Init+0x1ec>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a49      	ldr	r2, [pc, #292]	; (800185c <HAL_GPIO_Init+0x2e0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d013      	beq.n	8001764 <HAL_GPIO_Init+0x1e8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a48      	ldr	r2, [pc, #288]	; (8001860 <HAL_GPIO_Init+0x2e4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00d      	beq.n	8001760 <HAL_GPIO_Init+0x1e4>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a47      	ldr	r2, [pc, #284]	; (8001864 <HAL_GPIO_Init+0x2e8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d007      	beq.n	800175c <HAL_GPIO_Init+0x1e0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a46      	ldr	r2, [pc, #280]	; (8001868 <HAL_GPIO_Init+0x2ec>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d101      	bne.n	8001758 <HAL_GPIO_Init+0x1dc>
 8001754:	2304      	movs	r3, #4
 8001756:	e008      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001758:	2307      	movs	r3, #7
 800175a:	e006      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 800175c:	2303      	movs	r3, #3
 800175e:	e004      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001760:	2302      	movs	r3, #2
 8001762:	e002      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001768:	2300      	movs	r3, #0
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	f002 0203 	and.w	r2, r2, #3
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	4093      	lsls	r3, r2
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800177a:	4937      	ldr	r1, [pc, #220]	; (8001858 <HAL_GPIO_Init+0x2dc>)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <HAL_GPIO_Init+0x2f0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ac:	4a2f      	ldr	r2, [pc, #188]	; (800186c <HAL_GPIO_Init+0x2f0>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_GPIO_Init+0x2f0>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017d6:	4a25      	ldr	r2, [pc, #148]	; (800186c <HAL_GPIO_Init+0x2f0>)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_GPIO_Init+0x2f0>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_GPIO_Init+0x2f0>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_GPIO_Init+0x2f0>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_GPIO_Init+0x2f0>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	f47f aea3 	bne.w	800158c <HAL_GPIO_Init+0x10>
  }
}
 8001846:	bf00      	nop
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000
 800185c:	48000400 	.word	0x48000400
 8001860:	48000800 	.word	0x48000800
 8001864:	48000c00 	.word	0x48000c00
 8001868:	48001000 	.word	0x48001000
 800186c:	40010400 	.word	0x40010400

08001870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e001      	b.n	8001892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43d9      	mvns	r1, r3
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	400b      	ands	r3, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	619a      	str	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f806 	bl	8001934 <HAL_GPIO_EXTI_Callback>
  }
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e081      	b.n	8001a60 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d106      	bne.n	8001976 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f00b fdeb 	bl	800d54c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2224      	movs	r2, #36	; 0x24
 800197a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0201 	bic.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800199a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d107      	bne.n	80019c4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	e006      	b.n	80019d2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d104      	bne.n	80019e4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a06:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	ea42 0103 	orr.w	r1, r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	021a      	lsls	r2, r3, #8
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69d9      	ldr	r1, [r3, #28]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1a      	ldr	r2, [r3, #32]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0201 	orr.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d138      	bne.n	8001af0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e032      	b.n	8001af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	; 0x24
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001aba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d139      	bne.n	8001b88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e033      	b.n	8001b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2224      	movs	r2, #36	; 0x24
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e000      	b.n	8001b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b88:	2302      	movs	r3, #2
  }
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e082      	b.n	8001cb0 <HAL_LPTIM_Init+0x118>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f00b fd96 	bl	800d6f0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d103      	bne.n	8001be4 <HAL_LPTIM_Init+0x4c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f023 0306 	bic.w	r3, r3, #6
 8001be2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001bf6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d103      	bne.n	8001c08 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 03d8 	bic.w	r3, r3, #216	; 0xd8
 8001c06:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_LPTIM_Init+0x120>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001c18:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001c1e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001c24:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001c2a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d107      	bne.n	8001c4a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001c42:	4313      	orrs	r3, r2
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d104      	bne.n	8001c5c <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d007      	beq.n	8001c78 <HAL_LPTIM_Init+0xe0>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8001c70:	4313      	orrs	r3, r2
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <HAL_LPTIM_Init+0x124>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d108      	bne.n	8001c9c <HAL_LPTIM_Init+0x104>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	621a      	str	r2, [r3, #32]
 8001c9a:	e004      	b.n	8001ca6 <HAL_LPTIM_Init+0x10e>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ca4:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	ff19f1f8 	.word	0xff19f1f8
 8001cbc:	40007c00 	.word	0x40007c00

08001cc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	b08b      	sub	sp, #44	; 0x2c
 8001cc4:	af06      	add	r7, sp, #24
 8001cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e104      	b.n	8001edc <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f00c fd36 	bl	800e758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f007 f9f1 	bl	80090e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	687e      	ldr	r6, [r7, #4]
 8001d06:	466d      	mov	r5, sp
 8001d08:	f106 0410 	add.w	r4, r6, #16
 8001d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	602b      	str	r3, [r5, #0]
 8001d14:	1d33      	adds	r3, r6, #4
 8001d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d18:	6838      	ldr	r0, [r7, #0]
 8001d1a:	f007 f9b9 	bl	8009090 <USB_CoreInit>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0d5      	b.n	8001edc <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f007 f9ed 	bl	8009116 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e04c      	b.n	8001ddc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	3301      	adds	r3, #1
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	b298      	uxth	r0, r3
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3336      	adds	r3, #54	; 0x36
 8001d80:	4602      	mov	r2, r0
 8001d82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	3303      	adds	r3, #3
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	3338      	adds	r3, #56	; 0x38
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	333c      	adds	r3, #60	; 0x3c
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	3340      	adds	r3, #64	; 0x40
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3ad      	bcc.n	8001d42 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	e044      	b.n	8001e76 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	3301      	adds	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d3b5      	bcc.n	8001dec <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	687e      	ldr	r6, [r7, #4]
 8001e88:	466d      	mov	r5, sp
 8001e8a:	f106 0410 	add.w	r4, r6, #16
 8001e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	602b      	str	r3, [r5, #0]
 8001e96:	1d33      	adds	r3, r6, #4
 8001e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e9a:	6838      	ldr	r0, [r7, #0]
 8001e9c:	f007 f948 	bl	8009130 <USB_DevInit>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e014      	b.n	8001edc <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d102      	bne.n	8001ed0 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f001 fa4b 	bl	8003366 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f009 f901 	bl	800b0dc <USB_DevDisconnect>

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ee4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_PCD_Start+0x16>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e012      	b.n	8001f20 <HAL_PCD_Start+0x3c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f007 f8d3 	bl	80090b2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f009 f8cc 	bl	800b0ae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f009 f8e6 	bl	800b106 <USB_ReadInterrupts>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f44:	d102      	bne.n	8001f4c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fb43 	bl	80025d2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f009 f8d8 	bl	800b106 <USB_ReadInterrupts>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f60:	d112      	bne.n	8001f88 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f74:	b292      	uxth	r2, r2
 8001f76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f00c fc8d 	bl	800e89a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f80:	2100      	movs	r1, #0
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f91e 	bl	80021c4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f009 f8ba 	bl	800b106 <USB_ReadInterrupts>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f009 f8a3 	bl	800b106 <USB_ReadInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fca:	d10b      	bne.n	8001fe4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f009 f88c 	bl	800b106 <USB_ReadInterrupts>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff8:	d133      	bne.n	8002062 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0204 	bic.w	r2, r2, #4
 800200c:	b292      	uxth	r2, r2
 800200e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0208 	bic.w	r2, r2, #8
 8002024:	b292      	uxth	r2, r2
 8002026:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d107      	bne.n	8002044 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800203c:	2100      	movs	r1, #0
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f00c feb6 	bl	800edb0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f00c fc61 	bl	800e90c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800205c:	b292      	uxth	r2, r2
 800205e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f009 f84d 	bl	800b106 <USB_ReadInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002076:	d126      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002080:	b29a      	uxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0208 	orr.w	r2, r2, #8
 800208a:	b292      	uxth	r2, r2
 800208c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a2:	b292      	uxth	r2, r2
 80020a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0204 	orr.w	r2, r2, #4
 80020ba:	b292      	uxth	r2, r2
 80020bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f00c fc09 	bl	800e8d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f009 f81b 	bl	800b106 <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	2b80      	cmp	r3, #128	; 0x80
 80020d8:	d13f      	bne.n	800215a <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ec:	b292      	uxth	r2, r2
 80020ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d12b      	bne.n	8002154 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0204 	orr.w	r2, r2, #4
 800210e:	b292      	uxth	r2, r2
 8002110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800211c:	b29a      	uxth	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0208 	orr.w	r2, r2, #8
 8002126:	b292      	uxth	r2, r2
 8002128:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800213c:	b29b      	uxth	r3, r3
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800214a:	2101      	movs	r1, #1
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f00c fe2f 	bl	800edb0 <HAL_PCDEx_LPM_Callback>
 8002152:	e002      	b.n	800215a <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f00c fbbf 	bl	800e8d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f008 ffd1 	bl	800b106 <USB_ReadInterrupts>
 8002164:	4603      	mov	r3, r0
 8002166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800216e:	d10e      	bne.n	800218e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002178:	b29a      	uxth	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002182:	b292      	uxth	r2, r2
 8002184:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f00c fb78 	bl	800e87e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f008 ffb7 	bl	800b106 <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a2:	d10b      	bne.n	80021bc <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b6:	b292      	uxth	r2, r2
 80021b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_PCD_SetAddress+0x1a>
 80021da:	2302      	movs	r3, #2
 80021dc:	e013      	b.n	8002206 <HAL_PCD_SetAddress+0x42>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f008 ff45 	bl	800b086 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	4608      	mov	r0, r1
 8002218:	4611      	mov	r1, r2
 800221a:	461a      	mov	r2, r3
 800221c:	4603      	mov	r3, r0
 800221e:	70fb      	strb	r3, [r7, #3]
 8002220:	460b      	mov	r3, r1
 8002222:	803b      	strh	r3, [r7, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800222c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002230:	2b00      	cmp	r3, #0
 8002232:	da0e      	bge.n	8002252 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	705a      	strb	r2, [r3, #1]
 8002250:	e00e      	b.n	8002270 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 0207 	and.w	r2, r3, #7
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	b2da      	uxtb	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800227c:	883a      	ldrh	r2, [r7, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	78ba      	ldrb	r2, [r7, #2]
 8002286:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	785b      	ldrb	r3, [r3, #1]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800229a:	78bb      	ldrb	r3, [r7, #2]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d102      	bne.n	80022a6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_PCD_EP_Open+0xa6>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e00e      	b.n	80022d2 <HAL_PCD_EP_Open+0xc4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f006 ff56 	bl	8009174 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80022d0:	7afb      	ldrb	r3, [r7, #11]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	da0e      	bge.n	800230c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	705a      	strb	r2, [r3, #1]
 800230a:	e00e      	b.n	800232a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	f003 0207 	and.w	r2, r3, #7
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	b2da      	uxtb	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_PCD_EP_Close+0x6a>
 8002340:	2302      	movs	r3, #2
 8002342:	e00e      	b.n	8002362 <HAL_PCD_EP_Close+0x88>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68f9      	ldr	r1, [r7, #12]
 8002352:	4618      	mov	r0, r3
 8002354:	f007 fa7c 	bl	8009850 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	460b      	mov	r3, r1
 8002378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800237a:	7afb      	ldrb	r3, [r7, #11]
 800237c:	f003 0207 	and.w	r2, r3, #7
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2200      	movs	r2, #0
 80023a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2200      	movs	r2, #0
 80023a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023aa:	7afb      	ldrb	r3, [r7, #11]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023b6:	7afb      	ldrb	r3, [r7, #11]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6979      	ldr	r1, [r7, #20]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f007 fc2f 	bl	8009c2a <USB_EPStartXfer>
 80023cc:	e005      	b.n	80023da <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6979      	ldr	r1, [r7, #20]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f007 fc28 	bl	8009c2a <USB_EPStartXfer>
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	460b      	mov	r3, r1
 80023f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f4:	7afb      	ldrb	r3, [r7, #11]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2201      	movs	r2, #1
 800242e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002430:	7afb      	ldrb	r3, [r7, #11]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	b2da      	uxtb	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800243c:	7afb      	ldrb	r3, [r7, #11]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6979      	ldr	r1, [r7, #20]
 800244c:	4618      	mov	r0, r3
 800244e:	f007 fbec 	bl	8009c2a <USB_EPStartXfer>
 8002452:	e005      	b.n	8002460 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6979      	ldr	r1, [r7, #20]
 800245a:	4618      	mov	r0, r3
 800245c:	f007 fbe5 	bl	8009c2a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 0207 	and.w	r2, r3, #7
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	429a      	cmp	r2, r3
 8002482:	d901      	bls.n	8002488 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e04c      	b.n	8002522 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800248c:	2b00      	cmp	r3, #0
 800248e:	da0e      	bge.n	80024ae <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	705a      	strb	r2, [r3, #1]
 80024ac:	e00c      	b.n	80024c8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_PCD_EP_SetStall+0x7e>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e01c      	b.n	8002522 <HAL_PCD_EP_SetStall+0xb8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f008 fcc6 	bl	800ae88 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	2b00      	cmp	r3, #0
 8002504:	d108      	bne.n	8002518 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002510:	4619      	mov	r1, r3
 8002512:	4610      	mov	r0, r2
 8002514:	f008 fe07 	bl	800b126 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 020f 	and.w	r2, r3, #15
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d901      	bls.n	8002548 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e040      	b.n	80025ca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800254c:	2b00      	cmp	r3, #0
 800254e:	da0e      	bge.n	800256e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	705a      	strb	r2, [r3, #1]
 800256c:	e00e      	b.n	800258c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	f003 0207 	and.w	r2, r3, #7
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_PCD_EP_ClrStall+0x82>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e00e      	b.n	80025ca <HAL_PCD_EP_ClrStall+0xa0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68f9      	ldr	r1, [r7, #12]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f008 fcb5 	bl	800af2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b08e      	sub	sp, #56	; 0x38
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025da:	e2d1      	b.n	8002b80 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80025f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 8152 	bne.w	80028a0 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	d150      	bne.n	80026a8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	81fb      	strh	r3, [r7, #14]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002626:	b29b      	uxth	r3, r3
 8002628:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3328      	adds	r3, #40	; 0x28
 800262e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002638:	b29b      	uxth	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	4413      	add	r3, r2
 800264a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	441a      	add	r2, r3
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002666:	2100      	movs	r1, #0
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f00c f8ee 	bl	800e84a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8282 	beq.w	8002b80 <PCD_EP_ISR_Handler+0x5ae>
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 827d 	bne.w	8002b80 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002692:	b2da      	uxtb	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b292      	uxth	r2, r2
 800269a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026a6:	e26b      	b.n	8002b80 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d032      	beq.n	8002728 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f008 fd5f 	bl	800b1c0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b29a      	uxth	r2, r3
 800270a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800270e:	4013      	ands	r3, r2
 8002710:	823b      	strh	r3, [r7, #16]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	8a3a      	ldrh	r2, [r7, #16]
 8002718:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800271c:	b292      	uxth	r2, r2
 800271e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f00c f865 	bl	800e7f0 <HAL_PCD_SetupStageCallback>
 8002726:	e22b      	b.n	8002b80 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002728:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800272c:	2b00      	cmp	r3, #0
 800272e:	f280 8227 	bge.w	8002b80 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29a      	uxth	r2, r3
 800273a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800273e:	4013      	ands	r3, r2
 8002740:	83bb      	strh	r3, [r7, #28]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	8bba      	ldrh	r2, [r7, #28]
 8002748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800274c:	b292      	uxth	r2, r2
 800274e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002758:	b29b      	uxth	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	4413      	add	r3, r2
 800276a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d019      	beq.n	80027b4 <PCD_EP_ISR_Handler+0x1e2>
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d015      	beq.n	80027b4 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	6959      	ldr	r1, [r3, #20]
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002798:	b29b      	uxth	r3, r3
 800279a:	f008 fd11 	bl	800b1c0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	441a      	add	r2, r3
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027ac:	2100      	movs	r1, #0
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f00c f830 	bl	800e814 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4413      	add	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d112      	bne.n	8002802 <PCD_EP_ISR_Handler+0x230>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	801a      	strh	r2, [r3, #0]
 8002800:	e02f      	b.n	8002862 <PCD_EP_ISR_Handler+0x290>
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b3e      	cmp	r3, #62	; 0x3e
 8002808:	d813      	bhi.n	8002832 <PCD_EP_ISR_Handler+0x260>
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <PCD_EP_ISR_Handler+0x252>
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	3301      	adds	r3, #1
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	b29b      	uxth	r3, r3
 8002828:	029b      	lsls	r3, r3, #10
 800282a:	b29a      	uxth	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	801a      	strh	r2, [r3, #0]
 8002830:	e017      	b.n	8002862 <PCD_EP_ISR_Handler+0x290>
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <PCD_EP_ISR_Handler+0x27a>
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	3b01      	subs	r3, #1
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	b29b      	uxth	r3, r3
 8002850:	029b      	lsls	r3, r3, #10
 8002852:	b29b      	uxth	r3, r3
 8002854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800285c:	b29a      	uxth	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	827b      	strh	r3, [r7, #18]
 8002874:	8a7b      	ldrh	r3, [r7, #18]
 8002876:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800287a:	827b      	strh	r3, [r7, #18]
 800287c:	8a7b      	ldrh	r3, [r7, #18]
 800287e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002882:	827b      	strh	r3, [r7, #18]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	8a7b      	ldrh	r3, [r7, #18]
 800288a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800288e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289a:	b29b      	uxth	r3, r3
 800289c:	8013      	strh	r3, [r2, #0]
 800289e:	e16f      	b.n	8002b80 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f280 80e4 	bge.w	8002a84 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028d2:	4013      	ands	r3, r2
 80028d4:	853b      	strh	r3, [r7, #40]	; 0x28
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028ea:	b292      	uxth	r2, r2
 80028ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028ee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	7b1b      	ldrb	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d120      	bne.n	800294e <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002914:	b29b      	uxth	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	4413      	add	r3, r2
 8002926:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002930:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002932:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8083 	beq.w	8002a40 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	6959      	ldr	r1, [r3, #20]
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	88da      	ldrh	r2, [r3, #6]
 8002946:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002948:	f008 fc3a 	bl	800b1c0 <USB_ReadPMA>
 800294c:	e078      	b.n	8002a40 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	78db      	ldrb	r3, [r3, #3]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d108      	bne.n	8002968 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002956:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002958:	461a      	mov	r2, r3
 800295a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f91d 	bl	8002b9c <HAL_PCD_EP_DB_Receive>
 8002962:	4603      	mov	r3, r0
 8002964:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002966:	e06b      	b.n	8002a40 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b29b      	uxth	r3, r3
 800297a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	847b      	strh	r3, [r7, #34]	; 0x22
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	441a      	add	r2, r3
 8002992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800299c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01f      	beq.n	8002a02 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d028      	beq.n	8002a40 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	6959      	ldr	r1, [r3, #20]
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	891a      	ldrh	r2, [r3, #8]
 80029fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029fc:	f008 fbe0 	bl	800b1c0 <USB_ReadPMA>
 8002a00:	e01e      	b.n	8002a40 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a26:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002a28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	6959      	ldr	r1, [r3, #20]
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	895a      	ldrh	r2, [r3, #10]
 8002a3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a3c:	f008 fbc0 	bl	800b1c0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a46:	441a      	add	r2, r3
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a52:	441a      	add	r2, r3
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <PCD_EP_ISR_Handler+0x498>
 8002a60:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d206      	bcs.n	8002a78 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f00b fecf 	bl	800e814 <HAL_PCD_DataOutStageCallback>
 8002a76:	e005      	b.n	8002a84 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f007 f8d3 	bl	8009c2a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d078      	beq.n	8002b80 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abc:	843b      	strh	r3, [r7, #32]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	441a      	add	r2, r3
 8002acc:	8c3b      	ldrh	r3, [r7, #32]
 8002ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	78db      	ldrb	r3, [r3, #3]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d108      	bne.n	8002af4 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d144      	bne.n	8002b74 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002aea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d13f      	bne.n	8002b74 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b18:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	8bfb      	ldrh	r3, [r7, #30]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d906      	bls.n	8002b32 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	8bfb      	ldrh	r3, [r7, #30]
 8002b2a:	1ad2      	subs	r2, r2, r3
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	619a      	str	r2, [r3, #24]
 8002b30:	e002      	b.n	8002b38 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d106      	bne.n	8002b4e <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f00b fe7f 	bl	800e84a <HAL_PCD_DataInStageCallback>
 8002b4c:	e018      	b.n	8002b80 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	8bfb      	ldrh	r3, [r7, #30]
 8002b54:	441a      	add	r2, r3
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	69da      	ldr	r2, [r3, #28]
 8002b5e:	8bfb      	ldrh	r3, [r7, #30]
 8002b60:	441a      	add	r2, r3
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f007 f85c 	bl	8009c2a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002b72:	e005      	b.n	8002b80 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b76:	461a      	mov	r2, r3
 8002b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f917 	bl	8002dae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	b21b      	sxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f6ff ad25 	blt.w	80025dc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3738      	adds	r7, #56	; 0x38
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d07c      	beq.n	8002cae <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	8b7b      	ldrh	r3, [r7, #26]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d306      	bcc.n	8002bf2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	8b7b      	ldrh	r3, [r7, #26]
 8002bea:	1ad2      	subs	r2, r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	619a      	str	r2, [r3, #24]
 8002bf0:	e002      	b.n	8002bf8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d123      	bne.n	8002c48 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	833b      	strh	r3, [r7, #24]
 8002c1c:	8b3b      	ldrh	r3, [r7, #24]
 8002c1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c22:	833b      	strh	r3, [r7, #24]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	441a      	add	r2, r3
 8002c32:	8b3b      	ldrh	r3, [r7, #24]
 8002c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01f      	beq.n	8002c92 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6c:	82fb      	strh	r3, [r7, #22]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	441a      	add	r2, r3
 8002c7c:	8afb      	ldrh	r3, [r7, #22]
 8002c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c92:	8b7b      	ldrh	r3, [r7, #26]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8085 	beq.w	8002da4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6959      	ldr	r1, [r3, #20]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	891a      	ldrh	r2, [r3, #8]
 8002ca6:	8b7b      	ldrh	r3, [r7, #26]
 8002ca8:	f008 fa8a 	bl	800b1c0 <USB_ReadPMA>
 8002cac:	e07a      	b.n	8002da4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	699a      	ldr	r2, [r3, #24]
 8002cd8:	8b7b      	ldrh	r3, [r7, #26]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d306      	bcc.n	8002cec <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	8b7b      	ldrh	r3, [r7, #26]
 8002ce4:	1ad2      	subs	r2, r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	619a      	str	r2, [r3, #24]
 8002cea:	e002      	b.n	8002cf2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d123      	bne.n	8002d42 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d14:	83fb      	strh	r3, [r7, #30]
 8002d16:	8bfb      	ldrh	r3, [r7, #30]
 8002d18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d1c:	83fb      	strh	r3, [r7, #30]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	441a      	add	r2, r3
 8002d2c:	8bfb      	ldrh	r3, [r7, #30]
 8002d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11f      	bne.n	8002d8c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d66:	83bb      	strh	r3, [r7, #28]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	441a      	add	r2, r3
 8002d76:	8bbb      	ldrh	r3, [r7, #28]
 8002d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d8c:	8b7b      	ldrh	r3, [r7, #26]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	6959      	ldr	r1, [r3, #20]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	895a      	ldrh	r2, [r3, #10]
 8002d9e:	8b7b      	ldrh	r3, [r7, #26]
 8002da0:	f008 fa0e 	bl	800b1c0 <USB_ReadPMA>
    }
  }

  return count;
 8002da4:	8b7b      	ldrh	r3, [r7, #26]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b092      	sub	sp, #72	; 0x48
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	4613      	mov	r3, r2
 8002dba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8130 	beq.w	8003028 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dec:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d906      	bls.n	8002e06 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dfe:	1ad2      	subs	r2, r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	619a      	str	r2, [r3, #24]
 8002e04:	e002      	b.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d12c      	bne.n	8002e6e <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f00b fd15 	bl	800e84a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 822d 	beq.w	8003286 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e46:	827b      	strh	r3, [r7, #18]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	8a7b      	ldrh	r3, [r7, #18]
 8002e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	8013      	strh	r3, [r2, #0]
 8002e6c:	e20b      	b.n	8003286 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01f      	beq.n	8002eb8 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e92:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	f040 81e1 	bne.w	8003286 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002eca:	441a      	add	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ed6:	441a      	add	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	6a1a      	ldr	r2, [r3, #32]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d309      	bcc.n	8002efc <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	1ad2      	subs	r2, r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	621a      	str	r2, [r3, #32]
 8002efa:	e014      	b.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002f04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f06:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f10:	e009      	b.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d155      	bne.n	8002fda <HAL_PCD_EP_DB_Transmit+0x22c>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	4413      	add	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	00da      	lsls	r2, r3, #3
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d112      	bne.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	801a      	strh	r2, [r3, #0]
 8002f80:	e047      	b.n	8003012 <HAL_PCD_EP_DB_Transmit+0x264>
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	2b3e      	cmp	r3, #62	; 0x3e
 8002f86:	d811      	bhi.n	8002fac <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	029b      	lsls	r3, r3, #10
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	e032      	b.n	8003012 <HAL_PCD_EP_DB_Transmit+0x264>
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x214>
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	029b      	lsls	r3, r3, #10
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	801a      	strh	r2, [r3, #0]
 8002fd8:	e01b      	b.n	8003012 <HAL_PCD_EP_DB_Transmit+0x264>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	785b      	ldrb	r3, [r3, #1]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d117      	bne.n	8003012 <HAL_PCD_EP_DB_Transmit+0x264>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	623b      	str	r3, [r7, #32]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	623b      	str	r3, [r7, #32]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	00da      	lsls	r2, r3, #3
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	4413      	add	r3, r2
 8003004:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300c:	b29a      	uxth	r2, r3
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	6959      	ldr	r1, [r3, #20]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	891a      	ldrh	r2, [r3, #8]
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	b29b      	uxth	r3, r3
 8003022:	f008 f88c 	bl	800b13e <USB_WritePMA>
 8003026:	e12e      	b.n	8003286 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003030:	b29b      	uxth	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	4413      	add	r3, r2
 8003042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003054:	429a      	cmp	r2, r3
 8003056:	d306      	bcc.n	8003066 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800305e:	1ad2      	subs	r2, r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	619a      	str	r2, [r3, #24]
 8003064:	e002      	b.n	800306c <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d12c      	bne.n	80030ce <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f00b fbe5 	bl	800e84a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 80fd 	bne.w	8003286 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	441a      	add	r2, r3
 80030b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	8013      	strh	r3, [r2, #0]
 80030cc:	e0db      	b.n	8003286 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d11f      	bne.n	8003118 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	441a      	add	r2, r3
 8003102:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800310c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003114:	b29b      	uxth	r3, r3
 8003116:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800311e:	2b01      	cmp	r3, #1
 8003120:	f040 80b1 	bne.w	8003286 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800312a:	441a      	add	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003136:	441a      	add	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	6a1a      	ldr	r2, [r3, #32]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	429a      	cmp	r2, r3
 8003146:	d309      	bcc.n	800315c <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	6a1a      	ldr	r2, [r3, #32]
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	1ad2      	subs	r2, r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	621a      	str	r2, [r3, #32]
 800315a:	e014      	b.n	8003186 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003164:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003166:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003170:	e009      	b.n	8003186 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2200      	movs	r2, #0
 800317c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	785b      	ldrb	r3, [r3, #1]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d155      	bne.n	8003240 <HAL_PCD_EP_DB_Transmit+0x492>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a8:	4413      	add	r3, r2
 80031aa:	647b      	str	r3, [r7, #68]	; 0x44
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	00da      	lsls	r2, r3, #3
 80031b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b4:	4413      	add	r3, r2
 80031b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031ba:	643b      	str	r3, [r7, #64]	; 0x40
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d112      	bne.n	80031e8 <HAL_PCD_EP_DB_Transmit+0x43a>
 80031c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e4:	801a      	strh	r2, [r3, #0]
 80031e6:	e044      	b.n	8003272 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	2b3e      	cmp	r3, #62	; 0x3e
 80031ec:	d811      	bhi.n	8003212 <HAL_PCD_EP_DB_Transmit+0x464>
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_PCD_EP_DB_Transmit+0x456>
 80031fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003200:	3301      	adds	r3, #1
 8003202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003206:	b29b      	uxth	r3, r3
 8003208:	029b      	lsls	r3, r3, #10
 800320a:	b29a      	uxth	r2, r3
 800320c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320e:	801a      	strh	r2, [r3, #0]
 8003210:	e02f      	b.n	8003272 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003224:	3b01      	subs	r3, #1
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322a:	b29b      	uxth	r3, r3
 800322c:	029b      	lsls	r3, r3, #10
 800322e:	b29b      	uxth	r3, r3
 8003230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003238:	b29a      	uxth	r2, r3
 800323a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323c:	801a      	strh	r2, [r3, #0]
 800323e:	e018      	b.n	8003272 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	785b      	ldrb	r3, [r3, #1]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d114      	bne.n	8003272 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003250:	b29b      	uxth	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003256:	4413      	add	r3, r2
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	00da      	lsls	r2, r3, #3
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003262:	4413      	add	r3, r2
 8003264:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	b29a      	uxth	r2, r3
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6959      	ldr	r1, [r3, #20]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	895a      	ldrh	r2, [r3, #10]
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	b29b      	uxth	r3, r3
 8003282:	f007 ff5c 	bl	800b13e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
 8003298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a0:	823b      	strh	r3, [r7, #16]
 80032a2:	8a3b      	ldrh	r3, [r7, #16]
 80032a4:	f083 0310 	eor.w	r3, r3, #16
 80032a8:	823b      	strh	r3, [r7, #16]
 80032aa:	8a3b      	ldrh	r3, [r7, #16]
 80032ac:	f083 0320 	eor.w	r3, r3, #32
 80032b0:	823b      	strh	r3, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	8a3b      	ldrh	r3, [r7, #16]
 80032c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3748      	adds	r7, #72	; 0x48
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	817b      	strh	r3, [r7, #10]
 80032ee:	4613      	mov	r3, r2
 80032f0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032f2:	897b      	ldrh	r3, [r7, #10]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fe:	897b      	ldrh	r3, [r7, #10]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4413      	add	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	e009      	b.n	800332a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003316:	897a      	ldrh	r2, [r7, #10]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800332a:	893b      	ldrh	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2200      	movs	r2, #0
 8003334:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	b29a      	uxth	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	80da      	strh	r2, [r3, #6]
 800333e:	e00b      	b.n	8003358 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2201      	movs	r2, #1
 8003344:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	b29a      	uxth	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	b29a      	uxth	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800338a:	b29b      	uxth	r3, r3
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ca:	6013      	str	r3, [r2, #0]
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40007000 	.word	0x40007000

080033dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40007000 	.word	0x40007000

080033f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003406:	d130      	bne.n	800346a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003408:	4b23      	ldr	r3, [pc, #140]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003414:	d038      	beq.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800341e:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003424:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2232      	movs	r2, #50	; 0x32
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0c9b      	lsrs	r3, r3, #18
 8003438:	3301      	adds	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800343c:	e002      	b.n	8003444 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3b01      	subs	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003450:	d102      	bne.n	8003458 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f2      	bne.n	800343e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003458:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003464:	d110      	bne.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e00f      	b.n	800348a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003476:	d007      	beq.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003480:	4a05      	ldr	r2, [pc, #20]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003486:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40007000 	.word	0x40007000
 800349c:	20000118 	.word	0x20000118
 80034a0:	431bde83 	.word	0x431bde83

080034a4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80034ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034b2:	6053      	str	r3, [r2, #4]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000

080034c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f000 bc11 	b.w	8003cfa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d8:	4ba0      	ldr	r3, [pc, #640]	; (800375c <HAL_RCC_OscConfig+0x298>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e2:	4b9e      	ldr	r3, [pc, #632]	; (800375c <HAL_RCC_OscConfig+0x298>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80e4 	beq.w	80036c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <HAL_RCC_OscConfig+0x4c>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	f040 808b 	bne.w	800361e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b01      	cmp	r3, #1
 800350c:	f040 8087 	bne.w	800361e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003510:	4b92      	ldr	r3, [pc, #584]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_OscConfig+0x64>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e3e8      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1a      	ldr	r2, [r3, #32]
 800352c:	4b8b      	ldr	r3, [pc, #556]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <HAL_RCC_OscConfig+0x7e>
 8003538:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003540:	e005      	b.n	800354e <HAL_RCC_OscConfig+0x8a>
 8003542:	4b86      	ldr	r3, [pc, #536]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800354e:	4293      	cmp	r3, r2
 8003550:	d223      	bcs.n	800359a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fd78 	bl	800404c <RCC_SetFlashLatencyFromMSIRange>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e3c9      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003566:	4b7d      	ldr	r3, [pc, #500]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7c      	ldr	r2, [pc, #496]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800356c:	f043 0308 	orr.w	r3, r3, #8
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b7a      	ldr	r3, [pc, #488]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4977      	ldr	r1, [pc, #476]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003584:	4b75      	ldr	r3, [pc, #468]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	4972      	ldr	r1, [pc, #456]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
 8003598:	e025      	b.n	80035e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800359a:	4b70      	ldr	r3, [pc, #448]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6f      	ldr	r2, [pc, #444]	; (800375c <HAL_RCC_OscConfig+0x298>)
 80035a0:	f043 0308 	orr.w	r3, r3, #8
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b6d      	ldr	r3, [pc, #436]	; (800375c <HAL_RCC_OscConfig+0x298>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	496a      	ldr	r1, [pc, #424]	; (800375c <HAL_RCC_OscConfig+0x298>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035b8:	4b68      	ldr	r3, [pc, #416]	; (800375c <HAL_RCC_OscConfig+0x298>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	4965      	ldr	r1, [pc, #404]	; (800375c <HAL_RCC_OscConfig+0x298>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fd38 	bl	800404c <RCC_SetFlashLatencyFromMSIRange>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e389      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035e6:	f000 fc6f 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 80035ea:	4601      	mov	r1, r0
 80035ec:	4b5b      	ldr	r3, [pc, #364]	; (800375c <HAL_RCC_OscConfig+0x298>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	4a5a      	ldr	r2, [pc, #360]	; (8003760 <HAL_RCC_OscConfig+0x29c>)
 80035f8:	5cd3      	ldrb	r3, [r2, r3]
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003602:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_RCC_OscConfig+0x2a0>)
 8003604:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003606:	4b58      	ldr	r3, [pc, #352]	; (8003768 <HAL_RCC_OscConfig+0x2a4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc fe58 	bl	80002c0 <HAL_InitTick>
 8003610:	4603      	mov	r3, r0
 8003612:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d052      	beq.n	80036c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	e36d      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d032      	beq.n	800368c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003626:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4c      	ldr	r2, [pc, #304]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003632:	f7fc fe95 	bl	8000360 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800363a:	f7fc fe91 	bl	8000360 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e356      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003658:	4b40      	ldr	r3, [pc, #256]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a3f      	ldr	r2, [pc, #252]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800365e:	f043 0308 	orr.w	r3, r3, #8
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4b3d      	ldr	r3, [pc, #244]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	493a      	ldr	r1, [pc, #232]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003676:	4b39      	ldr	r3, [pc, #228]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	4935      	ldr	r1, [pc, #212]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003686:	4313      	orrs	r3, r2
 8003688:	604b      	str	r3, [r1, #4]
 800368a:	e01a      	b.n	80036c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800368c:	4b33      	ldr	r3, [pc, #204]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a32      	ldr	r2, [pc, #200]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003698:	f7fc fe62 	bl	8000360 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a0:	f7fc fe5e 	bl	8000360 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e323      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036b2:	4b2a      	ldr	r3, [pc, #168]	; (800375c <HAL_RCC_OscConfig+0x298>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x1dc>
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d073      	beq.n	80037b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_OscConfig+0x21c>
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d10e      	bne.n	80036f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d10b      	bne.n	80036f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e0:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_RCC_OscConfig+0x298>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d063      	beq.n	80037b4 <HAL_RCC_OscConfig+0x2f0>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d15f      	bne.n	80037b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e300      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003700:	d106      	bne.n	8003710 <HAL_RCC_OscConfig+0x24c>
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a15      	ldr	r2, [pc, #84]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e01d      	b.n	800374c <HAL_RCC_OscConfig+0x288>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x270>
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a0f      	ldr	r2, [pc, #60]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a0c      	ldr	r2, [pc, #48]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0x288>
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a08      	ldr	r2, [pc, #32]	; (800375c <HAL_RCC_OscConfig+0x298>)
 800373a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a05      	ldr	r2, [pc, #20]	; (800375c <HAL_RCC_OscConfig+0x298>)
 8003746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01b      	beq.n	800378c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fc fe04 	bl	8000360 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375a:	e010      	b.n	800377e <HAL_RCC_OscConfig+0x2ba>
 800375c:	40021000 	.word	0x40021000
 8003760:	080101a0 	.word	0x080101a0
 8003764:	20000118 	.word	0x20000118
 8003768:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800376c:	f7fc fdf8 	bl	8000360 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e2bd      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800377e:	4baf      	ldr	r3, [pc, #700]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x2a8>
 800378a:	e014      	b.n	80037b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fc fde8 	bl	8000360 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003794:	f7fc fde4 	bl	8000360 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	; 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e2a9      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037a6:	4ba5      	ldr	r3, [pc, #660]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x2d0>
 80037b2:	e000      	b.n	80037b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d060      	beq.n	8003884 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_OscConfig+0x310>
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b0c      	cmp	r3, #12
 80037cc:	d119      	bne.n	8003802 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d116      	bne.n	8003802 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037d4:	4b99      	ldr	r3, [pc, #612]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_OscConfig+0x328>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e286      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ec:	4b93      	ldr	r3, [pc, #588]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	061b      	lsls	r3, r3, #24
 80037fa:	4990      	ldr	r1, [pc, #576]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003800:	e040      	b.n	8003884 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d023      	beq.n	8003852 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800380a:	4b8c      	ldr	r3, [pc, #560]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a8b      	ldr	r2, [pc, #556]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003816:	f7fc fda3 	bl	8000360 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381e:	f7fc fd9f 	bl	8000360 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e264      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003830:	4b82      	ldr	r3, [pc, #520]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383c:	4b7f      	ldr	r3, [pc, #508]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	497c      	ldr	r1, [pc, #496]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
 8003850:	e018      	b.n	8003884 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003852:	4b7a      	ldr	r3, [pc, #488]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a79      	ldr	r2, [pc, #484]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 8003858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800385c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fc fd7f 	bl	8000360 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003866:	f7fc fd7b 	bl	8000360 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e240      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003878:	4b70      	ldr	r3, [pc, #448]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f0      	bne.n	8003866 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d03c      	beq.n	800390a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01c      	beq.n	80038d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003898:	4b68      	ldr	r3, [pc, #416]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 800389a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389e:	4a67      	ldr	r2, [pc, #412]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fc fd5a 	bl	8000360 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b0:	f7fc fd56 	bl	8000360 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e21b      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038c2:	4b5e      	ldr	r3, [pc, #376]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80038c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ef      	beq.n	80038b0 <HAL_RCC_OscConfig+0x3ec>
 80038d0:	e01b      	b.n	800390a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d2:	4b5a      	ldr	r3, [pc, #360]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80038d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d8:	4a58      	ldr	r2, [pc, #352]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e2:	f7fc fd3d 	bl	8000360 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ea:	f7fc fd39 	bl	8000360 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e1fe      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038fc:	4b4f      	ldr	r3, [pc, #316]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80038fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1ef      	bne.n	80038ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80a6 	beq.w	8003a64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003918:	2300      	movs	r3, #0
 800391a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800391c:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10d      	bne.n	8003944 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003928:	4b44      	ldr	r3, [pc, #272]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	4a43      	ldr	r2, [pc, #268]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 800392e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003932:	6593      	str	r3, [r2, #88]	; 0x58
 8003934:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003940:	2301      	movs	r3, #1
 8003942:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003944:	4b3e      	ldr	r3, [pc, #248]	; (8003a40 <HAL_RCC_OscConfig+0x57c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d118      	bne.n	8003982 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003950:	4b3b      	ldr	r3, [pc, #236]	; (8003a40 <HAL_RCC_OscConfig+0x57c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a3a      	ldr	r2, [pc, #232]	; (8003a40 <HAL_RCC_OscConfig+0x57c>)
 8003956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395c:	f7fc fd00 	bl	8000360 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003964:	f7fc fcfc 	bl	8000360 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e1c1      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003976:	4b32      	ldr	r3, [pc, #200]	; (8003a40 <HAL_RCC_OscConfig+0x57c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d108      	bne.n	800399c <HAL_RCC_OscConfig+0x4d8>
 800398a:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800399a:	e024      	b.n	80039e6 <HAL_RCC_OscConfig+0x522>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b05      	cmp	r3, #5
 80039a2:	d110      	bne.n	80039c6 <HAL_RCC_OscConfig+0x502>
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	4a24      	ldr	r2, [pc, #144]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80039ac:	f043 0304 	orr.w	r3, r3, #4
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039b4:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	4a20      	ldr	r2, [pc, #128]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039c4:	e00f      	b.n	80039e6 <HAL_RCC_OscConfig+0x522>
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039d6:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 80039de:	f023 0304 	bic.w	r3, r3, #4
 80039e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d016      	beq.n	8003a1c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ee:	f7fc fcb7 	bl	8000360 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fc fcb3 	bl	8000360 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e176      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_OscConfig+0x578>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0ed      	beq.n	80039f6 <HAL_RCC_OscConfig+0x532>
 8003a1a:	e01a      	b.n	8003a52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1c:	f7fc fca0 	bl	8000360 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a22:	e00f      	b.n	8003a44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a24:	f7fc fc9c 	bl	8000360 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d906      	bls.n	8003a44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e15f      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a44:	4baa      	ldr	r3, [pc, #680]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e8      	bne.n	8003a24 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a52:	7ffb      	ldrb	r3, [r7, #31]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d105      	bne.n	8003a64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a58:	4ba5      	ldr	r3, [pc, #660]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	4aa4      	ldr	r2, [pc, #656]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d03c      	beq.n	8003aea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01c      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a78:	4b9d      	ldr	r3, [pc, #628]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a7e:	4a9c      	ldr	r2, [pc, #624]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a88:	f7fc fc6a 	bl	8000360 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a90:	f7fc fc66 	bl	8000360 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e12b      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aa2:	4b93      	ldr	r3, [pc, #588]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ef      	beq.n	8003a90 <HAL_RCC_OscConfig+0x5cc>
 8003ab0:	e01b      	b.n	8003aea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ab2:	4b8f      	ldr	r3, [pc, #572]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ab8:	4a8d      	ldr	r2, [pc, #564]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac2:	f7fc fc4d 	bl	8000360 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aca:	f7fc fc49 	bl	8000360 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e10e      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003adc:	4b84      	ldr	r3, [pc, #528]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1ef      	bne.n	8003aca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 8102 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	f040 80c5 	bne.w	8003c88 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003afe:	4b7c      	ldr	r3, [pc, #496]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0203 	and.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d12c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d123      	bne.n	8003b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d11b      	bne.n	8003b6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d113      	bne.n	8003b6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	3b01      	subs	r3, #1
 8003b52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d109      	bne.n	8003b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	3b01      	subs	r3, #1
 8003b66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d067      	beq.n	8003c3c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d062      	beq.n	8003c38 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b72:	4b5f      	ldr	r3, [pc, #380]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e0bb      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b82:	4b5b      	ldr	r3, [pc, #364]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5a      	ldr	r2, [pc, #360]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b8e:	f7fc fbe7 	bl	8000360 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b96:	f7fc fbe3 	bl	8000360 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0a8      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba8:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f0      	bne.n	8003b96 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb4:	4b4e      	ldr	r3, [pc, #312]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	4b4e      	ldr	r3, [pc, #312]	; (8003cf4 <HAL_RCC_OscConfig+0x830>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bc4:	3a01      	subs	r2, #1
 8003bc6:	0112      	lsls	r2, r2, #4
 8003bc8:	4311      	orrs	r1, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bce:	0212      	lsls	r2, r2, #8
 8003bd0:	4311      	orrs	r1, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bd6:	0852      	lsrs	r2, r2, #1
 8003bd8:	3a01      	subs	r2, #1
 8003bda:	0552      	lsls	r2, r2, #21
 8003bdc:	4311      	orrs	r1, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003be2:	0852      	lsrs	r2, r2, #1
 8003be4:	3a01      	subs	r2, #1
 8003be6:	0652      	lsls	r2, r2, #25
 8003be8:	4311      	orrs	r1, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bee:	06d2      	lsls	r2, r2, #27
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	493f      	ldr	r1, [pc, #252]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a3c      	ldr	r2, [pc, #240]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c04:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a39      	ldr	r2, [pc, #228]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c10:	f7fc fba6 	bl	8000360 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fc fba2 	bl	8000360 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e067      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2a:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c36:	e05f      	b.n	8003cf8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e05e      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3c:	4b2c      	ldr	r3, [pc, #176]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d157      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c48:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a28      	ldr	r2, [pc, #160]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c54:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c60:	f7fc fb7e 	bl	8000360 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fc fb7a 	bl	8000360 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e03f      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x7a4>
 8003c86:	e037      	b.n	8003cf8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b0c      	cmp	r3, #12
 8003c8c:	d02d      	beq.n	8003cea <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c98:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	4a11      	ldr	r2, [pc, #68]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003cac:	f023 0303 	bic.w	r3, r3, #3
 8003cb0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003cb8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc2:	f7fc fb4d 	bl	8000360 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cca:	f7fc fb49 	bl	8000360 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e00e      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cdc:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <HAL_RCC_OscConfig+0x82c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f0      	bne.n	8003cca <HAL_RCC_OscConfig+0x806>
 8003ce8:	e006      	b.n	8003cf8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e005      	b.n	8003cfa <HAL_RCC_OscConfig+0x836>
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0c8      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b66      	ldr	r3, [pc, #408]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d910      	bls.n	8003d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 0207 	bic.w	r2, r3, #7
 8003d2e:	4961      	ldr	r1, [pc, #388]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0b0      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d04c      	beq.n	8003dee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d107      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5c:	4b56      	ldr	r3, [pc, #344]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d121      	bne.n	8003dac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e09e      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d74:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d115      	bne.n	8003dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e092      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d107      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d8c:	4b4a      	ldr	r3, [pc, #296]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e086      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d9c:	4b46      	ldr	r3, [pc, #280]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e07e      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dac:	4b42      	ldr	r3, [pc, #264]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 0203 	bic.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	493f      	ldr	r1, [pc, #252]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbe:	f7fc facf 	bl	8000360 <HAL_GetTick>
 8003dc2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc6:	f7fc facb 	bl	8000360 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e066      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ddc:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 020c 	and.w	r2, r3, #12
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d1eb      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfa:	4b2f      	ldr	r3, [pc, #188]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	492c      	ldr	r1, [pc, #176]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d210      	bcs.n	8003e3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 0207 	bic.w	r2, r3, #7
 8003e22:	4924      	ldr	r1, [pc, #144]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e036      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4918      	ldr	r1, [pc, #96]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4910      	ldr	r1, [pc, #64]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e7a:	f000 f825 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e7e:	4601      	mov	r1, r0
 8003e80:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	5cd3      	ldrb	r3, [r2, r3]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	fa21 f303 	lsr.w	r3, r1, r3
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc fa0e 	bl	80002c0 <HAL_InitTick>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ea8:	7afb      	ldrb	r3, [r7, #11]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40022000 	.word	0x40022000
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	080101a0 	.word	0x080101a0
 8003ec0:	20000118 	.word	0x20000118
 8003ec4:	20000000 	.word	0x20000000

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed6:	4b3d      	ldr	r3, [pc, #244]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x104>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee0:	4b3a      	ldr	r3, [pc, #232]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x104>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x34>
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b0c      	cmp	r3, #12
 8003ef4:	d121      	bne.n	8003f3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d11e      	bne.n	8003f3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003efc:	4b33      	ldr	r3, [pc, #204]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x104>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f08:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x104>)
 8003f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0e:	0a1b      	lsrs	r3, r3, #8
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	e005      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f18:	4b2c      	ldr	r3, [pc, #176]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x104>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f24:	4a2a      	ldr	r2, [pc, #168]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d102      	bne.n	8003f46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f40:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	e004      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f4c:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d133      	bne.n	8003fbe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x104>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d002      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0xa4>
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d003      	beq.n	8003f72 <HAL_RCC_GetSysClockFreq+0xaa>
 8003f6a:	e005      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f6e:	617b      	str	r3, [r7, #20]
      break;
 8003f70:	e005      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f72:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f74:	617b      	str	r3, [r7, #20]
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	617b      	str	r3, [r7, #20]
      break;
 8003f7c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f7e:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x104>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	091b      	lsrs	r3, r3, #4
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	3301      	adds	r3, #1
 8003f8a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x104>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	0a1b      	lsrs	r3, r3, #8
 8003f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	fb02 f203 	mul.w	r2, r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fa4:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x104>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	0e5b      	lsrs	r3, r3, #25
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fbe:	69bb      	ldr	r3, [r7, #24]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3724      	adds	r7, #36	; 0x24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	080101b8 	.word	0x080101b8
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	007a1200 	.word	0x007a1200

08003fdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000118 	.word	0x20000118

08003ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ff8:	f7ff fff0 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8003ffc:	4601      	mov	r1, r0
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <HAL_RCC_GetPCLK1Freq+0x28>)
 800400a:	5cd3      	ldrb	r3, [r2, r3]
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40021000 	.word	0x40021000
 800401c:	080101b0 	.word	0x080101b0

08004020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004024:	f7ff ffda 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8004028:	4601      	mov	r1, r0
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0adb      	lsrs	r3, r3, #11
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4a04      	ldr	r2, [pc, #16]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004036:	5cd3      	ldrb	r3, [r2, r3]
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	080101b0 	.word	0x080101b0

0800404c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004058:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004064:	f7ff f9ba 	bl	80033dc <HAL_PWREx_GetVoltageRange>
 8004068:	6178      	str	r0, [r7, #20]
 800406a:	e014      	b.n	8004096 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800406c:	4b25      	ldr	r3, [pc, #148]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	4a24      	ldr	r2, [pc, #144]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004076:	6593      	str	r3, [r2, #88]	; 0x58
 8004078:	4b22      	ldr	r3, [pc, #136]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004084:	f7ff f9aa 	bl	80033dc <HAL_PWREx_GetVoltageRange>
 8004088:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800408a:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	4a1d      	ldr	r2, [pc, #116]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004094:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409c:	d10b      	bne.n	80040b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b80      	cmp	r3, #128	; 0x80
 80040a2:	d919      	bls.n	80040d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2ba0      	cmp	r3, #160	; 0xa0
 80040a8:	d902      	bls.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040aa:	2302      	movs	r3, #2
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	e013      	b.n	80040d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040b0:	2301      	movs	r3, #1
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	e010      	b.n	80040d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b80      	cmp	r3, #128	; 0x80
 80040ba:	d902      	bls.n	80040c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040bc:	2303      	movs	r3, #3
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	e00a      	b.n	80040d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b80      	cmp	r3, #128	; 0x80
 80040c6:	d102      	bne.n	80040ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040c8:	2302      	movs	r3, #2
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	e004      	b.n	80040d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b70      	cmp	r3, #112	; 0x70
 80040d2:	d101      	bne.n	80040d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040d4:	2301      	movs	r3, #1
 80040d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f023 0207 	bic.w	r2, r3, #7
 80040e0:	4909      	ldr	r1, [pc, #36]	; (8004108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040e8:	4b07      	ldr	r3, [pc, #28]	; (8004108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d001      	beq.n	80040fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40021000 	.word	0x40021000
 8004108:	40022000 	.word	0x40022000

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004114:	2300      	movs	r3, #0
 8004116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004118:	2300      	movs	r3, #0
 800411a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02f      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004130:	d005      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004132:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004136:	d015      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800413c:	e00f      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800413e:	4b5d      	ldr	r3, [pc, #372]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	4a5c      	ldr	r2, [pc, #368]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004148:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800414a:	e00c      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fe5c 	bl	8004e10 <RCCEx_PLLSAI1_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800415c:	e003      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	74fb      	strb	r3, [r7, #19]
      break;
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004166:	7cfb      	ldrb	r3, [r7, #19]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800416c:	4b51      	ldr	r3, [pc, #324]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	494e      	ldr	r1, [pc, #312]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004182:	e001      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 809e 	beq.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004196:	2300      	movs	r3, #0
 8004198:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800419a:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b0:	4b40      	ldr	r3, [pc, #256]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	4a3f      	ldr	r2, [pc, #252]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ba:	6593      	str	r3, [r2, #88]	; 0x58
 80041bc:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c8:	2301      	movs	r3, #1
 80041ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041cc:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a39      	ldr	r2, [pc, #228]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041d8:	f7fc f8c2 	bl	8000360 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041de:	e009      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e0:	f7fc f8be 	bl	8000360 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d902      	bls.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	74fb      	strb	r3, [r7, #19]
        break;
 80041f2:	e005      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041f4:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ef      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d15a      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004206:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004210:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01e      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	429a      	cmp	r2, r3
 8004220:	d019      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800422e:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800424e:	4a19      	ldr	r2, [pc, #100]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d016      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fc f87e 	bl	8000360 <HAL_GetTick>
 8004264:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004266:	e00b      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fc f87a 	bl	8000360 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d902      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	74fb      	strb	r3, [r7, #19]
            break;
 800427e:	e006      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ec      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800428e:	7cfb      	ldrb	r3, [r7, #19]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10b      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004294:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a2:	4904      	ldr	r1, [pc, #16]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042aa:	e009      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	74bb      	strb	r3, [r7, #18]
 80042b0:	e006      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c0:	7c7b      	ldrb	r3, [r7, #17]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d105      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c6:	4b9e      	ldr	r3, [pc, #632]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	4a9d      	ldr	r2, [pc, #628]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042de:	4b98      	ldr	r3, [pc, #608]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f023 0203 	bic.w	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	4994      	ldr	r1, [pc, #592]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004300:	4b8f      	ldr	r3, [pc, #572]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	f023 020c 	bic.w	r2, r3, #12
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	498c      	ldr	r1, [pc, #560]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004322:	4b87      	ldr	r3, [pc, #540]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	4983      	ldr	r1, [pc, #524]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004344:	4b7e      	ldr	r3, [pc, #504]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	497b      	ldr	r1, [pc, #492]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004366:	4b76      	ldr	r3, [pc, #472]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	4972      	ldr	r1, [pc, #456]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004388:	4b6d      	ldr	r3, [pc, #436]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	496a      	ldr	r1, [pc, #424]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043aa:	4b65      	ldr	r3, [pc, #404]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b8:	4961      	ldr	r1, [pc, #388]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043cc:	4b5c      	ldr	r3, [pc, #368]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043da:	4959      	ldr	r1, [pc, #356]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ee:	4b54      	ldr	r3, [pc, #336]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	4950      	ldr	r1, [pc, #320]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004410:	4b4b      	ldr	r3, [pc, #300]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	4948      	ldr	r1, [pc, #288]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004432:	4b43      	ldr	r3, [pc, #268]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004434:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004438:	f023 0203 	bic.w	r2, r3, #3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	493f      	ldr	r1, [pc, #252]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d028      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004454:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004462:	4937      	ldr	r1, [pc, #220]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004472:	d106      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004474:	4b32      	ldr	r3, [pc, #200]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a31      	ldr	r2, [pc, #196]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800447a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800447e:	60d3      	str	r3, [r2, #12]
 8004480:	e011      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800448a:	d10c      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fcbc 	bl	8004e10 <RCCEx_PLLSAI1_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 80044a2:	7cfb      	ldrb	r3, [r7, #19]
 80044a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d028      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044b2:	4b23      	ldr	r3, [pc, #140]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	491f      	ldr	r1, [pc, #124]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d0:	d106      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d2:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80044d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044dc:	60d3      	str	r3, [r2, #12]
 80044de:	e011      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044e8:	d10c      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2101      	movs	r1, #1
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fc8d 	bl	8004e10 <RCCEx_PLLSAI1_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044fa:	7cfb      	ldrb	r3, [r7, #19]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d02b      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	4908      	ldr	r1, [pc, #32]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800452e:	d109      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4a02      	ldr	r2, [pc, #8]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800453a:	60d3      	str	r3, [r2, #12]
 800453c:	e014      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800454c:	d10c      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	2101      	movs	r1, #1
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fc5b 	bl	8004e10 <RCCEx_PLLSAI1_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01c      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004582:	4916      	ldr	r1, [pc, #88]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004592:	d10c      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fc38 	bl	8004e10 <RCCEx_PLLSAI1_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045ba:	4b08      	ldr	r3, [pc, #32]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c8:	4904      	ldr	r1, [pc, #16]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000

080045e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045f2:	d133      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80045f4:	4bb5      	ldr	r3, [pc, #724]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004606:	d012      	beq.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 8004608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460c:	d01b      	beq.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 800460e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004612:	d000      	beq.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004614:	e3f2      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004616:	4bad      	ldr	r3, [pc, #692]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	f040 83e6 	bne.w	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
        frequency = LSE_VALUE;
 8004626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462a:	61fb      	str	r3, [r7, #28]
      break;
 800462c:	e3e1      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800462e:	4ba7      	ldr	r3, [pc, #668]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b02      	cmp	r3, #2
 800463a:	f040 83dc 	bne.w	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          frequency = LSI_VALUE;
 800463e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004642:	61fb      	str	r3, [r7, #28]
      break;
 8004644:	e3d7      	b.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004646:	4ba1      	ldr	r3, [pc, #644]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004652:	f040 83d2 	bne.w	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
        frequency = HSE_VALUE / 32U;
 8004656:	4b9e      	ldr	r3, [pc, #632]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004658:	61fb      	str	r3, [r7, #28]
      break;
 800465a:	e3ce      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800465c:	4b9b      	ldr	r3, [pc, #620]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d023      	beq.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800466c:	2b03      	cmp	r3, #3
 800466e:	d02e      	beq.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8004670:	2b01      	cmp	r3, #1
 8004672:	d139      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004674:	4b95      	ldr	r3, [pc, #596]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b02      	cmp	r3, #2
 800467e:	d116      	bne.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004680:	4b92      	ldr	r3, [pc, #584]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800468c:	4b8f      	ldr	r3, [pc, #572]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	e005      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8004698:	4b8c      	ldr	r3, [pc, #560]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800469a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	4a8b      	ldr	r2, [pc, #556]	; (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046aa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80046ac:	e01f      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        pllvco = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
      break;
 80046b2:	e01c      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046b4:	4b85      	ldr	r3, [pc, #532]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c0:	d102      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
      {
        pllvco = HSI_VALUE;
 80046c2:	4b85      	ldr	r3, [pc, #532]	; (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80046c6:	e012      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        pllvco = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61bb      	str	r3, [r7, #24]
      break;
 80046cc:	e00f      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80046ce:	4b7f      	ldr	r3, [pc, #508]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046da:	d102      	bne.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      {
        pllvco = HSE_VALUE;
 80046dc:	4b7f      	ldr	r3, [pc, #508]	; (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80046de:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80046e0:	e005      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        pllvco = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]
      break;
 80046e6:	e002      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    default:
      /* No source */
      pllvco = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61bb      	str	r3, [r7, #24]
      break;
 80046ec:	bf00      	nop
    }

    switch(PeriphClk)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f4:	f000 82fb 	beq.w	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80046f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046fc:	d81f      	bhi.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80046fe:	2b08      	cmp	r3, #8
 8004700:	f000 81ab 	beq.w	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8004704:	2b08      	cmp	r3, #8
 8004706:	d809      	bhi.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004708:	2b02      	cmp	r3, #2
 800470a:	f000 8128 	beq.w	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800470e:	2b04      	cmp	r3, #4
 8004710:	f000 816f 	beq.w	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8004714:	2b01      	cmp	r3, #1
 8004716:	f000 80eb 	beq.w	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800471a:	e36f      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
    switch(PeriphClk)
 800471c:	2b40      	cmp	r3, #64	; 0x40
 800471e:	f000 825c 	beq.w	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d803      	bhi.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
 8004726:	2b20      	cmp	r3, #32
 8004728:	f000 81cb 	beq.w	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;
 800472c:	e366      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
    switch(PeriphClk)
 800472e:	2b80      	cmp	r3, #128	; 0x80
 8004730:	f000 8276 	beq.w	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004738:	f000 8295 	beq.w	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      break;
 800473c:	e35e      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
    switch(PeriphClk)
 800473e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004742:	f000 81f6 	beq.w	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8004746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800474a:	d80a      	bhi.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 800474c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004750:	d01a      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8004752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004756:	d01e      	beq.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8004758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475c:	f000 8308 	beq.w	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
      break;
 8004760:	e34c      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
    switch(PeriphClk)
 8004762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004766:	d016      	beq.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8004768:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800476c:	d804      	bhi.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 800476e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004772:	f000 8221 	beq.w	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
      break;
 8004776:	e341      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
    switch(PeriphClk)
 8004778:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800477c:	d00b      	beq.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800477e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004782:	f000 8293 	beq.w	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
      break;
 8004786:	e339      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004788:	69b9      	ldr	r1, [r7, #24]
 800478a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800478e:	f000 fc2f 	bl	8004ff0 <RCCEx_GetSAIxPeriphCLKFreq>
 8004792:	61f8      	str	r0, [r7, #28]
      break;
 8004794:	e332      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004796:	4b4d      	ldr	r3, [pc, #308]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80047a0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a8:	d056      	beq.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80047aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ae:	d802      	bhi.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d07e      	beq.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
          break;
 80047b4:	e09b      	b.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        switch(srcclk)
 80047b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ba:	d020      	beq.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
 80047bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047c0:	d000      	beq.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          break;
 80047c2:	e094      	b.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80047c4:	4b41      	ldr	r3, [pc, #260]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d17a      	bne.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80047d0:	4b3e      	ldr	r3, [pc, #248]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80047dc:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	e005      	b.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 80047e8:	4b38      	ldr	r3, [pc, #224]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80047ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	4a37      	ldr	r2, [pc, #220]	; (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80047f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fa:	61fb      	str	r3, [r7, #28]
          break;
 80047fc:	e063      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80047fe:	4b33      	ldr	r3, [pc, #204]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800480a:	d16b      	bne.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800480c:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004818:	d164      	bne.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800481a:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004824:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	fb02 f203 	mul.w	r2, r2, r3
 800482e:	4b27      	ldr	r3, [pc, #156]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	3301      	adds	r3, #1
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004840:	4b22      	ldr	r3, [pc, #136]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	0d5b      	lsrs	r3, r3, #21
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	3301      	adds	r3, #1
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	61fb      	str	r3, [r7, #28]
          break;
 8004856:	e045      	b.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004858:	4b1c      	ldr	r3, [pc, #112]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004864:	d140      	bne.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004866:	4b19      	ldr	r3, [pc, #100]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800486e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004872:	d139      	bne.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004874:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	0a1b      	lsrs	r3, r3, #8
 800487a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	fb02 f203 	mul.w	r2, r2, r3
 8004888:	4b10      	ldr	r3, [pc, #64]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	3301      	adds	r3, #1
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800489a:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	0d5b      	lsrs	r3, r3, #21
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	3301      	adds	r3, #1
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ae:	61fb      	str	r3, [r7, #28]
          break;
 80048b0:	e01a      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80048b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d115      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = HSI48_VALUE;
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80048c2:	61fb      	str	r3, [r7, #28]
          break;
 80048c4:	e012      	b.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          break;
 80048c6:	bf00      	nop
 80048c8:	e298      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
 80048d0:	0003d090 	.word	0x0003d090
 80048d4:	080101b8 	.word	0x080101b8
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	007a1200 	.word	0x007a1200
 80048e0:	02dc6c00 	.word	0x02dc6c00
          break;
 80048e4:	bf00      	nop
 80048e6:	e289      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 80048e8:	bf00      	nop
 80048ea:	e287      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 80048ec:	bf00      	nop
        break;
 80048ee:	e285      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80048f0:	4baf      	ldr	r3, [pc, #700]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d827      	bhi.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004902:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	08004919 	.word	0x08004919
 800490c:	08004921 	.word	0x08004921
 8004910:	08004929 	.word	0x08004929
 8004914:	0800493d 	.word	0x0800493d
          frequency = HAL_RCC_GetPCLK2Freq();
 8004918:	f7ff fb82 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 800491c:	61f8      	str	r0, [r7, #28]
          break;
 800491e:	e01d      	b.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004920:	f7ff fad2 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8004924:	61f8      	str	r0, [r7, #28]
          break;
 8004926:	e019      	b.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004928:	4ba1      	ldr	r3, [pc, #644]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004934:	d10f      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
            frequency = HSI_VALUE;
 8004936:	4b9f      	ldr	r3, [pc, #636]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004938:	61fb      	str	r3, [r7, #28]
          break;
 800493a:	e00c      	b.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800493c:	4b9c      	ldr	r3, [pc, #624]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d107      	bne.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
            frequency = LSE_VALUE;
 800494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494e:	61fb      	str	r3, [r7, #28]
          break;
 8004950:	e003      	b.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          break;
 8004952:	bf00      	nop
 8004954:	e252      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004956:	bf00      	nop
 8004958:	e250      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 800495a:	bf00      	nop
        break;
 800495c:	e24e      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800495e:	4b94      	ldr	r3, [pc, #592]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d83a      	bhi.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x398>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	080049ad 	.word	0x080049ad
 800497c:	080049e7 	.word	0x080049e7
 8004980:	080049e7 	.word	0x080049e7
 8004984:	080049e7 	.word	0x080049e7
 8004988:	080049b5 	.word	0x080049b5
 800498c:	080049e7 	.word	0x080049e7
 8004990:	080049e7 	.word	0x080049e7
 8004994:	080049e7 	.word	0x080049e7
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049e7 	.word	0x080049e7
 80049a0:	080049e7 	.word	0x080049e7
 80049a4:	080049e7 	.word	0x080049e7
 80049a8:	080049d1 	.word	0x080049d1
          frequency = HAL_RCC_GetPCLK1Freq();
 80049ac:	f7ff fb22 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 80049b0:	61f8      	str	r0, [r7, #28]
          break;
 80049b2:	e01d      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          frequency = HAL_RCC_GetSysClockFreq();
 80049b4:	f7ff fa88 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 80049b8:	61f8      	str	r0, [r7, #28]
          break;
 80049ba:	e019      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049bc:	4b7c      	ldr	r3, [pc, #496]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c8:	d10f      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
            frequency = HSI_VALUE;
 80049ca:	4b7a      	ldr	r3, [pc, #488]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80049cc:	61fb      	str	r3, [r7, #28]
          break;
 80049ce:	e00c      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049d0:	4b77      	ldr	r3, [pc, #476]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d107      	bne.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            frequency = LSE_VALUE;
 80049de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e2:	61fb      	str	r3, [r7, #28]
          break;
 80049e4:	e003      	b.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
          break;
 80049e6:	bf00      	nop
 80049e8:	e208      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 80049ea:	bf00      	nop
 80049ec:	e206      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 80049ee:	bf00      	nop
        break;
 80049f0:	e204      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80049f2:	4b6f      	ldr	r3, [pc, #444]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049fc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d00d      	beq.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d802      	bhi.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          break;
 8004a0c:	e024      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
        switch(srcclk)
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8004a12:	2b30      	cmp	r3, #48	; 0x30
 8004a14:	d012      	beq.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          break;
 8004a16:	e01f      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a18:	f7ff faec 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004a1c:	61f8      	str	r0, [r7, #28]
          break;
 8004a1e:	e01b      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a20:	f7ff fa52 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8004a24:	61f8      	str	r0, [r7, #28]
          break;
 8004a26:	e017      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a28:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a34:	d10d      	bne.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            frequency = HSI_VALUE;
 8004a36:	4b5f      	ldr	r3, [pc, #380]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004a38:	61fb      	str	r3, [r7, #28]
          break;
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a3c:	4b5c      	ldr	r3, [pc, #368]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d105      	bne.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
            frequency = LSE_VALUE;
 8004a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4e:	61fb      	str	r3, [r7, #28]
          break;
 8004a50:	e001      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
          break;
 8004a52:	bf00      	nop
 8004a54:	e1d2      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004a56:	bf00      	nop
        break;
 8004a58:	e1d0      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004a5a:	4b55      	ldr	r3, [pc, #340]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a64:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d00d      	beq.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d802      	bhi.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
          break;
 8004a74:	e024      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
        switch(srcclk)
 8004a76:	2b80      	cmp	r3, #128	; 0x80
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8004a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a7c:	d012      	beq.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          break;
 8004a7e:	e01f      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a80:	f7ff fab8 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004a84:	61f8      	str	r0, [r7, #28]
          break;
 8004a86:	e01b      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a88:	f7ff fa1e 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8004a8c:	61f8      	str	r0, [r7, #28]
          break;
 8004a8e:	e017      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a90:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9c:	d10d      	bne.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            frequency = HSI_VALUE;
 8004a9e:	4b45      	ldr	r3, [pc, #276]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004aa0:	61fb      	str	r3, [r7, #28]
          break;
 8004aa2:	e00a      	b.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004aa4:	4b42      	ldr	r3, [pc, #264]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d105      	bne.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
            frequency = LSE_VALUE;
 8004ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ab6:	61fb      	str	r3, [r7, #28]
          break;
 8004ab8:	e001      	b.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          break;
 8004aba:	bf00      	nop
 8004abc:	e19e      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004abe:	bf00      	nop
        break;
 8004ac0:	e19c      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004ac2:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004acc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad4:	d010      	beq.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ada:	d802      	bhi.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
          break;
 8004ae0:	e026      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
        switch(srcclk)
 8004ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae6:	d00b      	beq.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8004ae8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aec:	d012      	beq.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
          break;
 8004aee:	e01f      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7ff fa80 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004af4:	61f8      	str	r0, [r7, #28]
          break;
 8004af6:	e01b      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          frequency = HAL_RCC_GetSysClockFreq();
 8004af8:	f7ff f9e6 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8004afc:	61f8      	str	r0, [r7, #28]
          break;
 8004afe:	e017      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b00:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d10d      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
            frequency = HSI_VALUE;
 8004b0e:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004b10:	61fb      	str	r3, [r7, #28]
          break;
 8004b12:	e00a      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b14:	4b26      	ldr	r3, [pc, #152]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d105      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
            frequency = LSE_VALUE;
 8004b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b26:	61fb      	str	r3, [r7, #28]
          break;
 8004b28:	e001      	b.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
          break;
 8004b2a:	bf00      	nop
 8004b2c:	e166      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004b2e:	bf00      	nop
        break;
 8004b30:	e164      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004b32:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b3c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b44:	d007      	beq.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
 8004b46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b4a:	d000      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
          break;
 8004b4c:	e02f      	b.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7ff f9bb 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8004b52:	61f8      	str	r0, [r7, #28]
          break;
 8004b54:	e02b      	b.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004b56:	4b16      	ldr	r3, [pc, #88]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b62:	d123      	bne.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004b64:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01d      	beq.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004b70:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b7a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	fb02 f203 	mul.w	r2, r2, r3
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	3301      	adds	r3, #1
 8004b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b94:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	0e5b      	lsrs	r3, r3, #25
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	61fb      	str	r3, [r7, #28]
          break;
 8004bac:	bf00      	nop
        break;
 8004bae:	e125      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004bb8:	4b93      	ldr	r3, [pc, #588]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bc2:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004bca:	f7ff fa29 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8004bce:	61f8      	str	r0, [r7, #28]
        break;
 8004bd0:	e114      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bd2:	f7ff f979 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8004bd6:	61f8      	str	r0, [r7, #28]
        break;
 8004bd8:	e110      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004bda:	4b8b      	ldr	r3, [pc, #556]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004be4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bec:	d009      	beq.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8004bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d000      	beq.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          break;
 8004bf8:	e011      	b.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bfa:	f7ff f9fb 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004bfe:	61f8      	str	r0, [r7, #28]
          break;
 8004c00:	e00d      	b.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c02:	f7ff f961 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8004c06:	61f8      	str	r0, [r7, #28]
          break;
 8004c08:	e009      	b.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c0a:	4b7f      	ldr	r3, [pc, #508]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c16:	d101      	bne.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
            frequency = HSI_VALUE;
 8004c18:	4b7c      	ldr	r3, [pc, #496]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 8004c1a:	61fb      	str	r3, [r7, #28]
          break;
 8004c1c:	bf00      	nop
        break;
 8004c1e:	e0ed      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004c20:	4b79      	ldr	r3, [pc, #484]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c2a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c32:	d009      	beq.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8004c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d000      	beq.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          break;
 8004c3e:	e011      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c40:	f7ff f9d8 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004c44:	61f8      	str	r0, [r7, #28]
          break;
 8004c46:	e00d      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c48:	f7ff f93e 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8004c4c:	61f8      	str	r0, [r7, #28]
          break;
 8004c4e:	e009      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c50:	4b6d      	ldr	r3, [pc, #436]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
            frequency = HSI_VALUE;
 8004c5e:	4b6b      	ldr	r3, [pc, #428]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 8004c60:	61fb      	str	r3, [r7, #28]
          break;
 8004c62:	bf00      	nop
        break;
 8004c64:	e0ca      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004c66:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c70:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c78:	d009      	beq.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d000      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
          break;
 8004c84:	e011      	b.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c86:	f7ff f9b5 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004c8a:	61f8      	str	r0, [r7, #28]
          break;
 8004c8c:	e00d      	b.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c8e:	f7ff f91b 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8004c92:	61f8      	str	r0, [r7, #28]
          break;
 8004c94:	e009      	b.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c96:	4b5c      	ldr	r3, [pc, #368]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
            frequency = HSI_VALUE;
 8004ca4:	4b59      	ldr	r3, [pc, #356]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 8004ca6:	61fb      	str	r3, [r7, #28]
          break;
 8004ca8:	bf00      	nop
        break;
 8004caa:	e0a7      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004cac:	4b56      	ldr	r3, [pc, #344]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d008      	beq.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d302      	bcc.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d008      	beq.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          break;
 8004cc6:	e011      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cc8:	f7ff f994 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004ccc:	61f8      	str	r0, [r7, #28]
          break;
 8004cce:	e00d      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004cd0:	f7ff f8fa 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8004cd4:	61f8      	str	r0, [r7, #28]
          break;
 8004cd6:	e009      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cd8:	4b4b      	ldr	r3, [pc, #300]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce4:	d101      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
            frequency = HSI_VALUE;
 8004ce6:	4b49      	ldr	r3, [pc, #292]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 8004ce8:	61fb      	str	r3, [r7, #28]
          break;
 8004cea:	bf00      	nop
        break;
 8004cec:	e086      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004cee:	4b46      	ldr	r3, [pc, #280]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004cf8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d00:	d010      	beq.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8004d02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d06:	d802      	bhi.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          break;
 8004d0c:	e02f      	b.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        switch(srcclk)
 8004d0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d12:	d012      	beq.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004d14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d18:	d019      	beq.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          break;
 8004d1a:	e028      	b.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d1c:	f7ff f96a 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004d20:	61f8      	str	r0, [r7, #28]
          break;
 8004d22:	e024      	b.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004d24:	4b38      	ldr	r3, [pc, #224]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d118      	bne.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
              frequency = LSI_VALUE;
 8004d32:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004d36:	61fb      	str	r3, [r7, #28]
          break;
 8004d38:	e014      	b.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d3a:	4b33      	ldr	r3, [pc, #204]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d46:	d10f      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            frequency = HSI_VALUE;
 8004d48:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 8004d4a:	61fb      	str	r3, [r7, #28]
          break;
 8004d4c:	e00c      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d4e:	4b2e      	ldr	r3, [pc, #184]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d107      	bne.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
            frequency = LSE_VALUE;
 8004d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d60:	61fb      	str	r3, [r7, #28]
          break;
 8004d62:	e003      	b.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          break;
 8004d64:	bf00      	nop
 8004d66:	e049      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004d68:	bf00      	nop
 8004d6a:	e047      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004d6c:	bf00      	nop
        break;
 8004d6e:	e045      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004d7a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d82:	d010      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004d84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d88:	d802      	bhi.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
          break;
 8004d8e:	e02f      	b.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        switch(srcclk)
 8004d90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d94:	d012      	beq.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004d96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d9a:	d019      	beq.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          break;
 8004d9c:	e028      	b.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d9e:	f7ff f929 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004da2:	61f8      	str	r0, [r7, #28]
          break;
 8004da4:	e024      	b.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004da6:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d118      	bne.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
              frequency = LSI_VALUE;
 8004db4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004db8:	61fb      	str	r3, [r7, #28]
          break;
 8004dba:	e014      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dbc:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc8:	d10f      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
            frequency = HSI_VALUE;
 8004dca:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 8004dcc:	61fb      	str	r3, [r7, #28]
          break;
 8004dce:	e00c      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d107      	bne.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            frequency = LSE_VALUE;
 8004dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de2:	61fb      	str	r3, [r7, #28]
          break;
 8004de4:	e003      	b.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          break;
 8004de6:	bf00      	nop
 8004de8:	e008      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004dea:	bf00      	nop
 8004dec:	e006      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
          break;
 8004dee:	bf00      	nop
        break;
 8004df0:	e004      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
      break;
 8004df2:	bf00      	nop
 8004df4:	e002      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
      break;
 8004df6:	bf00      	nop
 8004df8:	e000      	b.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
      break;
 8004dfa:	bf00      	nop
    }
  }

  return(frequency);
 8004dfc:	69fb      	ldr	r3, [r7, #28]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	00f42400 	.word	0x00f42400

08004e10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e1e:	4b73      	ldr	r3, [pc, #460]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d018      	beq.n	8004e5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e2a:	4b70      	ldr	r3, [pc, #448]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0203 	and.w	r2, r3, #3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d10d      	bne.n	8004e56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e42:	4b6a      	ldr	r3, [pc, #424]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
       ||
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d044      	beq.n	8004ee0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]
 8004e5a:	e041      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d00c      	beq.n	8004e7e <RCCEx_PLLSAI1_Config+0x6e>
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d013      	beq.n	8004e90 <RCCEx_PLLSAI1_Config+0x80>
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d120      	bne.n	8004eae <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e6c:	4b5f      	ldr	r3, [pc, #380]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d11d      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e7c:	e01a      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e7e:	4b5b      	ldr	r3, [pc, #364]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d116      	bne.n	8004eb8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e8e:	e013      	b.n	8004eb8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e90:	4b56      	ldr	r3, [pc, #344]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10f      	bne.n	8004ebc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e9c:	4b53      	ldr	r3, [pc, #332]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d109      	bne.n	8004ebc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004eac:	e006      	b.n	8004ebc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb2:	e004      	b.n	8004ebe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004eb4:	bf00      	nop
 8004eb6:	e002      	b.n	8004ebe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004eb8:	bf00      	nop
 8004eba:	e000      	b.n	8004ebe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ebc:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10d      	bne.n	8004ee0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ec4:	4b49      	ldr	r3, [pc, #292]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	4944      	ldr	r1, [pc, #272]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d17c      	bne.n	8004fe0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ee6:	4b41      	ldr	r3, [pc, #260]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a40      	ldr	r2, [pc, #256]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef2:	f7fb fa35 	bl	8000360 <HAL_GetTick>
 8004ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ef8:	e009      	b.n	8004f0e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004efa:	f7fb fa31 	bl	8000360 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d902      	bls.n	8004f0e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	73fb      	strb	r3, [r7, #15]
        break;
 8004f0c:	e005      	b.n	8004f1a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f0e:	4b37      	ldr	r3, [pc, #220]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ef      	bne.n	8004efa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d15f      	bne.n	8004fe0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d110      	bne.n	8004f48 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f26:	4b31      	ldr	r3, [pc, #196]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004f2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6892      	ldr	r2, [r2, #8]
 8004f36:	0211      	lsls	r1, r2, #8
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68d2      	ldr	r2, [r2, #12]
 8004f3c:	06d2      	lsls	r2, r2, #27
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	492a      	ldr	r1, [pc, #168]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	610b      	str	r3, [r1, #16]
 8004f46:	e027      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d112      	bne.n	8004f74 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f4e:	4b27      	ldr	r3, [pc, #156]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6892      	ldr	r2, [r2, #8]
 8004f5e:	0211      	lsls	r1, r2, #8
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6912      	ldr	r2, [r2, #16]
 8004f64:	0852      	lsrs	r2, r2, #1
 8004f66:	3a01      	subs	r2, #1
 8004f68:	0552      	lsls	r2, r2, #21
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	491f      	ldr	r1, [pc, #124]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	610b      	str	r3, [r1, #16]
 8004f72:	e011      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f74:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6892      	ldr	r2, [r2, #8]
 8004f84:	0211      	lsls	r1, r2, #8
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6952      	ldr	r2, [r2, #20]
 8004f8a:	0852      	lsrs	r2, r2, #1
 8004f8c:	3a01      	subs	r2, #1
 8004f8e:	0652      	lsls	r2, r2, #25
 8004f90:	430a      	orrs	r2, r1
 8004f92:	4916      	ldr	r1, [pc, #88]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f98:	4b14      	ldr	r3, [pc, #80]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a13      	ldr	r2, [pc, #76]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fb f9dc 	bl	8000360 <HAL_GetTick>
 8004fa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004faa:	e009      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fac:	f7fb f9d8 	bl	8000360 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d902      	bls.n	8004fc0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	73fb      	strb	r3, [r7, #15]
          break;
 8004fbe:	e005      	b.n	8004fcc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0ef      	beq.n	8004fac <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	4904      	ldr	r1, [pc, #16]	; (8004fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000

08004ff0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b089      	sub	sp, #36	; 0x24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800500c:	d10b      	bne.n	8005026 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800500e:	4b53      	ldr	r3, [pc, #332]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005014:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005018:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005020:	d101      	bne.n	8005026 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005022:	4b4f      	ldr	r3, [pc, #316]	; (8005160 <RCCEx_GetSAIxPeriphCLKFreq+0x170>)
 8005024:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f040 8090 	bne.w	800514e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
  {
    pllvco = InputFrequency;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	613b      	str	r3, [r7, #16]
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005038:	d143      	bne.n	80050c2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 800503a:	4b48      	ldr	r3, [pc, #288]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005046:	d132      	bne.n	80050ae <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 8005048:	4b44      	ldr	r3, [pc, #272]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d02c      	beq.n	80050ae <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005054:	4b41      	ldr	r3, [pc, #260]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	3301      	adds	r3, #1
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005068:	4b3c      	ldr	r3, [pc, #240]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	0a1b      	lsrs	r3, r3, #8
 800506e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005072:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005074:	4b39      	ldr	r3, [pc, #228]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	0edb      	lsrs	r3, r3, #27
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <RCCEx_GetSAIxPeriphCLKFreq+0xac>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005086:	4b35      	ldr	r3, [pc, #212]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <RCCEx_GetSAIxPeriphCLKFreq+0xa8>
          {
            pllp = 17U;
 8005092:	2311      	movs	r3, #17
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e001      	b.n	800509c <RCCEx_GetSAIxPeriphCLKFreq+0xac>
          }
          else
          {
            pllp = 7U;
 8005098:	2307      	movs	r3, #7
 800509a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	fb02 f203 	mul.w	r2, r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e04f      	b.n	800514e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050ae:	4b2b      	ldr	r3, [pc, #172]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ba:	d148      	bne.n	800514e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 80050bc:	4b29      	ldr	r3, [pc, #164]	; (8005164 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	e045      	b.n	800514e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d142      	bne.n	800514e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80050c8:	4b24      	ldr	r3, [pc, #144]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050d4:	d132      	bne.n	800513c <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
 80050d6:	4b21      	ldr	r3, [pc, #132]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d02c      	beq.n	800513c <RCCEx_GetSAIxPeriphCLKFreq+0x14c>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050e2:	4b1e      	ldr	r3, [pc, #120]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	091b      	lsrs	r3, r3, #4
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	3301      	adds	r3, #1
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80050f6:	4b19      	ldr	r3, [pc, #100]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	0a1b      	lsrs	r3, r3, #8
 80050fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005100:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005102:	4b16      	ldr	r3, [pc, #88]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	0edb      	lsrs	r3, r3, #27
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005114:	4b11      	ldr	r3, [pc, #68]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <RCCEx_GetSAIxPeriphCLKFreq+0x136>
          {
            pllp = 17U;
 8005120:	2311      	movs	r3, #17
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e001      	b.n	800512a <RCCEx_GetSAIxPeriphCLKFreq+0x13a>
          }
          else
          {
            pllp = 7U;
 8005126:	2307      	movs	r3, #7
 8005128:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	fb02 f203 	mul.w	r2, r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	e008      	b.n	800514e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800513c:	4b07      	ldr	r3, [pc, #28]	; (800515c <RCCEx_GetSAIxPeriphCLKFreq+0x16c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005148:	d101      	bne.n	800514e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
      {
        /* HSI automatically selected as clock source if PLLs not enabled */
        frequency = HSI_VALUE;
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <RCCEx_GetSAIxPeriphCLKFreq+0x174>)
 800514c:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800514e:	69fb      	ldr	r3, [r7, #28]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3724      	adds	r7, #36	; 0x24
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40021000 	.word	0x40021000
 8005160:	001fff68 	.word	0x001fff68
 8005164:	00f42400 	.word	0x00f42400

08005168 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e042      	b.n	8005200 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	795b      	ldrb	r3, [r3, #5]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f008 fc3e 	bl	800da0c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0204 	orr.w	r2, r2, #4
 80051a4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b0:	2b40      	cmp	r3, #64	; 0x40
 80051b2:	d104      	bne.n	80051be <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2204      	movs	r2, #4
 80051b8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e020      	b.n	8005200 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80051be:	f7fb f8cf 	bl	8000360 <HAL_GetTick>
 80051c2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80051c4:	e00e      	b.n	80051e4 <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80051c6:	f7fb f8cb 	bl	8000360 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d907      	bls.n	80051e4 <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2204      	movs	r2, #4
 80051d8:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e00d      	b.n	8005200 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d0e9      	beq.n	80051c6 <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d06c      	beq.n	80052f4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f008 fca2 	bl	800db78 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	22ca      	movs	r2, #202	; 0xca
 8005242:	625a      	str	r2, [r3, #36]	; 0x24
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2253      	movs	r2, #83	; 0x53
 800524a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 facd 	bl	80057ec <RTC_EnterInitMode>
 8005252:	4603      	mov	r3, r0
 8005254:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d14b      	bne.n	80052f4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800526a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800526e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6899      	ldr	r1, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68d2      	ldr	r2, [r2, #12]
 8005296:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6919      	ldr	r1, [r3, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	041a      	lsls	r2, r3, #16
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fad1 	bl	8005854 <RTC_ExitInitMode>
 80052b2:	4603      	mov	r3, r0
 80052b4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11b      	bne.n	80052f4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0203 	bic.w	r2, r2, #3
 80052ca:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	22ff      	movs	r2, #255	; 0xff
 80052ea:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052fe:	b590      	push	{r4, r7, lr}
 8005300:	b087      	sub	sp, #28
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_RTC_SetTime+0x1a>
 8005314:	2302      	movs	r3, #2
 8005316:	e08b      	b.n	8005430 <HAL_RTC_SetTime+0x132>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	22ca      	movs	r2, #202	; 0xca
 800532e:	625a      	str	r2, [r3, #36]	; 0x24
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2253      	movs	r2, #83	; 0x53
 8005336:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fa57 	bl	80057ec <RTC_EnterInitMode>
 800533e:	4603      	mov	r3, r0
 8005340:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d163      	bne.n	8005410 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d126      	bne.n	800539c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fab2 	bl	80058d0 <RTC_ByteToBcd2>
 800536c:	4603      	mov	r3, r0
 800536e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	4618      	mov	r0, r3
 8005376:	f000 faab 	bl	80058d0 <RTC_ByteToBcd2>
 800537a:	4603      	mov	r3, r0
 800537c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800537e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	789b      	ldrb	r3, [r3, #2]
 8005384:	4618      	mov	r0, r3
 8005386:	f000 faa3 	bl	80058d0 <RTC_ByteToBcd2>
 800538a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800538c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	78db      	ldrb	r3, [r3, #3]
 8005394:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e018      	b.n	80053ce <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2200      	movs	r2, #0
 80053ae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80053bc:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053c2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	78db      	ldrb	r3, [r3, #3]
 80053c8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80053d8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80053dc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6899      	ldr	r1, [r3, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	431a      	orrs	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fa24 	bl	8005854 <RTC_ExitInitMode>
 800540c:	4603      	mov	r3, r0
 800540e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	22ff      	movs	r2, #255	; 0xff
 8005416:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005418:	7cfb      	ldrb	r3, [r7, #19]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800542e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005430:	4618      	mov	r0, r3
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd90      	pop	{r4, r7, pc}

08005438 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_RTC_SetDate+0x1a>
 800544e:	2302      	movs	r3, #2
 8005450:	e075      	b.n	800553e <HAL_RTC_SetDate+0x106>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10e      	bne.n	8005486 <HAL_RTC_SetDate+0x4e>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	785b      	ldrb	r3, [r3, #1]
 8005478:	f023 0310 	bic.w	r3, r3, #16
 800547c:	b2db      	uxtb	r3, r3
 800547e:	330a      	adds	r3, #10
 8005480:	b2da      	uxtb	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d11c      	bne.n	80054c6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	78db      	ldrb	r3, [r3, #3]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fa1d 	bl	80058d0 <RTC_ByteToBcd2>
 8005496:	4603      	mov	r3, r0
 8005498:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	785b      	ldrb	r3, [r3, #1]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fa16 	bl	80058d0 <RTC_ByteToBcd2>
 80054a4:	4603      	mov	r3, r0
 80054a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80054a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	789b      	ldrb	r3, [r3, #2]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fa0e 	bl	80058d0 <RTC_ByteToBcd2>
 80054b4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054b6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	e00e      	b.n	80054e4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	78db      	ldrb	r3, [r3, #3]
 80054ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80054d2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80054d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	22ca      	movs	r2, #202	; 0xca
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2253      	movs	r2, #83	; 0x53
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f979 	bl	80057ec <RTC_EnterInitMode>
 80054fa:	4603      	mov	r3, r0
 80054fc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10c      	bne.n	800551e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800550e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005512:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f99d 	bl	8005854 <RTC_ExitInitMode>
 800551a:	4603      	mov	r3, r0
 800551c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	22ff      	movs	r2, #255	; 0xff
 8005524:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005526:	7cfb      	ldrb	r3, [r7, #19]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d103      	bne.n	8005534 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800553c:	7cfb      	ldrb	r3, [r7, #19]
}
 800553e:	4618      	mov	r0, r3
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	bd90      	pop	{r4, r7, pc}

08005546 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005546:	b590      	push	{r4, r7, lr}
 8005548:	b089      	sub	sp, #36	; 0x24
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_RTC_SetAlarm+0x1a>
 800555c:	2302      	movs	r3, #2
 800555e:	e11b      	b.n	8005798 <HAL_RTC_SetAlarm+0x252>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d137      	bne.n	80055e6 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2200      	movs	r2, #0
 8005588:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f99e 	bl	80058d0 <RTC_ByteToBcd2>
 8005594:	4603      	mov	r3, r0
 8005596:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	4618      	mov	r0, r3
 800559e:	f000 f997 	bl	80058d0 <RTC_ByteToBcd2>
 80055a2:	4603      	mov	r3, r0
 80055a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80055a6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	789b      	ldrb	r3, [r3, #2]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f98f 	bl	80058d0 <RTC_ByteToBcd2>
 80055b2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80055b4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	78db      	ldrb	r3, [r3, #3]
 80055bc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80055be:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 f981 	bl	80058d0 <RTC_ByteToBcd2>
 80055ce:	4603      	mov	r3, r0
 80055d0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80055d2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80055da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e023      	b.n	800562e <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d102      	bne.n	80055fa <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2200      	movs	r2, #0
 80055f8:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005606:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800560c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	78db      	ldrb	r3, [r3, #3]
 8005612:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005614:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800561c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800561e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005624:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800562a:	4313      	orrs	r3, r2
 800562c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	4313      	orrs	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	22ca      	movs	r2, #202	; 0xca
 8005640:	625a      	str	r2, [r3, #36]	; 0x24
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2253      	movs	r2, #83	; 0x53
 8005648:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005652:	d14a      	bne.n	80056ea <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005662:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005674:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005684:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005686:	f7fa fe6b 	bl	8000360 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800568c:	e015      	b.n	80056ba <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800568e:	f7fa fe67 	bl	8000360 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800569c:	d90d      	bls.n	80056ba <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	22ff      	movs	r2, #255	; 0xff
 80056a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2203      	movs	r2, #3
 80056aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e06e      	b.n	8005798 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0e2      	beq.n	800568e <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	e049      	b.n	800577e <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056f8:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f462 7220 	orn	r2, r2, #640	; 0x280
 800570a:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800571a:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800571c:	f7fa fe20 	bl	8000360 <HAL_GetTick>
 8005720:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005722:	e015      	b.n	8005750 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005724:	f7fa fe1c 	bl	8000360 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005732:	d90d      	bls.n	8005750 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	22ff      	movs	r2, #255	; 0xff
 800573a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2203      	movs	r2, #3
 8005740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e023      	b.n	8005798 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0e2      	beq.n	8005724 <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	22ff      	movs	r2, #255	; 0xff
 8005784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3724      	adds	r7, #36	; 0x24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd90      	pop	{r4, r7, pc}

080057a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057b6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80057b8:	f7fa fdd2 	bl	8000360 <HAL_GetTick>
 80057bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80057be:	e009      	b.n	80057d4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057c0:	f7fa fdce 	bl	8000360 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ce:	d901      	bls.n	80057d4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e007      	b.n	80057e4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ee      	beq.n	80057c0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d120      	bne.n	8005848 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f04f 32ff 	mov.w	r2, #4294967295
 800580e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005810:	f7fa fda6 	bl	8000360 <HAL_GetTick>
 8005814:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005816:	e00d      	b.n	8005834 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005818:	f7fa fda2 	bl	8000360 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005826:	d905      	bls.n	8005834 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2203      	movs	r2, #3
 8005830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d102      	bne.n	8005848 <RTC_EnterInitMode+0x5c>
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d1e7      	bne.n	8005818 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005848:	7bfb      	ldrb	r3, [r7, #15]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005860:	4b1a      	ldr	r3, [pc, #104]	; (80058cc <RTC_ExitInitMode+0x78>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4a19      	ldr	r2, [pc, #100]	; (80058cc <RTC_ExitInitMode+0x78>)
 8005866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800586a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800586c:	4b17      	ldr	r3, [pc, #92]	; (80058cc <RTC_ExitInitMode+0x78>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10c      	bne.n	8005892 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff ff91 	bl	80057a0 <HAL_RTC_WaitForSynchro>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01e      	beq.n	80058c2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2203      	movs	r2, #3
 8005888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	e017      	b.n	80058c2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005892:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <RTC_ExitInitMode+0x78>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <RTC_ExitInitMode+0x78>)
 8005898:	f023 0320 	bic.w	r3, r3, #32
 800589c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff ff7e 	bl	80057a0 <HAL_RTC_WaitForSynchro>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2203      	movs	r2, #3
 80058ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80058b6:	4b05      	ldr	r3, [pc, #20]	; (80058cc <RTC_ExitInitMode+0x78>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	4a04      	ldr	r2, [pc, #16]	; (80058cc <RTC_ExitInitMode+0x78>)
 80058bc:	f043 0320 	orr.w	r3, r3, #32
 80058c0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40002800 	.word	0x40002800

080058d0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80058e2:	e005      	b.n	80058f0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80058ea:	7afb      	ldrb	r3, [r7, #11]
 80058ec:	3b0a      	subs	r3, #10
 80058ee:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80058f0:	7afb      	ldrb	r3, [r7, #11]
 80058f2:	2b09      	cmp	r3, #9
 80058f4:	d8f6      	bhi.n	80058e4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	7afb      	ldrb	r3, [r7, #11]
 8005900:	4313      	orrs	r3, r2
 8005902:	b2db      	uxtb	r3, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e022      	b.n	8005968 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d105      	bne.n	800593a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f008 fa3f 	bl	800ddb8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2203      	movs	r2, #3
 800593e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f814 	bl	8005970 <HAL_SD_InitCard>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e00a      	b.n	8005968 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005970:	b5b0      	push	{r4, r5, r7, lr}
 8005972:	b090      	sub	sp, #64	; 0x40
 8005974:	af04      	add	r7, sp, #16
 8005976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800597c:	2300      	movs	r3, #0
 800597e:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005984:	2300      	movs	r3, #0
 8005986:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800598c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005990:	f7fe fe26 	bl	80045e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005994:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e08d      	b.n	8005acc <HAL_SD_InitCard+0x15c>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk/400000U) - 2U);
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	09db      	lsrs	r3, r3, #7
 80059b4:	4a47      	ldr	r2, [pc, #284]	; (8005ad4 <HAL_SD_InitCard+0x164>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	3b02      	subs	r3, #2
 80059be:	623b      	str	r3, [r7, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681d      	ldr	r5, [r3, #0]
 80059c4:	466c      	mov	r4, sp
 80059c6:	f107 0318 	add.w	r3, r7, #24
 80059ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059d2:	f107 030c 	add.w	r3, r7, #12
 80059d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059d8:	4628      	mov	r0, r5
 80059da:	f002 fd03 	bl	80083e4 <SDMMC_Init>
 80059de:	4603      	mov	r3, r0
 80059e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 80059e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e06d      	b.n	8005acc <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059fe:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f002 fd38 	bl	800847a <SDMMC_PowerState_ON>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8005a10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <HAL_SD_InitCard+0xac>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e057      	b.n	8005acc <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a2a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	3302      	adds	r3, #2
 8005a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005a38:	4a27      	ldr	r2, [pc, #156]	; (8005ad8 <HAL_SD_InitCard+0x168>)
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	3301      	adds	r3, #1
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fa fc98 	bl	8000378 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 ff01 	bl	8006850 <SD_PowerON>
 8005a4e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00b      	beq.n	8005a6e <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e02e      	b.n	8005acc <HAL_SD_InitCard+0x15c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fe20 	bl	80066b4 <SD_InitCard>
 8005a74:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <HAL_SD_InitCard+0x124>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e01b      	b.n	8005acc <HAL_SD_InitCard+0x15c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f002 fd7f 	bl	80085a0 <SDMMC_CmdBlockLength>
 8005aa2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00f      	beq.n	8005aca <HAL_SD_InitCard+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a0b      	ldr	r2, [pc, #44]	; (8005adc <HAL_SD_InitCard+0x16c>)
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <HAL_SD_InitCard+0x15c>
  }

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3730      	adds	r7, #48	; 0x30
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ad4:	014f8b59 	.word	0x014f8b59
 8005ad8:	00012110 	.word	0x00012110
 8005adc:	004005ff 	.word	0x004005ff

08005ae0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b092      	sub	sp, #72	; 0x48
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005aee:	f7fa fc37 	bl	8000360 <HAL_GetTick>
 8005af2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d107      	bne.n	8005b12 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e1bd      	b.n	8005e8e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	f040 81b0 	bne.w	8005e80 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	441a      	add	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d907      	bls.n	8005b44 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e1a4      	b.n	8005e8e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2203      	movs	r2, #3
 8005b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2200      	movs	r2, #0
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d002      	beq.n	8005b62 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	025b      	lsls	r3, r3, #9
 8005b60:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	025b      	lsls	r3, r3, #9
 8005b6c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005b6e:	2390      	movs	r3, #144	; 0x90
 8005b70:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005b72:	2302      	movs	r3, #2
 8005b74:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f107 0214 	add.w	r2, r7, #20
 8005b86:	4611      	mov	r1, r2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f002 fcdd 	bl	8008548 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d90a      	bls.n	8005baa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2202      	movs	r2, #2
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f002 fd41 	bl	8008628 <SDMMC_CmdReadMultiBlock>
 8005ba6:	6478      	str	r0, [r7, #68]	; 0x44
 8005ba8:	e009      	b.n	8005bbe <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f002 fd14 	bl	80085e4 <SDMMC_CmdReadSingleBlock>
 8005bbc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d012      	beq.n	8005bea <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a7a      	ldr	r2, [pc, #488]	; (8005db4 <HAL_SD_ReadBlocks+0x2d4>)
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e151      	b.n	8005e8e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005bee:	e061      	b.n	8005cb4 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d03c      	beq.n	8005c78 <HAL_SD_ReadBlocks+0x198>
 8005bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d039      	beq.n	8005c78 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005c04:	2300      	movs	r3, #0
 8005c06:	643b      	str	r3, [r7, #64]	; 0x40
 8005c08:	e033      	b.n	8005c72 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f002 fc15 	bl	800843e <SDMMC_ReadFIFO>
 8005c14:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	3301      	adds	r3, #1
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c26:	3b01      	subs	r3, #1
 8005c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c32:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c36:	3301      	adds	r3, #1
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	0c1b      	lsrs	r3, r3, #16
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c52:	3b01      	subs	r3, #1
 8005c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	0e1b      	lsrs	r3, r3, #24
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c62:	3301      	adds	r3, #1
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c6e:	3301      	adds	r3, #1
 8005c70:	643b      	str	r3, [r7, #64]	; 0x40
 8005c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c74:	2b07      	cmp	r3, #7
 8005c76:	d9c8      	bls.n	8005c0a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005c78:	f7fa fb72 	bl	8000360 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d902      	bls.n	8005c8e <HAL_SD_ReadBlocks+0x1ae>
 8005c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d112      	bne.n	8005cb4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a48      	ldr	r2, [pc, #288]	; (8005db4 <HAL_SD_ReadBlocks+0x2d4>)
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e0ec      	b.n	8005e8e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cba:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d096      	beq.n	8005bf0 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d022      	beq.n	8005d16 <HAL_SD_ReadBlocks+0x236>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d91f      	bls.n	8005d16 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d01b      	beq.n	8005d16 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f002 fd06 	bl	80086f4 <SDMMC_CmdStopTransfer>
 8005ce8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d012      	beq.n	8005d16 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a2f      	ldr	r2, [pc, #188]	; (8005db4 <HAL_SD_ReadBlocks+0x2d4>)
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e0bb      	b.n	8005e8e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d012      	beq.n	8005d4a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a22      	ldr	r2, [pc, #136]	; (8005db4 <HAL_SD_ReadBlocks+0x2d4>)
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	f043 0208 	orr.w	r2, r3, #8
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e0a1      	b.n	8005e8e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d012      	beq.n	8005d7e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <HAL_SD_ReadBlocks+0x2d4>)
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	f043 0202 	orr.w	r2, r3, #2
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e087      	b.n	8005e8e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d84:	f003 0320 	and.w	r3, r3, #32
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d064      	beq.n	8005e56 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <HAL_SD_ReadBlocks+0x2d4>)
 8005d92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e06d      	b.n	8005e8e <HAL_SD_ReadBlocks+0x3ae>
 8005db2:	bf00      	nop
 8005db4:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f002 fb3e 	bl	800843e <SDMMC_ReadFIFO>
 8005dc2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dce:	3301      	adds	r3, #1
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	0a1b      	lsrs	r3, r3, #8
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de4:	3301      	adds	r3, #1
 8005de6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dea:	3b01      	subs	r3, #1
 8005dec:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	0c1b      	lsrs	r3, r3, #16
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e00:	3b01      	subs	r3, #1
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	0e1b      	lsrs	r3, r3, #24
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	3301      	adds	r3, #1
 8005e12:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e16:	3b01      	subs	r3, #1
 8005e18:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e1a:	f7fa faa1 	bl	8000360 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d902      	bls.n	8005e30 <HAL_SD_ReadBlocks+0x350>
 8005e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d112      	bne.n	8005e56 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a18      	ldr	r2, [pc, #96]	; (8005e98 <HAL_SD_ReadBlocks+0x3b8>)
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e01b      	b.n	8005e8e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <HAL_SD_ReadBlocks+0x38a>
 8005e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1a6      	bne.n	8005db8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e006      	b.n	8005e8e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
  }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3748      	adds	r7, #72	; 0x48
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	004005ff 	.word	0x004005ff

08005e9c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b092      	sub	sp, #72	; 0x48
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005eaa:	f7fa fa59 	bl	8000360 <HAL_GetTick>
 8005eae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d107      	bne.n	8005ece <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e165      	b.n	800619a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	f040 8158 	bne.w	800618c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	441a      	add	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d907      	bls.n	8005f00 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e14c      	b.n	800619a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2203      	movs	r2, #3
 8005f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d002      	beq.n	8005f1e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	025b      	lsls	r3, r3, #9
 8005f1c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f22:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	025b      	lsls	r3, r3, #9
 8005f28:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005f2a:	2390      	movs	r3, #144	; 0x90
 8005f2c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005f36:	2301      	movs	r3, #1
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f107 0218 	add.w	r2, r7, #24
 8005f42:	4611      	mov	r1, r2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f002 faff 	bl	8008548 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d90a      	bls.n	8005f66 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f002 fba7 	bl	80086b0 <SDMMC_CmdWriteMultiBlock>
 8005f62:	6478      	str	r0, [r7, #68]	; 0x44
 8005f64:	e009      	b.n	8005f7a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2210      	movs	r2, #16
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f72:	4618      	mov	r0, r3
 8005f74:	f002 fb7a 	bl	800866c <SDMMC_CmdWriteSingleBlock>
 8005f78:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d012      	beq.n	8005fa6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a87      	ldr	r2, [pc, #540]	; (80061a4 <HAL_SD_WriteBlocks+0x308>)
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e0f9      	b.n	800619a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005faa:	e065      	b.n	8006078 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d040      	beq.n	800603c <HAL_SD_WriteBlocks+0x1a0>
 8005fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d03d      	beq.n	800603c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc4:	e037      	b.n	8006036 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fce:	3301      	adds	r3, #1
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	021a      	lsls	r2, r3, #8
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fec:	3b01      	subs	r3, #1
 8005fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	041a      	lsls	r2, r3, #16
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffe:	3301      	adds	r3, #1
 8006000:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006004:	3b01      	subs	r3, #1
 8006006:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	061a      	lsls	r2, r3, #24
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	3301      	adds	r3, #1
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800601a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601c:	3b01      	subs	r3, #1
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f107 0214 	add.w	r2, r7, #20
 8006028:	4611      	mov	r1, r2
 800602a:	4618      	mov	r0, r3
 800602c:	f002 fa14 	bl	8008458 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006032:	3301      	adds	r3, #1
 8006034:	643b      	str	r3, [r7, #64]	; 0x40
 8006036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006038:	2b07      	cmp	r3, #7
 800603a:	d9c4      	bls.n	8005fc6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800603c:	f7fa f990 	bl	8000360 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006048:	429a      	cmp	r2, r3
 800604a:	d902      	bls.n	8006052 <HAL_SD_WriteBlocks+0x1b6>
 800604c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800604e:	2b00      	cmp	r3, #0
 8006050:	d112      	bne.n	8006078 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a53      	ldr	r2, [pc, #332]	; (80061a4 <HAL_SD_WriteBlocks+0x308>)
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006060:	431a      	orrs	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e090      	b.n	800619a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006082:	2b00      	cmp	r3, #0
 8006084:	d092      	beq.n	8005fac <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d022      	beq.n	80060da <HAL_SD_WriteBlocks+0x23e>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d91f      	bls.n	80060da <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d01b      	beq.n	80060da <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f002 fb24 	bl	80086f4 <SDMMC_CmdStopTransfer>
 80060ac:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80060ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d012      	beq.n	80060da <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a3a      	ldr	r2, [pc, #232]	; (80061a4 <HAL_SD_WriteBlocks+0x308>)
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c2:	431a      	orrs	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e05f      	b.n	800619a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d012      	beq.n	800610e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a2d      	ldr	r2, [pc, #180]	; (80061a4 <HAL_SD_WriteBlocks+0x308>)
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	f043 0208 	orr.w	r2, r3, #8
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e045      	b.n	800619a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d012      	beq.n	8006142 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a20      	ldr	r2, [pc, #128]	; (80061a4 <HAL_SD_WriteBlocks+0x308>)
 8006122:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	f043 0202 	orr.w	r2, r3, #2
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e02b      	b.n	800619a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	d012      	beq.n	8006176 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a13      	ldr	r2, [pc, #76]	; (80061a4 <HAL_SD_WriteBlocks+0x308>)
 8006156:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	f043 0210 	orr.w	r2, r3, #16
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e011      	b.n	800619a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f240 523a 	movw	r2, #1338	; 0x53a
 800617e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	e006      	b.n	800619a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
  }
}
 800619a:	4618      	mov	r0, r3
 800619c:	3748      	adds	r7, #72	; 0x48
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	004005ff 	.word	0x004005ff

080061a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b6:	0f9b      	lsrs	r3, r3, #30
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061c2:	0e9b      	lsrs	r3, r3, #26
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d4:	0e1b      	lsrs	r3, r3, #24
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e6:	0c1b      	lsrs	r3, r3, #16
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f2:	0a1b      	lsrs	r3, r3, #8
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006208:	0d1b      	lsrs	r3, r3, #20
 800620a:	b29a      	uxth	r2, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006214:	0c1b      	lsrs	r3, r3, #16
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	b2da      	uxtb	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006226:	0bdb      	lsrs	r3, r3, #15
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	b2da      	uxtb	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006238:	0b9b      	lsrs	r3, r3, #14
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	b2da      	uxtb	r2, r3
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624a:	0b5b      	lsrs	r3, r3, #13
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	b2da      	uxtb	r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625c:	0b1b      	lsrs	r3, r3, #12
 800625e:	b2db      	uxtb	r3, r3
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	b2da      	uxtb	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2200      	movs	r2, #0
 800626e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006274:	2b00      	cmp	r3, #0
 8006276:	d163      	bne.n	8006340 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800627c:	009a      	lsls	r2, r3, #2
 800627e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006282:	4013      	ands	r3, r2
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006288:	0f92      	lsrs	r2, r2, #30
 800628a:	431a      	orrs	r2, r3
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006294:	0edb      	lsrs	r3, r3, #27
 8006296:	b2db      	uxtb	r3, r3
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	b2da      	uxtb	r2, r3
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a6:	0e1b      	lsrs	r3, r3, #24
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b8:	0d5b      	lsrs	r3, r3, #21
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ca:	0c9b      	lsrs	r3, r3, #18
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062dc:	0bdb      	lsrs	r3, r3, #15
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	7e1b      	ldrb	r3, [r3, #24]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	3302      	adds	r3, #2
 8006300:	2201      	movs	r2, #1
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800630a:	fb02 f203 	mul.w	r2, r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	7a1b      	ldrb	r3, [r3, #8]
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	2201      	movs	r2, #1
 800631e:	409a      	lsls	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800632c:	0a52      	lsrs	r2, r2, #9
 800632e:	fb02 f203 	mul.w	r2, r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800633c:	661a      	str	r2, [r3, #96]	; 0x60
 800633e:	e031      	b.n	80063a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006344:	2b01      	cmp	r3, #1
 8006346:	d11d      	bne.n	8006384 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006356:	0c1b      	lsrs	r3, r3, #16
 8006358:	431a      	orrs	r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	3301      	adds	r3, #1
 8006364:	029a      	lsls	r2, r3, #10
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006378:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	661a      	str	r2, [r3, #96]	; 0x60
 8006382:	e00f      	b.n	80063a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a58      	ldr	r2, [pc, #352]	; (80064ec <HAL_SD_GetCardCSD+0x344>)
 800638a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e09d      	b.n	80064e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a8:	0b9b      	lsrs	r3, r3, #14
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ba:	09db      	lsrs	r3, r3, #7
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063dc:	0fdb      	lsrs	r3, r3, #31
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e8:	0f5b      	lsrs	r3, r3, #29
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	0e9b      	lsrs	r3, r3, #26
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	b2da      	uxtb	r2, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640c:	0d9b      	lsrs	r3, r3, #22
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	b2da      	uxtb	r2, r3
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641e:	0d5b      	lsrs	r3, r3, #21
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	b2da      	uxtb	r2, r3
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643a:	0c1b      	lsrs	r3, r3, #16
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	b2da      	uxtb	r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	0bdb      	lsrs	r3, r3, #15
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006462:	0b9b      	lsrs	r3, r3, #14
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	b2da      	uxtb	r2, r3
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	0b5b      	lsrs	r3, r3, #13
 8006478:	b2db      	uxtb	r3, r3
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	b2da      	uxtb	r2, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	0b1b      	lsrs	r3, r3, #12
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	b2da      	uxtb	r2, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649e:	0a9b      	lsrs	r3, r3, #10
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	004005ff 	.word	0x004005ff

080064f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006548:	b5b0      	push	{r4, r5, r7, lr}
 800654a:	b08e      	sub	sp, #56	; 0x38
 800654c:	af04      	add	r7, sp, #16
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2203      	movs	r2, #3
 800655c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006564:	2b03      	cmp	r3, #3
 8006566:	d02e      	beq.n	80065c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656e:	d106      	bne.n	800657e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	639a      	str	r2, [r3, #56]	; 0x38
 800657c:	e029      	b.n	80065d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006584:	d10a      	bne.n	800659c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa18 	bl	80069bc <SD_WideBus_Enable>
 800658c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	639a      	str	r2, [r3, #56]	; 0x38
 800659a:	e01a      	b.n	80065d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa55 	bl	8006a52 <SD_WideBus_Disable>
 80065a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38
 80065b6:	e00c      	b.n	80065d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38
 80065c4:	e005      	b.n	80065d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a24      	ldr	r2, [pc, #144]	; (8006670 <HAL_SD_ConfigWideBusOperation+0x128>)
 80065e0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065e8:	e01f      	b.n	800662a <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681d      	ldr	r5, [r3, #0]
 8006610:	466c      	mov	r4, sp
 8006612:	f107 0314 	add.w	r3, r7, #20
 8006616:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800661a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800661e:	f107 0308 	add.w	r3, r7, #8
 8006622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006624:	4628      	mov	r0, r5
 8006626:	f001 fedd 	bl	80083e4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006632:	4618      	mov	r0, r3
 8006634:	f001 ffb4 	bl	80085a0 <SDMMC_CmdBlockLength>
 8006638:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00c      	beq.n	800665a <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <HAL_SD_ConfigWideBusOperation+0x128>)
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006666:	4618      	mov	r0, r3
 8006668:	3728      	adds	r7, #40	; 0x28
 800666a:	46bd      	mov	sp, r7
 800666c:	bdb0      	pop	{r4, r5, r7, pc}
 800666e:	bf00      	nop
 8006670:	004005ff 	.word	0x004005ff

08006674 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006680:	f107 030c 	add.w	r3, r7, #12
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f970 	bl	800696c <SD_SendStatus>
 800668c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	431a      	orrs	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	0a5b      	lsrs	r3, r3, #9
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80066aa:	693b      	ldr	r3, [r7, #16]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80066b4:	b5b0      	push	{r4, r5, r7, lr}
 80066b6:	b094      	sub	sp, #80	; 0x50
 80066b8:	af04      	add	r7, sp, #16
 80066ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80066bc:	2301      	movs	r3, #1
 80066be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f001 fee7 	bl	8008498 <SDMMC_GetPowerState>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d102      	bne.n	80066d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80066d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80066d4:	e0b7      	b.n	8006846 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d02f      	beq.n	800673e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f002 f910 	bl	8008908 <SDMMC_CmdSendCID>
 80066e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80066ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80066f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f2:	e0a8      	b.n	8006846 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2100      	movs	r1, #0
 80066fa:	4618      	mov	r0, r3
 80066fc:	f001 ff11 	bl	8008522 <SDMMC_GetResponse>
 8006700:	4602      	mov	r2, r0
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2104      	movs	r1, #4
 800670c:	4618      	mov	r0, r3
 800670e:	f001 ff08 	bl	8008522 <SDMMC_GetResponse>
 8006712:	4602      	mov	r2, r0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2108      	movs	r1, #8
 800671e:	4618      	mov	r0, r3
 8006720:	f001 feff 	bl	8008522 <SDMMC_GetResponse>
 8006724:	4602      	mov	r2, r0
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	210c      	movs	r1, #12
 8006730:	4618      	mov	r0, r3
 8006732:	f001 fef6 	bl	8008522 <SDMMC_GetResponse>
 8006736:	4602      	mov	r2, r0
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006742:	2b03      	cmp	r3, #3
 8006744:	d00d      	beq.n	8006762 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f107 020e 	add.w	r2, r7, #14
 800674e:	4611      	mov	r1, r2
 8006750:	4618      	mov	r0, r3
 8006752:	f002 f916 	bl	8008982 <SDMMC_CmdSetRelAdd>
 8006756:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <SD_InitCard+0xae>
    {
      return errorstate;
 800675e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006760:	e071      	b.n	8006846 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	2b03      	cmp	r3, #3
 8006768:	d036      	beq.n	80067d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800676a:	89fb      	ldrh	r3, [r7, #14]
 800676c:	461a      	mov	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f002 f8e0 	bl	8008944 <SDMMC_CmdSendCSD>
 8006784:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <SD_InitCard+0xdc>
    {
      return errorstate;
 800678c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678e:	e05a      	b.n	8006846 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f001 fec3 	bl	8008522 <SDMMC_GetResponse>
 800679c:	4602      	mov	r2, r0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2104      	movs	r1, #4
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 feba 	bl	8008522 <SDMMC_GetResponse>
 80067ae:	4602      	mov	r2, r0
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2108      	movs	r1, #8
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 feb1 	bl	8008522 <SDMMC_GetResponse>
 80067c0:	4602      	mov	r2, r0
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	210c      	movs	r1, #12
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 fea8 	bl	8008522 <SDMMC_GetResponse>
 80067d2:	4602      	mov	r2, r0
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2104      	movs	r1, #4
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 fe9f 	bl	8008522 <SDMMC_GetResponse>
 80067e4:	4603      	mov	r3, r0
 80067e6:	0d1a      	lsrs	r2, r3, #20
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80067ec:	f107 0310 	add.w	r3, r7, #16
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff fcd8 	bl	80061a8 <HAL_SD_GetCardCSD>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006802:	e020      	b.n	8006846 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6819      	ldr	r1, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680c:	041b      	lsls	r3, r3, #16
 800680e:	f04f 0400 	mov.w	r4, #0
 8006812:	461a      	mov	r2, r3
 8006814:	4623      	mov	r3, r4
 8006816:	4608      	mov	r0, r1
 8006818:	f001 ff8e 	bl	8008738 <SDMMC_CmdSelDesel>
 800681c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800681e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <SD_InitCard+0x174>
  {
    return errorstate;
 8006824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006826:	e00e      	b.n	8006846 <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681d      	ldr	r5, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	466c      	mov	r4, sp
 8006830:	f103 0210 	add.w	r2, r3, #16
 8006834:	ca07      	ldmia	r2, {r0, r1, r2}
 8006836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800683a:	3304      	adds	r3, #4
 800683c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800683e:	4628      	mov	r0, r5
 8006840:	f001 fdd0 	bl	80083e4 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3740      	adds	r7, #64	; 0x40
 800684a:	46bd      	mov	sp, r7
 800684c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006850 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	f001 ff88 	bl	800877e <SDMMC_CmdGoIdleState>
 800686e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	e072      	b.n	8006960 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f001 ff9b 	bl	80087ba <SDMMC_CmdOperCond>
 8006884:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00d      	beq.n	80068a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f001 ff71 	bl	800877e <SDMMC_CmdGoIdleState>
 800689c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <SD_PowerON+0x5e>
    {
      return errorstate;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	e05b      	b.n	8006960 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d137      	bne.n	8006926 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2100      	movs	r1, #0
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 ff9b 	bl	80087f8 <SDMMC_CmdAppCommand>
 80068c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d02d      	beq.n	8006926 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068ce:	e047      	b.n	8006960 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2100      	movs	r1, #0
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 ff8e 	bl	80087f8 <SDMMC_CmdAppCommand>
 80068dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <SD_PowerON+0x98>
    {
      return errorstate;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	e03b      	b.n	8006960 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	491e      	ldr	r1, [pc, #120]	; (8006968 <SD_PowerON+0x118>)
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 ffa4 	bl	800883c <SDMMC_CmdAppOperCommand>
 80068f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006900:	e02e      	b.n	8006960 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f001 fe0a 	bl	8008522 <SDMMC_GetResponse>
 800690e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	0fdb      	lsrs	r3, r3, #31
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <SD_PowerON+0xcc>
 8006918:	2301      	movs	r3, #1
 800691a:	e000      	b.n	800691e <SD_PowerON+0xce>
 800691c:	2300      	movs	r3, #0
 800691e:	613b      	str	r3, [r7, #16]

    count++;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	3301      	adds	r3, #1
 8006924:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800692c:	4293      	cmp	r3, r2
 800692e:	d802      	bhi.n	8006936 <SD_PowerON+0xe6>
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0cc      	beq.n	80068d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800693c:	4293      	cmp	r3, r2
 800693e:	d902      	bls.n	8006946 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006944:	e00c      	b.n	8006960 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	645a      	str	r2, [r3, #68]	; 0x44
 8006956:	e002      	b.n	800695e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	c1100000 	.word	0xc1100000

0800696c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d102      	bne.n	8006982 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800697c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006980:	e018      	b.n	80069b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698a:	041b      	lsls	r3, r3, #16
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f002 f818 	bl	80089c4 <SDMMC_CmdSendStatus>
 8006994:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	e009      	b.n	80069b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2100      	movs	r1, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	f001 fdbb 	bl	8008522 <SDMMC_GetResponse>
 80069ac:	4602      	mov	r2, r0
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80069c4:	2300      	movs	r3, #0
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	2300      	movs	r3, #0
 80069ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2100      	movs	r1, #0
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 fda5 	bl	8008522 <SDMMC_GetResponse>
 80069d8:	4603      	mov	r3, r0
 80069da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069e2:	d102      	bne.n	80069ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80069e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069e8:	e02f      	b.n	8006a4a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80069ea:	f107 030c 	add.w	r3, r7, #12
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f879 	bl	8006ae8 <SD_FindSCR>
 80069f6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	e023      	b.n	8006a4a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01c      	beq.n	8006a46 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a14:	041b      	lsls	r3, r3, #16
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f001 feed 	bl	80087f8 <SDMMC_CmdAppCommand>
 8006a1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	e00f      	b.n	8006a4a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2102      	movs	r1, #2
 8006a30:	4618      	mov	r0, r3
 8006a32:	f001 ff26 	bl	8008882 <SDMMC_CmdBusWidth>
 8006a36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	e003      	b.n	8006a4a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e001      	b.n	8006a4a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b086      	sub	sp, #24
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f001 fd5a 	bl	8008522 <SDMMC_GetResponse>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a78:	d102      	bne.n	8006a80 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a7e:	e02f      	b.n	8006ae0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a80:	f107 030c 	add.w	r3, r7, #12
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f82e 	bl	8006ae8 <SD_FindSCR>
 8006a8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	e023      	b.n	8006ae0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01c      	beq.n	8006adc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aaa:	041b      	lsls	r3, r3, #16
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f001 fea2 	bl	80087f8 <SDMMC_CmdAppCommand>
 8006ab4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	e00f      	b.n	8006ae0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f001 fedb 	bl	8008882 <SDMMC_CmdBusWidth>
 8006acc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	e003      	b.n	8006ae0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e001      	b.n	8006ae0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006adc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006ae8:	b590      	push	{r4, r7, lr}
 8006aea:	b08f      	sub	sp, #60	; 0x3c
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006af2:	f7f9 fc35 	bl	8000360 <HAL_GetTick>
 8006af6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006afc:	2300      	movs	r3, #0
 8006afe:	60bb      	str	r3, [r7, #8]
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2108      	movs	r1, #8
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f001 fd46 	bl	80085a0 <SDMMC_CmdBlockLength>
 8006b14:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	e0a9      	b.n	8006c74 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b28:	041b      	lsls	r3, r3, #16
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	f001 fe63 	bl	80087f8 <SDMMC_CmdAppCommand>
 8006b32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <SD_FindSCR+0x56>
  {
    return errorstate;
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	e09a      	b.n	8006c74 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b42:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006b44:	2308      	movs	r3, #8
 8006b46:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006b48:	2330      	movs	r3, #48	; 0x30
 8006b4a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b54:	2301      	movs	r3, #1
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f107 0210 	add.w	r2, r7, #16
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 fcf0 	bl	8008548 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 feaa 	bl	80088c6 <SDMMC_CmdSendSCR>
 8006b72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d022      	beq.n	8006bc0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	e07a      	b.n	8006c74 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00e      	beq.n	8006baa <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6819      	ldr	r1, [r3, #0]
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	f107 0208 	add.w	r2, r7, #8
 8006b98:	18d4      	adds	r4, r2, r3
 8006b9a:	4608      	mov	r0, r1
 8006b9c:	f001 fc4f 	bl	800843e <SDMMC_ReadFIFO>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	6023      	str	r3, [r4, #0]
      index++;
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006baa:	f7f9 fbd9 	bl	8000360 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d102      	bne.n	8006bc0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006bba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bbe:	e059      	b.n	8006c74 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bc6:	f240 432a 	movw	r3, #1066	; 0x42a
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0d6      	beq.n	8006b7e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd6:	f003 0308 	and.w	r3, r3, #8
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2208      	movs	r2, #8
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006be6:	2308      	movs	r3, #8
 8006be8:	e044      	b.n	8006c74 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d005      	beq.n	8006c04 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c00:	2302      	movs	r3, #2
 8006c02:	e037      	b.n	8006c74 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d005      	beq.n	8006c1e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2220      	movs	r2, #32
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006c1a:	2320      	movs	r3, #32
 8006c1c:	e02a      	b.n	8006c74 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	061a      	lsls	r2, r3, #24
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	021b      	lsls	r3, r3, #8
 8006c30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c34:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	0a1b      	lsrs	r3, r3, #8
 8006c3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c3e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	0e1b      	lsrs	r3, r3, #24
 8006c44:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c48:	601a      	str	r2, [r3, #0]
    scr++;
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	061a      	lsls	r2, r3, #24
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c5c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	0a1b      	lsrs	r3, r3, #8
 8006c62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006c66:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	0e1b      	lsrs	r3, r3, #24
 8006c6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	373c      	adds	r7, #60	; 0x3c
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd90      	pop	{r4, r7, pc}

08006c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e095      	b.n	8006dba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d108      	bne.n	8006ca8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c9e:	d009      	beq.n	8006cb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	61da      	str	r2, [r3, #28]
 8006ca6:	e005      	b.n	8006cb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f007 f912 	bl	800def8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cf4:	d902      	bls.n	8006cfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	e002      	b.n	8006d02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006d0a:	d007      	beq.n	8006d1c <HAL_SPI_Init+0xa0>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d14:	d002      	beq.n	8006d1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	431a      	orrs	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d54:	431a      	orrs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5e:	ea42 0103 	orr.w	r1, r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	0c1b      	lsrs	r3, r3, #16
 8006d78:	f003 0204 	and.w	r2, r3, #4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	f003 0310 	and.w	r3, r3, #16
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8a:	f003 0308 	and.w	r3, r3, #8
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006d98:	ea42 0103 	orr.w	r1, r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e049      	b.n	8006e68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d106      	bne.n	8006dee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f007 fa69 	bl	800e2c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4610      	mov	r0, r2
 8006e02:	f000 f9c7 	bl	8007194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e049      	b.n	8006f16 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f841 	bl	8006f1e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f000 f970 	bl	8007194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <HAL_TIM_OC_ConfigChannel+0x1a>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e064      	b.n	8007018 <HAL_TIM_OC_ConfigChannel+0xe4>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b14      	cmp	r3, #20
 8006f5a:	d857      	bhi.n	800700c <HAL_TIM_OC_ConfigChannel+0xd8>
 8006f5c:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <HAL_TIM_OC_ConfigChannel+0x30>)
 8006f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f62:	bf00      	nop
 8006f64:	08006fb9 	.word	0x08006fb9
 8006f68:	0800700d 	.word	0x0800700d
 8006f6c:	0800700d 	.word	0x0800700d
 8006f70:	0800700d 	.word	0x0800700d
 8006f74:	08006fc7 	.word	0x08006fc7
 8006f78:	0800700d 	.word	0x0800700d
 8006f7c:	0800700d 	.word	0x0800700d
 8006f80:	0800700d 	.word	0x0800700d
 8006f84:	08006fd5 	.word	0x08006fd5
 8006f88:	0800700d 	.word	0x0800700d
 8006f8c:	0800700d 	.word	0x0800700d
 8006f90:	0800700d 	.word	0x0800700d
 8006f94:	08006fe3 	.word	0x08006fe3
 8006f98:	0800700d 	.word	0x0800700d
 8006f9c:	0800700d 	.word	0x0800700d
 8006fa0:	0800700d 	.word	0x0800700d
 8006fa4:	08006ff1 	.word	0x08006ff1
 8006fa8:	0800700d 	.word	0x0800700d
 8006fac:	0800700d 	.word	0x0800700d
 8006fb0:	0800700d 	.word	0x0800700d
 8006fb4:	08006fff 	.word	0x08006fff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 f956 	bl	8007270 <TIM_OC1_SetConfig>
      break;
 8006fc4:	e023      	b.n	800700e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 f9cb 	bl	8007368 <TIM_OC2_SetConfig>
      break;
 8006fd2:	e01c      	b.n	800700e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fa3e 	bl	800745c <TIM_OC3_SetConfig>
      break;
 8006fe0:	e015      	b.n	800700e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 faaf 	bl	800754c <TIM_OC4_SetConfig>
      break;
 8006fee:	e00e      	b.n	800700e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fb06 	bl	8007608 <TIM_OC5_SetConfig>
      break;
 8006ffc:	e007      	b.n	800700e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	4618      	mov	r0, r3
 8007006:	f000 fb57 	bl	80076b8 <TIM_OC6_SetConfig>
      break;
 800700a:	e000      	b.n	800700e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800700c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <HAL_TIM_ConfigClockSource+0x18>
 8007034:	2302      	movs	r3, #2
 8007036:	e0a8      	b.n	800718a <HAL_TIM_ConfigClockSource+0x16a>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007056:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800705a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007062:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d067      	beq.n	8007144 <HAL_TIM_ConfigClockSource+0x124>
 8007074:	2b40      	cmp	r3, #64	; 0x40
 8007076:	d80b      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x70>
 8007078:	2b10      	cmp	r3, #16
 800707a:	d073      	beq.n	8007164 <HAL_TIM_ConfigClockSource+0x144>
 800707c:	2b10      	cmp	r3, #16
 800707e:	d802      	bhi.n	8007086 <HAL_TIM_ConfigClockSource+0x66>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d06f      	beq.n	8007164 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007084:	e078      	b.n	8007178 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007086:	2b20      	cmp	r3, #32
 8007088:	d06c      	beq.n	8007164 <HAL_TIM_ConfigClockSource+0x144>
 800708a:	2b30      	cmp	r3, #48	; 0x30
 800708c:	d06a      	beq.n	8007164 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800708e:	e073      	b.n	8007178 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007090:	2b70      	cmp	r3, #112	; 0x70
 8007092:	d00d      	beq.n	80070b0 <HAL_TIM_ConfigClockSource+0x90>
 8007094:	2b70      	cmp	r3, #112	; 0x70
 8007096:	d804      	bhi.n	80070a2 <HAL_TIM_ConfigClockSource+0x82>
 8007098:	2b50      	cmp	r3, #80	; 0x50
 800709a:	d033      	beq.n	8007104 <HAL_TIM_ConfigClockSource+0xe4>
 800709c:	2b60      	cmp	r3, #96	; 0x60
 800709e:	d041      	beq.n	8007124 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80070a0:	e06a      	b.n	8007178 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80070a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a6:	d066      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0x156>
 80070a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ac:	d017      	beq.n	80070de <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80070ae:	e063      	b.n	8007178 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	6899      	ldr	r1, [r3, #8]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f000 fbce 	bl	8007860 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	609a      	str	r2, [r3, #8]
      break;
 80070dc:	e04c      	b.n	8007178 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	6899      	ldr	r1, [r3, #8]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f000 fbb7 	bl	8007860 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007100:	609a      	str	r2, [r3, #8]
      break;
 8007102:	e039      	b.n	8007178 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	6859      	ldr	r1, [r3, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	461a      	mov	r2, r3
 8007112:	f000 fb2b 	bl	800776c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2150      	movs	r1, #80	; 0x50
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fb84 	bl	800782a <TIM_ITRx_SetConfig>
      break;
 8007122:	e029      	b.n	8007178 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	6859      	ldr	r1, [r3, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	461a      	mov	r2, r3
 8007132:	f000 fb4a 	bl	80077ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2160      	movs	r1, #96	; 0x60
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fb74 	bl	800782a <TIM_ITRx_SetConfig>
      break;
 8007142:	e019      	b.n	8007178 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	6859      	ldr	r1, [r3, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	461a      	mov	r2, r3
 8007152:	f000 fb0b 	bl	800776c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2140      	movs	r1, #64	; 0x40
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fb64 	bl	800782a <TIM_ITRx_SetConfig>
      break;
 8007162:	e009      	b.n	8007178 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f000 fb5b 	bl	800782a <TIM_ITRx_SetConfig>
        break;
 8007174:	e000      	b.n	8007178 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a2e      	ldr	r2, [pc, #184]	; (8007260 <TIM_Base_SetConfig+0xcc>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d007      	beq.n	80071bc <TIM_Base_SetConfig+0x28>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b2:	d003      	beq.n	80071bc <TIM_Base_SetConfig+0x28>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a2b      	ldr	r2, [pc, #172]	; (8007264 <TIM_Base_SetConfig+0xd0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d108      	bne.n	80071ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a23      	ldr	r2, [pc, #140]	; (8007260 <TIM_Base_SetConfig+0xcc>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00f      	beq.n	80071f6 <TIM_Base_SetConfig+0x62>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071dc:	d00b      	beq.n	80071f6 <TIM_Base_SetConfig+0x62>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a20      	ldr	r2, [pc, #128]	; (8007264 <TIM_Base_SetConfig+0xd0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d007      	beq.n	80071f6 <TIM_Base_SetConfig+0x62>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a1f      	ldr	r2, [pc, #124]	; (8007268 <TIM_Base_SetConfig+0xd4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d003      	beq.n	80071f6 <TIM_Base_SetConfig+0x62>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a1e      	ldr	r2, [pc, #120]	; (800726c <TIM_Base_SetConfig+0xd8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d108      	bne.n	8007208 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4313      	orrs	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a0c      	ldr	r2, [pc, #48]	; (8007260 <TIM_Base_SetConfig+0xcc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d007      	beq.n	8007244 <TIM_Base_SetConfig+0xb0>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a0c      	ldr	r2, [pc, #48]	; (8007268 <TIM_Base_SetConfig+0xd4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d003      	beq.n	8007244 <TIM_Base_SetConfig+0xb0>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a0b      	ldr	r2, [pc, #44]	; (800726c <TIM_Base_SetConfig+0xd8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d103      	bne.n	800724c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	691a      	ldr	r2, [r3, #16]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	615a      	str	r2, [r3, #20]
}
 8007252:	bf00      	nop
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40012c00 	.word	0x40012c00
 8007264:	40000400 	.word	0x40000400
 8007268:	40014000 	.word	0x40014000
 800726c:	40014400 	.word	0x40014400

08007270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f023 0201 	bic.w	r2, r3, #1
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800729e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f023 0302 	bic.w	r3, r3, #2
 80072bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a24      	ldr	r2, [pc, #144]	; (800735c <TIM_OC1_SetConfig+0xec>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_OC1_SetConfig+0x70>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a23      	ldr	r2, [pc, #140]	; (8007360 <TIM_OC1_SetConfig+0xf0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC1_SetConfig+0x70>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a22      	ldr	r2, [pc, #136]	; (8007364 <TIM_OC1_SetConfig+0xf4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10c      	bne.n	80072fa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0308 	bic.w	r3, r3, #8
 80072e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f023 0304 	bic.w	r3, r3, #4
 80072f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a17      	ldr	r2, [pc, #92]	; (800735c <TIM_OC1_SetConfig+0xec>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d007      	beq.n	8007312 <TIM_OC1_SetConfig+0xa2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a16      	ldr	r2, [pc, #88]	; (8007360 <TIM_OC1_SetConfig+0xf0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d003      	beq.n	8007312 <TIM_OC1_SetConfig+0xa2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a15      	ldr	r2, [pc, #84]	; (8007364 <TIM_OC1_SetConfig+0xf4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d111      	bne.n	8007336 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	621a      	str	r2, [r3, #32]
}
 8007350:	bf00      	nop
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	40012c00 	.word	0x40012c00
 8007360:	40014000 	.word	0x40014000
 8007364:	40014400 	.word	0x40014400

08007368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	f023 0210 	bic.w	r2, r3, #16
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f023 0320 	bic.w	r3, r3, #32
 80073b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a22      	ldr	r2, [pc, #136]	; (8007450 <TIM_OC2_SetConfig+0xe8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d10d      	bne.n	80073e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a19      	ldr	r2, [pc, #100]	; (8007450 <TIM_OC2_SetConfig+0xe8>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d007      	beq.n	8007400 <TIM_OC2_SetConfig+0x98>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a18      	ldr	r2, [pc, #96]	; (8007454 <TIM_OC2_SetConfig+0xec>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d003      	beq.n	8007400 <TIM_OC2_SetConfig+0x98>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a17      	ldr	r2, [pc, #92]	; (8007458 <TIM_OC2_SetConfig+0xf0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d113      	bne.n	8007428 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800740e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40012c00 	.word	0x40012c00
 8007454:	40014000 	.word	0x40014000
 8007458:	40014400 	.word	0x40014400

0800745c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0303 	bic.w	r3, r3, #3
 8007496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	021b      	lsls	r3, r3, #8
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a21      	ldr	r2, [pc, #132]	; (8007540 <TIM_OC3_SetConfig+0xe4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d10d      	bne.n	80074da <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	021b      	lsls	r3, r3, #8
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a18      	ldr	r2, [pc, #96]	; (8007540 <TIM_OC3_SetConfig+0xe4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d007      	beq.n	80074f2 <TIM_OC3_SetConfig+0x96>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a17      	ldr	r2, [pc, #92]	; (8007544 <TIM_OC3_SetConfig+0xe8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_OC3_SetConfig+0x96>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a16      	ldr	r2, [pc, #88]	; (8007548 <TIM_OC3_SetConfig+0xec>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d113      	bne.n	800751a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	4313      	orrs	r3, r2
 800750c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4313      	orrs	r3, r2
 8007518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	621a      	str	r2, [r3, #32]
}
 8007534:	bf00      	nop
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40014000 	.word	0x40014000
 8007548:	40014400 	.word	0x40014400

0800754c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800757a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800757e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	021b      	lsls	r3, r3, #8
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4313      	orrs	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800759a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	031b      	lsls	r3, r3, #12
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a14      	ldr	r2, [pc, #80]	; (80075fc <TIM_OC4_SetConfig+0xb0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d007      	beq.n	80075c0 <TIM_OC4_SetConfig+0x74>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a13      	ldr	r2, [pc, #76]	; (8007600 <TIM_OC4_SetConfig+0xb4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d003      	beq.n	80075c0 <TIM_OC4_SetConfig+0x74>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a12      	ldr	r2, [pc, #72]	; (8007604 <TIM_OC4_SetConfig+0xb8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d109      	bne.n	80075d4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	019b      	lsls	r3, r3, #6
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	621a      	str	r2, [r3, #32]
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40012c00 	.word	0x40012c00
 8007600:	40014000 	.word	0x40014000
 8007604:	40014400 	.word	0x40014400

08007608 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800764c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a13      	ldr	r2, [pc, #76]	; (80076ac <TIM_OC5_SetConfig+0xa4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d007      	beq.n	8007672 <TIM_OC5_SetConfig+0x6a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a12      	ldr	r2, [pc, #72]	; (80076b0 <TIM_OC5_SetConfig+0xa8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d003      	beq.n	8007672 <TIM_OC5_SetConfig+0x6a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a11      	ldr	r2, [pc, #68]	; (80076b4 <TIM_OC5_SetConfig+0xac>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d109      	bne.n	8007686 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007678:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	621a      	str	r2, [r3, #32]
}
 80076a0:	bf00      	nop
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	40012c00 	.word	0x40012c00
 80076b0:	40014000 	.word	0x40014000
 80076b4:	40014400 	.word	0x40014400

080076b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	021b      	lsls	r3, r3, #8
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	051b      	lsls	r3, r3, #20
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	4313      	orrs	r3, r2
 800770a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a14      	ldr	r2, [pc, #80]	; (8007760 <TIM_OC6_SetConfig+0xa8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d007      	beq.n	8007724 <TIM_OC6_SetConfig+0x6c>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a13      	ldr	r2, [pc, #76]	; (8007764 <TIM_OC6_SetConfig+0xac>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d003      	beq.n	8007724 <TIM_OC6_SetConfig+0x6c>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a12      	ldr	r2, [pc, #72]	; (8007768 <TIM_OC6_SetConfig+0xb0>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d109      	bne.n	8007738 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800772a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	029b      	lsls	r3, r3, #10
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	621a      	str	r2, [r3, #32]
}
 8007752:	bf00      	nop
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	40012c00 	.word	0x40012c00
 8007764:	40014000 	.word	0x40014000
 8007768:	40014400 	.word	0x40014400

0800776c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f023 0201 	bic.w	r2, r3, #1
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f023 030a 	bic.w	r3, r3, #10
 80077a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	621a      	str	r2, [r3, #32]
}
 80077be:	bf00      	nop
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b087      	sub	sp, #28
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	f023 0210 	bic.w	r2, r3, #16
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	031b      	lsls	r3, r3, #12
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007806:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	011b      	lsls	r3, r3, #4
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	4313      	orrs	r3, r2
 8007810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800782a:	b480      	push	{r7}
 800782c:	b085      	sub	sp, #20
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4313      	orrs	r3, r2
 8007848:	f043 0307 	orr.w	r3, r3, #7
 800784c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	609a      	str	r2, [r3, #8]
}
 8007854:	bf00      	nop
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800787a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	021a      	lsls	r2, r3, #8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	431a      	orrs	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4313      	orrs	r3, r2
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	4313      	orrs	r3, r2
 800788c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	609a      	str	r2, [r3, #8]
}
 8007894:	bf00      	nop
 8007896:	371c      	adds	r7, #28
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e054      	b.n	8007962 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a24      	ldr	r2, [pc, #144]	; (8007970 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d108      	bne.n	80078f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a17      	ldr	r2, [pc, #92]	; (8007970 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00e      	beq.n	8007936 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007920:	d009      	beq.n	8007936 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a13      	ldr	r2, [pc, #76]	; (8007974 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d004      	beq.n	8007936 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a11      	ldr	r2, [pc, #68]	; (8007978 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d10c      	bne.n	8007950 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800793c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	4313      	orrs	r3, r2
 8007946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40012c00 	.word	0x40012c00
 8007974:	40000400 	.word	0x40000400
 8007978:	40014000 	.word	0x40014000

0800797c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800797c:	b480      	push	{r7}
 800797e:	b08b      	sub	sp, #44	; 0x2c
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	fa93 f3a3 	rbit	r3, r3
 8007996:	613b      	str	r3, [r7, #16]
  return result;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80079a2:	2320      	movs	r3, #32
 80079a4:	e003      	b.n	80079ae <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	fab3 f383 	clz	r3, r3
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	2103      	movs	r1, #3
 80079b2:	fa01 f303 	lsl.w	r3, r1, r3
 80079b6:	43db      	mvns	r3, r3
 80079b8:	401a      	ands	r2, r3
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	fa93 f3a3 	rbit	r3, r3
 80079c4:	61fb      	str	r3, [r7, #28]
  return result;
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80079d0:	2320      	movs	r3, #32
 80079d2:	e003      	b.n	80079dc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	fab3 f383 	clz	r3, r3
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	fa01 f303 	lsl.w	r3, r1, r3
 80079e4:	431a      	orrs	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	601a      	str	r2, [r3, #0]
}
 80079ea:	bf00      	nop
 80079ec:	372c      	adds	r7, #44	; 0x2c
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b085      	sub	sp, #20
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	401a      	ands	r2, r3
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	6879      	ldr	r1, [r7, #4]
 8007a10:	fb01 f303 	mul.w	r3, r1, r3
 8007a14:	431a      	orrs	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	605a      	str	r2, [r3, #4]
}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b08b      	sub	sp, #44	; 0x2c
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	fa93 f3a3 	rbit	r3, r3
 8007a40:	613b      	str	r3, [r7, #16]
  return result;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007a4c:	2320      	movs	r3, #32
 8007a4e:	e003      	b.n	8007a58 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	fab3 f383 	clz	r3, r3
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	2103      	movs	r1, #3
 8007a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a60:	43db      	mvns	r3, r3
 8007a62:	401a      	ands	r2, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	fa93 f3a3 	rbit	r3, r3
 8007a6e:	61fb      	str	r3, [r7, #28]
  return result;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007a7a:	2320      	movs	r3, #32
 8007a7c:	e003      	b.n	8007a86 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	fab3 f383 	clz	r3, r3
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007a94:	bf00      	nop
 8007a96:	372c      	adds	r7, #44	; 0x2c
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b08b      	sub	sp, #44	; 0x2c
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	fa93 f3a3 	rbit	r3, r3
 8007aba:	613b      	str	r3, [r7, #16]
  return result;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007ac6:	2320      	movs	r3, #32
 8007ac8:	e003      	b.n	8007ad2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	fab3 f383 	clz	r3, r3
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	2103      	movs	r1, #3
 8007ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8007ada:	43db      	mvns	r3, r3
 8007adc:	401a      	ands	r2, r3
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	fa93 f3a3 	rbit	r3, r3
 8007ae8:	61fb      	str	r3, [r7, #28]
  return result;
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007af4:	2320      	movs	r3, #32
 8007af6:	e003      	b.n	8007b00 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	fab3 f383 	clz	r3, r3
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	fa01 f303 	lsl.w	r3, r1, r3
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	60da      	str	r2, [r3, #12]
}
 8007b0e:	bf00      	nop
 8007b10:	372c      	adds	r7, #44	; 0x2c
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b08b      	sub	sp, #44	; 0x2c
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a1a      	ldr	r2, [r3, #32]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	fa93 f3a3 	rbit	r3, r3
 8007b34:	613b      	str	r3, [r7, #16]
  return result;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007b40:	2320      	movs	r3, #32
 8007b42:	e003      	b.n	8007b4c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	fab3 f383 	clz	r3, r3
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	210f      	movs	r1, #15
 8007b50:	fa01 f303 	lsl.w	r3, r1, r3
 8007b54:	43db      	mvns	r3, r3
 8007b56:	401a      	ands	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	fa93 f3a3 	rbit	r3, r3
 8007b62:	61fb      	str	r3, [r7, #28]
  return result;
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007b6e:	2320      	movs	r3, #32
 8007b70:	e003      	b.n	8007b7a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	fab3 f383 	clz	r3, r3
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	6879      	ldr	r1, [r7, #4]
 8007b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b82:	431a      	orrs	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007b88:	bf00      	nop
 8007b8a:	372c      	adds	r7, #44	; 0x2c
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b08b      	sub	sp, #44	; 0x2c
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	0a1b      	lsrs	r3, r3, #8
 8007ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	fa93 f3a3 	rbit	r3, r3
 8007bb0:	613b      	str	r3, [r7, #16]
  return result;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007bbc:	2320      	movs	r3, #32
 8007bbe:	e003      	b.n	8007bc8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	fab3 f383 	clz	r3, r3
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	210f      	movs	r1, #15
 8007bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	fa93 f3a3 	rbit	r3, r3
 8007be0:	61fb      	str	r3, [r7, #28]
  return result;
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007bec:	2320      	movs	r3, #32
 8007bee:	e003      	b.n	8007bf8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	fab3 f383 	clz	r3, r3
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8007c00:	431a      	orrs	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8007c06:	bf00      	nop
 8007c08:	372c      	adds	r7, #44	; 0x2c
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b088      	sub	sp, #32
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	fa93 f3a3 	rbit	r3, r3
 8007c28:	60fb      	str	r3, [r7, #12]
  return result;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <LL_GPIO_Init+0x26>
    return 32U;
 8007c34:	2320      	movs	r3, #32
 8007c36:	e003      	b.n	8007c40 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	fab3 f383 	clz	r3, r3
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8007c42:	e040      	b.n	8007cc6 <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	2101      	movs	r1, #1
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c50:	4013      	ands	r3, r2
 8007c52:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d032      	beq.n	8007cc0 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	69b9      	ldr	r1, [r7, #24]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff fe8a 	bl	800797c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d003      	beq.n	8007c78 <LL_GPIO_Init+0x66>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d106      	bne.n	8007c86 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	69b9      	ldr	r1, [r7, #24]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff fed0 	bl	8007a26 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	69b9      	ldr	r1, [r7, #24]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff ff06 	bl	8007aa0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d111      	bne.n	8007cc0 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	2bff      	cmp	r3, #255	; 0xff
 8007ca0:	d807      	bhi.n	8007cb2 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	69b9      	ldr	r1, [r7, #24]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff ff35 	bl	8007b1a <LL_GPIO_SetAFPin_0_7>
 8007cb0:	e006      	b.n	8007cc0 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	69b9      	ldr	r1, [r7, #24]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7ff ff6a 	bl	8007b94 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1b7      	bne.n	8007c44 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d003      	beq.n	8007ce4 <LL_GPIO_Init+0xd2>
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d107      	bne.n	8007cf4 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	6819      	ldr	r1, [r3, #0]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	461a      	mov	r2, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff fe81 	bl	80079f6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3720      	adds	r7, #32
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8007d04:	4b07      	ldr	r3, [pc, #28]	; (8007d24 <LL_RCC_HSI_IsReady+0x24>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d10:	d101      	bne.n	8007d16 <LL_RCC_HSI_IsReady+0x16>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e000      	b.n	8007d18 <LL_RCC_HSI_IsReady+0x18>
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	40021000 	.word	0x40021000

08007d28 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8007d2c:	4b07      	ldr	r3, [pc, #28]	; (8007d4c <LL_RCC_LSE_IsReady+0x24>)
 8007d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d101      	bne.n	8007d3e <LL_RCC_LSE_IsReady+0x16>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <LL_RCC_LSE_IsReady+0x18>
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	40021000 	.word	0x40021000

08007d50 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8007d54:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0308 	and.w	r3, r3, #8
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d101      	bne.n	8007d64 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	40021000 	.word	0x40021000

08007d74 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007d78:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <LL_RCC_MSI_GetRange+0x18>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40021000 	.word	0x40021000

08007d90 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007d94:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8007d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d9a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	40021000 	.word	0x40021000

08007dac <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <LL_RCC_GetSysClkSource+0x18>)
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f003 030c 	and.w	r3, r3, #12
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	40021000 	.word	0x40021000

08007dc8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007dcc:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <LL_RCC_GetAHBPrescaler+0x18>)
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	40021000 	.word	0x40021000

08007de4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007de8:	4b04      	ldr	r3, [pc, #16]	; (8007dfc <LL_RCC_GetAPB1Prescaler+0x18>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40021000 	.word	0x40021000

08007e00 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007e04:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <LL_RCC_GetAPB2Prescaler+0x18>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40021000 	.word	0x40021000

08007e1c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8007e24:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <LL_RCC_GetUSARTClockSource+0x24>)
 8007e26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	401a      	ands	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	041b      	lsls	r3, r3, #16
 8007e32:	4313      	orrs	r3, r2
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	40021000 	.word	0x40021000

08007e44 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <LL_RCC_GetUARTClockSource+0x24>)
 8007e4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	401a      	ands	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	041b      	lsls	r3, r3, #16
 8007e5a:	4313      	orrs	r3, r2
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	40021000 	.word	0x40021000

08007e6c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007e70:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <LL_RCC_PLL_GetMainSource+0x18>)
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0303 	and.w	r3, r3, #3
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	40021000 	.word	0x40021000

08007e88 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007e8c:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <LL_RCC_PLL_GetN+0x18>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	0a1b      	lsrs	r3, r3, #8
 8007e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	40021000 	.word	0x40021000

08007ea4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007ea8:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <LL_RCC_PLL_GetR+0x18>)
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	40021000 	.word	0x40021000

08007ec0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007ec4:	4b04      	ldr	r3, [pc, #16]	; (8007ed8 <LL_RCC_PLL_GetDivider+0x18>)
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40021000 	.word	0x40021000

08007edc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d137      	bne.n	8007f5e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff ff94 	bl	8007e1c <LL_RCC_GetUSARTClockSource>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	f200 80b2 	bhi.w	8008064 <LL_RCC_GetUSARTClockFreq+0x188>
 8007f00:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8007f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f06:	bf00      	nop
 8007f08:	08007f47 	.word	0x08007f47
 8007f0c:	08007f19 	.word	0x08007f19
 8007f10:	08007f21 	.word	0x08007f21
 8007f14:	08007f33 	.word	0x08007f33
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8007f18:	f000 f910 	bl	800813c <RCC_GetSystemClockFreq>
 8007f1c:	60f8      	str	r0, [r7, #12]
        break;
 8007f1e:	e0b2      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8007f20:	f7ff feee 	bl	8007d00 <LL_RCC_HSI_IsReady>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 809e 	beq.w	8008068 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8007f2c:	4b58      	ldr	r3, [pc, #352]	; (8008090 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8007f2e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007f30:	e09a      	b.n	8008068 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8007f32:	f7ff fef9 	bl	8007d28 <LL_RCC_LSE_IsReady>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 8097 	beq.w	800806c <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8007f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f42:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007f44:	e092      	b.n	800806c <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8007f46:	f000 f8f9 	bl	800813c <RCC_GetSystemClockFreq>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 f985 	bl	800825c <RCC_GetHCLKClockFreq>
 8007f52:	4603      	mov	r3, r0
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 f9ab 	bl	80082b0 <RCC_GetPCLK2ClockFreq>
 8007f5a:	60f8      	str	r0, [r7, #12]
        break;
 8007f5c:	e093      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b0c      	cmp	r3, #12
 8007f62:	d146      	bne.n	8007ff2 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff ff59 	bl	8007e1c <LL_RCC_GetUSARTClockSource>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007f70:	2b0c      	cmp	r3, #12
 8007f72:	d87d      	bhi.n	8008070 <LL_RCC_GetUSARTClockFreq+0x194>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <LL_RCC_GetUSARTClockFreq+0xa0>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fdb 	.word	0x08007fdb
 8007f80:	08008071 	.word	0x08008071
 8007f84:	08008071 	.word	0x08008071
 8007f88:	08008071 	.word	0x08008071
 8007f8c:	08007fb1 	.word	0x08007fb1
 8007f90:	08008071 	.word	0x08008071
 8007f94:	08008071 	.word	0x08008071
 8007f98:	08008071 	.word	0x08008071
 8007f9c:	08007fb9 	.word	0x08007fb9
 8007fa0:	08008071 	.word	0x08008071
 8007fa4:	08008071 	.word	0x08008071
 8007fa8:	08008071 	.word	0x08008071
 8007fac:	08007fc9 	.word	0x08007fc9
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8007fb0:	f000 f8c4 	bl	800813c <RCC_GetSystemClockFreq>
 8007fb4:	60f8      	str	r0, [r7, #12]
        break;
 8007fb6:	e066      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8007fb8:	f7ff fea2 	bl	8007d00 <LL_RCC_HSI_IsReady>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d058      	beq.n	8008074 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 8007fc2:	4b33      	ldr	r3, [pc, #204]	; (8008090 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8007fc4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007fc6:	e055      	b.n	8008074 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8007fc8:	f7ff feae 	bl	8007d28 <LL_RCC_LSE_IsReady>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d052      	beq.n	8008078 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 8007fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fd6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007fd8:	e04e      	b.n	8008078 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8007fda:	f000 f8af 	bl	800813c <RCC_GetSystemClockFreq>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 f93b 	bl	800825c <RCC_GetHCLKClockFreq>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 f94d 	bl	8008288 <RCC_GetPCLK1ClockFreq>
 8007fee:	60f8      	str	r0, [r7, #12]
        break;
 8007ff0:	e049      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b30      	cmp	r3, #48	; 0x30
 8007ff6:	d141      	bne.n	800807c <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff ff0f 	bl	8007e1c <LL_RCC_GetUSARTClockSource>
 8007ffe:	4603      	mov	r3, r0
 8008000:	4a24      	ldr	r2, [pc, #144]	; (8008094 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00d      	beq.n	8008022 <LL_RCC_GetUSARTClockFreq+0x146>
 8008006:	4a23      	ldr	r2, [pc, #140]	; (8008094 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d803      	bhi.n	8008014 <LL_RCC_GetUSARTClockFreq+0x138>
 800800c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008010:	d01c      	beq.n	800804c <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 8008012:	e038      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008014:	4a20      	ldr	r2, [pc, #128]	; (8008098 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d007      	beq.n	800802a <LL_RCC_GetUSARTClockFreq+0x14e>
 800801a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800801e:	d00c      	beq.n	800803a <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8008020:	e031      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 8008022:	f000 f88b 	bl	800813c <RCC_GetSystemClockFreq>
 8008026:	60f8      	str	r0, [r7, #12]
          break;
 8008028:	e02d      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 800802a:	f7ff fe69 	bl	8007d00 <LL_RCC_HSI_IsReady>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d025      	beq.n	8008080 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 8008034:	4b16      	ldr	r3, [pc, #88]	; (8008090 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8008036:	60fb      	str	r3, [r7, #12]
          break;
 8008038:	e022      	b.n	8008080 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 800803a:	f7ff fe75 	bl	8007d28 <LL_RCC_LSE_IsReady>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01f      	beq.n	8008084 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8008044:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008048:	60fb      	str	r3, [r7, #12]
          break;
 800804a:	e01b      	b.n	8008084 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800804c:	f000 f876 	bl	800813c <RCC_GetSystemClockFreq>
 8008050:	4603      	mov	r3, r0
 8008052:	4618      	mov	r0, r3
 8008054:	f000 f902 	bl	800825c <RCC_GetHCLKClockFreq>
 8008058:	4603      	mov	r3, r0
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f914 	bl	8008288 <RCC_GetPCLK1ClockFreq>
 8008060:	60f8      	str	r0, [r7, #12]
          break;
 8008062:	e010      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8008064:	bf00      	nop
 8008066:	e00e      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8008068:	bf00      	nop
 800806a:	e00c      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800806c:	bf00      	nop
 800806e:	e00a      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8008070:	bf00      	nop
 8008072:	e008      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8008074:	bf00      	nop
 8008076:	e006      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8008078:	bf00      	nop
 800807a:	e004      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 800807c:	bf00      	nop
 800807e:	e002      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8008080:	bf00      	nop
 8008082:	e000      	b.n	8008086 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8008084:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8008086:	68fb      	ldr	r3, [r7, #12]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	00f42400 	.word	0x00f42400
 8008094:	00300010 	.word	0x00300010
 8008098:	00300020 	.word	0x00300020

0800809c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2bc0      	cmp	r3, #192	; 0xc0
 80080ac:	d135      	bne.n	800811a <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff fec8 	bl	8007e44 <LL_RCC_GetUARTClockSource>
 80080b4:	4603      	mov	r3, r0
 80080b6:	4a1e      	ldr	r2, [pc, #120]	; (8008130 <LL_RCC_GetUARTClockFreq+0x94>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00d      	beq.n	80080d8 <LL_RCC_GetUARTClockFreq+0x3c>
 80080bc:	4a1c      	ldr	r2, [pc, #112]	; (8008130 <LL_RCC_GetUARTClockFreq+0x94>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d803      	bhi.n	80080ca <LL_RCC_GetUARTClockFreq+0x2e>
 80080c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080c6:	d01c      	beq.n	8008102 <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 80080c8:	e02c      	b.n	8008124 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80080ca:	4a1a      	ldr	r2, [pc, #104]	; (8008134 <LL_RCC_GetUARTClockFreq+0x98>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d007      	beq.n	80080e0 <LL_RCC_GetUARTClockFreq+0x44>
 80080d0:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80080d4:	d00c      	beq.n	80080f0 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 80080d6:	e025      	b.n	8008124 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 80080d8:	f000 f830 	bl	800813c <RCC_GetSystemClockFreq>
 80080dc:	60f8      	str	r0, [r7, #12]
        break;
 80080de:	e021      	b.n	8008124 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 80080e0:	f7ff fe0e 	bl	8007d00 <LL_RCC_HSI_IsReady>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d019      	beq.n	800811e <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 80080ea:	4b13      	ldr	r3, [pc, #76]	; (8008138 <LL_RCC_GetUARTClockFreq+0x9c>)
 80080ec:	60fb      	str	r3, [r7, #12]
        break;
 80080ee:	e016      	b.n	800811e <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 80080f0:	f7ff fe1a 	bl	8007d28 <LL_RCC_LSE_IsReady>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d013      	beq.n	8008122 <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 80080fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080fe:	60fb      	str	r3, [r7, #12]
        break;
 8008100:	e00f      	b.n	8008122 <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008102:	f000 f81b 	bl	800813c <RCC_GetSystemClockFreq>
 8008106:	4603      	mov	r3, r0
 8008108:	4618      	mov	r0, r3
 800810a:	f000 f8a7 	bl	800825c <RCC_GetHCLKClockFreq>
 800810e:	4603      	mov	r3, r0
 8008110:	4618      	mov	r0, r3
 8008112:	f000 f8b9 	bl	8008288 <RCC_GetPCLK1ClockFreq>
 8008116:	60f8      	str	r0, [r7, #12]
        break;
 8008118:	e004      	b.n	8008124 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 800811a:	bf00      	nop
 800811c:	e002      	b.n	8008124 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 800811e:	bf00      	nop
 8008120:	e000      	b.n	8008124 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8008122:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8008124:	68fb      	ldr	r3, [r7, #12]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	00c00040 	.word	0x00c00040
 8008134:	00c00080 	.word	0x00c00080
 8008138:	00f42400 	.word	0x00f42400

0800813c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8008142:	f7ff fe33 	bl	8007dac <LL_RCC_GetSysClkSource>
 8008146:	4603      	mov	r3, r0
 8008148:	2b0c      	cmp	r3, #12
 800814a:	d851      	bhi.n	80081f0 <RCC_GetSystemClockFreq+0xb4>
 800814c:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <RCC_GetSystemClockFreq+0x18>)
 800814e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008152:	bf00      	nop
 8008154:	08008189 	.word	0x08008189
 8008158:	080081f1 	.word	0x080081f1
 800815c:	080081f1 	.word	0x080081f1
 8008160:	080081f1 	.word	0x080081f1
 8008164:	080081dd 	.word	0x080081dd
 8008168:	080081f1 	.word	0x080081f1
 800816c:	080081f1 	.word	0x080081f1
 8008170:	080081f1 	.word	0x080081f1
 8008174:	080081e3 	.word	0x080081e3
 8008178:	080081f1 	.word	0x080081f1
 800817c:	080081f1 	.word	0x080081f1
 8008180:	080081f1 	.word	0x080081f1
 8008184:	080081e9 	.word	0x080081e9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008188:	f7ff fde2 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d111      	bne.n	80081b6 <RCC_GetSystemClockFreq+0x7a>
 8008192:	f7ff fddd 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d004      	beq.n	80081a6 <RCC_GetSystemClockFreq+0x6a>
 800819c:	f7ff fdea 	bl	8007d74 <LL_RCC_MSI_GetRange>
 80081a0:	4603      	mov	r3, r0
 80081a2:	0a1b      	lsrs	r3, r3, #8
 80081a4:	e003      	b.n	80081ae <RCC_GetSystemClockFreq+0x72>
 80081a6:	f7ff fdf3 	bl	8007d90 <LL_RCC_MSI_GetRangeAfterStandby>
 80081aa:	4603      	mov	r3, r0
 80081ac:	0a1b      	lsrs	r3, r3, #8
 80081ae:	4a28      	ldr	r2, [pc, #160]	; (8008250 <RCC_GetSystemClockFreq+0x114>)
 80081b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b4:	e010      	b.n	80081d8 <RCC_GetSystemClockFreq+0x9c>
 80081b6:	f7ff fdcb 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d004      	beq.n	80081ca <RCC_GetSystemClockFreq+0x8e>
 80081c0:	f7ff fdd8 	bl	8007d74 <LL_RCC_MSI_GetRange>
 80081c4:	4603      	mov	r3, r0
 80081c6:	091b      	lsrs	r3, r3, #4
 80081c8:	e003      	b.n	80081d2 <RCC_GetSystemClockFreq+0x96>
 80081ca:	f7ff fde1 	bl	8007d90 <LL_RCC_MSI_GetRangeAfterStandby>
 80081ce:	4603      	mov	r3, r0
 80081d0:	091b      	lsrs	r3, r3, #4
 80081d2:	4a1f      	ldr	r2, [pc, #124]	; (8008250 <RCC_GetSystemClockFreq+0x114>)
 80081d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081d8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80081da:	e033      	b.n	8008244 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80081dc:	4b1d      	ldr	r3, [pc, #116]	; (8008254 <RCC_GetSystemClockFreq+0x118>)
 80081de:	607b      	str	r3, [r7, #4]
      break;
 80081e0:	e030      	b.n	8008244 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80081e2:	4b1d      	ldr	r3, [pc, #116]	; (8008258 <RCC_GetSystemClockFreq+0x11c>)
 80081e4:	607b      	str	r3, [r7, #4]
      break;
 80081e6:	e02d      	b.n	8008244 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80081e8:	f000 f876 	bl	80082d8 <RCC_PLL_GetFreqDomain_SYS>
 80081ec:	6078      	str	r0, [r7, #4]
      break;
 80081ee:	e029      	b.n	8008244 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80081f0:	f7ff fdae 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d111      	bne.n	800821e <RCC_GetSystemClockFreq+0xe2>
 80081fa:	f7ff fda9 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <RCC_GetSystemClockFreq+0xd2>
 8008204:	f7ff fdb6 	bl	8007d74 <LL_RCC_MSI_GetRange>
 8008208:	4603      	mov	r3, r0
 800820a:	0a1b      	lsrs	r3, r3, #8
 800820c:	e003      	b.n	8008216 <RCC_GetSystemClockFreq+0xda>
 800820e:	f7ff fdbf 	bl	8007d90 <LL_RCC_MSI_GetRangeAfterStandby>
 8008212:	4603      	mov	r3, r0
 8008214:	0a1b      	lsrs	r3, r3, #8
 8008216:	4a0e      	ldr	r2, [pc, #56]	; (8008250 <RCC_GetSystemClockFreq+0x114>)
 8008218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800821c:	e010      	b.n	8008240 <RCC_GetSystemClockFreq+0x104>
 800821e:	f7ff fd97 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d004      	beq.n	8008232 <RCC_GetSystemClockFreq+0xf6>
 8008228:	f7ff fda4 	bl	8007d74 <LL_RCC_MSI_GetRange>
 800822c:	4603      	mov	r3, r0
 800822e:	091b      	lsrs	r3, r3, #4
 8008230:	e003      	b.n	800823a <RCC_GetSystemClockFreq+0xfe>
 8008232:	f7ff fdad 	bl	8007d90 <LL_RCC_MSI_GetRangeAfterStandby>
 8008236:	4603      	mov	r3, r0
 8008238:	091b      	lsrs	r3, r3, #4
 800823a:	4a05      	ldr	r2, [pc, #20]	; (8008250 <RCC_GetSystemClockFreq+0x114>)
 800823c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008240:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8008242:	bf00      	nop
  }

  return frequency;
 8008244:	687b      	ldr	r3, [r7, #4]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	080101b8 	.word	0x080101b8
 8008254:	00f42400 	.word	0x00f42400
 8008258:	007a1200 	.word	0x007a1200

0800825c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8008264:	f7ff fdb0 	bl	8007dc8 <LL_RCC_GetAHBPrescaler>
 8008268:	4603      	mov	r3, r0
 800826a:	091b      	lsrs	r3, r3, #4
 800826c:	f003 030f 	and.w	r3, r3, #15
 8008270:	4a04      	ldr	r2, [pc, #16]	; (8008284 <RCC_GetHCLKClockFreq+0x28>)
 8008272:	5cd3      	ldrb	r3, [r2, r3]
 8008274:	461a      	mov	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	40d3      	lsrs	r3, r2
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	080101a0 	.word	0x080101a0

08008288 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8008290:	f7ff fda8 	bl	8007de4 <LL_RCC_GetAPB1Prescaler>
 8008294:	4603      	mov	r3, r0
 8008296:	0a1b      	lsrs	r3, r3, #8
 8008298:	4a04      	ldr	r2, [pc, #16]	; (80082ac <RCC_GetPCLK1ClockFreq+0x24>)
 800829a:	5cd3      	ldrb	r3, [r2, r3]
 800829c:	461a      	mov	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	40d3      	lsrs	r3, r2
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	080101b0 	.word	0x080101b0

080082b0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80082b8:	f7ff fda2 	bl	8007e00 <LL_RCC_GetAPB2Prescaler>
 80082bc:	4603      	mov	r3, r0
 80082be:	0adb      	lsrs	r3, r3, #11
 80082c0:	4a04      	ldr	r2, [pc, #16]	; (80082d4 <RCC_GetPCLK2ClockFreq+0x24>)
 80082c2:	5cd3      	ldrb	r3, [r2, r3]
 80082c4:	461a      	mov	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	40d3      	lsrs	r3, r2
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	080101b0 	.word	0x080101b0

080082d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80082d8:	b590      	push	{r4, r7, lr}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80082de:	f7ff fdc5 	bl	8007e6c <LL_RCC_PLL_GetMainSource>
 80082e2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d02d      	beq.n	8008346 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d02e      	beq.n	800834c <RCC_PLL_GetFreqDomain_SYS+0x74>
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d12f      	bne.n	8008352 <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80082f2:	f7ff fd2d 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d111      	bne.n	8008320 <RCC_PLL_GetFreqDomain_SYS+0x48>
 80082fc:	f7ff fd28 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d004      	beq.n	8008310 <RCC_PLL_GetFreqDomain_SYS+0x38>
 8008306:	f7ff fd35 	bl	8007d74 <LL_RCC_MSI_GetRange>
 800830a:	4603      	mov	r3, r0
 800830c:	0a1b      	lsrs	r3, r3, #8
 800830e:	e003      	b.n	8008318 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8008310:	f7ff fd3e 	bl	8007d90 <LL_RCC_MSI_GetRangeAfterStandby>
 8008314:	4603      	mov	r3, r0
 8008316:	0a1b      	lsrs	r3, r3, #8
 8008318:	4a2f      	ldr	r2, [pc, #188]	; (80083d8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800831a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800831e:	e010      	b.n	8008342 <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8008320:	f7ff fd16 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d004      	beq.n	8008334 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 800832a:	f7ff fd23 	bl	8007d74 <LL_RCC_MSI_GetRange>
 800832e:	4603      	mov	r3, r0
 8008330:	091b      	lsrs	r3, r3, #4
 8008332:	e003      	b.n	800833c <RCC_PLL_GetFreqDomain_SYS+0x64>
 8008334:	f7ff fd2c 	bl	8007d90 <LL_RCC_MSI_GetRangeAfterStandby>
 8008338:	4603      	mov	r3, r0
 800833a:	091b      	lsrs	r3, r3, #4
 800833c:	4a26      	ldr	r2, [pc, #152]	; (80083d8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800833e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008342:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8008344:	e02f      	b.n	80083a6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8008346:	4b25      	ldr	r3, [pc, #148]	; (80083dc <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8008348:	607b      	str	r3, [r7, #4]
      break;
 800834a:	e02c      	b.n	80083a6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800834c:	4b24      	ldr	r3, [pc, #144]	; (80083e0 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 800834e:	607b      	str	r3, [r7, #4]
      break;
 8008350:	e029      	b.n	80083a6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008352:	f7ff fcfd 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d111      	bne.n	8008380 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 800835c:	f7ff fcf8 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d004      	beq.n	8008370 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8008366:	f7ff fd05 	bl	8007d74 <LL_RCC_MSI_GetRange>
 800836a:	4603      	mov	r3, r0
 800836c:	0a1b      	lsrs	r3, r3, #8
 800836e:	e003      	b.n	8008378 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8008370:	f7ff fd0e 	bl	8007d90 <LL_RCC_MSI_GetRangeAfterStandby>
 8008374:	4603      	mov	r3, r0
 8008376:	0a1b      	lsrs	r3, r3, #8
 8008378:	4a17      	ldr	r2, [pc, #92]	; (80083d8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800837a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800837e:	e010      	b.n	80083a2 <RCC_PLL_GetFreqDomain_SYS+0xca>
 8008380:	f7ff fce6 	bl	8007d50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d004      	beq.n	8008394 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 800838a:	f7ff fcf3 	bl	8007d74 <LL_RCC_MSI_GetRange>
 800838e:	4603      	mov	r3, r0
 8008390:	091b      	lsrs	r3, r3, #4
 8008392:	e003      	b.n	800839c <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8008394:	f7ff fcfc 	bl	8007d90 <LL_RCC_MSI_GetRangeAfterStandby>
 8008398:	4603      	mov	r3, r0
 800839a:	091b      	lsrs	r3, r3, #4
 800839c:	4a0e      	ldr	r2, [pc, #56]	; (80083d8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800839e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80083a4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80083a6:	f7ff fd8b 	bl	8007ec0 <LL_RCC_PLL_GetDivider>
 80083aa:	4603      	mov	r3, r0
 80083ac:	091b      	lsrs	r3, r3, #4
 80083ae:	3301      	adds	r3, #1
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	fbb2 f4f3 	udiv	r4, r2, r3
 80083b6:	f7ff fd67 	bl	8007e88 <LL_RCC_PLL_GetN>
 80083ba:	4603      	mov	r3, r0
 80083bc:	fb03 f404 	mul.w	r4, r3, r4
 80083c0:	f7ff fd70 	bl	8007ea4 <LL_RCC_PLL_GetR>
 80083c4:	4603      	mov	r3, r0
 80083c6:	0e5b      	lsrs	r3, r3, #25
 80083c8:	3301      	adds	r3, #1
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd90      	pop	{r4, r7, pc}
 80083d8:	080101b8 	.word	0x080101b8
 80083dc:	00f42400 	.word	0x00f42400
 80083e0:	007a1200 	.word	0x007a1200

080083e4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80083e4:	b084      	sub	sp, #16
 80083e6:	b480      	push	{r7}
 80083e8:	b085      	sub	sp, #20
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	f107 001c 	add.w	r0, r7, #28
 80083f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	4313      	orrs	r3, r2
 8008400:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008402:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8008406:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800840a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800840e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008412:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008422:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	431a      	orrs	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	b004      	add	sp, #16
 800843c:	4770      	bx	lr

0800843e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2203      	movs	r2, #3
 8008486:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008488:	2002      	movs	r0, #2
 800848a:	f7f7 ff75 	bl	8000378 <HAL_Delay>

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0303 	and.w	r3, r3, #3
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084be:	2300      	movs	r3, #0
 80084c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80084d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80084de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80084ee:	f023 030f 	bic.w	r3, r3, #15
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	b2db      	uxtb	r3, r3
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3314      	adds	r3, #20
 8008530:	461a      	mov	r2, r3
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	4413      	add	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800856e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008574:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800857a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008592:	2300      	movs	r3, #0

}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80085ae:	2310      	movs	r3, #16
 80085b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085b2:	2340      	movs	r3, #64	; 0x40
 80085b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085c0:	f107 0308 	add.w	r3, r7, #8
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7ff ff74 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80085cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d0:	2110      	movs	r1, #16
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fa18 	bl	8008a08 <SDMMC_GetCmdResp1>
 80085d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085da:	69fb      	ldr	r3, [r7, #28]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80085f2:	2311      	movs	r3, #17
 80085f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085f6:	2340      	movs	r3, #64	; 0x40
 80085f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085fa:	2300      	movs	r3, #0
 80085fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008602:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008604:	f107 0308 	add.w	r3, r7, #8
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff ff52 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008610:	f241 3288 	movw	r2, #5000	; 0x1388
 8008614:	2111      	movs	r1, #17
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f9f6 	bl	8008a08 <SDMMC_GetCmdResp1>
 800861c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800861e:	69fb      	ldr	r3, [r7, #28]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008636:	2312      	movs	r3, #18
 8008638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800863a:	2340      	movs	r3, #64	; 0x40
 800863c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800863e:	2300      	movs	r3, #0
 8008640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008646:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008648:	f107 0308 	add.w	r3, r7, #8
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7ff ff30 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008654:	f241 3288 	movw	r2, #5000	; 0x1388
 8008658:	2112      	movs	r1, #18
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f9d4 	bl	8008a08 <SDMMC_GetCmdResp1>
 8008660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008662:	69fb      	ldr	r3, [r7, #28]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3720      	adds	r7, #32
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800867a:	2318      	movs	r3, #24
 800867c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800867e:	2340      	movs	r3, #64	; 0x40
 8008680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008682:	2300      	movs	r3, #0
 8008684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800868c:	f107 0308 	add.w	r3, r7, #8
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7ff ff0e 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008698:	f241 3288 	movw	r2, #5000	; 0x1388
 800869c:	2118      	movs	r1, #24
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9b2 	bl	8008a08 <SDMMC_GetCmdResp1>
 80086a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086a6:	69fb      	ldr	r3, [r7, #28]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3720      	adds	r7, #32
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80086be:	2319      	movs	r3, #25
 80086c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086c2:	2340      	movs	r3, #64	; 0x40
 80086c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086d0:	f107 0308 	add.w	r3, r7, #8
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff feec 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80086dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80086e0:	2119      	movs	r1, #25
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f990 	bl	8008a08 <SDMMC_GetCmdResp1>
 80086e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086ea:	69fb      	ldr	r3, [r7, #28]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3720      	adds	r7, #32
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008700:	230c      	movs	r3, #12
 8008702:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008704:	2340      	movs	r3, #64	; 0x40
 8008706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008708:	2300      	movs	r3, #0
 800870a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800870c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008710:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008712:	f107 0308 	add.w	r3, r7, #8
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff fecb 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800871e:	4a05      	ldr	r2, [pc, #20]	; (8008734 <SDMMC_CmdStopTransfer+0x40>)
 8008720:	210c      	movs	r1, #12
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f970 	bl	8008a08 <SDMMC_GetCmdResp1>
 8008728:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800872a:	69fb      	ldr	r3, [r7, #28]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	05f5e100 	.word	0x05f5e100

08008738 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08a      	sub	sp, #40	; 0x28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008748:	2307      	movs	r3, #7
 800874a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800874c:	2340      	movs	r3, #64	; 0x40
 800874e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008750:	2300      	movs	r3, #0
 8008752:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008758:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800875a:	f107 0310 	add.w	r3, r7, #16
 800875e:	4619      	mov	r1, r3
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f7ff fea7 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008766:	f241 3288 	movw	r2, #5000	; 0x1388
 800876a:	2107      	movs	r1, #7
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 f94b 	bl	8008a08 <SDMMC_GetCmdResp1>
 8008772:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008776:	4618      	mov	r0, r3
 8008778:	3728      	adds	r7, #40	; 0x28
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b088      	sub	sp, #32
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800878e:	2300      	movs	r3, #0
 8008790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800879a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800879c:	f107 0308 	add.w	r3, r7, #8
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff fe86 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fb65 	bl	8008e78 <SDMMC_GetCmdError>
 80087ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087b0:	69fb      	ldr	r3, [r7, #28]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3720      	adds	r7, #32
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b088      	sub	sp, #32
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80087c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80087c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80087c8:	2308      	movs	r3, #8
 80087ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087cc:	2340      	movs	r3, #64	; 0x40
 80087ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087da:	f107 0308 	add.w	r3, r7, #8
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff fe67 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 faf8 	bl	8008ddc <SDMMC_GetCmdResp7>
 80087ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087ee:	69fb      	ldr	r3, [r7, #28]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3720      	adds	r7, #32
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008806:	2337      	movs	r3, #55	; 0x37
 8008808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800880a:	2340      	movs	r3, #64	; 0x40
 800880c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800880e:	2300      	movs	r3, #0
 8008810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008816:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008818:	f107 0308 	add.w	r3, r7, #8
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff fe48 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008824:	f241 3288 	movw	r2, #5000	; 0x1388
 8008828:	2137      	movs	r1, #55	; 0x37
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f8ec 	bl	8008a08 <SDMMC_GetCmdResp1>
 8008830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008832:	69fb      	ldr	r3, [r7, #28]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3720      	adds	r7, #32
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800884c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008850:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008852:	2329      	movs	r3, #41	; 0x29
 8008854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008856:	2340      	movs	r3, #64	; 0x40
 8008858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800885a:	2300      	movs	r3, #0
 800885c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800885e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008862:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008864:	f107 0308 	add.w	r3, r7, #8
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7ff fe22 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f9ff 	bl	8008c74 <SDMMC_GetCmdResp3>
 8008876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008878:	69fb      	ldr	r3, [r7, #28]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3720      	adds	r7, #32
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b088      	sub	sp, #32
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008890:	2306      	movs	r3, #6
 8008892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008894:	2340      	movs	r3, #64	; 0x40
 8008896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008898:	2300      	movs	r3, #0
 800889a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800889c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088a2:	f107 0308 	add.w	r3, r7, #8
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff fe03 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80088ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b2:	2106      	movs	r1, #6
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f8a7 	bl	8008a08 <SDMMC_GetCmdResp1>
 80088ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088bc:	69fb      	ldr	r3, [r7, #28]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3720      	adds	r7, #32
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b088      	sub	sp, #32
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80088d2:	2333      	movs	r3, #51	; 0x33
 80088d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088d6:	2340      	movs	r3, #64	; 0x40
 80088d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088e4:	f107 0308 	add.w	r3, r7, #8
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7ff fde2 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80088f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f4:	2133      	movs	r1, #51	; 0x33
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f886 	bl	8008a08 <SDMMC_GetCmdResp1>
 80088fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088fe:	69fb      	ldr	r3, [r7, #28]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3720      	adds	r7, #32
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008914:	2302      	movs	r3, #2
 8008916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008918:	23c0      	movs	r3, #192	; 0xc0
 800891a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800891c:	2300      	movs	r3, #0
 800891e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008924:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff fdc1 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f956 	bl	8008be4 <SDMMC_GetCmdResp2>
 8008938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800893a:	69fb      	ldr	r3, [r7, #28]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3720      	adds	r7, #32
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008952:	2309      	movs	r3, #9
 8008954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008956:	23c0      	movs	r3, #192	; 0xc0
 8008958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800895a:	2300      	movs	r3, #0
 800895c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800895e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008964:	f107 0308 	add.w	r3, r7, #8
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff fda2 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f937 	bl	8008be4 <SDMMC_GetCmdResp2>
 8008976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008978:	69fb      	ldr	r3, [r7, #28]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3720      	adds	r7, #32
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b088      	sub	sp, #32
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008990:	2303      	movs	r3, #3
 8008992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008994:	2340      	movs	r3, #64	; 0x40
 8008996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008998:	2300      	movs	r3, #0
 800899a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800899c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089a2:	f107 0308 	add.w	r3, r7, #8
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7ff fd83 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	2103      	movs	r1, #3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f99c 	bl	8008cf0 <SDMMC_GetCmdResp6>
 80089b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089ba:	69fb      	ldr	r3, [r7, #28]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3720      	adds	r7, #32
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b088      	sub	sp, #32
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80089d2:	230d      	movs	r3, #13
 80089d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089d6:	2340      	movs	r3, #64	; 0x40
 80089d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089e4:	f107 0308 	add.w	r3, r7, #8
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff fd62 	bl	80084b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80089f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f4:	210d      	movs	r1, #13
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f806 	bl	8008a08 <SDMMC_GetCmdResp1>
 80089fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089fe:	69fb      	ldr	r3, [r7, #28]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3720      	adds	r7, #32
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	460b      	mov	r3, r1
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008a16:	4b70      	ldr	r3, [pc, #448]	; (8008bd8 <SDMMC_GetCmdResp1+0x1d0>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a70      	ldr	r2, [pc, #448]	; (8008bdc <SDMMC_GetCmdResp1+0x1d4>)
 8008a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a20:	0a5a      	lsrs	r2, r3, #9
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	fb02 f303 	mul.w	r3, r2, r3
 8008a28:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	1e5a      	subs	r2, r3, #1
 8008a2e:	61fa      	str	r2, [r7, #28]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a38:	e0c9      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0ef      	beq.n	8008a2a <SDMMC_GetCmdResp1+0x22>
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1ea      	bne.n	8008a2a <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d004      	beq.n	8008a6a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2204      	movs	r2, #4
 8008a64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a66:	2304      	movs	r3, #4
 8008a68:	e0b1      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d004      	beq.n	8008a80 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e0a6      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	22c5      	movs	r2, #197	; 0xc5
 8008a84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff fd3e 	bl	8008508 <SDMMC_GetCommandResponse>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	461a      	mov	r2, r3
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d001      	beq.n	8008a9a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e099      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f7ff fd40 	bl	8008522 <SDMMC_GetResponse>
 8008aa2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	4b4e      	ldr	r3, [pc, #312]	; (8008be0 <SDMMC_GetCmdResp1+0x1d8>)
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e08d      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	da02      	bge.n	8008abe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008abc:	e087      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008ac8:	2340      	movs	r3, #64	; 0x40
 8008aca:	e080      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008ad6:	2380      	movs	r3, #128	; 0x80
 8008ad8:	e079      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ae8:	e071      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008af8:	e069      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b08:	e061      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b18:	e059      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b28:	e051      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b38:	e049      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008b44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b48:	e041      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b58:	e039      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b68:	e031      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008b74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b78:	e029      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008b84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b88:	e021      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008b94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b98:	e019      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008ba4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ba8:	e011      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008bb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bb8:	e009      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f003 0308 	and.w	r3, r3, #8
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008bc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008bc8:	e001      	b.n	8008bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3720      	adds	r7, #32
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20000118 	.word	0x20000118
 8008bdc:	10624dd3 	.word	0x10624dd3
 8008be0:	fdffe008 	.word	0xfdffe008

08008be4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bec:	4b1f      	ldr	r3, [pc, #124]	; (8008c6c <SDMMC_GetCmdResp2+0x88>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a1f      	ldr	r2, [pc, #124]	; (8008c70 <SDMMC_GetCmdResp2+0x8c>)
 8008bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf6:	0a5b      	lsrs	r3, r3, #9
 8008bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bfc:	fb02 f303 	mul.w	r3, r2, r3
 8008c00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	1e5a      	subs	r2, r3, #1
 8008c06:	60fa      	str	r2, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d102      	bne.n	8008c12 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c10:	e026      	b.n	8008c60 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0ef      	beq.n	8008c02 <SDMMC_GetCmdResp2+0x1e>
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1ea      	bne.n	8008c02 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c30:	f003 0304 	and.w	r3, r3, #4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d004      	beq.n	8008c42 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2204      	movs	r2, #4
 8008c3c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c3e:	2304      	movs	r3, #4
 8008c40:	e00e      	b.n	8008c60 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d004      	beq.n	8008c58 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e003      	b.n	8008c60 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	22c5      	movs	r2, #197	; 0xc5
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	20000118 	.word	0x20000118
 8008c70:	10624dd3 	.word	0x10624dd3

08008c74 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ce8 <SDMMC_GetCmdResp3+0x74>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a1a      	ldr	r2, [pc, #104]	; (8008cec <SDMMC_GetCmdResp3+0x78>)
 8008c82:	fba2 2303 	umull	r2, r3, r2, r3
 8008c86:	0a5b      	lsrs	r3, r3, #9
 8008c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c8c:	fb02 f303 	mul.w	r3, r2, r3
 8008c90:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	1e5a      	subs	r2, r3, #1
 8008c96:	60fa      	str	r2, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ca0:	e01b      	b.n	8008cda <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0ef      	beq.n	8008c92 <SDMMC_GetCmdResp3+0x1e>
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1ea      	bne.n	8008c92 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d004      	beq.n	8008cd2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2204      	movs	r2, #4
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cce:	2304      	movs	r3, #4
 8008cd0:	e003      	b.n	8008cda <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	22c5      	movs	r2, #197	; 0xc5
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	20000118 	.word	0x20000118
 8008cec:	10624dd3 	.word	0x10624dd3

08008cf0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cfe:	4b35      	ldr	r3, [pc, #212]	; (8008dd4 <SDMMC_GetCmdResp6+0xe4>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a35      	ldr	r2, [pc, #212]	; (8008dd8 <SDMMC_GetCmdResp6+0xe8>)
 8008d04:	fba2 2303 	umull	r2, r3, r2, r3
 8008d08:	0a5b      	lsrs	r3, r3, #9
 8008d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d0e:	fb02 f303 	mul.w	r3, r2, r3
 8008d12:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	1e5a      	subs	r2, r3, #1
 8008d18:	61fa      	str	r2, [r7, #28]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d102      	bne.n	8008d24 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d22:	e052      	b.n	8008dca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d28:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d0ef      	beq.n	8008d14 <SDMMC_GetCmdResp6+0x24>
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1ea      	bne.n	8008d14 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d004      	beq.n	8008d54 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2204      	movs	r2, #4
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d50:	2304      	movs	r3, #4
 8008d52:	e03a      	b.n	8008dca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d004      	beq.n	8008d6a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2201      	movs	r2, #1
 8008d64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e02f      	b.n	8008dca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f7ff fbcc 	bl	8008508 <SDMMC_GetCommandResponse>
 8008d70:	4603      	mov	r3, r0
 8008d72:	461a      	mov	r2, r3
 8008d74:	7afb      	ldrb	r3, [r7, #11]
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d001      	beq.n	8008d7e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e025      	b.n	8008dca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	22c5      	movs	r2, #197	; 0xc5
 8008d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008d84:	2100      	movs	r1, #0
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f7ff fbcb 	bl	8008522 <SDMMC_GetResponse>
 8008d8c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d106      	bne.n	8008da6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	0c1b      	lsrs	r3, r3, #16
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	e011      	b.n	8008dca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008db4:	e009      	b.n	8008dca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dc4:	e001      	b.n	8008dca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000118 	.word	0x20000118
 8008dd8:	10624dd3 	.word	0x10624dd3

08008ddc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008de4:	4b22      	ldr	r3, [pc, #136]	; (8008e70 <SDMMC_GetCmdResp7+0x94>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a22      	ldr	r2, [pc, #136]	; (8008e74 <SDMMC_GetCmdResp7+0x98>)
 8008dea:	fba2 2303 	umull	r2, r3, r2, r3
 8008dee:	0a5b      	lsrs	r3, r3, #9
 8008df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df4:	fb02 f303 	mul.w	r3, r2, r3
 8008df8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	1e5a      	subs	r2, r3, #1
 8008dfe:	60fa      	str	r2, [r7, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d102      	bne.n	8008e0a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e08:	e02c      	b.n	8008e64 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0ef      	beq.n	8008dfa <SDMMC_GetCmdResp7+0x1e>
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1ea      	bne.n	8008dfa <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e28:	f003 0304 	and.w	r3, r3, #4
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d004      	beq.n	8008e3a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2204      	movs	r2, #4
 8008e34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e36:	2304      	movs	r3, #4
 8008e38:	e014      	b.n	8008e64 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d004      	beq.n	8008e50 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e009      	b.n	8008e64 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2240      	movs	r2, #64	; 0x40
 8008e60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e62:	2300      	movs	r3, #0

}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	20000118 	.word	0x20000118
 8008e74:	10624dd3 	.word	0x10624dd3

08008e78 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e80:	4b11      	ldr	r3, [pc, #68]	; (8008ec8 <SDMMC_GetCmdError+0x50>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a11      	ldr	r2, [pc, #68]	; (8008ecc <SDMMC_GetCmdError+0x54>)
 8008e86:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8a:	0a5b      	lsrs	r3, r3, #9
 8008e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e90:	fb02 f303 	mul.w	r3, r2, r3
 8008e94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	1e5a      	subs	r2, r3, #1
 8008e9a:	60fa      	str	r2, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d102      	bne.n	8008ea6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ea4:	e009      	b.n	8008eba <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0f1      	beq.n	8008e96 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	22c5      	movs	r2, #197	; 0xc5
 8008eb6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	20000118 	.word	0x20000118
 8008ecc:	10624dd3 	.word	0x10624dd3

08008ed0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d101      	bne.n	8008ee8 <LL_USART_IsEnabled+0x18>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e000      	b.n	8008eea <LL_USART_IsEnabled+0x1a>
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	605a      	str	r2, [r3, #4]
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	431a      	orrs	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	609a      	str	r2, [r3, #8]
}
 8008f36:	bf00      	nop
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8008f42:	b480      	push	{r7}
 8008f44:	b087      	sub	sp, #28
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	60b9      	str	r1, [r7, #8]
 8008f4c:	607a      	str	r2, [r7, #4]
 8008f4e:	603b      	str	r3, [r7, #0]
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f56:	d11a      	bne.n	8008f8e <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	005a      	lsls	r2, r3, #1
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	085b      	lsrs	r3, r3, #1
 8008f60:	441a      	add	r2, r3
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8008f72:	4013      	ands	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	085b      	lsrs	r3, r3, #1
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8008f8c:	e00a      	b.n	8008fa4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	085a      	lsrs	r2, r3, #1
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	441a      	add	r2, r3
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	60da      	str	r2, [r3, #12]
}
 8008fa4:	bf00      	nop
 8008fa6:	371c      	adds	r7, #28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff ff84 	bl	8008ed0 <LL_USART_IsEnabled>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d151      	bne.n	8009072 <LL_USART_Init+0xc2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	4b2a      	ldr	r3, [pc, #168]	; (800907c <LL_USART_Init+0xcc>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	6851      	ldr	r1, [r2, #4]
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	68d2      	ldr	r2, [r2, #12]
 8008fde:	4311      	orrs	r1, r2
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	6912      	ldr	r2, [r2, #16]
 8008fe4:	4311      	orrs	r1, r2
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	6992      	ldr	r2, [r2, #24]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff ff7c 	bl	8008ef6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff ff89 	bl	8008f1c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a1c      	ldr	r2, [pc, #112]	; (8009080 <LL_USART_Init+0xd0>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d104      	bne.n	800901c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8009012:	2003      	movs	r0, #3
 8009014:	f7fe ff62 	bl	8007edc <LL_RCC_GetUSARTClockFreq>
 8009018:	60b8      	str	r0, [r7, #8]
 800901a:	e019      	b.n	8009050 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a19      	ldr	r2, [pc, #100]	; (8009084 <LL_USART_Init+0xd4>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d104      	bne.n	800902e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8009024:	200c      	movs	r0, #12
 8009026:	f7fe ff59 	bl	8007edc <LL_RCC_GetUSARTClockFreq>
 800902a:	60b8      	str	r0, [r7, #8]
 800902c:	e010      	b.n	8009050 <LL_USART_Init+0xa0>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a15      	ldr	r2, [pc, #84]	; (8009088 <LL_USART_Init+0xd8>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d104      	bne.n	8009040 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8009036:	2030      	movs	r0, #48	; 0x30
 8009038:	f7fe ff50 	bl	8007edc <LL_RCC_GetUSARTClockFreq>
 800903c:	60b8      	str	r0, [r7, #8]
 800903e:	e007      	b.n	8009050 <LL_USART_Init+0xa0>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a12      	ldr	r2, [pc, #72]	; (800908c <LL_USART_Init+0xdc>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d103      	bne.n	8009050 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8009048:	20c0      	movs	r0, #192	; 0xc0
 800904a:	f7ff f827 	bl	800809c <LL_RCC_GetUARTClockFreq>
 800904e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00d      	beq.n	8009072 <LL_USART_Init+0xc2>
        && (USART_InitStruct->BaudRate != 0U))
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d009      	beq.n	8009072 <LL_USART_Init+0xc2>
    {
      status = SUCCESS;
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7ff ff68 	bl	8008f42 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	efff69f3 	.word	0xefff69f3
 8009080:	40013800 	.word	0x40013800
 8009084:	40004400 	.word	0x40004400
 8009088:	40004800 	.word	0x40004800
 800908c:	40004c00 	.word	0x40004c00

08009090 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009090:	b084      	sub	sp, #16
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	f107 0014 	add.w	r0, r7, #20
 800909e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	b004      	add	sp, #16
 80090b0:	4770      	bx	lr

080090b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80090c2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80090c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80090e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80090ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	43db      	mvns	r3, r3
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	4013      	ands	r3, r2
 8009100:	b29a      	uxth	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009116:	b480      	push	{r7}
 8009118:	b083      	sub	sp, #12
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009130:	b084      	sub	sp, #16
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	f107 0014 	add.w	r0, r7, #20
 800913e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	b004      	add	sp, #16
 8009170:	4770      	bx	lr
	...

08009174 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009174:	b480      	push	{r7}
 8009176:	b09b      	sub	sp, #108	; 0x6c
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	b29b      	uxth	r3, r3
 8009192:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800919a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	78db      	ldrb	r3, [r3, #3]
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d81f      	bhi.n	80091e6 <USB_ActivateEndpoint+0x72>
 80091a6:	a201      	add	r2, pc, #4	; (adr r2, 80091ac <USB_ActivateEndpoint+0x38>)
 80091a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ac:	080091bd 	.word	0x080091bd
 80091b0:	080091d9 	.word	0x080091d9
 80091b4:	080091ef 	.word	0x080091ef
 80091b8:	080091cb 	.word	0x080091cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80091bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80091c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80091c8:	e012      	b.n	80091f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80091ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80091ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80091d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80091d6:	e00b      	b.n	80091f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80091d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80091dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80091e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80091e4:	e004      	b.n	80091f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80091ec:	e000      	b.n	80091f0 <USB_ActivateEndpoint+0x7c>
      break;
 80091ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	441a      	add	r2, r3
 80091fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80091fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800920e:	b29b      	uxth	r3, r3
 8009210:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	b29b      	uxth	r3, r3
 8009220:	b21b      	sxth	r3, r3
 8009222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922a:	b21a      	sxth	r2, r3
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	b21b      	sxth	r3, r3
 8009232:	4313      	orrs	r3, r2
 8009234:	b21b      	sxth	r3, r3
 8009236:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	441a      	add	r2, r3
 8009244:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800924c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009258:	b29b      	uxth	r3, r3
 800925a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	7b1b      	ldrb	r3, [r3, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f040 8149 	bne.w	80094f8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	785b      	ldrb	r3, [r3, #1]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 8084 	beq.w	8009378 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800927a:	b29b      	uxth	r3, r3
 800927c:	461a      	mov	r2, r3
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	4413      	add	r3, r2
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	00da      	lsls	r2, r3, #3
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	4413      	add	r3, r2
 800928e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009292:	613b      	str	r3, [r7, #16]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	88db      	ldrh	r3, [r3, #6]
 8009298:	085b      	lsrs	r3, r3, #1
 800929a:	b29b      	uxth	r3, r3
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	b29a      	uxth	r2, r3
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	881b      	ldrh	r3, [r3, #0]
 80092b0:	81fb      	strh	r3, [r7, #14]
 80092b2:	89fb      	ldrh	r3, [r7, #14]
 80092b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d01b      	beq.n	80092f4 <USB_ActivateEndpoint+0x180>
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	881b      	ldrh	r3, [r3, #0]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d2:	81bb      	strh	r3, [r7, #12]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	441a      	add	r2, r3
 80092de:	89bb      	ldrh	r3, [r7, #12]
 80092e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	78db      	ldrb	r3, [r3, #3]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d020      	beq.n	800933e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	b29b      	uxth	r3, r3
 800930a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009312:	813b      	strh	r3, [r7, #8]
 8009314:	893b      	ldrh	r3, [r7, #8]
 8009316:	f083 0320 	eor.w	r3, r3, #32
 800931a:	813b      	strh	r3, [r7, #8]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	441a      	add	r2, r3
 8009326:	893b      	ldrh	r3, [r7, #8]
 8009328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800932c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009338:	b29b      	uxth	r3, r3
 800933a:	8013      	strh	r3, [r2, #0]
 800933c:	e27f      	b.n	800983e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	b29b      	uxth	r3, r3
 800934c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009354:	817b      	strh	r3, [r7, #10]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	441a      	add	r2, r3
 8009360:	897b      	ldrh	r3, [r7, #10]
 8009362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800936a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800936e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009372:	b29b      	uxth	r3, r3
 8009374:	8013      	strh	r3, [r2, #0]
 8009376:	e262      	b.n	800983e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009382:	b29b      	uxth	r3, r3
 8009384:	461a      	mov	r2, r3
 8009386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009388:	4413      	add	r3, r2
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	00da      	lsls	r2, r3, #3
 8009392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009394:	4413      	add	r3, r2
 8009396:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800939a:	62bb      	str	r3, [r7, #40]	; 0x28
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	88db      	ldrh	r3, [r3, #6]
 80093a0:	085b      	lsrs	r3, r3, #1
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	461a      	mov	r2, r3
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	4413      	add	r3, r2
 80093be:	627b      	str	r3, [r7, #36]	; 0x24
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	00da      	lsls	r2, r3, #3
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	4413      	add	r3, r2
 80093ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093ce:	623b      	str	r3, [r7, #32]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d112      	bne.n	80093fe <USB_ActivateEndpoint+0x28a>
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	6a3b      	ldr	r3, [r7, #32]
 80093e6:	801a      	strh	r2, [r3, #0]
 80093e8:	6a3b      	ldr	r3, [r7, #32]
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	6a3b      	ldr	r3, [r7, #32]
 80093fa:	801a      	strh	r2, [r3, #0]
 80093fc:	e02f      	b.n	800945e <USB_ActivateEndpoint+0x2ea>
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	2b3e      	cmp	r3, #62	; 0x3e
 8009404:	d813      	bhi.n	800942e <USB_ActivateEndpoint+0x2ba>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	085b      	lsrs	r3, r3, #1
 800940c:	663b      	str	r3, [r7, #96]	; 0x60
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d002      	beq.n	8009420 <USB_ActivateEndpoint+0x2ac>
 800941a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800941c:	3301      	adds	r3, #1
 800941e:	663b      	str	r3, [r7, #96]	; 0x60
 8009420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009422:	b29b      	uxth	r3, r3
 8009424:	029b      	lsls	r3, r3, #10
 8009426:	b29a      	uxth	r2, r3
 8009428:	6a3b      	ldr	r3, [r7, #32]
 800942a:	801a      	strh	r2, [r3, #0]
 800942c:	e017      	b.n	800945e <USB_ActivateEndpoint+0x2ea>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	095b      	lsrs	r3, r3, #5
 8009434:	663b      	str	r3, [r7, #96]	; 0x60
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 031f 	and.w	r3, r3, #31
 800943e:	2b00      	cmp	r3, #0
 8009440:	d102      	bne.n	8009448 <USB_ActivateEndpoint+0x2d4>
 8009442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009444:	3b01      	subs	r3, #1
 8009446:	663b      	str	r3, [r7, #96]	; 0x60
 8009448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800944a:	b29b      	uxth	r3, r3
 800944c:	029b      	lsls	r3, r3, #10
 800944e:	b29b      	uxth	r3, r3
 8009450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009458:	b29a      	uxth	r2, r3
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	83fb      	strh	r3, [r7, #30]
 800946c:	8bfb      	ldrh	r3, [r7, #30]
 800946e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d01b      	beq.n	80094ae <USB_ActivateEndpoint+0x33a>
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	b29b      	uxth	r3, r3
 8009484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948c:	83bb      	strh	r3, [r7, #28]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	441a      	add	r2, r3
 8009498:	8bbb      	ldrh	r3, [r7, #28]
 800949a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800949e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c4:	837b      	strh	r3, [r7, #26]
 80094c6:	8b7b      	ldrh	r3, [r7, #26]
 80094c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80094cc:	837b      	strh	r3, [r7, #26]
 80094ce:	8b7b      	ldrh	r3, [r7, #26]
 80094d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80094d4:	837b      	strh	r3, [r7, #26]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	441a      	add	r2, r3
 80094e0:	8b7b      	ldrh	r3, [r7, #26]
 80094e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	8013      	strh	r3, [r2, #0]
 80094f6:	e1a2      	b.n	800983e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	b29b      	uxth	r3, r3
 8009506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800950a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800950e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	441a      	add	r2, r3
 800951c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009528:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800952c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009530:	b29b      	uxth	r3, r3
 8009532:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	65bb      	str	r3, [r7, #88]	; 0x58
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800953e:	b29b      	uxth	r3, r3
 8009540:	461a      	mov	r2, r3
 8009542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009544:	4413      	add	r3, r2
 8009546:	65bb      	str	r3, [r7, #88]	; 0x58
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	00da      	lsls	r2, r3, #3
 800954e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009550:	4413      	add	r3, r2
 8009552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009556:	657b      	str	r3, [r7, #84]	; 0x54
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	891b      	ldrh	r3, [r3, #8]
 800955c:	085b      	lsrs	r3, r3, #1
 800955e:	b29b      	uxth	r3, r3
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	b29a      	uxth	r2, r3
 8009564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009566:	801a      	strh	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	653b      	str	r3, [r7, #80]	; 0x50
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009572:	b29b      	uxth	r3, r3
 8009574:	461a      	mov	r2, r3
 8009576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009578:	4413      	add	r3, r2
 800957a:	653b      	str	r3, [r7, #80]	; 0x50
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	00da      	lsls	r2, r3, #3
 8009582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009584:	4413      	add	r3, r2
 8009586:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800958a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	895b      	ldrh	r3, [r3, #10]
 8009590:	085b      	lsrs	r3, r3, #1
 8009592:	b29b      	uxth	r3, r3
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	b29a      	uxth	r2, r3
 8009598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	785b      	ldrb	r3, [r3, #1]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f040 8091 	bne.w	80096c8 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80095b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80095b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d01b      	beq.n	80095f6 <USB_ActivateEndpoint+0x482>
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	441a      	add	r2, r3
 80095e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80095e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	873b      	strh	r3, [r7, #56]	; 0x38
 8009604:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	d01b      	beq.n	8009646 <USB_ActivateEndpoint+0x4d2>
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009624:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	441a      	add	r2, r3
 8009630:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800963a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800963e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009642:	b29b      	uxth	r3, r3
 8009644:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	b29b      	uxth	r3, r3
 8009654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800965e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009660:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009664:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009666:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009668:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800966c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	441a      	add	r2, r3
 8009678:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800967a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800967e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968a:	b29b      	uxth	r3, r3
 800968c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	b29b      	uxth	r3, r3
 800969c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096a4:	867b      	strh	r3, [r7, #50]	; 0x32
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	441a      	add	r2, r3
 80096b0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80096b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	8013      	strh	r3, [r2, #0]
 80096c6:	e0ba      	b.n	800983e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80096d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80096dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d01d      	beq.n	8009720 <USB_ActivateEndpoint+0x5ac>
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	441a      	add	r2, r3
 8009708:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800970c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800971c:	b29b      	uxth	r3, r3
 800971e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009730:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009738:	2b00      	cmp	r3, #0
 800973a:	d01d      	beq.n	8009778 <USB_ActivateEndpoint+0x604>
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	b29b      	uxth	r3, r3
 800974a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800974e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009752:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	441a      	add	r2, r3
 8009760:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800976c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009774:	b29b      	uxth	r3, r3
 8009776:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	78db      	ldrb	r3, [r3, #3]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d024      	beq.n	80097ca <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009796:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800979a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800979e:	f083 0320 	eor.w	r3, r3, #32
 80097a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	441a      	add	r2, r3
 80097b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80097b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	8013      	strh	r3, [r2, #0]
 80097c8:	e01d      	b.n	8009806 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	441a      	add	r2, r3
 80097ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80097f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009802:	b29b      	uxth	r3, r3
 8009804:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	441a      	add	r2, r3
 8009828:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800982a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800982e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983a:	b29b      	uxth	r3, r3
 800983c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800983e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009842:	4618      	mov	r0, r3
 8009844:	376c      	adds	r7, #108	; 0x6c
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop

08009850 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009850:	b480      	push	{r7}
 8009852:	b08d      	sub	sp, #52	; 0x34
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	7b1b      	ldrb	r3, [r3, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f040 808e 	bne.w	8009980 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	785b      	ldrb	r3, [r3, #1]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d044      	beq.n	80098f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	81bb      	strh	r3, [r7, #12]
 800987a:	89bb      	ldrh	r3, [r7, #12]
 800987c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009880:	2b00      	cmp	r3, #0
 8009882:	d01b      	beq.n	80098bc <USB_DeactivateEndpoint+0x6c>
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	b29b      	uxth	r3, r3
 8009892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989a:	817b      	strh	r3, [r7, #10]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	441a      	add	r2, r3
 80098a6:	897b      	ldrh	r3, [r7, #10]
 80098a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098d2:	813b      	strh	r3, [r7, #8]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	441a      	add	r2, r3
 80098de:	893b      	ldrh	r3, [r7, #8]
 80098e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	8013      	strh	r3, [r2, #0]
 80098f4:	e192      	b.n	8009c1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	827b      	strh	r3, [r7, #18]
 8009904:	8a7b      	ldrh	r3, [r7, #18]
 8009906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d01b      	beq.n	8009946 <USB_DeactivateEndpoint+0xf6>
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	881b      	ldrh	r3, [r3, #0]
 800991a:	b29b      	uxth	r3, r3
 800991c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009924:	823b      	strh	r3, [r7, #16]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	441a      	add	r2, r3
 8009930:	8a3b      	ldrh	r3, [r7, #16]
 8009932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800993a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800993e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009942:	b29b      	uxth	r3, r3
 8009944:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800995c:	81fb      	strh	r3, [r7, #14]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	441a      	add	r2, r3
 8009968:	89fb      	ldrh	r3, [r7, #14]
 800996a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800997a:	b29b      	uxth	r3, r3
 800997c:	8013      	strh	r3, [r2, #0]
 800997e:	e14d      	b.n	8009c1c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	785b      	ldrb	r3, [r3, #1]
 8009984:	2b00      	cmp	r3, #0
 8009986:	f040 80a5 	bne.w	8009ad4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	843b      	strh	r3, [r7, #32]
 8009998:	8c3b      	ldrh	r3, [r7, #32]
 800999a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d01b      	beq.n	80099da <USB_DeactivateEndpoint+0x18a>
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b8:	83fb      	strh	r3, [r7, #30]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	441a      	add	r2, r3
 80099c4:	8bfb      	ldrh	r3, [r7, #30]
 80099c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	83bb      	strh	r3, [r7, #28]
 80099e8:	8bbb      	ldrh	r3, [r7, #28]
 80099ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d01b      	beq.n	8009a2a <USB_DeactivateEndpoint+0x1da>
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	881b      	ldrh	r3, [r3, #0]
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a08:	837b      	strh	r3, [r7, #26]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	441a      	add	r2, r3
 8009a14:	8b7b      	ldrh	r3, [r7, #26]
 8009a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a40:	833b      	strh	r3, [r7, #24]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	441a      	add	r2, r3
 8009a4c:	8b3b      	ldrh	r3, [r7, #24]
 8009a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a78:	82fb      	strh	r3, [r7, #22]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	441a      	add	r2, r3
 8009a84:	8afb      	ldrh	r3, [r7, #22]
 8009a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab0:	82bb      	strh	r3, [r7, #20]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	441a      	add	r2, r3
 8009abc:	8abb      	ldrh	r3, [r7, #20]
 8009abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	8013      	strh	r3, [r2, #0]
 8009ad2:	e0a3      	b.n	8009c1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009ae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01b      	beq.n	8009b24 <USB_DeactivateEndpoint+0x2d4>
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	441a      	add	r2, r3
 8009b0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009b32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01b      	beq.n	8009b74 <USB_DeactivateEndpoint+0x324>
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b52:	853b      	strh	r3, [r7, #40]	; 0x28
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	441a      	add	r2, r3
 8009b5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	441a      	add	r2, r3
 8009b96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	441a      	add	r2, r3
 8009bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bfa:	847b      	strh	r3, [r7, #34]	; 0x22
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	441a      	add	r2, r3
 8009c06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3734      	adds	r7, #52	; 0x34
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b0c4      	sub	sp, #272	; 0x110
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	1d3b      	adds	r3, r7, #4
 8009c32:	6018      	str	r0, [r3, #0]
 8009c34:	463b      	mov	r3, r7
 8009c36:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c38:	463b      	mov	r3, r7
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	f040 8566 	bne.w	800a710 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009c44:	463b      	mov	r3, r7
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	699a      	ldr	r2, [r3, #24]
 8009c4a:	463b      	mov	r3, r7
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d905      	bls.n	8009c60 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8009c54:	463b      	mov	r3, r7
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009c5e:	e004      	b.n	8009c6a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009c60:	463b      	mov	r3, r7
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009c6a:	463b      	mov	r3, r7
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	7b1b      	ldrb	r3, [r3, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d12c      	bne.n	8009cce <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009c74:	463b      	mov	r3, r7
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6959      	ldr	r1, [r3, #20]
 8009c7a:	463b      	mov	r3, r7
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	88da      	ldrh	r2, [r3, #6]
 8009c80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	1d38      	adds	r0, r7, #4
 8009c88:	6800      	ldr	r0, [r0, #0]
 8009c8a:	f001 fa58 	bl	800b13e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009c8e:	1d3b      	adds	r3, r7, #4
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	617b      	str	r3, [r7, #20]
 8009c94:	1d3b      	adds	r3, r7, #4
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	617b      	str	r3, [r7, #20]
 8009ca6:	463b      	mov	r3, r7
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	00da      	lsls	r2, r3, #3
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8009cb6:	f107 0310 	add.w	r3, r7, #16
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	f107 0310 	add.w	r3, r7, #16
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	801a      	strh	r2, [r3, #0]
 8009cca:	f000 bcec 	b.w	800a6a6 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009cce:	463b      	mov	r3, r7
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	78db      	ldrb	r3, [r3, #3]
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	f040 8356 	bne.w	800a386 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009cda:	463b      	mov	r3, r7
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6a1a      	ldr	r2, [r3, #32]
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	f240 82fa 	bls.w	800a2e0 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009cec:	1d3b      	adds	r3, r7, #4
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	463b      	mov	r3, r7
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d06:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8009d0a:	1d3b      	adds	r3, r7, #4
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	463b      	mov	r3, r7
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	441a      	add	r2, r3
 8009d18:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8009d30:	463b      	mov	r3, r7
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009d3a:	463b      	mov	r3, r7
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6a1a      	ldr	r2, [r3, #32]
 8009d40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d44:	1ad2      	subs	r2, r2, r3
 8009d46:	463b      	mov	r3, r7
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d4c:	1d3b      	adds	r3, r7, #4
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	463b      	mov	r3, r7
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 815e 	beq.w	800a024 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d68:	1d3b      	adds	r3, r7, #4
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d6e:	463b      	mov	r3, r7
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	785b      	ldrb	r3, [r3, #1]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d164      	bne.n	8009e42 <USB_EPStartXfer+0x218>
 8009d78:	1d3b      	adds	r3, r7, #4
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d7e:	1d3b      	adds	r3, r7, #4
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	461a      	mov	r2, r3
 8009d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8c:	4413      	add	r3, r2
 8009d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d90:	463b      	mov	r3, r7
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	00da      	lsls	r2, r3, #3
 8009d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009da2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d112      	bne.n	8009dd0 <USB_EPStartXfer+0x1a6>
 8009daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	801a      	strh	r2, [r3, #0]
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dcc:	801a      	strh	r2, [r3, #0]
 8009dce:	e054      	b.n	8009e7a <USB_EPStartXfer+0x250>
 8009dd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009dd4:	2b3e      	cmp	r3, #62	; 0x3e
 8009dd6:	d817      	bhi.n	8009e08 <USB_EPStartXfer+0x1de>
 8009dd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ddc:	085b      	lsrs	r3, r3, #1
 8009dde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009de2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d004      	beq.n	8009df8 <USB_EPStartXfer+0x1ce>
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df2:	3301      	adds	r3, #1
 8009df4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	029b      	lsls	r3, r3, #10
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	801a      	strh	r2, [r3, #0]
 8009e06:	e038      	b.n	8009e7a <USB_EPStartXfer+0x250>
 8009e08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e0c:	095b      	lsrs	r3, r3, #5
 8009e0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e16:	f003 031f 	and.w	r3, r3, #31
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d104      	bne.n	8009e28 <USB_EPStartXfer+0x1fe>
 8009e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e22:	3b01      	subs	r3, #1
 8009e24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	029b      	lsls	r3, r3, #10
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3e:	801a      	strh	r2, [r3, #0]
 8009e40:	e01b      	b.n	8009e7a <USB_EPStartXfer+0x250>
 8009e42:	463b      	mov	r3, r7
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	785b      	ldrb	r3, [r3, #1]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d116      	bne.n	8009e7a <USB_EPStartXfer+0x250>
 8009e4c:	1d3b      	adds	r3, r7, #4
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	461a      	mov	r2, r3
 8009e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5a:	4413      	add	r3, r2
 8009e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e5e:	463b      	mov	r3, r7
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	00da      	lsls	r2, r3, #3
 8009e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e68:	4413      	add	r3, r2
 8009e6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8009e70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009e7a:	463b      	mov	r3, r7
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	895b      	ldrh	r3, [r3, #10]
 8009e80:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e84:	463b      	mov	r3, r7
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6959      	ldr	r1, [r3, #20]
 8009e8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009e94:	1d38      	adds	r0, r7, #4
 8009e96:	6800      	ldr	r0, [r0, #0]
 8009e98:	f001 f951 	bl	800b13e <USB_WritePMA>
            ep->xfer_buff += len;
 8009e9c:	463b      	mov	r3, r7
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	695a      	ldr	r2, [r3, #20]
 8009ea2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ea6:	441a      	add	r2, r3
 8009ea8:	463b      	mov	r3, r7
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009eae:	463b      	mov	r3, r7
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6a1a      	ldr	r2, [r3, #32]
 8009eb4:	463b      	mov	r3, r7
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d90e      	bls.n	8009edc <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8009ebe:	463b      	mov	r3, r7
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8009ec8:	463b      	mov	r3, r7
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6a1a      	ldr	r2, [r3, #32]
 8009ece:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ed2:	1ad2      	subs	r2, r2, r3
 8009ed4:	463b      	mov	r3, r7
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	621a      	str	r2, [r3, #32]
 8009eda:	e008      	b.n	8009eee <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009edc:	463b      	mov	r3, r7
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
 8009ee2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8009ee6:	463b      	mov	r3, r7
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2200      	movs	r2, #0
 8009eec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009eee:	463b      	mov	r3, r7
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d164      	bne.n	8009fc2 <USB_EPStartXfer+0x398>
 8009ef8:	1d3b      	adds	r3, r7, #4
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	61fb      	str	r3, [r7, #28]
 8009efe:	1d3b      	adds	r3, r7, #4
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	461a      	mov	r2, r3
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	61fb      	str	r3, [r7, #28]
 8009f10:	463b      	mov	r3, r7
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	00da      	lsls	r2, r3, #3
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f20:	61bb      	str	r3, [r7, #24]
 8009f22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d112      	bne.n	8009f50 <USB_EPStartXfer+0x326>
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	801a      	strh	r2, [r3, #0]
 8009f4e:	e057      	b.n	800a000 <USB_EPStartXfer+0x3d6>
 8009f50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f54:	2b3e      	cmp	r3, #62	; 0x3e
 8009f56:	d817      	bhi.n	8009f88 <USB_EPStartXfer+0x35e>
 8009f58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f5c:	085b      	lsrs	r3, r3, #1
 8009f5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d004      	beq.n	8009f78 <USB_EPStartXfer+0x34e>
 8009f6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f72:	3301      	adds	r3, #1
 8009f74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	029b      	lsls	r3, r3, #10
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	801a      	strh	r2, [r3, #0]
 8009f86:	e03b      	b.n	800a000 <USB_EPStartXfer+0x3d6>
 8009f88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f8c:	095b      	lsrs	r3, r3, #5
 8009f8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f96:	f003 031f 	and.w	r3, r3, #31
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d104      	bne.n	8009fa8 <USB_EPStartXfer+0x37e>
 8009f9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009fa8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	029b      	lsls	r3, r3, #10
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	801a      	strh	r2, [r3, #0]
 8009fc0:	e01e      	b.n	800a000 <USB_EPStartXfer+0x3d6>
 8009fc2:	463b      	mov	r3, r7
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d119      	bne.n	800a000 <USB_EPStartXfer+0x3d6>
 8009fcc:	1d3b      	adds	r3, r7, #4
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fd2:	1d3b      	adds	r3, r7, #4
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	461a      	mov	r2, r3
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	4413      	add	r3, r2
 8009fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8009fe4:	463b      	mov	r3, r7
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	00da      	lsls	r2, r3, #3
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	4413      	add	r3, r2
 8009ff0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ff4:	623b      	str	r3, [r7, #32]
 8009ff6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a000:	463b      	mov	r3, r7
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	891b      	ldrh	r3, [r3, #8]
 800a006:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a00a:	463b      	mov	r3, r7
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6959      	ldr	r1, [r3, #20]
 800a010:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a014:	b29b      	uxth	r3, r3
 800a016:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a01a:	1d38      	adds	r0, r7, #4
 800a01c:	6800      	ldr	r0, [r0, #0]
 800a01e:	f001 f88e 	bl	800b13e <USB_WritePMA>
 800a022:	e340      	b.n	800a6a6 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a024:	463b      	mov	r3, r7
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	785b      	ldrb	r3, [r3, #1]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d164      	bne.n	800a0f8 <USB_EPStartXfer+0x4ce>
 800a02e:	1d3b      	adds	r3, r7, #4
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a034:	1d3b      	adds	r3, r7, #4
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	461a      	mov	r2, r3
 800a040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a042:	4413      	add	r3, r2
 800a044:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a046:	463b      	mov	r3, r7
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	00da      	lsls	r2, r3, #3
 800a04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a050:	4413      	add	r3, r2
 800a052:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a056:	64bb      	str	r3, [r7, #72]	; 0x48
 800a058:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d112      	bne.n	800a086 <USB_EPStartXfer+0x45c>
 800a060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	b29b      	uxth	r3, r3
 800a066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a06e:	801a      	strh	r2, [r3, #0]
 800a070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a072:	881b      	ldrh	r3, [r3, #0]
 800a074:	b29b      	uxth	r3, r3
 800a076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a07a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a07e:	b29a      	uxth	r2, r3
 800a080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a082:	801a      	strh	r2, [r3, #0]
 800a084:	e057      	b.n	800a136 <USB_EPStartXfer+0x50c>
 800a086:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a08a:	2b3e      	cmp	r3, #62	; 0x3e
 800a08c:	d817      	bhi.n	800a0be <USB_EPStartXfer+0x494>
 800a08e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a092:	085b      	lsrs	r3, r3, #1
 800a094:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a098:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a09c:	f003 0301 	and.w	r3, r3, #1
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <USB_EPStartXfer+0x484>
 800a0a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a0ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	029b      	lsls	r3, r3, #10
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ba:	801a      	strh	r2, [r3, #0]
 800a0bc:	e03b      	b.n	800a136 <USB_EPStartXfer+0x50c>
 800a0be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a0c2:	095b      	lsrs	r3, r3, #5
 800a0c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a0c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a0cc:	f003 031f 	and.w	r3, r3, #31
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d104      	bne.n	800a0de <USB_EPStartXfer+0x4b4>
 800a0d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a0de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	029b      	lsls	r3, r3, #10
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0f4:	801a      	strh	r2, [r3, #0]
 800a0f6:	e01e      	b.n	800a136 <USB_EPStartXfer+0x50c>
 800a0f8:	463b      	mov	r3, r7
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d119      	bne.n	800a136 <USB_EPStartXfer+0x50c>
 800a102:	1d3b      	adds	r3, r7, #4
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	657b      	str	r3, [r7, #84]	; 0x54
 800a108:	1d3b      	adds	r3, r7, #4
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a110:	b29b      	uxth	r3, r3
 800a112:	461a      	mov	r2, r3
 800a114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a116:	4413      	add	r3, r2
 800a118:	657b      	str	r3, [r7, #84]	; 0x54
 800a11a:	463b      	mov	r3, r7
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	00da      	lsls	r2, r3, #3
 800a122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a124:	4413      	add	r3, r2
 800a126:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a12a:	653b      	str	r3, [r7, #80]	; 0x50
 800a12c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a130:	b29a      	uxth	r2, r3
 800a132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a134:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a136:	463b      	mov	r3, r7
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	891b      	ldrh	r3, [r3, #8]
 800a13c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a140:	463b      	mov	r3, r7
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6959      	ldr	r1, [r3, #20]
 800a146:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a150:	1d38      	adds	r0, r7, #4
 800a152:	6800      	ldr	r0, [r0, #0]
 800a154:	f000 fff3 	bl	800b13e <USB_WritePMA>
            ep->xfer_buff += len;
 800a158:	463b      	mov	r3, r7
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	695a      	ldr	r2, [r3, #20]
 800a15e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a162:	441a      	add	r2, r3
 800a164:	463b      	mov	r3, r7
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a16a:	463b      	mov	r3, r7
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6a1a      	ldr	r2, [r3, #32]
 800a170:	463b      	mov	r3, r7
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	429a      	cmp	r2, r3
 800a178:	d90e      	bls.n	800a198 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800a17a:	463b      	mov	r3, r7
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800a184:	463b      	mov	r3, r7
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6a1a      	ldr	r2, [r3, #32]
 800a18a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a18e:	1ad2      	subs	r2, r2, r3
 800a190:	463b      	mov	r3, r7
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	621a      	str	r2, [r3, #32]
 800a196:	e008      	b.n	800a1aa <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800a198:	463b      	mov	r3, r7
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800a1a2:	463b      	mov	r3, r7
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a1aa:	1d3b      	adds	r3, r7, #4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	647b      	str	r3, [r7, #68]	; 0x44
 800a1b0:	463b      	mov	r3, r7
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	785b      	ldrb	r3, [r3, #1]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d164      	bne.n	800a284 <USB_EPStartXfer+0x65a>
 800a1ba:	1d3b      	adds	r3, r7, #4
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1c0:	1d3b      	adds	r3, r7, #4
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ce:	4413      	add	r3, r2
 800a1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1d2:	463b      	mov	r3, r7
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	00da      	lsls	r2, r3, #3
 800a1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1dc:	4413      	add	r3, r2
 800a1de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a1e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d112      	bne.n	800a212 <USB_EPStartXfer+0x5e8>
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	801a      	strh	r2, [r3, #0]
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	b29b      	uxth	r3, r3
 800a202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20e:	801a      	strh	r2, [r3, #0]
 800a210:	e054      	b.n	800a2bc <USB_EPStartXfer+0x692>
 800a212:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a216:	2b3e      	cmp	r3, #62	; 0x3e
 800a218:	d817      	bhi.n	800a24a <USB_EPStartXfer+0x620>
 800a21a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a21e:	085b      	lsrs	r3, r3, #1
 800a220:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a224:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d004      	beq.n	800a23a <USB_EPStartXfer+0x610>
 800a230:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a234:	3301      	adds	r3, #1
 800a236:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a23a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a23e:	b29b      	uxth	r3, r3
 800a240:	029b      	lsls	r3, r3, #10
 800a242:	b29a      	uxth	r2, r3
 800a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a246:	801a      	strh	r2, [r3, #0]
 800a248:	e038      	b.n	800a2bc <USB_EPStartXfer+0x692>
 800a24a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a24e:	095b      	lsrs	r3, r3, #5
 800a250:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a254:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a258:	f003 031f 	and.w	r3, r3, #31
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d104      	bne.n	800a26a <USB_EPStartXfer+0x640>
 800a260:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a264:	3b01      	subs	r3, #1
 800a266:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a26a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a26e:	b29b      	uxth	r3, r3
 800a270:	029b      	lsls	r3, r3, #10
 800a272:	b29b      	uxth	r3, r3
 800a274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	801a      	strh	r2, [r3, #0]
 800a282:	e01b      	b.n	800a2bc <USB_EPStartXfer+0x692>
 800a284:	463b      	mov	r3, r7
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	785b      	ldrb	r3, [r3, #1]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d116      	bne.n	800a2bc <USB_EPStartXfer+0x692>
 800a28e:	1d3b      	adds	r3, r7, #4
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a296:	b29b      	uxth	r3, r3
 800a298:	461a      	mov	r2, r3
 800a29a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a29c:	4413      	add	r3, r2
 800a29e:	647b      	str	r3, [r7, #68]	; 0x44
 800a2a0:	463b      	mov	r3, r7
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	00da      	lsls	r2, r3, #3
 800a2a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a2b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a2bc:	463b      	mov	r3, r7
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	895b      	ldrh	r3, [r3, #10]
 800a2c2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2c6:	463b      	mov	r3, r7
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6959      	ldr	r1, [r3, #20]
 800a2cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a2d6:	1d38      	adds	r0, r7, #4
 800a2d8:	6800      	ldr	r0, [r0, #0]
 800a2da:	f000 ff30 	bl	800b13e <USB_WritePMA>
 800a2de:	e1e2      	b.n	800a6a6 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800a2e0:	463b      	mov	r3, r7
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a2ea:	1d3b      	adds	r3, r7, #4
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	463b      	mov	r3, r7
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4413      	add	r3, r2
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a304:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a308:	1d3b      	adds	r3, r7, #4
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	463b      	mov	r3, r7
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	441a      	add	r2, r3
 800a316:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a31a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a31e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a32e:	1d3b      	adds	r3, r7, #4
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	663b      	str	r3, [r7, #96]	; 0x60
 800a334:	1d3b      	adds	r3, r7, #4
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	461a      	mov	r2, r3
 800a340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a342:	4413      	add	r3, r2
 800a344:	663b      	str	r3, [r7, #96]	; 0x60
 800a346:	463b      	mov	r3, r7
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	00da      	lsls	r2, r3, #3
 800a34e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a350:	4413      	add	r3, r2
 800a352:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a356:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a358:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a360:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a362:	463b      	mov	r3, r7
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	891b      	ldrh	r3, [r3, #8]
 800a368:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a36c:	463b      	mov	r3, r7
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6959      	ldr	r1, [r3, #20]
 800a372:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a376:	b29b      	uxth	r3, r3
 800a378:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a37c:	1d38      	adds	r0, r7, #4
 800a37e:	6800      	ldr	r0, [r0, #0]
 800a380:	f000 fedd 	bl	800b13e <USB_WritePMA>
 800a384:	e18f      	b.n	800a6a6 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a386:	1d3b      	adds	r3, r7, #4
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	463b      	mov	r3, r7
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	881b      	ldrh	r3, [r3, #0]
 800a396:	b29b      	uxth	r3, r3
 800a398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 808f 	beq.w	800a4c0 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3a2:	1d3b      	adds	r3, r7, #4
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3a8:	463b      	mov	r3, r7
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	785b      	ldrb	r3, [r3, #1]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d164      	bne.n	800a47c <USB_EPStartXfer+0x852>
 800a3b2:	1d3b      	adds	r3, r7, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	673b      	str	r3, [r7, #112]	; 0x70
 800a3b8:	1d3b      	adds	r3, r7, #4
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3c6:	4413      	add	r3, r2
 800a3c8:	673b      	str	r3, [r7, #112]	; 0x70
 800a3ca:	463b      	mov	r3, r7
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	00da      	lsls	r2, r3, #3
 800a3d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d112      	bne.n	800a40a <USB_EPStartXfer+0x7e0>
 800a3e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3f2:	801a      	strh	r2, [r3, #0]
 800a3f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a402:	b29a      	uxth	r2, r3
 800a404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a406:	801a      	strh	r2, [r3, #0]
 800a408:	e054      	b.n	800a4b4 <USB_EPStartXfer+0x88a>
 800a40a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a40e:	2b3e      	cmp	r3, #62	; 0x3e
 800a410:	d817      	bhi.n	800a442 <USB_EPStartXfer+0x818>
 800a412:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a416:	085b      	lsrs	r3, r3, #1
 800a418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a41c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	2b00      	cmp	r3, #0
 800a426:	d004      	beq.n	800a432 <USB_EPStartXfer+0x808>
 800a428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a42c:	3301      	adds	r3, #1
 800a42e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a436:	b29b      	uxth	r3, r3
 800a438:	029b      	lsls	r3, r3, #10
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a43e:	801a      	strh	r2, [r3, #0]
 800a440:	e038      	b.n	800a4b4 <USB_EPStartXfer+0x88a>
 800a442:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a446:	095b      	lsrs	r3, r3, #5
 800a448:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a44c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a450:	f003 031f 	and.w	r3, r3, #31
 800a454:	2b00      	cmp	r3, #0
 800a456:	d104      	bne.n	800a462 <USB_EPStartXfer+0x838>
 800a458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a45c:	3b01      	subs	r3, #1
 800a45e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a466:	b29b      	uxth	r3, r3
 800a468:	029b      	lsls	r3, r3, #10
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a474:	b29a      	uxth	r2, r3
 800a476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a478:	801a      	strh	r2, [r3, #0]
 800a47a:	e01b      	b.n	800a4b4 <USB_EPStartXfer+0x88a>
 800a47c:	463b      	mov	r3, r7
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	785b      	ldrb	r3, [r3, #1]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d116      	bne.n	800a4b4 <USB_EPStartXfer+0x88a>
 800a486:	1d3b      	adds	r3, r7, #4
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a48e:	b29b      	uxth	r3, r3
 800a490:	461a      	mov	r2, r3
 800a492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a494:	4413      	add	r3, r2
 800a496:	67bb      	str	r3, [r7, #120]	; 0x78
 800a498:	463b      	mov	r3, r7
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	00da      	lsls	r2, r3, #3
 800a4a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4a8:	677b      	str	r3, [r7, #116]	; 0x74
 800a4aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a4b4:	463b      	mov	r3, r7
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	895b      	ldrh	r3, [r3, #10]
 800a4ba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800a4be:	e097      	b.n	800a5f0 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a4c0:	463b      	mov	r3, r7
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	785b      	ldrb	r3, [r3, #1]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d168      	bne.n	800a59c <USB_EPStartXfer+0x972>
 800a4ca:	1d3b      	adds	r3, r7, #4
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a4d2:	1d3b      	adds	r3, r7, #4
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	461a      	mov	r2, r3
 800a4de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a4e8:	463b      	mov	r3, r7
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	00da      	lsls	r2, r3, #3
 800a4f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a4fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a500:	2b00      	cmp	r3, #0
 800a502:	d112      	bne.n	800a52a <USB_EPStartXfer+0x900>
 800a504:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a50e:	b29a      	uxth	r2, r3
 800a510:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a512:	801a      	strh	r2, [r3, #0]
 800a514:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	b29b      	uxth	r3, r3
 800a51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a522:	b29a      	uxth	r2, r3
 800a524:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a526:	801a      	strh	r2, [r3, #0]
 800a528:	e05d      	b.n	800a5e6 <USB_EPStartXfer+0x9bc>
 800a52a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a52e:	2b3e      	cmp	r3, #62	; 0x3e
 800a530:	d817      	bhi.n	800a562 <USB_EPStartXfer+0x938>
 800a532:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a536:	085b      	lsrs	r3, r3, #1
 800a538:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a53c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a540:	f003 0301 	and.w	r3, r3, #1
 800a544:	2b00      	cmp	r3, #0
 800a546:	d004      	beq.n	800a552 <USB_EPStartXfer+0x928>
 800a548:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a54c:	3301      	adds	r3, #1
 800a54e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a552:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a556:	b29b      	uxth	r3, r3
 800a558:	029b      	lsls	r3, r3, #10
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a55e:	801a      	strh	r2, [r3, #0]
 800a560:	e041      	b.n	800a5e6 <USB_EPStartXfer+0x9bc>
 800a562:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a566:	095b      	lsrs	r3, r3, #5
 800a568:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a56c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a570:	f003 031f 	and.w	r3, r3, #31
 800a574:	2b00      	cmp	r3, #0
 800a576:	d104      	bne.n	800a582 <USB_EPStartXfer+0x958>
 800a578:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a57c:	3b01      	subs	r3, #1
 800a57e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a582:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a586:	b29b      	uxth	r3, r3
 800a588:	029b      	lsls	r3, r3, #10
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a594:	b29a      	uxth	r2, r3
 800a596:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a598:	801a      	strh	r2, [r3, #0]
 800a59a:	e024      	b.n	800a5e6 <USB_EPStartXfer+0x9bc>
 800a59c:	463b      	mov	r3, r7
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	785b      	ldrb	r3, [r3, #1]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d11f      	bne.n	800a5e6 <USB_EPStartXfer+0x9bc>
 800a5a6:	1d3b      	adds	r3, r7, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5ae:	1d3b      	adds	r3, r7, #4
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5be:	4413      	add	r3, r2
 800a5c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5c4:	463b      	mov	r3, r7
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	00da      	lsls	r2, r3, #3
 800a5cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a5da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a5e6:	463b      	mov	r3, r7
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	891b      	ldrh	r3, [r3, #8]
 800a5ec:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5f0:	463b      	mov	r3, r7
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6959      	ldr	r1, [r3, #20]
 800a5f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a600:	1d38      	adds	r0, r7, #4
 800a602:	6800      	ldr	r0, [r0, #0]
 800a604:	f000 fd9b 	bl	800b13e <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a608:	463b      	mov	r3, r7
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d122      	bne.n	800a658 <USB_EPStartXfer+0xa2e>
 800a612:	1d3b      	adds	r3, r7, #4
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	463b      	mov	r3, r7
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	b29b      	uxth	r3, r3
 800a624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a62c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800a630:	1d3b      	adds	r3, r7, #4
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	463b      	mov	r3, r7
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	441a      	add	r2, r3
 800a63e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a64a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a64e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a652:	b29b      	uxth	r3, r3
 800a654:	8013      	strh	r3, [r2, #0]
 800a656:	e026      	b.n	800a6a6 <USB_EPStartXfer+0xa7c>
 800a658:	463b      	mov	r3, r7
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	785b      	ldrb	r3, [r3, #1]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d121      	bne.n	800a6a6 <USB_EPStartXfer+0xa7c>
 800a662:	1d3b      	adds	r3, r7, #4
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	463b      	mov	r3, r7
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	b29b      	uxth	r3, r3
 800a674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a67c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800a680:	1d3b      	adds	r3, r7, #4
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	463b      	mov	r3, r7
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	441a      	add	r2, r3
 800a68e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a69a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a6a6:	1d3b      	adds	r3, r7, #4
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	463b      	mov	r3, r7
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4413      	add	r3, r2
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	f107 020e 	add.w	r2, r7, #14
 800a6bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6c4:	8013      	strh	r3, [r2, #0]
 800a6c6:	f107 030e 	add.w	r3, r7, #14
 800a6ca:	f107 020e 	add.w	r2, r7, #14
 800a6ce:	8812      	ldrh	r2, [r2, #0]
 800a6d0:	f082 0210 	eor.w	r2, r2, #16
 800a6d4:	801a      	strh	r2, [r3, #0]
 800a6d6:	f107 030e 	add.w	r3, r7, #14
 800a6da:	f107 020e 	add.w	r2, r7, #14
 800a6de:	8812      	ldrh	r2, [r2, #0]
 800a6e0:	f082 0220 	eor.w	r2, r2, #32
 800a6e4:	801a      	strh	r2, [r3, #0]
 800a6e6:	1d3b      	adds	r3, r7, #4
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	441a      	add	r2, r3
 800a6f4:	f107 030e 	add.w	r3, r7, #14
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	8013      	strh	r3, [r2, #0]
 800a70e:	e3b5      	b.n	800ae7c <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a710:	463b      	mov	r3, r7
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	7b1b      	ldrb	r3, [r3, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f040 8090 	bne.w	800a83c <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800a71c:	463b      	mov	r3, r7
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	699a      	ldr	r2, [r3, #24]
 800a722:	463b      	mov	r3, r7
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d90e      	bls.n	800a74a <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800a72c:	463b      	mov	r3, r7
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800a736:	463b      	mov	r3, r7
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	699a      	ldr	r2, [r3, #24]
 800a73c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a740:	1ad2      	subs	r2, r2, r3
 800a742:	463b      	mov	r3, r7
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	619a      	str	r2, [r3, #24]
 800a748:	e008      	b.n	800a75c <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800a74a:	463b      	mov	r3, r7
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800a754:	463b      	mov	r3, r7
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2200      	movs	r2, #0
 800a75a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a75c:	1d3b      	adds	r3, r7, #4
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a764:	1d3b      	adds	r3, r7, #4
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a774:	4413      	add	r3, r2
 800a776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a77a:	463b      	mov	r3, r7
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	00da      	lsls	r2, r3, #3
 800a782:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a786:	4413      	add	r3, r2
 800a788:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a78c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a790:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a794:	2b00      	cmp	r3, #0
 800a796:	d116      	bne.n	800a7c6 <USB_EPStartXfer+0xb9c>
 800a798:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a79c:	881b      	ldrh	r3, [r3, #0]
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7aa:	801a      	strh	r2, [r3, #0]
 800a7ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7c2:	801a      	strh	r2, [r3, #0]
 800a7c4:	e32c      	b.n	800ae20 <USB_EPStartXfer+0x11f6>
 800a7c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a7ca:	2b3e      	cmp	r3, #62	; 0x3e
 800a7cc:	d818      	bhi.n	800a800 <USB_EPStartXfer+0xbd6>
 800a7ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a7d2:	085b      	lsrs	r3, r3, #1
 800a7d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d004      	beq.n	800a7ee <USB_EPStartXfer+0xbc4>
 800a7e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	029b      	lsls	r3, r3, #10
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7fc:	801a      	strh	r2, [r3, #0]
 800a7fe:	e30f      	b.n	800ae20 <USB_EPStartXfer+0x11f6>
 800a800:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a804:	095b      	lsrs	r3, r3, #5
 800a806:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a80a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a80e:	f003 031f 	and.w	r3, r3, #31
 800a812:	2b00      	cmp	r3, #0
 800a814:	d104      	bne.n	800a820 <USB_EPStartXfer+0xbf6>
 800a816:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a81a:	3b01      	subs	r3, #1
 800a81c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a820:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a824:	b29b      	uxth	r3, r3
 800a826:	029b      	lsls	r3, r3, #10
 800a828:	b29b      	uxth	r3, r3
 800a82a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a82e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a832:	b29a      	uxth	r2, r3
 800a834:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a838:	801a      	strh	r2, [r3, #0]
 800a83a:	e2f1      	b.n	800ae20 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800a83c:	463b      	mov	r3, r7
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	78db      	ldrb	r3, [r3, #3]
 800a842:	2b02      	cmp	r3, #2
 800a844:	f040 818f 	bne.w	800ab66 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a848:	463b      	mov	r3, r7
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	785b      	ldrb	r3, [r3, #1]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d175      	bne.n	800a93e <USB_EPStartXfer+0xd14>
 800a852:	1d3b      	adds	r3, r7, #4
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a85a:	1d3b      	adds	r3, r7, #4
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a862:	b29b      	uxth	r3, r3
 800a864:	461a      	mov	r2, r3
 800a866:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a86a:	4413      	add	r3, r2
 800a86c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a870:	463b      	mov	r3, r7
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	00da      	lsls	r2, r3, #3
 800a878:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a87c:	4413      	add	r3, r2
 800a87e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a886:	463b      	mov	r3, r7
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d116      	bne.n	800a8be <USB_EPStartXfer+0xc94>
 800a890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	b29b      	uxth	r3, r3
 800a898:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8a2:	801a      	strh	r2, [r3, #0]
 800a8a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8ba:	801a      	strh	r2, [r3, #0]
 800a8bc:	e065      	b.n	800a98a <USB_EPStartXfer+0xd60>
 800a8be:	463b      	mov	r3, r7
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	2b3e      	cmp	r3, #62	; 0x3e
 800a8c6:	d81a      	bhi.n	800a8fe <USB_EPStartXfer+0xcd4>
 800a8c8:	463b      	mov	r3, r7
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	085b      	lsrs	r3, r3, #1
 800a8d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a8d4:	463b      	mov	r3, r7
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d004      	beq.n	800a8ec <USB_EPStartXfer+0xcc2>
 800a8e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a8ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	029b      	lsls	r3, r3, #10
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8fa:	801a      	strh	r2, [r3, #0]
 800a8fc:	e045      	b.n	800a98a <USB_EPStartXfer+0xd60>
 800a8fe:	463b      	mov	r3, r7
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	095b      	lsrs	r3, r3, #5
 800a906:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a90a:	463b      	mov	r3, r7
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	f003 031f 	and.w	r3, r3, #31
 800a914:	2b00      	cmp	r3, #0
 800a916:	d104      	bne.n	800a922 <USB_EPStartXfer+0xcf8>
 800a918:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a91c:	3b01      	subs	r3, #1
 800a91e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a926:	b29b      	uxth	r3, r3
 800a928:	029b      	lsls	r3, r3, #10
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a934:	b29a      	uxth	r2, r3
 800a936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a93a:	801a      	strh	r2, [r3, #0]
 800a93c:	e025      	b.n	800a98a <USB_EPStartXfer+0xd60>
 800a93e:	463b      	mov	r3, r7
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	785b      	ldrb	r3, [r3, #1]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d120      	bne.n	800a98a <USB_EPStartXfer+0xd60>
 800a948:	1d3b      	adds	r3, r7, #4
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a950:	1d3b      	adds	r3, r7, #4
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a958:	b29b      	uxth	r3, r3
 800a95a:	461a      	mov	r2, r3
 800a95c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a960:	4413      	add	r3, r2
 800a962:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a966:	463b      	mov	r3, r7
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	00da      	lsls	r2, r3, #3
 800a96e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a972:	4413      	add	r3, r2
 800a974:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a97c:	463b      	mov	r3, r7
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	b29a      	uxth	r2, r3
 800a984:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a988:	801a      	strh	r2, [r3, #0]
 800a98a:	1d3b      	adds	r3, r7, #4
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a992:	463b      	mov	r3, r7
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	785b      	ldrb	r3, [r3, #1]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d175      	bne.n	800aa88 <USB_EPStartXfer+0xe5e>
 800a99c:	1d3b      	adds	r3, r7, #4
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a9a4:	1d3b      	adds	r3, r7, #4
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9b4:	4413      	add	r3, r2
 800a9b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a9ba:	463b      	mov	r3, r7
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	00da      	lsls	r2, r3, #3
 800a9c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9d0:	463b      	mov	r3, r7
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d116      	bne.n	800aa08 <USB_EPStartXfer+0xdde>
 800a9da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9ec:	801a      	strh	r2, [r3, #0]
 800a9ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa04:	801a      	strh	r2, [r3, #0]
 800aa06:	e061      	b.n	800aacc <USB_EPStartXfer+0xea2>
 800aa08:	463b      	mov	r3, r7
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	2b3e      	cmp	r3, #62	; 0x3e
 800aa10:	d81a      	bhi.n	800aa48 <USB_EPStartXfer+0xe1e>
 800aa12:	463b      	mov	r3, r7
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	085b      	lsrs	r3, r3, #1
 800aa1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa1e:	463b      	mov	r3, r7
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	f003 0301 	and.w	r3, r3, #1
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d004      	beq.n	800aa36 <USB_EPStartXfer+0xe0c>
 800aa2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa30:	3301      	adds	r3, #1
 800aa32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	029b      	lsls	r3, r3, #10
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa44:	801a      	strh	r2, [r3, #0]
 800aa46:	e041      	b.n	800aacc <USB_EPStartXfer+0xea2>
 800aa48:	463b      	mov	r3, r7
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	095b      	lsrs	r3, r3, #5
 800aa50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa54:	463b      	mov	r3, r7
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	f003 031f 	and.w	r3, r3, #31
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d104      	bne.n	800aa6c <USB_EPStartXfer+0xe42>
 800aa62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa66:	3b01      	subs	r3, #1
 800aa68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	029b      	lsls	r3, r3, #10
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa84:	801a      	strh	r2, [r3, #0]
 800aa86:	e021      	b.n	800aacc <USB_EPStartXfer+0xea2>
 800aa88:	463b      	mov	r3, r7
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	785b      	ldrb	r3, [r3, #1]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d11c      	bne.n	800aacc <USB_EPStartXfer+0xea2>
 800aa92:	1d3b      	adds	r3, r7, #4
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aaa2:	4413      	add	r3, r2
 800aaa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aaa8:	463b      	mov	r3, r7
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	00da      	lsls	r2, r3, #3
 800aab0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aab4:	4413      	add	r3, r2
 800aab6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aaba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aabe:	463b      	mov	r3, r7
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aaca:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800aacc:	463b      	mov	r3, r7
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	69db      	ldr	r3, [r3, #28]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	f000 81a4 	beq.w	800ae20 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aad8:	1d3b      	adds	r3, r7, #4
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	463b      	mov	r3, r7
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	881b      	ldrh	r3, [r3, #0]
 800aae8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aaec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aaf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d005      	beq.n	800ab04 <USB_EPStartXfer+0xeda>
 800aaf8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10d      	bne.n	800ab20 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab04:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ab08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f040 8187 	bne.w	800ae20 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab12:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ab16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f040 8180 	bne.w	800ae20 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800ab20:	1d3b      	adds	r3, r7, #4
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	463b      	mov	r3, r7
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	881b      	ldrh	r3, [r3, #0]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab3a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800ab3e:	1d3b      	adds	r3, r7, #4
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	463b      	mov	r3, r7
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	441a      	add	r2, r3
 800ab4c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800ab50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	8013      	strh	r3, [r2, #0]
 800ab64:	e15c      	b.n	800ae20 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ab66:	463b      	mov	r3, r7
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	78db      	ldrb	r3, [r3, #3]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	f040 8155 	bne.w	800ae1c <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800ab72:	463b      	mov	r3, r7
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	699a      	ldr	r2, [r3, #24]
 800ab78:	463b      	mov	r3, r7
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d90e      	bls.n	800aba0 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800ab82:	463b      	mov	r3, r7
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800ab8c:	463b      	mov	r3, r7
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	699a      	ldr	r2, [r3, #24]
 800ab92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ab96:	1ad2      	subs	r2, r2, r3
 800ab98:	463b      	mov	r3, r7
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	619a      	str	r2, [r3, #24]
 800ab9e:	e008      	b.n	800abb2 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800aba0:	463b      	mov	r3, r7
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800abaa:	463b      	mov	r3, r7
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2200      	movs	r2, #0
 800abb0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800abb2:	463b      	mov	r3, r7
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	785b      	ldrb	r3, [r3, #1]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d16f      	bne.n	800ac9c <USB_EPStartXfer+0x1072>
 800abbc:	1d3b      	adds	r3, r7, #4
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abc4:	1d3b      	adds	r3, r7, #4
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abcc:	b29b      	uxth	r3, r3
 800abce:	461a      	mov	r2, r3
 800abd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800abd4:	4413      	add	r3, r2
 800abd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abda:	463b      	mov	r3, r7
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	00da      	lsls	r2, r3, #3
 800abe2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800abe6:	4413      	add	r3, r2
 800abe8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800abec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800abf0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d116      	bne.n	800ac26 <USB_EPStartXfer+0xffc>
 800abf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac0a:	801a      	strh	r2, [r3, #0]
 800ac0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac22:	801a      	strh	r2, [r3, #0]
 800ac24:	e05f      	b.n	800ace6 <USB_EPStartXfer+0x10bc>
 800ac26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac2a:	2b3e      	cmp	r3, #62	; 0x3e
 800ac2c:	d818      	bhi.n	800ac60 <USB_EPStartXfer+0x1036>
 800ac2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac32:	085b      	lsrs	r3, r3, #1
 800ac34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d004      	beq.n	800ac4e <USB_EPStartXfer+0x1024>
 800ac44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac48:	3301      	adds	r3, #1
 800ac4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	029b      	lsls	r3, r3, #10
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac5c:	801a      	strh	r2, [r3, #0]
 800ac5e:	e042      	b.n	800ace6 <USB_EPStartXfer+0x10bc>
 800ac60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac64:	095b      	lsrs	r3, r3, #5
 800ac66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac6e:	f003 031f 	and.w	r3, r3, #31
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d104      	bne.n	800ac80 <USB_EPStartXfer+0x1056>
 800ac76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	029b      	lsls	r3, r3, #10
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac98:	801a      	strh	r2, [r3, #0]
 800ac9a:	e024      	b.n	800ace6 <USB_EPStartXfer+0x10bc>
 800ac9c:	463b      	mov	r3, r7
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	785b      	ldrb	r3, [r3, #1]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d11f      	bne.n	800ace6 <USB_EPStartXfer+0x10bc>
 800aca6:	1d3b      	adds	r3, r7, #4
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800acae:	1d3b      	adds	r3, r7, #4
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	461a      	mov	r2, r3
 800acba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acbe:	4413      	add	r3, r2
 800acc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800acc4:	463b      	mov	r3, r7
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	00da      	lsls	r2, r3, #3
 800accc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acd0:	4413      	add	r3, r2
 800acd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800acd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800acda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800acde:	b29a      	uxth	r2, r3
 800ace0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ace4:	801a      	strh	r2, [r3, #0]
 800ace6:	1d3b      	adds	r3, r7, #4
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800acee:	463b      	mov	r3, r7
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	785b      	ldrb	r3, [r3, #1]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d16f      	bne.n	800add8 <USB_EPStartXfer+0x11ae>
 800acf8:	1d3b      	adds	r3, r7, #4
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad00:	1d3b      	adds	r3, r7, #4
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ad10:	4413      	add	r3, r2
 800ad12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad16:	463b      	mov	r3, r7
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	00da      	lsls	r2, r3, #3
 800ad1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ad22:	4413      	add	r3, r2
 800ad24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ad2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d116      	bne.n	800ad62 <USB_EPStartXfer+0x1138>
 800ad34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad46:	801a      	strh	r2, [r3, #0]
 800ad48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad4c:	881b      	ldrh	r3, [r3, #0]
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad5e:	801a      	strh	r2, [r3, #0]
 800ad60:	e05e      	b.n	800ae20 <USB_EPStartXfer+0x11f6>
 800ad62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ad66:	2b3e      	cmp	r3, #62	; 0x3e
 800ad68:	d818      	bhi.n	800ad9c <USB_EPStartXfer+0x1172>
 800ad6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ad6e:	085b      	lsrs	r3, r3, #1
 800ad70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ad78:	f003 0301 	and.w	r3, r3, #1
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d004      	beq.n	800ad8a <USB_EPStartXfer+0x1160>
 800ad80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad84:	3301      	adds	r3, #1
 800ad86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	029b      	lsls	r3, r3, #10
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad98:	801a      	strh	r2, [r3, #0]
 800ad9a:	e041      	b.n	800ae20 <USB_EPStartXfer+0x11f6>
 800ad9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ada0:	095b      	lsrs	r3, r3, #5
 800ada2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ada6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800adaa:	f003 031f 	and.w	r3, r3, #31
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d104      	bne.n	800adbc <USB_EPStartXfer+0x1192>
 800adb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adb6:	3b01      	subs	r3, #1
 800adb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800adbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	029b      	lsls	r3, r3, #10
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adce:	b29a      	uxth	r2, r3
 800add0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800add4:	801a      	strh	r2, [r3, #0]
 800add6:	e023      	b.n	800ae20 <USB_EPStartXfer+0x11f6>
 800add8:	463b      	mov	r3, r7
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	785b      	ldrb	r3, [r3, #1]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d11e      	bne.n	800ae20 <USB_EPStartXfer+0x11f6>
 800ade2:	1d3b      	adds	r3, r7, #4
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adea:	b29b      	uxth	r3, r3
 800adec:	461a      	mov	r2, r3
 800adee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adf2:	4413      	add	r3, r2
 800adf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adf8:	463b      	mov	r3, r7
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	00da      	lsls	r2, r3, #3
 800ae00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae04:	4413      	add	r3, r2
 800ae06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae18:	801a      	strh	r2, [r3, #0]
 800ae1a:	e001      	b.n	800ae20 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e02e      	b.n	800ae7e <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae20:	1d3b      	adds	r3, r7, #4
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	463b      	mov	r3, r7
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae3a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800ae3e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ae42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ae46:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800ae4a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ae4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ae52:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800ae56:	1d3b      	adds	r3, r7, #4
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	463b      	mov	r3, r7
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	441a      	add	r2, r3
 800ae64:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ae68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	785b      	ldrb	r3, [r3, #1]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d020      	beq.n	800aedc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	4413      	add	r3, r2
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeb0:	81bb      	strh	r3, [r7, #12]
 800aeb2:	89bb      	ldrh	r3, [r7, #12]
 800aeb4:	f083 0310 	eor.w	r3, r3, #16
 800aeb8:	81bb      	strh	r3, [r7, #12]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	441a      	add	r2, r3
 800aec4:	89bb      	ldrh	r3, [r7, #12]
 800aec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	8013      	strh	r3, [r2, #0]
 800aeda:	e01f      	b.n	800af1c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aeee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aef2:	81fb      	strh	r3, [r7, #14]
 800aef4:	89fb      	ldrh	r3, [r7, #14]
 800aef6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aefa:	81fb      	strh	r3, [r7, #14]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	441a      	add	r2, r3
 800af06:	89fb      	ldrh	r3, [r7, #14]
 800af08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af18:	b29b      	uxth	r3, r3
 800af1a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af2a:	b480      	push	{r7}
 800af2c:	b087      	sub	sp, #28
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	7b1b      	ldrb	r3, [r3, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f040 809d 	bne.w	800b078 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	785b      	ldrb	r3, [r3, #1]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d04c      	beq.n	800afe0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	881b      	ldrh	r3, [r3, #0]
 800af52:	823b      	strh	r3, [r7, #16]
 800af54:	8a3b      	ldrh	r3, [r7, #16]
 800af56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d01b      	beq.n	800af96 <USB_EPClearStall+0x6c>
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4413      	add	r3, r2
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af74:	81fb      	strh	r3, [r7, #14]
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	441a      	add	r2, r3
 800af80:	89fb      	ldrh	r3, [r7, #14]
 800af82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af92:	b29b      	uxth	r3, r3
 800af94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	78db      	ldrb	r3, [r3, #3]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d06c      	beq.n	800b078 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	b29b      	uxth	r3, r3
 800afac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afb4:	81bb      	strh	r3, [r7, #12]
 800afb6:	89bb      	ldrh	r3, [r7, #12]
 800afb8:	f083 0320 	eor.w	r3, r3, #32
 800afbc:	81bb      	strh	r3, [r7, #12]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	441a      	add	r2, r3
 800afc8:	89bb      	ldrh	r3, [r7, #12]
 800afca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afda:	b29b      	uxth	r3, r3
 800afdc:	8013      	strh	r3, [r2, #0]
 800afde:	e04b      	b.n	800b078 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	82fb      	strh	r3, [r7, #22]
 800afee:	8afb      	ldrh	r3, [r7, #22]
 800aff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d01b      	beq.n	800b030 <USB_EPClearStall+0x106>
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4413      	add	r3, r2
 800b002:	881b      	ldrh	r3, [r3, #0]
 800b004:	b29b      	uxth	r3, r3
 800b006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b00a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b00e:	82bb      	strh	r3, [r7, #20]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	441a      	add	r2, r3
 800b01a:	8abb      	ldrh	r3, [r7, #20]
 800b01c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	881b      	ldrh	r3, [r3, #0]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b046:	827b      	strh	r3, [r7, #18]
 800b048:	8a7b      	ldrh	r3, [r7, #18]
 800b04a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b04e:	827b      	strh	r3, [r7, #18]
 800b050:	8a7b      	ldrh	r3, [r7, #18]
 800b052:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b056:	827b      	strh	r3, [r7, #18]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	441a      	add	r2, r3
 800b062:	8a7b      	ldrh	r3, [r7, #18]
 800b064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b06c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b074:	b29b      	uxth	r3, r3
 800b076:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b086:	b480      	push	{r7}
 800b088:	b083      	sub	sp, #12
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	460b      	mov	r3, r1
 800b090:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b092:	78fb      	ldrb	r3, [r7, #3]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d103      	bne.n	800b0a0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2280      	movs	r2, #128	; 0x80
 800b09c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b083      	sub	sp, #12
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr

0800b106 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b106:	b480      	push	{r7}
 800b108:	b085      	sub	sp, #20
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b114:	b29b      	uxth	r3, r3
 800b116:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b118:	68fb      	ldr	r3, [r7, #12]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b13e:	b480      	push	{r7}
 800b140:	b08d      	sub	sp, #52	; 0x34
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	60b9      	str	r1, [r7, #8]
 800b148:	4611      	mov	r1, r2
 800b14a:	461a      	mov	r2, r3
 800b14c:	460b      	mov	r3, r1
 800b14e:	80fb      	strh	r3, [r7, #6]
 800b150:	4613      	mov	r3, r2
 800b152:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b154:	88bb      	ldrh	r3, [r7, #4]
 800b156:	3301      	adds	r3, #1
 800b158:	085b      	lsrs	r3, r3, #1
 800b15a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b164:	88fa      	ldrh	r2, [r7, #6]
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	4413      	add	r3, r2
 800b16a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b16e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b170:	6a3b      	ldr	r3, [r7, #32]
 800b172:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b174:	e01b      	b.n	800b1ae <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800b176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	3301      	adds	r3, #1
 800b180:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	b29b      	uxth	r3, r3
 800b188:	021b      	lsls	r3, r3, #8
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	461a      	mov	r2, r3
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	4313      	orrs	r3, r2
 800b192:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	b29a      	uxth	r2, r3
 800b198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19e:	3302      	adds	r3, #2
 800b1a0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1e0      	bne.n	800b176 <USB_WritePMA+0x38>
  }
}
 800b1b4:	bf00      	nop
 800b1b6:	3734      	adds	r7, #52	; 0x34
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b08b      	sub	sp, #44	; 0x2c
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	80fb      	strh	r3, [r7, #6]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b1d6:	88bb      	ldrh	r3, [r7, #4]
 800b1d8:	085b      	lsrs	r3, r3, #1
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b1e6:	88fa      	ldrh	r2, [r7, #6]
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1f0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b1f6:	e018      	b.n	800b22a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	881b      	ldrh	r3, [r3, #0]
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	3302      	adds	r3, #2
 800b204:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	3301      	adds	r3, #1
 800b212:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	0a1b      	lsrs	r3, r3, #8
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	3301      	adds	r3, #1
 800b222:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	3b01      	subs	r3, #1
 800b228:	627b      	str	r3, [r7, #36]	; 0x24
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1e3      	bne.n	800b1f8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b230:	88bb      	ldrh	r3, [r7, #4]
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	b29b      	uxth	r3, r3
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d007      	beq.n	800b24c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800b23c:	6a3b      	ldr	r3, [r7, #32]
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	b29b      	uxth	r3, r3
 800b242:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	b2da      	uxtb	r2, r3
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	701a      	strb	r2, [r3, #0]
  }
}
 800b24c:	bf00      	nop
 800b24e:	372c      	adds	r7, #44	; 0x2c
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	460b      	mov	r3, r1
 800b262:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800b264:	2010      	movs	r0, #16
 800b266:	f003 ff53 	bl	800f110 <malloc>
 800b26a:	4603      	mov	r3, r0
 800b26c:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d105      	bne.n	800b280 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b27c:	2302      	movs	r3, #2
 800b27e:	e01b      	b.n	800b2b8 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	7c1b      	ldrb	r3, [r3, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d103      	bne.n	800b298 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2207      	movs	r2, #7
 800b294:	875a      	strh	r2, [r3, #58]	; 0x3a
 800b296:	e002      	b.n	800b29e <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	220a      	movs	r2, #10
 800b29c:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800b29e:	2304      	movs	r3, #4
 800b2a0:	2203      	movs	r2, #3
 800b2a2:	2181      	movs	r1, #129	; 0x81
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f003 fbcf 	bl	800ea48 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800b2cc:	2181      	movs	r1, #129	; 0x81
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f003 fbf8 	bl	800eac4 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d009      	beq.n	800b2fe <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f003 ff15 	bl	800f120 <free>
    pdev->pClassData = NULL;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b318:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b31e:	2300      	movs	r3, #0
 800b320:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d045      	beq.n	800b3ba <USBD_HID_Setup+0xb2>
 800b32e:	2b20      	cmp	r3, #32
 800b330:	f040 80d4 	bne.w	800b4dc <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	785b      	ldrb	r3, [r3, #1]
 800b338:	3b02      	subs	r3, #2
 800b33a:	2b09      	cmp	r3, #9
 800b33c:	d835      	bhi.n	800b3aa <USBD_HID_Setup+0xa2>
 800b33e:	a201      	add	r2, pc, #4	; (adr r2, 800b344 <USBD_HID_Setup+0x3c>)
 800b340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b344:	0800b39b 	.word	0x0800b39b
 800b348:	0800b37b 	.word	0x0800b37b
 800b34c:	0800b3ab 	.word	0x0800b3ab
 800b350:	0800b3ab 	.word	0x0800b3ab
 800b354:	0800b3ab 	.word	0x0800b3ab
 800b358:	0800b3ab 	.word	0x0800b3ab
 800b35c:	0800b3ab 	.word	0x0800b3ab
 800b360:	0800b3ab 	.word	0x0800b3ab
 800b364:	0800b389 	.word	0x0800b389
 800b368:	0800b36d 	.word	0x0800b36d
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	885b      	ldrh	r3, [r3, #2]
 800b370:	b2db      	uxtb	r3, r3
 800b372:	461a      	mov	r2, r3
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	601a      	str	r2, [r3, #0]
      break;
 800b378:	e01e      	b.n	800b3b8 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2201      	movs	r2, #1
 800b37e:	4619      	mov	r1, r3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f001 f97c 	bl	800c67e <USBD_CtlSendData>
      break;
 800b386:	e017      	b.n	800b3b8 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	885b      	ldrh	r3, [r3, #2]
 800b38c:	0a1b      	lsrs	r3, r3, #8
 800b38e:	b29b      	uxth	r3, r3
 800b390:	b2db      	uxtb	r3, r3
 800b392:	461a      	mov	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	605a      	str	r2, [r3, #4]
      break;
 800b398:	e00e      	b.n	800b3b8 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3304      	adds	r3, #4
 800b39e:	2201      	movs	r2, #1
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f001 f96b 	bl	800c67e <USBD_CtlSendData>
      break;
 800b3a8:	e006      	b.n	800b3b8 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f001 f8f5 	bl	800c59c <USBD_CtlError>
      ret = USBD_FAIL;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b6:	bf00      	nop
    }
    break;
 800b3b8:	e097      	b.n	800b4ea <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	785b      	ldrb	r3, [r3, #1]
 800b3be:	2b0b      	cmp	r3, #11
 800b3c0:	f200 8083 	bhi.w	800b4ca <USBD_HID_Setup+0x1c2>
 800b3c4:	a201      	add	r2, pc, #4	; (adr r2, 800b3cc <USBD_HID_Setup+0xc4>)
 800b3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ca:	bf00      	nop
 800b3cc:	0800b3fd 	.word	0x0800b3fd
 800b3d0:	0800b4d9 	.word	0x0800b4d9
 800b3d4:	0800b4cb 	.word	0x0800b4cb
 800b3d8:	0800b4cb 	.word	0x0800b4cb
 800b3dc:	0800b4cb 	.word	0x0800b4cb
 800b3e0:	0800b4cb 	.word	0x0800b4cb
 800b3e4:	0800b425 	.word	0x0800b425
 800b3e8:	0800b4cb 	.word	0x0800b4cb
 800b3ec:	0800b4cb 	.word	0x0800b4cb
 800b3f0:	0800b4cb 	.word	0x0800b4cb
 800b3f4:	0800b47d 	.word	0x0800b47d
 800b3f8:	0800b4a5 	.word	0x0800b4a5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b402:	2b03      	cmp	r3, #3
 800b404:	d107      	bne.n	800b416 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b406:	f107 030a 	add.w	r3, r7, #10
 800b40a:	2202      	movs	r2, #2
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f001 f935 	bl	800c67e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b414:	e061      	b.n	800b4da <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f001 f8bf 	bl	800c59c <USBD_CtlError>
        ret = USBD_FAIL;
 800b41e:	2303      	movs	r3, #3
 800b420:	75fb      	strb	r3, [r7, #23]
      break;
 800b422:	e05a      	b.n	800b4da <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	885b      	ldrh	r3, [r3, #2]
 800b428:	0a1b      	lsrs	r3, r3, #8
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	2b22      	cmp	r3, #34	; 0x22
 800b42e:	d108      	bne.n	800b442 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	88db      	ldrh	r3, [r3, #6]
 800b434:	2b4a      	cmp	r3, #74	; 0x4a
 800b436:	bf28      	it	cs
 800b438:	234a      	movcs	r3, #74	; 0x4a
 800b43a:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 800b43c:	4b2d      	ldr	r3, [pc, #180]	; (800b4f4 <USBD_HID_Setup+0x1ec>)
 800b43e:	613b      	str	r3, [r7, #16]
 800b440:	e015      	b.n	800b46e <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	885b      	ldrh	r3, [r3, #2]
 800b446:	0a1b      	lsrs	r3, r3, #8
 800b448:	b29b      	uxth	r3, r3
 800b44a:	2b21      	cmp	r3, #33	; 0x21
 800b44c:	d108      	bne.n	800b460 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 800b44e:	4b2a      	ldr	r3, [pc, #168]	; (800b4f8 <USBD_HID_Setup+0x1f0>)
 800b450:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	88db      	ldrh	r3, [r3, #6]
 800b456:	2b09      	cmp	r3, #9
 800b458:	bf28      	it	cs
 800b45a:	2309      	movcs	r3, #9
 800b45c:	82bb      	strh	r3, [r7, #20]
 800b45e:	e006      	b.n	800b46e <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f001 f89a 	bl	800c59c <USBD_CtlError>
        ret = USBD_FAIL;
 800b468:	2303      	movs	r3, #3
 800b46a:	75fb      	strb	r3, [r7, #23]
        break;
 800b46c:	e035      	b.n	800b4da <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b46e:	8abb      	ldrh	r3, [r7, #20]
 800b470:	461a      	mov	r2, r3
 800b472:	6939      	ldr	r1, [r7, #16]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f001 f902 	bl	800c67e <USBD_CtlSendData>
      break;
 800b47a:	e02e      	b.n	800b4da <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b482:	2b03      	cmp	r3, #3
 800b484:	d107      	bne.n	800b496 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3308      	adds	r3, #8
 800b48a:	2201      	movs	r2, #1
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 f8f5 	bl	800c67e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b494:	e021      	b.n	800b4da <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f001 f87f 	bl	800c59c <USBD_CtlError>
        ret = USBD_FAIL;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4a2:	e01a      	b.n	800b4da <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d106      	bne.n	800b4bc <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	885b      	ldrh	r3, [r3, #2]
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b4ba:	e00e      	b.n	800b4da <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f001 f86c 	bl	800c59c <USBD_CtlError>
        ret = USBD_FAIL;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b4c8:	e007      	b.n	800b4da <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f001 f865 	bl	800c59c <USBD_CtlError>
      ret = USBD_FAIL;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	75fb      	strb	r3, [r7, #23]
      break;
 800b4d6:	e000      	b.n	800b4da <USBD_HID_Setup+0x1d2>
      break;
 800b4d8:	bf00      	nop
    }
    break;
 800b4da:	e006      	b.n	800b4ea <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f001 f85c 	bl	800c59c <USBD_CtlError>
    ret = USBD_FAIL;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	75fb      	strb	r3, [r7, #23]
    break;
 800b4e8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	200000c4 	.word	0x200000c4
 800b4f8:	200000ac 	.word	0x200000ac

0800b4fc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2222      	movs	r2, #34	; 0x22
 800b508:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800b50a:	4b03      	ldr	r3, [pc, #12]	; (800b518 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	20000040 	.word	0x20000040

0800b51c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2222      	movs	r2, #34	; 0x22
 800b528:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800b52a:	4b03      	ldr	r3, [pc, #12]	; (800b538 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	20000064 	.word	0x20000064

0800b53c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2222      	movs	r2, #34	; 0x22
 800b548:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800b54a:	4b03      	ldr	r3, [pc, #12]	; (800b558 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	20000088 	.word	0x20000088

0800b55c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b56e:	2200      	movs	r2, #0
 800b570:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	220a      	movs	r2, #10
 800b58c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800b58e:	4b03      	ldr	r3, [pc, #12]	; (800b59c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b590:	4618      	mov	r0, r3
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr
 800b59c:	200000b8 	.word	0x200000b8

0800b5a0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e01f      	b.n	800b5f8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	79fa      	ldrb	r2, [r7, #7]
 800b5ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f003 f9a9 	bl	800e944 <USBD_LL_Init>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b614:	2303      	movs	r3, #3
 800b616:	e016      	b.n	800b646 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00b      	beq.n	800b644 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b634:	f107 020e 	add.w	r2, r7, #14
 800b638:	4610      	mov	r0, r2
 800b63a:	4798      	blx	r3
 800b63c:	4602      	mov	r2, r0
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b082      	sub	sp, #8
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f003 f9c4 	bl	800e9e4 <USBD_LL_Start>
 800b65c:	4603      	mov	r3, r0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	460b      	mov	r3, r1
 800b686:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b688:	2303      	movs	r3, #3
 800b68a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b692:	2b00      	cmp	r3, #0
 800b694:	d009      	beq.n	800b6aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	78fa      	ldrb	r2, [r7, #3]
 800b6a0:	4611      	mov	r1, r2
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	4798      	blx	r3
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d007      	beq.n	800b6da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	78fa      	ldrb	r2, [r7, #3]
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	4798      	blx	r3
  }

  return USBD_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 ff16 	bl	800c528 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b70a:	461a      	mov	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b718:	f003 031f 	and.w	r3, r3, #31
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d00e      	beq.n	800b73e <USBD_LL_SetupStage+0x5a>
 800b720:	2b01      	cmp	r3, #1
 800b722:	d302      	bcc.n	800b72a <USBD_LL_SetupStage+0x46>
 800b724:	2b02      	cmp	r3, #2
 800b726:	d014      	beq.n	800b752 <USBD_LL_SetupStage+0x6e>
 800b728:	e01d      	b.n	800b766 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f9d6 	bl	800bae4 <USBD_StdDevReq>
 800b738:	4603      	mov	r3, r0
 800b73a:	73fb      	strb	r3, [r7, #15]
      break;
 800b73c:	e020      	b.n	800b780 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fa3a 	bl	800bbc0 <USBD_StdItfReq>
 800b74c:	4603      	mov	r3, r0
 800b74e:	73fb      	strb	r3, [r7, #15]
      break;
 800b750:	e016      	b.n	800b780 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b758:	4619      	mov	r1, r3
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fa76 	bl	800bc4c <USBD_StdEPReq>
 800b760:	4603      	mov	r3, r0
 800b762:	73fb      	strb	r3, [r7, #15]
      break;
 800b764:	e00c      	b.n	800b780 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b76c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b770:	b2db      	uxtb	r3, r3
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f003 f9db 	bl	800eb30 <USBD_LL_StallEP>
 800b77a:	4603      	mov	r3, r0
 800b77c:	73fb      	strb	r3, [r7, #15]
      break;
 800b77e:	bf00      	nop
  }

  return ret;
 800b780:	7bfb      	ldrb	r3, [r7, #15]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b086      	sub	sp, #24
 800b78e:	af00      	add	r7, sp, #0
 800b790:	60f8      	str	r0, [r7, #12]
 800b792:	460b      	mov	r3, r1
 800b794:	607a      	str	r2, [r7, #4]
 800b796:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b798:	7afb      	ldrb	r3, [r7, #11]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d137      	bne.n	800b80e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b7a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7ac:	2b03      	cmp	r3, #3
 800b7ae:	d14a      	bne.n	800b846 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	689a      	ldr	r2, [r3, #8]
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d913      	bls.n	800b7e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	689a      	ldr	r2, [r3, #8]
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	1ad2      	subs	r2, r2, r3
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	68da      	ldr	r2, [r3, #12]
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	bf28      	it	cs
 800b7d6:	4613      	movcs	r3, r2
 800b7d8:	461a      	mov	r2, r3
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f000 ff7a 	bl	800c6d6 <USBD_CtlContinueRx>
 800b7e2:	e030      	b.n	800b846 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00a      	beq.n	800b806 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b7f6:	2b03      	cmp	r3, #3
 800b7f8:	d105      	bne.n	800b806 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f000 ff76 	bl	800c6f8 <USBD_CtlSendStatus>
 800b80c:	e01b      	b.n	800b846 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b814:	699b      	ldr	r3, [r3, #24]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d013      	beq.n	800b842 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b820:	2b03      	cmp	r3, #3
 800b822:	d10e      	bne.n	800b842 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	7afa      	ldrb	r2, [r7, #11]
 800b82e:	4611      	mov	r1, r2
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	4798      	blx	r3
 800b834:	4603      	mov	r3, r0
 800b836:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b838:	7dfb      	ldrb	r3, [r7, #23]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
 800b840:	e002      	b.n	800b848 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b842:	2303      	movs	r3, #3
 800b844:	e000      	b.n	800b848 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3718      	adds	r7, #24
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	460b      	mov	r3, r1
 800b85a:	607a      	str	r2, [r7, #4]
 800b85c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b85e:	7afb      	ldrb	r3, [r7, #11]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d16a      	bne.n	800b93a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	3314      	adds	r3, #20
 800b868:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b870:	2b02      	cmp	r3, #2
 800b872:	d155      	bne.n	800b920 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	689a      	ldr	r2, [r3, #8]
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d914      	bls.n	800b8aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	689a      	ldr	r2, [r3, #8]
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	1ad2      	subs	r2, r2, r3
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	461a      	mov	r2, r3
 800b894:	6879      	ldr	r1, [r7, #4]
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 ff0c 	bl	800c6b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b89c:	2300      	movs	r3, #0
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f003 fa4c 	bl	800ed40 <USBD_LL_PrepareReceive>
 800b8a8:	e03a      	b.n	800b920 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	68da      	ldr	r2, [r3, #12]
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d11c      	bne.n	800b8f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	685a      	ldr	r2, [r3, #4]
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d316      	bcc.n	800b8f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d20f      	bcs.n	800b8f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 feed 	bl	800c6b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f003 fa29 	bl	800ed40 <USBD_LL_PrepareReceive>
 800b8ee:	e017      	b.n	800b920 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00a      	beq.n	800b912 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b902:	2b03      	cmp	r3, #3
 800b904:	d105      	bne.n	800b912 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b912:	2180      	movs	r1, #128	; 0x80
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f003 f90b 	bl	800eb30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f000 feff 	bl	800c71e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b926:	2b01      	cmp	r3, #1
 800b928:	d123      	bne.n	800b972 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f7ff fe9b 	bl	800b666 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b938:	e01b      	b.n	800b972 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d013      	beq.n	800b96e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	d10e      	bne.n	800b96e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	7afa      	ldrb	r2, [r7, #11]
 800b95a:	4611      	mov	r1, r2
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	4798      	blx	r3
 800b960:	4603      	mov	r3, r0
 800b962:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b964:	7dfb      	ldrb	r3, [r7, #23]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
 800b96c:	e002      	b.n	800b974 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b96e:	2303      	movs	r3, #3
 800b970:	e000      	b.n	800b974 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d009      	beq.n	800b9c0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	6852      	ldr	r2, [r2, #4]
 800b9b8:	b2d2      	uxtb	r2, r2
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9c0:	2340      	movs	r3, #64	; 0x40
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f003 f83e 	bl	800ea48 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2240      	movs	r2, #64	; 0x40
 800b9d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9dc:	2340      	movs	r3, #64	; 0x40
 800b9de:	2200      	movs	r2, #0
 800b9e0:	2180      	movs	r1, #128	; 0x80
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f003 f830 	bl	800ea48 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2240      	movs	r2, #64	; 0x40
 800b9f2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b083      	sub	sp, #12
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	460b      	mov	r3, r1
 800ba08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	78fa      	ldrb	r2, [r7, #3]
 800ba0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b083      	sub	sp, #12
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2204      	movs	r2, #4
 800ba36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba56:	2b04      	cmp	r3, #4
 800ba58:	d105      	bne.n	800ba66 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d10b      	bne.n	800ba9e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba8c:	69db      	ldr	r3, [r3, #28]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d005      	beq.n	800ba9e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba98:	69db      	ldr	r3, [r3, #28]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b087      	sub	sp, #28
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	3301      	adds	r3, #1
 800babe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bac6:	8a3b      	ldrh	r3, [r7, #16]
 800bac8:	021b      	lsls	r3, r3, #8
 800baca:	b21a      	sxth	r2, r3
 800bacc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	b21b      	sxth	r3, r3
 800bad4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bad6:	89fb      	ldrh	r3, [r7, #14]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	371c      	adds	r7, #28
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bafa:	2b20      	cmp	r3, #32
 800bafc:	d004      	beq.n	800bb08 <USBD_StdDevReq+0x24>
 800bafe:	2b40      	cmp	r3, #64	; 0x40
 800bb00:	d002      	beq.n	800bb08 <USBD_StdDevReq+0x24>
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00a      	beq.n	800bb1c <USBD_StdDevReq+0x38>
 800bb06:	e050      	b.n	800bbaa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	4798      	blx	r3
 800bb16:	4603      	mov	r3, r0
 800bb18:	73fb      	strb	r3, [r7, #15]
    break;
 800bb1a:	e04b      	b.n	800bbb4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	785b      	ldrb	r3, [r3, #1]
 800bb20:	2b09      	cmp	r3, #9
 800bb22:	d83c      	bhi.n	800bb9e <USBD_StdDevReq+0xba>
 800bb24:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <USBD_StdDevReq+0x48>)
 800bb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2a:	bf00      	nop
 800bb2c:	0800bb81 	.word	0x0800bb81
 800bb30:	0800bb95 	.word	0x0800bb95
 800bb34:	0800bb9f 	.word	0x0800bb9f
 800bb38:	0800bb8b 	.word	0x0800bb8b
 800bb3c:	0800bb9f 	.word	0x0800bb9f
 800bb40:	0800bb5f 	.word	0x0800bb5f
 800bb44:	0800bb55 	.word	0x0800bb55
 800bb48:	0800bb9f 	.word	0x0800bb9f
 800bb4c:	0800bb77 	.word	0x0800bb77
 800bb50:	0800bb69 	.word	0x0800bb69
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f9d0 	bl	800befc <USBD_GetDescriptor>
      break;
 800bb5c:	e024      	b.n	800bba8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fb5f 	bl	800c224 <USBD_SetAddress>
      break;
 800bb66:	e01f      	b.n	800bba8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fb9c 	bl	800c2a8 <USBD_SetConfig>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73fb      	strb	r3, [r7, #15]
      break;
 800bb74:	e018      	b.n	800bba8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fc39 	bl	800c3f0 <USBD_GetConfig>
      break;
 800bb7e:	e013      	b.n	800bba8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 fc68 	bl	800c458 <USBD_GetStatus>
      break;
 800bb88:	e00e      	b.n	800bba8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800bb8a:	6839      	ldr	r1, [r7, #0]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fc96 	bl	800c4be <USBD_SetFeature>
      break;
 800bb92:	e009      	b.n	800bba8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fca5 	bl	800c4e6 <USBD_ClrFeature>
      break;
 800bb9c:	e004      	b.n	800bba8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fcfb 	bl	800c59c <USBD_CtlError>
      break;
 800bba6:	bf00      	nop
    }
    break;
 800bba8:	e004      	b.n	800bbb4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 fcf5 	bl	800c59c <USBD_CtlError>
    break;
 800bbb2:	bf00      	nop
  }

  return ret;
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop

0800bbc0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbd6:	2b20      	cmp	r3, #32
 800bbd8:	d003      	beq.n	800bbe2 <USBD_StdItfReq+0x22>
 800bbda:	2b40      	cmp	r3, #64	; 0x40
 800bbdc:	d001      	beq.n	800bbe2 <USBD_StdItfReq+0x22>
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d12a      	bne.n	800bc38 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d81d      	bhi.n	800bc2a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	889b      	ldrh	r3, [r3, #4]
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d813      	bhi.n	800bc20 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	6839      	ldr	r1, [r7, #0]
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	4798      	blx	r3
 800bc06:	4603      	mov	r3, r0
 800bc08:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	88db      	ldrh	r3, [r3, #6]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d110      	bne.n	800bc34 <USBD_StdItfReq+0x74>
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10d      	bne.n	800bc34 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fd6d 	bl	800c6f8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bc1e:	e009      	b.n	800bc34 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fcba 	bl	800c59c <USBD_CtlError>
      break;
 800bc28:	e004      	b.n	800bc34 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fcb5 	bl	800c59c <USBD_CtlError>
      break;
 800bc32:	e000      	b.n	800bc36 <USBD_StdItfReq+0x76>
      break;
 800bc34:	bf00      	nop
    }
    break;
 800bc36:	e004      	b.n	800bc42 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fcae 	bl	800c59c <USBD_CtlError>
    break;
 800bc40:	bf00      	nop
  }

  return ret;
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	889b      	ldrh	r3, [r3, #4]
 800bc5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc68:	2b20      	cmp	r3, #32
 800bc6a:	d004      	beq.n	800bc76 <USBD_StdEPReq+0x2a>
 800bc6c:	2b40      	cmp	r3, #64	; 0x40
 800bc6e:	d002      	beq.n	800bc76 <USBD_StdEPReq+0x2a>
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00a      	beq.n	800bc8a <USBD_StdEPReq+0x3e>
 800bc74:	e137      	b.n	800bee6 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	6839      	ldr	r1, [r7, #0]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	4798      	blx	r3
 800bc84:	4603      	mov	r3, r0
 800bc86:	73fb      	strb	r3, [r7, #15]
    break;
 800bc88:	e132      	b.n	800bef0 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	785b      	ldrb	r3, [r3, #1]
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d03e      	beq.n	800bd10 <USBD_StdEPReq+0xc4>
 800bc92:	2b03      	cmp	r3, #3
 800bc94:	d002      	beq.n	800bc9c <USBD_StdEPReq+0x50>
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d079      	beq.n	800bd8e <USBD_StdEPReq+0x142>
 800bc9a:	e11e      	b.n	800beda <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d002      	beq.n	800bcac <USBD_StdEPReq+0x60>
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d015      	beq.n	800bcd6 <USBD_StdEPReq+0x8a>
 800bcaa:	e02b      	b.n	800bd04 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00c      	beq.n	800bccc <USBD_StdEPReq+0x80>
 800bcb2:	7bbb      	ldrb	r3, [r7, #14]
 800bcb4:	2b80      	cmp	r3, #128	; 0x80
 800bcb6:	d009      	beq.n	800bccc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcb8:	7bbb      	ldrb	r3, [r7, #14]
 800bcba:	4619      	mov	r1, r3
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f002 ff37 	bl	800eb30 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcc2:	2180      	movs	r1, #128	; 0x80
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f002 ff33 	bl	800eb30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bcca:	e020      	b.n	800bd0e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fc64 	bl	800c59c <USBD_CtlError>
        break;
 800bcd4:	e01b      	b.n	800bd0e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	885b      	ldrh	r3, [r3, #2]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10e      	bne.n	800bcfc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bcde:	7bbb      	ldrb	r3, [r7, #14]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00b      	beq.n	800bcfc <USBD_StdEPReq+0xb0>
 800bce4:	7bbb      	ldrb	r3, [r7, #14]
 800bce6:	2b80      	cmp	r3, #128	; 0x80
 800bce8:	d008      	beq.n	800bcfc <USBD_StdEPReq+0xb0>
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	88db      	ldrh	r3, [r3, #6]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d104      	bne.n	800bcfc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcf2:	7bbb      	ldrb	r3, [r7, #14]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f002 ff1a 	bl	800eb30 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fcfb 	bl	800c6f8 <USBD_CtlSendStatus>

        break;
 800bd02:	e004      	b.n	800bd0e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fc48 	bl	800c59c <USBD_CtlError>
        break;
 800bd0c:	bf00      	nop
      }
      break;
 800bd0e:	e0e9      	b.n	800bee4 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d002      	beq.n	800bd20 <USBD_StdEPReq+0xd4>
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d015      	beq.n	800bd4a <USBD_StdEPReq+0xfe>
 800bd1e:	e02f      	b.n	800bd80 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd20:	7bbb      	ldrb	r3, [r7, #14]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00c      	beq.n	800bd40 <USBD_StdEPReq+0xf4>
 800bd26:	7bbb      	ldrb	r3, [r7, #14]
 800bd28:	2b80      	cmp	r3, #128	; 0x80
 800bd2a:	d009      	beq.n	800bd40 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd2c:	7bbb      	ldrb	r3, [r7, #14]
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f002 fefd 	bl	800eb30 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd36:	2180      	movs	r1, #128	; 0x80
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f002 fef9 	bl	800eb30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bd3e:	e025      	b.n	800bd8c <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fc2a 	bl	800c59c <USBD_CtlError>
        break;
 800bd48:	e020      	b.n	800bd8c <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	885b      	ldrh	r3, [r3, #2]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d11b      	bne.n	800bd8a <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800bd52:	7bbb      	ldrb	r3, [r7, #14]
 800bd54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d004      	beq.n	800bd66 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd5c:	7bbb      	ldrb	r3, [r7, #14]
 800bd5e:	4619      	mov	r1, r3
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f002 ff1b 	bl	800eb9c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 fcc6 	bl	800c6f8 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	4798      	blx	r3
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bd7e:	e004      	b.n	800bd8a <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fc0a 	bl	800c59c <USBD_CtlError>
        break;
 800bd88:	e000      	b.n	800bd8c <USBD_StdEPReq+0x140>
        break;
 800bd8a:	bf00      	nop
      }
      break;
 800bd8c:	e0aa      	b.n	800bee4 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d002      	beq.n	800bd9e <USBD_StdEPReq+0x152>
 800bd98:	2b03      	cmp	r3, #3
 800bd9a:	d032      	beq.n	800be02 <USBD_StdEPReq+0x1b6>
 800bd9c:	e097      	b.n	800bece <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd9e:	7bbb      	ldrb	r3, [r7, #14]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d007      	beq.n	800bdb4 <USBD_StdEPReq+0x168>
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
 800bda6:	2b80      	cmp	r3, #128	; 0x80
 800bda8:	d004      	beq.n	800bdb4 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fbf5 	bl	800c59c <USBD_CtlError>
          break;
 800bdb2:	e091      	b.n	800bed8 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	da0b      	bge.n	800bdd4 <USBD_StdEPReq+0x188>
 800bdbc:	7bbb      	ldrb	r3, [r7, #14]
 800bdbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4413      	add	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	3310      	adds	r3, #16
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	4413      	add	r3, r2
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	e00b      	b.n	800bdec <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdda:	4613      	mov	r3, r2
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	4413      	add	r3, r2
 800bdea:	3304      	adds	r3, #4
 800bdec:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fc3f 	bl	800c67e <USBD_CtlSendData>
        break;
 800be00:	e06a      	b.n	800bed8 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800be02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be06:	2b00      	cmp	r3, #0
 800be08:	da11      	bge.n	800be2e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	f003 020f 	and.w	r2, r3, #15
 800be10:	6879      	ldr	r1, [r7, #4]
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	440b      	add	r3, r1
 800be1c:	3324      	adds	r3, #36	; 0x24
 800be1e:	881b      	ldrh	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d117      	bne.n	800be54 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fbb8 	bl	800c59c <USBD_CtlError>
            break;
 800be2c:	e054      	b.n	800bed8 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be2e:	7bbb      	ldrb	r3, [r7, #14]
 800be30:	f003 020f 	and.w	r2, r3, #15
 800be34:	6879      	ldr	r1, [r7, #4]
 800be36:	4613      	mov	r3, r2
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	440b      	add	r3, r1
 800be40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d104      	bne.n	800be54 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fba5 	bl	800c59c <USBD_CtlError>
            break;
 800be52:	e041      	b.n	800bed8 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	da0b      	bge.n	800be74 <USBD_StdEPReq+0x228>
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
 800be5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be62:	4613      	mov	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	4413      	add	r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	3310      	adds	r3, #16
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	4413      	add	r3, r2
 800be70:	3304      	adds	r3, #4
 800be72:	e00b      	b.n	800be8c <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800be74:	7bbb      	ldrb	r3, [r7, #14]
 800be76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be7a:	4613      	mov	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	4413      	add	r3, r2
 800be8a:	3304      	adds	r3, #4
 800be8c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be8e:	7bbb      	ldrb	r3, [r7, #14]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <USBD_StdEPReq+0x24e>
 800be94:	7bbb      	ldrb	r3, [r7, #14]
 800be96:	2b80      	cmp	r3, #128	; 0x80
 800be98:	d103      	bne.n	800bea2 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2200      	movs	r2, #0
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	e00e      	b.n	800bec0 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bea2:	7bbb      	ldrb	r3, [r7, #14]
 800bea4:	4619      	mov	r1, r3
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f002 feae 	bl	800ec08 <USBD_LL_IsStallEP>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d003      	beq.n	800beba <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2201      	movs	r2, #1
 800beb6:	601a      	str	r2, [r3, #0]
 800beb8:	e002      	b.n	800bec0 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	2200      	movs	r2, #0
 800bebe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	2202      	movs	r2, #2
 800bec4:	4619      	mov	r1, r3
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fbd9 	bl	800c67e <USBD_CtlSendData>
          break;
 800becc:	e004      	b.n	800bed8 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fb63 	bl	800c59c <USBD_CtlError>
        break;
 800bed6:	bf00      	nop
      }
      break;
 800bed8:	e004      	b.n	800bee4 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fb5d 	bl	800c59c <USBD_CtlError>
      break;
 800bee2:	bf00      	nop
    }
    break;
 800bee4:	e004      	b.n	800bef0 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 fb57 	bl	800c59c <USBD_CtlError>
    break;
 800beee:	bf00      	nop
  }

  return ret;
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
	...

0800befc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf06:	2300      	movs	r3, #0
 800bf08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	885b      	ldrh	r3, [r3, #2]
 800bf16:	0a1b      	lsrs	r3, r3, #8
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	2b0e      	cmp	r3, #14
 800bf1e:	f200 8152 	bhi.w	800c1c6 <USBD_GetDescriptor+0x2ca>
 800bf22:	a201      	add	r2, pc, #4	; (adr r2, 800bf28 <USBD_GetDescriptor+0x2c>)
 800bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf28:	0800bf99 	.word	0x0800bf99
 800bf2c:	0800bfb1 	.word	0x0800bfb1
 800bf30:	0800bff1 	.word	0x0800bff1
 800bf34:	0800c1c7 	.word	0x0800c1c7
 800bf38:	0800c1c7 	.word	0x0800c1c7
 800bf3c:	0800c167 	.word	0x0800c167
 800bf40:	0800c193 	.word	0x0800c193
 800bf44:	0800c1c7 	.word	0x0800c1c7
 800bf48:	0800c1c7 	.word	0x0800c1c7
 800bf4c:	0800c1c7 	.word	0x0800c1c7
 800bf50:	0800c1c7 	.word	0x0800c1c7
 800bf54:	0800c1c7 	.word	0x0800c1c7
 800bf58:	0800c1c7 	.word	0x0800c1c7
 800bf5c:	0800c1c7 	.word	0x0800c1c7
 800bf60:	0800bf65 	.word	0x0800bf65
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf6a:	69db      	ldr	r3, [r3, #28]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00b      	beq.n	800bf88 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf76:	69db      	ldr	r3, [r3, #28]
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	7c12      	ldrb	r2, [r2, #16]
 800bf7c:	f107 0108 	add.w	r1, r7, #8
 800bf80:	4610      	mov	r0, r2
 800bf82:	4798      	blx	r3
 800bf84:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bf86:	e126      	b.n	800c1d6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fb06 	bl	800c59c <USBD_CtlError>
      err++;
 800bf90:	7afb      	ldrb	r3, [r7, #11]
 800bf92:	3301      	adds	r3, #1
 800bf94:	72fb      	strb	r3, [r7, #11]
    break;
 800bf96:	e11e      	b.n	800c1d6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	7c12      	ldrb	r2, [r2, #16]
 800bfa4:	f107 0108 	add.w	r1, r7, #8
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	4798      	blx	r3
 800bfac:	60f8      	str	r0, [r7, #12]
    break;
 800bfae:	e112      	b.n	800c1d6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	7c1b      	ldrb	r3, [r3, #16]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10d      	bne.n	800bfd4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc0:	f107 0208 	add.w	r2, r7, #8
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	4798      	blx	r3
 800bfc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	2202      	movs	r2, #2
 800bfd0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800bfd2:	e100      	b.n	800c1d6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfdc:	f107 0208 	add.w	r2, r7, #8
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	4798      	blx	r3
 800bfe4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	2202      	movs	r2, #2
 800bfec:	701a      	strb	r2, [r3, #0]
    break;
 800bfee:	e0f2      	b.n	800c1d6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	885b      	ldrh	r3, [r3, #2]
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b05      	cmp	r3, #5
 800bff8:	f200 80ac 	bhi.w	800c154 <USBD_GetDescriptor+0x258>
 800bffc:	a201      	add	r2, pc, #4	; (adr r2, 800c004 <USBD_GetDescriptor+0x108>)
 800bffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c002:	bf00      	nop
 800c004:	0800c01d 	.word	0x0800c01d
 800c008:	0800c051 	.word	0x0800c051
 800c00c:	0800c085 	.word	0x0800c085
 800c010:	0800c0b9 	.word	0x0800c0b9
 800c014:	0800c0ed 	.word	0x0800c0ed
 800c018:	0800c121 	.word	0x0800c121
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00b      	beq.n	800c040 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	7c12      	ldrb	r2, [r2, #16]
 800c034:	f107 0108 	add.w	r1, r7, #8
 800c038:	4610      	mov	r0, r2
 800c03a:	4798      	blx	r3
 800c03c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c03e:	e091      	b.n	800c164 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 faaa 	bl	800c59c <USBD_CtlError>
        err++;
 800c048:	7afb      	ldrb	r3, [r7, #11]
 800c04a:	3301      	adds	r3, #1
 800c04c:	72fb      	strb	r3, [r7, #11]
      break;
 800c04e:	e089      	b.n	800c164 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00b      	beq.n	800c074 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	7c12      	ldrb	r2, [r2, #16]
 800c068:	f107 0108 	add.w	r1, r7, #8
 800c06c:	4610      	mov	r0, r2
 800c06e:	4798      	blx	r3
 800c070:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c072:	e077      	b.n	800c164 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fa90 	bl	800c59c <USBD_CtlError>
        err++;
 800c07c:	7afb      	ldrb	r3, [r7, #11]
 800c07e:	3301      	adds	r3, #1
 800c080:	72fb      	strb	r3, [r7, #11]
      break;
 800c082:	e06f      	b.n	800c164 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00b      	beq.n	800c0a8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	7c12      	ldrb	r2, [r2, #16]
 800c09c:	f107 0108 	add.w	r1, r7, #8
 800c0a0:	4610      	mov	r0, r2
 800c0a2:	4798      	blx	r3
 800c0a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0a6:	e05d      	b.n	800c164 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fa76 	bl	800c59c <USBD_CtlError>
        err++;
 800c0b0:	7afb      	ldrb	r3, [r7, #11]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	72fb      	strb	r3, [r7, #11]
      break;
 800c0b6:	e055      	b.n	800c164 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00b      	beq.n	800c0dc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	7c12      	ldrb	r2, [r2, #16]
 800c0d0:	f107 0108 	add.w	r1, r7, #8
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	4798      	blx	r3
 800c0d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0da:	e043      	b.n	800c164 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fa5c 	bl	800c59c <USBD_CtlError>
        err++;
 800c0e4:	7afb      	ldrb	r3, [r7, #11]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	72fb      	strb	r3, [r7, #11]
      break;
 800c0ea:	e03b      	b.n	800c164 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00b      	beq.n	800c110 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0fe:	695b      	ldr	r3, [r3, #20]
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	7c12      	ldrb	r2, [r2, #16]
 800c104:	f107 0108 	add.w	r1, r7, #8
 800c108:	4610      	mov	r0, r2
 800c10a:	4798      	blx	r3
 800c10c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c10e:	e029      	b.n	800c164 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fa42 	bl	800c59c <USBD_CtlError>
        err++;
 800c118:	7afb      	ldrb	r3, [r7, #11]
 800c11a:	3301      	adds	r3, #1
 800c11c:	72fb      	strb	r3, [r7, #11]
      break;
 800c11e:	e021      	b.n	800c164 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c126:	699b      	ldr	r3, [r3, #24]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00b      	beq.n	800c144 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c132:	699b      	ldr	r3, [r3, #24]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	7c12      	ldrb	r2, [r2, #16]
 800c138:	f107 0108 	add.w	r1, r7, #8
 800c13c:	4610      	mov	r0, r2
 800c13e:	4798      	blx	r3
 800c140:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c142:	e00f      	b.n	800c164 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fa28 	bl	800c59c <USBD_CtlError>
        err++;
 800c14c:	7afb      	ldrb	r3, [r7, #11]
 800c14e:	3301      	adds	r3, #1
 800c150:	72fb      	strb	r3, [r7, #11]
      break;
 800c152:	e007      	b.n	800c164 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fa20 	bl	800c59c <USBD_CtlError>
      err++;
 800c15c:	7afb      	ldrb	r3, [r7, #11]
 800c15e:	3301      	adds	r3, #1
 800c160:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c162:	bf00      	nop
    }
    break;
 800c164:	e037      	b.n	800c1d6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	7c1b      	ldrb	r3, [r3, #16]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d109      	bne.n	800c182 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c176:	f107 0208 	add.w	r2, r7, #8
 800c17a:	4610      	mov	r0, r2
 800c17c:	4798      	blx	r3
 800c17e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c180:	e029      	b.n	800c1d6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 fa09 	bl	800c59c <USBD_CtlError>
      err++;
 800c18a:	7afb      	ldrb	r3, [r7, #11]
 800c18c:	3301      	adds	r3, #1
 800c18e:	72fb      	strb	r3, [r7, #11]
    break;
 800c190:	e021      	b.n	800c1d6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	7c1b      	ldrb	r3, [r3, #16]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10d      	bne.n	800c1b6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a2:	f107 0208 	add.w	r2, r7, #8
 800c1a6:	4610      	mov	r0, r2
 800c1a8:	4798      	blx	r3
 800c1aa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	2207      	movs	r2, #7
 800c1b2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c1b4:	e00f      	b.n	800c1d6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c1b6:	6839      	ldr	r1, [r7, #0]
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f9ef 	bl	800c59c <USBD_CtlError>
      err++;
 800c1be:	7afb      	ldrb	r3, [r7, #11]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	72fb      	strb	r3, [r7, #11]
    break;
 800c1c4:	e007      	b.n	800c1d6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f9e7 	bl	800c59c <USBD_CtlError>
    err++;
 800c1ce:	7afb      	ldrb	r3, [r7, #11]
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	72fb      	strb	r3, [r7, #11]
    break;
 800c1d4:	bf00      	nop
  }

  if (err != 0U)
 800c1d6:	7afb      	ldrb	r3, [r7, #11]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d11e      	bne.n	800c21a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	88db      	ldrh	r3, [r3, #6]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d016      	beq.n	800c212 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800c1e4:	893b      	ldrh	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00e      	beq.n	800c208 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	88da      	ldrh	r2, [r3, #6]
 800c1ee:	893b      	ldrh	r3, [r7, #8]
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	bf28      	it	cs
 800c1f4:	4613      	movcs	r3, r2
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1fa:	893b      	ldrh	r3, [r7, #8]
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	68f9      	ldr	r1, [r7, #12]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fa3c 	bl	800c67e <USBD_CtlSendData>
 800c206:	e009      	b.n	800c21c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f9c6 	bl	800c59c <USBD_CtlError>
 800c210:	e004      	b.n	800c21c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 fa70 	bl	800c6f8 <USBD_CtlSendStatus>
 800c218:	e000      	b.n	800c21c <USBD_GetDescriptor+0x320>
    return;
 800c21a:	bf00      	nop
    }
  }
}
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop

0800c224 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	889b      	ldrh	r3, [r3, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d130      	bne.n	800c298 <USBD_SetAddress+0x74>
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	88db      	ldrh	r3, [r3, #6]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d12c      	bne.n	800c298 <USBD_SetAddress+0x74>
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	885b      	ldrh	r3, [r3, #2]
 800c242:	2b7f      	cmp	r3, #127	; 0x7f
 800c244:	d828      	bhi.n	800c298 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	885b      	ldrh	r3, [r3, #2]
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c250:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c258:	2b03      	cmp	r3, #3
 800c25a:	d104      	bne.n	800c266 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f99c 	bl	800c59c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c264:	e01c      	b.n	800c2a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	7bfa      	ldrb	r2, [r7, #15]
 800c26a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
 800c270:	4619      	mov	r1, r3
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f002 fcf6 	bl	800ec64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fa3d 	bl	800c6f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c27e:	7bfb      	ldrb	r3, [r7, #15]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d004      	beq.n	800c28e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2202      	movs	r2, #2
 800c288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c28c:	e008      	b.n	800c2a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c296:	e003      	b.n	800c2a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f97e 	bl	800c59c <USBD_CtlError>
  }
}
 800c2a0:	bf00      	nop
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	885b      	ldrh	r3, [r3, #2]
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	4b4b      	ldr	r3, [pc, #300]	; (800c3ec <USBD_SetConfig+0x144>)
 800c2be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c2c0:	4b4a      	ldr	r3, [pc, #296]	; (800c3ec <USBD_SetConfig+0x144>)
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d905      	bls.n	800c2d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c2c8:	6839      	ldr	r1, [r7, #0]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f966 	bl	800c59c <USBD_CtlError>
    return USBD_FAIL;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	e087      	b.n	800c3e4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2da:	2b02      	cmp	r3, #2
 800c2dc:	d002      	beq.n	800c2e4 <USBD_SetConfig+0x3c>
 800c2de:	2b03      	cmp	r3, #3
 800c2e0:	d025      	beq.n	800c32e <USBD_SetConfig+0x86>
 800c2e2:	e071      	b.n	800c3c8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c2e4:	4b41      	ldr	r3, [pc, #260]	; (800c3ec <USBD_SetConfig+0x144>)
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d01c      	beq.n	800c326 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c2ec:	4b3f      	ldr	r3, [pc, #252]	; (800c3ec <USBD_SetConfig+0x144>)
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2f6:	4b3d      	ldr	r3, [pc, #244]	; (800c3ec <USBD_SetConfig+0x144>)
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7ff f9bd 	bl	800b67c <USBD_SetClassConfig>
 800c302:	4603      	mov	r3, r0
 800c304:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c306:	7bfb      	ldrb	r3, [r7, #15]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d004      	beq.n	800c316 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f944 	bl	800c59c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c314:	e065      	b.n	800c3e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f9ee 	bl	800c6f8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2203      	movs	r2, #3
 800c320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c324:	e05d      	b.n	800c3e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f9e6 	bl	800c6f8 <USBD_CtlSendStatus>
    break;
 800c32c:	e059      	b.n	800c3e2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c32e:	4b2f      	ldr	r3, [pc, #188]	; (800c3ec <USBD_SetConfig+0x144>)
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d112      	bne.n	800c35c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2202      	movs	r2, #2
 800c33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c33e:	4b2b      	ldr	r3, [pc, #172]	; (800c3ec <USBD_SetConfig+0x144>)
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	461a      	mov	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c348:	4b28      	ldr	r3, [pc, #160]	; (800c3ec <USBD_SetConfig+0x144>)
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	4619      	mov	r1, r3
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff f9b0 	bl	800b6b4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f9cf 	bl	800c6f8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c35a:	e042      	b.n	800c3e2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c35c:	4b23      	ldr	r3, [pc, #140]	; (800c3ec <USBD_SetConfig+0x144>)
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	461a      	mov	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	429a      	cmp	r2, r3
 800c368:	d02a      	beq.n	800c3c0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	4619      	mov	r1, r3
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff f99e 	bl	800b6b4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c378:	4b1c      	ldr	r3, [pc, #112]	; (800c3ec <USBD_SetConfig+0x144>)
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	461a      	mov	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c382:	4b1a      	ldr	r3, [pc, #104]	; (800c3ec <USBD_SetConfig+0x144>)
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7ff f977 	bl	800b67c <USBD_SetClassConfig>
 800c38e:	4603      	mov	r3, r0
 800c390:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c392:	7bfb      	ldrb	r3, [r7, #15]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00f      	beq.n	800c3b8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f8fe 	bl	800c59c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f7ff f983 	bl	800b6b4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c3b6:	e014      	b.n	800c3e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 f99d 	bl	800c6f8 <USBD_CtlSendStatus>
    break;
 800c3be:	e010      	b.n	800c3e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 f999 	bl	800c6f8 <USBD_CtlSendStatus>
    break;
 800c3c6:	e00c      	b.n	800c3e2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f8e6 	bl	800c59c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3d0:	4b06      	ldr	r3, [pc, #24]	; (800c3ec <USBD_SetConfig+0x144>)
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7ff f96c 	bl	800b6b4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c3dc:	2303      	movs	r3, #3
 800c3de:	73fb      	strb	r3, [r7, #15]
    break;
 800c3e0:	bf00      	nop
  }

  return ret;
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	200001fc 	.word	0x200001fc

0800c3f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	88db      	ldrh	r3, [r3, #6]
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d004      	beq.n	800c40c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f8c9 	bl	800c59c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c40a:	e021      	b.n	800c450 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c412:	2b01      	cmp	r3, #1
 800c414:	db17      	blt.n	800c446 <USBD_GetConfig+0x56>
 800c416:	2b02      	cmp	r3, #2
 800c418:	dd02      	ble.n	800c420 <USBD_GetConfig+0x30>
 800c41a:	2b03      	cmp	r3, #3
 800c41c:	d00b      	beq.n	800c436 <USBD_GetConfig+0x46>
 800c41e:	e012      	b.n	800c446 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	3308      	adds	r3, #8
 800c42a:	2201      	movs	r2, #1
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f925 	bl	800c67e <USBD_CtlSendData>
      break;
 800c434:	e00c      	b.n	800c450 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3304      	adds	r3, #4
 800c43a:	2201      	movs	r2, #1
 800c43c:	4619      	mov	r1, r3
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 f91d 	bl	800c67e <USBD_CtlSendData>
      break;
 800c444:	e004      	b.n	800c450 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c446:	6839      	ldr	r1, [r7, #0]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 f8a7 	bl	800c59c <USBD_CtlError>
      break;
 800c44e:	bf00      	nop
}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c468:	3b01      	subs	r3, #1
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d81e      	bhi.n	800c4ac <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	88db      	ldrh	r3, [r3, #6]
 800c472:	2b02      	cmp	r3, #2
 800c474:	d004      	beq.n	800c480 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f88f 	bl	800c59c <USBD_CtlError>
      break;
 800c47e:	e01a      	b.n	800c4b6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d005      	beq.n	800c49c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	f043 0202 	orr.w	r2, r3, #2
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	330c      	adds	r3, #12
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 f8ea 	bl	800c67e <USBD_CtlSendData>
    break;
 800c4aa:	e004      	b.n	800c4b6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 f874 	bl	800c59c <USBD_CtlError>
    break;
 800c4b4:	bf00      	nop
  }
}
 800c4b6:	bf00      	nop
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b082      	sub	sp, #8
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	885b      	ldrh	r3, [r3, #2]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d106      	bne.n	800c4de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 f90d 	bl	800c6f8 <USBD_CtlSendStatus>
  }
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d80b      	bhi.n	800c514 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	885b      	ldrh	r3, [r3, #2]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d10c      	bne.n	800c51e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f8f3 	bl	800c6f8 <USBD_CtlSendStatus>
      }
      break;
 800c512:	e004      	b.n	800c51e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 f840 	bl	800c59c <USBD_CtlError>
      break;
 800c51c:	e000      	b.n	800c520 <USBD_ClrFeature+0x3a>
      break;
 800c51e:	bf00      	nop
  }
}
 800c520:	bf00      	nop
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	781a      	ldrb	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	3301      	adds	r3, #1
 800c542:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	781a      	ldrb	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	3301      	adds	r3, #1
 800c550:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f7ff faa8 	bl	800baa8 <SWAPBYTE>
 800c558:	4603      	mov	r3, r0
 800c55a:	461a      	mov	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3301      	adds	r3, #1
 800c564:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3301      	adds	r3, #1
 800c56a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f7ff fa9b 	bl	800baa8 <SWAPBYTE>
 800c572:	4603      	mov	r3, r0
 800c574:	461a      	mov	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3301      	adds	r3, #1
 800c57e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3301      	adds	r3, #1
 800c584:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff fa8e 	bl	800baa8 <SWAPBYTE>
 800c58c:	4603      	mov	r3, r0
 800c58e:	461a      	mov	r2, r3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	80da      	strh	r2, [r3, #6]
}
 800c594:	bf00      	nop
 800c596:	3710      	adds	r7, #16
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5a6:	2180      	movs	r1, #128	; 0x80
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f002 fac1 	bl	800eb30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f002 fabd 	bl	800eb30 <USBD_LL_StallEP>
}
 800c5b6:	bf00      	nop
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b086      	sub	sp, #24
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	60f8      	str	r0, [r7, #12]
 800c5c6:	60b9      	str	r1, [r7, #8]
 800c5c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d036      	beq.n	800c642 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c5d8:	6938      	ldr	r0, [r7, #16]
 800c5da:	f000 f836 	bl	800c64a <USBD_GetLen>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	005b      	lsls	r3, r3, #1
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c5ec:	7dfb      	ldrb	r3, [r7, #23]
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	7812      	ldrb	r2, [r2, #0]
 800c5f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c5f8:	7dfb      	ldrb	r3, [r7, #23]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c5fe:	7dfb      	ldrb	r3, [r7, #23]
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	4413      	add	r3, r2
 800c604:	2203      	movs	r2, #3
 800c606:	701a      	strb	r2, [r3, #0]
  idx++;
 800c608:	7dfb      	ldrb	r3, [r7, #23]
 800c60a:	3301      	adds	r3, #1
 800c60c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c60e:	e013      	b.n	800c638 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c610:	7dfb      	ldrb	r3, [r7, #23]
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	4413      	add	r3, r2
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	7812      	ldrb	r2, [r2, #0]
 800c61a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	3301      	adds	r3, #1
 800c620:	613b      	str	r3, [r7, #16]
    idx++;
 800c622:	7dfb      	ldrb	r3, [r7, #23]
 800c624:	3301      	adds	r3, #1
 800c626:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c628:	7dfb      	ldrb	r3, [r7, #23]
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	4413      	add	r3, r2
 800c62e:	2200      	movs	r2, #0
 800c630:	701a      	strb	r2, [r3, #0]
    idx++;
 800c632:	7dfb      	ldrb	r3, [r7, #23]
 800c634:	3301      	adds	r3, #1
 800c636:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1e7      	bne.n	800c610 <USBD_GetString+0x52>
 800c640:	e000      	b.n	800c644 <USBD_GetString+0x86>
    return;
 800c642:	bf00      	nop
  }
}
 800c644:	3718      	adds	r7, #24
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c64a:	b480      	push	{r7}
 800c64c:	b085      	sub	sp, #20
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c652:	2300      	movs	r3, #0
 800c654:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c65a:	e005      	b.n	800c668 <USBD_GetLen+0x1e>
  {
    len++;
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
 800c65e:	3301      	adds	r3, #1
 800c660:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	3301      	adds	r3, #1
 800c666:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1f5      	bne.n	800c65c <USBD_GetLen+0x12>
  }

  return len;
 800c670:	7bfb      	ldrb	r3, [r7, #15]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3714      	adds	r7, #20
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b084      	sub	sp, #16
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2202      	movs	r2, #2
 800c68e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f002 fb13 	bl	800ecd0 <USBD_LL_Transmit>

  return USBD_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f002 fb02 	bl	800ecd0 <USBD_LL_Transmit>

  return USBD_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3710      	adds	r7, #16
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b084      	sub	sp, #16
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	60f8      	str	r0, [r7, #12]
 800c6de:	60b9      	str	r1, [r7, #8]
 800c6e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f002 fb29 	bl	800ed40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2204      	movs	r2, #4
 800c704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c708:	2300      	movs	r3, #0
 800c70a:	2200      	movs	r2, #0
 800c70c:	2100      	movs	r1, #0
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f002 fade 	bl	800ecd0 <USBD_LL_Transmit>

  return USBD_OK;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b082      	sub	sp, #8
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2205      	movs	r2, #5
 800c72a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c72e:	2300      	movs	r3, #0
 800c730:	2200      	movs	r2, #0
 800c732:	2100      	movs	r1, #0
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f002 fb03 	bl	800ed40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c73a:	2300      	movs	r3, #0
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c744:	b480      	push	{r7}
 800c746:	b087      	sub	sp, #28
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	4613      	mov	r3, r2
 800c750:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c752:	2301      	movs	r3, #1
 800c754:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c75a:	4b1f      	ldr	r3, [pc, #124]	; (800c7d8 <FATFS_LinkDriverEx+0x94>)
 800c75c:	7a5b      	ldrb	r3, [r3, #9]
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	2b00      	cmp	r3, #0
 800c762:	d131      	bne.n	800c7c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c764:	4b1c      	ldr	r3, [pc, #112]	; (800c7d8 <FATFS_LinkDriverEx+0x94>)
 800c766:	7a5b      	ldrb	r3, [r3, #9]
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	461a      	mov	r2, r3
 800c76c:	4b1a      	ldr	r3, [pc, #104]	; (800c7d8 <FATFS_LinkDriverEx+0x94>)
 800c76e:	2100      	movs	r1, #0
 800c770:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c772:	4b19      	ldr	r3, [pc, #100]	; (800c7d8 <FATFS_LinkDriverEx+0x94>)
 800c774:	7a5b      	ldrb	r3, [r3, #9]
 800c776:	b2db      	uxtb	r3, r3
 800c778:	4a17      	ldr	r2, [pc, #92]	; (800c7d8 <FATFS_LinkDriverEx+0x94>)
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4413      	add	r3, r2
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c782:	4b15      	ldr	r3, [pc, #84]	; (800c7d8 <FATFS_LinkDriverEx+0x94>)
 800c784:	7a5b      	ldrb	r3, [r3, #9]
 800c786:	b2db      	uxtb	r3, r3
 800c788:	461a      	mov	r2, r3
 800c78a:	4b13      	ldr	r3, [pc, #76]	; (800c7d8 <FATFS_LinkDriverEx+0x94>)
 800c78c:	4413      	add	r3, r2
 800c78e:	79fa      	ldrb	r2, [r7, #7]
 800c790:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c792:	4b11      	ldr	r3, [pc, #68]	; (800c7d8 <FATFS_LinkDriverEx+0x94>)
 800c794:	7a5b      	ldrb	r3, [r3, #9]
 800c796:	b2db      	uxtb	r3, r3
 800c798:	1c5a      	adds	r2, r3, #1
 800c79a:	b2d1      	uxtb	r1, r2
 800c79c:	4a0e      	ldr	r2, [pc, #56]	; (800c7d8 <FATFS_LinkDriverEx+0x94>)
 800c79e:	7251      	strb	r1, [r2, #9]
 800c7a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c7a2:	7dbb      	ldrb	r3, [r7, #22]
 800c7a4:	3330      	adds	r3, #48	; 0x30
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	223a      	movs	r2, #58	; 0x3a
 800c7b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	3302      	adds	r3, #2
 800c7b8:	222f      	movs	r2, #47	; 0x2f
 800c7ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	3303      	adds	r3, #3
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	371c      	adds	r7, #28
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	20000200 	.word	0x20000200

0800c7dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff ffaa 	bl	800c744 <FATFS_LinkDriverEx>
 800c7f0:	4603      	mov	r3, r0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <DualLed_RedOff>:
{
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
}

void DualLed_RedOff(void)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 800c800:	2201      	movs	r2, #1
 800c802:	2102      	movs	r1, #2
 800c804:	4802      	ldr	r0, [pc, #8]	; (800c810 <DualLed_RedOff+0x14>)
 800c806:	f7f5 f84b 	bl	80018a0 <HAL_GPIO_WritePin>
}
 800c80a:	bf00      	nop
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	48000800 	.word	0x48000800

0800c814 <DualLed_GreenOff>:
{
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
}

void DualLed_GreenOff(void)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 800c818:	2201      	movs	r2, #1
 800c81a:	2101      	movs	r1, #1
 800c81c:	4802      	ldr	r0, [pc, #8]	; (800c828 <DualLed_GreenOff+0x14>)
 800c81e:	f7f5 f83f 	bl	80018a0 <HAL_GPIO_WritePin>
}
 800c822:	bf00      	nop
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	48000800 	.word	0x48000800

0800c82c <DualLed_ToggleRed>:

void DualLed_ToggleRed(void)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 800c830:	2102      	movs	r1, #2
 800c832:	4802      	ldr	r0, [pc, #8]	; (800c83c <DualLed_ToggleRed+0x10>)
 800c834:	f7f5 f84c 	bl	80018d0 <HAL_GPIO_TogglePin>
}
 800c838:	bf00      	nop
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	48000800 	.word	0x48000800

0800c840 <DualLed_ToggleGreen>:

void DualLed_ToggleGreen(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 800c844:	2101      	movs	r1, #1
 800c846:	4802      	ldr	r0, [pc, #8]	; (800c850 <DualLed_ToggleGreen+0x10>)
 800c848:	f7f5 f842 	bl	80018d0 <HAL_GPIO_TogglePin>
}
 800c84c:	bf00      	nop
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	48000800 	.word	0x48000800

0800c854 <DualLed_BlinkGreen>:

void DualLed_BlinkGreen(uint8_t amount)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	4603      	mov	r3, r0
 800c85c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < amount; i++)
 800c85e:	2300      	movs	r3, #0
 800c860:	73fb      	strb	r3, [r7, #15]
 800c862:	e007      	b.n	800c874 <DualLed_BlinkGreen+0x20>
	{
		DualLed_ToggleGreen();
 800c864:	f7ff ffec 	bl	800c840 <DualLed_ToggleGreen>
		HAL_Delay(100);
 800c868:	2064      	movs	r0, #100	; 0x64
 800c86a:	f7f3 fd85 	bl	8000378 <HAL_Delay>
	for(uint8_t i = 0; i < amount; i++)
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
 800c870:	3301      	adds	r3, #1
 800c872:	73fb      	strb	r3, [r7, #15]
 800c874:	7bfa      	ldrb	r2, [r7, #15]
 800c876:	79fb      	ldrb	r3, [r7, #7]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d3f3      	bcc.n	800c864 <DualLed_BlinkGreen+0x10>
	}
}
 800c87c:	bf00      	nop
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <DualLed_BlinkRed>:

void DualLed_BlinkRed(uint8_t amount)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	4603      	mov	r3, r0
 800c88c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < amount; i++)
 800c88e:	2300      	movs	r3, #0
 800c890:	73fb      	strb	r3, [r7, #15]
 800c892:	e007      	b.n	800c8a4 <DualLed_BlinkRed+0x20>
	{
		DualLed_ToggleRed();
 800c894:	f7ff ffca 	bl	800c82c <DualLed_ToggleRed>
		HAL_Delay(100);
 800c898:	2064      	movs	r0, #100	; 0x64
 800c89a:	f7f3 fd6d 	bl	8000378 <HAL_Delay>
	for(uint8_t i = 0; i < amount; i++)
 800c89e:	7bfb      	ldrb	r3, [r7, #15]
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	73fb      	strb	r3, [r7, #15]
 800c8a4:	7bfa      	ldrb	r2, [r7, #15]
 800c8a6:	79fb      	ldrb	r3, [r7, #7]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d3f3      	bcc.n	800c894 <DualLed_BlinkRed+0x10>
	}
}
 800c8ac:	bf00      	nop
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <CheckResetCause>:
 * ##########################################
 *  */

/* Check what the cause of reset is */
uint8_t CheckResetCause(void)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	af00      	add	r7, sp, #0
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800c8b8:	4b25      	ldr	r3, [pc, #148]	; (800c950 <CheckResetCause+0x9c>)
 800c8ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	da01      	bge.n	800c8c6 <CheckResetCause+0x12>
	{
		return 1;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e03f      	b.n	800c946 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800c8c6:	4b22      	ldr	r3, [pc, #136]	; (800c950 <CheckResetCause+0x9c>)
 800c8c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d001      	beq.n	800c8d8 <CheckResetCause+0x24>
	{
		return 2;
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	e036      	b.n	800c946 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800c8d8:	4b1d      	ldr	r3, [pc, #116]	; (800c950 <CheckResetCause+0x9c>)
 800c8da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d001      	beq.n	800c8ea <CheckResetCause+0x36>
	{
		//If IWDG resets, can be cause of fatal error
		return 3;
 800c8e6:	2303      	movs	r3, #3
 800c8e8:	e02d      	b.n	800c946 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800c8ea:	4b19      	ldr	r3, [pc, #100]	; (800c950 <CheckResetCause+0x9c>)
 800c8ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d001      	beq.n	800c8fc <CheckResetCause+0x48>
	{
		return 4;
 800c8f8:	2304      	movs	r3, #4
 800c8fa:	e024      	b.n	800c946 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800c8fc:	4b14      	ldr	r3, [pc, #80]	; (800c950 <CheckResetCause+0x9c>)
 800c8fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c902:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c906:	2b00      	cmp	r3, #0
 800c908:	d001      	beq.n	800c90e <CheckResetCause+0x5a>
	{
		return 5;
 800c90a:	2305      	movs	r3, #5
 800c90c:	e01b      	b.n	800c946 <CheckResetCause+0x92>
	}
	// Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to ensure first that the reset cause is
	// NOT a POR/PDR reset. See note below.
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800c90e:	4b10      	ldr	r3, [pc, #64]	; (800c950 <CheckResetCause+0x9c>)
 800c910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d001      	beq.n	800c920 <CheckResetCause+0x6c>
	{
		return 6;
 800c91c:	2306      	movs	r3, #6
 800c91e:	e012      	b.n	800c946 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_FWRST))
 800c920:	4b0b      	ldr	r3, [pc, #44]	; (800c950 <CheckResetCause+0x9c>)
 800c922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d001      	beq.n	800c932 <CheckResetCause+0x7e>
	{
		return 7;
 800c92e:	2307      	movs	r3, #7
 800c930:	e009      	b.n	800c946 <CheckResetCause+0x92>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_OBLRST))
 800c932:	4b07      	ldr	r3, [pc, #28]	; (800c950 <CheckResetCause+0x9c>)
 800c934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <CheckResetCause+0x90>
	{
		return 8;
 800c940:	2308      	movs	r3, #8
 800c942:	e000      	b.n	800c946 <CheckResetCause+0x92>
	}
	else
	{
		return 0;
 800c944:	2300      	movs	r3, #0
	}

	__HAL_RCC_CLEAR_RESET_FLAGS();
}
 800c946:	4618      	mov	r0, r3
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	40021000 	.word	0x40021000

0800c954 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	69db      	ldr	r3, [r3, #28]
 800c960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c964:	2b40      	cmp	r3, #64	; 0x40
 800c966:	d101      	bne.n	800c96c <LL_USART_IsActiveFlag_TC+0x18>
 800c968:	2301      	movs	r3, #1
 800c96a:	e000      	b.n	800c96e <LL_USART_IsActiveFlag_TC+0x1a>
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 800c97a:	b480      	push	{r7}
 800c97c:	b083      	sub	sp, #12
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	69db      	ldr	r3, [r3, #28]
 800c986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c98a:	2b80      	cmp	r3, #128	; 0x80
 800c98c:	d101      	bne.n	800c992 <LL_USART_IsActiveFlag_TXE+0x18>
 800c98e:	2301      	movs	r3, #1
 800c990:	e000      	b.n	800c994 <LL_USART_IsActiveFlag_TXE+0x1a>
 800c992:	2300      	movs	r3, #0
}
 800c994:	4618      	mov	r0, r3
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	b2db      	uxtb	r3, r3
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800c9c8:	78fb      	ldrb	r3, [r7, #3]
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <USART2_Callback>:

volatile uint8_t uart2_Buffer[TX_BUFF_SIZE] = { 0 };

/* Usart2 IRQ handler */
void USART2_Callback(void)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0

	/* Check if RXNE flag high */
	if ((USART2->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 800c9e2:	4b14      	ldr	r3, [pc, #80]	; (800ca34 <USART2_Callback+0x58>)
 800c9e4:	69db      	ldr	r3, [r3, #28]
 800c9e6:	f003 0320 	and.w	r3, r3, #32
 800c9ea:	2b20      	cmp	r3, #32
 800c9ec:	d11c      	bne.n	800ca28 <USART2_Callback+0x4c>
	{
		/* Read Data Register on USART1 (Sara module) */
		uint8_t data = USART2->RDR;
 800c9ee:	4b11      	ldr	r3, [pc, #68]	; (800ca34 <USART2_Callback+0x58>)
 800c9f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	71fb      	strb	r3, [r7, #7]

		/* Disable \r and \n from buffer */
		if (data != '\r')
 800c9f6:	79fb      	ldrb	r3, [r7, #7]
 800c9f8:	2b0d      	cmp	r3, #13
 800c9fa:	d00e      	beq.n	800ca1a <USART2_Callback+0x3e>
		{
			if (data != '\n')
 800c9fc:	79fb      	ldrb	r3, [r7, #7]
 800c9fe:	2b0a      	cmp	r3, #10
 800ca00:	d00b      	beq.n	800ca1a <USART2_Callback+0x3e>
			{
				/* Add data to Buffer */
				uart2_Buffer[uart2.Head] = data;
 800ca02:	4b0d      	ldr	r3, [pc, #52]	; (800ca38 <USART2_Callback+0x5c>)
 800ca04:	881b      	ldrh	r3, [r3, #0]
 800ca06:	4619      	mov	r1, r3
 800ca08:	4a0c      	ldr	r2, [pc, #48]	; (800ca3c <USART2_Callback+0x60>)
 800ca0a:	79fb      	ldrb	r3, [r7, #7]
 800ca0c:	5453      	strb	r3, [r2, r1]
				uart2.Head++;
 800ca0e:	4b0a      	ldr	r3, [pc, #40]	; (800ca38 <USART2_Callback+0x5c>)
 800ca10:	881b      	ldrh	r3, [r3, #0]
 800ca12:	3301      	adds	r3, #1
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	4b08      	ldr	r3, [pc, #32]	; (800ca38 <USART2_Callback+0x5c>)
 800ca18:	801a      	strh	r2, [r3, #0]
			}
		}

		/* Overflow Safety */
		if (uart2.Head > TX_BUFF_SIZE - 1)
 800ca1a:	4b07      	ldr	r3, [pc, #28]	; (800ca38 <USART2_Callback+0x5c>)
 800ca1c:	881b      	ldrh	r3, [r3, #0]
 800ca1e:	2bff      	cmp	r3, #255	; 0xff
 800ca20:	d902      	bls.n	800ca28 <USART2_Callback+0x4c>
		{
			uart2.Head = 0;
 800ca22:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <USART2_Callback+0x5c>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800ca28:	bf00      	nop
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	40004400 	.word	0x40004400
 800ca38:	2000bb54 	.word	0x2000bb54
 800ca3c:	2000020c 	.word	0x2000020c

0800ca40 <SaraR_Power_Enable>:

static void SaraR_Power_Enable()
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Radio_Enable_GPIO_Port, Radio_Enable_Pin, GPIO_PIN_SET);
 800ca44:	2201      	movs	r2, #1
 800ca46:	2110      	movs	r1, #16
 800ca48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ca4c:	f7f4 ff28 	bl	80018a0 <HAL_GPIO_WritePin>
}
 800ca50:	bf00      	nop
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <SaraR_Enable>:
{
	HAL_GPIO_WritePin(Radio_Enable_GPIO_Port, Radio_Enable_Pin, GPIO_PIN_RESET);
}

static void SaraR_Enable()
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Sara_Power_On_GPIO_Port, Sara_Power_On_Pin, GPIO_PIN_SET);
 800ca58:	2201      	movs	r2, #1
 800ca5a:	2140      	movs	r1, #64	; 0x40
 800ca5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ca60:	f7f4 ff1e 	bl	80018a0 <HAL_GPIO_WritePin>
}
 800ca64:	bf00      	nop
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <SaraR_Disable>:

static void SaraR_Disable()
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Sara_Power_On_GPIO_Port, Sara_Power_On_Pin, GPIO_PIN_RESET);
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	2140      	movs	r1, #64	; 0x40
 800ca70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ca74:	f7f4 ff14 	bl	80018a0 <HAL_GPIO_WritePin>
}
 800ca78:	bf00      	nop
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <StartUpSara>:
	return SaraCheckCommand("AT\r\n", "OK", LOW_TIMEOUT);
}


uint8_t StartUpSara()
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	af00      	add	r7, sp, #0

	/*-____________________________________________________-*/
	/* Set Radio Pin high to enable power to Radio module */
//	SaraR_Reset_Disable();

	SaraR_Power_Enable();
 800ca80:	f7ff ffde 	bl	800ca40 <SaraR_Power_Enable>
	HAL_Delay(1000);
 800ca84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ca88:	f7f3 fc76 	bl	8000378 <HAL_Delay>


	/*-____________________________________________________-*/

	/* Check if Sara module already ON */
	if (SaraCheckCommand("AT\r\n", "OK", LOW_TIMEOUT))
 800ca8c:	220a      	movs	r2, #10
 800ca8e:	4915      	ldr	r1, [pc, #84]	; (800cae4 <StartUpSara+0x68>)
 800ca90:	4815      	ldr	r0, [pc, #84]	; (800cae8 <StartUpSara+0x6c>)
 800ca92:	f000 f961 	bl	800cd58 <SaraCheckCommand>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <StartUpSara+0x24>
	{
		/* Sara is on */
		return true;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	e01f      	b.n	800cae0 <StartUpSara+0x64>
	}

	/* Set PIN_B14 (Power_Sara) high */
	SaraR_Enable();
 800caa0:	f7ff ffd8 	bl	800ca54 <SaraR_Enable>

	/* 500-1500 ms to power on Sara */
	HAL_Delay(1050);
 800caa4:	f240 401a 	movw	r0, #1050	; 0x41a
 800caa8:	f7f3 fc66 	bl	8000378 <HAL_Delay>

	/* Reset PIN_B14 (Sara is now ON) */
	//DisEnableSaraPin(0); //todo
	SaraR_Disable();
 800caac:	f7ff ffdc 	bl	800ca68 <SaraR_Disable>

	/* Wait for 5 sec (minimum 4.5s) for Sara to be fuctional*/
	HAL_Delay(5000);
 800cab0:	f241 3088 	movw	r0, #5000	; 0x1388
 800cab4:	f7f3 fc60 	bl	8000378 <HAL_Delay>

//Heartbeat at end of cycle to show startup done
	//todo LED_Blink();

	/* Check if something is in the buffer, remove it */
	LL_USART_ReceiveData8(USART2);
 800cab8:	480c      	ldr	r0, [pc, #48]	; (800caec <StartUpSara+0x70>)
 800caba:	f7ff ff71 	bl	800c9a0 <LL_USART_ReceiveData8>

	/* Init start of Head */
	uart2.Head = 0;
 800cabe:	4b0c      	ldr	r3, [pc, #48]	; (800caf0 <StartUpSara+0x74>)
 800cac0:	2200      	movs	r2, #0
 800cac2:	801a      	strh	r2, [r3, #0]

	/* Init start of Tail */
	uart2.Tail = 0;
 800cac4:	4b0a      	ldr	r3, [pc, #40]	; (800caf0 <StartUpSara+0x74>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	805a      	strh	r2, [r3, #2]

	/* Check if the module is ON */
	if (SaraCheckCommand("AT\r\n", "ATOK", LOW_TIMEOUT))
 800caca:	220a      	movs	r2, #10
 800cacc:	4909      	ldr	r1, [pc, #36]	; (800caf4 <StartUpSara+0x78>)
 800cace:	4806      	ldr	r0, [pc, #24]	; (800cae8 <StartUpSara+0x6c>)
 800cad0:	f000 f942 	bl	800cd58 <SaraCheckCommand>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d001      	beq.n	800cade <StartUpSara+0x62>
	{
		/* Sara is on */
		return true;
 800cada:	2301      	movs	r3, #1
 800cadc:	e000      	b.n	800cae0 <StartUpSara+0x64>
	}

	/* Sara is not on */
	return false;
 800cade:	2300      	movs	r3, #0
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	0800ffe8 	.word	0x0800ffe8
 800cae8:	0800ffec 	.word	0x0800ffec
 800caec:	40004400 	.word	0x40004400
 800caf0:	2000bb54 	.word	0x2000bb54
 800caf4:	0800fff4 	.word	0x0800fff4

0800caf8 <SaraInitAtCommands>:

/* Init commands for Sara module */
uint8_t SaraInitAtCommands()
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	af00      	add	r7, sp, #0
	/* Disables Echo mode */
	if (!SaraDisableEchoMode())
 800cafc:	f000 f81e 	bl	800cb3c <SaraDisableEchoMode>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d101      	bne.n	800cb0a <SaraInitAtCommands+0x12>
	{
		return false;
 800cb06:	2300      	movs	r3, #0
 800cb08:	e011      	b.n	800cb2e <SaraInitAtCommands+0x36>
	}

	/* Activates the internet-LED to get visual confirmation when network is found */
	if (!SaraCheckCommand("AT+UGPIOC=16,2\r\n", "OK", LOW_TIMEOUT))
 800cb0a:	220a      	movs	r2, #10
 800cb0c:	4909      	ldr	r1, [pc, #36]	; (800cb34 <SaraInitAtCommands+0x3c>)
 800cb0e:	480a      	ldr	r0, [pc, #40]	; (800cb38 <SaraInitAtCommands+0x40>)
 800cb10:	f000 f922 	bl	800cd58 <SaraCheckCommand>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d101      	bne.n	800cb1e <SaraInitAtCommands+0x26>
	{
		return false;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e007      	b.n	800cb2e <SaraInitAtCommands+0x36>
	}

	/* Checks if SIM is ready */
	/* This does not work for SIM cards with PIN code */
	if (!SaraCheckSimStatus())
 800cb1e:	f000 f82d 	bl	800cb7c <SaraCheckSimStatus>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d101      	bne.n	800cb2c <SaraInitAtCommands+0x34>
	{
		return false;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	e000      	b.n	800cb2e <SaraInitAtCommands+0x36>
	}

	return true;
 800cb2c:	2301      	movs	r3, #1
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	0800ffe8 	.word	0x0800ffe8
 800cb38:	0800fffc 	.word	0x0800fffc

0800cb3c <SaraDisableEchoMode>:
	return SaraCheckCommand("AT+CPWROFF\r\n", "OK", DEFAULT_TIMEOUT);
}

/* Disables Echo mode on responses from Sara */
uint8_t SaraDisableEchoMode()
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
	if (SaraCheckCommand("ATE0\r\n", "ATE0OK", LOW_TIMEOUT))
 800cb40:	220a      	movs	r2, #10
 800cb42:	490b      	ldr	r1, [pc, #44]	; (800cb70 <SaraDisableEchoMode+0x34>)
 800cb44:	480b      	ldr	r0, [pc, #44]	; (800cb74 <SaraDisableEchoMode+0x38>)
 800cb46:	f000 f907 	bl	800cd58 <SaraCheckCommand>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d001      	beq.n	800cb54 <SaraDisableEchoMode+0x18>
	{
		return true;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e00a      	b.n	800cb6a <SaraDisableEchoMode+0x2e>
	}
	else if (SaraCheckCommand("ATE0\r\n", "OK", LOW_TIMEOUT))
 800cb54:	220a      	movs	r2, #10
 800cb56:	4908      	ldr	r1, [pc, #32]	; (800cb78 <SaraDisableEchoMode+0x3c>)
 800cb58:	4806      	ldr	r0, [pc, #24]	; (800cb74 <SaraDisableEchoMode+0x38>)
 800cb5a:	f000 f8fd 	bl	800cd58 <SaraCheckCommand>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d001      	beq.n	800cb68 <SaraDisableEchoMode+0x2c>
	{
		return true;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e000      	b.n	800cb6a <SaraDisableEchoMode+0x2e>
	}
	else
	{
		return false;
 800cb68:	2300      	movs	r3, #0
	}
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	08010020 	.word	0x08010020
 800cb74:	08010028 	.word	0x08010028
 800cb78:	0800ffe8 	.word	0x0800ffe8

0800cb7c <SaraCheckSimStatus>:

/* Checks if the SIM card is ready or not */
uint8_t SaraCheckSimStatus()
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	af00      	add	r7, sp, #0
	return SaraCheckCommand(
 800cb80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb84:	4903      	ldr	r1, [pc, #12]	; (800cb94 <SaraCheckSimStatus+0x18>)
 800cb86:	4804      	ldr	r0, [pc, #16]	; (800cb98 <SaraCheckSimStatus+0x1c>)
 800cb88:	f000 f8e6 	bl	800cd58 <SaraCheckCommand>
 800cb8c:	4603      	mov	r3, r0
			"AT+CPIN?\r\n",
			"+CPIN: READYOK",
			DEFAULT_TIMEOUT);
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	08010030 	.word	0x08010030
 800cb98:	08010040 	.word	0x08010040

0800cb9c <SaraWaitForResponse>:
	return SaraCheckCommand("AT+CFUN=15\r\n", "OK", DEFAULT_TIMEOUT);
}

/* Wait for response from sara module after AT command */
uint16_t SaraWaitForResponse(uint8_t *get, uint16_t count, uint32_t timeout_ms)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b088      	sub	sp, #32
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	460b      	mov	r3, r1
 800cba6:	607a      	str	r2, [r7, #4]
 800cba8:	817b      	strh	r3, [r7, #10]
	uint32_t loop = 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	61fb      	str	r3, [r7, #28]
	uint16_t u_counter = 0;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	837b      	strh	r3, [r7, #26]

	/* Loop for 'timeout' specified time */
	while (loop <= timeout_ms)
 800cbb2:	e049      	b.n	800cc48 <SaraWaitForResponse+0xac>
	{
		if (uart2.Head < uart2.Tail)
 800cbb4:	4b4b      	ldr	r3, [pc, #300]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cbb6:	881a      	ldrh	r2, [r3, #0]
 800cbb8:	4b4a      	ldr	r3, [pc, #296]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cbba:	885b      	ldrh	r3, [r3, #2]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d209      	bcs.n	800cbd4 <SaraWaitForResponse+0x38>
		{
			u_counter = TX_BUFF_SIZE - (uart2.Tail - uart2.Head);
 800cbc0:	4b48      	ldr	r3, [pc, #288]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cbc2:	881a      	ldrh	r2, [r3, #0]
 800cbc4:	4b47      	ldr	r3, [pc, #284]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cbc6:	885b      	ldrh	r3, [r3, #2]
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cbd0:	837b      	strh	r3, [r7, #26]
 800cbd2:	e005      	b.n	800cbe0 <SaraWaitForResponse+0x44>
		}

		else
		{
			u_counter = uart2.Head - uart2.Tail;
 800cbd4:	4b43      	ldr	r3, [pc, #268]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cbd6:	881a      	ldrh	r2, [r3, #0]
 800cbd8:	4b42      	ldr	r3, [pc, #264]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cbda:	885b      	ldrh	r3, [r3, #2]
 800cbdc:	1ad3      	subs	r3, r2, r3
 800cbde:	837b      	strh	r3, [r7, #26]
		}

		/* When uart buffer has specified number of bytes, copy them */
		if (count == u_counter)
 800cbe0:	897a      	ldrh	r2, [r7, #10]
 800cbe2:	8b7b      	ldrh	r3, [r7, #26]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d129      	bne.n	800cc3c <SaraWaitForResponse+0xa0>
		{
			/* Fetch the data back to call */
			for (int i = 0; i < count; i++)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	617b      	str	r3, [r7, #20]
 800cbec:	e019      	b.n	800cc22 <SaraWaitForResponse+0x86>
			{
				/* Assign received buffer the values of UART buffer */
				get[i] = uart2_Buffer[uart2.Tail];
 800cbee:	4b3d      	ldr	r3, [pc, #244]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cbf0:	885b      	ldrh	r3, [r3, #2]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	4a3b      	ldr	r2, [pc, #236]	; (800cce8 <SaraWaitForResponse+0x14c>)
 800cbfc:	5c52      	ldrb	r2, [r2, r1]
 800cbfe:	b2d2      	uxtb	r2, r2
 800cc00:	701a      	strb	r2, [r3, #0]

				/* Tail jumps one position */
				uart2.Tail++;
 800cc02:	4b38      	ldr	r3, [pc, #224]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc04:	885b      	ldrh	r3, [r3, #2]
 800cc06:	3301      	adds	r3, #1
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	4b36      	ldr	r3, [pc, #216]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc0c:	805a      	strh	r2, [r3, #2]

				/* If tail gets bigger than buffer */
				if (uart2.Tail > TX_BUFF_SIZE - 1)
 800cc0e:	4b35      	ldr	r3, [pc, #212]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc10:	885b      	ldrh	r3, [r3, #2]
 800cc12:	2bff      	cmp	r3, #255	; 0xff
 800cc14:	d902      	bls.n	800cc1c <SaraWaitForResponse+0x80>
				{
					/* Jump back to first position */
					uart2.Tail = 0;
 800cc16:	4b33      	ldr	r3, [pc, #204]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	805a      	strh	r2, [r3, #2]
			for (int i = 0; i < count; i++)
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	897b      	ldrh	r3, [r7, #10]
 800cc24:	697a      	ldr	r2, [r7, #20]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	dbe1      	blt.n	800cbee <SaraWaitForResponse+0x52>
				}
			}
			/* Reset counter for next command */
			uart2.Tail = uart2.Head;
 800cc2a:	4b2e      	ldr	r3, [pc, #184]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc2c:	881a      	ldrh	r2, [r3, #0]
 800cc2e:	4b2d      	ldr	r3, [pc, #180]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc30:	805a      	strh	r2, [r3, #2]

			/* Return number of bytes copied */
			printf("count == counter\r\n");
 800cc32:	482e      	ldr	r0, [pc, #184]	; (800ccec <SaraWaitForResponse+0x150>)
 800cc34:	f002 fba0 	bl	800f378 <puts>
			return u_counter;
 800cc38:	8b7b      	ldrh	r3, [r7, #26]
 800cc3a:	e04e      	b.n	800ccda <SaraWaitForResponse+0x13e>
		}
		/* Delay wait for more data */
		HAL_Delay(1);
 800cc3c:	2001      	movs	r0, #1
 800cc3e:	f7f3 fb9b 	bl	8000378 <HAL_Delay>

		/* (1 ms increments) */
		loop += 1;
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	3301      	adds	r3, #1
 800cc46:	61fb      	str	r3, [r7, #28]
	while (loop <= timeout_ms)
 800cc48:	69fa      	ldr	r2, [r7, #28]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d9b1      	bls.n	800cbb4 <SaraWaitForResponse+0x18>
	}

	/* Just copy the volatile counter locally */
	if (uart2.Head < uart2.Tail)
 800cc50:	4b24      	ldr	r3, [pc, #144]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc52:	881a      	ldrh	r2, [r3, #0]
 800cc54:	4b23      	ldr	r3, [pc, #140]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc56:	885b      	ldrh	r3, [r3, #2]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d209      	bcs.n	800cc70 <SaraWaitForResponse+0xd4>
	{
		/* See above explanation */
		u_counter = TX_BUFF_SIZE - (uart2.Tail - uart2.Head);
 800cc5c:	4b21      	ldr	r3, [pc, #132]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc5e:	881a      	ldrh	r2, [r3, #0]
 800cc60:	4b20      	ldr	r3, [pc, #128]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc62:	885b      	ldrh	r3, [r3, #2]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cc6c:	837b      	strh	r3, [r7, #26]
 800cc6e:	e005      	b.n	800cc7c <SaraWaitForResponse+0xe0>
	}
	else
	{
		/* See above explanation */
		u_counter = uart2.Head - uart2.Tail;
 800cc70:	4b1c      	ldr	r3, [pc, #112]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc72:	881a      	ldrh	r2, [r3, #0]
 800cc74:	4b1b      	ldr	r3, [pc, #108]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc76:	885b      	ldrh	r3, [r3, #2]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	837b      	strh	r3, [r7, #26]
	}

	/* If the uart counter is bigger than the count specified */
	if (u_counter > count)
 800cc7c:	8b7a      	ldrh	r2, [r7, #26]
 800cc7e:	897b      	ldrh	r3, [r7, #10]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d901      	bls.n	800cc88 <SaraWaitForResponse+0xec>
	{
		/* Reassign ucounter = count */
		u_counter = count;
 800cc84:	897b      	ldrh	r3, [r7, #10]
 800cc86:	837b      	strh	r3, [r7, #26]
	}

	/* Loop through the uart buffer */
	for (int i = 0; i < u_counter; i++)
 800cc88:	2300      	movs	r3, #0
 800cc8a:	613b      	str	r3, [r7, #16]
 800cc8c:	e019      	b.n	800ccc2 <SaraWaitForResponse+0x126>
	{
		/* Received buffer = uart buffer */
		get[i] = uart2_Buffer[uart2.Tail];
 800cc8e:	4b15      	ldr	r3, [pc, #84]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cc90:	885b      	ldrh	r3, [r3, #2]
 800cc92:	4619      	mov	r1, r3
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	4413      	add	r3, r2
 800cc9a:	4a13      	ldr	r2, [pc, #76]	; (800cce8 <SaraWaitForResponse+0x14c>)
 800cc9c:	5c52      	ldrb	r2, [r2, r1]
 800cc9e:	b2d2      	uxtb	r2, r2
 800cca0:	701a      	strb	r2, [r3, #0]

		/* Tail jumps one position */
		uart2.Tail++;
 800cca2:	4b10      	ldr	r3, [pc, #64]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cca4:	885b      	ldrh	r3, [r3, #2]
 800cca6:	3301      	adds	r3, #1
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	4b0e      	ldr	r3, [pc, #56]	; (800cce4 <SaraWaitForResponse+0x148>)
 800ccac:	805a      	strh	r2, [r3, #2]

		/* If tail gets bigger than buffer */
		if (uart2.Tail > TX_BUFF_SIZE - 1)
 800ccae:	4b0d      	ldr	r3, [pc, #52]	; (800cce4 <SaraWaitForResponse+0x148>)
 800ccb0:	885b      	ldrh	r3, [r3, #2]
 800ccb2:	2bff      	cmp	r3, #255	; 0xff
 800ccb4:	d902      	bls.n	800ccbc <SaraWaitForResponse+0x120>
		{
			/* Jump back to first position */
			uart2.Tail = 0;
 800ccb6:	4b0b      	ldr	r3, [pc, #44]	; (800cce4 <SaraWaitForResponse+0x148>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < u_counter; i++)
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	613b      	str	r3, [r7, #16]
 800ccc2:	8b7b      	ldrh	r3, [r7, #26]
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	dbe1      	blt.n	800cc8e <SaraWaitForResponse+0xf2>
		}
	}
	/* Make sure that the tail = head so that they start at same place for new command */
	uart2.Tail = uart2.Head;
 800ccca:	4b06      	ldr	r3, [pc, #24]	; (800cce4 <SaraWaitForResponse+0x148>)
 800cccc:	881a      	ldrh	r2, [r3, #0]
 800ccce:	4b05      	ldr	r3, [pc, #20]	; (800cce4 <SaraWaitForResponse+0x148>)
 800ccd0:	805a      	strh	r2, [r3, #2]

	/* Return number of bytes copied */
	printf("count != counter\r\n");
 800ccd2:	4807      	ldr	r0, [pc, #28]	; (800ccf0 <SaraWaitForResponse+0x154>)
 800ccd4:	f002 fb50 	bl	800f378 <puts>
	return u_counter;
 800ccd8:	8b7b      	ldrh	r3, [r7, #26]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3720      	adds	r7, #32
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	2000bb54 	.word	0x2000bb54
 800cce8:	2000020c 	.word	0x2000020c
 800ccec:	0801006c 	.word	0x0801006c
 800ccf0:	08010080 	.word	0x08010080

0800ccf4 <SaraSendCommand>:

/* Send Command to sara module */
void SaraSendCommand(const char *cmd)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(cmd);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7f3 fa6f 	bl	80001e0 <strlen>
 800cd02:	4603      	mov	r3, r0
 800cd04:	72bb      	strb	r3, [r7, #10]
	uint8_t *pchar = (uint8_t*) cmd;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	60fb      	str	r3, [r7, #12]

	/* Send characters one per one, until last char to be sent */
	for (uint8_t i = 0; i < len; i++)
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	72fb      	strb	r3, [r7, #11]
 800cd0e:	e011      	b.n	800cd34 <SaraSendCommand+0x40>
	{
		/* Wait for TXE flag to be raised */
		while (!LL_USART_IsActiveFlag_TXE(USART2))
 800cd10:	bf00      	nop
 800cd12:	4810      	ldr	r0, [pc, #64]	; (800cd54 <SaraSendCommand+0x60>)
 800cd14:	f7ff fe31 	bl	800c97a <LL_USART_IsActiveFlag_TXE>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0f9      	beq.n	800cd12 <SaraSendCommand+0x1e>
		{
		}

		/* Write character in Transmit Data register.
		 TXE flag is cleared by writing data in TDR register */
		LL_USART_TransmitData8(USART2, *pchar++);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	1c5a      	adds	r2, r3, #1
 800cd22:	60fa      	str	r2, [r7, #12]
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	4619      	mov	r1, r3
 800cd28:	480a      	ldr	r0, [pc, #40]	; (800cd54 <SaraSendCommand+0x60>)
 800cd2a:	f7ff fe47 	bl	800c9bc <LL_USART_TransmitData8>
	for (uint8_t i = 0; i < len; i++)
 800cd2e:	7afb      	ldrb	r3, [r7, #11]
 800cd30:	3301      	adds	r3, #1
 800cd32:	72fb      	strb	r3, [r7, #11]
 800cd34:	7afa      	ldrb	r2, [r7, #11]
 800cd36:	7abb      	ldrb	r3, [r7, #10]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d3e9      	bcc.n	800cd10 <SaraSendCommand+0x1c>
	}

	/* Wait for TC flag to be raised for last char */
	while (!LL_USART_IsActiveFlag_TC(USART2))
 800cd3c:	bf00      	nop
 800cd3e:	4805      	ldr	r0, [pc, #20]	; (800cd54 <SaraSendCommand+0x60>)
 800cd40:	f7ff fe08 	bl	800c954 <LL_USART_IsActiveFlag_TC>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d0f9      	beq.n	800cd3e <SaraSendCommand+0x4a>
	{
	}

}
 800cd4a:	bf00      	nop
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	40004400 	.word	0x40004400

0800cd58 <SaraCheckCommand>:

/* Send command and check if the received command is as expected */
uint8_t SaraCheckCommand(const char *sendCommand, const char *receiveCommand, uint32_t timeout_ms)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b0c6      	sub	sp, #280	; 0x118
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	f107 030c 	add.w	r3, r7, #12
 800cd62:	6018      	str	r0, [r3, #0]
 800cd64:	f107 0308 	add.w	r3, r7, #8
 800cd68:	6019      	str	r1, [r3, #0]
 800cd6a:	1d3b      	adds	r3, r7, #4
 800cd6c:	601a      	str	r2, [r3, #0]
	/* Get length of expected response */
	uint8_t len = strlen(receiveCommand);
 800cd6e:	f107 0308 	add.w	r3, r7, #8
 800cd72:	6818      	ldr	r0, [r3, #0]
 800cd74:	f7f3 fa34 	bl	80001e0 <strlen>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

	/* Init local receiveBuffer to compare against expected response */
	uint8_t receiveBuff[TX_BUFF_SIZE] = { 0 };
 800cd7e:	f107 0310 	add.w	r3, r7, #16
 800cd82:	4618      	mov	r0, r3
 800cd84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd88:	461a      	mov	r2, r3
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	f002 f9d0 	bl	800f130 <memset>

	/* Send desired command to Sara module */
	SaraSendCommand(sendCommand);
 800cd90:	f107 030c 	add.w	r3, r7, #12
 800cd94:	6818      	ldr	r0, [r3, #0]
 800cd96:	f7ff ffad 	bl	800ccf4 <SaraSendCommand>

	/* Wait for response from Sara module with the given length of expected response */
	SaraWaitForResponse(receiveBuff, len, timeout_ms);
 800cd9a:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800cd9e:	b299      	uxth	r1, r3
 800cda0:	1d3b      	adds	r3, r7, #4
 800cda2:	f107 0010 	add.w	r0, r7, #16
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	f7ff fef8 	bl	800cb9c <SaraWaitForResponse>

	/* Debug */
	printf("Received data: %s, Expected Data: %s\r\n", receiveBuff, receiveCommand);
 800cdac:	f107 0308 	add.w	r3, r7, #8
 800cdb0:	f107 0110 	add.w	r1, r7, #16
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	4814      	ldr	r0, [pc, #80]	; (800ce08 <SaraCheckCommand+0xb0>)
 800cdb8:	f002 fa6a 	bl	800f290 <iprintf>

	/* Loop through both Buffers to see if they match */
	for (int i = 0; i < len; i++)
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800cdc2:	e015      	b.n	800cdf0 <SaraCheckCommand+0x98>
	{
		if (receiveBuff[i] != receiveCommand[i])
 800cdc4:	f107 0210 	add.w	r2, r7, #16
 800cdc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdcc:	4413      	add	r3, r2
 800cdce:	781a      	ldrb	r2, [r3, #0]
 800cdd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdd4:	f107 0108 	add.w	r1, r7, #8
 800cdd8:	6809      	ldr	r1, [r1, #0]
 800cdda:	440b      	add	r3, r1
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d001      	beq.n	800cde6 <SaraCheckCommand+0x8e>
		{
			/* If an element does not match, print the response and the expected response */
			return false;
 800cde2:	2300      	movs	r3, #0
 800cde4:	e00b      	b.n	800cdfe <SaraCheckCommand+0xa6>
	for (int i = 0; i < len; i++)
 800cde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdea:	3301      	adds	r3, #1
 800cdec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800cdf0:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800cdf4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	dbe3      	blt.n	800cdc4 <SaraCheckCommand+0x6c>
		}
	}

	/* If all element do match, print the response and the expected response */
	return true;
 800cdfc:	2301      	movs	r3, #1

}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	08010094 	.word	0x08010094

0800ce0c <LL_USART_IsActiveFlag_TXE>:
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	69db      	ldr	r3, [r3, #28]
 800ce18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce1c:	2b80      	cmp	r3, #128	; 0x80
 800ce1e:	d101      	bne.n	800ce24 <LL_USART_IsActiveFlag_TXE+0x18>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e000      	b.n	800ce26 <LL_USART_IsActiveFlag_TXE+0x1a>
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	370c      	adds	r7, #12
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <LL_USART_TransmitData8>:
{
 800ce32:	b480      	push	{r7}
 800ce34:	b083      	sub	sp, #12
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800ce3e:	78fb      	ldrb	r3, [r7, #3]
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800ce46:	bf00      	nop
 800ce48:	370c      	adds	r7, #12
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
	...

0800ce54 <_write>:
				 printf("string\r\n");
				 or
				 printf("Variable 1: %d\r\n, var1); to get the variable printed
--------------------------------------------------------------------------------------------------*/
int _write(int file, char *data, int len)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d00a      	beq.n	800ce7c <_write+0x28>
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d007      	beq.n	800ce7c <_write+0x28>
	{
		errno = EBADF;
 800ce6c:	f002 f926 	bl	800f0bc <__errno>
 800ce70:	4602      	mov	r2, r0
 800ce72:	2309      	movs	r3, #9
 800ce74:	6013      	str	r3, [r2, #0]
		return -1;
 800ce76:	f04f 33ff 	mov.w	r3, #4294967295
 800ce7a:	e01c      	b.n	800ceb6 <_write+0x62>
	}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	617b      	str	r3, [r7, #20]
 800ce80:	e014      	b.n	800ceac <_write+0x58>
	{
		while (!LL_USART_IsActiveFlag_TXE(USART_Generic))
 800ce82:	bf00      	nop
 800ce84:	4b0e      	ldr	r3, [pc, #56]	; (800cec0 <_write+0x6c>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff ffbf 	bl	800ce0c <LL_USART_IsActiveFlag_TXE>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d0f7      	beq.n	800ce84 <_write+0x30>
		{
		}

		LL_USART_TransmitData8(USART_Generic, *data++);
 800ce94:	4b0a      	ldr	r3, [pc, #40]	; (800cec0 <_write+0x6c>)
 800ce96:	6818      	ldr	r0, [r3, #0]
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	1c5a      	adds	r2, r3, #1
 800ce9c:	60ba      	str	r2, [r7, #8]
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	4619      	mov	r1, r3
 800cea2:	f7ff ffc6 	bl	800ce32 <LL_USART_TransmitData8>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	617b      	str	r3, [r7, #20]
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	dbe6      	blt.n	800ce82 <_write+0x2e>
	/* Wait for TC flag to be raised for last char */
//	while (!LL_USART_IsActiveFlag_TC(LPUART1))
//	{
//	}

	return 0;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3718      	adds	r7, #24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	20000110 	.word	0x20000110

0800cec4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800ceca:	463b      	mov	r3, r7
 800cecc:	2200      	movs	r2, #0
 800cece:	601a      	str	r2, [r3, #0]
 800ced0:	605a      	str	r2, [r3, #4]
 800ced2:	609a      	str	r2, [r3, #8]
 800ced4:	60da      	str	r2, [r3, #12]
 800ced6:	611a      	str	r2, [r3, #16]
 800ced8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800ceda:	4b29      	ldr	r3, [pc, #164]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cedc:	4a29      	ldr	r2, [pc, #164]	; (800cf84 <MX_ADC1_Init+0xc0>)
 800cede:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800cee0:	4b27      	ldr	r3, [pc, #156]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800cee6:	4b26      	ldr	r3, [pc, #152]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ceec:	4b24      	ldr	r3, [pc, #144]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800ceee:	2200      	movs	r2, #0
 800cef0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800cef2:	4b23      	ldr	r3, [pc, #140]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cef8:	4b21      	ldr	r3, [pc, #132]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cefa:	2204      	movs	r2, #4
 800cefc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800cefe:	4b20      	ldr	r3, [pc, #128]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800cf04:	4b1e      	ldr	r3, [pc, #120]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cf06:	2200      	movs	r2, #0
 800cf08:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800cf0a:	4b1d      	ldr	r3, [pc, #116]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800cf10:	4b1b      	ldr	r3, [pc, #108]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cf12:	2200      	movs	r2, #0
 800cf14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cf18:	4b19      	ldr	r3, [pc, #100]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cf1e:	4b18      	ldr	r3, [pc, #96]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800cf24:	4b16      	ldr	r3, [pc, #88]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cf26:	2200      	movs	r2, #0
 800cf28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800cf2c:	4b14      	ldr	r3, [pc, #80]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800cf32:	4b13      	ldr	r3, [pc, #76]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cf3a:	4811      	ldr	r0, [pc, #68]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cf3c:	f7f3 fbde 	bl	80006fc <HAL_ADC_Init>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d001      	beq.n	800cf4a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800cf46:	f000 fd45 	bl	800d9d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800cf4a:	4b0f      	ldr	r3, [pc, #60]	; (800cf88 <MX_ADC1_Init+0xc4>)
 800cf4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800cf4e:	2306      	movs	r3, #6
 800cf50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800cf52:	2300      	movs	r3, #0
 800cf54:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800cf56:	237f      	movs	r3, #127	; 0x7f
 800cf58:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800cf5a:	2304      	movs	r3, #4
 800cf5c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cf62:	463b      	mov	r3, r7
 800cf64:	4619      	mov	r1, r3
 800cf66:	4806      	ldr	r0, [pc, #24]	; (800cf80 <MX_ADC1_Init+0xbc>)
 800cf68:	f7f3 fd12 	bl	8000990 <HAL_ADC_ConfigChannel>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d001      	beq.n	800cf76 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800cf72:	f000 fd2f 	bl	800d9d4 <Error_Handler>
  }

}
 800cf76:	bf00      	nop
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	2000bb78 	.word	0x2000bb78
 800cf84:	50040000 	.word	0x50040000
 800cf88:	10c00010 	.word	0x10c00010

0800cf8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b08a      	sub	sp, #40	; 0x28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf94:	f107 0314 	add.w	r3, r7, #20
 800cf98:	2200      	movs	r2, #0
 800cf9a:	601a      	str	r2, [r3, #0]
 800cf9c:	605a      	str	r2, [r3, #4]
 800cf9e:	609a      	str	r2, [r3, #8]
 800cfa0:	60da      	str	r2, [r3, #12]
 800cfa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a15      	ldr	r2, [pc, #84]	; (800d000 <HAL_ADC_MspInit+0x74>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d123      	bne.n	800cff6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800cfae:	4b15      	ldr	r3, [pc, #84]	; (800d004 <HAL_ADC_MspInit+0x78>)
 800cfb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfb2:	4a14      	ldr	r2, [pc, #80]	; (800d004 <HAL_ADC_MspInit+0x78>)
 800cfb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cfb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cfba:	4b12      	ldr	r3, [pc, #72]	; (800d004 <HAL_ADC_MspInit+0x78>)
 800cfbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfc2:	613b      	str	r3, [r7, #16]
 800cfc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cfc6:	4b0f      	ldr	r3, [pc, #60]	; (800d004 <HAL_ADC_MspInit+0x78>)
 800cfc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfca:	4a0e      	ldr	r2, [pc, #56]	; (800d004 <HAL_ADC_MspInit+0x78>)
 800cfcc:	f043 0304 	orr.w	r3, r3, #4
 800cfd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cfd2:	4b0c      	ldr	r3, [pc, #48]	; (800d004 <HAL_ADC_MspInit+0x78>)
 800cfd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfd6:	f003 0304 	and.w	r3, r3, #4
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_Revision_Pin;
 800cfde:	2308      	movs	r3, #8
 800cfe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800cfe2:	230b      	movs	r3, #11
 800cfe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Revision_GPIO_Port, &GPIO_InitStruct);
 800cfea:	f107 0314 	add.w	r3, r7, #20
 800cfee:	4619      	mov	r1, r3
 800cff0:	4805      	ldr	r0, [pc, #20]	; (800d008 <HAL_ADC_MspInit+0x7c>)
 800cff2:	f7f4 fac3 	bl	800157c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800cff6:	bf00      	nop
 800cff8:	3728      	adds	r7, #40	; 0x28
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	50040000 	.word	0x50040000
 800d004:	40021000 	.word	0x40021000
 800d008:	48000800 	.word	0x48000800

0800d00c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d016:	f000 f879 	bl	800d10c <BSP_SD_IsDetected>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d001      	beq.n	800d024 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d020:	2302      	movs	r3, #2
 800d022:	e012      	b.n	800d04a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d024:	480b      	ldr	r0, [pc, #44]	; (800d054 <BSP_SD_Init+0x48>)
 800d026:	f7f8 fc73 	bl	8005910 <HAL_SD_Init>
 800d02a:	4603      	mov	r3, r0
 800d02c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d02e:	79fb      	ldrb	r3, [r7, #7]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d109      	bne.n	800d048 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d034:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d038:	4806      	ldr	r0, [pc, #24]	; (800d054 <BSP_SD_Init+0x48>)
 800d03a:	f7f9 fa85 	bl	8006548 <HAL_SD_ConfigWideBusOperation>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d044:	2301      	movs	r3, #1
 800d046:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d048:	79fb      	ldrb	r3, [r7, #7]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3708      	adds	r7, #8
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	2000c1bc 	.word	0x2000c1bc

0800d058 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b088      	sub	sp, #32
 800d05c:	af02      	add	r7, sp, #8
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
 800d064:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	68f9      	ldr	r1, [r7, #12]
 800d074:	4806      	ldr	r0, [pc, #24]	; (800d090 <BSP_SD_ReadBlocks+0x38>)
 800d076:	f7f8 fd33 	bl	8005ae0 <HAL_SD_ReadBlocks>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d084:	7dfb      	ldrb	r3, [r7, #23]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3718      	adds	r7, #24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	2000c1bc 	.word	0x2000c1bc

0800d094 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b088      	sub	sp, #32
 800d098:	af02      	add	r7, sp, #8
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
 800d0a0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	68f9      	ldr	r1, [r7, #12]
 800d0b0:	4806      	ldr	r0, [pc, #24]	; (800d0cc <BSP_SD_WriteBlocks+0x38>)
 800d0b2:	f7f8 fef3 	bl	8005e9c <HAL_SD_WriteBlocks>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3718      	adds	r7, #24
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	2000c1bc 	.word	0x2000c1bc

0800d0d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d0d4:	4805      	ldr	r0, [pc, #20]	; (800d0ec <BSP_SD_GetCardState+0x1c>)
 800d0d6:	f7f9 facd 	bl	8006674 <HAL_SD_GetCardState>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b04      	cmp	r3, #4
 800d0de:	bf14      	ite	ne
 800d0e0:	2301      	movne	r3, #1
 800d0e2:	2300      	moveq	r3, #0
 800d0e4:	b2db      	uxtb	r3, r3
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	2000c1bc 	.word	0x2000c1bc

0800d0f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d0f8:	6879      	ldr	r1, [r7, #4]
 800d0fa:	4803      	ldr	r0, [pc, #12]	; (800d108 <BSP_SD_GetCardInfo+0x18>)
 800d0fc:	f7f9 f9f8 	bl	80064f0 <HAL_SD_GetCardInfo>
}
 800d100:	bf00      	nop
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	2000c1bc 	.word	0x2000c1bc

0800d10c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d112:	2301      	movs	r3, #1
 800d114:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d116:	f000 f85f 	bl	800d1d8 <BSP_PlatformIsDetected>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d120:	2300      	movs	r3, #0
 800d122:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d124:	79fb      	ldrb	r3, [r7, #7]
 800d126:	b2db      	uxtb	r3, r3
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800d134:	4b0d      	ldr	r3, [pc, #52]	; (800d16c <MX_CRC_Init+0x3c>)
 800d136:	4a0e      	ldr	r2, [pc, #56]	; (800d170 <MX_CRC_Init+0x40>)
 800d138:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d13a:	4b0c      	ldr	r3, [pc, #48]	; (800d16c <MX_CRC_Init+0x3c>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800d140:	4b0a      	ldr	r3, [pc, #40]	; (800d16c <MX_CRC_Init+0x3c>)
 800d142:	2200      	movs	r2, #0
 800d144:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800d146:	4b09      	ldr	r3, [pc, #36]	; (800d16c <MX_CRC_Init+0x3c>)
 800d148:	2200      	movs	r2, #0
 800d14a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800d14c:	4b07      	ldr	r3, [pc, #28]	; (800d16c <MX_CRC_Init+0x3c>)
 800d14e:	2200      	movs	r2, #0
 800d150:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800d152:	4b06      	ldr	r3, [pc, #24]	; (800d16c <MX_CRC_Init+0x3c>)
 800d154:	2201      	movs	r2, #1
 800d156:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800d158:	4804      	ldr	r0, [pc, #16]	; (800d16c <MX_CRC_Init+0x3c>)
 800d15a:	f7f4 f925 	bl	80013a8 <HAL_CRC_Init>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d001      	beq.n	800d168 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800d164:	f000 fc36 	bl	800d9d4 <Error_Handler>
  }

}
 800d168:	bf00      	nop
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	2000bbe0 	.word	0x2000bbe0
 800d170:	40023000 	.word	0x40023000

0800d174 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a0a      	ldr	r2, [pc, #40]	; (800d1ac <HAL_CRC_MspInit+0x38>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d10b      	bne.n	800d19e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800d186:	4b0a      	ldr	r3, [pc, #40]	; (800d1b0 <HAL_CRC_MspInit+0x3c>)
 800d188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d18a:	4a09      	ldr	r2, [pc, #36]	; (800d1b0 <HAL_CRC_MspInit+0x3c>)
 800d18c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d190:	6493      	str	r3, [r2, #72]	; 0x48
 800d192:	4b07      	ldr	r3, [pc, #28]	; (800d1b0 <HAL_CRC_MspInit+0x3c>)
 800d194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800d19e:	bf00      	nop
 800d1a0:	3714      	adds	r7, #20
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	40023000 	.word	0x40023000
 800d1b0:	40021000 	.word	0x40021000

0800d1b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d1b8:	4904      	ldr	r1, [pc, #16]	; (800d1cc <MX_FATFS_Init+0x18>)
 800d1ba:	4805      	ldr	r0, [pc, #20]	; (800d1d0 <MX_FATFS_Init+0x1c>)
 800d1bc:	f7ff fb0e 	bl	800c7dc <FATFS_LinkDriver>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	4b03      	ldr	r3, [pc, #12]	; (800d1d4 <MX_FATFS_Init+0x20>)
 800d1c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d1c8:	bf00      	nop
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	2000bc08 	.word	0x2000bc08
 800d1d0:	0801018c 	.word	0x0801018c
 800d1d4:	2000bc04 	.word	0x2000bc04

0800d1d8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d1e2:	2180      	movs	r1, #128	; 0x80
 800d1e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d1e8:	f7f4 fb42 	bl	8001870 <HAL_GPIO_ReadPin>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d001      	beq.n	800d1f6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d1f6:	79fb      	ldrb	r3, [r7, #7]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b08a      	sub	sp, #40	; 0x28
 800d204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d206:	f107 0314 	add.w	r3, r7, #20
 800d20a:	2200      	movs	r2, #0
 800d20c:	601a      	str	r2, [r3, #0]
 800d20e:	605a      	str	r2, [r3, #4]
 800d210:	609a      	str	r2, [r3, #8]
 800d212:	60da      	str	r2, [r3, #12]
 800d214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d216:	4b67      	ldr	r3, [pc, #412]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d21a:	4a66      	ldr	r2, [pc, #408]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d21c:	f043 0304 	orr.w	r3, r3, #4
 800d220:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d222:	4b64      	ldr	r3, [pc, #400]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d226:	f003 0304 	and.w	r3, r3, #4
 800d22a:	613b      	str	r3, [r7, #16]
 800d22c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d22e:	4b61      	ldr	r3, [pc, #388]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d232:	4a60      	ldr	r2, [pc, #384]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d23a:	4b5e      	ldr	r3, [pc, #376]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d242:	60fb      	str	r3, [r7, #12]
 800d244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d246:	4b5b      	ldr	r3, [pc, #364]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d24a:	4a5a      	ldr	r2, [pc, #360]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d24c:	f043 0301 	orr.w	r3, r3, #1
 800d250:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d252:	4b58      	ldr	r3, [pc, #352]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d256:	f003 0301 	and.w	r3, r3, #1
 800d25a:	60bb      	str	r3, [r7, #8]
 800d25c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d25e:	4b55      	ldr	r3, [pc, #340]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d262:	4a54      	ldr	r2, [pc, #336]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d264:	f043 0302 	orr.w	r3, r3, #2
 800d268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d26a:	4b52      	ldr	r3, [pc, #328]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d26e:	f003 0302 	and.w	r3, r3, #2
 800d272:	607b      	str	r3, [r7, #4]
 800d274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d276:	4b4f      	ldr	r3, [pc, #316]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d27a:	4a4e      	ldr	r2, [pc, #312]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d27c:	f043 0308 	orr.w	r3, r3, #8
 800d280:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d282:	4b4c      	ldr	r3, [pc, #304]	; (800d3b4 <MX_GPIO_Init+0x1b4>)
 800d284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d286:	f003 0308 	and.w	r3, r3, #8
 800d28a:	603b      	str	r3, [r7, #0]
 800d28c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Spectrum_Enable_Pin|LED_Green_Pin|LED_Red_Pin|Revision_Enable_Pin
 800d28e:	2200      	movs	r2, #0
 800d290:	f242 01c7 	movw	r1, #8391	; 0x20c7
 800d294:	4848      	ldr	r0, [pc, #288]	; (800d3b8 <MX_GPIO_Init+0x1b8>)
 800d296:	f7f4 fb03 	bl	80018a0 <HAL_GPIO_WritePin>
                          |Screen_DC_Pin|Screen_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Radio_Enable_Pin|Sara_Reset_Pin|Sara_Power_On_Pin|Screen_Busy_Pin
 800d29a:	2200      	movs	r2, #0
 800d29c:	f248 1170 	movw	r1, #33136	; 0x8170
 800d2a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d2a4:	f7f4 fafc 	bl	80018a0 <HAL_GPIO_WritePin>
                          |SD_Enable_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Screen_Enable_Pin|Acceleromater_Enable_Pin|SPI_CS_Pin|Sensor_Enable_Pin, GPIO_PIN_RESET);
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f241 0126 	movw	r1, #4134	; 0x1026
 800d2ae:	4843      	ldr	r0, [pc, #268]	; (800d3bc <MX_GPIO_Init+0x1bc>)
 800d2b0:	f7f4 faf6 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = Spectrum_Enable_Pin|LED_Green_Pin|LED_Red_Pin|Revision_Enable_Pin
 800d2b4:	f242 03c7 	movw	r3, #8391	; 0x20c7
 800d2b8:	617b      	str	r3, [r7, #20]
                          |Screen_DC_Pin|Screen_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d2c6:	f107 0314 	add.w	r3, r7, #20
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	483a      	ldr	r0, [pc, #232]	; (800d3b8 <MX_GPIO_Init+0x1b8>)
 800d2ce:	f7f4 f955 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SendData_EXTI0_Pin;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d2d6:	4b3a      	ldr	r3, [pc, #232]	; (800d3c0 <MX_GPIO_Init+0x1c0>)
 800d2d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SendData_EXTI0_GPIO_Port, &GPIO_InitStruct);
 800d2de:	f107 0314 	add.w	r3, r7, #20
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d2e8:	f7f4 f948 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Radio_NetStatus_Pin|SD_Detect_Pin;
 800d2ec:	2382      	movs	r3, #130	; 0x82
 800d2ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2f8:	f107 0314 	add.w	r3, r7, #20
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d302:	f7f4 f93b 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Radio_Enable_Pin|Sara_Reset_Pin|Sara_Power_On_Pin|Screen_Busy_Pin
 800d306:	f248 1370 	movw	r3, #33136	; 0x8170
 800d30a:	617b      	str	r3, [r7, #20]
                          |SD_Enable_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d30c:	2301      	movs	r3, #1
 800d30e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d310:	2300      	movs	r3, #0
 800d312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d314:	2300      	movs	r3, #0
 800d316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d318:	f107 0314 	add.w	r3, r7, #20
 800d31c:	4619      	mov	r1, r3
 800d31e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d322:	f7f4 f92b 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d326:	2301      	movs	r3, #1
 800d328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d32a:	2303      	movs	r3, #3
 800d32c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d32e:	2300      	movs	r3, #0
 800d330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d332:	f107 0314 	add.w	r3, r7, #20
 800d336:	4619      	mov	r1, r3
 800d338:	4820      	ldr	r0, [pc, #128]	; (800d3bc <MX_GPIO_Init+0x1bc>)
 800d33a:	f7f4 f91f 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Screen_Enable_Pin|Acceleromater_Enable_Pin|SPI_CS_Pin|Sensor_Enable_Pin;
 800d33e:	f241 0326 	movw	r3, #4134	; 0x1026
 800d342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d344:	2301      	movs	r3, #1
 800d346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d34c:	2300      	movs	r3, #0
 800d34e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d350:	f107 0314 	add.w	r3, r7, #20
 800d354:	4619      	mov	r1, r3
 800d356:	4819      	ldr	r0, [pc, #100]	; (800d3bc <MX_GPIO_Init+0x1bc>)
 800d358:	f7f4 f910 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_Detect_EXTI4_Pin;
 800d35c:	2310      	movs	r3, #16
 800d35e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d360:	4b18      	ldr	r3, [pc, #96]	; (800d3c4 <MX_GPIO_Init+0x1c4>)
 800d362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d364:	2300      	movs	r3, #0
 800d366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_Detect_EXTI4_GPIO_Port, &GPIO_InitStruct);
 800d368:	f107 0314 	add.w	r3, r7, #20
 800d36c:	4619      	mov	r1, r3
 800d36e:	4813      	ldr	r0, [pc, #76]	; (800d3bc <MX_GPIO_Init+0x1bc>)
 800d370:	f7f4 f904 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d374:	2308      	movs	r3, #8
 800d376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d378:	2303      	movs	r3, #3
 800d37a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d37c:	2300      	movs	r3, #0
 800d37e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d380:	f107 0314 	add.w	r3, r7, #20
 800d384:	4619      	mov	r1, r3
 800d386:	4810      	ldr	r0, [pc, #64]	; (800d3c8 <MX_GPIO_Init+0x1c8>)
 800d388:	f7f4 f8f8 	bl	800157c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800d38c:	2200      	movs	r2, #0
 800d38e:	2100      	movs	r1, #0
 800d390:	2006      	movs	r0, #6
 800d392:	f7f3 ffd2 	bl	800133a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800d396:	2006      	movs	r0, #6
 800d398:	f7f3 ffeb 	bl	8001372 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800d39c:	2200      	movs	r2, #0
 800d39e:	2100      	movs	r1, #0
 800d3a0:	200a      	movs	r0, #10
 800d3a2:	f7f3 ffca 	bl	800133a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800d3a6:	200a      	movs	r0, #10
 800d3a8:	f7f3 ffe3 	bl	8001372 <HAL_NVIC_EnableIRQ>

}
 800d3ac:	bf00      	nop
 800d3ae:	3728      	adds	r7, #40	; 0x28
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	40021000 	.word	0x40021000
 800d3b8:	48000800 	.word	0x48000800
 800d3bc:	48000400 	.word	0x48000400
 800d3c0:	10210000 	.word	0x10210000
 800d3c4:	10110000 	.word	0x10110000
 800d3c8:	48001c00 	.word	0x48001c00

0800d3cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800d3d0:	4b1b      	ldr	r3, [pc, #108]	; (800d440 <MX_I2C1_Init+0x74>)
 800d3d2:	4a1c      	ldr	r2, [pc, #112]	; (800d444 <MX_I2C1_Init+0x78>)
 800d3d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800d3d6:	4b1a      	ldr	r3, [pc, #104]	; (800d440 <MX_I2C1_Init+0x74>)
 800d3d8:	4a1b      	ldr	r2, [pc, #108]	; (800d448 <MX_I2C1_Init+0x7c>)
 800d3da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800d3dc:	4b18      	ldr	r3, [pc, #96]	; (800d440 <MX_I2C1_Init+0x74>)
 800d3de:	2200      	movs	r2, #0
 800d3e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d3e2:	4b17      	ldr	r3, [pc, #92]	; (800d440 <MX_I2C1_Init+0x74>)
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d3e8:	4b15      	ldr	r3, [pc, #84]	; (800d440 <MX_I2C1_Init+0x74>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800d3ee:	4b14      	ldr	r3, [pc, #80]	; (800d440 <MX_I2C1_Init+0x74>)
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d3f4:	4b12      	ldr	r3, [pc, #72]	; (800d440 <MX_I2C1_Init+0x74>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d3fa:	4b11      	ldr	r3, [pc, #68]	; (800d440 <MX_I2C1_Init+0x74>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d400:	4b0f      	ldr	r3, [pc, #60]	; (800d440 <MX_I2C1_Init+0x74>)
 800d402:	2200      	movs	r2, #0
 800d404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d406:	480e      	ldr	r0, [pc, #56]	; (800d440 <MX_I2C1_Init+0x74>)
 800d408:	f7f4 fa9f 	bl	800194a <HAL_I2C_Init>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800d412:	f000 fadf 	bl	800d9d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800d416:	2100      	movs	r1, #0
 800d418:	4809      	ldr	r0, [pc, #36]	; (800d440 <MX_I2C1_Init+0x74>)
 800d41a:	f7f4 fb25 	bl	8001a68 <HAL_I2CEx_ConfigAnalogFilter>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d001      	beq.n	800d428 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800d424:	f000 fad6 	bl	800d9d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800d428:	2100      	movs	r1, #0
 800d42a:	4805      	ldr	r0, [pc, #20]	; (800d440 <MX_I2C1_Init+0x74>)
 800d42c:	f7f4 fb67 	bl	8001afe <HAL_I2CEx_ConfigDigitalFilter>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d001      	beq.n	800d43a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800d436:	f000 facd 	bl	800d9d4 <Error_Handler>
  }

}
 800d43a:	bf00      	nop
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	2000c0b8 	.word	0x2000c0b8
 800d444:	40005400 	.word	0x40005400
 800d448:	00707cbb 	.word	0x00707cbb

0800d44c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800d450:	4b1b      	ldr	r3, [pc, #108]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d452:	4a1c      	ldr	r2, [pc, #112]	; (800d4c4 <MX_I2C2_Init+0x78>)
 800d454:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800d456:	4b1a      	ldr	r3, [pc, #104]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d458:	4a1b      	ldr	r2, [pc, #108]	; (800d4c8 <MX_I2C2_Init+0x7c>)
 800d45a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800d45c:	4b18      	ldr	r3, [pc, #96]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d45e:	2200      	movs	r2, #0
 800d460:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d462:	4b17      	ldr	r3, [pc, #92]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d464:	2201      	movs	r2, #1
 800d466:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d468:	4b15      	ldr	r3, [pc, #84]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d46a:	2200      	movs	r2, #0
 800d46c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800d46e:	4b14      	ldr	r3, [pc, #80]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d470:	2200      	movs	r2, #0
 800d472:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d474:	4b12      	ldr	r3, [pc, #72]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d476:	2200      	movs	r2, #0
 800d478:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d47a:	4b11      	ldr	r3, [pc, #68]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d47c:	2200      	movs	r2, #0
 800d47e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d480:	4b0f      	ldr	r3, [pc, #60]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d482:	2200      	movs	r2, #0
 800d484:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800d486:	480e      	ldr	r0, [pc, #56]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d488:	f7f4 fa5f 	bl	800194a <HAL_I2C_Init>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800d492:	f000 fa9f 	bl	800d9d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800d496:	2100      	movs	r1, #0
 800d498:	4809      	ldr	r0, [pc, #36]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d49a:	f7f4 fae5 	bl	8001a68 <HAL_I2CEx_ConfigAnalogFilter>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d001      	beq.n	800d4a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800d4a4:	f000 fa96 	bl	800d9d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	4805      	ldr	r0, [pc, #20]	; (800d4c0 <MX_I2C2_Init+0x74>)
 800d4ac:	f7f4 fb27 	bl	8001afe <HAL_I2CEx_ConfigDigitalFilter>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d001      	beq.n	800d4ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800d4b6:	f000 fa8d 	bl	800d9d4 <Error_Handler>
  }

}
 800d4ba:	bf00      	nop
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	2000c104 	.word	0x2000c104
 800d4c4:	40005800 	.word	0x40005800
 800d4c8:	00707cbb 	.word	0x00707cbb

0800d4cc <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	af00      	add	r7, sp, #0

  hi2c4.Instance = I2C4;
 800d4d0:	4b1b      	ldr	r3, [pc, #108]	; (800d540 <MX_I2C4_Init+0x74>)
 800d4d2:	4a1c      	ldr	r2, [pc, #112]	; (800d544 <MX_I2C4_Init+0x78>)
 800d4d4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 800d4d6:	4b1a      	ldr	r3, [pc, #104]	; (800d540 <MX_I2C4_Init+0x74>)
 800d4d8:	4a1b      	ldr	r2, [pc, #108]	; (800d548 <MX_I2C4_Init+0x7c>)
 800d4da:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800d4dc:	4b18      	ldr	r3, [pc, #96]	; (800d540 <MX_I2C4_Init+0x74>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d4e2:	4b17      	ldr	r3, [pc, #92]	; (800d540 <MX_I2C4_Init+0x74>)
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d4e8:	4b15      	ldr	r3, [pc, #84]	; (800d540 <MX_I2C4_Init+0x74>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800d4ee:	4b14      	ldr	r3, [pc, #80]	; (800d540 <MX_I2C4_Init+0x74>)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d4f4:	4b12      	ldr	r3, [pc, #72]	; (800d540 <MX_I2C4_Init+0x74>)
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d4fa:	4b11      	ldr	r3, [pc, #68]	; (800d540 <MX_I2C4_Init+0x74>)
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d500:	4b0f      	ldr	r3, [pc, #60]	; (800d540 <MX_I2C4_Init+0x74>)
 800d502:	2200      	movs	r2, #0
 800d504:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800d506:	480e      	ldr	r0, [pc, #56]	; (800d540 <MX_I2C4_Init+0x74>)
 800d508:	f7f4 fa1f 	bl	800194a <HAL_I2C_Init>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d001      	beq.n	800d516 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800d512:	f000 fa5f 	bl	800d9d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800d516:	2100      	movs	r1, #0
 800d518:	4809      	ldr	r0, [pc, #36]	; (800d540 <MX_I2C4_Init+0x74>)
 800d51a:	f7f4 faa5 	bl	8001a68 <HAL_I2CEx_ConfigAnalogFilter>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d001      	beq.n	800d528 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800d524:	f000 fa56 	bl	800d9d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800d528:	2100      	movs	r1, #0
 800d52a:	4805      	ldr	r0, [pc, #20]	; (800d540 <MX_I2C4_Init+0x74>)
 800d52c:	f7f4 fae7 	bl	8001afe <HAL_I2CEx_ConfigDigitalFilter>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d001      	beq.n	800d53a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800d536:	f000 fa4d 	bl	800d9d4 <Error_Handler>
  }

}
 800d53a:	bf00      	nop
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	2000c06c 	.word	0x2000c06c
 800d544:	40008400 	.word	0x40008400
 800d548:	00707cbb 	.word	0x00707cbb

0800d54c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b08e      	sub	sp, #56	; 0x38
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d558:	2200      	movs	r2, #0
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	605a      	str	r2, [r3, #4]
 800d55e:	609a      	str	r2, [r3, #8]
 800d560:	60da      	str	r2, [r3, #12]
 800d562:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a46      	ldr	r2, [pc, #280]	; (800d684 <HAL_I2C_MspInit+0x138>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d129      	bne.n	800d5c2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d56e:	4b46      	ldr	r3, [pc, #280]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d572:	4a45      	ldr	r2, [pc, #276]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d574:	f043 0302 	orr.w	r3, r3, #2
 800d578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d57a:	4b43      	ldr	r3, [pc, #268]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d57c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d57e:	f003 0302 	and.w	r3, r3, #2
 800d582:	623b      	str	r3, [r7, #32]
 800d584:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800d586:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d58a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d58c:	2312      	movs	r3, #18
 800d58e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d590:	2301      	movs	r3, #1
 800d592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d594:	2303      	movs	r3, #3
 800d596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d598:	2304      	movs	r3, #4
 800d59a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d59c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	483a      	ldr	r0, [pc, #232]	; (800d68c <HAL_I2C_MspInit+0x140>)
 800d5a4:	f7f3 ffea 	bl	800157c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d5a8:	4b37      	ldr	r3, [pc, #220]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d5aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5ac:	4a36      	ldr	r2, [pc, #216]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d5ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5b2:	6593      	str	r3, [r2, #88]	; 0x58
 800d5b4:	4b34      	ldr	r3, [pc, #208]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d5b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5bc:	61fb      	str	r3, [r7, #28]
 800d5be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800d5c0:	e05b      	b.n	800d67a <HAL_I2C_MspInit+0x12e>
  else if(i2cHandle->Instance==I2C2)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a32      	ldr	r2, [pc, #200]	; (800d690 <HAL_I2C_MspInit+0x144>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d129      	bne.n	800d620 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d5cc:	4b2e      	ldr	r3, [pc, #184]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d5ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5d0:	4a2d      	ldr	r2, [pc, #180]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d5d2:	f043 0302 	orr.w	r3, r3, #2
 800d5d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d5d8:	4b2b      	ldr	r3, [pc, #172]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d5da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5dc:	f003 0302 	and.w	r3, r3, #2
 800d5e0:	61bb      	str	r3, [r7, #24]
 800d5e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800d5e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d5e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d5ea:	2312      	movs	r3, #18
 800d5ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5f2:	2303      	movs	r3, #3
 800d5f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800d5f6:	2304      	movs	r3, #4
 800d5f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d5fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5fe:	4619      	mov	r1, r3
 800d600:	4822      	ldr	r0, [pc, #136]	; (800d68c <HAL_I2C_MspInit+0x140>)
 800d602:	f7f3 ffbb 	bl	800157c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800d606:	4b20      	ldr	r3, [pc, #128]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d60a:	4a1f      	ldr	r2, [pc, #124]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d60c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d610:	6593      	str	r3, [r2, #88]	; 0x58
 800d612:	4b1d      	ldr	r3, [pc, #116]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d61a:	617b      	str	r3, [r7, #20]
 800d61c:	697b      	ldr	r3, [r7, #20]
}
 800d61e:	e02c      	b.n	800d67a <HAL_I2C_MspInit+0x12e>
  else if(i2cHandle->Instance==I2C4)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a1b      	ldr	r2, [pc, #108]	; (800d694 <HAL_I2C_MspInit+0x148>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d127      	bne.n	800d67a <HAL_I2C_MspInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d62a:	4b17      	ldr	r3, [pc, #92]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d62c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d62e:	4a16      	ldr	r2, [pc, #88]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d630:	f043 0302 	orr.w	r3, r3, #2
 800d634:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d636:	4b14      	ldr	r3, [pc, #80]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d63a:	f003 0302 	and.w	r3, r3, #2
 800d63e:	613b      	str	r3, [r7, #16]
 800d640:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d642:	23c0      	movs	r3, #192	; 0xc0
 800d644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d646:	2312      	movs	r3, #18
 800d648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d64a:	2301      	movs	r3, #1
 800d64c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d64e:	2303      	movs	r3, #3
 800d650:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C4;
 800d652:	2305      	movs	r3, #5
 800d654:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d65a:	4619      	mov	r1, r3
 800d65c:	480b      	ldr	r0, [pc, #44]	; (800d68c <HAL_I2C_MspInit+0x140>)
 800d65e:	f7f3 ff8d 	bl	800157c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800d662:	4b09      	ldr	r3, [pc, #36]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d666:	4a08      	ldr	r2, [pc, #32]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d668:	f043 0302 	orr.w	r3, r3, #2
 800d66c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800d66e:	4b06      	ldr	r3, [pc, #24]	; (800d688 <HAL_I2C_MspInit+0x13c>)
 800d670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d672:	f003 0302 	and.w	r3, r3, #2
 800d676:	60fb      	str	r3, [r7, #12]
 800d678:	68fb      	ldr	r3, [r7, #12]
}
 800d67a:	bf00      	nop
 800d67c:	3738      	adds	r7, #56	; 0x38
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	40005400 	.word	0x40005400
 800d688:	40021000 	.word	0x40021000
 800d68c:	48000400 	.word	0x48000400
 800d690:	40005800 	.word	0x40005800
 800d694:	40008400 	.word	0x40008400

0800d698 <MX_LPTIM2_Init>:

LPTIM_HandleTypeDef hlptim2;

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	af00      	add	r7, sp, #0

  hlptim2.Instance = LPTIM2;
 800d69c:	4b12      	ldr	r3, [pc, #72]	; (800d6e8 <MX_LPTIM2_Init+0x50>)
 800d69e:	4a13      	ldr	r2, [pc, #76]	; (800d6ec <MX_LPTIM2_Init+0x54>)
 800d6a0:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800d6a2:	4b11      	ldr	r3, [pc, #68]	; (800d6e8 <MX_LPTIM2_Init+0x50>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800d6a8:	4b0f      	ldr	r3, [pc, #60]	; (800d6e8 <MX_LPTIM2_Init+0x50>)
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800d6ae:	4b0e      	ldr	r3, [pc, #56]	; (800d6e8 <MX_LPTIM2_Init+0x50>)
 800d6b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6b4:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800d6b6:	4b0c      	ldr	r3, [pc, #48]	; (800d6e8 <MX_LPTIM2_Init+0x50>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800d6bc:	4b0a      	ldr	r3, [pc, #40]	; (800d6e8 <MX_LPTIM2_Init+0x50>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800d6c2:	4b09      	ldr	r3, [pc, #36]	; (800d6e8 <MX_LPTIM2_Init+0x50>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800d6c8:	4b07      	ldr	r3, [pc, #28]	; (800d6e8 <MX_LPTIM2_Init+0x50>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800d6ce:	4b06      	ldr	r3, [pc, #24]	; (800d6e8 <MX_LPTIM2_Init+0x50>)
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800d6d4:	4804      	ldr	r0, [pc, #16]	; (800d6e8 <MX_LPTIM2_Init+0x50>)
 800d6d6:	f7f4 fa5f 	bl	8001b98 <HAL_LPTIM_Init>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 800d6e0:	f000 f978 	bl	800d9d4 <Error_Handler>
  }

}
 800d6e4:	bf00      	nop
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	2000c150 	.word	0x2000c150
 800d6ec:	40009400 	.word	0x40009400

0800d6f0 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM2)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a0a      	ldr	r2, [pc, #40]	; (800d728 <HAL_LPTIM_MspInit+0x38>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d10b      	bne.n	800d71a <HAL_LPTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN LPTIM2_MspInit 0 */

  /* USER CODE END LPTIM2_MspInit 0 */
    /* LPTIM2 clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800d702:	4b0a      	ldr	r3, [pc, #40]	; (800d72c <HAL_LPTIM_MspInit+0x3c>)
 800d704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d706:	4a09      	ldr	r2, [pc, #36]	; (800d72c <HAL_LPTIM_MspInit+0x3c>)
 800d708:	f043 0320 	orr.w	r3, r3, #32
 800d70c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800d70e:	4b07      	ldr	r3, [pc, #28]	; (800d72c <HAL_LPTIM_MspInit+0x3c>)
 800d710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d712:	f003 0320 	and.w	r3, r3, #32
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 800d71a:	bf00      	nop
 800d71c:	3714      	adds	r7, #20
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	40009400 	.word	0x40009400
 800d72c:	40021000 	.word	0x40021000

0800d730 <LL_USART_ClearFlag_ORE>:
{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2208      	movs	r2, #8
 800d73c:	621a      	str	r2, [r3, #32]
}
 800d73e:	bf00      	nop
 800d740:	370c      	adds	r7, #12
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr

0800d74a <LL_USART_EnableIT_RXNE>:
{
 800d74a:	b480      	push	{r7}
 800d74c:	b083      	sub	sp, #12
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f043 0220 	orr.w	r2, r3, #32
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	601a      	str	r2, [r3, #0]
}
 800d75e:	bf00      	nop
 800d760:	370c      	adds	r7, #12
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
	...

0800d76c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d772:	f7f2 fd8d 	bl	8000290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d776:	f000 f883 	bl	800d880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d77a:	f7ff fd41 	bl	800d200 <MX_GPIO_Init>
  MX_CRC_Init();
 800d77e:	f7ff fcd7 	bl	800d130 <MX_CRC_Init>
  //MX_IWDG_Init();
  MX_SPI2_Init();
 800d782:	f000 fb7b 	bl	800de7c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800d786:	f000 feb1 	bl	800e4ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800d78a:	f000 ff0f 	bl	800e5ac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800d78e:	f000 ff6d 	bl	800e66c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800d792:	f7ff fb97 	bl	800cec4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800d796:	f7ff fe19 	bl	800d3cc <MX_I2C1_Init>
  MX_I2C2_Init();
 800d79a:	f7ff fe57 	bl	800d44c <MX_I2C2_Init>
  MX_I2C4_Init();
 800d79e:	f7ff fe95 	bl	800d4cc <MX_I2C4_Init>
  MX_RTC_Init();
 800d7a2:	f000 f953 	bl	800da4c <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 800d7a6:	f000 fae7 	bl	800dd78 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800d7aa:	f7ff fd03 	bl	800d1b4 <MX_FATFS_Init>
  MX_LPTIM2_Init();
 800d7ae:	f7ff ff73 	bl	800d698 <MX_LPTIM2_Init>
  MX_TIM2_Init();
 800d7b2:	f000 fd11 	bl	800e1d8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800d7b6:	f000 ffa9 	bl	800e70c <MX_USB_DEVICE_Init>
  MX_RNG_Init();
 800d7ba:	f000 f913 	bl	800d9e4 <MX_RNG_Init>
   *
   *
   *
   * */

  uint8_t ResetCause = CheckResetCause();
 800d7be:	f7ff f879 	bl	800c8b4 <CheckResetCause>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	71fb      	strb	r3, [r7, #7]
  TRACE("[ResetCheck] - PASSED\r\n");
 800d7c6:	4826      	ldr	r0, [pc, #152]	; (800d860 <main+0xf4>)
 800d7c8:	f001 fdd6 	bl	800f378 <puts>

  LL_USART_ClearFlag_ORE(USART2);
 800d7cc:	4825      	ldr	r0, [pc, #148]	; (800d864 <main+0xf8>)
 800d7ce:	f7ff ffaf 	bl	800d730 <LL_USART_ClearFlag_ORE>
  LL_USART_EnableIT_RXNE(USART2);
 800d7d2:	4824      	ldr	r0, [pc, #144]	; (800d864 <main+0xf8>)
 800d7d4:	f7ff ffb9 	bl	800d74a <LL_USART_EnableIT_RXNE>
//	  RevisionControl_StateMachine();
//  }

  /* DISPLAY ALL INIT */

  TRACE("[Main] - Entering While-loop\r\n");
 800d7d8:	4823      	ldr	r0, [pc, #140]	; (800d868 <main+0xfc>)
 800d7da:	f001 fdcd 	bl	800f378 <puts>
  DualLed_GreenOff();
 800d7de:	f7ff f819 	bl	800c814 <DualLed_GreenOff>
  DualLed_RedOff();
 800d7e2:	f7ff f80b 	bl	800c7fc <DualLed_RedOff>

  StartUpSara() ? DualLed_BlinkGreen(11) : DualLed_BlinkRed(21);
 800d7e6:	f7ff f949 	bl	800ca7c <StartUpSara>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d003      	beq.n	800d7f8 <main+0x8c>
 800d7f0:	200b      	movs	r0, #11
 800d7f2:	f7ff f82f 	bl	800c854 <DualLed_BlinkGreen>
 800d7f6:	e002      	b.n	800d7fe <main+0x92>
 800d7f8:	2015      	movs	r0, #21
 800d7fa:	f7ff f843 	bl	800c884 <DualLed_BlinkRed>

  HAL_Delay(1000);
 800d7fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d802:	f7f2 fdb9 	bl	8000378 <HAL_Delay>
  SaraInitAtCommands() ? DualLed_BlinkGreen(11) : DualLed_BlinkRed(21);
 800d806:	f7ff f977 	bl	800caf8 <SaraInitAtCommands>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d003      	beq.n	800d818 <main+0xac>
 800d810:	200b      	movs	r0, #11
 800d812:	f7ff f81f 	bl	800c854 <DualLed_BlinkGreen>
 800d816:	e002      	b.n	800d81e <main+0xb2>
 800d818:	2015      	movs	r0, #21
 800d81a:	f7ff f833 	bl	800c884 <DualLed_BlinkRed>

  HAL_Delay(1000);
 800d81e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d822:	f7f2 fda9 	bl	8000378 <HAL_Delay>
  SaraCheckCommand("AT+COPS=0\r\n", "OK", LOW_TIMEOUT);
 800d826:	220a      	movs	r2, #10
 800d828:	4910      	ldr	r1, [pc, #64]	; (800d86c <main+0x100>)
 800d82a:	4811      	ldr	r0, [pc, #68]	; (800d870 <main+0x104>)
 800d82c:	f7ff fa94 	bl	800cd58 <SaraCheckCommand>
  SaraCheckCommand("AT+URAT=7,8\r\n", "OK", LOW_TIMEOUT);
 800d830:	220a      	movs	r2, #10
 800d832:	490e      	ldr	r1, [pc, #56]	; (800d86c <main+0x100>)
 800d834:	480f      	ldr	r0, [pc, #60]	; (800d874 <main+0x108>)
 800d836:	f7ff fa8f 	bl	800cd58 <SaraCheckCommand>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(SaraCheckCommand("AT+CREG?\r\n", "+CREG: 0,1OK", LOW_TIMEOUT))
 800d83a:	220a      	movs	r2, #10
 800d83c:	490e      	ldr	r1, [pc, #56]	; (800d878 <main+0x10c>)
 800d83e:	480f      	ldr	r0, [pc, #60]	; (800d87c <main+0x110>)
 800d840:	f7ff fa8a 	bl	800cd58 <SaraCheckCommand>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d002      	beq.n	800d850 <main+0xe4>
	  {
		  DualLed_ToggleGreen() ;
 800d84a:	f7fe fff9 	bl	800c840 <DualLed_ToggleGreen>
 800d84e:	e001      	b.n	800d854 <main+0xe8>
	  }
	  else
	  {
		  DualLed_ToggleRed();
 800d850:	f7fe ffec 	bl	800c82c <DualLed_ToggleRed>
//	  debugPrint("Testing DebugPrint - Print", debugLevel_Print);
//	  debugPrint("Testing DebugPrint - Info", debugLevel_Info);
//	  debugPrint("Testing DebugPrint - Warning", debugLevel_Warning);
//	  debugPrint("Testing DebugPrint - Error", debugLevel_Error);

	  HAL_Delay(500);
 800d854:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d858:	f7f2 fd8e 	bl	8000378 <HAL_Delay>
	  if(SaraCheckCommand("AT+CREG?\r\n", "+CREG: 0,1OK", LOW_TIMEOUT))
 800d85c:	e7ed      	b.n	800d83a <main+0xce>
 800d85e:	bf00      	nop
 800d860:	080100d0 	.word	0x080100d0
 800d864:	40004400 	.word	0x40004400
 800d868:	080100e8 	.word	0x080100e8
 800d86c:	08010108 	.word	0x08010108
 800d870:	0801010c 	.word	0x0801010c
 800d874:	08010118 	.word	0x08010118
 800d878:	08010128 	.word	0x08010128
 800d87c:	08010138 	.word	0x08010138

0800d880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b0b0      	sub	sp, #192	; 0xc0
 800d884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d886:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d88a:	2244      	movs	r2, #68	; 0x44
 800d88c:	2100      	movs	r1, #0
 800d88e:	4618      	mov	r0, r3
 800d890:	f001 fc4e 	bl	800f130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d894:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d898:	2200      	movs	r2, #0
 800d89a:	601a      	str	r2, [r3, #0]
 800d89c:	605a      	str	r2, [r3, #4]
 800d89e:	609a      	str	r2, [r3, #8]
 800d8a0:	60da      	str	r2, [r3, #12]
 800d8a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d8a4:	463b      	mov	r3, r7
 800d8a6:	2268      	movs	r2, #104	; 0x68
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f001 fc40 	bl	800f130 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800d8b0:	f7f5 fd84 	bl	80033bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800d8b4:	4b45      	ldr	r3, [pc, #276]	; (800d9cc <SystemClock_Config+0x14c>)
 800d8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8ba:	4a44      	ldr	r2, [pc, #272]	; (800d9cc <SystemClock_Config+0x14c>)
 800d8bc:	f023 0318 	bic.w	r3, r3, #24
 800d8c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 800d8c4:	230d      	movs	r3, #13
 800d8c6:	67fb      	str	r3, [r7, #124]	; 0x7c
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d8c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d8cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d8dc:	2302      	movs	r3, #2
 800d8de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d8e2:	2303      	movs	r3, #3
 800d8e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 8;
 800d8ee:	2308      	movs	r3, #8
 800d8f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800d8f4:	2307      	movs	r3, #7
 800d8f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800d8fa:	2302      	movs	r3, #2
 800d8fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800d900:	2302      	movs	r3, #2
 800d902:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d906:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7f5 fdda 	bl	80034c4 <HAL_RCC_OscConfig>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	d001      	beq.n	800d91a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800d916:	f000 f85d 	bl	800d9d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d91a:	230f      	movs	r3, #15
 800d91c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d91e:	2303      	movs	r3, #3
 800d920:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d922:	2300      	movs	r3, #0
 800d924:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d926:	2300      	movs	r3, #0
 800d928:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d92a:	2300      	movs	r3, #0
 800d92c:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800d92e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d932:	2101      	movs	r1, #1
 800d934:	4618      	mov	r0, r3
 800d936:	f7f6 f9e5 	bl	8003d04 <HAL_RCC_ClockConfig>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d001      	beq.n	800d944 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800d940:	f000 f848 	bl	800d9d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800d944:	4b22      	ldr	r3, [pc, #136]	; (800d9d0 <SystemClock_Config+0x150>)
 800d946:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_LPTIM2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d948:	2300      	movs	r3, #0
 800d94a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800d94c:	2300      	movs	r3, #0
 800d94e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800d950:	2300      	movs	r3, #0
 800d952:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800d954:	2300      	movs	r3, #0
 800d956:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800d958:	2300      	movs	r3, #0
 800d95a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800d95c:	2300      	movs	r3, #0
 800d95e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 800d960:	2300      	movs	r3, #0
 800d962:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800d964:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d968:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d96a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d96e:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800d970:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d974:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800d976:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d97a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800d97c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d980:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800d982:	2303      	movs	r3, #3
 800d984:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800d986:	2301      	movs	r3, #1
 800d988:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800d98a:	230c      	movs	r3, #12
 800d98c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800d98e:	2307      	movs	r3, #7
 800d990:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800d992:	2302      	movs	r3, #2
 800d994:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800d996:	2302      	movs	r3, #2
 800d998:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800d99a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800d99e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d9a0:	463b      	mov	r3, r7
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7f6 fbb2 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800d9ae:	f000 f811 	bl	800d9d4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800d9b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d9b6:	f7f5 fd1f 	bl	80033f8 <HAL_PWREx_ControlVoltageScaling>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d001      	beq.n	800d9c4 <SystemClock_Config+0x144>
  {
    Error_Handler();
 800d9c0:	f000 f808 	bl	800d9d4 <Error_Handler>
  }
}
 800d9c4:	bf00      	nop
 800d9c6:	37c0      	adds	r7, #192	; 0xc0
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	40021000 	.word	0x40021000
 800d9d0:	001e64c7 	.word	0x001e64c7

0800d9d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d9d8:	bf00      	nop
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr
	...

0800d9e4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 800d9e8:	4b06      	ldr	r3, [pc, #24]	; (800da04 <MX_RNG_Init+0x20>)
 800d9ea:	4a07      	ldr	r2, [pc, #28]	; (800da08 <MX_RNG_Init+0x24>)
 800d9ec:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800d9ee:	4805      	ldr	r0, [pc, #20]	; (800da04 <MX_RNG_Init+0x20>)
 800d9f0:	f7f7 fbba 	bl	8005168 <HAL_RNG_Init>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d001      	beq.n	800d9fe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800d9fa:	f7ff ffeb 	bl	800d9d4 <Error_Handler>
  }

}
 800d9fe:	bf00      	nop
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	2000c188 	.word	0x2000c188
 800da08:	50060800 	.word	0x50060800

0800da0c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a0a      	ldr	r2, [pc, #40]	; (800da44 <HAL_RNG_MspInit+0x38>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d10b      	bne.n	800da36 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800da1e:	4b0a      	ldr	r3, [pc, #40]	; (800da48 <HAL_RNG_MspInit+0x3c>)
 800da20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da22:	4a09      	ldr	r2, [pc, #36]	; (800da48 <HAL_RNG_MspInit+0x3c>)
 800da24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800da28:	64d3      	str	r3, [r2, #76]	; 0x4c
 800da2a:	4b07      	ldr	r3, [pc, #28]	; (800da48 <HAL_RNG_MspInit+0x3c>)
 800da2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da32:	60fb      	str	r3, [r7, #12]
 800da34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800da36:	bf00      	nop
 800da38:	3714      	adds	r7, #20
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	50060800 	.word	0x50060800
 800da48:	40021000 	.word	0x40021000

0800da4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b092      	sub	sp, #72	; 0x48
 800da50:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800da52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800da56:	2200      	movs	r2, #0
 800da58:	601a      	str	r2, [r3, #0]
 800da5a:	605a      	str	r2, [r3, #4]
 800da5c:	609a      	str	r2, [r3, #8]
 800da5e:	60da      	str	r2, [r3, #12]
 800da60:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800da62:	2300      	movs	r3, #0
 800da64:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800da66:	1d3b      	adds	r3, r7, #4
 800da68:	222c      	movs	r2, #44	; 0x2c
 800da6a:	2100      	movs	r1, #0
 800da6c:	4618      	mov	r0, r3
 800da6e:	f001 fb5f 	bl	800f130 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800da72:	4b3f      	ldr	r3, [pc, #252]	; (800db70 <MX_RTC_Init+0x124>)
 800da74:	4a3f      	ldr	r2, [pc, #252]	; (800db74 <MX_RTC_Init+0x128>)
 800da76:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800da78:	4b3d      	ldr	r3, [pc, #244]	; (800db70 <MX_RTC_Init+0x124>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800da7e:	4b3c      	ldr	r3, [pc, #240]	; (800db70 <MX_RTC_Init+0x124>)
 800da80:	227f      	movs	r2, #127	; 0x7f
 800da82:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800da84:	4b3a      	ldr	r3, [pc, #232]	; (800db70 <MX_RTC_Init+0x124>)
 800da86:	22ff      	movs	r2, #255	; 0xff
 800da88:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800da8a:	4b39      	ldr	r3, [pc, #228]	; (800db70 <MX_RTC_Init+0x124>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800da90:	4b37      	ldr	r3, [pc, #220]	; (800db70 <MX_RTC_Init+0x124>)
 800da92:	2200      	movs	r2, #0
 800da94:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800da96:	4b36      	ldr	r3, [pc, #216]	; (800db70 <MX_RTC_Init+0x124>)
 800da98:	2200      	movs	r2, #0
 800da9a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800da9c:	4b34      	ldr	r3, [pc, #208]	; (800db70 <MX_RTC_Init+0x124>)
 800da9e:	2200      	movs	r2, #0
 800daa0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800daa2:	4833      	ldr	r0, [pc, #204]	; (800db70 <MX_RTC_Init+0x124>)
 800daa4:	f7f7 fbb0 	bl	8005208 <HAL_RTC_Init>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d001      	beq.n	800dab2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800daae:	f7ff ff91 	bl	800d9d4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 800dab8:	2300      	movs	r3, #0
 800daba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 800dabe:	2300      	movs	r3, #0
 800dac0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800dac4:	2300      	movs	r3, #0
 800dac6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800dac8:	2300      	movs	r3, #0
 800daca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800dacc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dad0:	2201      	movs	r2, #1
 800dad2:	4619      	mov	r1, r3
 800dad4:	4826      	ldr	r0, [pc, #152]	; (800db70 <MX_RTC_Init+0x124>)
 800dad6:	f7f7 fc12 	bl	80052fe <HAL_RTC_SetTime>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800dae0:	f7ff ff78 	bl	800d9d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800dae4:	2301      	movs	r3, #1
 800dae6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800daea:	2301      	movs	r3, #1
 800daec:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 800daf0:	2301      	movs	r3, #1
 800daf2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800dafc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db00:	2201      	movs	r2, #1
 800db02:	4619      	mov	r1, r3
 800db04:	481a      	ldr	r0, [pc, #104]	; (800db70 <MX_RTC_Init+0x124>)
 800db06:	f7f7 fc97 	bl	8005438 <HAL_RTC_SetDate>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800db10:	f7ff ff60 	bl	800d9d4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800db14:	2300      	movs	r3, #0
 800db16:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800db18:	2300      	movs	r3, #0
 800db1a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800db1c:	2300      	movs	r3, #0
 800db1e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800db20:	2300      	movs	r3, #0
 800db22:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800db24:	2300      	movs	r3, #0
 800db26:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800db28:	2300      	movs	r3, #0
 800db2a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800db2c:	2300      	movs	r3, #0
 800db2e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800db30:	2300      	movs	r3, #0
 800db32:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800db34:	2300      	movs	r3, #0
 800db36:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800db38:	2301      	movs	r3, #1
 800db3a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800db3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800db44:	1d3b      	adds	r3, r7, #4
 800db46:	2201      	movs	r2, #1
 800db48:	4619      	mov	r1, r3
 800db4a:	4809      	ldr	r0, [pc, #36]	; (800db70 <MX_RTC_Init+0x124>)
 800db4c:	f7f7 fcfb 	bl	8005546 <HAL_RTC_SetAlarm>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d001      	beq.n	800db5a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800db56:	f7ff ff3d 	bl	800d9d4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800db5a:	2301      	movs	r3, #1
 800db5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_B;
 800db60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db64:	62fb      	str	r3, [r7, #44]	; 0x2c

}
 800db66:	bf00      	nop
 800db68:	3748      	adds	r7, #72	; 0x48
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	2000c198 	.word	0x2000c198
 800db74:	40002800 	.word	0x40002800

0800db78 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a08      	ldr	r2, [pc, #32]	; (800dba8 <HAL_RTC_MspInit+0x30>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d107      	bne.n	800db9a <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800db8a:	4b08      	ldr	r3, [pc, #32]	; (800dbac <HAL_RTC_MspInit+0x34>)
 800db8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db90:	4a06      	ldr	r2, [pc, #24]	; (800dbac <HAL_RTC_MspInit+0x34>)
 800db92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800db9a:	bf00      	nop
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	40002800 	.word	0x40002800
 800dbac:	40021000 	.word	0x40021000

0800dbb0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dbba:	4b0b      	ldr	r3, [pc, #44]	; (800dbe8 <SD_CheckStatus+0x38>)
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dbc0:	f7ff fa86 	bl	800d0d0 <BSP_SD_GetCardState>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d107      	bne.n	800dbda <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dbca:	4b07      	ldr	r3, [pc, #28]	; (800dbe8 <SD_CheckStatus+0x38>)
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	f023 0301 	bic.w	r3, r3, #1
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	4b04      	ldr	r3, [pc, #16]	; (800dbe8 <SD_CheckStatus+0x38>)
 800dbd8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dbda:	4b03      	ldr	r3, [pc, #12]	; (800dbe8 <SD_CheckStatus+0x38>)
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	b2db      	uxtb	r3, r3
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	20000114 	.word	0x20000114

0800dbec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dbf6:	4b0b      	ldr	r3, [pc, #44]	; (800dc24 <SD_initialize+0x38>)
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dbfc:	f7ff fa06 	bl	800d00c <BSP_SD_Init>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d107      	bne.n	800dc16 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800dc06:	79fb      	ldrb	r3, [r7, #7]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7ff ffd1 	bl	800dbb0 <SD_CheckStatus>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	461a      	mov	r2, r3
 800dc12:	4b04      	ldr	r3, [pc, #16]	; (800dc24 <SD_initialize+0x38>)
 800dc14:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dc16:	4b03      	ldr	r3, [pc, #12]	; (800dc24 <SD_initialize+0x38>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	b2db      	uxtb	r3, r3
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	20000114 	.word	0x20000114

0800dc28 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	4603      	mov	r3, r0
 800dc30:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dc32:	79fb      	ldrb	r3, [r7, #7]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7ff ffbb 	bl	800dbb0 <SD_CheckStatus>
 800dc3a:	4603      	mov	r3, r0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b086      	sub	sp, #24
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60b9      	str	r1, [r7, #8]
 800dc4c:	607a      	str	r2, [r7, #4]
 800dc4e:	603b      	str	r3, [r7, #0]
 800dc50:	4603      	mov	r3, r0
 800dc52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800dc58:	f04f 33ff 	mov.w	r3, #4294967295
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	6879      	ldr	r1, [r7, #4]
 800dc60:	68b8      	ldr	r0, [r7, #8]
 800dc62:	f7ff f9f9 	bl	800d058 <BSP_SD_ReadBlocks>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d107      	bne.n	800dc7c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dc6c:	bf00      	nop
 800dc6e:	f7ff fa2f 	bl	800d0d0 <BSP_SD_GetCardState>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1fa      	bne.n	800dc6e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dc7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b086      	sub	sp, #24
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	603b      	str	r3, [r7, #0]
 800dc92:	4603      	mov	r3, r0
 800dc94:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800dc9a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc9e:	683a      	ldr	r2, [r7, #0]
 800dca0:	6879      	ldr	r1, [r7, #4]
 800dca2:	68b8      	ldr	r0, [r7, #8]
 800dca4:	f7ff f9f6 	bl	800d094 <BSP_SD_WriteBlocks>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d107      	bne.n	800dcbe <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800dcae:	bf00      	nop
 800dcb0:	f7ff fa0e 	bl	800d0d0 <BSP_SD_GetCardState>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d1fa      	bne.n	800dcb0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dcbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3718      	adds	r7, #24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b08c      	sub	sp, #48	; 0x30
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	4603      	mov	r3, r0
 800dcd0:	603a      	str	r2, [r7, #0]
 800dcd2:	71fb      	strb	r3, [r7, #7]
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dcde:	4b25      	ldr	r3, [pc, #148]	; (800dd74 <SD_ioctl+0xac>)
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	f003 0301 	and.w	r3, r3, #1
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <SD_ioctl+0x28>
 800dcec:	2303      	movs	r3, #3
 800dcee:	e03c      	b.n	800dd6a <SD_ioctl+0xa2>

  switch (cmd)
 800dcf0:	79bb      	ldrb	r3, [r7, #6]
 800dcf2:	2b03      	cmp	r3, #3
 800dcf4:	d834      	bhi.n	800dd60 <SD_ioctl+0x98>
 800dcf6:	a201      	add	r2, pc, #4	; (adr r2, 800dcfc <SD_ioctl+0x34>)
 800dcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfc:	0800dd0d 	.word	0x0800dd0d
 800dd00:	0800dd15 	.word	0x0800dd15
 800dd04:	0800dd2d 	.word	0x0800dd2d
 800dd08:	0800dd47 	.word	0x0800dd47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd12:	e028      	b.n	800dd66 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd14:	f107 030c 	add.w	r3, r7, #12
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7ff f9e9 	bl	800d0f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dd1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dd24:	2300      	movs	r3, #0
 800dd26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd2a:	e01c      	b.n	800dd66 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd2c:	f107 030c 	add.w	r3, r7, #12
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff f9dd 	bl	800d0f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd38:	b29a      	uxth	r2, r3
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd44:	e00f      	b.n	800dd66 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd46:	f107 030c 	add.w	r3, r7, #12
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7ff f9d0 	bl	800d0f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd52:	0a5a      	lsrs	r2, r3, #9
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd5e:	e002      	b.n	800dd66 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dd60:	2304      	movs	r3, #4
 800dd62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dd66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3730      	adds	r7, #48	; 0x30
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	20000114 	.word	0x20000114

0800dd78 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 800dd7c:	4b0c      	ldr	r3, [pc, #48]	; (800ddb0 <MX_SDMMC1_SD_Init+0x38>)
 800dd7e:	4a0d      	ldr	r2, [pc, #52]	; (800ddb4 <MX_SDMMC1_SD_Init+0x3c>)
 800dd80:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800dd82:	4b0b      	ldr	r3, [pc, #44]	; (800ddb0 <MX_SDMMC1_SD_Init+0x38>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800dd88:	4b09      	ldr	r3, [pc, #36]	; (800ddb0 <MX_SDMMC1_SD_Init+0x38>)
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800dd8e:	4b08      	ldr	r3, [pc, #32]	; (800ddb0 <MX_SDMMC1_SD_Init+0x38>)
 800dd90:	2200      	movs	r2, #0
 800dd92:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800dd94:	4b06      	ldr	r3, [pc, #24]	; (800ddb0 <MX_SDMMC1_SD_Init+0x38>)
 800dd96:	2200      	movs	r2, #0
 800dd98:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800dd9a:	4b05      	ldr	r3, [pc, #20]	; (800ddb0 <MX_SDMMC1_SD_Init+0x38>)
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800dda0:	4b03      	ldr	r3, [pc, #12]	; (800ddb0 <MX_SDMMC1_SD_Init+0x38>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	619a      	str	r2, [r3, #24]

}
 800dda6:	bf00      	nop
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr
 800ddb0:	2000c1bc 	.word	0x2000c1bc
 800ddb4:	40012800 	.word	0x40012800

0800ddb8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08a      	sub	sp, #40	; 0x28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ddc0:	f107 0314 	add.w	r3, r7, #20
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	601a      	str	r2, [r3, #0]
 800ddc8:	605a      	str	r2, [r3, #4]
 800ddca:	609a      	str	r2, [r3, #8]
 800ddcc:	60da      	str	r2, [r3, #12]
 800ddce:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a25      	ldr	r2, [pc, #148]	; (800de6c <HAL_SD_MspInit+0xb4>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d144      	bne.n	800de64 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800ddda:	4b25      	ldr	r3, [pc, #148]	; (800de70 <HAL_SD_MspInit+0xb8>)
 800dddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddde:	4a24      	ldr	r2, [pc, #144]	; (800de70 <HAL_SD_MspInit+0xb8>)
 800dde0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dde4:	6613      	str	r3, [r2, #96]	; 0x60
 800dde6:	4b22      	ldr	r3, [pc, #136]	; (800de70 <HAL_SD_MspInit+0xb8>)
 800dde8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ddee:	613b      	str	r3, [r7, #16]
 800ddf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ddf2:	4b1f      	ldr	r3, [pc, #124]	; (800de70 <HAL_SD_MspInit+0xb8>)
 800ddf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddf6:	4a1e      	ldr	r2, [pc, #120]	; (800de70 <HAL_SD_MspInit+0xb8>)
 800ddf8:	f043 0304 	orr.w	r3, r3, #4
 800ddfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ddfe:	4b1c      	ldr	r3, [pc, #112]	; (800de70 <HAL_SD_MspInit+0xb8>)
 800de00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de02:	f003 0304 	and.w	r3, r3, #4
 800de06:	60fb      	str	r3, [r7, #12]
 800de08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800de0a:	4b19      	ldr	r3, [pc, #100]	; (800de70 <HAL_SD_MspInit+0xb8>)
 800de0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de0e:	4a18      	ldr	r2, [pc, #96]	; (800de70 <HAL_SD_MspInit+0xb8>)
 800de10:	f043 0308 	orr.w	r3, r3, #8
 800de14:	64d3      	str	r3, [r2, #76]	; 0x4c
 800de16:	4b16      	ldr	r3, [pc, #88]	; (800de70 <HAL_SD_MspInit+0xb8>)
 800de18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de1a:	f003 0308 	and.w	r3, r3, #8
 800de1e:	60bb      	str	r3, [r7, #8]
 800de20:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800de22:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800de26:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de28:	2302      	movs	r3, #2
 800de2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de2c:	2300      	movs	r3, #0
 800de2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de30:	2303      	movs	r3, #3
 800de32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800de34:	230c      	movs	r3, #12
 800de36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800de38:	f107 0314 	add.w	r3, r7, #20
 800de3c:	4619      	mov	r1, r3
 800de3e:	480d      	ldr	r0, [pc, #52]	; (800de74 <HAL_SD_MspInit+0xbc>)
 800de40:	f7f3 fb9c 	bl	800157c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800de44:	2304      	movs	r3, #4
 800de46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de48:	2302      	movs	r3, #2
 800de4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de4c:	2300      	movs	r3, #0
 800de4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de50:	2303      	movs	r3, #3
 800de52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800de54:	230c      	movs	r3, #12
 800de56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800de58:	f107 0314 	add.w	r3, r7, #20
 800de5c:	4619      	mov	r1, r3
 800de5e:	4806      	ldr	r0, [pc, #24]	; (800de78 <HAL_SD_MspInit+0xc0>)
 800de60:	f7f3 fb8c 	bl	800157c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800de64:	bf00      	nop
 800de66:	3728      	adds	r7, #40	; 0x28
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	40012800 	.word	0x40012800
 800de70:	40021000 	.word	0x40021000
 800de74:	48000800 	.word	0x48000800
 800de78:	48000c00 	.word	0x48000c00

0800de7c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800de80:	4b1b      	ldr	r3, [pc, #108]	; (800def0 <MX_SPI2_Init+0x74>)
 800de82:	4a1c      	ldr	r2, [pc, #112]	; (800def4 <MX_SPI2_Init+0x78>)
 800de84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800de86:	4b1a      	ldr	r3, [pc, #104]	; (800def0 <MX_SPI2_Init+0x74>)
 800de88:	f44f 7282 	mov.w	r2, #260	; 0x104
 800de8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800de8e:	4b18      	ldr	r3, [pc, #96]	; (800def0 <MX_SPI2_Init+0x74>)
 800de90:	2200      	movs	r2, #0
 800de92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800de94:	4b16      	ldr	r3, [pc, #88]	; (800def0 <MX_SPI2_Init+0x74>)
 800de96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800de9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800de9c:	4b14      	ldr	r3, [pc, #80]	; (800def0 <MX_SPI2_Init+0x74>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800dea2:	4b13      	ldr	r3, [pc, #76]	; (800def0 <MX_SPI2_Init+0x74>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800dea8:	4b11      	ldr	r3, [pc, #68]	; (800def0 <MX_SPI2_Init+0x74>)
 800deaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800deae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800deb0:	4b0f      	ldr	r3, [pc, #60]	; (800def0 <MX_SPI2_Init+0x74>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800deb6:	4b0e      	ldr	r3, [pc, #56]	; (800def0 <MX_SPI2_Init+0x74>)
 800deb8:	2200      	movs	r2, #0
 800deba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800debc:	4b0c      	ldr	r3, [pc, #48]	; (800def0 <MX_SPI2_Init+0x74>)
 800debe:	2200      	movs	r2, #0
 800dec0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dec2:	4b0b      	ldr	r3, [pc, #44]	; (800def0 <MX_SPI2_Init+0x74>)
 800dec4:	2200      	movs	r2, #0
 800dec6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800dec8:	4b09      	ldr	r3, [pc, #36]	; (800def0 <MX_SPI2_Init+0x74>)
 800deca:	2207      	movs	r2, #7
 800decc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800dece:	4b08      	ldr	r3, [pc, #32]	; (800def0 <MX_SPI2_Init+0x74>)
 800ded0:	2200      	movs	r2, #0
 800ded2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ded4:	4b06      	ldr	r3, [pc, #24]	; (800def0 <MX_SPI2_Init+0x74>)
 800ded6:	2208      	movs	r2, #8
 800ded8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800deda:	4805      	ldr	r0, [pc, #20]	; (800def0 <MX_SPI2_Init+0x74>)
 800dedc:	f7f8 fece 	bl	8006c7c <HAL_SPI_Init>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d001      	beq.n	800deea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800dee6:	f7ff fd75 	bl	800d9d4 <Error_Handler>
  }

}
 800deea:	bf00      	nop
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	2000c240 	.word	0x2000c240
 800def4:	40003800 	.word	0x40003800

0800def8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b08a      	sub	sp, #40	; 0x28
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df00:	f107 0314 	add.w	r3, r7, #20
 800df04:	2200      	movs	r2, #0
 800df06:	601a      	str	r2, [r3, #0]
 800df08:	605a      	str	r2, [r3, #4]
 800df0a:	609a      	str	r2, [r3, #8]
 800df0c:	60da      	str	r2, [r3, #12]
 800df0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a17      	ldr	r2, [pc, #92]	; (800df74 <HAL_SPI_MspInit+0x7c>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d128      	bne.n	800df6c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800df1a:	4b17      	ldr	r3, [pc, #92]	; (800df78 <HAL_SPI_MspInit+0x80>)
 800df1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df1e:	4a16      	ldr	r2, [pc, #88]	; (800df78 <HAL_SPI_MspInit+0x80>)
 800df20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800df24:	6593      	str	r3, [r2, #88]	; 0x58
 800df26:	4b14      	ldr	r3, [pc, #80]	; (800df78 <HAL_SPI_MspInit+0x80>)
 800df28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df2e:	613b      	str	r3, [r7, #16]
 800df30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800df32:	4b11      	ldr	r3, [pc, #68]	; (800df78 <HAL_SPI_MspInit+0x80>)
 800df34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df36:	4a10      	ldr	r2, [pc, #64]	; (800df78 <HAL_SPI_MspInit+0x80>)
 800df38:	f043 0302 	orr.w	r3, r3, #2
 800df3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800df3e:	4b0e      	ldr	r3, [pc, #56]	; (800df78 <HAL_SPI_MspInit+0x80>)
 800df40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df42:	f003 0302 	and.w	r3, r3, #2
 800df46:	60fb      	str	r3, [r7, #12]
 800df48:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800df4a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800df4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df50:	2302      	movs	r3, #2
 800df52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df54:	2300      	movs	r3, #0
 800df56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df58:	2303      	movs	r3, #3
 800df5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800df5c:	2305      	movs	r3, #5
 800df5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800df60:	f107 0314 	add.w	r3, r7, #20
 800df64:	4619      	mov	r1, r3
 800df66:	4805      	ldr	r0, [pc, #20]	; (800df7c <HAL_SPI_MspInit+0x84>)
 800df68:	f7f3 fb08 	bl	800157c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800df6c:	bf00      	nop
 800df6e:	3728      	adds	r7, #40	; 0x28
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	40003800 	.word	0x40003800
 800df78:	40021000 	.word	0x40021000
 800df7c:	48000400 	.word	0x48000400

0800df80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800df86:	4b0f      	ldr	r3, [pc, #60]	; (800dfc4 <HAL_MspInit+0x44>)
 800df88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df8a:	4a0e      	ldr	r2, [pc, #56]	; (800dfc4 <HAL_MspInit+0x44>)
 800df8c:	f043 0301 	orr.w	r3, r3, #1
 800df90:	6613      	str	r3, [r2, #96]	; 0x60
 800df92:	4b0c      	ldr	r3, [pc, #48]	; (800dfc4 <HAL_MspInit+0x44>)
 800df94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df96:	f003 0301 	and.w	r3, r3, #1
 800df9a:	607b      	str	r3, [r7, #4]
 800df9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800df9e:	4b09      	ldr	r3, [pc, #36]	; (800dfc4 <HAL_MspInit+0x44>)
 800dfa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfa2:	4a08      	ldr	r2, [pc, #32]	; (800dfc4 <HAL_MspInit+0x44>)
 800dfa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfa8:	6593      	str	r3, [r2, #88]	; 0x58
 800dfaa:	4b06      	ldr	r3, [pc, #24]	; (800dfc4 <HAL_MspInit+0x44>)
 800dfac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfb2:	603b      	str	r3, [r7, #0]
 800dfb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dfb6:	bf00      	nop
 800dfb8:	370c      	adds	r7, #12
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	40021000 	.word	0x40021000

0800dfc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800dfcc:	bf00      	nop
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr

0800dfd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dfd6:	b480      	push	{r7}
 800dfd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dfda:	e7fe      	b.n	800dfda <HardFault_Handler+0x4>

0800dfdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800dfe0:	e7fe      	b.n	800dfe0 <MemManage_Handler+0x4>

0800dfe2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dfe2:	b480      	push	{r7}
 800dfe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800dfe6:	e7fe      	b.n	800dfe6 <BusFault_Handler+0x4>

0800dfe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dfec:	e7fe      	b.n	800dfec <UsageFault_Handler+0x4>

0800dfee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dfee:	b480      	push	{r7}
 800dff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dff2:	bf00      	nop
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dffc:	b480      	push	{r7}
 800dffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e000:	bf00      	nop
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr

0800e00a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e00a:	b480      	push	{r7}
 800e00c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e00e:	bf00      	nop
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e01c:	f7f2 f98c 	bl	8000338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e020:	bf00      	nop
 800e022:	bd80      	pop	{r7, pc}

0800e024 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
/*
 * Button pressed!!
 * */
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800e028:	2001      	movs	r0, #1
 800e02a:	f7f3 fc6b 	bl	8001904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800e02e:	bf00      	nop
 800e030:	bd80      	pop	{r7, pc}

0800e032 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
/*
 * USB Connected!
 *  */
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800e036:	2010      	movs	r0, #16
 800e038:	f7f3 fc64 	bl	8001904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800e03c:	bf00      	nop
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800e040:	b480      	push	{r7}
 800e042:	af00      	add	r7, sp, #0
	 * */
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e044:	bf00      	nop
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr

0800e04e <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2_Callback();
 800e052:	f7fe fcc3 	bl	800c9dc <USART2_Callback>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800e056:	bf00      	nop
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800e060:	4802      	ldr	r0, [pc, #8]	; (800e06c <USB_IRQHandler+0x10>)
 800e062:	f7f3 ff61 	bl	8001f28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800e066:	bf00      	nop
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	2000c5c0 	.word	0x2000c5c0

0800e070 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e07c:	2300      	movs	r3, #0
 800e07e:	617b      	str	r3, [r7, #20]
 800e080:	e00a      	b.n	800e098 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800e082:	f3af 8000 	nop.w
 800e086:	4601      	mov	r1, r0
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	1c5a      	adds	r2, r3, #1
 800e08c:	60ba      	str	r2, [r7, #8]
 800e08e:	b2ca      	uxtb	r2, r1
 800e090:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	3301      	adds	r3, #1
 800e096:	617b      	str	r3, [r7, #20]
 800e098:	697a      	ldr	r2, [r7, #20]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	dbf0      	blt.n	800e082 <_read+0x12>
	}

return len;
 800e0a0:	687b      	ldr	r3, [r7, #4]
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3718      	adds	r7, #24
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <_close>:
	}
	return len;
}

int _close(int file)
{
 800e0aa:	b480      	push	{r7}
 800e0ac:	b083      	sub	sp, #12
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
	return -1;
 800e0b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	370c      	adds	r7, #12
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e0c2:	b480      	push	{r7}
 800e0c4:	b083      	sub	sp, #12
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e0d2:	605a      	str	r2, [r3, #4]
	return 0;
 800e0d4:	2300      	movs	r3, #0
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	370c      	adds	r7, #12
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr

0800e0e2 <_isatty>:

int _isatty(int file)
{
 800e0e2:	b480      	push	{r7}
 800e0e4:	b083      	sub	sp, #12
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
	return 1;
 800e0ea:	2301      	movs	r3, #1
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	370c      	adds	r7, #12
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr

0800e0f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
	return 0;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr
	...

0800e114 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800e11c:	4b11      	ldr	r3, [pc, #68]	; (800e164 <_sbrk+0x50>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d102      	bne.n	800e12a <_sbrk+0x16>
		heap_end = &end;
 800e124:	4b0f      	ldr	r3, [pc, #60]	; (800e164 <_sbrk+0x50>)
 800e126:	4a10      	ldr	r2, [pc, #64]	; (800e168 <_sbrk+0x54>)
 800e128:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800e12a:	4b0e      	ldr	r3, [pc, #56]	; (800e164 <_sbrk+0x50>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800e130:	4b0c      	ldr	r3, [pc, #48]	; (800e164 <_sbrk+0x50>)
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4413      	add	r3, r2
 800e138:	466a      	mov	r2, sp
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d907      	bls.n	800e14e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800e13e:	f000 ffbd 	bl	800f0bc <__errno>
 800e142:	4602      	mov	r2, r0
 800e144:	230c      	movs	r3, #12
 800e146:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800e148:	f04f 33ff 	mov.w	r3, #4294967295
 800e14c:	e006      	b.n	800e15c <_sbrk+0x48>
	}

	heap_end += incr;
 800e14e:	4b05      	ldr	r3, [pc, #20]	; (800e164 <_sbrk+0x50>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4413      	add	r3, r2
 800e156:	4a03      	ldr	r2, [pc, #12]	; (800e164 <_sbrk+0x50>)
 800e158:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800e15a:	68fb      	ldr	r3, [r7, #12]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	2000030c 	.word	0x2000030c
 800e168:	2000cab8 	.word	0x2000cab8

0800e16c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800e16c:	b480      	push	{r7}
 800e16e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e170:	4b17      	ldr	r3, [pc, #92]	; (800e1d0 <SystemInit+0x64>)
 800e172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e176:	4a16      	ldr	r2, [pc, #88]	; (800e1d0 <SystemInit+0x64>)
 800e178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e17c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800e180:	4b14      	ldr	r3, [pc, #80]	; (800e1d4 <SystemInit+0x68>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a13      	ldr	r2, [pc, #76]	; (800e1d4 <SystemInit+0x68>)
 800e186:	f043 0301 	orr.w	r3, r3, #1
 800e18a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800e18c:	4b11      	ldr	r3, [pc, #68]	; (800e1d4 <SystemInit+0x68>)
 800e18e:	2200      	movs	r2, #0
 800e190:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800e192:	4b10      	ldr	r3, [pc, #64]	; (800e1d4 <SystemInit+0x68>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4a0f      	ldr	r2, [pc, #60]	; (800e1d4 <SystemInit+0x68>)
 800e198:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800e19c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800e1a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800e1a2:	4b0c      	ldr	r3, [pc, #48]	; (800e1d4 <SystemInit+0x68>)
 800e1a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e1a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e1aa:	4b0a      	ldr	r3, [pc, #40]	; (800e1d4 <SystemInit+0x68>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a09      	ldr	r2, [pc, #36]	; (800e1d4 <SystemInit+0x68>)
 800e1b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e1b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800e1b6:	4b07      	ldr	r3, [pc, #28]	; (800e1d4 <SystemInit+0x68>)
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e1bc:	4b04      	ldr	r3, [pc, #16]	; (800e1d0 <SystemInit+0x64>)
 800e1be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e1c2:	609a      	str	r2, [r3, #8]
#endif
}
 800e1c4:	bf00      	nop
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop
 800e1d0:	e000ed00 	.word	0xe000ed00
 800e1d4:	40021000 	.word	0x40021000

0800e1d8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b08e      	sub	sp, #56	; 0x38
 800e1dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e1de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	601a      	str	r2, [r3, #0]
 800e1e6:	605a      	str	r2, [r3, #4]
 800e1e8:	609a      	str	r2, [r3, #8]
 800e1ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e1ec:	f107 031c 	add.w	r3, r7, #28
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	605a      	str	r2, [r3, #4]
 800e1f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e1f8:	463b      	mov	r3, r7
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	601a      	str	r2, [r3, #0]
 800e1fe:	605a      	str	r2, [r3, #4]
 800e200:	609a      	str	r2, [r3, #8]
 800e202:	60da      	str	r2, [r3, #12]
 800e204:	611a      	str	r2, [r3, #16]
 800e206:	615a      	str	r2, [r3, #20]
 800e208:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800e20a:	4b2c      	ldr	r3, [pc, #176]	; (800e2bc <MX_TIM2_Init+0xe4>)
 800e20c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e210:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e212:	4b2a      	ldr	r3, [pc, #168]	; (800e2bc <MX_TIM2_Init+0xe4>)
 800e214:	2200      	movs	r2, #0
 800e216:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e218:	4b28      	ldr	r3, [pc, #160]	; (800e2bc <MX_TIM2_Init+0xe4>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800e21e:	4b27      	ldr	r3, [pc, #156]	; (800e2bc <MX_TIM2_Init+0xe4>)
 800e220:	f04f 32ff 	mov.w	r2, #4294967295
 800e224:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e226:	4b25      	ldr	r3, [pc, #148]	; (800e2bc <MX_TIM2_Init+0xe4>)
 800e228:	2200      	movs	r2, #0
 800e22a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e22c:	4b23      	ldr	r3, [pc, #140]	; (800e2bc <MX_TIM2_Init+0xe4>)
 800e22e:	2200      	movs	r2, #0
 800e230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e232:	4822      	ldr	r0, [pc, #136]	; (800e2bc <MX_TIM2_Init+0xe4>)
 800e234:	f7f8 fdc5 	bl	8006dc2 <HAL_TIM_Base_Init>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d001      	beq.n	800e242 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800e23e:	f7ff fbc9 	bl	800d9d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e246:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e248:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e24c:	4619      	mov	r1, r3
 800e24e:	481b      	ldr	r0, [pc, #108]	; (800e2bc <MX_TIM2_Init+0xe4>)
 800e250:	f7f8 fee6 	bl	8007020 <HAL_TIM_ConfigClockSource>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d001      	beq.n	800e25e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800e25a:	f7ff fbbb 	bl	800d9d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800e25e:	4817      	ldr	r0, [pc, #92]	; (800e2bc <MX_TIM2_Init+0xe4>)
 800e260:	f7f8 fe06 	bl	8006e70 <HAL_TIM_OC_Init>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	d001      	beq.n	800e26e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800e26a:	f7ff fbb3 	bl	800d9d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e26e:	2300      	movs	r3, #0
 800e270:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e272:	2300      	movs	r3, #0
 800e274:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e276:	f107 031c 	add.w	r3, r7, #28
 800e27a:	4619      	mov	r1, r3
 800e27c:	480f      	ldr	r0, [pc, #60]	; (800e2bc <MX_TIM2_Init+0xe4>)
 800e27e:	f7f9 fb0f 	bl	80078a0 <HAL_TIMEx_MasterConfigSynchronization>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800e288:	f7ff fba4 	bl	800d9d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800e28c:	2300      	movs	r3, #0
 800e28e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800e290:	2300      	movs	r3, #0
 800e292:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e294:	2300      	movs	r3, #0
 800e296:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e298:	2300      	movs	r3, #0
 800e29a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e29c:	463b      	mov	r3, r7
 800e29e:	2200      	movs	r2, #0
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	4806      	ldr	r0, [pc, #24]	; (800e2bc <MX_TIM2_Init+0xe4>)
 800e2a4:	f7f8 fe46 	bl	8006f34 <HAL_TIM_OC_ConfigChannel>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d001      	beq.n	800e2b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800e2ae:	f7ff fb91 	bl	800d9d4 <Error_Handler>
  }

}
 800e2b2:	bf00      	nop
 800e2b4:	3738      	adds	r7, #56	; 0x38
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	2000c2a4 	.word	0x2000c2a4

0800e2c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b085      	sub	sp, #20
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2d0:	d10b      	bne.n	800e2ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e2d2:	4b09      	ldr	r3, [pc, #36]	; (800e2f8 <HAL_TIM_Base_MspInit+0x38>)
 800e2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2d6:	4a08      	ldr	r2, [pc, #32]	; (800e2f8 <HAL_TIM_Base_MspInit+0x38>)
 800e2d8:	f043 0301 	orr.w	r3, r3, #1
 800e2dc:	6593      	str	r3, [r2, #88]	; 0x58
 800e2de:	4b06      	ldr	r3, [pc, #24]	; (800e2f8 <HAL_TIM_Base_MspInit+0x38>)
 800e2e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2e2:	f003 0301 	and.w	r3, r3, #1
 800e2e6:	60fb      	str	r3, [r7, #12]
 800e2e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800e2ea:	bf00      	nop
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop
 800e2f8:	40021000 	.word	0x40021000

0800e2fc <__NVIC_GetPriorityGrouping>:
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e300:	4b04      	ldr	r3, [pc, #16]	; (800e314 <__NVIC_GetPriorityGrouping+0x18>)
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	0a1b      	lsrs	r3, r3, #8
 800e306:	f003 0307 	and.w	r3, r3, #7
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr
 800e314:	e000ed00 	.word	0xe000ed00

0800e318 <__NVIC_EnableIRQ>:
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	4603      	mov	r3, r0
 800e320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e326:	2b00      	cmp	r3, #0
 800e328:	db0b      	blt.n	800e342 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e32a:	79fb      	ldrb	r3, [r7, #7]
 800e32c:	f003 021f 	and.w	r2, r3, #31
 800e330:	4907      	ldr	r1, [pc, #28]	; (800e350 <__NVIC_EnableIRQ+0x38>)
 800e332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e336:	095b      	lsrs	r3, r3, #5
 800e338:	2001      	movs	r0, #1
 800e33a:	fa00 f202 	lsl.w	r2, r0, r2
 800e33e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e342:	bf00      	nop
 800e344:	370c      	adds	r7, #12
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	e000e100 	.word	0xe000e100

0800e354 <__NVIC_SetPriority>:
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
 800e35a:	4603      	mov	r3, r0
 800e35c:	6039      	str	r1, [r7, #0]
 800e35e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e364:	2b00      	cmp	r3, #0
 800e366:	db0a      	blt.n	800e37e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	b2da      	uxtb	r2, r3
 800e36c:	490c      	ldr	r1, [pc, #48]	; (800e3a0 <__NVIC_SetPriority+0x4c>)
 800e36e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e372:	0112      	lsls	r2, r2, #4
 800e374:	b2d2      	uxtb	r2, r2
 800e376:	440b      	add	r3, r1
 800e378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e37c:	e00a      	b.n	800e394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	b2da      	uxtb	r2, r3
 800e382:	4908      	ldr	r1, [pc, #32]	; (800e3a4 <__NVIC_SetPriority+0x50>)
 800e384:	79fb      	ldrb	r3, [r7, #7]
 800e386:	f003 030f 	and.w	r3, r3, #15
 800e38a:	3b04      	subs	r3, #4
 800e38c:	0112      	lsls	r2, r2, #4
 800e38e:	b2d2      	uxtb	r2, r2
 800e390:	440b      	add	r3, r1
 800e392:	761a      	strb	r2, [r3, #24]
}
 800e394:	bf00      	nop
 800e396:	370c      	adds	r7, #12
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr
 800e3a0:	e000e100 	.word	0xe000e100
 800e3a4:	e000ed00 	.word	0xe000ed00

0800e3a8 <NVIC_EncodePriority>:
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b089      	sub	sp, #36	; 0x24
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f003 0307 	and.w	r3, r3, #7
 800e3ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	f1c3 0307 	rsb	r3, r3, #7
 800e3c2:	2b04      	cmp	r3, #4
 800e3c4:	bf28      	it	cs
 800e3c6:	2304      	movcs	r3, #4
 800e3c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	2b06      	cmp	r3, #6
 800e3d0:	d902      	bls.n	800e3d8 <NVIC_EncodePriority+0x30>
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	3b03      	subs	r3, #3
 800e3d6:	e000      	b.n	800e3da <NVIC_EncodePriority+0x32>
 800e3d8:	2300      	movs	r3, #0
 800e3da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e3e0:	69bb      	ldr	r3, [r7, #24]
 800e3e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e3e6:	43da      	mvns	r2, r3
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	401a      	ands	r2, r3
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e3f0:	f04f 31ff 	mov.w	r1, #4294967295
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	fa01 f303 	lsl.w	r3, r1, r3
 800e3fa:	43d9      	mvns	r1, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e400:	4313      	orrs	r3, r2
}
 800e402:	4618      	mov	r0, r3
 800e404:	3724      	adds	r7, #36	; 0x24
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr

0800e40e <LL_USART_Enable>:
{
 800e40e:	b480      	push	{r7}
 800e410:	b083      	sub	sp, #12
 800e412:	af00      	add	r7, sp, #0
 800e414:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f043 0201 	orr.w	r2, r3, #1
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	601a      	str	r2, [r3, #0]
}
 800e422:	bf00      	nop
 800e424:	370c      	adds	r7, #12
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr

0800e42e <LL_USART_ConfigAsyncMode>:
{
 800e42e:	b480      	push	{r7}
 800e430:	b083      	sub	sp, #12
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	609a      	str	r2, [r3, #8]
}
 800e44e:	bf00      	nop
 800e450:	370c      	adds	r7, #12
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
	...

0800e45c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e464:	4b08      	ldr	r3, [pc, #32]	; (800e488 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e468:	4907      	ldr	r1, [pc, #28]	; (800e488 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	4313      	orrs	r3, r2
 800e46e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e470:	4b05      	ldr	r3, [pc, #20]	; (800e488 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4013      	ands	r3, r2
 800e478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e47a:	68fb      	ldr	r3, [r7, #12]
}
 800e47c:	bf00      	nop
 800e47e:	3714      	adds	r7, #20
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	40021000 	.word	0x40021000

0800e48c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b085      	sub	sp, #20
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800e494:	4b08      	ldr	r3, [pc, #32]	; (800e4b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800e496:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e498:	4907      	ldr	r1, [pc, #28]	; (800e4b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4313      	orrs	r3, r2
 800e49e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800e4a0:	4b05      	ldr	r3, [pc, #20]	; (800e4b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800e4a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
}
 800e4ac:	bf00      	nop
 800e4ae:	3714      	adds	r7, #20
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr
 800e4b8:	40021000 	.word	0x40021000

0800e4bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800e4c4:	4b08      	ldr	r3, [pc, #32]	; (800e4e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800e4c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e4c8:	4907      	ldr	r1, [pc, #28]	; (800e4e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800e4d0:	4b05      	ldr	r3, [pc, #20]	; (800e4e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800e4d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e4da:	68fb      	ldr	r3, [r7, #12]
}
 800e4dc:	bf00      	nop
 800e4de:	3714      	adds	r7, #20
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr
 800e4e8:	40021000 	.word	0x40021000

0800e4ec <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b08e      	sub	sp, #56	; 0x38
 800e4f0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800e4f2:	f107 031c 	add.w	r3, r7, #28
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	601a      	str	r2, [r3, #0]
 800e4fa:	605a      	str	r2, [r3, #4]
 800e4fc:	609a      	str	r2, [r3, #8]
 800e4fe:	60da      	str	r2, [r3, #12]
 800e500:	611a      	str	r2, [r3, #16]
 800e502:	615a      	str	r2, [r3, #20]
 800e504:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e506:	1d3b      	adds	r3, r7, #4
 800e508:	2200      	movs	r2, #0
 800e50a:	601a      	str	r2, [r3, #0]
 800e50c:	605a      	str	r2, [r3, #4]
 800e50e:	609a      	str	r2, [r3, #8]
 800e510:	60da      	str	r2, [r3, #12]
 800e512:	611a      	str	r2, [r3, #16]
 800e514:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800e516:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e51a:	f7ff ffcf 	bl	800e4bc <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800e51e:	2001      	movs	r0, #1
 800e520:	f7ff ff9c 	bl	800e45c <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800e524:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e528:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e52a:	2302      	movs	r3, #2
 800e52c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e52e:	2303      	movs	r3, #3
 800e530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800e532:	2300      	movs	r3, #0
 800e534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e536:	2300      	movs	r3, #0
 800e538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800e53a:	2307      	movs	r3, #7
 800e53c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e53e:	1d3b      	adds	r3, r7, #4
 800e540:	4619      	mov	r1, r3
 800e542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e546:	f7f9 fb64 	bl	8007c12 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800e54a:	f7ff fed7 	bl	800e2fc <__NVIC_GetPriorityGrouping>
 800e54e:	4603      	mov	r3, r0
 800e550:	2200      	movs	r2, #0
 800e552:	2100      	movs	r1, #0
 800e554:	4618      	mov	r0, r3
 800e556:	f7ff ff27 	bl	800e3a8 <NVIC_EncodePriority>
 800e55a:	4603      	mov	r3, r0
 800e55c:	4619      	mov	r1, r3
 800e55e:	2025      	movs	r0, #37	; 0x25
 800e560:	f7ff fef8 	bl	800e354 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800e564:	2025      	movs	r0, #37	; 0x25
 800e566:	f7ff fed7 	bl	800e318 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800e56a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e56e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800e570:	2300      	movs	r3, #0
 800e572:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800e574:	2300      	movs	r3, #0
 800e576:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800e578:	2300      	movs	r3, #0
 800e57a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800e57c:	230c      	movs	r3, #12
 800e57e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800e580:	2300      	movs	r3, #0
 800e582:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800e584:	2300      	movs	r3, #0
 800e586:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800e588:	f107 031c 	add.w	r3, r7, #28
 800e58c:	4619      	mov	r1, r3
 800e58e:	4806      	ldr	r0, [pc, #24]	; (800e5a8 <MX_USART1_UART_Init+0xbc>)
 800e590:	f7fa fd0e 	bl	8008fb0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800e594:	4804      	ldr	r0, [pc, #16]	; (800e5a8 <MX_USART1_UART_Init+0xbc>)
 800e596:	f7ff ff4a 	bl	800e42e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800e59a:	4803      	ldr	r0, [pc, #12]	; (800e5a8 <MX_USART1_UART_Init+0xbc>)
 800e59c:	f7ff ff37 	bl	800e40e <LL_USART_Enable>

}
 800e5a0:	bf00      	nop
 800e5a2:	3738      	adds	r7, #56	; 0x38
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	40013800 	.word	0x40013800

0800e5ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b08e      	sub	sp, #56	; 0x38
 800e5b0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800e5b2:	f107 031c 	add.w	r3, r7, #28
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	601a      	str	r2, [r3, #0]
 800e5ba:	605a      	str	r2, [r3, #4]
 800e5bc:	609a      	str	r2, [r3, #8]
 800e5be:	60da      	str	r2, [r3, #12]
 800e5c0:	611a      	str	r2, [r3, #16]
 800e5c2:	615a      	str	r2, [r3, #20]
 800e5c4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5c6:	1d3b      	adds	r3, r7, #4
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	605a      	str	r2, [r3, #4]
 800e5ce:	609a      	str	r2, [r3, #8]
 800e5d0:	60da      	str	r2, [r3, #12]
 800e5d2:	611a      	str	r2, [r3, #16]
 800e5d4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800e5d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800e5da:	f7ff ff57 	bl	800e48c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800e5de:	2001      	movs	r0, #1
 800e5e0:	f7ff ff3c 	bl	800e45c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800e5e4:	230c      	movs	r3, #12
 800e5e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e5e8:	2302      	movs	r3, #2
 800e5ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800e5f8:	2307      	movs	r3, #7
 800e5fa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5fc:	1d3b      	adds	r3, r7, #4
 800e5fe:	4619      	mov	r1, r3
 800e600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e604:	f7f9 fb05 	bl	8007c12 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800e608:	f7ff fe78 	bl	800e2fc <__NVIC_GetPriorityGrouping>
 800e60c:	4603      	mov	r3, r0
 800e60e:	2200      	movs	r2, #0
 800e610:	2100      	movs	r1, #0
 800e612:	4618      	mov	r0, r3
 800e614:	f7ff fec8 	bl	800e3a8 <NVIC_EncodePriority>
 800e618:	4603      	mov	r3, r0
 800e61a:	4619      	mov	r1, r3
 800e61c:	2026      	movs	r0, #38	; 0x26
 800e61e:	f7ff fe99 	bl	800e354 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800e622:	2026      	movs	r0, #38	; 0x26
 800e624:	f7ff fe78 	bl	800e318 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800e628:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e62c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800e62e:	2300      	movs	r3, #0
 800e630:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800e632:	2300      	movs	r3, #0
 800e634:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800e636:	2300      	movs	r3, #0
 800e638:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800e63a:	230c      	movs	r3, #12
 800e63c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800e63e:	2300      	movs	r3, #0
 800e640:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800e642:	2300      	movs	r3, #0
 800e644:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800e646:	f107 031c 	add.w	r3, r7, #28
 800e64a:	4619      	mov	r1, r3
 800e64c:	4806      	ldr	r0, [pc, #24]	; (800e668 <MX_USART2_UART_Init+0xbc>)
 800e64e:	f7fa fcaf 	bl	8008fb0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800e652:	4805      	ldr	r0, [pc, #20]	; (800e668 <MX_USART2_UART_Init+0xbc>)
 800e654:	f7ff feeb 	bl	800e42e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800e658:	4803      	ldr	r0, [pc, #12]	; (800e668 <MX_USART2_UART_Init+0xbc>)
 800e65a:	f7ff fed8 	bl	800e40e <LL_USART_Enable>

}
 800e65e:	bf00      	nop
 800e660:	3738      	adds	r7, #56	; 0x38
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	40004400 	.word	0x40004400

0800e66c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b08e      	sub	sp, #56	; 0x38
 800e670:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800e672:	f107 031c 	add.w	r3, r7, #28
 800e676:	2200      	movs	r2, #0
 800e678:	601a      	str	r2, [r3, #0]
 800e67a:	605a      	str	r2, [r3, #4]
 800e67c:	609a      	str	r2, [r3, #8]
 800e67e:	60da      	str	r2, [r3, #12]
 800e680:	611a      	str	r2, [r3, #16]
 800e682:	615a      	str	r2, [r3, #20]
 800e684:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e686:	1d3b      	adds	r3, r7, #4
 800e688:	2200      	movs	r2, #0
 800e68a:	601a      	str	r2, [r3, #0]
 800e68c:	605a      	str	r2, [r3, #4]
 800e68e:	609a      	str	r2, [r3, #8]
 800e690:	60da      	str	r2, [r3, #12]
 800e692:	611a      	str	r2, [r3, #16]
 800e694:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800e696:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800e69a:	f7ff fef7 	bl	800e48c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800e69e:	2004      	movs	r0, #4
 800e6a0:	f7ff fedc 	bl	800e45c <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC4   ------> USART3_TX
  PC5   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800e6a4:	2330      	movs	r3, #48	; 0x30
 800e6a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e6a8:	2302      	movs	r3, #2
 800e6aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e6ac:	2303      	movs	r3, #3
 800e6ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800e6b8:	2307      	movs	r3, #7
 800e6ba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e6bc:	1d3b      	adds	r3, r7, #4
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4810      	ldr	r0, [pc, #64]	; (800e704 <MX_USART3_UART_Init+0x98>)
 800e6c2:	f7f9 faa6 	bl	8007c12 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 800e6c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e6ca:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800e6d8:	230c      	movs	r3, #12
 800e6da:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800e6e4:	f107 031c 	add.w	r3, r7, #28
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	4807      	ldr	r0, [pc, #28]	; (800e708 <MX_USART3_UART_Init+0x9c>)
 800e6ec:	f7fa fc60 	bl	8008fb0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800e6f0:	4805      	ldr	r0, [pc, #20]	; (800e708 <MX_USART3_UART_Init+0x9c>)
 800e6f2:	f7ff fe9c 	bl	800e42e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800e6f6:	4804      	ldr	r0, [pc, #16]	; (800e708 <MX_USART3_UART_Init+0x9c>)
 800e6f8:	f7ff fe89 	bl	800e40e <LL_USART_Enable>

}
 800e6fc:	bf00      	nop
 800e6fe:	3738      	adds	r7, #56	; 0x38
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	48000800 	.word	0x48000800
 800e708:	40004800 	.word	0x40004800

0800e70c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e710:	2200      	movs	r2, #0
 800e712:	490e      	ldr	r1, [pc, #56]	; (800e74c <MX_USB_DEVICE_Init+0x40>)
 800e714:	480e      	ldr	r0, [pc, #56]	; (800e750 <MX_USB_DEVICE_Init+0x44>)
 800e716:	f7fc ff43 	bl	800b5a0 <USBD_Init>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d001      	beq.n	800e724 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e720:	f7ff f958 	bl	800d9d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800e724:	490b      	ldr	r1, [pc, #44]	; (800e754 <MX_USB_DEVICE_Init+0x48>)
 800e726:	480a      	ldr	r0, [pc, #40]	; (800e750 <MX_USB_DEVICE_Init+0x44>)
 800e728:	f7fc ff6a 	bl	800b600 <USBD_RegisterClass>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d001      	beq.n	800e736 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e732:	f7ff f94f 	bl	800d9d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e736:	4806      	ldr	r0, [pc, #24]	; (800e750 <MX_USB_DEVICE_Init+0x44>)
 800e738:	f7fc ff89 	bl	800b64e <USBD_Start>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d001      	beq.n	800e746 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800e742:	f7ff f947 	bl	800d9d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e746:	bf00      	nop
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	2000011c 	.word	0x2000011c
 800e750:	2000c2f0 	.word	0x2000c2f0
 800e754:	20000008 	.word	0x20000008

0800e758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b08a      	sub	sp, #40	; 0x28
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e760:	f107 0314 	add.w	r3, r7, #20
 800e764:	2200      	movs	r2, #0
 800e766:	601a      	str	r2, [r3, #0]
 800e768:	605a      	str	r2, [r3, #4]
 800e76a:	609a      	str	r2, [r3, #8]
 800e76c:	60da      	str	r2, [r3, #12]
 800e76e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a1c      	ldr	r2, [pc, #112]	; (800e7e8 <HAL_PCD_MspInit+0x90>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d131      	bne.n	800e7de <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e77a:	4b1c      	ldr	r3, [pc, #112]	; (800e7ec <HAL_PCD_MspInit+0x94>)
 800e77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e77e:	4a1b      	ldr	r2, [pc, #108]	; (800e7ec <HAL_PCD_MspInit+0x94>)
 800e780:	f043 0301 	orr.w	r3, r3, #1
 800e784:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e786:	4b19      	ldr	r3, [pc, #100]	; (800e7ec <HAL_PCD_MspInit+0x94>)
 800e788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e78a:	f003 0301 	and.w	r3, r3, #1
 800e78e:	613b      	str	r3, [r7, #16]
 800e790:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e792:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e798:	2302      	movs	r3, #2
 800e79a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e79c:	2300      	movs	r3, #0
 800e79e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7a0:	2303      	movs	r3, #3
 800e7a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800e7a4:	230a      	movs	r3, #10
 800e7a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7a8:	f107 0314 	add.w	r3, r7, #20
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e7b2:	f7f2 fee3 	bl	800157c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e7b6:	4b0d      	ldr	r3, [pc, #52]	; (800e7ec <HAL_PCD_MspInit+0x94>)
 800e7b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7ba:	4a0c      	ldr	r2, [pc, #48]	; (800e7ec <HAL_PCD_MspInit+0x94>)
 800e7bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e7c0:	6593      	str	r3, [r2, #88]	; 0x58
 800e7c2:	4b0a      	ldr	r3, [pc, #40]	; (800e7ec <HAL_PCD_MspInit+0x94>)
 800e7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e7ca:	60fb      	str	r3, [r7, #12]
 800e7cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	2043      	movs	r0, #67	; 0x43
 800e7d4:	f7f2 fdb1 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e7d8:	2043      	movs	r0, #67	; 0x43
 800e7da:	f7f2 fdca 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e7de:	bf00      	nop
 800e7e0:	3728      	adds	r7, #40	; 0x28
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	40006800 	.word	0x40006800
 800e7ec:	40021000 	.word	0x40021000

0800e7f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e804:	4619      	mov	r1, r3
 800e806:	4610      	mov	r0, r2
 800e808:	f7fc ff6c 	bl	800b6e4 <USBD_LL_SetupStage>
}
 800e80c:	bf00      	nop
 800e80e:	3708      	adds	r7, #8
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	460b      	mov	r3, r1
 800e81e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800e826:	78fa      	ldrb	r2, [r7, #3]
 800e828:	6879      	ldr	r1, [r7, #4]
 800e82a:	4613      	mov	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	4413      	add	r3, r2
 800e830:	00db      	lsls	r3, r3, #3
 800e832:	440b      	add	r3, r1
 800e834:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	78fb      	ldrb	r3, [r7, #3]
 800e83c:	4619      	mov	r1, r3
 800e83e:	f7fc ffa4 	bl	800b78a <USBD_LL_DataOutStage>
}
 800e842:	bf00      	nop
 800e844:	3708      	adds	r7, #8
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b082      	sub	sp, #8
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
 800e852:	460b      	mov	r3, r1
 800e854:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800e85c:	78fa      	ldrb	r2, [r7, #3]
 800e85e:	6879      	ldr	r1, [r7, #4]
 800e860:	4613      	mov	r3, r2
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4413      	add	r3, r2
 800e866:	00db      	lsls	r3, r3, #3
 800e868:	440b      	add	r3, r1
 800e86a:	333c      	adds	r3, #60	; 0x3c
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	78fb      	ldrb	r3, [r7, #3]
 800e870:	4619      	mov	r1, r3
 800e872:	f7fc ffed 	bl	800b850 <USBD_LL_DataInStage>
}
 800e876:	bf00      	nop
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b082      	sub	sp, #8
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fd f8f1 	bl	800ba74 <USBD_LL_SOF>
}
 800e892:	bf00      	nop
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}

0800e89a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b084      	sub	sp, #16
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	2b02      	cmp	r3, #2
 800e8ac:	d001      	beq.n	800e8b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e8ae:	f7ff f891 	bl	800d9d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e8b8:	7bfa      	ldrb	r2, [r7, #15]
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fd f89e 	bl	800b9fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fd f857 	bl	800b97c <USBD_LL_Reset>
}
 800e8ce:	bf00      	nop
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
	...

0800e8d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fd f899 	bl	800ba1e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	699b      	ldr	r3, [r3, #24]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d005      	beq.n	800e900 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e8f4:	4b04      	ldr	r3, [pc, #16]	; (800e908 <HAL_PCD_SuspendCallback+0x30>)
 800e8f6:	691b      	ldr	r3, [r3, #16]
 800e8f8:	4a03      	ldr	r2, [pc, #12]	; (800e908 <HAL_PCD_SuspendCallback+0x30>)
 800e8fa:	f043 0306 	orr.w	r3, r3, #6
 800e8fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e900:	bf00      	nop
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	e000ed00 	.word	0xe000ed00

0800e90c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	699b      	ldr	r3, [r3, #24]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d007      	beq.n	800e92c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e91c:	4b08      	ldr	r3, [pc, #32]	; (800e940 <HAL_PCD_ResumeCallback+0x34>)
 800e91e:	691b      	ldr	r3, [r3, #16]
 800e920:	4a07      	ldr	r2, [pc, #28]	; (800e940 <HAL_PCD_ResumeCallback+0x34>)
 800e922:	f023 0306 	bic.w	r3, r3, #6
 800e926:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e928:	f000 fa78 	bl	800ee1c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e932:	4618      	mov	r0, r3
 800e934:	f7fd f888 	bl	800ba48 <USBD_LL_Resume>
}
 800e938:	bf00      	nop
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	e000ed00 	.word	0xe000ed00

0800e944 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e94c:	f7f4 fdaa 	bl	80034a4 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e950:	4a22      	ldr	r2, [pc, #136]	; (800e9dc <USBD_LL_Init+0x98>)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4a20      	ldr	r2, [pc, #128]	; (800e9dc <USBD_LL_Init+0x98>)
 800e95c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e960:	4b1e      	ldr	r3, [pc, #120]	; (800e9dc <USBD_LL_Init+0x98>)
 800e962:	4a1f      	ldr	r2, [pc, #124]	; (800e9e0 <USBD_LL_Init+0x9c>)
 800e964:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e966:	4b1d      	ldr	r3, [pc, #116]	; (800e9dc <USBD_LL_Init+0x98>)
 800e968:	2208      	movs	r2, #8
 800e96a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e96c:	4b1b      	ldr	r3, [pc, #108]	; (800e9dc <USBD_LL_Init+0x98>)
 800e96e:	2202      	movs	r2, #2
 800e970:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e972:	4b1a      	ldr	r3, [pc, #104]	; (800e9dc <USBD_LL_Init+0x98>)
 800e974:	2202      	movs	r2, #2
 800e976:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e978:	4b18      	ldr	r3, [pc, #96]	; (800e9dc <USBD_LL_Init+0x98>)
 800e97a:	2200      	movs	r2, #0
 800e97c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e97e:	4b17      	ldr	r3, [pc, #92]	; (800e9dc <USBD_LL_Init+0x98>)
 800e980:	2200      	movs	r2, #0
 800e982:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e984:	4b15      	ldr	r3, [pc, #84]	; (800e9dc <USBD_LL_Init+0x98>)
 800e986:	2200      	movs	r2, #0
 800e988:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e98a:	4b14      	ldr	r3, [pc, #80]	; (800e9dc <USBD_LL_Init+0x98>)
 800e98c:	2200      	movs	r2, #0
 800e98e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e990:	4812      	ldr	r0, [pc, #72]	; (800e9dc <USBD_LL_Init+0x98>)
 800e992:	f7f3 f995 	bl	8001cc0 <HAL_PCD_Init>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d001      	beq.n	800e9a0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e99c:	f7ff f81a 	bl	800d9d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9a6:	2318      	movs	r3, #24
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	f7f4 fc98 	bl	80032e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9b6:	2358      	movs	r3, #88	; 0x58
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	2180      	movs	r1, #128	; 0x80
 800e9bc:	f7f4 fc90 	bl	80032e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	2181      	movs	r1, #129	; 0x81
 800e9ce:	f7f4 fc87 	bl	80032e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800e9d2:	2300      	movs	r3, #0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3708      	adds	r7, #8
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	2000c5c0 	.word	0x2000c5c0
 800e9e0:	40006800 	.word	0x40006800

0800e9e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b084      	sub	sp, #16
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7f3 fa72 	bl	8001ee4 <HAL_PCD_Start>
 800ea00:	4603      	mov	r3, r0
 800ea02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ea04:	7bbb      	ldrb	r3, [r7, #14]
 800ea06:	2b03      	cmp	r3, #3
 800ea08:	d816      	bhi.n	800ea38 <USBD_LL_Start+0x54>
 800ea0a:	a201      	add	r2, pc, #4	; (adr r2, 800ea10 <USBD_LL_Start+0x2c>)
 800ea0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea10:	0800ea21 	.word	0x0800ea21
 800ea14:	0800ea27 	.word	0x0800ea27
 800ea18:	0800ea2d 	.word	0x0800ea2d
 800ea1c:	0800ea33 	.word	0x0800ea33
    case HAL_OK :
      usb_status = USBD_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73fb      	strb	r3, [r7, #15]
    break;
 800ea24:	e00b      	b.n	800ea3e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea26:	2303      	movs	r3, #3
 800ea28:	73fb      	strb	r3, [r7, #15]
    break;
 800ea2a:	e008      	b.n	800ea3e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea30:	e005      	b.n	800ea3e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea32:	2303      	movs	r3, #3
 800ea34:	73fb      	strb	r3, [r7, #15]
    break;
 800ea36:	e002      	b.n	800ea3e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea3c:	bf00      	nop
  }
  return usb_status;
 800ea3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3710      	adds	r7, #16
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	4608      	mov	r0, r1
 800ea52:	4611      	mov	r1, r2
 800ea54:	461a      	mov	r2, r3
 800ea56:	4603      	mov	r3, r0
 800ea58:	70fb      	strb	r3, [r7, #3]
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	70bb      	strb	r3, [r7, #2]
 800ea5e:	4613      	mov	r3, r2
 800ea60:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea62:	2300      	movs	r3, #0
 800ea64:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea66:	2300      	movs	r3, #0
 800ea68:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ea70:	78bb      	ldrb	r3, [r7, #2]
 800ea72:	883a      	ldrh	r2, [r7, #0]
 800ea74:	78f9      	ldrb	r1, [r7, #3]
 800ea76:	f7f3 fbca 	bl	800220e <HAL_PCD_EP_Open>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ea7e:	7bbb      	ldrb	r3, [r7, #14]
 800ea80:	2b03      	cmp	r3, #3
 800ea82:	d817      	bhi.n	800eab4 <USBD_LL_OpenEP+0x6c>
 800ea84:	a201      	add	r2, pc, #4	; (adr r2, 800ea8c <USBD_LL_OpenEP+0x44>)
 800ea86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea8a:	bf00      	nop
 800ea8c:	0800ea9d 	.word	0x0800ea9d
 800ea90:	0800eaa3 	.word	0x0800eaa3
 800ea94:	0800eaa9 	.word	0x0800eaa9
 800ea98:	0800eaaf 	.word	0x0800eaaf
    case HAL_OK :
      usb_status = USBD_OK;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eaa0:	e00b      	b.n	800eaba <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eaa2:	2303      	movs	r3, #3
 800eaa4:	73fb      	strb	r3, [r7, #15]
    break;
 800eaa6:	e008      	b.n	800eaba <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	73fb      	strb	r3, [r7, #15]
    break;
 800eaac:	e005      	b.n	800eaba <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eaae:	2303      	movs	r3, #3
 800eab0:	73fb      	strb	r3, [r7, #15]
    break;
 800eab2:	e002      	b.n	800eaba <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800eab4:	2303      	movs	r3, #3
 800eab6:	73fb      	strb	r3, [r7, #15]
    break;
 800eab8:	bf00      	nop
  }
  return usb_status;
 800eaba:	7bfb      	ldrb	r3, [r7, #15]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3710      	adds	r7, #16
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	460b      	mov	r3, r1
 800eace:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ead0:	2300      	movs	r3, #0
 800ead2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ead4:	2300      	movs	r3, #0
 800ead6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eade:	78fa      	ldrb	r2, [r7, #3]
 800eae0:	4611      	mov	r1, r2
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7f3 fbf9 	bl	80022da <HAL_PCD_EP_Close>
 800eae8:	4603      	mov	r3, r0
 800eaea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eaec:	7bbb      	ldrb	r3, [r7, #14]
 800eaee:	2b03      	cmp	r3, #3
 800eaf0:	d816      	bhi.n	800eb20 <USBD_LL_CloseEP+0x5c>
 800eaf2:	a201      	add	r2, pc, #4	; (adr r2, 800eaf8 <USBD_LL_CloseEP+0x34>)
 800eaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf8:	0800eb09 	.word	0x0800eb09
 800eafc:	0800eb0f 	.word	0x0800eb0f
 800eb00:	0800eb15 	.word	0x0800eb15
 800eb04:	0800eb1b 	.word	0x0800eb1b
    case HAL_OK :
      usb_status = USBD_OK;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb0c:	e00b      	b.n	800eb26 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb0e:	2303      	movs	r3, #3
 800eb10:	73fb      	strb	r3, [r7, #15]
    break;
 800eb12:	e008      	b.n	800eb26 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb14:	2301      	movs	r3, #1
 800eb16:	73fb      	strb	r3, [r7, #15]
    break;
 800eb18:	e005      	b.n	800eb26 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb1a:	2303      	movs	r3, #3
 800eb1c:	73fb      	strb	r3, [r7, #15]
    break;
 800eb1e:	e002      	b.n	800eb26 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eb20:	2303      	movs	r3, #3
 800eb22:	73fb      	strb	r3, [r7, #15]
    break;
 800eb24:	bf00      	nop
  }
  return usb_status;
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3710      	adds	r7, #16
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	460b      	mov	r3, r1
 800eb3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb40:	2300      	movs	r3, #0
 800eb42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb4a:	78fa      	ldrb	r2, [r7, #3]
 800eb4c:	4611      	mov	r1, r2
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7f3 fc8b 	bl	800246a <HAL_PCD_EP_SetStall>
 800eb54:	4603      	mov	r3, r0
 800eb56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eb58:	7bbb      	ldrb	r3, [r7, #14]
 800eb5a:	2b03      	cmp	r3, #3
 800eb5c:	d816      	bhi.n	800eb8c <USBD_LL_StallEP+0x5c>
 800eb5e:	a201      	add	r2, pc, #4	; (adr r2, 800eb64 <USBD_LL_StallEP+0x34>)
 800eb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb64:	0800eb75 	.word	0x0800eb75
 800eb68:	0800eb7b 	.word	0x0800eb7b
 800eb6c:	0800eb81 	.word	0x0800eb81
 800eb70:	0800eb87 	.word	0x0800eb87
    case HAL_OK :
      usb_status = USBD_OK;
 800eb74:	2300      	movs	r3, #0
 800eb76:	73fb      	strb	r3, [r7, #15]
    break;
 800eb78:	e00b      	b.n	800eb92 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	73fb      	strb	r3, [r7, #15]
    break;
 800eb7e:	e008      	b.n	800eb92 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb80:	2301      	movs	r3, #1
 800eb82:	73fb      	strb	r3, [r7, #15]
    break;
 800eb84:	e005      	b.n	800eb92 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb86:	2303      	movs	r3, #3
 800eb88:	73fb      	strb	r3, [r7, #15]
    break;
 800eb8a:	e002      	b.n	800eb92 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eb8c:	2303      	movs	r3, #3
 800eb8e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb90:	bf00      	nop
  }
  return usb_status;
 800eb92:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3710      	adds	r7, #16
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	460b      	mov	r3, r1
 800eba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebac:	2300      	movs	r3, #0
 800ebae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ebb6:	78fa      	ldrb	r2, [r7, #3]
 800ebb8:	4611      	mov	r1, r2
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7f3 fcb5 	bl	800252a <HAL_PCD_EP_ClrStall>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ebc4:	7bbb      	ldrb	r3, [r7, #14]
 800ebc6:	2b03      	cmp	r3, #3
 800ebc8:	d816      	bhi.n	800ebf8 <USBD_LL_ClearStallEP+0x5c>
 800ebca:	a201      	add	r2, pc, #4	; (adr r2, 800ebd0 <USBD_LL_ClearStallEP+0x34>)
 800ebcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd0:	0800ebe1 	.word	0x0800ebe1
 800ebd4:	0800ebe7 	.word	0x0800ebe7
 800ebd8:	0800ebed 	.word	0x0800ebed
 800ebdc:	0800ebf3 	.word	0x0800ebf3
    case HAL_OK :
      usb_status = USBD_OK;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	73fb      	strb	r3, [r7, #15]
    break;
 800ebe4:	e00b      	b.n	800ebfe <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	73fb      	strb	r3, [r7, #15]
    break;
 800ebea:	e008      	b.n	800ebfe <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebec:	2301      	movs	r3, #1
 800ebee:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf0:	e005      	b.n	800ebfe <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebf2:	2303      	movs	r3, #3
 800ebf4:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf6:	e002      	b.n	800ebfe <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ebf8:	2303      	movs	r3, #3
 800ebfa:	73fb      	strb	r3, [r7, #15]
    break;
 800ebfc:	bf00      	nop
  }
  return usb_status;
 800ebfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b085      	sub	sp, #20
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	460b      	mov	r3, r1
 800ec12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ec1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	da0c      	bge.n	800ec3e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec24:	78fb      	ldrb	r3, [r7, #3]
 800ec26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec2a:	68f9      	ldr	r1, [r7, #12]
 800ec2c:	1c5a      	adds	r2, r3, #1
 800ec2e:	4613      	mov	r3, r2
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	4413      	add	r3, r2
 800ec34:	00db      	lsls	r3, r3, #3
 800ec36:	440b      	add	r3, r1
 800ec38:	3302      	adds	r3, #2
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	e00b      	b.n	800ec56 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ec3e:	78fb      	ldrb	r3, [r7, #3]
 800ec40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec44:	68f9      	ldr	r1, [r7, #12]
 800ec46:	4613      	mov	r3, r2
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	4413      	add	r3, r2
 800ec4c:	00db      	lsls	r3, r3, #3
 800ec4e:	440b      	add	r3, r1
 800ec50:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ec54:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3714      	adds	r7, #20
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
	...

0800ec64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec70:	2300      	movs	r3, #0
 800ec72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec74:	2300      	movs	r3, #0
 800ec76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec7e:	78fa      	ldrb	r2, [r7, #3]
 800ec80:	4611      	mov	r1, r2
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f3 fa9e 	bl	80021c4 <HAL_PCD_SetAddress>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ec8c:	7bbb      	ldrb	r3, [r7, #14]
 800ec8e:	2b03      	cmp	r3, #3
 800ec90:	d816      	bhi.n	800ecc0 <USBD_LL_SetUSBAddress+0x5c>
 800ec92:	a201      	add	r2, pc, #4	; (adr r2, 800ec98 <USBD_LL_SetUSBAddress+0x34>)
 800ec94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec98:	0800eca9 	.word	0x0800eca9
 800ec9c:	0800ecaf 	.word	0x0800ecaf
 800eca0:	0800ecb5 	.word	0x0800ecb5
 800eca4:	0800ecbb 	.word	0x0800ecbb
    case HAL_OK :
      usb_status = USBD_OK;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ecac:	e00b      	b.n	800ecc6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	73fb      	strb	r3, [r7, #15]
    break;
 800ecb2:	e008      	b.n	800ecc6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ecb8:	e005      	b.n	800ecc6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ecba:	2303      	movs	r3, #3
 800ecbc:	73fb      	strb	r3, [r7, #15]
    break;
 800ecbe:	e002      	b.n	800ecc6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ecc0:	2303      	movs	r3, #3
 800ecc2:	73fb      	strb	r3, [r7, #15]
    break;
 800ecc4:	bf00      	nop
  }
  return usb_status;
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	607a      	str	r2, [r7, #4]
 800ecda:	603b      	str	r3, [r7, #0]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ece0:	2300      	movs	r3, #0
 800ece2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ece4:	2300      	movs	r3, #0
 800ece6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ecee:	7af9      	ldrb	r1, [r7, #11]
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	f7f3 fb76 	bl	80023e4 <HAL_PCD_EP_Transmit>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ecfc:	7dbb      	ldrb	r3, [r7, #22]
 800ecfe:	2b03      	cmp	r3, #3
 800ed00:	d816      	bhi.n	800ed30 <USBD_LL_Transmit+0x60>
 800ed02:	a201      	add	r2, pc, #4	; (adr r2, 800ed08 <USBD_LL_Transmit+0x38>)
 800ed04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed08:	0800ed19 	.word	0x0800ed19
 800ed0c:	0800ed1f 	.word	0x0800ed1f
 800ed10:	0800ed25 	.word	0x0800ed25
 800ed14:	0800ed2b 	.word	0x0800ed2b
    case HAL_OK :
      usb_status = USBD_OK;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	75fb      	strb	r3, [r7, #23]
    break;
 800ed1c:	e00b      	b.n	800ed36 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed1e:	2303      	movs	r3, #3
 800ed20:	75fb      	strb	r3, [r7, #23]
    break;
 800ed22:	e008      	b.n	800ed36 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed24:	2301      	movs	r3, #1
 800ed26:	75fb      	strb	r3, [r7, #23]
    break;
 800ed28:	e005      	b.n	800ed36 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	75fb      	strb	r3, [r7, #23]
    break;
 800ed2e:	e002      	b.n	800ed36 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ed30:	2303      	movs	r3, #3
 800ed32:	75fb      	strb	r3, [r7, #23]
    break;
 800ed34:	bf00      	nop
  }
  return usb_status;
 800ed36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3718      	adds	r7, #24
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	607a      	str	r2, [r7, #4]
 800ed4a:	603b      	str	r3, [r7, #0]
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed50:	2300      	movs	r3, #0
 800ed52:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed5e:	7af9      	ldrb	r1, [r7, #11]
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	f7f3 fb01 	bl	800236a <HAL_PCD_EP_Receive>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ed6c:	7dbb      	ldrb	r3, [r7, #22]
 800ed6e:	2b03      	cmp	r3, #3
 800ed70:	d816      	bhi.n	800eda0 <USBD_LL_PrepareReceive+0x60>
 800ed72:	a201      	add	r2, pc, #4	; (adr r2, 800ed78 <USBD_LL_PrepareReceive+0x38>)
 800ed74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed78:	0800ed89 	.word	0x0800ed89
 800ed7c:	0800ed8f 	.word	0x0800ed8f
 800ed80:	0800ed95 	.word	0x0800ed95
 800ed84:	0800ed9b 	.word	0x0800ed9b
    case HAL_OK :
      usb_status = USBD_OK;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	75fb      	strb	r3, [r7, #23]
    break;
 800ed8c:	e00b      	b.n	800eda6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed8e:	2303      	movs	r3, #3
 800ed90:	75fb      	strb	r3, [r7, #23]
    break;
 800ed92:	e008      	b.n	800eda6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed94:	2301      	movs	r3, #1
 800ed96:	75fb      	strb	r3, [r7, #23]
    break;
 800ed98:	e005      	b.n	800eda6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed9a:	2303      	movs	r3, #3
 800ed9c:	75fb      	strb	r3, [r7, #23]
    break;
 800ed9e:	e002      	b.n	800eda6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800eda0:	2303      	movs	r3, #3
 800eda2:	75fb      	strb	r3, [r7, #23]
    break;
 800eda4:	bf00      	nop
  }
  return usb_status;
 800eda6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3718      	adds	r7, #24
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	460b      	mov	r3, r1
 800edba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800edbc:	78fb      	ldrb	r3, [r7, #3]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d002      	beq.n	800edc8 <HAL_PCDEx_LPM_Callback+0x18>
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d013      	beq.n	800edee <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800edc6:	e023      	b.n	800ee10 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	699b      	ldr	r3, [r3, #24]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d007      	beq.n	800ede0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800edd0:	f000 f824 	bl	800ee1c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800edd4:	4b10      	ldr	r3, [pc, #64]	; (800ee18 <HAL_PCDEx_LPM_Callback+0x68>)
 800edd6:	691b      	ldr	r3, [r3, #16]
 800edd8:	4a0f      	ldr	r2, [pc, #60]	; (800ee18 <HAL_PCDEx_LPM_Callback+0x68>)
 800edda:	f023 0306 	bic.w	r3, r3, #6
 800edde:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fc fe2e 	bl	800ba48 <USBD_LL_Resume>
    break;
 800edec:	e010      	b.n	800ee10 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fc fe12 	bl	800ba1e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	699b      	ldr	r3, [r3, #24]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d005      	beq.n	800ee0e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee02:	4b05      	ldr	r3, [pc, #20]	; (800ee18 <HAL_PCDEx_LPM_Callback+0x68>)
 800ee04:	691b      	ldr	r3, [r3, #16]
 800ee06:	4a04      	ldr	r2, [pc, #16]	; (800ee18 <HAL_PCDEx_LPM_Callback+0x68>)
 800ee08:	f043 0306 	orr.w	r3, r3, #6
 800ee0c:	6113      	str	r3, [r2, #16]
    break;
 800ee0e:	bf00      	nop
}
 800ee10:	bf00      	nop
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	e000ed00 	.word	0xe000ed00

0800ee1c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ee20:	f7fe fd2e 	bl	800d880 <SystemClock_Config>
}
 800ee24:	bf00      	nop
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	4603      	mov	r3, r0
 800ee30:	6039      	str	r1, [r7, #0]
 800ee32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	2212      	movs	r2, #18
 800ee38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ee3a:	4b03      	ldr	r3, [pc, #12]	; (800ee48 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	370c      	adds	r7, #12
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr
 800ee48:	2000013c 	.word	0x2000013c

0800ee4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	4603      	mov	r3, r0
 800ee54:	6039      	str	r1, [r7, #0]
 800ee56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	2204      	movs	r2, #4
 800ee5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ee5e:	4b03      	ldr	r3, [pc, #12]	; (800ee6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr
 800ee6c:	2000015c 	.word	0x2000015c

0800ee70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	4603      	mov	r3, r0
 800ee78:	6039      	str	r1, [r7, #0]
 800ee7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ee7c:	79fb      	ldrb	r3, [r7, #7]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d105      	bne.n	800ee8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	4907      	ldr	r1, [pc, #28]	; (800eea4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ee86:	4808      	ldr	r0, [pc, #32]	; (800eea8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ee88:	f7fd fb99 	bl	800c5be <USBD_GetString>
 800ee8c:	e004      	b.n	800ee98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ee8e:	683a      	ldr	r2, [r7, #0]
 800ee90:	4904      	ldr	r1, [pc, #16]	; (800eea4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ee92:	4805      	ldr	r0, [pc, #20]	; (800eea8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ee94:	f7fd fb93 	bl	800c5be <USBD_GetString>
  }
  return USBD_StrDesc;
 800ee98:	4b02      	ldr	r3, [pc, #8]	; (800eea4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3708      	adds	r7, #8
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	2000c8b4 	.word	0x2000c8b4
 800eea8:	08010144 	.word	0x08010144

0800eeac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	6039      	str	r1, [r7, #0]
 800eeb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eeb8:	683a      	ldr	r2, [r7, #0]
 800eeba:	4904      	ldr	r1, [pc, #16]	; (800eecc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eebc:	4804      	ldr	r0, [pc, #16]	; (800eed0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eebe:	f7fd fb7e 	bl	800c5be <USBD_GetString>
  return USBD_StrDesc;
 800eec2:	4b02      	ldr	r3, [pc, #8]	; (800eecc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3708      	adds	r7, #8
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	2000c8b4 	.word	0x2000c8b4
 800eed0:	0801015c 	.word	0x0801015c

0800eed4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	4603      	mov	r3, r0
 800eedc:	6039      	str	r1, [r7, #0]
 800eede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	221a      	movs	r2, #26
 800eee4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eee6:	f000 f855 	bl	800ef94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eeea:	4b02      	ldr	r3, [pc, #8]	; (800eef4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	20000160 	.word	0x20000160

0800eef8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	4603      	mov	r3, r0
 800ef00:	6039      	str	r1, [r7, #0]
 800ef02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ef04:	79fb      	ldrb	r3, [r7, #7]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d105      	bne.n	800ef16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	4907      	ldr	r1, [pc, #28]	; (800ef2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef0e:	4808      	ldr	r0, [pc, #32]	; (800ef30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef10:	f7fd fb55 	bl	800c5be <USBD_GetString>
 800ef14:	e004      	b.n	800ef20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	4904      	ldr	r1, [pc, #16]	; (800ef2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef1a:	4805      	ldr	r0, [pc, #20]	; (800ef30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef1c:	f7fd fb4f 	bl	800c5be <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef20:	4b02      	ldr	r3, [pc, #8]	; (800ef2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3708      	adds	r7, #8
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	2000c8b4 	.word	0x2000c8b4
 800ef30:	08010170 	.word	0x08010170

0800ef34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	6039      	str	r1, [r7, #0]
 800ef3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef40:	79fb      	ldrb	r3, [r7, #7]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d105      	bne.n	800ef52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef46:	683a      	ldr	r2, [r7, #0]
 800ef48:	4907      	ldr	r1, [pc, #28]	; (800ef68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef4a:	4808      	ldr	r0, [pc, #32]	; (800ef6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef4c:	f7fd fb37 	bl	800c5be <USBD_GetString>
 800ef50:	e004      	b.n	800ef5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef52:	683a      	ldr	r2, [r7, #0]
 800ef54:	4904      	ldr	r1, [pc, #16]	; (800ef68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef56:	4805      	ldr	r0, [pc, #20]	; (800ef6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef58:	f7fd fb31 	bl	800c5be <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef5c:	4b02      	ldr	r3, [pc, #8]	; (800ef68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	2000c8b4 	.word	0x2000c8b4
 800ef6c:	0801017c 	.word	0x0801017c

0800ef70 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	4603      	mov	r3, r0
 800ef78:	6039      	str	r1, [r7, #0]
 800ef7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	220c      	movs	r2, #12
 800ef80:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ef82:	4b03      	ldr	r3, [pc, #12]	; (800ef90 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr
 800ef90:	20000150 	.word	0x20000150

0800ef94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ef9a:	4b0f      	ldr	r3, [pc, #60]	; (800efd8 <Get_SerialNum+0x44>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800efa0:	4b0e      	ldr	r3, [pc, #56]	; (800efdc <Get_SerialNum+0x48>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800efa6:	4b0e      	ldr	r3, [pc, #56]	; (800efe0 <Get_SerialNum+0x4c>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4413      	add	r3, r2
 800efb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d009      	beq.n	800efce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800efba:	2208      	movs	r2, #8
 800efbc:	4909      	ldr	r1, [pc, #36]	; (800efe4 <Get_SerialNum+0x50>)
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f000 f814 	bl	800efec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800efc4:	2204      	movs	r2, #4
 800efc6:	4908      	ldr	r1, [pc, #32]	; (800efe8 <Get_SerialNum+0x54>)
 800efc8:	68b8      	ldr	r0, [r7, #8]
 800efca:	f000 f80f 	bl	800efec <IntToUnicode>
  }
}
 800efce:	bf00      	nop
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	1fff7590 	.word	0x1fff7590
 800efdc:	1fff7594 	.word	0x1fff7594
 800efe0:	1fff7598 	.word	0x1fff7598
 800efe4:	20000162 	.word	0x20000162
 800efe8:	20000172 	.word	0x20000172

0800efec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800efec:	b480      	push	{r7}
 800efee:	b087      	sub	sp, #28
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	4613      	mov	r3, r2
 800eff8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800effa:	2300      	movs	r3, #0
 800effc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800effe:	2300      	movs	r3, #0
 800f000:	75fb      	strb	r3, [r7, #23]
 800f002:	e027      	b.n	800f054 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	0f1b      	lsrs	r3, r3, #28
 800f008:	2b09      	cmp	r3, #9
 800f00a:	d80b      	bhi.n	800f024 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	0f1b      	lsrs	r3, r3, #28
 800f010:	b2da      	uxtb	r2, r3
 800f012:	7dfb      	ldrb	r3, [r7, #23]
 800f014:	005b      	lsls	r3, r3, #1
 800f016:	4619      	mov	r1, r3
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	440b      	add	r3, r1
 800f01c:	3230      	adds	r2, #48	; 0x30
 800f01e:	b2d2      	uxtb	r2, r2
 800f020:	701a      	strb	r2, [r3, #0]
 800f022:	e00a      	b.n	800f03a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	0f1b      	lsrs	r3, r3, #28
 800f028:	b2da      	uxtb	r2, r3
 800f02a:	7dfb      	ldrb	r3, [r7, #23]
 800f02c:	005b      	lsls	r3, r3, #1
 800f02e:	4619      	mov	r1, r3
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	440b      	add	r3, r1
 800f034:	3237      	adds	r2, #55	; 0x37
 800f036:	b2d2      	uxtb	r2, r2
 800f038:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	011b      	lsls	r3, r3, #4
 800f03e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f040:	7dfb      	ldrb	r3, [r7, #23]
 800f042:	005b      	lsls	r3, r3, #1
 800f044:	3301      	adds	r3, #1
 800f046:	68ba      	ldr	r2, [r7, #8]
 800f048:	4413      	add	r3, r2
 800f04a:	2200      	movs	r2, #0
 800f04c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f04e:	7dfb      	ldrb	r3, [r7, #23]
 800f050:	3301      	adds	r3, #1
 800f052:	75fb      	strb	r3, [r7, #23]
 800f054:	7dfa      	ldrb	r2, [r7, #23]
 800f056:	79fb      	ldrb	r3, [r7, #7]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d3d3      	bcc.n	800f004 <IntToUnicode+0x18>
  }
}
 800f05c:	bf00      	nop
 800f05e:	371c      	adds	r7, #28
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr

0800f068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800f068:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f0a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800f06c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800f06e:	e003      	b.n	800f078 <LoopCopyDataInit>

0800f070 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800f070:	4b0c      	ldr	r3, [pc, #48]	; (800f0a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800f072:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800f074:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800f076:	3104      	adds	r1, #4

0800f078 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800f078:	480b      	ldr	r0, [pc, #44]	; (800f0a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800f07a:	4b0c      	ldr	r3, [pc, #48]	; (800f0ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800f07c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800f07e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800f080:	d3f6      	bcc.n	800f070 <CopyDataInit>
	ldr	r2, =_sbss
 800f082:	4a0b      	ldr	r2, [pc, #44]	; (800f0b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 800f084:	e002      	b.n	800f08c <LoopFillZerobss>

0800f086 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800f086:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800f088:	f842 3b04 	str.w	r3, [r2], #4

0800f08c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800f08c:	4b09      	ldr	r3, [pc, #36]	; (800f0b4 <LoopForever+0x16>)
	cmp	r2, r3
 800f08e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800f090:	d3f9      	bcc.n	800f086 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800f092:	f7ff f86b 	bl	800e16c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f096:	f000 f817 	bl	800f0c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800f09a:	f7fe fb67 	bl	800d76c <main>

0800f09e <LoopForever>:

LoopForever:
    b LoopForever
 800f09e:	e7fe      	b.n	800f09e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800f0a0:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800f0a4:	08010288 	.word	0x08010288
	ldr	r0, =_sdata
 800f0a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800f0ac:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 800f0b0:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 800f0b4:	2000cab8 	.word	0x2000cab8

0800f0b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800f0b8:	e7fe      	b.n	800f0b8 <ADC1_IRQHandler>
	...

0800f0bc <__errno>:
 800f0bc:	4b01      	ldr	r3, [pc, #4]	; (800f0c4 <__errno+0x8>)
 800f0be:	6818      	ldr	r0, [r3, #0]
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	2000017c 	.word	0x2000017c

0800f0c8 <__libc_init_array>:
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	4e0d      	ldr	r6, [pc, #52]	; (800f100 <__libc_init_array+0x38>)
 800f0cc:	4c0d      	ldr	r4, [pc, #52]	; (800f104 <__libc_init_array+0x3c>)
 800f0ce:	1ba4      	subs	r4, r4, r6
 800f0d0:	10a4      	asrs	r4, r4, #2
 800f0d2:	2500      	movs	r5, #0
 800f0d4:	42a5      	cmp	r5, r4
 800f0d6:	d109      	bne.n	800f0ec <__libc_init_array+0x24>
 800f0d8:	4e0b      	ldr	r6, [pc, #44]	; (800f108 <__libc_init_array+0x40>)
 800f0da:	4c0c      	ldr	r4, [pc, #48]	; (800f10c <__libc_init_array+0x44>)
 800f0dc:	f000 ff78 	bl	800ffd0 <_init>
 800f0e0:	1ba4      	subs	r4, r4, r6
 800f0e2:	10a4      	asrs	r4, r4, #2
 800f0e4:	2500      	movs	r5, #0
 800f0e6:	42a5      	cmp	r5, r4
 800f0e8:	d105      	bne.n	800f0f6 <__libc_init_array+0x2e>
 800f0ea:	bd70      	pop	{r4, r5, r6, pc}
 800f0ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f0f0:	4798      	blx	r3
 800f0f2:	3501      	adds	r5, #1
 800f0f4:	e7ee      	b.n	800f0d4 <__libc_init_array+0xc>
 800f0f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f0fa:	4798      	blx	r3
 800f0fc:	3501      	adds	r5, #1
 800f0fe:	e7f2      	b.n	800f0e6 <__libc_init_array+0x1e>
 800f100:	08010280 	.word	0x08010280
 800f104:	08010280 	.word	0x08010280
 800f108:	08010280 	.word	0x08010280
 800f10c:	08010284 	.word	0x08010284

0800f110 <malloc>:
 800f110:	4b02      	ldr	r3, [pc, #8]	; (800f11c <malloc+0xc>)
 800f112:	4601      	mov	r1, r0
 800f114:	6818      	ldr	r0, [r3, #0]
 800f116:	f000 b861 	b.w	800f1dc <_malloc_r>
 800f11a:	bf00      	nop
 800f11c:	2000017c 	.word	0x2000017c

0800f120 <free>:
 800f120:	4b02      	ldr	r3, [pc, #8]	; (800f12c <free+0xc>)
 800f122:	4601      	mov	r1, r0
 800f124:	6818      	ldr	r0, [r3, #0]
 800f126:	f000 b80b 	b.w	800f140 <_free_r>
 800f12a:	bf00      	nop
 800f12c:	2000017c 	.word	0x2000017c

0800f130 <memset>:
 800f130:	4402      	add	r2, r0
 800f132:	4603      	mov	r3, r0
 800f134:	4293      	cmp	r3, r2
 800f136:	d100      	bne.n	800f13a <memset+0xa>
 800f138:	4770      	bx	lr
 800f13a:	f803 1b01 	strb.w	r1, [r3], #1
 800f13e:	e7f9      	b.n	800f134 <memset+0x4>

0800f140 <_free_r>:
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	4605      	mov	r5, r0
 800f144:	2900      	cmp	r1, #0
 800f146:	d045      	beq.n	800f1d4 <_free_r+0x94>
 800f148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f14c:	1f0c      	subs	r4, r1, #4
 800f14e:	2b00      	cmp	r3, #0
 800f150:	bfb8      	it	lt
 800f152:	18e4      	addlt	r4, r4, r3
 800f154:	f000 fbc6 	bl	800f8e4 <__malloc_lock>
 800f158:	4a1f      	ldr	r2, [pc, #124]	; (800f1d8 <_free_r+0x98>)
 800f15a:	6813      	ldr	r3, [r2, #0]
 800f15c:	4610      	mov	r0, r2
 800f15e:	b933      	cbnz	r3, 800f16e <_free_r+0x2e>
 800f160:	6063      	str	r3, [r4, #4]
 800f162:	6014      	str	r4, [r2, #0]
 800f164:	4628      	mov	r0, r5
 800f166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f16a:	f000 bbbc 	b.w	800f8e6 <__malloc_unlock>
 800f16e:	42a3      	cmp	r3, r4
 800f170:	d90c      	bls.n	800f18c <_free_r+0x4c>
 800f172:	6821      	ldr	r1, [r4, #0]
 800f174:	1862      	adds	r2, r4, r1
 800f176:	4293      	cmp	r3, r2
 800f178:	bf04      	itt	eq
 800f17a:	681a      	ldreq	r2, [r3, #0]
 800f17c:	685b      	ldreq	r3, [r3, #4]
 800f17e:	6063      	str	r3, [r4, #4]
 800f180:	bf04      	itt	eq
 800f182:	1852      	addeq	r2, r2, r1
 800f184:	6022      	streq	r2, [r4, #0]
 800f186:	6004      	str	r4, [r0, #0]
 800f188:	e7ec      	b.n	800f164 <_free_r+0x24>
 800f18a:	4613      	mov	r3, r2
 800f18c:	685a      	ldr	r2, [r3, #4]
 800f18e:	b10a      	cbz	r2, 800f194 <_free_r+0x54>
 800f190:	42a2      	cmp	r2, r4
 800f192:	d9fa      	bls.n	800f18a <_free_r+0x4a>
 800f194:	6819      	ldr	r1, [r3, #0]
 800f196:	1858      	adds	r0, r3, r1
 800f198:	42a0      	cmp	r0, r4
 800f19a:	d10b      	bne.n	800f1b4 <_free_r+0x74>
 800f19c:	6820      	ldr	r0, [r4, #0]
 800f19e:	4401      	add	r1, r0
 800f1a0:	1858      	adds	r0, r3, r1
 800f1a2:	4282      	cmp	r2, r0
 800f1a4:	6019      	str	r1, [r3, #0]
 800f1a6:	d1dd      	bne.n	800f164 <_free_r+0x24>
 800f1a8:	6810      	ldr	r0, [r2, #0]
 800f1aa:	6852      	ldr	r2, [r2, #4]
 800f1ac:	605a      	str	r2, [r3, #4]
 800f1ae:	4401      	add	r1, r0
 800f1b0:	6019      	str	r1, [r3, #0]
 800f1b2:	e7d7      	b.n	800f164 <_free_r+0x24>
 800f1b4:	d902      	bls.n	800f1bc <_free_r+0x7c>
 800f1b6:	230c      	movs	r3, #12
 800f1b8:	602b      	str	r3, [r5, #0]
 800f1ba:	e7d3      	b.n	800f164 <_free_r+0x24>
 800f1bc:	6820      	ldr	r0, [r4, #0]
 800f1be:	1821      	adds	r1, r4, r0
 800f1c0:	428a      	cmp	r2, r1
 800f1c2:	bf04      	itt	eq
 800f1c4:	6811      	ldreq	r1, [r2, #0]
 800f1c6:	6852      	ldreq	r2, [r2, #4]
 800f1c8:	6062      	str	r2, [r4, #4]
 800f1ca:	bf04      	itt	eq
 800f1cc:	1809      	addeq	r1, r1, r0
 800f1ce:	6021      	streq	r1, [r4, #0]
 800f1d0:	605c      	str	r4, [r3, #4]
 800f1d2:	e7c7      	b.n	800f164 <_free_r+0x24>
 800f1d4:	bd38      	pop	{r3, r4, r5, pc}
 800f1d6:	bf00      	nop
 800f1d8:	20000310 	.word	0x20000310

0800f1dc <_malloc_r>:
 800f1dc:	b570      	push	{r4, r5, r6, lr}
 800f1de:	1ccd      	adds	r5, r1, #3
 800f1e0:	f025 0503 	bic.w	r5, r5, #3
 800f1e4:	3508      	adds	r5, #8
 800f1e6:	2d0c      	cmp	r5, #12
 800f1e8:	bf38      	it	cc
 800f1ea:	250c      	movcc	r5, #12
 800f1ec:	2d00      	cmp	r5, #0
 800f1ee:	4606      	mov	r6, r0
 800f1f0:	db01      	blt.n	800f1f6 <_malloc_r+0x1a>
 800f1f2:	42a9      	cmp	r1, r5
 800f1f4:	d903      	bls.n	800f1fe <_malloc_r+0x22>
 800f1f6:	230c      	movs	r3, #12
 800f1f8:	6033      	str	r3, [r6, #0]
 800f1fa:	2000      	movs	r0, #0
 800f1fc:	bd70      	pop	{r4, r5, r6, pc}
 800f1fe:	f000 fb71 	bl	800f8e4 <__malloc_lock>
 800f202:	4a21      	ldr	r2, [pc, #132]	; (800f288 <_malloc_r+0xac>)
 800f204:	6814      	ldr	r4, [r2, #0]
 800f206:	4621      	mov	r1, r4
 800f208:	b991      	cbnz	r1, 800f230 <_malloc_r+0x54>
 800f20a:	4c20      	ldr	r4, [pc, #128]	; (800f28c <_malloc_r+0xb0>)
 800f20c:	6823      	ldr	r3, [r4, #0]
 800f20e:	b91b      	cbnz	r3, 800f218 <_malloc_r+0x3c>
 800f210:	4630      	mov	r0, r6
 800f212:	f000 f8b9 	bl	800f388 <_sbrk_r>
 800f216:	6020      	str	r0, [r4, #0]
 800f218:	4629      	mov	r1, r5
 800f21a:	4630      	mov	r0, r6
 800f21c:	f000 f8b4 	bl	800f388 <_sbrk_r>
 800f220:	1c43      	adds	r3, r0, #1
 800f222:	d124      	bne.n	800f26e <_malloc_r+0x92>
 800f224:	230c      	movs	r3, #12
 800f226:	6033      	str	r3, [r6, #0]
 800f228:	4630      	mov	r0, r6
 800f22a:	f000 fb5c 	bl	800f8e6 <__malloc_unlock>
 800f22e:	e7e4      	b.n	800f1fa <_malloc_r+0x1e>
 800f230:	680b      	ldr	r3, [r1, #0]
 800f232:	1b5b      	subs	r3, r3, r5
 800f234:	d418      	bmi.n	800f268 <_malloc_r+0x8c>
 800f236:	2b0b      	cmp	r3, #11
 800f238:	d90f      	bls.n	800f25a <_malloc_r+0x7e>
 800f23a:	600b      	str	r3, [r1, #0]
 800f23c:	50cd      	str	r5, [r1, r3]
 800f23e:	18cc      	adds	r4, r1, r3
 800f240:	4630      	mov	r0, r6
 800f242:	f000 fb50 	bl	800f8e6 <__malloc_unlock>
 800f246:	f104 000b 	add.w	r0, r4, #11
 800f24a:	1d23      	adds	r3, r4, #4
 800f24c:	f020 0007 	bic.w	r0, r0, #7
 800f250:	1ac3      	subs	r3, r0, r3
 800f252:	d0d3      	beq.n	800f1fc <_malloc_r+0x20>
 800f254:	425a      	negs	r2, r3
 800f256:	50e2      	str	r2, [r4, r3]
 800f258:	e7d0      	b.n	800f1fc <_malloc_r+0x20>
 800f25a:	428c      	cmp	r4, r1
 800f25c:	684b      	ldr	r3, [r1, #4]
 800f25e:	bf16      	itet	ne
 800f260:	6063      	strne	r3, [r4, #4]
 800f262:	6013      	streq	r3, [r2, #0]
 800f264:	460c      	movne	r4, r1
 800f266:	e7eb      	b.n	800f240 <_malloc_r+0x64>
 800f268:	460c      	mov	r4, r1
 800f26a:	6849      	ldr	r1, [r1, #4]
 800f26c:	e7cc      	b.n	800f208 <_malloc_r+0x2c>
 800f26e:	1cc4      	adds	r4, r0, #3
 800f270:	f024 0403 	bic.w	r4, r4, #3
 800f274:	42a0      	cmp	r0, r4
 800f276:	d005      	beq.n	800f284 <_malloc_r+0xa8>
 800f278:	1a21      	subs	r1, r4, r0
 800f27a:	4630      	mov	r0, r6
 800f27c:	f000 f884 	bl	800f388 <_sbrk_r>
 800f280:	3001      	adds	r0, #1
 800f282:	d0cf      	beq.n	800f224 <_malloc_r+0x48>
 800f284:	6025      	str	r5, [r4, #0]
 800f286:	e7db      	b.n	800f240 <_malloc_r+0x64>
 800f288:	20000310 	.word	0x20000310
 800f28c:	20000314 	.word	0x20000314

0800f290 <iprintf>:
 800f290:	b40f      	push	{r0, r1, r2, r3}
 800f292:	4b0a      	ldr	r3, [pc, #40]	; (800f2bc <iprintf+0x2c>)
 800f294:	b513      	push	{r0, r1, r4, lr}
 800f296:	681c      	ldr	r4, [r3, #0]
 800f298:	b124      	cbz	r4, 800f2a4 <iprintf+0x14>
 800f29a:	69a3      	ldr	r3, [r4, #24]
 800f29c:	b913      	cbnz	r3, 800f2a4 <iprintf+0x14>
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f000 fa32 	bl	800f708 <__sinit>
 800f2a4:	ab05      	add	r3, sp, #20
 800f2a6:	9a04      	ldr	r2, [sp, #16]
 800f2a8:	68a1      	ldr	r1, [r4, #8]
 800f2aa:	9301      	str	r3, [sp, #4]
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f000 fb45 	bl	800f93c <_vfiprintf_r>
 800f2b2:	b002      	add	sp, #8
 800f2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2b8:	b004      	add	sp, #16
 800f2ba:	4770      	bx	lr
 800f2bc:	2000017c 	.word	0x2000017c

0800f2c0 <_puts_r>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	460e      	mov	r6, r1
 800f2c4:	4605      	mov	r5, r0
 800f2c6:	b118      	cbz	r0, 800f2d0 <_puts_r+0x10>
 800f2c8:	6983      	ldr	r3, [r0, #24]
 800f2ca:	b90b      	cbnz	r3, 800f2d0 <_puts_r+0x10>
 800f2cc:	f000 fa1c 	bl	800f708 <__sinit>
 800f2d0:	69ab      	ldr	r3, [r5, #24]
 800f2d2:	68ac      	ldr	r4, [r5, #8]
 800f2d4:	b913      	cbnz	r3, 800f2dc <_puts_r+0x1c>
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	f000 fa16 	bl	800f708 <__sinit>
 800f2dc:	4b23      	ldr	r3, [pc, #140]	; (800f36c <_puts_r+0xac>)
 800f2de:	429c      	cmp	r4, r3
 800f2e0:	d117      	bne.n	800f312 <_puts_r+0x52>
 800f2e2:	686c      	ldr	r4, [r5, #4]
 800f2e4:	89a3      	ldrh	r3, [r4, #12]
 800f2e6:	071b      	lsls	r3, r3, #28
 800f2e8:	d51d      	bpl.n	800f326 <_puts_r+0x66>
 800f2ea:	6923      	ldr	r3, [r4, #16]
 800f2ec:	b1db      	cbz	r3, 800f326 <_puts_r+0x66>
 800f2ee:	3e01      	subs	r6, #1
 800f2f0:	68a3      	ldr	r3, [r4, #8]
 800f2f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f2f6:	3b01      	subs	r3, #1
 800f2f8:	60a3      	str	r3, [r4, #8]
 800f2fa:	b9e9      	cbnz	r1, 800f338 <_puts_r+0x78>
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	da2e      	bge.n	800f35e <_puts_r+0x9e>
 800f300:	4622      	mov	r2, r4
 800f302:	210a      	movs	r1, #10
 800f304:	4628      	mov	r0, r5
 800f306:	f000 f84f 	bl	800f3a8 <__swbuf_r>
 800f30a:	3001      	adds	r0, #1
 800f30c:	d011      	beq.n	800f332 <_puts_r+0x72>
 800f30e:	200a      	movs	r0, #10
 800f310:	e011      	b.n	800f336 <_puts_r+0x76>
 800f312:	4b17      	ldr	r3, [pc, #92]	; (800f370 <_puts_r+0xb0>)
 800f314:	429c      	cmp	r4, r3
 800f316:	d101      	bne.n	800f31c <_puts_r+0x5c>
 800f318:	68ac      	ldr	r4, [r5, #8]
 800f31a:	e7e3      	b.n	800f2e4 <_puts_r+0x24>
 800f31c:	4b15      	ldr	r3, [pc, #84]	; (800f374 <_puts_r+0xb4>)
 800f31e:	429c      	cmp	r4, r3
 800f320:	bf08      	it	eq
 800f322:	68ec      	ldreq	r4, [r5, #12]
 800f324:	e7de      	b.n	800f2e4 <_puts_r+0x24>
 800f326:	4621      	mov	r1, r4
 800f328:	4628      	mov	r0, r5
 800f32a:	f000 f88f 	bl	800f44c <__swsetup_r>
 800f32e:	2800      	cmp	r0, #0
 800f330:	d0dd      	beq.n	800f2ee <_puts_r+0x2e>
 800f332:	f04f 30ff 	mov.w	r0, #4294967295
 800f336:	bd70      	pop	{r4, r5, r6, pc}
 800f338:	2b00      	cmp	r3, #0
 800f33a:	da04      	bge.n	800f346 <_puts_r+0x86>
 800f33c:	69a2      	ldr	r2, [r4, #24]
 800f33e:	429a      	cmp	r2, r3
 800f340:	dc06      	bgt.n	800f350 <_puts_r+0x90>
 800f342:	290a      	cmp	r1, #10
 800f344:	d004      	beq.n	800f350 <_puts_r+0x90>
 800f346:	6823      	ldr	r3, [r4, #0]
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	6022      	str	r2, [r4, #0]
 800f34c:	7019      	strb	r1, [r3, #0]
 800f34e:	e7cf      	b.n	800f2f0 <_puts_r+0x30>
 800f350:	4622      	mov	r2, r4
 800f352:	4628      	mov	r0, r5
 800f354:	f000 f828 	bl	800f3a8 <__swbuf_r>
 800f358:	3001      	adds	r0, #1
 800f35a:	d1c9      	bne.n	800f2f0 <_puts_r+0x30>
 800f35c:	e7e9      	b.n	800f332 <_puts_r+0x72>
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	200a      	movs	r0, #10
 800f362:	1c5a      	adds	r2, r3, #1
 800f364:	6022      	str	r2, [r4, #0]
 800f366:	7018      	strb	r0, [r3, #0]
 800f368:	e7e5      	b.n	800f336 <_puts_r+0x76>
 800f36a:	bf00      	nop
 800f36c:	0801020c 	.word	0x0801020c
 800f370:	0801022c 	.word	0x0801022c
 800f374:	080101ec 	.word	0x080101ec

0800f378 <puts>:
 800f378:	4b02      	ldr	r3, [pc, #8]	; (800f384 <puts+0xc>)
 800f37a:	4601      	mov	r1, r0
 800f37c:	6818      	ldr	r0, [r3, #0]
 800f37e:	f7ff bf9f 	b.w	800f2c0 <_puts_r>
 800f382:	bf00      	nop
 800f384:	2000017c 	.word	0x2000017c

0800f388 <_sbrk_r>:
 800f388:	b538      	push	{r3, r4, r5, lr}
 800f38a:	4c06      	ldr	r4, [pc, #24]	; (800f3a4 <_sbrk_r+0x1c>)
 800f38c:	2300      	movs	r3, #0
 800f38e:	4605      	mov	r5, r0
 800f390:	4608      	mov	r0, r1
 800f392:	6023      	str	r3, [r4, #0]
 800f394:	f7fe febe 	bl	800e114 <_sbrk>
 800f398:	1c43      	adds	r3, r0, #1
 800f39a:	d102      	bne.n	800f3a2 <_sbrk_r+0x1a>
 800f39c:	6823      	ldr	r3, [r4, #0]
 800f39e:	b103      	cbz	r3, 800f3a2 <_sbrk_r+0x1a>
 800f3a0:	602b      	str	r3, [r5, #0]
 800f3a2:	bd38      	pop	{r3, r4, r5, pc}
 800f3a4:	2000cab4 	.word	0x2000cab4

0800f3a8 <__swbuf_r>:
 800f3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3aa:	460e      	mov	r6, r1
 800f3ac:	4614      	mov	r4, r2
 800f3ae:	4605      	mov	r5, r0
 800f3b0:	b118      	cbz	r0, 800f3ba <__swbuf_r+0x12>
 800f3b2:	6983      	ldr	r3, [r0, #24]
 800f3b4:	b90b      	cbnz	r3, 800f3ba <__swbuf_r+0x12>
 800f3b6:	f000 f9a7 	bl	800f708 <__sinit>
 800f3ba:	4b21      	ldr	r3, [pc, #132]	; (800f440 <__swbuf_r+0x98>)
 800f3bc:	429c      	cmp	r4, r3
 800f3be:	d12a      	bne.n	800f416 <__swbuf_r+0x6e>
 800f3c0:	686c      	ldr	r4, [r5, #4]
 800f3c2:	69a3      	ldr	r3, [r4, #24]
 800f3c4:	60a3      	str	r3, [r4, #8]
 800f3c6:	89a3      	ldrh	r3, [r4, #12]
 800f3c8:	071a      	lsls	r2, r3, #28
 800f3ca:	d52e      	bpl.n	800f42a <__swbuf_r+0x82>
 800f3cc:	6923      	ldr	r3, [r4, #16]
 800f3ce:	b363      	cbz	r3, 800f42a <__swbuf_r+0x82>
 800f3d0:	6923      	ldr	r3, [r4, #16]
 800f3d2:	6820      	ldr	r0, [r4, #0]
 800f3d4:	1ac0      	subs	r0, r0, r3
 800f3d6:	6963      	ldr	r3, [r4, #20]
 800f3d8:	b2f6      	uxtb	r6, r6
 800f3da:	4283      	cmp	r3, r0
 800f3dc:	4637      	mov	r7, r6
 800f3de:	dc04      	bgt.n	800f3ea <__swbuf_r+0x42>
 800f3e0:	4621      	mov	r1, r4
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	f000 f926 	bl	800f634 <_fflush_r>
 800f3e8:	bb28      	cbnz	r0, 800f436 <__swbuf_r+0x8e>
 800f3ea:	68a3      	ldr	r3, [r4, #8]
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	60a3      	str	r3, [r4, #8]
 800f3f0:	6823      	ldr	r3, [r4, #0]
 800f3f2:	1c5a      	adds	r2, r3, #1
 800f3f4:	6022      	str	r2, [r4, #0]
 800f3f6:	701e      	strb	r6, [r3, #0]
 800f3f8:	6963      	ldr	r3, [r4, #20]
 800f3fa:	3001      	adds	r0, #1
 800f3fc:	4283      	cmp	r3, r0
 800f3fe:	d004      	beq.n	800f40a <__swbuf_r+0x62>
 800f400:	89a3      	ldrh	r3, [r4, #12]
 800f402:	07db      	lsls	r3, r3, #31
 800f404:	d519      	bpl.n	800f43a <__swbuf_r+0x92>
 800f406:	2e0a      	cmp	r6, #10
 800f408:	d117      	bne.n	800f43a <__swbuf_r+0x92>
 800f40a:	4621      	mov	r1, r4
 800f40c:	4628      	mov	r0, r5
 800f40e:	f000 f911 	bl	800f634 <_fflush_r>
 800f412:	b190      	cbz	r0, 800f43a <__swbuf_r+0x92>
 800f414:	e00f      	b.n	800f436 <__swbuf_r+0x8e>
 800f416:	4b0b      	ldr	r3, [pc, #44]	; (800f444 <__swbuf_r+0x9c>)
 800f418:	429c      	cmp	r4, r3
 800f41a:	d101      	bne.n	800f420 <__swbuf_r+0x78>
 800f41c:	68ac      	ldr	r4, [r5, #8]
 800f41e:	e7d0      	b.n	800f3c2 <__swbuf_r+0x1a>
 800f420:	4b09      	ldr	r3, [pc, #36]	; (800f448 <__swbuf_r+0xa0>)
 800f422:	429c      	cmp	r4, r3
 800f424:	bf08      	it	eq
 800f426:	68ec      	ldreq	r4, [r5, #12]
 800f428:	e7cb      	b.n	800f3c2 <__swbuf_r+0x1a>
 800f42a:	4621      	mov	r1, r4
 800f42c:	4628      	mov	r0, r5
 800f42e:	f000 f80d 	bl	800f44c <__swsetup_r>
 800f432:	2800      	cmp	r0, #0
 800f434:	d0cc      	beq.n	800f3d0 <__swbuf_r+0x28>
 800f436:	f04f 37ff 	mov.w	r7, #4294967295
 800f43a:	4638      	mov	r0, r7
 800f43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f43e:	bf00      	nop
 800f440:	0801020c 	.word	0x0801020c
 800f444:	0801022c 	.word	0x0801022c
 800f448:	080101ec 	.word	0x080101ec

0800f44c <__swsetup_r>:
 800f44c:	4b32      	ldr	r3, [pc, #200]	; (800f518 <__swsetup_r+0xcc>)
 800f44e:	b570      	push	{r4, r5, r6, lr}
 800f450:	681d      	ldr	r5, [r3, #0]
 800f452:	4606      	mov	r6, r0
 800f454:	460c      	mov	r4, r1
 800f456:	b125      	cbz	r5, 800f462 <__swsetup_r+0x16>
 800f458:	69ab      	ldr	r3, [r5, #24]
 800f45a:	b913      	cbnz	r3, 800f462 <__swsetup_r+0x16>
 800f45c:	4628      	mov	r0, r5
 800f45e:	f000 f953 	bl	800f708 <__sinit>
 800f462:	4b2e      	ldr	r3, [pc, #184]	; (800f51c <__swsetup_r+0xd0>)
 800f464:	429c      	cmp	r4, r3
 800f466:	d10f      	bne.n	800f488 <__swsetup_r+0x3c>
 800f468:	686c      	ldr	r4, [r5, #4]
 800f46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f46e:	b29a      	uxth	r2, r3
 800f470:	0715      	lsls	r5, r2, #28
 800f472:	d42c      	bmi.n	800f4ce <__swsetup_r+0x82>
 800f474:	06d0      	lsls	r0, r2, #27
 800f476:	d411      	bmi.n	800f49c <__swsetup_r+0x50>
 800f478:	2209      	movs	r2, #9
 800f47a:	6032      	str	r2, [r6, #0]
 800f47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f480:	81a3      	strh	r3, [r4, #12]
 800f482:	f04f 30ff 	mov.w	r0, #4294967295
 800f486:	e03e      	b.n	800f506 <__swsetup_r+0xba>
 800f488:	4b25      	ldr	r3, [pc, #148]	; (800f520 <__swsetup_r+0xd4>)
 800f48a:	429c      	cmp	r4, r3
 800f48c:	d101      	bne.n	800f492 <__swsetup_r+0x46>
 800f48e:	68ac      	ldr	r4, [r5, #8]
 800f490:	e7eb      	b.n	800f46a <__swsetup_r+0x1e>
 800f492:	4b24      	ldr	r3, [pc, #144]	; (800f524 <__swsetup_r+0xd8>)
 800f494:	429c      	cmp	r4, r3
 800f496:	bf08      	it	eq
 800f498:	68ec      	ldreq	r4, [r5, #12]
 800f49a:	e7e6      	b.n	800f46a <__swsetup_r+0x1e>
 800f49c:	0751      	lsls	r1, r2, #29
 800f49e:	d512      	bpl.n	800f4c6 <__swsetup_r+0x7a>
 800f4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4a2:	b141      	cbz	r1, 800f4b6 <__swsetup_r+0x6a>
 800f4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4a8:	4299      	cmp	r1, r3
 800f4aa:	d002      	beq.n	800f4b2 <__swsetup_r+0x66>
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f7ff fe47 	bl	800f140 <_free_r>
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	6363      	str	r3, [r4, #52]	; 0x34
 800f4b6:	89a3      	ldrh	r3, [r4, #12]
 800f4b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4bc:	81a3      	strh	r3, [r4, #12]
 800f4be:	2300      	movs	r3, #0
 800f4c0:	6063      	str	r3, [r4, #4]
 800f4c2:	6923      	ldr	r3, [r4, #16]
 800f4c4:	6023      	str	r3, [r4, #0]
 800f4c6:	89a3      	ldrh	r3, [r4, #12]
 800f4c8:	f043 0308 	orr.w	r3, r3, #8
 800f4cc:	81a3      	strh	r3, [r4, #12]
 800f4ce:	6923      	ldr	r3, [r4, #16]
 800f4d0:	b94b      	cbnz	r3, 800f4e6 <__swsetup_r+0x9a>
 800f4d2:	89a3      	ldrh	r3, [r4, #12]
 800f4d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4dc:	d003      	beq.n	800f4e6 <__swsetup_r+0x9a>
 800f4de:	4621      	mov	r1, r4
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	f000 f9bf 	bl	800f864 <__smakebuf_r>
 800f4e6:	89a2      	ldrh	r2, [r4, #12]
 800f4e8:	f012 0301 	ands.w	r3, r2, #1
 800f4ec:	d00c      	beq.n	800f508 <__swsetup_r+0xbc>
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	60a3      	str	r3, [r4, #8]
 800f4f2:	6963      	ldr	r3, [r4, #20]
 800f4f4:	425b      	negs	r3, r3
 800f4f6:	61a3      	str	r3, [r4, #24]
 800f4f8:	6923      	ldr	r3, [r4, #16]
 800f4fa:	b953      	cbnz	r3, 800f512 <__swsetup_r+0xc6>
 800f4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f500:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f504:	d1ba      	bne.n	800f47c <__swsetup_r+0x30>
 800f506:	bd70      	pop	{r4, r5, r6, pc}
 800f508:	0792      	lsls	r2, r2, #30
 800f50a:	bf58      	it	pl
 800f50c:	6963      	ldrpl	r3, [r4, #20]
 800f50e:	60a3      	str	r3, [r4, #8]
 800f510:	e7f2      	b.n	800f4f8 <__swsetup_r+0xac>
 800f512:	2000      	movs	r0, #0
 800f514:	e7f7      	b.n	800f506 <__swsetup_r+0xba>
 800f516:	bf00      	nop
 800f518:	2000017c 	.word	0x2000017c
 800f51c:	0801020c 	.word	0x0801020c
 800f520:	0801022c 	.word	0x0801022c
 800f524:	080101ec 	.word	0x080101ec

0800f528 <__sflush_r>:
 800f528:	898a      	ldrh	r2, [r1, #12]
 800f52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f52e:	4605      	mov	r5, r0
 800f530:	0710      	lsls	r0, r2, #28
 800f532:	460c      	mov	r4, r1
 800f534:	d458      	bmi.n	800f5e8 <__sflush_r+0xc0>
 800f536:	684b      	ldr	r3, [r1, #4]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	dc05      	bgt.n	800f548 <__sflush_r+0x20>
 800f53c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f53e:	2b00      	cmp	r3, #0
 800f540:	dc02      	bgt.n	800f548 <__sflush_r+0x20>
 800f542:	2000      	movs	r0, #0
 800f544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f54a:	2e00      	cmp	r6, #0
 800f54c:	d0f9      	beq.n	800f542 <__sflush_r+0x1a>
 800f54e:	2300      	movs	r3, #0
 800f550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f554:	682f      	ldr	r7, [r5, #0]
 800f556:	6a21      	ldr	r1, [r4, #32]
 800f558:	602b      	str	r3, [r5, #0]
 800f55a:	d032      	beq.n	800f5c2 <__sflush_r+0x9a>
 800f55c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f55e:	89a3      	ldrh	r3, [r4, #12]
 800f560:	075a      	lsls	r2, r3, #29
 800f562:	d505      	bpl.n	800f570 <__sflush_r+0x48>
 800f564:	6863      	ldr	r3, [r4, #4]
 800f566:	1ac0      	subs	r0, r0, r3
 800f568:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f56a:	b10b      	cbz	r3, 800f570 <__sflush_r+0x48>
 800f56c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f56e:	1ac0      	subs	r0, r0, r3
 800f570:	2300      	movs	r3, #0
 800f572:	4602      	mov	r2, r0
 800f574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f576:	6a21      	ldr	r1, [r4, #32]
 800f578:	4628      	mov	r0, r5
 800f57a:	47b0      	blx	r6
 800f57c:	1c43      	adds	r3, r0, #1
 800f57e:	89a3      	ldrh	r3, [r4, #12]
 800f580:	d106      	bne.n	800f590 <__sflush_r+0x68>
 800f582:	6829      	ldr	r1, [r5, #0]
 800f584:	291d      	cmp	r1, #29
 800f586:	d848      	bhi.n	800f61a <__sflush_r+0xf2>
 800f588:	4a29      	ldr	r2, [pc, #164]	; (800f630 <__sflush_r+0x108>)
 800f58a:	40ca      	lsrs	r2, r1
 800f58c:	07d6      	lsls	r6, r2, #31
 800f58e:	d544      	bpl.n	800f61a <__sflush_r+0xf2>
 800f590:	2200      	movs	r2, #0
 800f592:	6062      	str	r2, [r4, #4]
 800f594:	04d9      	lsls	r1, r3, #19
 800f596:	6922      	ldr	r2, [r4, #16]
 800f598:	6022      	str	r2, [r4, #0]
 800f59a:	d504      	bpl.n	800f5a6 <__sflush_r+0x7e>
 800f59c:	1c42      	adds	r2, r0, #1
 800f59e:	d101      	bne.n	800f5a4 <__sflush_r+0x7c>
 800f5a0:	682b      	ldr	r3, [r5, #0]
 800f5a2:	b903      	cbnz	r3, 800f5a6 <__sflush_r+0x7e>
 800f5a4:	6560      	str	r0, [r4, #84]	; 0x54
 800f5a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5a8:	602f      	str	r7, [r5, #0]
 800f5aa:	2900      	cmp	r1, #0
 800f5ac:	d0c9      	beq.n	800f542 <__sflush_r+0x1a>
 800f5ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5b2:	4299      	cmp	r1, r3
 800f5b4:	d002      	beq.n	800f5bc <__sflush_r+0x94>
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	f7ff fdc2 	bl	800f140 <_free_r>
 800f5bc:	2000      	movs	r0, #0
 800f5be:	6360      	str	r0, [r4, #52]	; 0x34
 800f5c0:	e7c0      	b.n	800f544 <__sflush_r+0x1c>
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	47b0      	blx	r6
 800f5c8:	1c41      	adds	r1, r0, #1
 800f5ca:	d1c8      	bne.n	800f55e <__sflush_r+0x36>
 800f5cc:	682b      	ldr	r3, [r5, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d0c5      	beq.n	800f55e <__sflush_r+0x36>
 800f5d2:	2b1d      	cmp	r3, #29
 800f5d4:	d001      	beq.n	800f5da <__sflush_r+0xb2>
 800f5d6:	2b16      	cmp	r3, #22
 800f5d8:	d101      	bne.n	800f5de <__sflush_r+0xb6>
 800f5da:	602f      	str	r7, [r5, #0]
 800f5dc:	e7b1      	b.n	800f542 <__sflush_r+0x1a>
 800f5de:	89a3      	ldrh	r3, [r4, #12]
 800f5e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5e4:	81a3      	strh	r3, [r4, #12]
 800f5e6:	e7ad      	b.n	800f544 <__sflush_r+0x1c>
 800f5e8:	690f      	ldr	r7, [r1, #16]
 800f5ea:	2f00      	cmp	r7, #0
 800f5ec:	d0a9      	beq.n	800f542 <__sflush_r+0x1a>
 800f5ee:	0793      	lsls	r3, r2, #30
 800f5f0:	680e      	ldr	r6, [r1, #0]
 800f5f2:	bf08      	it	eq
 800f5f4:	694b      	ldreq	r3, [r1, #20]
 800f5f6:	600f      	str	r7, [r1, #0]
 800f5f8:	bf18      	it	ne
 800f5fa:	2300      	movne	r3, #0
 800f5fc:	eba6 0807 	sub.w	r8, r6, r7
 800f600:	608b      	str	r3, [r1, #8]
 800f602:	f1b8 0f00 	cmp.w	r8, #0
 800f606:	dd9c      	ble.n	800f542 <__sflush_r+0x1a>
 800f608:	4643      	mov	r3, r8
 800f60a:	463a      	mov	r2, r7
 800f60c:	6a21      	ldr	r1, [r4, #32]
 800f60e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f610:	4628      	mov	r0, r5
 800f612:	47b0      	blx	r6
 800f614:	2800      	cmp	r0, #0
 800f616:	dc06      	bgt.n	800f626 <__sflush_r+0xfe>
 800f618:	89a3      	ldrh	r3, [r4, #12]
 800f61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f61e:	81a3      	strh	r3, [r4, #12]
 800f620:	f04f 30ff 	mov.w	r0, #4294967295
 800f624:	e78e      	b.n	800f544 <__sflush_r+0x1c>
 800f626:	4407      	add	r7, r0
 800f628:	eba8 0800 	sub.w	r8, r8, r0
 800f62c:	e7e9      	b.n	800f602 <__sflush_r+0xda>
 800f62e:	bf00      	nop
 800f630:	20400001 	.word	0x20400001

0800f634 <_fflush_r>:
 800f634:	b538      	push	{r3, r4, r5, lr}
 800f636:	690b      	ldr	r3, [r1, #16]
 800f638:	4605      	mov	r5, r0
 800f63a:	460c      	mov	r4, r1
 800f63c:	b1db      	cbz	r3, 800f676 <_fflush_r+0x42>
 800f63e:	b118      	cbz	r0, 800f648 <_fflush_r+0x14>
 800f640:	6983      	ldr	r3, [r0, #24]
 800f642:	b90b      	cbnz	r3, 800f648 <_fflush_r+0x14>
 800f644:	f000 f860 	bl	800f708 <__sinit>
 800f648:	4b0c      	ldr	r3, [pc, #48]	; (800f67c <_fflush_r+0x48>)
 800f64a:	429c      	cmp	r4, r3
 800f64c:	d109      	bne.n	800f662 <_fflush_r+0x2e>
 800f64e:	686c      	ldr	r4, [r5, #4]
 800f650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f654:	b17b      	cbz	r3, 800f676 <_fflush_r+0x42>
 800f656:	4621      	mov	r1, r4
 800f658:	4628      	mov	r0, r5
 800f65a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f65e:	f7ff bf63 	b.w	800f528 <__sflush_r>
 800f662:	4b07      	ldr	r3, [pc, #28]	; (800f680 <_fflush_r+0x4c>)
 800f664:	429c      	cmp	r4, r3
 800f666:	d101      	bne.n	800f66c <_fflush_r+0x38>
 800f668:	68ac      	ldr	r4, [r5, #8]
 800f66a:	e7f1      	b.n	800f650 <_fflush_r+0x1c>
 800f66c:	4b05      	ldr	r3, [pc, #20]	; (800f684 <_fflush_r+0x50>)
 800f66e:	429c      	cmp	r4, r3
 800f670:	bf08      	it	eq
 800f672:	68ec      	ldreq	r4, [r5, #12]
 800f674:	e7ec      	b.n	800f650 <_fflush_r+0x1c>
 800f676:	2000      	movs	r0, #0
 800f678:	bd38      	pop	{r3, r4, r5, pc}
 800f67a:	bf00      	nop
 800f67c:	0801020c 	.word	0x0801020c
 800f680:	0801022c 	.word	0x0801022c
 800f684:	080101ec 	.word	0x080101ec

0800f688 <std>:
 800f688:	2300      	movs	r3, #0
 800f68a:	b510      	push	{r4, lr}
 800f68c:	4604      	mov	r4, r0
 800f68e:	e9c0 3300 	strd	r3, r3, [r0]
 800f692:	6083      	str	r3, [r0, #8]
 800f694:	8181      	strh	r1, [r0, #12]
 800f696:	6643      	str	r3, [r0, #100]	; 0x64
 800f698:	81c2      	strh	r2, [r0, #14]
 800f69a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f69e:	6183      	str	r3, [r0, #24]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	2208      	movs	r2, #8
 800f6a4:	305c      	adds	r0, #92	; 0x5c
 800f6a6:	f7ff fd43 	bl	800f130 <memset>
 800f6aa:	4b05      	ldr	r3, [pc, #20]	; (800f6c0 <std+0x38>)
 800f6ac:	6263      	str	r3, [r4, #36]	; 0x24
 800f6ae:	4b05      	ldr	r3, [pc, #20]	; (800f6c4 <std+0x3c>)
 800f6b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f6b2:	4b05      	ldr	r3, [pc, #20]	; (800f6c8 <std+0x40>)
 800f6b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f6b6:	4b05      	ldr	r3, [pc, #20]	; (800f6cc <std+0x44>)
 800f6b8:	6224      	str	r4, [r4, #32]
 800f6ba:	6323      	str	r3, [r4, #48]	; 0x30
 800f6bc:	bd10      	pop	{r4, pc}
 800f6be:	bf00      	nop
 800f6c0:	0800fe79 	.word	0x0800fe79
 800f6c4:	0800fe9b 	.word	0x0800fe9b
 800f6c8:	0800fed3 	.word	0x0800fed3
 800f6cc:	0800fef7 	.word	0x0800fef7

0800f6d0 <_cleanup_r>:
 800f6d0:	4901      	ldr	r1, [pc, #4]	; (800f6d8 <_cleanup_r+0x8>)
 800f6d2:	f000 b885 	b.w	800f7e0 <_fwalk_reent>
 800f6d6:	bf00      	nop
 800f6d8:	0800f635 	.word	0x0800f635

0800f6dc <__sfmoreglue>:
 800f6dc:	b570      	push	{r4, r5, r6, lr}
 800f6de:	1e4a      	subs	r2, r1, #1
 800f6e0:	2568      	movs	r5, #104	; 0x68
 800f6e2:	4355      	muls	r5, r2
 800f6e4:	460e      	mov	r6, r1
 800f6e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f6ea:	f7ff fd77 	bl	800f1dc <_malloc_r>
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	b140      	cbz	r0, 800f704 <__sfmoreglue+0x28>
 800f6f2:	2100      	movs	r1, #0
 800f6f4:	e9c0 1600 	strd	r1, r6, [r0]
 800f6f8:	300c      	adds	r0, #12
 800f6fa:	60a0      	str	r0, [r4, #8]
 800f6fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f700:	f7ff fd16 	bl	800f130 <memset>
 800f704:	4620      	mov	r0, r4
 800f706:	bd70      	pop	{r4, r5, r6, pc}

0800f708 <__sinit>:
 800f708:	6983      	ldr	r3, [r0, #24]
 800f70a:	b510      	push	{r4, lr}
 800f70c:	4604      	mov	r4, r0
 800f70e:	bb33      	cbnz	r3, 800f75e <__sinit+0x56>
 800f710:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f714:	6503      	str	r3, [r0, #80]	; 0x50
 800f716:	4b12      	ldr	r3, [pc, #72]	; (800f760 <__sinit+0x58>)
 800f718:	4a12      	ldr	r2, [pc, #72]	; (800f764 <__sinit+0x5c>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	6282      	str	r2, [r0, #40]	; 0x28
 800f71e:	4298      	cmp	r0, r3
 800f720:	bf04      	itt	eq
 800f722:	2301      	moveq	r3, #1
 800f724:	6183      	streq	r3, [r0, #24]
 800f726:	f000 f81f 	bl	800f768 <__sfp>
 800f72a:	6060      	str	r0, [r4, #4]
 800f72c:	4620      	mov	r0, r4
 800f72e:	f000 f81b 	bl	800f768 <__sfp>
 800f732:	60a0      	str	r0, [r4, #8]
 800f734:	4620      	mov	r0, r4
 800f736:	f000 f817 	bl	800f768 <__sfp>
 800f73a:	2200      	movs	r2, #0
 800f73c:	60e0      	str	r0, [r4, #12]
 800f73e:	2104      	movs	r1, #4
 800f740:	6860      	ldr	r0, [r4, #4]
 800f742:	f7ff ffa1 	bl	800f688 <std>
 800f746:	2201      	movs	r2, #1
 800f748:	2109      	movs	r1, #9
 800f74a:	68a0      	ldr	r0, [r4, #8]
 800f74c:	f7ff ff9c 	bl	800f688 <std>
 800f750:	2202      	movs	r2, #2
 800f752:	2112      	movs	r1, #18
 800f754:	68e0      	ldr	r0, [r4, #12]
 800f756:	f7ff ff97 	bl	800f688 <std>
 800f75a:	2301      	movs	r3, #1
 800f75c:	61a3      	str	r3, [r4, #24]
 800f75e:	bd10      	pop	{r4, pc}
 800f760:	080101e8 	.word	0x080101e8
 800f764:	0800f6d1 	.word	0x0800f6d1

0800f768 <__sfp>:
 800f768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76a:	4b1b      	ldr	r3, [pc, #108]	; (800f7d8 <__sfp+0x70>)
 800f76c:	681e      	ldr	r6, [r3, #0]
 800f76e:	69b3      	ldr	r3, [r6, #24]
 800f770:	4607      	mov	r7, r0
 800f772:	b913      	cbnz	r3, 800f77a <__sfp+0x12>
 800f774:	4630      	mov	r0, r6
 800f776:	f7ff ffc7 	bl	800f708 <__sinit>
 800f77a:	3648      	adds	r6, #72	; 0x48
 800f77c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f780:	3b01      	subs	r3, #1
 800f782:	d503      	bpl.n	800f78c <__sfp+0x24>
 800f784:	6833      	ldr	r3, [r6, #0]
 800f786:	b133      	cbz	r3, 800f796 <__sfp+0x2e>
 800f788:	6836      	ldr	r6, [r6, #0]
 800f78a:	e7f7      	b.n	800f77c <__sfp+0x14>
 800f78c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f790:	b16d      	cbz	r5, 800f7ae <__sfp+0x46>
 800f792:	3468      	adds	r4, #104	; 0x68
 800f794:	e7f4      	b.n	800f780 <__sfp+0x18>
 800f796:	2104      	movs	r1, #4
 800f798:	4638      	mov	r0, r7
 800f79a:	f7ff ff9f 	bl	800f6dc <__sfmoreglue>
 800f79e:	6030      	str	r0, [r6, #0]
 800f7a0:	2800      	cmp	r0, #0
 800f7a2:	d1f1      	bne.n	800f788 <__sfp+0x20>
 800f7a4:	230c      	movs	r3, #12
 800f7a6:	603b      	str	r3, [r7, #0]
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7ae:	4b0b      	ldr	r3, [pc, #44]	; (800f7dc <__sfp+0x74>)
 800f7b0:	6665      	str	r5, [r4, #100]	; 0x64
 800f7b2:	e9c4 5500 	strd	r5, r5, [r4]
 800f7b6:	60a5      	str	r5, [r4, #8]
 800f7b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f7bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f7c0:	2208      	movs	r2, #8
 800f7c2:	4629      	mov	r1, r5
 800f7c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f7c8:	f7ff fcb2 	bl	800f130 <memset>
 800f7cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f7d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f7d4:	e7e9      	b.n	800f7aa <__sfp+0x42>
 800f7d6:	bf00      	nop
 800f7d8:	080101e8 	.word	0x080101e8
 800f7dc:	ffff0001 	.word	0xffff0001

0800f7e0 <_fwalk_reent>:
 800f7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7e4:	4680      	mov	r8, r0
 800f7e6:	4689      	mov	r9, r1
 800f7e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f7ec:	2600      	movs	r6, #0
 800f7ee:	b914      	cbnz	r4, 800f7f6 <_fwalk_reent+0x16>
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f7fa:	3f01      	subs	r7, #1
 800f7fc:	d501      	bpl.n	800f802 <_fwalk_reent+0x22>
 800f7fe:	6824      	ldr	r4, [r4, #0]
 800f800:	e7f5      	b.n	800f7ee <_fwalk_reent+0xe>
 800f802:	89ab      	ldrh	r3, [r5, #12]
 800f804:	2b01      	cmp	r3, #1
 800f806:	d907      	bls.n	800f818 <_fwalk_reent+0x38>
 800f808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f80c:	3301      	adds	r3, #1
 800f80e:	d003      	beq.n	800f818 <_fwalk_reent+0x38>
 800f810:	4629      	mov	r1, r5
 800f812:	4640      	mov	r0, r8
 800f814:	47c8      	blx	r9
 800f816:	4306      	orrs	r6, r0
 800f818:	3568      	adds	r5, #104	; 0x68
 800f81a:	e7ee      	b.n	800f7fa <_fwalk_reent+0x1a>

0800f81c <__swhatbuf_r>:
 800f81c:	b570      	push	{r4, r5, r6, lr}
 800f81e:	460e      	mov	r6, r1
 800f820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f824:	2900      	cmp	r1, #0
 800f826:	b096      	sub	sp, #88	; 0x58
 800f828:	4614      	mov	r4, r2
 800f82a:	461d      	mov	r5, r3
 800f82c:	da07      	bge.n	800f83e <__swhatbuf_r+0x22>
 800f82e:	2300      	movs	r3, #0
 800f830:	602b      	str	r3, [r5, #0]
 800f832:	89b3      	ldrh	r3, [r6, #12]
 800f834:	061a      	lsls	r2, r3, #24
 800f836:	d410      	bmi.n	800f85a <__swhatbuf_r+0x3e>
 800f838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f83c:	e00e      	b.n	800f85c <__swhatbuf_r+0x40>
 800f83e:	466a      	mov	r2, sp
 800f840:	f000 fb80 	bl	800ff44 <_fstat_r>
 800f844:	2800      	cmp	r0, #0
 800f846:	dbf2      	blt.n	800f82e <__swhatbuf_r+0x12>
 800f848:	9a01      	ldr	r2, [sp, #4]
 800f84a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f84e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f852:	425a      	negs	r2, r3
 800f854:	415a      	adcs	r2, r3
 800f856:	602a      	str	r2, [r5, #0]
 800f858:	e7ee      	b.n	800f838 <__swhatbuf_r+0x1c>
 800f85a:	2340      	movs	r3, #64	; 0x40
 800f85c:	2000      	movs	r0, #0
 800f85e:	6023      	str	r3, [r4, #0]
 800f860:	b016      	add	sp, #88	; 0x58
 800f862:	bd70      	pop	{r4, r5, r6, pc}

0800f864 <__smakebuf_r>:
 800f864:	898b      	ldrh	r3, [r1, #12]
 800f866:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f868:	079d      	lsls	r5, r3, #30
 800f86a:	4606      	mov	r6, r0
 800f86c:	460c      	mov	r4, r1
 800f86e:	d507      	bpl.n	800f880 <__smakebuf_r+0x1c>
 800f870:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f874:	6023      	str	r3, [r4, #0]
 800f876:	6123      	str	r3, [r4, #16]
 800f878:	2301      	movs	r3, #1
 800f87a:	6163      	str	r3, [r4, #20]
 800f87c:	b002      	add	sp, #8
 800f87e:	bd70      	pop	{r4, r5, r6, pc}
 800f880:	ab01      	add	r3, sp, #4
 800f882:	466a      	mov	r2, sp
 800f884:	f7ff ffca 	bl	800f81c <__swhatbuf_r>
 800f888:	9900      	ldr	r1, [sp, #0]
 800f88a:	4605      	mov	r5, r0
 800f88c:	4630      	mov	r0, r6
 800f88e:	f7ff fca5 	bl	800f1dc <_malloc_r>
 800f892:	b948      	cbnz	r0, 800f8a8 <__smakebuf_r+0x44>
 800f894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f898:	059a      	lsls	r2, r3, #22
 800f89a:	d4ef      	bmi.n	800f87c <__smakebuf_r+0x18>
 800f89c:	f023 0303 	bic.w	r3, r3, #3
 800f8a0:	f043 0302 	orr.w	r3, r3, #2
 800f8a4:	81a3      	strh	r3, [r4, #12]
 800f8a6:	e7e3      	b.n	800f870 <__smakebuf_r+0xc>
 800f8a8:	4b0d      	ldr	r3, [pc, #52]	; (800f8e0 <__smakebuf_r+0x7c>)
 800f8aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800f8ac:	89a3      	ldrh	r3, [r4, #12]
 800f8ae:	6020      	str	r0, [r4, #0]
 800f8b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8b4:	81a3      	strh	r3, [r4, #12]
 800f8b6:	9b00      	ldr	r3, [sp, #0]
 800f8b8:	6163      	str	r3, [r4, #20]
 800f8ba:	9b01      	ldr	r3, [sp, #4]
 800f8bc:	6120      	str	r0, [r4, #16]
 800f8be:	b15b      	cbz	r3, 800f8d8 <__smakebuf_r+0x74>
 800f8c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	f000 fb4f 	bl	800ff68 <_isatty_r>
 800f8ca:	b128      	cbz	r0, 800f8d8 <__smakebuf_r+0x74>
 800f8cc:	89a3      	ldrh	r3, [r4, #12]
 800f8ce:	f023 0303 	bic.w	r3, r3, #3
 800f8d2:	f043 0301 	orr.w	r3, r3, #1
 800f8d6:	81a3      	strh	r3, [r4, #12]
 800f8d8:	89a3      	ldrh	r3, [r4, #12]
 800f8da:	431d      	orrs	r5, r3
 800f8dc:	81a5      	strh	r5, [r4, #12]
 800f8de:	e7cd      	b.n	800f87c <__smakebuf_r+0x18>
 800f8e0:	0800f6d1 	.word	0x0800f6d1

0800f8e4 <__malloc_lock>:
 800f8e4:	4770      	bx	lr

0800f8e6 <__malloc_unlock>:
 800f8e6:	4770      	bx	lr

0800f8e8 <__sfputc_r>:
 800f8e8:	6893      	ldr	r3, [r2, #8]
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	b410      	push	{r4}
 800f8f0:	6093      	str	r3, [r2, #8]
 800f8f2:	da08      	bge.n	800f906 <__sfputc_r+0x1e>
 800f8f4:	6994      	ldr	r4, [r2, #24]
 800f8f6:	42a3      	cmp	r3, r4
 800f8f8:	db01      	blt.n	800f8fe <__sfputc_r+0x16>
 800f8fa:	290a      	cmp	r1, #10
 800f8fc:	d103      	bne.n	800f906 <__sfputc_r+0x1e>
 800f8fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f902:	f7ff bd51 	b.w	800f3a8 <__swbuf_r>
 800f906:	6813      	ldr	r3, [r2, #0]
 800f908:	1c58      	adds	r0, r3, #1
 800f90a:	6010      	str	r0, [r2, #0]
 800f90c:	7019      	strb	r1, [r3, #0]
 800f90e:	4608      	mov	r0, r1
 800f910:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f914:	4770      	bx	lr

0800f916 <__sfputs_r>:
 800f916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f918:	4606      	mov	r6, r0
 800f91a:	460f      	mov	r7, r1
 800f91c:	4614      	mov	r4, r2
 800f91e:	18d5      	adds	r5, r2, r3
 800f920:	42ac      	cmp	r4, r5
 800f922:	d101      	bne.n	800f928 <__sfputs_r+0x12>
 800f924:	2000      	movs	r0, #0
 800f926:	e007      	b.n	800f938 <__sfputs_r+0x22>
 800f928:	463a      	mov	r2, r7
 800f92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f92e:	4630      	mov	r0, r6
 800f930:	f7ff ffda 	bl	800f8e8 <__sfputc_r>
 800f934:	1c43      	adds	r3, r0, #1
 800f936:	d1f3      	bne.n	800f920 <__sfputs_r+0xa>
 800f938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f93c <_vfiprintf_r>:
 800f93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f940:	460c      	mov	r4, r1
 800f942:	b09d      	sub	sp, #116	; 0x74
 800f944:	4617      	mov	r7, r2
 800f946:	461d      	mov	r5, r3
 800f948:	4606      	mov	r6, r0
 800f94a:	b118      	cbz	r0, 800f954 <_vfiprintf_r+0x18>
 800f94c:	6983      	ldr	r3, [r0, #24]
 800f94e:	b90b      	cbnz	r3, 800f954 <_vfiprintf_r+0x18>
 800f950:	f7ff feda 	bl	800f708 <__sinit>
 800f954:	4b7c      	ldr	r3, [pc, #496]	; (800fb48 <_vfiprintf_r+0x20c>)
 800f956:	429c      	cmp	r4, r3
 800f958:	d158      	bne.n	800fa0c <_vfiprintf_r+0xd0>
 800f95a:	6874      	ldr	r4, [r6, #4]
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	0718      	lsls	r0, r3, #28
 800f960:	d55e      	bpl.n	800fa20 <_vfiprintf_r+0xe4>
 800f962:	6923      	ldr	r3, [r4, #16]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d05b      	beq.n	800fa20 <_vfiprintf_r+0xe4>
 800f968:	2300      	movs	r3, #0
 800f96a:	9309      	str	r3, [sp, #36]	; 0x24
 800f96c:	2320      	movs	r3, #32
 800f96e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f972:	2330      	movs	r3, #48	; 0x30
 800f974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f978:	9503      	str	r5, [sp, #12]
 800f97a:	f04f 0b01 	mov.w	fp, #1
 800f97e:	46b8      	mov	r8, r7
 800f980:	4645      	mov	r5, r8
 800f982:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f986:	b10b      	cbz	r3, 800f98c <_vfiprintf_r+0x50>
 800f988:	2b25      	cmp	r3, #37	; 0x25
 800f98a:	d154      	bne.n	800fa36 <_vfiprintf_r+0xfa>
 800f98c:	ebb8 0a07 	subs.w	sl, r8, r7
 800f990:	d00b      	beq.n	800f9aa <_vfiprintf_r+0x6e>
 800f992:	4653      	mov	r3, sl
 800f994:	463a      	mov	r2, r7
 800f996:	4621      	mov	r1, r4
 800f998:	4630      	mov	r0, r6
 800f99a:	f7ff ffbc 	bl	800f916 <__sfputs_r>
 800f99e:	3001      	adds	r0, #1
 800f9a0:	f000 80c2 	beq.w	800fb28 <_vfiprintf_r+0x1ec>
 800f9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9a6:	4453      	add	r3, sl
 800f9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f9aa:	f898 3000 	ldrb.w	r3, [r8]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f000 80ba 	beq.w	800fb28 <_vfiprintf_r+0x1ec>
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9be:	9304      	str	r3, [sp, #16]
 800f9c0:	9307      	str	r3, [sp, #28]
 800f9c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9c6:	931a      	str	r3, [sp, #104]	; 0x68
 800f9c8:	46a8      	mov	r8, r5
 800f9ca:	2205      	movs	r2, #5
 800f9cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f9d0:	485e      	ldr	r0, [pc, #376]	; (800fb4c <_vfiprintf_r+0x210>)
 800f9d2:	f7f0 fc0d 	bl	80001f0 <memchr>
 800f9d6:	9b04      	ldr	r3, [sp, #16]
 800f9d8:	bb78      	cbnz	r0, 800fa3a <_vfiprintf_r+0xfe>
 800f9da:	06d9      	lsls	r1, r3, #27
 800f9dc:	bf44      	itt	mi
 800f9de:	2220      	movmi	r2, #32
 800f9e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f9e4:	071a      	lsls	r2, r3, #28
 800f9e6:	bf44      	itt	mi
 800f9e8:	222b      	movmi	r2, #43	; 0x2b
 800f9ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f9ee:	782a      	ldrb	r2, [r5, #0]
 800f9f0:	2a2a      	cmp	r2, #42	; 0x2a
 800f9f2:	d02a      	beq.n	800fa4a <_vfiprintf_r+0x10e>
 800f9f4:	9a07      	ldr	r2, [sp, #28]
 800f9f6:	46a8      	mov	r8, r5
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	250a      	movs	r5, #10
 800f9fc:	4641      	mov	r1, r8
 800f9fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa02:	3b30      	subs	r3, #48	; 0x30
 800fa04:	2b09      	cmp	r3, #9
 800fa06:	d969      	bls.n	800fadc <_vfiprintf_r+0x1a0>
 800fa08:	b360      	cbz	r0, 800fa64 <_vfiprintf_r+0x128>
 800fa0a:	e024      	b.n	800fa56 <_vfiprintf_r+0x11a>
 800fa0c:	4b50      	ldr	r3, [pc, #320]	; (800fb50 <_vfiprintf_r+0x214>)
 800fa0e:	429c      	cmp	r4, r3
 800fa10:	d101      	bne.n	800fa16 <_vfiprintf_r+0xda>
 800fa12:	68b4      	ldr	r4, [r6, #8]
 800fa14:	e7a2      	b.n	800f95c <_vfiprintf_r+0x20>
 800fa16:	4b4f      	ldr	r3, [pc, #316]	; (800fb54 <_vfiprintf_r+0x218>)
 800fa18:	429c      	cmp	r4, r3
 800fa1a:	bf08      	it	eq
 800fa1c:	68f4      	ldreq	r4, [r6, #12]
 800fa1e:	e79d      	b.n	800f95c <_vfiprintf_r+0x20>
 800fa20:	4621      	mov	r1, r4
 800fa22:	4630      	mov	r0, r6
 800fa24:	f7ff fd12 	bl	800f44c <__swsetup_r>
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	d09d      	beq.n	800f968 <_vfiprintf_r+0x2c>
 800fa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa30:	b01d      	add	sp, #116	; 0x74
 800fa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa36:	46a8      	mov	r8, r5
 800fa38:	e7a2      	b.n	800f980 <_vfiprintf_r+0x44>
 800fa3a:	4a44      	ldr	r2, [pc, #272]	; (800fb4c <_vfiprintf_r+0x210>)
 800fa3c:	1a80      	subs	r0, r0, r2
 800fa3e:	fa0b f000 	lsl.w	r0, fp, r0
 800fa42:	4318      	orrs	r0, r3
 800fa44:	9004      	str	r0, [sp, #16]
 800fa46:	4645      	mov	r5, r8
 800fa48:	e7be      	b.n	800f9c8 <_vfiprintf_r+0x8c>
 800fa4a:	9a03      	ldr	r2, [sp, #12]
 800fa4c:	1d11      	adds	r1, r2, #4
 800fa4e:	6812      	ldr	r2, [r2, #0]
 800fa50:	9103      	str	r1, [sp, #12]
 800fa52:	2a00      	cmp	r2, #0
 800fa54:	db01      	blt.n	800fa5a <_vfiprintf_r+0x11e>
 800fa56:	9207      	str	r2, [sp, #28]
 800fa58:	e004      	b.n	800fa64 <_vfiprintf_r+0x128>
 800fa5a:	4252      	negs	r2, r2
 800fa5c:	f043 0302 	orr.w	r3, r3, #2
 800fa60:	9207      	str	r2, [sp, #28]
 800fa62:	9304      	str	r3, [sp, #16]
 800fa64:	f898 3000 	ldrb.w	r3, [r8]
 800fa68:	2b2e      	cmp	r3, #46	; 0x2e
 800fa6a:	d10e      	bne.n	800fa8a <_vfiprintf_r+0x14e>
 800fa6c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fa70:	2b2a      	cmp	r3, #42	; 0x2a
 800fa72:	d138      	bne.n	800fae6 <_vfiprintf_r+0x1aa>
 800fa74:	9b03      	ldr	r3, [sp, #12]
 800fa76:	1d1a      	adds	r2, r3, #4
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	9203      	str	r2, [sp, #12]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	bfb8      	it	lt
 800fa80:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa84:	f108 0802 	add.w	r8, r8, #2
 800fa88:	9305      	str	r3, [sp, #20]
 800fa8a:	4d33      	ldr	r5, [pc, #204]	; (800fb58 <_vfiprintf_r+0x21c>)
 800fa8c:	f898 1000 	ldrb.w	r1, [r8]
 800fa90:	2203      	movs	r2, #3
 800fa92:	4628      	mov	r0, r5
 800fa94:	f7f0 fbac 	bl	80001f0 <memchr>
 800fa98:	b140      	cbz	r0, 800faac <_vfiprintf_r+0x170>
 800fa9a:	2340      	movs	r3, #64	; 0x40
 800fa9c:	1b40      	subs	r0, r0, r5
 800fa9e:	fa03 f000 	lsl.w	r0, r3, r0
 800faa2:	9b04      	ldr	r3, [sp, #16]
 800faa4:	4303      	orrs	r3, r0
 800faa6:	f108 0801 	add.w	r8, r8, #1
 800faaa:	9304      	str	r3, [sp, #16]
 800faac:	f898 1000 	ldrb.w	r1, [r8]
 800fab0:	482a      	ldr	r0, [pc, #168]	; (800fb5c <_vfiprintf_r+0x220>)
 800fab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fab6:	2206      	movs	r2, #6
 800fab8:	f108 0701 	add.w	r7, r8, #1
 800fabc:	f7f0 fb98 	bl	80001f0 <memchr>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	d037      	beq.n	800fb34 <_vfiprintf_r+0x1f8>
 800fac4:	4b26      	ldr	r3, [pc, #152]	; (800fb60 <_vfiprintf_r+0x224>)
 800fac6:	bb1b      	cbnz	r3, 800fb10 <_vfiprintf_r+0x1d4>
 800fac8:	9b03      	ldr	r3, [sp, #12]
 800faca:	3307      	adds	r3, #7
 800facc:	f023 0307 	bic.w	r3, r3, #7
 800fad0:	3308      	adds	r3, #8
 800fad2:	9303      	str	r3, [sp, #12]
 800fad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fad6:	444b      	add	r3, r9
 800fad8:	9309      	str	r3, [sp, #36]	; 0x24
 800fada:	e750      	b.n	800f97e <_vfiprintf_r+0x42>
 800fadc:	fb05 3202 	mla	r2, r5, r2, r3
 800fae0:	2001      	movs	r0, #1
 800fae2:	4688      	mov	r8, r1
 800fae4:	e78a      	b.n	800f9fc <_vfiprintf_r+0xc0>
 800fae6:	2300      	movs	r3, #0
 800fae8:	f108 0801 	add.w	r8, r8, #1
 800faec:	9305      	str	r3, [sp, #20]
 800faee:	4619      	mov	r1, r3
 800faf0:	250a      	movs	r5, #10
 800faf2:	4640      	mov	r0, r8
 800faf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faf8:	3a30      	subs	r2, #48	; 0x30
 800fafa:	2a09      	cmp	r2, #9
 800fafc:	d903      	bls.n	800fb06 <_vfiprintf_r+0x1ca>
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d0c3      	beq.n	800fa8a <_vfiprintf_r+0x14e>
 800fb02:	9105      	str	r1, [sp, #20]
 800fb04:	e7c1      	b.n	800fa8a <_vfiprintf_r+0x14e>
 800fb06:	fb05 2101 	mla	r1, r5, r1, r2
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	4680      	mov	r8, r0
 800fb0e:	e7f0      	b.n	800faf2 <_vfiprintf_r+0x1b6>
 800fb10:	ab03      	add	r3, sp, #12
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	4622      	mov	r2, r4
 800fb16:	4b13      	ldr	r3, [pc, #76]	; (800fb64 <_vfiprintf_r+0x228>)
 800fb18:	a904      	add	r1, sp, #16
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	f3af 8000 	nop.w
 800fb20:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fb24:	4681      	mov	r9, r0
 800fb26:	d1d5      	bne.n	800fad4 <_vfiprintf_r+0x198>
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	065b      	lsls	r3, r3, #25
 800fb2c:	f53f af7e 	bmi.w	800fa2c <_vfiprintf_r+0xf0>
 800fb30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb32:	e77d      	b.n	800fa30 <_vfiprintf_r+0xf4>
 800fb34:	ab03      	add	r3, sp, #12
 800fb36:	9300      	str	r3, [sp, #0]
 800fb38:	4622      	mov	r2, r4
 800fb3a:	4b0a      	ldr	r3, [pc, #40]	; (800fb64 <_vfiprintf_r+0x228>)
 800fb3c:	a904      	add	r1, sp, #16
 800fb3e:	4630      	mov	r0, r6
 800fb40:	f000 f888 	bl	800fc54 <_printf_i>
 800fb44:	e7ec      	b.n	800fb20 <_vfiprintf_r+0x1e4>
 800fb46:	bf00      	nop
 800fb48:	0801020c 	.word	0x0801020c
 800fb4c:	0801024c 	.word	0x0801024c
 800fb50:	0801022c 	.word	0x0801022c
 800fb54:	080101ec 	.word	0x080101ec
 800fb58:	08010252 	.word	0x08010252
 800fb5c:	08010256 	.word	0x08010256
 800fb60:	00000000 	.word	0x00000000
 800fb64:	0800f917 	.word	0x0800f917

0800fb68 <_printf_common>:
 800fb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb6c:	4691      	mov	r9, r2
 800fb6e:	461f      	mov	r7, r3
 800fb70:	688a      	ldr	r2, [r1, #8]
 800fb72:	690b      	ldr	r3, [r1, #16]
 800fb74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	bfb8      	it	lt
 800fb7c:	4613      	movlt	r3, r2
 800fb7e:	f8c9 3000 	str.w	r3, [r9]
 800fb82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb86:	4606      	mov	r6, r0
 800fb88:	460c      	mov	r4, r1
 800fb8a:	b112      	cbz	r2, 800fb92 <_printf_common+0x2a>
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	f8c9 3000 	str.w	r3, [r9]
 800fb92:	6823      	ldr	r3, [r4, #0]
 800fb94:	0699      	lsls	r1, r3, #26
 800fb96:	bf42      	ittt	mi
 800fb98:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fb9c:	3302      	addmi	r3, #2
 800fb9e:	f8c9 3000 	strmi.w	r3, [r9]
 800fba2:	6825      	ldr	r5, [r4, #0]
 800fba4:	f015 0506 	ands.w	r5, r5, #6
 800fba8:	d107      	bne.n	800fbba <_printf_common+0x52>
 800fbaa:	f104 0a19 	add.w	sl, r4, #25
 800fbae:	68e3      	ldr	r3, [r4, #12]
 800fbb0:	f8d9 2000 	ldr.w	r2, [r9]
 800fbb4:	1a9b      	subs	r3, r3, r2
 800fbb6:	42ab      	cmp	r3, r5
 800fbb8:	dc28      	bgt.n	800fc0c <_printf_common+0xa4>
 800fbba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fbbe:	6822      	ldr	r2, [r4, #0]
 800fbc0:	3300      	adds	r3, #0
 800fbc2:	bf18      	it	ne
 800fbc4:	2301      	movne	r3, #1
 800fbc6:	0692      	lsls	r2, r2, #26
 800fbc8:	d42d      	bmi.n	800fc26 <_printf_common+0xbe>
 800fbca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbce:	4639      	mov	r1, r7
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	47c0      	blx	r8
 800fbd4:	3001      	adds	r0, #1
 800fbd6:	d020      	beq.n	800fc1a <_printf_common+0xb2>
 800fbd8:	6823      	ldr	r3, [r4, #0]
 800fbda:	68e5      	ldr	r5, [r4, #12]
 800fbdc:	f8d9 2000 	ldr.w	r2, [r9]
 800fbe0:	f003 0306 	and.w	r3, r3, #6
 800fbe4:	2b04      	cmp	r3, #4
 800fbe6:	bf08      	it	eq
 800fbe8:	1aad      	subeq	r5, r5, r2
 800fbea:	68a3      	ldr	r3, [r4, #8]
 800fbec:	6922      	ldr	r2, [r4, #16]
 800fbee:	bf0c      	ite	eq
 800fbf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbf4:	2500      	movne	r5, #0
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	bfc4      	itt	gt
 800fbfa:	1a9b      	subgt	r3, r3, r2
 800fbfc:	18ed      	addgt	r5, r5, r3
 800fbfe:	f04f 0900 	mov.w	r9, #0
 800fc02:	341a      	adds	r4, #26
 800fc04:	454d      	cmp	r5, r9
 800fc06:	d11a      	bne.n	800fc3e <_printf_common+0xd6>
 800fc08:	2000      	movs	r0, #0
 800fc0a:	e008      	b.n	800fc1e <_printf_common+0xb6>
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	4652      	mov	r2, sl
 800fc10:	4639      	mov	r1, r7
 800fc12:	4630      	mov	r0, r6
 800fc14:	47c0      	blx	r8
 800fc16:	3001      	adds	r0, #1
 800fc18:	d103      	bne.n	800fc22 <_printf_common+0xba>
 800fc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc22:	3501      	adds	r5, #1
 800fc24:	e7c3      	b.n	800fbae <_printf_common+0x46>
 800fc26:	18e1      	adds	r1, r4, r3
 800fc28:	1c5a      	adds	r2, r3, #1
 800fc2a:	2030      	movs	r0, #48	; 0x30
 800fc2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc30:	4422      	add	r2, r4
 800fc32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc3a:	3302      	adds	r3, #2
 800fc3c:	e7c5      	b.n	800fbca <_printf_common+0x62>
 800fc3e:	2301      	movs	r3, #1
 800fc40:	4622      	mov	r2, r4
 800fc42:	4639      	mov	r1, r7
 800fc44:	4630      	mov	r0, r6
 800fc46:	47c0      	blx	r8
 800fc48:	3001      	adds	r0, #1
 800fc4a:	d0e6      	beq.n	800fc1a <_printf_common+0xb2>
 800fc4c:	f109 0901 	add.w	r9, r9, #1
 800fc50:	e7d8      	b.n	800fc04 <_printf_common+0x9c>
	...

0800fc54 <_printf_i>:
 800fc54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fc5c:	460c      	mov	r4, r1
 800fc5e:	7e09      	ldrb	r1, [r1, #24]
 800fc60:	b085      	sub	sp, #20
 800fc62:	296e      	cmp	r1, #110	; 0x6e
 800fc64:	4617      	mov	r7, r2
 800fc66:	4606      	mov	r6, r0
 800fc68:	4698      	mov	r8, r3
 800fc6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc6c:	f000 80b3 	beq.w	800fdd6 <_printf_i+0x182>
 800fc70:	d822      	bhi.n	800fcb8 <_printf_i+0x64>
 800fc72:	2963      	cmp	r1, #99	; 0x63
 800fc74:	d036      	beq.n	800fce4 <_printf_i+0x90>
 800fc76:	d80a      	bhi.n	800fc8e <_printf_i+0x3a>
 800fc78:	2900      	cmp	r1, #0
 800fc7a:	f000 80b9 	beq.w	800fdf0 <_printf_i+0x19c>
 800fc7e:	2958      	cmp	r1, #88	; 0x58
 800fc80:	f000 8083 	beq.w	800fd8a <_printf_i+0x136>
 800fc84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fc8c:	e032      	b.n	800fcf4 <_printf_i+0xa0>
 800fc8e:	2964      	cmp	r1, #100	; 0x64
 800fc90:	d001      	beq.n	800fc96 <_printf_i+0x42>
 800fc92:	2969      	cmp	r1, #105	; 0x69
 800fc94:	d1f6      	bne.n	800fc84 <_printf_i+0x30>
 800fc96:	6820      	ldr	r0, [r4, #0]
 800fc98:	6813      	ldr	r3, [r2, #0]
 800fc9a:	0605      	lsls	r5, r0, #24
 800fc9c:	f103 0104 	add.w	r1, r3, #4
 800fca0:	d52a      	bpl.n	800fcf8 <_printf_i+0xa4>
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	6011      	str	r1, [r2, #0]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	da03      	bge.n	800fcb2 <_printf_i+0x5e>
 800fcaa:	222d      	movs	r2, #45	; 0x2d
 800fcac:	425b      	negs	r3, r3
 800fcae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fcb2:	486f      	ldr	r0, [pc, #444]	; (800fe70 <_printf_i+0x21c>)
 800fcb4:	220a      	movs	r2, #10
 800fcb6:	e039      	b.n	800fd2c <_printf_i+0xd8>
 800fcb8:	2973      	cmp	r1, #115	; 0x73
 800fcba:	f000 809d 	beq.w	800fdf8 <_printf_i+0x1a4>
 800fcbe:	d808      	bhi.n	800fcd2 <_printf_i+0x7e>
 800fcc0:	296f      	cmp	r1, #111	; 0x6f
 800fcc2:	d020      	beq.n	800fd06 <_printf_i+0xb2>
 800fcc4:	2970      	cmp	r1, #112	; 0x70
 800fcc6:	d1dd      	bne.n	800fc84 <_printf_i+0x30>
 800fcc8:	6823      	ldr	r3, [r4, #0]
 800fcca:	f043 0320 	orr.w	r3, r3, #32
 800fcce:	6023      	str	r3, [r4, #0]
 800fcd0:	e003      	b.n	800fcda <_printf_i+0x86>
 800fcd2:	2975      	cmp	r1, #117	; 0x75
 800fcd4:	d017      	beq.n	800fd06 <_printf_i+0xb2>
 800fcd6:	2978      	cmp	r1, #120	; 0x78
 800fcd8:	d1d4      	bne.n	800fc84 <_printf_i+0x30>
 800fcda:	2378      	movs	r3, #120	; 0x78
 800fcdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fce0:	4864      	ldr	r0, [pc, #400]	; (800fe74 <_printf_i+0x220>)
 800fce2:	e055      	b.n	800fd90 <_printf_i+0x13c>
 800fce4:	6813      	ldr	r3, [r2, #0]
 800fce6:	1d19      	adds	r1, r3, #4
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	6011      	str	r1, [r2, #0]
 800fcec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	e08c      	b.n	800fe12 <_printf_i+0x1be>
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	6011      	str	r1, [r2, #0]
 800fcfc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fd00:	bf18      	it	ne
 800fd02:	b21b      	sxthne	r3, r3
 800fd04:	e7cf      	b.n	800fca6 <_printf_i+0x52>
 800fd06:	6813      	ldr	r3, [r2, #0]
 800fd08:	6825      	ldr	r5, [r4, #0]
 800fd0a:	1d18      	adds	r0, r3, #4
 800fd0c:	6010      	str	r0, [r2, #0]
 800fd0e:	0628      	lsls	r0, r5, #24
 800fd10:	d501      	bpl.n	800fd16 <_printf_i+0xc2>
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	e002      	b.n	800fd1c <_printf_i+0xc8>
 800fd16:	0668      	lsls	r0, r5, #25
 800fd18:	d5fb      	bpl.n	800fd12 <_printf_i+0xbe>
 800fd1a:	881b      	ldrh	r3, [r3, #0]
 800fd1c:	4854      	ldr	r0, [pc, #336]	; (800fe70 <_printf_i+0x21c>)
 800fd1e:	296f      	cmp	r1, #111	; 0x6f
 800fd20:	bf14      	ite	ne
 800fd22:	220a      	movne	r2, #10
 800fd24:	2208      	moveq	r2, #8
 800fd26:	2100      	movs	r1, #0
 800fd28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd2c:	6865      	ldr	r5, [r4, #4]
 800fd2e:	60a5      	str	r5, [r4, #8]
 800fd30:	2d00      	cmp	r5, #0
 800fd32:	f2c0 8095 	blt.w	800fe60 <_printf_i+0x20c>
 800fd36:	6821      	ldr	r1, [r4, #0]
 800fd38:	f021 0104 	bic.w	r1, r1, #4
 800fd3c:	6021      	str	r1, [r4, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d13d      	bne.n	800fdbe <_printf_i+0x16a>
 800fd42:	2d00      	cmp	r5, #0
 800fd44:	f040 808e 	bne.w	800fe64 <_printf_i+0x210>
 800fd48:	4665      	mov	r5, ip
 800fd4a:	2a08      	cmp	r2, #8
 800fd4c:	d10b      	bne.n	800fd66 <_printf_i+0x112>
 800fd4e:	6823      	ldr	r3, [r4, #0]
 800fd50:	07db      	lsls	r3, r3, #31
 800fd52:	d508      	bpl.n	800fd66 <_printf_i+0x112>
 800fd54:	6923      	ldr	r3, [r4, #16]
 800fd56:	6862      	ldr	r2, [r4, #4]
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	bfde      	ittt	le
 800fd5c:	2330      	movle	r3, #48	; 0x30
 800fd5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd62:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd66:	ebac 0305 	sub.w	r3, ip, r5
 800fd6a:	6123      	str	r3, [r4, #16]
 800fd6c:	f8cd 8000 	str.w	r8, [sp]
 800fd70:	463b      	mov	r3, r7
 800fd72:	aa03      	add	r2, sp, #12
 800fd74:	4621      	mov	r1, r4
 800fd76:	4630      	mov	r0, r6
 800fd78:	f7ff fef6 	bl	800fb68 <_printf_common>
 800fd7c:	3001      	adds	r0, #1
 800fd7e:	d14d      	bne.n	800fe1c <_printf_i+0x1c8>
 800fd80:	f04f 30ff 	mov.w	r0, #4294967295
 800fd84:	b005      	add	sp, #20
 800fd86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd8a:	4839      	ldr	r0, [pc, #228]	; (800fe70 <_printf_i+0x21c>)
 800fd8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fd90:	6813      	ldr	r3, [r2, #0]
 800fd92:	6821      	ldr	r1, [r4, #0]
 800fd94:	1d1d      	adds	r5, r3, #4
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	6015      	str	r5, [r2, #0]
 800fd9a:	060a      	lsls	r2, r1, #24
 800fd9c:	d50b      	bpl.n	800fdb6 <_printf_i+0x162>
 800fd9e:	07ca      	lsls	r2, r1, #31
 800fda0:	bf44      	itt	mi
 800fda2:	f041 0120 	orrmi.w	r1, r1, #32
 800fda6:	6021      	strmi	r1, [r4, #0]
 800fda8:	b91b      	cbnz	r3, 800fdb2 <_printf_i+0x15e>
 800fdaa:	6822      	ldr	r2, [r4, #0]
 800fdac:	f022 0220 	bic.w	r2, r2, #32
 800fdb0:	6022      	str	r2, [r4, #0]
 800fdb2:	2210      	movs	r2, #16
 800fdb4:	e7b7      	b.n	800fd26 <_printf_i+0xd2>
 800fdb6:	064d      	lsls	r5, r1, #25
 800fdb8:	bf48      	it	mi
 800fdba:	b29b      	uxthmi	r3, r3
 800fdbc:	e7ef      	b.n	800fd9e <_printf_i+0x14a>
 800fdbe:	4665      	mov	r5, ip
 800fdc0:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdc4:	fb02 3311 	mls	r3, r2, r1, r3
 800fdc8:	5cc3      	ldrb	r3, [r0, r3]
 800fdca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fdce:	460b      	mov	r3, r1
 800fdd0:	2900      	cmp	r1, #0
 800fdd2:	d1f5      	bne.n	800fdc0 <_printf_i+0x16c>
 800fdd4:	e7b9      	b.n	800fd4a <_printf_i+0xf6>
 800fdd6:	6813      	ldr	r3, [r2, #0]
 800fdd8:	6825      	ldr	r5, [r4, #0]
 800fdda:	6961      	ldr	r1, [r4, #20]
 800fddc:	1d18      	adds	r0, r3, #4
 800fdde:	6010      	str	r0, [r2, #0]
 800fde0:	0628      	lsls	r0, r5, #24
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	d501      	bpl.n	800fdea <_printf_i+0x196>
 800fde6:	6019      	str	r1, [r3, #0]
 800fde8:	e002      	b.n	800fdf0 <_printf_i+0x19c>
 800fdea:	066a      	lsls	r2, r5, #25
 800fdec:	d5fb      	bpl.n	800fde6 <_printf_i+0x192>
 800fdee:	8019      	strh	r1, [r3, #0]
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	6123      	str	r3, [r4, #16]
 800fdf4:	4665      	mov	r5, ip
 800fdf6:	e7b9      	b.n	800fd6c <_printf_i+0x118>
 800fdf8:	6813      	ldr	r3, [r2, #0]
 800fdfa:	1d19      	adds	r1, r3, #4
 800fdfc:	6011      	str	r1, [r2, #0]
 800fdfe:	681d      	ldr	r5, [r3, #0]
 800fe00:	6862      	ldr	r2, [r4, #4]
 800fe02:	2100      	movs	r1, #0
 800fe04:	4628      	mov	r0, r5
 800fe06:	f7f0 f9f3 	bl	80001f0 <memchr>
 800fe0a:	b108      	cbz	r0, 800fe10 <_printf_i+0x1bc>
 800fe0c:	1b40      	subs	r0, r0, r5
 800fe0e:	6060      	str	r0, [r4, #4]
 800fe10:	6863      	ldr	r3, [r4, #4]
 800fe12:	6123      	str	r3, [r4, #16]
 800fe14:	2300      	movs	r3, #0
 800fe16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe1a:	e7a7      	b.n	800fd6c <_printf_i+0x118>
 800fe1c:	6923      	ldr	r3, [r4, #16]
 800fe1e:	462a      	mov	r2, r5
 800fe20:	4639      	mov	r1, r7
 800fe22:	4630      	mov	r0, r6
 800fe24:	47c0      	blx	r8
 800fe26:	3001      	adds	r0, #1
 800fe28:	d0aa      	beq.n	800fd80 <_printf_i+0x12c>
 800fe2a:	6823      	ldr	r3, [r4, #0]
 800fe2c:	079b      	lsls	r3, r3, #30
 800fe2e:	d413      	bmi.n	800fe58 <_printf_i+0x204>
 800fe30:	68e0      	ldr	r0, [r4, #12]
 800fe32:	9b03      	ldr	r3, [sp, #12]
 800fe34:	4298      	cmp	r0, r3
 800fe36:	bfb8      	it	lt
 800fe38:	4618      	movlt	r0, r3
 800fe3a:	e7a3      	b.n	800fd84 <_printf_i+0x130>
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	464a      	mov	r2, r9
 800fe40:	4639      	mov	r1, r7
 800fe42:	4630      	mov	r0, r6
 800fe44:	47c0      	blx	r8
 800fe46:	3001      	adds	r0, #1
 800fe48:	d09a      	beq.n	800fd80 <_printf_i+0x12c>
 800fe4a:	3501      	adds	r5, #1
 800fe4c:	68e3      	ldr	r3, [r4, #12]
 800fe4e:	9a03      	ldr	r2, [sp, #12]
 800fe50:	1a9b      	subs	r3, r3, r2
 800fe52:	42ab      	cmp	r3, r5
 800fe54:	dcf2      	bgt.n	800fe3c <_printf_i+0x1e8>
 800fe56:	e7eb      	b.n	800fe30 <_printf_i+0x1dc>
 800fe58:	2500      	movs	r5, #0
 800fe5a:	f104 0919 	add.w	r9, r4, #25
 800fe5e:	e7f5      	b.n	800fe4c <_printf_i+0x1f8>
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1ac      	bne.n	800fdbe <_printf_i+0x16a>
 800fe64:	7803      	ldrb	r3, [r0, #0]
 800fe66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe6e:	e76c      	b.n	800fd4a <_printf_i+0xf6>
 800fe70:	0801025d 	.word	0x0801025d
 800fe74:	0801026e 	.word	0x0801026e

0800fe78 <__sread>:
 800fe78:	b510      	push	{r4, lr}
 800fe7a:	460c      	mov	r4, r1
 800fe7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe80:	f000 f894 	bl	800ffac <_read_r>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	bfab      	itete	ge
 800fe88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe8a:	89a3      	ldrhlt	r3, [r4, #12]
 800fe8c:	181b      	addge	r3, r3, r0
 800fe8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe92:	bfac      	ite	ge
 800fe94:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe96:	81a3      	strhlt	r3, [r4, #12]
 800fe98:	bd10      	pop	{r4, pc}

0800fe9a <__swrite>:
 800fe9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe9e:	461f      	mov	r7, r3
 800fea0:	898b      	ldrh	r3, [r1, #12]
 800fea2:	05db      	lsls	r3, r3, #23
 800fea4:	4605      	mov	r5, r0
 800fea6:	460c      	mov	r4, r1
 800fea8:	4616      	mov	r6, r2
 800feaa:	d505      	bpl.n	800feb8 <__swrite+0x1e>
 800feac:	2302      	movs	r3, #2
 800feae:	2200      	movs	r2, #0
 800feb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feb4:	f000 f868 	bl	800ff88 <_lseek_r>
 800feb8:	89a3      	ldrh	r3, [r4, #12]
 800feba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800febe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fec2:	81a3      	strh	r3, [r4, #12]
 800fec4:	4632      	mov	r2, r6
 800fec6:	463b      	mov	r3, r7
 800fec8:	4628      	mov	r0, r5
 800feca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fece:	f000 b817 	b.w	800ff00 <_write_r>

0800fed2 <__sseek>:
 800fed2:	b510      	push	{r4, lr}
 800fed4:	460c      	mov	r4, r1
 800fed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feda:	f000 f855 	bl	800ff88 <_lseek_r>
 800fede:	1c43      	adds	r3, r0, #1
 800fee0:	89a3      	ldrh	r3, [r4, #12]
 800fee2:	bf15      	itete	ne
 800fee4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800feea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800feee:	81a3      	strheq	r3, [r4, #12]
 800fef0:	bf18      	it	ne
 800fef2:	81a3      	strhne	r3, [r4, #12]
 800fef4:	bd10      	pop	{r4, pc}

0800fef6 <__sclose>:
 800fef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fefa:	f000 b813 	b.w	800ff24 <_close_r>
	...

0800ff00 <_write_r>:
 800ff00:	b538      	push	{r3, r4, r5, lr}
 800ff02:	4c07      	ldr	r4, [pc, #28]	; (800ff20 <_write_r+0x20>)
 800ff04:	4605      	mov	r5, r0
 800ff06:	4608      	mov	r0, r1
 800ff08:	4611      	mov	r1, r2
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	6022      	str	r2, [r4, #0]
 800ff0e:	461a      	mov	r2, r3
 800ff10:	f7fc ffa0 	bl	800ce54 <_write>
 800ff14:	1c43      	adds	r3, r0, #1
 800ff16:	d102      	bne.n	800ff1e <_write_r+0x1e>
 800ff18:	6823      	ldr	r3, [r4, #0]
 800ff1a:	b103      	cbz	r3, 800ff1e <_write_r+0x1e>
 800ff1c:	602b      	str	r3, [r5, #0]
 800ff1e:	bd38      	pop	{r3, r4, r5, pc}
 800ff20:	2000cab4 	.word	0x2000cab4

0800ff24 <_close_r>:
 800ff24:	b538      	push	{r3, r4, r5, lr}
 800ff26:	4c06      	ldr	r4, [pc, #24]	; (800ff40 <_close_r+0x1c>)
 800ff28:	2300      	movs	r3, #0
 800ff2a:	4605      	mov	r5, r0
 800ff2c:	4608      	mov	r0, r1
 800ff2e:	6023      	str	r3, [r4, #0]
 800ff30:	f7fe f8bb 	bl	800e0aa <_close>
 800ff34:	1c43      	adds	r3, r0, #1
 800ff36:	d102      	bne.n	800ff3e <_close_r+0x1a>
 800ff38:	6823      	ldr	r3, [r4, #0]
 800ff3a:	b103      	cbz	r3, 800ff3e <_close_r+0x1a>
 800ff3c:	602b      	str	r3, [r5, #0]
 800ff3e:	bd38      	pop	{r3, r4, r5, pc}
 800ff40:	2000cab4 	.word	0x2000cab4

0800ff44 <_fstat_r>:
 800ff44:	b538      	push	{r3, r4, r5, lr}
 800ff46:	4c07      	ldr	r4, [pc, #28]	; (800ff64 <_fstat_r+0x20>)
 800ff48:	2300      	movs	r3, #0
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	4608      	mov	r0, r1
 800ff4e:	4611      	mov	r1, r2
 800ff50:	6023      	str	r3, [r4, #0]
 800ff52:	f7fe f8b6 	bl	800e0c2 <_fstat>
 800ff56:	1c43      	adds	r3, r0, #1
 800ff58:	d102      	bne.n	800ff60 <_fstat_r+0x1c>
 800ff5a:	6823      	ldr	r3, [r4, #0]
 800ff5c:	b103      	cbz	r3, 800ff60 <_fstat_r+0x1c>
 800ff5e:	602b      	str	r3, [r5, #0]
 800ff60:	bd38      	pop	{r3, r4, r5, pc}
 800ff62:	bf00      	nop
 800ff64:	2000cab4 	.word	0x2000cab4

0800ff68 <_isatty_r>:
 800ff68:	b538      	push	{r3, r4, r5, lr}
 800ff6a:	4c06      	ldr	r4, [pc, #24]	; (800ff84 <_isatty_r+0x1c>)
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	4605      	mov	r5, r0
 800ff70:	4608      	mov	r0, r1
 800ff72:	6023      	str	r3, [r4, #0]
 800ff74:	f7fe f8b5 	bl	800e0e2 <_isatty>
 800ff78:	1c43      	adds	r3, r0, #1
 800ff7a:	d102      	bne.n	800ff82 <_isatty_r+0x1a>
 800ff7c:	6823      	ldr	r3, [r4, #0]
 800ff7e:	b103      	cbz	r3, 800ff82 <_isatty_r+0x1a>
 800ff80:	602b      	str	r3, [r5, #0]
 800ff82:	bd38      	pop	{r3, r4, r5, pc}
 800ff84:	2000cab4 	.word	0x2000cab4

0800ff88 <_lseek_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	4c07      	ldr	r4, [pc, #28]	; (800ffa8 <_lseek_r+0x20>)
 800ff8c:	4605      	mov	r5, r0
 800ff8e:	4608      	mov	r0, r1
 800ff90:	4611      	mov	r1, r2
 800ff92:	2200      	movs	r2, #0
 800ff94:	6022      	str	r2, [r4, #0]
 800ff96:	461a      	mov	r2, r3
 800ff98:	f7fe f8ae 	bl	800e0f8 <_lseek>
 800ff9c:	1c43      	adds	r3, r0, #1
 800ff9e:	d102      	bne.n	800ffa6 <_lseek_r+0x1e>
 800ffa0:	6823      	ldr	r3, [r4, #0]
 800ffa2:	b103      	cbz	r3, 800ffa6 <_lseek_r+0x1e>
 800ffa4:	602b      	str	r3, [r5, #0]
 800ffa6:	bd38      	pop	{r3, r4, r5, pc}
 800ffa8:	2000cab4 	.word	0x2000cab4

0800ffac <_read_r>:
 800ffac:	b538      	push	{r3, r4, r5, lr}
 800ffae:	4c07      	ldr	r4, [pc, #28]	; (800ffcc <_read_r+0x20>)
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	4608      	mov	r0, r1
 800ffb4:	4611      	mov	r1, r2
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	6022      	str	r2, [r4, #0]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	f7fe f858 	bl	800e070 <_read>
 800ffc0:	1c43      	adds	r3, r0, #1
 800ffc2:	d102      	bne.n	800ffca <_read_r+0x1e>
 800ffc4:	6823      	ldr	r3, [r4, #0]
 800ffc6:	b103      	cbz	r3, 800ffca <_read_r+0x1e>
 800ffc8:	602b      	str	r3, [r5, #0]
 800ffca:	bd38      	pop	{r3, r4, r5, pc}
 800ffcc:	2000cab4 	.word	0x2000cab4

0800ffd0 <_init>:
 800ffd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd2:	bf00      	nop
 800ffd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffd6:	bc08      	pop	{r3}
 800ffd8:	469e      	mov	lr, r3
 800ffda:	4770      	bx	lr

0800ffdc <_fini>:
 800ffdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffde:	bf00      	nop
 800ffe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffe2:	bc08      	pop	{r3}
 800ffe4:	469e      	mov	lr, r3
 800ffe6:	4770      	bx	lr
